_00000000:
	.byte 0xff, 0xde, 0xff, 0xe7, 0xff, 0xde, 0xff, 0xe7, 0xff, 0xde, 0xff, 0xe7, 0xff, 0xde, 0xa1, 0xd7
	.byte 0x3f, 0xf1, 0xf9, 0xec, 0x26, 0x5d, 0x5d, 0x19, 0x3f, 0x14, 0xf8, 0x6c, 0x78, 0x2a, 0xa5, 0x93
	.byte 0xc3, 0x53, 0x69, 0xd9, 0xaf, 0x50, 0x35, 0x75, 0xa4, 0x4e, 0x39, 0x30, 0x36, 0x5f, 0x01, 0x3e
	.byte 0x64, 0x86, 0x8a, 0x1a, 0xda, 0x70, 0x37, 0x92, 0x7b, 0x46, 0xf2, 0xda, 0xd9, 0xea, 0x20, 0xe5
	.byte 0x9c, 0xb1, 0xd6, 0x3b, 0x59, 0x8a, 0x3e, 0xa4, 0x05, 0xc6, 0x0b, 0xa8, 0x36, 0x40, 0xdd, 0xa0
	.byte 0x6e, 0x5b, 0x52, 0x06, 0x7b, 0xce, 0x6c, 0xce, 0xdf, 0x78, 0x67, 0xb2, 0x97, 0x7d, 0x1c, 0x73
	.byte 0xb4, 0xff, 0x13, 0x09, 0x99, 0xf2, 0x95, 0xab, 0xd6, 0x48, 0x14, 0xdf, 0x70, 0x47, 0xe5, 0xb5
	.byte 0x6c, 0x3c, 0x83, 0x05, 0x62, 0xe6, 0x87, 0xef, 0x0c, 0x86, 0xff, 0x34, 0x42, 0xdc, 0x28, 0xf0
	.byte 0x20, 0x12, 0xfc, 0x58, 0xef, 0xf1, 0xb4, 0xb4, 0x94, 0x93, 0x19, 0xb9, 0x5f, 0x0f, 0xda, 0xe6
	.byte 0xea, 0x45, 0xa9, 0x41, 0x8e, 0x4e, 0xdf, 0x8f, 0x95, 0xb3, 0xe6, 0xaa, 0x4c, 0x9f, 0xd4, 0xff
	.byte 0xef, 0x89, 0xc9, 0xc5, 0x92, 0x43, 0x92, 0x8c, 0xe8, 0x24, 0x66, 0x3c, 0xeb, 0x1d, 0xb7, 0xeb
	.byte 0x09, 0xea, 0x5c, 0xd4, 0x2e, 0xfb, 0x70, 0x16, 0x6f, 0xe5, 0x1e, 0xdd, 0x85, 0xc5, 0xf2, 0x06
	.byte 0xb0, 0xc9, 0x0c, 0x43, 0x63, 0x37, 0xab, 0xb8, 0x35, 0x3b, 0x27, 0xb8, 0xb8, 0x99, 0x9e, 0x08
_020000D0:
	.byte 0x0B, 0xDF, 0x70, 0x47
_020000D4:
	.byte 0x3F, 0xC6, 0x62, 0x63, 0x99, 0x95, 0x12, 0xD9, 0xAA, 0xC0, 0x3E, 0x40
	.byte 0x7E, 0x39, 0x37, 0x93, 0xBA, 0x73, 0xEB, 0xFF, 0x51, 0xB6, 0x88, 0xF0, 0x28, 0x8A, 0xAA, 0x27
	.byte 0x71, 0x63, 0x35, 0xB1, 0x23, 0x9B, 0x61, 0x2B, 0x57, 0xFA, 0x77, 0x70, 0x01, 0x0A, 0xF9, 0x62
	.byte 0x2F, 0x0D, 0xAD, 0xD6, 0x94, 0x62, 0x5D, 0x12, 0x88, 0x0F, 0xD1, 0x9C, 0x2D, 0x1A, 0x0C, 0xBD
	.byte 0x49, 0x82, 0xEF, 0xE6, 0xEE, 0x79, 0xC3, 0xAB, 0x67, 0x9F, 0x6D, 0x42, 0xBB, 0x3E, 0x53, 0x46
	.byte 0x34, 0x8F, 0x40, 0x0E, 0xE7, 0xC2, 0xC4, 0x8B, 0x13, 0x1B, 0x56, 0xC2, 0x98, 0x4B, 0x4B, 0x3E
	.byte 0x08, 0x79, 0x1B, 0x3A, 0x2E, 0x88, 0xAD, 0x7A, 0x71, 0xED, 0x43, 0x1C, 0x0E, 0xBC, 0x51, 0xF5
	.byte 0x43, 0x33, 0x42, 0x3A, 0x9E, 0x0C, 0xEA, 0xB7, 0x15, 0xDF, 0x70, 0x47, 0x1F, 0xC0, 0x80, 0x16
	.byte 0x47, 0x22, 0xC7, 0x63, 0xDF, 0x49, 0xC0, 0x37, 0xE6, 0xF4, 0x7E, 0x7C, 0x1C, 0x0A, 0x7B, 0x79
	.byte 0x1E, 0xB9, 0xB2, 0x51, 0x45, 0x99, 0x5A, 0x43, 0xF1, 0x42, 0xE0, 0x16, 0x9C, 0x07, 0x12, 0xCA
	.byte 0x59, 0x56, 0xD1, 0x71, 0xE8, 0x33, 0x53, 0xFE, 0x64, 0xCF, 0xF4, 0xA5, 0x97, 0x84, 0x04, 0x0D
	.byte 0x6E, 0xE6, 0x97, 0x8B, 0x62, 0x17, 0x9A, 0x2F, 0xF9, 0x50, 0x89, 0x1F, 0x36, 0x85, 0xFC, 0x03
	.byte 0x01, 0x02, 0xBA, 0x4D, 0xCF, 0xCF, 0x91, 0x4C, 0x15, 0x5E, 0x6D, 0x98, 0x77, 0x79, 0x5F, 0x47
	.byte 0x25, 0x70, 0x4C, 0xE8, 0x63, 0x3E, 0x20, 0x86, 0xFB, 0xF9, 0x70, 0xE5, 0xFD, 0xB4, 0x9A, 0x58
	.byte 0xCA, 0x61, 0xBA, 0x24, 0x28, 0x8C, 0xDB, 0xD1, 0x10, 0x6B, 0xA9, 0x3D, 0xBE, 0xFB, 0x6F, 0x81
	.byte 0x49, 0x01, 0xD3, 0x87, 0x03, 0x58, 0xDB, 0xAE, 0xA5, 0x64, 0x5B, 0x4A, 0xC6, 0x32, 0x11, 0xDF
	.byte 0x70, 0x47, 0x40, 0xFA, 0x5C, 0xD2, 0x12, 0xCC, 0xED, 0x55, 0x9B, 0x98, 0xC1, 0x0B, 0x3C, 0x95
	.byte 0xAA, 0x9D, 0xD4, 0x6E, 0x88, 0x77, 0xA8, 0xB7, 0xCA, 0xB9, 0x77, 0x5E, 0x6B, 0x8F, 0x97, 0xFD
	.byte 0xA7, 0x4A, 0xC0, 0xB2, 0x71, 0x8C, 0x5E, 0x9E, 0x94, 0xE2, 0x6D, 0x55, 0xC9, 0x58, 0xFD, 0xB3
	.byte 0xE9, 0x75, 0x57, 0x6E, 0x21, 0x52, 0xBE, 0xA1, 0x91, 0xF4, 0x1B, 0x84, 0x85, 0xF0, 0x3E, 0xED
	.byte 0x85, 0x85, 0xE2, 0x95, 0x80, 0xA7, 0xB9, 0x24, 0x1C, 0x0D, 0xE1, 0x68, 0x22, 0x74, 0xE5, 0xFB
	.byte 0x20, 0x7E, 0xA7, 0xB0, 0x16, 0x97, 0x7C, 0xD0, 0x1E, 0xF1, 0xC0, 0x2F, 0x27, 0xFC, 0x62, 0x43
	.byte 0xFD, 0x8D, 0xF6, 0xE6, 0x09, 0xDF, 0x08, 0x1C, 0x70, 0x47, 0x25, 0xB5, 0x55, 0x27, 0x11, 0x90
	.byte 0x9F, 0xCD, 0x72, 0xE2, 0xBD, 0x88, 0x2F, 0x9E, 0x7A, 0xE5, 0xF0, 0x8D, 0x5B, 0xA1, 0xC3, 0x47
	.byte 0xC3, 0xC9, 0xA5, 0xCB, 0x2A, 0x16, 0xAA, 0x2F, 0x9A, 0xE7, 0x0A, 0x9A, 0xF8, 0x6D, 0x52, 0xFE
	.byte 0xA4, 0x38, 0xA4, 0x40, 0x29, 0x86, 0x62, 0x81, 0x45, 0xF0, 0x16, 0x34, 0x1D, 0x36, 0x57, 0x86
	.byte 0x03, 0x79, 0xD1, 0xA9, 0xED, 0xE6, 0x9A, 0x06, 0x8E, 0xBD, 0x2E, 0x22, 0x57, 0x33, 0x7A, 0xDB
	.byte 0xB9, 0x78, 0xCC, 0xEF, 0xA7, 0x1A, 0x72, 0xCA, 0x43, 0xEC, 0x49, 0x77, 0x7A, 0x0F, 0xA2, 0xEE
	.byte 0x24, 0x51, 0x66, 0x32, 0x65, 0x48, 0xD1, 0xA0, 0xAB, 0x81, 0x6E, 0x05, 0x91, 0xD1, 0xA7, 0x94
	.byte 0x2C, 0x38, 0x58, 0x6B, 0x13, 0xDF, 0x70, 0x47, 0x12, 0xAE, 0x97, 0x98, 0x12, 0xDE, 0xF5, 0xFD
	.byte 0x91, 0x09, 0x0B, 0xFB, 0x14, 0xAC, 0xC9, 0x4B, 0x4C, 0xB3, 0x0D, 0x5F, 0xE2, 0xCA, 0x7D, 0x62
	.byte 0x0D, 0x4E, 0xB4, 0x4A, 0x03, 0x7F, 0x42, 0xE8, 0x37, 0x16, 0x54, 0xF4, 0xF2, 0x8A, 0x5A, 0xB0
	.byte 0x49, 0xD6, 0x9C, 0x54, 0xE4, 0x84, 0x47, 0x41, 0xAA, 0x05, 0x1C, 0xA5, 0x99, 0xFB, 0xEC, 0x11
	.byte 0x9C, 0xD8, 0xE7, 0xDC, 0x0D, 0x5C, 0x5D, 0x77, 0xB1, 0x80, 0xCE, 0x80, 0xCB, 0xF1, 0x95, 0xED
	.byte 0xC1, 0x81, 0x91, 0xD5, 0xE0, 0x39, 0x73, 0x96, 0x09, 0xB2, 0x41, 0x23, 0xF1, 0xCB, 0x03, 0x3D
	.byte 0x36, 0x14, 0x40, 0xA5, 0xE8, 0xC5, 0x6E, 0x61, 0x8B, 0xFC, 0x2B, 0x84, 0x54, 0x30, 0x10, 0xDF
	.byte 0x70, 0x47, 0xC8, 0x71, 0x86, 0x13, 0x29, 0xC1, 0xD7, 0x53, 0x4E, 0x1D, 0xE5, 0xD7, 0xCA, 0x34
	.byte 0xAD, 0x90, 0x4F, 0xAB, 0x4F, 0x68, 0x21, 0x8D, 0x05, 0x5D, 0x0E, 0x04, 0x52, 0xA6, 0xC6, 0x4C
	.byte 0x95, 0x65, 0xDF, 0x03, 0x92, 0xAA, 0x21, 0x31, 0x02, 0x13, 0xD9, 0xB6, 0x3D, 0xEB, 0xC2, 0x64
	.byte 0xA1, 0xB5, 0x7A, 0xBD, 0xAD, 0x87, 0x7C, 0x0F, 0xD4, 0xC4, 0x61, 0x11, 0x9B, 0x6E, 0x87, 0x76
	.byte 0xAB, 0x85, 0xB3, 0xED, 0xCA, 0x00, 0xA7, 0x46, 0xF1, 0x15, 0xCF, 0xC7, 0x53, 0x59, 0x08, 0xAD
	.byte 0x29, 0x5B, 0x12, 0xDF, 0x70, 0x47, 0xE4, 0xB8, 0xE8, 0x5A, 0xF3, 0xAC, 0xFC, 0x92, 0x34, 0x56
	.byte 0xB6, 0xBA, 0xC1, 0x67, 0xCD, 0x91, 0xF0, 0xCA, 0xDE, 0xB1, 0xCC, 0x1B, 0xCA, 0xF9, 0x39, 0xCC
	.byte 0x77, 0x25, 0xA0, 0xAA, 0xDA, 0xCA, 0x03, 0x77, 0x0C, 0xB1, 0xE1, 0x72, 0x8D, 0x69, 0xFA, 0x2F
	.byte 0xF9, 0xCC, 0xEB, 0x7B, 0x1A, 0x9C, 0xEA, 0x29, 0xAB, 0xED, 0xCF, 0x86, 0xD2, 0x30, 0xEF, 0xDB
	.byte 0x8C, 0xFB, 0xFA, 0xD6, 0x1C, 0xFD, 0xE1, 0x36, 0x3C, 0x4A, 0x34, 0x54, 0x19, 0xE9, 0x47, 0x2A
	.byte 0x0D, 0x46, 0xE4, 0x8A, 0xB9, 0x61, 0xED, 0xC7, 0xEB, 0x3F, 0xC0, 0x45, 0x5C, 0xF7, 0xA3, 0xF5
	.byte 0xE4, 0xE6, 0x85, 0xC6, 0xC4, 0x14, 0xEC, 0x90, 0x45, 0xB3, 0x09, 0xDF, 0x70, 0x47, 0xCF, 0x70
	.byte 0x92, 0x19, 0xF3, 0x80, 0xD1, 0x07, 0xA9, 0xA7, 0x4A, 0x1D, 0x76, 0x74, 0xC5, 0xEB, 0xED, 0x6A
	.byte 0xCA, 0x15, 0x55, 0x9D, 0xB9, 0x27, 0xFC, 0xA3, 0x73, 0xE1, 0x32, 0x56, 0xD4, 0x9B, 0xAD, 0x6B
	.byte 0xE3, 0x19, 0x37, 0xB2, 0xF3, 0x6F, 0xC4, 0xF3, 0x50, 0x62, 0x0C, 0x6A, 0x63, 0xC5, 0x0A, 0x5A
	.byte 0xD4, 0x31, 0xE8, 0xD2, 0xCE, 0x9C, 0xF0, 0x66, 0xD2, 0xD8, 0xB7, 0xF9, 0xB6, 0x3E, 0x07, 0x51
	.byte 0x0F, 0x4E, 0x2E, 0x26, 0xF7, 0x9F, 0x0B, 0x1A, 0x44, 0x21, 0xA8, 0x15, 0x2D, 0x5D, 0xD8, 0x03
	.byte 0xBC, 0x2D, 0x47, 0x48, 0x70, 0x74, 0x86, 0x2F, 0x00, 0x51, 0xA5, 0x0A, 0x27, 0x1E, 0x4F, 0x9D
	.byte 0x16, 0xCB, 0x19, 0xC2, 0xF7, 0xE7, 0xA1, 0x4F, 0x00, 0xDF, 0x70, 0x47, 0x16, 0xC1, 0x85, 0x18
	.byte 0xD3, 0x91, 0x16, 0xF8, 0x36, 0xD9, 0x63, 0x91, 0x8D, 0x7E, 0xE2, 0x95, 0x36, 0xA8, 0x41, 0xFB
	.byte 0x9F, 0x3D, 0x5D, 0x84, 0x83, 0x6E, 0x4A, 0xCF, 0x5C, 0xBC, 0xFF, 0x2F, 0xDD, 0x0B, 0x3E, 0x54
	.byte 0x99, 0x2A, 0xE3, 0xF8, 0x39, 0xA0, 0x6F, 0x97, 0xE0, 0x36, 0x3B, 0xB1, 0x2A, 0xD0, 0x18, 0xEF
	.byte 0xA7, 0x5A, 0xAF, 0x1F, 0x69, 0xDB, 0xE7, 0xF4, 0xF9, 0xB3, 0x0F, 0xB2, 0xD8, 0x47, 0x41, 0xF0
	.byte 0xD4, 0x63, 0xEF, 0xAC, 0x1D, 0xB6, 0x0A, 0x79, 0xE2, 0xB8, 0x10, 0x01, 0x61, 0x4F, 0x52, 0xC6
	.byte 0xD3, 0x1E, 0xC7, 0xDE, 0x3F, 0x4D, 0xD0, 0x1C, 0x86, 0x50, 0x00, 0x91, 0x2A, 0xBA, 0x37, 0x61
	.byte 0x62, 0xFB, 0x9E, 0x5D, 0xED, 0xBB, 0xFD, 0x75, 0xC0, 0x15, 0x1A, 0x99, 0xAC, 0x74, 0xC5, 0xDB
	.byte 0x61, 0xCA, 0x54, 0xA6, 0x22, 0x17, 0x12, 0x9A, 0x99, 0x8B, 0xF5, 0x0C, 0xDB, 0x7D
_020004BE:
	.byte 0x03, 0xdf, 0x70, 0x47
_020004C2:
	.byte 0xE5, 0xFD, 0xC3, 0x52, 0xC3, 0xFC, 0x3B, 0x45, 0xD2, 0x9C, 0xED, 0x65, 0x72, 0xC4
	.byte 0x43, 0x4F, 0xBC, 0xBC, 0x19, 0x8C, 0x21, 0x2D, 0xE7, 0xF9, 0x16, 0x77, 0xEF, 0xB1, 0x0B, 0x12
	.byte 0x9C, 0x23, 0xAA, 0x62, 0x8B, 0xF3, 0x74, 0xD1, 0x79, 0x32, 0x1F, 0xEC, 0xB5, 0xED, 0x64, 0xBC
	.byte 0x9D, 0xA5, 0x6D, 0x12, 0x29, 0x3C, 0xC2, 0x3E, 0xFF, 0x7C, 0x06, 0x46, 0x77, 0x39, 0xC5, 0x7B
	.byte 0xB3, 0x76, 0x27, 0x4A, 0xD5, 0x6A, 0x2D, 0x1D, 0x11, 0xF2, 0x87, 0x20, 0xE4, 0xE7, 0x64, 0x9C
	.byte 0x55, 0xCD, 0x2D, 0x75, 0x2B, 0xDF, 0x37, 0xC9, 0x6E, 0xEA, 0x42, 0x2B, 0x31, 0x43, 0x29, 0x3F
	.byte 0x16, 0x9A, 0x67, 0xCE, 0x29, 0x18, 0x96, 0xB5, 0x79, 0xB8, 0x2D, 0x79, 0x06, 0x63, 0x0D, 0xDF
	.byte 0x70, 0x47, 0xFA, 0x4C, 0x47, 0x09, 0x7C, 0xD8, 0x13, 0xAF, 0xAB, 0x81, 0x0D, 0x84, 0x77, 0x0C
	.byte 0xAE, 0x83, 0x66, 0x96, 0xF4, 0x54, 0x2B, 0x7D, 0xF9, 0x15, 0xFF, 0xCD, 0x0F, 0xEA, 0x6A, 0x69
	.byte 0xB5, 0xFD, 0xAD, 0xE7, 0x62, 0x1C, 0xB4, 0xD7, 0x3A, 0xC2, 0x35, 0x56, 0x47, 0xE1, 0xCA, 0x52
	.byte 0x56, 0x09, 0xE6, 0x29, 0xB7, 0xF5, 0xD7, 0xF5, 0x35, 0x30, 0x8B, 0x5D, 0x90, 0xB7, 0xCC, 0x4F
	.byte 0xE5, 0x39, 0x07, 0x2F, 0x72, 0xCC, 0xB4, 0x11, 0xD5, 0x97, 0x11, 0xBF, 0x40, 0x99, 0x7F, 0xE1
	.byte 0xA4, 0x42, 0x8D, 0x2E, 0x01, 0x5E, 0xC6, 0x4F, 0x68, 0x06, 0x0F, 0x28, 0x73, 0x64, 0x68, 0x15
	.byte 0xB3, 0xA9, 0xA6, 0x92, 0x9F, 0x95, 0x7A, 0xE8, 0x35, 0x0B, 0x4E, 0xAD, 0x72, 0xCC, 0x00, 0x22
	.byte 0x05, 0xDF, 0x70, 0x47, 0xBB, 0x77, 0x05, 0xA9, 0xA8, 0x46, 0x72, 0xDD, 0xD9, 0x26, 0x59, 0x2D
	.byte 0x5F, 0xAA, 0x79, 0xC1, 0x27, 0x4D, 0x28, 0xF2, 0xF6, 0x9F, 0xD5, 0x92, 0xDD, 0x5C, 0xE3, 0xE9
	.byte 0xA0, 0x62, 0x35, 0x35, 0xA2, 0x03, 0x3C, 0xB0, 0xDE, 0x1B, 0xD5, 0xBA, 0xE2, 0xBB, 0x94, 0x9A
	.byte 0x8B, 0x77, 0x74, 0xDF, 0x28, 0x12, 0x9C, 0x06, 0xF6, 0xDE, 0x4C, 0x7D, 0x2D, 0x4C, 0x6C, 0xB6
	.byte 0x60, 0xE4, 0x21, 0x16, 0xB9, 0xE6, 0x48, 0x4F, 0xF2, 0x10, 0x41, 0xFA, 0x51, 0xC3, 0x7C, 0x1A
	.byte 0x29, 0xF3, 0x7B, 0x13, 0x19, 0xCB, 0x0C, 0x45, 0x10, 0x7C, 0xFE, 0x2F, 0x77, 0x13, 0xE7, 0x48
	.byte 0x30, 0xCA, 0xEE, 0x62, 0x56, 0x31, 0x1D, 0xDF, 0xDA, 0xC8, 0xE6, 0x63, 0x2E, 0x4E, 0x0E, 0xDF
	.byte 0x70, 0x47, 0xC8, 0x10, 0x6F, 0x6A, 0xEF, 0x1C, 0xC4, 0xDA, 0x38, 0x04, 0x8E, 0x59, 0x3E, 0xC1
	.byte 0xCB, 0xA9, 0x41, 0x62, 0xFE, 0x6D, 0xBE, 0xAF, 0x53, 0xDA, 0xAB, 0x33, 0x32, 0x00, 0xD3, 0xB4
	.byte 0x71, 0xB6, 0x2A, 0x5B, 0x8B, 0xB7, 0x02, 0x70, 0x95, 0xB0, 0x94, 0xFB, 0xC5, 0x9F, 0x0F, 0xB3
	.byte 0x20, 0xFF, 0x45, 0x8C, 0x7D, 0xCB, 0x5C, 0x2D, 0x8A, 0xBD, 0xD0, 0x90, 0x65, 0x80, 0xB8, 0x53
	.byte 0x73, 0x25, 0xCC, 0x21, 0xBD, 0xE9, 0xB9, 0xC9, 0xDA, 0xD1, 0x1D, 0xA2, 0xBE, 0x09, 0x49, 0x88
	.byte 0x6D, 0x22, 0xB1, 0xB4, 0x0B, 0x40, 0x3A, 0x66, 0xAD, 0x8F, 0xA7, 0x84, 0x9A, 0x55, 0x10, 0x70
	.byte 0x0F, 0x27, 0x9B, 0x23, 0xBC, 0xBA, 0x16, 0x69, 0xDC, 0x1C, 0x3F, 0x09, 0x2D, 0x99, 0xC6, 0xC2
	.byte 0x3C, 0xD1, 0x2A, 0x95, 0x0C, 0xDF, 0x70, 0x47, 0x3F, 0x99, 0x16, 0x34, 0xCF, 0x0A, 0x19, 0x9C
	.byte 0x3F, 0xD1, 0xD1, 0xE9, 0x85, 0x90, 0xE4, 0xAE, 0x32, 0x5F, 0x6E, 0x50, 0x7D, 0x43, 0x24, 0x36
	.byte 0x17, 0x57, 0x8C, 0x9D, 0x76, 0x17, 0xFF, 0xDA, 0x1C, 0x98, 0x47, 0x25, 0x28, 0xF6, 0x37, 0xCA
	.byte 0xD8, 0xAA, 0x1D, 0xB1, 0x4F, 0xD6, 0x2A, 0x22, 0x4A, 0x22, 0x33, 0xD1, 0xF5, 0xD6, 0xCB, 0xB4
	.byte 0x68, 0xA9, 0x50, 0x8F, 0xDF, 0x43, 0x20, 0x26, 0xA2, 0x5B, 0x70, 0x76, 0xB9, 0x15, 0x39, 0x04
	.byte 0x4B, 0x29, 0x6E, 0x63, 0x2B, 0xFB, 0x7E, 0xF8, 0x1F, 0xBE, 0x7B, 0x66, 0x1C, 0x85, 0xD2, 0xEC
	.byte 0x06, 0xDF, 0x70, 0x47, 0x19, 0xB0, 0x7B, 0x96, 0x80, 0xE3, 0x7A, 0x18, 0x64, 0x40, 0x7F, 0xCF
	.byte 0xF1, 0x37, 0xA5, 0x13, 0x92, 0xFF, 0xD5, 0xAD, 0x50, 0xD7, 0x13, 0x73, 0x8C, 0x2E, 0xF6, 0xAB
	.byte 0x66, 0xA8, 0x1A, 0x8A, 0xE4, 0x9F, 0x4C, 0xD4, 0x22, 0xAC, 0xE6, 0x2C, 0xFA, 0xE5, 0x25, 0x83
	.byte 0x09, 0xB2, 0x93, 0x28, 0x9D, 0x79, 0x09, 0xA5, 0x02, 0x2E, 0x97, 0x99, 0xD1, 0x52, 0x15, 0x67
	.byte 0xF0, 0x7B, 0xAF, 0x2D, 0xEB, 0xA5, 0xF3, 0x35, 0x6C, 0x0A, 0x43, 0x2F, 0x7B, 0xE9, 0x46, 0xBF
	.byte 0x4B, 0x53, 0xA3, 0x53, 0x60, 0xA8, 0xAF, 0x7D, 0x9C, 0xF5, 0x4E, 0x5A, 0x00, 0x22, 0x04, 0xDF
	.byte 0x70, 0x47, 0x14, 0x5C, 0x1A, 0x66, 0x67, 0x87, 0x4D, 0x51, 0x51, 0xD7, 0x91, 0xDD, 0x3B, 0x6B
	.byte 0x73, 0x43, 0xB9, 0x2C, 0x81, 0x67, 0x7F, 0xA4, 0x8A, 0x24, 0xAB, 0xF5, 0x97, 0xDC, 0xB9, 0xA1
	.byte 0x11, 0x05, 0x93, 0x5B, 0xD9, 0xD3, 0x20, 0xFD, 0xB6, 0x6F, 0xC6, 0x85, 0xDB, 0x17, 0x99, 0x2C
	.byte 0x01, 0x3D, 0xFD, 0x7F, 0x58, 0xAF, 0x56, 0x49, 0xE9, 0xDC, 0x97, 0x7E, 0x26, 0xA2, 0xB8, 0x17
	.byte 0x23, 0x10, 0x9D, 0xBE, 0x71, 0x71, 0xDD, 0xF1, 0xB7, 0x6B, 0x16, 0x9D, 0x0F, 0xDF, 0x70, 0x47
	.byte 0x89, 0x84, 0x23, 0x1A, 0x59, 0x9D, 0x64, 0xF2, 0xCF, 0x2E, 0x85, 0x2B, 0x3B, 0x85, 0x37, 0xC1
	.byte 0xC6, 0x32, 0x09, 0x68, 0x30, 0x44, 0x89, 0x3E, 0xF2, 0x08, 0xE9, 0xDB, 0xD5, 0x2A, 0x38, 0xF0
	.byte 0xFF, 0xD3, 0x7F, 0x8C, 0x2A, 0xC3, 0x9F, 0xC1, 0xC8, 0xEC, 0xF5, 0xAC, 0xA2, 0x7E, 0x48, 0x0C
	.byte 0xFD, 0x25, 0x91, 0x57, 0x9D, 0x18, 0xFC, 0x75, 0x2B, 0x38, 0xC7, 0x8B, 0xBE, 0xFB, 0x9A, 0xBD
	.byte 0x82, 0xB6, 0xA2, 0xEB, 0x54, 0x79, 0x8C, 0x6C, 0x89, 0x56, 0x05, 0xA3, 0x19, 0x2B, 0x41, 0x60
	.byte 0x86, 0x5C, 0x1A, 0x12, 0x53, 0xD6, 0xD4, 0xB8, 0x07, 0xBC, 0x6C, 0x80, 0x8A, 0x06, 0xF1, 0xC1
	.byte 0x57, 0x43, 0x4E, 0x26, 0x12, 0x27, 0x90, 0x93, 0xD0, 0x4C, 0x47, 0xD4, 0x00, 0x9F, 0x00, 0x00

	arm_func_start _start
_start: ; 0x02000800
	mov ip, #0x4000000
	str ip, [ip, #0x208]
	arm_func_end _start
_02000808:
	ldrh r0, [ip, #6]
	cmp r0, #0
	bne _02000808
	bl init_cp15
	mov r0, #0x13
	msr cpsr_c, r0
	ldr r0, _02000918 ; =0x027E0000
	add r0, r0, #0x3fc0
	mov sp, r0
	mov r0, #0x12
	msr cpsr_c, r0
	ldr r0, _02000918 ; =0x027E0000
	add r0, r0, #0x3fc0
	sub r0, r0, #0x40
	sub sp, r0, #4
	tst sp, #4
	subeq sp, sp, #4
	ldr r1, _0200091C ; =0x00000400
	sub r1, r0, r1
	mov r0, #0x1f
	msr cpsr_fsxc, r0
	sub sp, r1, #4
	tst sp, #4
	subne sp, sp, #4
	mov r0, #0
	ldr r1, _02000918 ; =0x027E0000
	mov r2, #0x4000
	bl INITi_CpuClear32
	mov r0, #0
	ldr r1, _02000920 ; =0x05000000
	mov r2, #0x400
	bl INITi_CpuClear32
	mov r0, #0x200
	ldr r1, _02000924 ; =0x07000000
	mov r2, #0x400
	bl INITi_CpuClear32
	ldr r1, _02000928 ; =0x02000B88
	ldr r0, [r1, #0x14]
	bl MIi_UncompressBackward
	bl do_autoload
	ldr r0, _02000928 ; =0x02000B88
	ldr r1, [r0, #0xc]
	ldr r2, [r0, #0x10]
	mov r3, r1
	mov r0, #0
_020008BC:
	cmp r1, r2
	strlo r0, [r1], #4
	blo _020008BC
	bic r1, r3, #0x1f
_020008CC:
	mcr p15, #0, r0, c7, c10, #4
	mcr p15, #0, r1, c7, c5, #1
	mcr p15, #0, r1, c7, c14, #1
	add r1, r1, #0x20
	cmp r1, r2
	blt _020008CC
	ldr r1, _0200092C ; =0x02FFFF9C
	str r0, [r1]
	ldr r1, _02000918 ; =0x027E0000
	add r1, r1, #0x3fc0
	add r1, r1, #0x3c
	ldr r0, _02000930 ; =0x01FF8000
	str r0, [r1]
	bl _fp_init
	bl NitroStartUp
	bl __call_static_initializers
	ldr r1, _02000934 ; =NitroMain
	ldr lr, _02000938 ; =0xFFFF0000
	bx r1
	.align 2, 0_02000918: .word 0x027E0000
_0200091C: .word 0x00000400
_02000920: .word 0x05000000
_02000924: .word 0x07000000
_02000928: .word 0x02000B88
_0200092C: .word 0x02FFFF9C
_02000930: .word 0x01FF8000
_02000934: .word NitroMain
_02000938: .word 0xFFFF0000

	arm_func_start INITi_CpuClear32
INITi_CpuClear32: ; 0x0200093C
	add ip, r1, r2
	arm_func_end INITi_CpuClear32
_02000940:
	cmp r1, ip
	stmlt r1!, {r0}
	blt _02000940
	bx lr

	arm_func_start MIi_UncompressBackward
MIi_UncompressBackward: ; 0x02000950
	cmp r0, #0
	beq _020009F8
	push {r4, r5, r6, r7}
	ldmdb r0, {r1, r2}
	add r2, r0, r2
	sub r3, r0, r1, lsr #24
	bic r1, r1, #0xff000000
	sub r1, r0, r1
	mov r4, r2
	arm_func_end MIi_UncompressBackward
_02000974:
	cmp r3, r1
	ble _020009D4
	ldrb r5, [r3, #-1]!
	mov r6, #8
_02000984:
	subs r6, r6, #1
	blt _02000974
	tst r5, #0x80
	bne _020009A0
	ldrb r0, [r3, #-1]!
	strb r0, [r2, #-1]!
	b _020009C8
_020009A0:
	ldrb ip, [r3, #-1]!
	ldrb r7, [r3, #-1]!
	orr r7, r7, ip, lsl #8
	bic r7, r7, #0xf000
	add r7, r7, #2
	add ip, ip, #0x20
_020009B8:
	ldrb r0, [r2, r7]
	strb r0, [r2, #-1]!
	subs ip, ip, #0x10
	bge _020009B8
_020009C8:
	cmp r3, r1
	lsl r5, r5, #1
	bgt _02000984
_020009D4:
	mov r0, #0
	bic r3, r1, #0x1f
_020009DC:
	mcr p15, #0, r0, c7, c10, #4
	mcr p15, #0, r3, c7, c5, #1
	mcr p15, #0, r3, c7, c14, #1
	add r3, r3, #0x20
	cmp r3, r4
	blt _020009DC
	pop {r4, r5, r6, r7}
_020009F8:
	bx lr

	arm_func_start do_autoload
do_autoload: ; 0x020009FC
	ldr r0, _02000A70 ; =0x02000B88
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r3, [r0, #8]
	arm_func_end do_autoload
_02000A0C:
	cmp r1, r2
	beq _02000A6C
	ldr r5, [r1], #4
	ldr r7, [r1], #4
	add r6, r5, r7
	mov r4, r5
_02000A24:
	cmp r4, r6
	ldrmi r7, [r3], #4
	strmi r7, [r4], #4
	bmi _02000A24
	ldr r7, [r1], #4
	add r6, r4, r7
	mov r7, #0
_02000A40:
	cmp r4, r6
	strlo r7, [r4], #4
	blo _02000A40
	bic r4, r5, #0x1f
_02000A50:
	mcr p15, #0, r7, c7, c10, #4
	mcr p15, #0, r4, c7, c5, #1
	mcr p15, #0, r4, c7, c14, #1
	add r4, r4, #0x20
	cmp r4, r6
	blt _02000A50
	b _02000A0C
_02000A6C:
	b _02000A74
	.align 2, 0_02000A70: .word 0x02000B88
_02000A74:
	bx lr

	arm_func_start init_cp15
init_cp15: ; 0x02000A78
	mrc p15, #0, r0, c1, c0, #0
	ldr r1, _02000B30 ; =0x000F9005
	bic r0, r0, r1
	mcr p15, #0, r0, c1, c0, #0
	mov r0, #0
	mcr p15, #0, r0, c7, c5, #0
	mcr p15, #0, r0, c7, c6, #0
	mcr p15, #0, r0, c7, c10, #4
	ldr r0, _02000B34 ; =0x04000033
	mcr p15, #0, r0, c6, c0, #0
	ldr r0, _02000B38 ; =0x02000031
	mcr p15, #0, r0, c6, c1, #0
	ldr r0, _02000B3C ; =0x027FF017
	mcr p15, #0, r0, c6, c2, #0
	ldr r0, _02000B40 ; =0x08000035
	mcr p15, #0, r0, c6, c3, #0
	ldr r0, _02000B44 ; =0x027E0000
	orr r0, r0, #0x1a
	orr r0, r0, #1
	mcr p15, #0, r0, c6, c4, #0
	ldr r0, _02000B48 ; =0x0100002F
	mcr p15, #0, r0, c6, c5, #0
	ldr r0, _02000B4C ; =0xFFFF001D
	mcr p15, #0, r0, c6, c6, #0
	ldr r0, _02000B50 ; =0x02FFF017
	mcr p15, #0, r0, c6, c7, #0
	mov r0, #0x20
	mcr p15, #0, r0, c9, c1, #1
	ldr r0, _02000B44 ; =0x027E0000
	orr r0, r0, #0xa
	mcr p15, #0, r0, c9, c1, #0
	mov r0, #0x4a
	mcr p15, #0, r0, c2, c0, #1
	mov r0, #0x4a
	mcr p15, #0, r0, c2, c0, #0
	mov r0, #0xa
	mcr p15, #0, r0, c3, c0, #0
	ldr r0, _02000B54 ; =0x05101011
	mcr p15, #0, r0, c5, c0, #3
	ldr r0, _02000B58 ; =0x15111111
	mcr p15, #0, r0, c5, c0, #2
	mrc p15, #0, r0, c1, c0, #0
	ldr r1, _02000B5C ; =0x0005707D
	orr r0, r0, r1
	mcr p15, #0, r0, c1, c0, #0
	bx lr
	.align 2, 0_02000B30: .word 0x000F9005
_02000B34: .word 0x04000033
_02000B38: .word 0x02000031
_02000B3C: .word 0x027FF017
_02000B40: .word 0x08000035
_02000B44: .word 0x027E0000
_02000B48: .word 0x0100002F
_02000B4C: .word 0xFFFF001D
_02000B50: .word 0x02FFF017
_02000B54: .word 0x05101011
_02000B58: .word 0x15111111
_02000B5C: .word 0x0005707D
	arm_func_end init_cp15

	arm_func_start NitroStartUp
NitroStartUp: ; 0x02000B60
	bx lr
	arm_func_end NitroStartUp

	arm_func_start OSi_ReferSymbol
OSi_ReferSymbol: ; 0x02000B64
	bx lr
	arm_func_end OSi_ReferSymbol
_02000B68:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x33, 0x81, 0xC0, 0xDE, 0xDE, 0xC0, 0x81, 0x33, 0xA0, 0x76, 0x09, 0x02, 0xB8, 0x76, 0x09, 0x02
	.byte 0x20, 0x39, 0x09, 0x02, 0x20, 0x39, 0x09, 0x02, 0x40, 0xCB, 0x0B, 0x02, 0xE8, 0x28, 0x06, 0x02
	.byte 0x31, 0x75, 0x04, 0x05, 0x21, 0x06, 0xC0, 0xDE, 0xDE, 0xC0, 0x06, 0x21, 0x5B, 0x53, 0x44, 0x4B
	.byte 0x2B, 0x4E, 0x49, 0x4E, 0x54, 0x45, 0x4E, 0x44, 0x4F, 0x3A, 0x42, 0x41, 0x43, 0x4B, 0x55, 0x50
	.byte 0x5D, 0x00, 0x00, 0x00, 0x5B, 0x53, 0x44, 0x4B, 0x2B, 0x55, 0x42, 0x49, 0x51, 0x55, 0x49, 0x54
	.byte 0x4F, 0x55, 0x53, 0x3A, 0x43, 0x50, 0x53, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x53, 0x44, 0x4B
	.byte 0x2B, 0x4E, 0x49, 0x4E, 0x54, 0x45, 0x4E, 0x44, 0x4F, 0x3A, 0x44, 0x57, 0x43, 0x2D, 0x44, 0x4C
	.byte 0x35, 0x2E, 0x33, 0x2E, 0x33, 0x30, 0x30, 0x30, 0x32, 0x2E, 0x32, 0x30, 0x31, 0x30, 0x30, 0x31
	.byte 0x32, 0x36, 0x2E, 0x31, 0x36, 0x30, 0x33, 0x5F, 0x54, 0x57, 0x4C, 0x44, 0x57, 0x43, 0x2D, 0x44
	.byte 0x4C, 0x5F, 0x35, 0x5F, 0x33, 0x5F, 0x50, 0x41, 0x54, 0x43, 0x48, 0x32, 0x5D, 0x00, 0x00, 0x00
	.byte 0x5B, 0x53, 0x44, 0x4B, 0x2B, 0x4E, 0x49, 0x4E, 0x54, 0x45, 0x4E, 0x44, 0x4F, 0x3A, 0x57, 0x69
	.byte 0x46, 0x69, 0x33, 0x2E, 0x33, 0x2E, 0x33, 0x30, 0x30, 0x30, 0x31, 0x2E, 0x32, 0x30, 0x30, 0x39
	.byte 0x31, 0x30, 0x32, 0x39, 0x31, 0x36, 0x35, 0x31, 0x5D, 0x00, 0x00, 0x00, 0x5B, 0x53, 0x44, 0x4B
	.byte 0x2B, 0x55, 0x42, 0x49, 0x51, 0x55, 0x49, 0x54, 0x4F, 0x55, 0x53, 0x3A, 0x53, 0x53, 0x4C, 0x5D
	.byte 0x00, 0x00, 0x00, 0x00, 0x5B, 0x53, 0x44, 0x4B, 0x2B, 0x41, 0x63, 0x74, 0x69, 0x6D, 0x61, 0x67
	.byte 0x69, 0x6E, 0x65, 0x3A, 0x4D, 0x6F, 0x62, 0x69, 0x63, 0x6C, 0x69, 0x70, 0x20, 0x53, 0x44, 0x4B
	.byte 0x20, 0x56, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x5D, 0x00, 0x00, 0x00, 0x00

	arm_func_start NitroMain
NitroMain: ; 0x02000C8C
	ldr ip, _02000C94 ; =NitroMain
	bx ip
	.align 2, 0_02000C94: .word NitroMain
	arm_func_end NitroMain

	arm_func_start FUN_02000c98
FUN_02000c98: ; 0x02000C98
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02003da8
	cmp r5, #0
	beq _02000CC8
	ldr r1, _02000D04 ; =0x027E0000
	mvn r2, r4
	add r1, r1, #0x3000
	ldr r3, [r1, #0xff8]
	and r2, r3, r2
	str r2, [r1, #0xff8]
	arm_func_end FUN_02000c98
_02000CC8:
	bl FUN_02003dbc
	ldr r1, _02000D04 ; =0x027E0000
	add r0, r1, #0x3000
	ldr r0, [r0, #0xff8]
	tst r4, r0
	popne {r4, r5, r6, pc}
	add r0, r1, #0x3f8
	ldr r5, _02000D08 ; =0x027E0060
	add r6, r0, #0x3c00
_02000CEC:
	mov r0, r5
	bl FUN_02001c28
	ldr r0, [r6]
	tst r4, r0
	beq _02000CEC
	pop {r4, r5, r6, pc}
	.align 2, 0_02000D04: .word 0x027E0000
_02000D08: .word 0x027E0060

	arm_func_start FUN_02000d0c
FUN_02000d0c: ; 0x02000D0C
	bx lr
	arm_func_end FUN_02000d0c

	arm_func_start FUN_02000d10
FUN_02000d10: ; 0x02000D10
	push {r3, r4, r5, lr}
	mov r1, #0xc
	mul r5, r0, r1
	ldr r2, _02000D84 ; =FUN_02093920
	ldr r3, _02000D88 ; =0x0208EC20
	lsl r4, r0, #1
	ldr r1, [r2, r5]
	mov r0, #0
	ldrh r3, [r3, r4]
	mov r4, #1
	str r0, [r2, r5]
	cmp r1, #0
	lsl r4, r4, r3
	beq _02000D54
	ldr r0, _02000D8C ; =LAB_02093928
	ldr r0, [r0, r5]
	blx r1
	arm_func_end FUN_02000d10
_02000D54:
	ldr r0, _02000D90 ; =0x027E0000
	ldr r1, _02000D94 ; =LAB_02093924
	add r0, r0, #0x3000
	ldr r2, [r0, #0xff8]
	ldr r1, [r1, r5]
	orr r2, r2, r4
	str r2, [r0, #0xff8]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r0, r4
	bl FUN_0200102c
	pop {r3, r4, r5, pc}
	.align 2, 0_02000D84: .word FUN_02093920
_02000D88: .word 0x0208EC20
_02000D8C: .word LAB_02093928
_02000D90: .word 0x027E0000
_02000D94: .word LAB_02093924

	arm_func_start FUN_02000d98
FUN_02000d98: ; 0x02000D98
	ldr ip, _02000DA4 ; =FUN_02000d10
	mov r0, #0
	bx ip
	.align 2, 0_02000DA4: .word FUN_02000d10
	arm_func_end FUN_02000d98

	arm_func_start FUN_02000da8
FUN_02000da8: ; 0x02000DA8
	ldr ip, _02000DB4 ; =FUN_02000d10
	mov r0, #1
	bx ip
	.align 2, 0_02000DB4: .word FUN_02000d10
	arm_func_end FUN_02000da8

	arm_func_start FUN_02000db8
FUN_02000db8: ; 0x02000DB8
	ldr ip, _02000DC4 ; =FUN_02000d10
	mov r0, #2
	bx ip
	.align 2, 0_02000DC4: .word FUN_02000d10
	arm_func_end FUN_02000db8

	arm_func_start FUN_02000dc8
FUN_02000dc8: ; 0x02000DC8
	ldr ip, _02000DD4 ; =FUN_02000d10
	mov r0, #3
	bx ip
	.align 2, 0_02000DD4: .word FUN_02000d10
	arm_func_end FUN_02000dc8

	arm_func_start FUN_02000dd8
FUN_02000dd8: ; 0x02000DD8
	ldr ip, _02000DE4 ; =FUN_02000d10
	mov r0, #4
	bx ip
	.align 2, 0_02000DE4: .word FUN_02000d10
	arm_func_end FUN_02000dd8

	arm_func_start FUN_02000de8
FUN_02000de8: ; 0x02000DE8
	ldr ip, _02000DF4 ; =FUN_02000d10
	mov r0, #5
	bx ip
	.align 2, 0_02000DF4: .word FUN_02000d10
	arm_func_end FUN_02000de8

	arm_func_start FUN_02000df8
FUN_02000df8: ; 0x02000DF8
	ldr ip, _02000E04 ; =FUN_02000d10
	mov r0, #6
	bx ip
	.align 2, 0_02000E04: .word FUN_02000d10
	arm_func_end FUN_02000df8

	arm_func_start FUN_02000e08
FUN_02000e08: ; 0x02000E08
	ldr ip, _02000E14 ; =FUN_02000d10
	mov r0, #7
	bx ip
	.align 2, 0_02000E14: .word FUN_02000d10
	arm_func_end FUN_02000e08

	arm_func_start FUN_02000e18
FUN_02000e18: ; 0x02000E18
	ldr r0, _02000E2C ; =0x027E0060
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0]
	bx lr
	.align 2, 0_02000E2C: .word 0x027E0060
	arm_func_end FUN_02000e18

	arm_func_start FUN_02000e30
FUN_02000e30: ; 0x02000E30
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, #0
	mov r2, #0xc
	ldr r4, _02000EB0 ; =0x027E0000
	ldr r6, _02000EB4 ; =FUN_02093920
	mov r7, r8
	mov lr, r8
	mov ip, #1
	mov r3, r2
	arm_func_end FUN_02000e30
_02000E54:
	tst r0, #1
	beq _02000E9C
	mov sb, r7
	cmp r8, #8
	blt _02000E78
	cmp r8, #0xb
	suble r5, r8, #8
	mlale sb, r5, r3, r6
	ble _02000E94
_02000E78:
	cmp r8, #3
	blt _02000E90
	cmp r8, #6
	addle r5, r8, #1
	mlale sb, r5, r2, r6
	ble _02000E94
_02000E90:
	str r1, [r4, r8, lsl #2]
_02000E94:
	cmp sb, #0
	stmne sb, {r1, ip, lr}
_02000E9C:
	add r8, r8, #1
	cmp r8, #0x16
	lsr r0, r0, #1
	blt _02000E54
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02000EB0: .word 0x027E0000
_02000EB4: .word FUN_02093920

	arm_func_start FUN_02000eb8
FUN_02000eb8: ; 0x02000EB8
	ldr r2, _02000F3C ; =0x027E0000
	mov r1, #0
	arm_func_end FUN_02000eb8
_02000EC0:
	tst r0, #1
	beq _02000F20
	cmp r1, #8
	blt _02000EF0
	cmp r1, #0xb
	bgt _02000EF0
	sub r1, r1, #8
	mov r0, #0xc
	mul r2, r1, r0
	ldr r0, _02000F40 ; =FUN_02093920
	ldr r0, [r0, r2]
	bx lr
_02000EF0:
	cmp r1, #3
	blt _02000F18
	cmp r1, #6
	bgt _02000F18

	arm_func_start LAB_02000f00
LAB_02000f00: ; 0x02000F00
	add r1, r1, #1
	mov r0, #0xc
	mul r2, r1, r0
	ldr r0, _02000F40 ; =FUN_02093920
	ldr r0, [r0, r2]
	bx lr
	arm_func_end LAB_02000f00
_02000F18:
	ldr r0, [r2]
	bx lr
_02000F20:
	add r1, r1, #1
	cmp r1, #0x16
	lsr r0, r0, #1
	add r2, r2, #4
	blt _02000EC0
	mov r0, #0
	bx lr
	.align 2, 0_02000F3C: .word 0x027E0000
_02000F40: .word FUN_02093920

	arm_func_start FUN_02000f44
FUN_02000f44: ; 0x02000F44
	push {r4, r5, r6, lr}
	mov r3, #0xc
	mul r6, r0, r3
	ldr ip, _02000F80 ; =FUN_02093920
	add r4, r0, #8
	mov r5, #1
	lsl r0, r5, r4
	ldr r3, _02000F84 ; =LAB_02093928
	str r1, [ip, r6]
	str r2, [r3, r6]
	bl FUN_02000ffc
	and r1, r0, r5, lsl r4
	ldr r0, _02000F88 ; =LAB_02093924
	str r1, [r0, r6]
	pop {r4, r5, r6, pc}
	.align 2, 0_02000F80: .word FUN_02093920
_02000F84: .word LAB_02093928
_02000F88: .word LAB_02093924
	arm_func_end FUN_02000f44

	arm_func_start FUN_02000f8c
FUN_02000f8c: ; 0x02000F8C
	push {r3, r4, r5, lr}
	mov r3, #0xc
	mul r5, r0, r3
	ldr ip, _02000FC4 ; =LAB_02093950
	add r0, r0, #3
	mov r4, #1
	lsl r0, r4, r0
	ldr r3, _02000FC8 ; =LAB_02093958
	str r1, [ip, r5]
	str r2, [r3, r5]
	bl FUN_02000ffc
	ldr r0, _02000FCC ; =LAB_02093954
	str r4, [r0, r5]
	pop {r3, r4, r5, pc}
	.align 2, 0_02000FC4: .word LAB_02093950
_02000FC8: .word LAB_02093958
_02000FCC: .word LAB_02093954
	arm_func_end FUN_02000f8c

	arm_func_start FUN_02000fd0
FUN_02000fd0: ; 0x02000FD0
	ldr r3, _02000FF8 ; =0x04000208
	mov r1, #0
	ldrh r2, [r3]
	strh r1, [r3]
	ldr r1, [r3, #8]
	str r0, [r3, #8]
	ldrh r0, [r3]
	mov r0, r1
	strh r2, [r3]
	bx lr
	.align 2, 0_02000FF8: .word 0x04000208
	arm_func_end FUN_02000fd0

	arm_func_start FUN_02000ffc
FUN_02000ffc: ; 0x02000FFC
	ldr r3, _02001028 ; =0x04000208
	mov r1, #0
	ldrh r2, [r3]
	strh r1, [r3]
	ldr r1, [r3, #8]
	orr r0, r1, r0
	str r0, [r3, #8]
	ldrh r0, [r3]
	mov r0, r1
	strh r2, [r3]
	bx lr
	.align 2, 0_02001028: .word 0x04000208
	arm_func_end FUN_02000ffc

	arm_func_start FUN_0200102c
FUN_0200102c: ; 0x0200102C
	ldr ip, _02001058 ; =0x04000208
	mov r2, #0
	ldrh r3, [ip]
	mvn r1, r0
	strh r2, [ip]
	ldr r0, [ip, #8]
	and r1, r0, r1
	str r1, [ip, #8]
	ldrh r1, [ip]
	strh r3, [ip]
	bx lr
	.align 2, 0_02001058: .word 0x04000208
	arm_func_end FUN_0200102c

	arm_func_start FUN_0200105c
FUN_0200105c: ; 0x0200105C
	ldr r3, _02001084 ; =0x04000208
	mov r1, #0
	ldrh r2, [r3]
	strh r1, [r3]
	ldr r1, [r3, #0xc]
	str r0, [r3, #0xc]
	ldrh r0, [r3]
	mov r0, r1
	strh r2, [r3]
	bx lr
	.align 2, 0_02001084: .word 0x04000208
	arm_func_end FUN_0200105c

	arm_func_start FUN_02001088
FUN_02001088: ; 0x02001088
	ldr ip, _020010AC ; =0x027E0000
	ldr r3, _020010B0 ; =0xFDDB597D
	add r0, ip, #0x3000
	ldr r2, _020010B4 ; =0x7BF9DD5B
	ldr r1, _020010B8 ; =0x00000400
	str r3, [r0, #0xf7c]
	add r0, ip, #0x3f80
	str r2, [r0, -r1]
	bx lr
	.align 2, 0_020010AC: .word 0x027E0000
_020010B0: .word 0xFDDB597D
_020010B4: .word 0x7BF9DD5B
_020010B8: .word 0x00000400
	arm_func_end FUN_02001088

	arm_func_start FUN_020010bc
FUN_020010bc: ; 0x020010BC
	ldr r0, _020010C8 ; =LAB_02093980
	ldrh r0, [r0]
	bx lr
	.align 2, 0_020010C8: .word LAB_02093980
	arm_func_end FUN_020010bc

	arm_func_start FUN_020010cc
FUN_020010cc: ; 0x020010CC
	push {r3, lr}
	and r0, r1, #0x7f00
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	cmp r0, #0x10
	ldreq r0, _020010F8 ; =LAB_02093980
	moveq r1, #1
	strheq r1, [r0]
	popeq {r3, pc}
	bl FUN_02004160
	pop {r3, pc}
	.align 2, 0_020010F8: .word LAB_02093980
	arm_func_end FUN_020010cc

	arm_func_start FUN_020010fc
FUN_020010fc: ; 0x020010FC
	push {r4, r5, r6, lr}
	lsl r6, r0, #8
	mov r5, #0xc
	mov r4, #0
	arm_func_end FUN_020010fc
_0200110C:
	mov r0, r5
	mov r1, r6
	mov r2, r4
	bl FUN_02015b04
	cmp r0, #0
	bne _0200110C
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02001128
FUN_02001128: ; 0x02001128
	push {r3, r4, r5, lr}
	ldr r3, _020011E8 ; =LAB_02093984
	ldr r0, [r3]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r5, _020011EC ; =0x02FFFFF0
	mov r2, #0
	mov r4, #1
	mov r1, r5
	str r2, [r5]
	mov r0, #0x7e
	str r4, [r3]
	bl FUN_02001244
	ldrh r0, [r5, #6]
	cmp r0, #0
	beq _02001180
	mov r4, #0x400
	arm_func_end FUN_02001128
_0200116C:
	mov r0, r4
	blx FUN_020004BE
	ldrh r0, [r5, #6]
	cmp r0, #0
	bne _0200116C
_02001180:
	ldr r4, _020011F0 ; =0x02FFFFB0
	mvn r1, #0
	mov r5, #0
	mov r0, r5
	str r1, [r4]
	lsl r3, r1, #0x10
	add r1, r4, #0x10
	mov r2, #0x28
	str r3, [r4, #4]
	bl FUN_02007838
	ldr ip, _020011F4 ; =0x04000204
	mov r2, r5
	ldrh r3, [ip]
	add r1, r4, #0x40
	mov r0, #0x7e
	orr r3, r3, #0x800
	strh r3, [ip]
	ldrh r3, [ip]
	orr r3, r3, #0x80
	strh r3, [ip]
	bl FUN_020012c8
	mov r2, r5
	add r1, r4, #0x40
	mov r0, #0x7f
	bl FUN_02001244
	pop {r3, r4, r5, pc}
	.align 2, 0_020011E8: .word LAB_02093984
_020011EC: .word 0x02FFFFF0
_020011F0: .word 0x02FFFFB0
_020011F4: .word 0x04000204

	arm_func_start LAB_020011f8
LAB_020011f8: ; 0x020011F8
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_020012d8
	cmp r0, #0
	pople {r4, r5, r6, r7, r8, pc}
	mov r4, #0x400
	arm_func_end LAB_020011f8
_0200121C:
	mov r0, r4
	blx FUN_020004BE
	mov r0, r8
	mov r1, r7
	mov r2, r6
	mov r3, r5
	bl FUN_020012d8
	cmp r0, #0
	bgt _0200121C
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02001244
FUN_02001244: ; 0x02001244
	ldr ip, _02001250 ; =LAB_020011f8
	mov r3, #0
	bx ip
	.align 2, 0_02001250: .word LAB_020011f8
	arm_func_end FUN_02001244

	arm_func_start LAB_02001254
LAB_02001254: ; 0x02001254
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r1
	ldrh r1, [r7, #4]
	mov r6, r2
	mov r5, r3
	cmp r0, r1
	mvnne r0, #1
	popne {r3, r4, r5, r6, r7, pc}
	cmp r5, #0
	beq _02001284
	bl FUN_02003dd4
	b _02001288
	arm_func_end LAB_02001254
_02001284:
	bl FUN_02003da8
_02001288:
	mov r4, r0
	mov r0, #0
	strh r0, [r7, #4]
	cmp r6, #0
	beq _020012A0
	blx r6
_020012A0:
	mov r0, #0
	str r0, [r7]
	cmp r5, #0
	mov r0, r4
	beq _020012BC
	bl FUN_02003de8
	b _020012C0
_020012BC:
	bl FUN_02003dbc
_020012C0:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020012c8
FUN_020012c8: ; 0x020012C8
	ldr ip, _020012D4 ; =LAB_02001254
	mov r3, #0
	bx ip
	.align 2, 0_020012D4: .word LAB_02001254
	arm_func_end FUN_020012c8

	arm_func_start FUN_020012d8
FUN_020012d8: ; 0x020012D8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r6, r3
	mov sb, r0
	mov r8, r1
	mov r7, r2
	beq _020012F8
	bl FUN_02003dd4
	b _020012FC
	arm_func_end FUN_020012d8
_020012F8:
	bl FUN_02003da8
_020012FC:
	mov r5, r0
	mov r0, sb
	mov r1, r8
	bl FUN_02008274
	movs r4, r0
	bne _02001324
	cmp r7, #0
	beq _02001320
	blx r7
_02001320:
	strh sb, [r8, #4]
_02001324:
	cmp r6, #0
	mov r0, r5
	beq _02001338
	bl FUN_02003de8
	b _0200133C
_02001338:
	bl FUN_02003dbc
_0200133C:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start LAB_02001344
LAB_02001344: ; 0x02001344
	ldr ip, _02001350 ; =FUN_020012d8
	mov r3, #0
	bx ip
	.align 2, 0_02001350: .word FUN_020012d8
	arm_func_end LAB_02001344

	arm_func_start FUN_02001354
FUN_02001354: ; 0x02001354
	ldr r1, _02001368 ; =0x02FFFFE8
	ldr r2, _0200136C ; =FUN_020013b8
	ldr ip, _02001370 ; =LAB_02001254
	mov r3, #1
	bx ip
	.align 2, 0_02001368: .word 0x02FFFFE8
_0200136C: .word FUN_020013b8
_02001370: .word LAB_02001254
	arm_func_end FUN_02001354

	arm_func_start thunk_FUN_02001354
thunk_FUN_02001354: ; 0x02001374
	ldr r1, _0200137C ; =FUN_02001354
	bx r1
	.align 2, 0_0200137C: .word FUN_02001354
	arm_func_end thunk_FUN_02001354

	arm_func_start FUN_02001380
FUN_02001380: ; 0x02001380
	ldr r1, _02001394 ; =0x02FFFFE8
	ldr r2, _02001398 ; =FUN_020013a0
	ldr ip, _0200139C ; =FUN_020012d8
	mov r3, #1
	bx ip
	.align 2, 0_02001394: .word 0x02FFFFE8
_02001398: .word FUN_020013a0
_0200139C: .word FUN_020012d8
	arm_func_end FUN_02001380

	arm_func_start FUN_020013a0
FUN_020013a0: ; 0x020013A0
	ldr r1, _020013B4 ; =0x04000204
	ldrh r0, [r1]
	bic r0, r0, #0x80
	strh r0, [r1]
	bx lr
	.align 2, 0_020013B4: .word 0x04000204
	arm_func_end FUN_020013a0

	arm_func_start FUN_020013b8
FUN_020013b8: ; 0x020013B8
	ldr r1, _020013CC ; =0x04000204
	ldrh r0, [r1]
	orr r0, r0, #0x80
	strh r0, [r1]
	bx lr
	.align 2, 0_020013CC: .word 0x04000204
	arm_func_end FUN_020013b8

	arm_func_start FUN_020013d0
FUN_020013d0: ; 0x020013D0
	ldr r1, _020013E0 ; =0x02FFFFE0
	ldr r2, _020013E4 ; =FUN_02001420
	ldr ip, _020013E8 ; =FUN_020012c8
	bx ip
	.align 2, 0_020013E0: .word 0x02FFFFE0
_020013E4: .word FUN_02001420
_020013E8: .word FUN_020012c8
	arm_func_end FUN_020013d0

	arm_func_start FUN_020013ec
FUN_020013ec: ; 0x020013EC
	ldr r1, _020013FC ; =0x02FFFFE0
	ldr r2, _02001400 ; =FUN_02001408
	ldr ip, _02001404 ; =LAB_02001344
	bx ip
	.align 2, 0_020013FC: .word 0x02FFFFE0
_02001400: .word FUN_02001408
_02001404: .word LAB_02001344
	arm_func_end FUN_020013ec

	arm_func_start FUN_02001408
FUN_02001408: ; 0x02001408
	ldr r1, _0200141C ; =0x04000204
	ldrh r0, [r1]
	bic r0, r0, #0x800
	strh r0, [r1]
	bx lr
	.align 2, 0_0200141C: .word 0x04000204
	arm_func_end FUN_02001408

	arm_func_start FUN_02001420
FUN_02001420: ; 0x02001420
	ldr r1, _02001434 ; =0x04000204
	ldrh r0, [r1]
	orr r0, r0, #0x800
	strh r0, [r1]
	bx lr
	.align 2, 0_02001434: .word 0x04000204
	arm_func_end FUN_02001420

	arm_func_start FUN_02001438
FUN_02001438: ; 0x02001438
	ldrh r0, [r0, #4]
	bx lr
	arm_func_end FUN_02001438

	arm_func_start FUN_02001440
FUN_02001440: ; 0x02001440
	ldr r3, _02001490 ; =0x02FFFFB0
	ldr r1, [r3]
	clz r2, r1
	cmp r2, #0x20
	movne r0, #0x40
	bne _02001474
	add r3, r3, #4
	ldr r1, [r3]
	clz r2, r1
	cmp r2, #0x20
	ldr r0, _02001494 ; =0xFFFFFFFD
	bxeq lr
	mov r0, #0x60
	arm_func_end FUN_02001440
_02001474:
	add r0, r0, r2
	mov r1, #0x80000000
	lsr r1, r1, r2
	ldr r2, [r3]
	bic r2, r2, r1
	str r2, [r3]
	bx lr
	.align 2, 0_02001490: .word 0x02FFFFB0
_02001494: .word 0xFFFFFFFD

	arm_func_start FUN_02001498
FUN_02001498: ; 0x02001498
	ldr r3, _020014C4 ; =0x02FFFFB0
	cmp r0, #0x60
	addpl r3, r3, #4
	subpl r0, r0, #0x60
	submi r0, r0, #0x40
	mov r1, #0x80000000
	lsr r1, r1, r0
	ldr r2, [r3]
	orr r2, r2, r1
	str r2, [r3]
	bx lr
	.align 2, 0_020014C4: .word 0x02FFFFB0
	arm_func_end FUN_02001498

	arm_func_start FUN_020014c8
FUN_020014c8: ; 0x020014C8
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r2, sp, #0xc
	bic r2, r2, #3
	ldr r1, [sp, #0xc]
	add r2, r2, #4
	bl FUN_020014f0
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020014c8

	arm_func_start FUN_020014f0
FUN_020014f0: ; 0x020014F0
	ldr ip, _02001504 ; =thunk_FUN_020151b0
	mov r3, r2
	mov r2, r1
	mvn r1, #0x80000000
	bx ip
	.align 2, 0_02001504: .word thunk_FUN_020151b0
	arm_func_end FUN_020014f0

	arm_func_start FUN_02001508
FUN_02001508: ; 0x02001508
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r3, sp, #0x10
	bic r3, r3, #3
	ldr r2, [sp, #0x10]
	add r3, r3, #4
	bl thunk_FUN_020151b0
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02001508

	arm_func_start thunk_FUN_020151b0
thunk_FUN_020151b0: ; 0x02001530
	ldr ip, _02001538 ; =FUN_020151b0
	bx ip
	.align 2, 0_02001538: .word FUN_020151b0
	arm_func_end thunk_FUN_020151b0

	arm_func_start FUN_0200153c
FUN_0200153c: ; 0x0200153C
	ldr r1, _02001550 ; =LAB_02093988
	ldr r0, [r1, #0x18]
	add r0, r0, #1
	str r0, [r1, #0x18]
	bx lr
	.align 2, 0_02001550: .word LAB_02093988
	arm_func_end FUN_0200153c

	arm_func_start FUN_02001554
FUN_02001554: ; 0x02001554
	ldr ip, [r0]
	b _02001568
	arm_func_end FUN_02001554
_0200155C:
	cmp ip, r1
	bxeq lr
	ldr ip, [ip, #0x80]
_02001568:
	cmp ip, #0
	beq _02001580
	ldr r3, [ip, #0x70]
	ldr r2, [r1, #0x70]
	cmp r3, r2
	bls _0200155C
_02001580:
	cmp ip, #0
	bne _020015AC
	ldr r3, [r0, #4]
	mov r2, #0
	cmp r3, #0
	streq r1, [r0]
	strne r1, [r3, #0x80]
	str r3, [r1, #0x7c]
	str r2, [r1, #0x80]
	str r1, [r0, #4]
	bx lr
_020015AC:
	ldr r2, [ip, #0x7c]
	cmp r2, #0
	streq r1, [r0]
	strne r1, [r2, #0x80]
	str r2, [r1, #0x7c]
	str ip, [r1, #0x80]
	str r1, [ip, #0x7c]
	bx lr

	arm_func_start FUN_020015cc
FUN_020015cc: ; 0x020015CC
	ldr r2, [r0]
	cmp r2, #0
	beq _020015F8
	ldr r1, [r2, #0x80]
	str r1, [r0]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1, #0x7c]
	moveq r1, #0
	streq r1, [r0, #4]
	streq r1, [r2, #0x78]
	arm_func_end FUN_020015cc
_020015F8:
	mov r0, r2
	bx lr

	arm_func_start FUN_02001600
FUN_02001600: ; 0x02001600
	ldr ip, [r0]
	mov r2, ip
	cmp ip, #0
	beq _0200164C
	arm_func_end FUN_02001600
_02001610:
	cmp r2, r1
	ldr r3, [r2, #0x80]
	bne _02001640
	cmp ip, r2
	ldr ip, [r2, #0x7c]
	streq r3, [r0]
	strne r3, [ip, #0x80]
	ldr r1, [r0, #4]
	cmp r1, r2
	streq ip, [r0, #4]
	strne ip, [r3, #0x7c]
	b _0200164C
_02001640:
	mov r2, r3
	cmp r3, #0
	bne _02001610
_0200164C:
	mov r0, r2
	bx lr

	arm_func_start FUN_02001654
FUN_02001654: ; 0x02001654
	ldr r2, [r0]
	cmp r2, #0
	beq _0200167C
	ldr r1, [r2, #0x10]
	str r1, [r0]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1, #0x14]
	moveq r1, #0
	streq r1, [r0, #4]
	arm_func_end FUN_02001654
_0200167C:
	mov r0, r2
	bx lr

	arm_func_start FUN_02001684
FUN_02001684: ; 0x02001684
	push {r3, lr}
	ldr r1, _020016DC ; =LAB_02093988
	mov ip, #0
	ldr lr, [r1, #0x24]
	mov r3, lr
	b _020016A4
	arm_func_end FUN_02001684
_0200169C:
	mov ip, r3
	ldr r3, [r3, #0x68]
_020016A4:
	cmp r3, #0
	beq _020016BC
	ldr r2, [r3, #0x70]
	ldr r1, [r0, #0x70]
	cmp r2, r1
	blo _0200169C
_020016BC:
	cmp ip, #0
	ldreq r1, _020016DC ; =LAB_02093988
	streq lr, [r0, #0x68]
	streq r0, [r1, #0x24]
	ldrne r1, [ip, #0x68]
	strne r1, [r0, #0x68]
	strne r0, [ip, #0x68]
	pop {r3, pc}
	.align 2, 0_020016DC: .word LAB_02093988

	arm_func_start FUN_020016e0
FUN_020016e0: ; 0x020016E0
	ldr r1, _02001724 ; =LAB_02093988
	mov r2, #0
	ldr r1, [r1, #0x24]
	b _020016F8
	arm_func_end FUN_020016e0
_020016F0:
	mov r2, r1
	ldr r1, [r1, #0x68]
_020016F8:
	cmp r1, #0
	beq _02001708
	cmp r1, r0
	bne _020016F0
_02001708:
	cmp r2, #0
	ldreq r1, [r0, #0x68]
	ldreq r0, _02001724 ; =LAB_02093988
	streq r1, [r0, #0x24]
	ldrne r0, [r0, #0x68]
	strne r0, [r2, #0x68]
	bx lr
	.align 2, 0_02001724: .word LAB_02093988

	arm_func_start FUN_02001728
FUN_02001728: ; 0x02001728
	push {r4, r5, r6, lr}
	ldr r5, _020017E4 ; =LAB_02093988
	ldr r0, [r5, #4]
	cmp r0, #0
	popne {r4, r5, r6, pc}
	ldrh r0, [r5, #0x1e]
	ldr r4, _020017E8 ; =LAB_020939a4
	cmp r0, #0
	bne _02001758
	bl FUN_02003e0c
	cmp r0, #0x12
	bne _02001764
	arm_func_end FUN_02001728
_02001758:
	mov r0, #1
	strh r0, [r4]
	pop {r4, r5, r6, pc}
_02001764:
	ldr r0, [r5, #8]
	ldr r6, [r0]
	bl FUN_02001d08
	mov r5, r0
	cmp r6, r5
	cmpne r5, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #0x64]
	cmp r0, #2
	beq _0200179C
	mov r0, r6
	bl FUN_02002080
	cmp r0, #0
	popne {r4, r5, r6, pc}
_0200179C:
	ldr r0, _020017E4 ; =LAB_02093988
	ldr r2, [r0]
	cmp r2, #0
	beq _020017B8
	mov r0, r6
	mov r1, r5
	blx r2
_020017B8:
	ldr r2, [r4, #0xc]
	cmp r2, #0
	beq _020017D0
	mov r0, r6
	mov r1, r5
	blx r2
_020017D0:
	ldr r1, _020017E4 ; =LAB_02093988
	mov r0, r5
	str r5, [r1, #0x20]
	bl FUN_020020cc
	pop {r4, r5, r6, pc}
	.align 2, 0_020017E4: .word LAB_02093988
_020017E8: .word LAB_020939a4

	arm_func_start FUN_020017ec
FUN_020017ec: ; 0x020017EC
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	ldr r0, _02001900 ; =LAB_02093988
	ldr r1, [r0, #0xc]
	cmp r1, #0
	addne sp, sp, #8
	popne {r3, r4, r5, pc}
	mov r3, #1
	ldr r2, _02001904 ; =LAB_020939a8
	str r3, [r0, #0xc]
	str r2, [r0, #8]
	ldr r1, _02001908 ; =LAB_02093a74
	mov r2, #0x10
	str r2, [r1, #0x70]
	mov r2, #0
	str r2, [r1, #0x6c]
	str r3, [r1, #0x64]
	str r2, [r1, #0x68]
	str r2, [r1, #0x74]
	ldr r2, _0200190C ; =0x00000000
	str r1, [r0, #0x24]
	str r1, [r0, #0x20]
	cmp r2, #0
	ldrle r0, _02001910 ; =0x027E0080
	ldrgt r1, _02001914 ; =0x027E0000
	ldrgt r0, _02001918 ; =0x00000400
	addgt r1, r1, #0x3f80
	subgt r0, r1, r0
	sub r3, r0, r2
	ldr r1, _02001914 ; =0x027E0000
	ldr r0, _02001918 ; =0x00000400
	add r2, r1, #0x3f80
	sub r2, r2, r0
	ldr r1, _02001908 ; =LAB_02093a74
	mov r4, #0
	str r2, [r1, #0x94]
	str r3, [r1, #0x90]
	ldr r0, _0200191C ; =0xFDDB597D
	str r4, [r1, #0x98]
	str r0, [r2, #-8]
	ldr r2, [r1, #0x90]
	ldr r3, _02001920 ; =0x7BF9DD5B
	ldr r0, _02001900 ; =LAB_02093988
	str r3, [r2]
	str r4, [r1, #0xa0]
	str r4, [r1, #0x9c]
	strh r4, [r0, #0x1c]
	strh r4, [r0, #0x1e]
	ldr r2, _02001924 ; =LAB_020939a4
	ldr r1, _02001928 ; =0x02FFFFA0
	mov r0, r4
	str r2, [r1]
	bl FUN_02001f70
	ldr r5, _0200192C ; =LAB_020939b4
	mov ip, #0xc8
	mov r2, r4
	ldr r1, _02001930 ; =LAB_02001f98
	ldr r3, _02001934 ; =LAB_02093bfc
	mov r0, r5
	str ip, [sp]
	mov r4, #0x1f
	str r4, [sp, #4]
	bl FUN_02001948
	mov r0, #0x20
	str r0, [r5, #0x70]
	mov r0, #1
	str r0, [r5, #0x64]
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0_02001900: .word LAB_02093988
_02001904: .word LAB_020939a8
_02001908: .word LAB_02093a74
_0200190C: .word 0x00000000
_02001910: .word 0x027E0080
_02001914: .word 0x027E0000
_02001918: .word 0x00000400
_0200191C: .word 0xFDDB597D
_02001920: .word 0x7BF9DD5B
_02001924: .word LAB_020939a4
_02001928: .word 0x02FFFFA0
_0200192C: .word LAB_020939b4
_02001930: .word LAB_02001f98
_02001934: .word LAB_02093bfc
	arm_func_end FUN_020017ec

	arm_func_start FUN_02001938
FUN_02001938: ; 0x02001938
	ldr r0, _02001944 ; =LAB_02093994
	ldr r0, [r0]
	bx lr
	.align 2, 0_02001944: .word LAB_02093994
	arm_func_end FUN_02001938

	arm_func_start FUN_02001948
FUN_02001948: ; 0x02001948
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	mov r6, r1
	mov r8, r2
	mov r7, r3
	bl FUN_02003da8
	mov r5, r0
	bl FUN_0200153c
	str r0, [sb, #0x6c]
	ldr r0, [sp, #0x24]
	mov r4, #0
	str r0, [sb, #0x70]
	str r4, [sb, #0x64]
	str r4, [sb, #0x74]
	mov r0, sb
	bl FUN_02001684
	mov r1, r6
	str r7, [sb, #0x94]
	str r4, [sb, #0x98]
	ldr r2, [sp, #0x20]
	ldr r0, _02001A2C ; =0xFDDB597D
	sub r6, r7, r2
	str r6, [sb, #0x90]
	str r0, [r7, #-8]
	sub r2, r7, #8
	ldr r7, _02001A30 ; =0x7BF9DD5B
	ldr r3, [sb, #0x90]
	mov r0, sb
	str r7, [r3]
	str r4, [sb, #0xa0]
	str r4, [sb, #0x9c]
	bl FUN_02002014
	str r8, [sb, #4]
	add r1, r6, #4
	ldr r2, _02001A34 ; =FUN_02001a38
	mov r0, r4
	str r2, [sb, #0x3c]
	ldr r2, [sp, #0x20]
	sub r2, r2, #0xc
	bl FUN_02007838
	str r4, [sb, #0x84]
	str r4, [sb, #0x88]
	str r4, [sb, #0x8c]
	mov r0, sb
	mov r1, r4
	bl FUN_0200200c
	str r4, [sb, #0x78]
	str r4, [sb, #0x80]
	str r4, [sb, #0x7c]
	mov r0, r4
	add r1, sb, #0xa4
	mov r2, #0xc
	bl FUN_02007838
	str r4, [sb, #0xb0]
	mov r0, r5
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02001A2C: .word 0xFDDB597D
_02001A30: .word 0x7BF9DD5B
_02001A34: .word FUN_02001a38
	arm_func_end FUN_02001948

	arm_func_start FUN_02001a38
FUN_02001a38: ; 0x02001A38
	push {r3, lr}
	bl FUN_02003da8
	ldr r0, _02001A54 ; =LAB_02093988
	mov r1, #0
	ldr r0, [r0, #0x20]
	bl FUN_02001a58
	pop {r3, pc}
	.align 2, 0_02001A54: .word LAB_02093988
	arm_func_end FUN_02001a38

	arm_func_start FUN_02001a58
FUN_02001a58: ; 0x02001A58
	push {r3, r4, r5, lr}
	ldr r2, _02001AA8 ; =LAB_02093988
	mov r5, r0
	ldr r2, [r2, #0x14]
	mov r4, r1
	cmp r2, #0
	beq _02001A9C
	ldr r1, _02001AAC ; =FUN_02001ab0
	bl FUN_02002014
	ldr r0, [r5]
	mov r1, #1
	orr r2, r0, #0x80
	stm r5, {r2, r4}
	mov r0, r5
	str r1, [r5, #0x64]
	bl FUN_020020cc
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02001a58
_02001A9C:
	mov r0, r4
	bl FUN_02001ab0
	pop {r3, r4, r5, pc}
	.align 2, 0_02001AA8: .word LAB_02093988
_02001AAC: .word FUN_02001ab0

	arm_func_start FUN_02001ab0
FUN_02001ab0: ; 0x02001AB0
	push {r3, lr}
	ldr r1, _02001AE4 ; =LAB_02093988
	ldr r1, [r1, #8]
	ldr r3, [r1]
	ldr r2, [r3, #0xb4]
	cmp r2, #0
	beq _02001ADC
	mov r1, #0
	str r1, [r3, #0xb4]
	blx r2
	bl FUN_02003da8
	arm_func_end FUN_02001ab0
_02001ADC:
	bl FUN_02001ae8
	pop {r3, pc}
	.align 2, 0_02001AE4: .word LAB_02093988

	arm_func_start FUN_02001ae8
FUN_02001ae8: ; 0x02001AE8
	push {r4, lr}
	ldr r0, _02001B40 ; =LAB_02093988
	ldr r0, [r0, #8]
	ldr r4, [r0]
	bl FUN_02001fa8
	mov r0, r4
	bl FUN_02002468
	ldr r0, [r4, #0x78]
	cmp r0, #0
	beq _02001B18
	mov r1, r4
	bl FUN_02001600
	arm_func_end FUN_02001ae8
_02001B18:
	mov r0, r4
	bl FUN_020016e0
	mov r1, #2
	add r0, r4, #0x9c
	str r1, [r4, #0x64]
	bl FUN_02001c78
	bl FUN_02001fd8
	bl FUN_02001d34
	bl FUN_02004160
	pop {r4, pc}
	.align 2, 0_02001B40: .word LAB_02093988

	arm_func_start FUN_02001b44
FUN_02001b44: ; 0x02001B44
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	ldr r1, _02001BBC ; =LAB_02093988
	mov r4, r0
	ldr r0, [r1, #0x20]
	cmp r0, r5
	bne _02001B68
	bl FUN_02001ae8
	arm_func_end FUN_02001b44
_02001B68:
	bl FUN_02001fa8
	mov r0, r5
	bl FUN_02002468
	mov r0, r5
	bl FUN_02001bc0
	ldr r0, [r5, #0x78]
	cmp r0, #0
	beq _02001B90
	mov r1, r5
	bl FUN_02001600
_02001B90:
	mov r0, r5
	bl FUN_020016e0
	mov r1, #2
	add r0, r5, #0x9c
	str r1, [r5, #0x64]
	bl FUN_02001c78
	bl FUN_02001fd8
	mov r0, r4
	bl FUN_02003dbc
	bl FUN_02001d34
	pop {r3, r4, r5, pc}
	.align 2, 0_02001BBC: .word LAB_02093988

	arm_func_start FUN_02001bc0
FUN_02001bc0: ; 0x02001BC0
	push {r3, lr}
	ldr r0, [r0, #0xb0]
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_02003818
	pop {r3, pc}
	arm_func_end FUN_02001bc0

	arm_func_start FUN_02001bd8
FUN_02001bd8: ; 0x02001BD8
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	ldr r1, [r5, #0x64]
	mov r4, r0
	cmp r1, #2
	beq _02001C08
	arm_func_end FUN_02001bd8
_02001BF4:
	add r0, r5, #0x9c
	bl FUN_02001c28
	ldr r0, [r5, #0x64]
	cmp r0, #2
	bne _02001BF4
_02001C08:
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02001c14
FUN_02001c14: ; 0x02001C14
	ldr r0, [r0, #0x64]
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02001c14

	arm_func_start FUN_02001c28
FUN_02001c28: ; 0x02001C28
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_02003da8
	ldr r1, _02001C74 ; =LAB_02093988
	mov r4, r0
	ldr r0, [r1, #8]
	cmp r6, #0
	ldr r5, [r0]
	beq _02001C5C
	mov r0, r6
	mov r1, r5
	str r6, [r5, #0x78]
	bl FUN_02001554
	arm_func_end FUN_02001c28
_02001C5C:
	mov r0, #0
	str r0, [r5, #0x64]
	bl FUN_02001728
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, r5, r6, pc}
	.align 2, 0_02001C74: .word LAB_02093988

	arm_func_start FUN_02001c78
FUN_02001c78: ; 0x02001C78
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	bl FUN_02003da8
	ldr r1, [r7]
	mov r6, r0
	cmp r1, #0
	beq _02001CD4
	beq _02001CC4
	mov r5, #1
	mov r4, #0
	arm_func_end FUN_02001c78
_02001CA0:
	mov r0, r7
	bl FUN_020015cc
	str r5, [r0, #0x64]
	str r4, [r0, #0x78]
	str r4, [r0, #0x80]
	str r4, [r0, #0x7c]
	ldr r0, [r7]
	cmp r0, #0
	bne _02001CA0
_02001CC4:
	mov r0, #0
	str r0, [r7, #4]
	str r0, [r7]
	bl FUN_02001728
_02001CD4:
	mov r0, r6
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02001ce0
FUN_02001ce0: ; 0x02001CE0
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	mov r1, #1
	mov r4, r0
	str r1, [r5, #0x64]
	bl FUN_02001728
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02001ce0

	arm_func_start FUN_02001d08
FUN_02001d08: ; 0x02001D08
	ldr r0, _02001D30 ; =LAB_02093988
	ldr r0, [r0, #0x24]
	b _02001D18
	arm_func_end FUN_02001d08
_02001D14:
	ldr r0, [r0, #0x68]
_02001D18:
	cmp r0, #0
	bxeq lr
	ldr r1, [r0, #0x64]
	cmp r1, #1
	bne _02001D14
	bx lr
	.align 2, 0_02001D30: .word LAB_02093988

	arm_func_start FUN_02001d34
FUN_02001d34: ; 0x02001D34
	push {r4, lr}
	bl FUN_02003da8
	mov r4, r0
	bl FUN_02001728
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, pc}
	arm_func_end FUN_02001d34

	arm_func_start FUN_02001d50
FUN_02001d50: ; 0x02001D50
	push {r4, r5, r6, r7, r8, lr}
	ldr r5, _02001DFC ; =LAB_02093988
	mov r7, #0
	mov r4, r7
	mov r8, r7
	ldr r6, [r5, #0x20]
	bl FUN_02003da8
	ldr r1, [r5, #0x24]
	mov r5, r0
	mov r0, r7
	cmp r1, #0
	beq _02001DAC
	ldr r2, [r6, #0x70]
	arm_func_end FUN_02001d50
_02001D84:
	cmp r1, r6
	moveq r7, r0
	ldr r0, [r1, #0x70]
	cmp r2, r0
	moveq r4, r1
	mov r0, r1
	ldr r1, [r1, #0x68]
	addeq r8, r8, #1
	cmp r1, #0
	bne _02001D84
_02001DAC:
	cmp r8, #1
	ble _02001DBC
	cmp r4, r6
	bne _02001DC8
_02001DBC:
	mov r0, r5
	bl FUN_02003dbc
	pop {r4, r5, r6, r7, r8, pc}
_02001DC8:
	cmp r7, #0
	ldreq r1, [r6, #0x68]
	ldreq r0, _02001DFC ; =LAB_02093988
	streq r1, [r0, #0x24]
	ldrne r0, [r6, #0x68]
	strne r0, [r7, #0x68]
	ldr r0, [r4, #0x68]
	str r0, [r6, #0x68]
	str r6, [r4, #0x68]
	bl FUN_02001728
	mov r0, r5
	bl FUN_02003dbc
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02001DFC: .word LAB_02093988

	arm_func_start FUN_02001e00
FUN_02001e00: ; 0x02001E00
	push {r4, r5, r6, r7, r8, lr}
	ldr r2, _02001EA0 ; =LAB_02093988
	mov r7, r0
	mov r6, r1
	ldr r8, [r2, #0x24]
	mov r4, #0
	bl FUN_02003da8
	mov r5, r0
	b _02001E2C
	arm_func_end FUN_02001e00
_02001E24:
	mov r4, r8
	ldr r8, [r8, #0x68]
_02001E2C:
	cmp r8, #0
	beq _02001E3C
	cmp r8, r7
	bne _02001E24
_02001E3C:
	cmp r8, #0
	ldrne r0, _02001EA4 ; =LAB_020939b4
	cmpne r8, r0
	bne _02001E5C
	mov r0, r5
	bl FUN_02003dbc
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_02001E5C:
	ldr r0, [r8, #0x70]
	cmp r0, r6
	beq _02001E90
	cmp r4, #0
	ldreq r1, [r7, #0x68]
	ldreq r0, _02001EA0 ; =LAB_02093988
	streq r1, [r0, #0x24]
	ldrne r0, [r7, #0x68]
	strne r0, [r4, #0x68]
	mov r0, r7
	str r6, [r7, #0x70]
	bl FUN_02001684
	bl FUN_02001728
_02001E90:
	mov r0, r5
	bl FUN_02003dbc
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02001EA0: .word LAB_02093988
_02001EA4: .word LAB_020939b4

	arm_func_start FUN_02001ea8
FUN_02001ea8: ; 0x02001EA8
	ldr r0, [r0, #0x70]
	bx lr
	arm_func_end FUN_02001ea8

	arm_func_start FUN_02001eb0
FUN_02001eb0: ; 0x02001EB0
	push {r4, r5, lr}
	sub sp, sp, #0x34
	add r4, sp, #8
	mov r5, r0
	mov r0, r4
	bl FUN_02003604
	ldr r0, _02001F44 ; =LAB_02093988
	ldr r0, [r0, #8]
	ldr r0, [r0]
	str r0, [sp, #4]
	bl FUN_02003da8
	ldr r1, _02001F48 ; =0x000082EA
	ldr r2, [sp, #4]
	umull r1, ip, r5, r1
	lsr r1, r1, #6
	str r4, [r2, #0xb0]
	add r2, sp, #4
	mov r5, r0
	str r2, [sp]
	ldr r3, _02001F4C ; =LAB_02001f50
	mov r0, r4
	lsr r2, ip, #6
	orr r1, r1, ip, lsl #26
	bl FUN_0200373c
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _02001F34
	mov r4, #0
	arm_func_end FUN_02001eb0
_02001F20:
	mov r0, r4
	bl FUN_02001c28
	ldr r0, [sp, #4]
	cmp r0, #0
	bne _02001F20
_02001F34:
	mov r0, r5
	bl FUN_02003dbc
	add sp, sp, #0x34
	pop {r4, r5, pc}
	.align 2, 0_02001F44: .word LAB_02093988
_02001F48: .word 0x000082EA
_02001F4C: .word LAB_02001f50

	arm_func_start LAB_02001f50
LAB_02001f50: ; 0x02001F50
	ldr r2, [r0]
	mov r1, #0
	str r1, [r0]
	ldr ip, _02001F6C ; =FUN_02001ce0
	mov r0, r2
	str r1, [r2, #0xb0]
	bx ip
	.align 2, 0_02001F6C: .word FUN_02001ce0
	arm_func_end LAB_02001f50

	arm_func_start FUN_02001f70
FUN_02001f70: ; 0x02001F70
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	ldr r1, _02001F94 ; =LAB_02093988
	ldr r4, [r1, #0x28]
	str r5, [r1, #0x28]
	bl FUN_02003dbc
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_02001F94: .word LAB_02093988
	arm_func_end FUN_02001f70

	arm_func_start LAB_02001f98
LAB_02001f98: ; 0x02001F98
	push {r3, lr}
	bl FUN_02003d94
	arm_func_end LAB_02001f98
_02001FA0:
	bl FUN_020041a0
	b _02001FA0

	arm_func_start FUN_02001fa8
FUN_02001fa8: ; 0x02001FA8
	push {r4, lr}
	bl FUN_02003da8
	ldr r1, _02001FD4 ; =LAB_02093988
	ldr r3, [r1, #4]
	cmn r3, #1
	addlo r2, r3, #1
	movlo r4, r3
	strlo r2, [r1, #4]
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02001FD4: .word LAB_02093988
	arm_func_end FUN_02001fa8

	arm_func_start FUN_02001fd8
FUN_02001fd8: ; 0x02001FD8
	push {r4, lr}
	bl FUN_02003da8
	ldr r1, _02002008 ; =LAB_02093988
	mov r4, #0
	ldr r3, [r1, #4]
	cmp r3, #0
	subne r2, r3, #1
	movne r4, r3
	strne r2, [r1, #4]
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02002008: .word LAB_02093988
	arm_func_end FUN_02001fd8

	arm_func_start FUN_0200200c
FUN_0200200c: ; 0x0200200C
	str r1, [r0, #0xb4]
	bx lr
	arm_func_end FUN_0200200c

	arm_func_start FUN_02002014
FUN_02002014: ; 0x02002014
	add r1, r1, #4
	str r1, [r0, #0x40]
	str r2, [r0, #0x44]
	sub r2, r2, #0x40
	tst r2, #4
	subne r2, r2, #4
	str r2, [r0, #0x38]
	ands r1, r1, #1
	movne r1, #0x3f
	moveq r1, #0x1f
	str r1, [r0]
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	str r1, [r0, #0x10]
	str r1, [r0, #0x14]
	str r1, [r0, #0x18]
	str r1, [r0, #0x1c]
	str r1, [r0, #0x20]
	str r1, [r0, #0x24]
	str r1, [r0, #0x28]
	str r1, [r0, #0x2c]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	str r1, [r0, #0x3c]
	bx lr
	arm_func_end FUN_02002014

	arm_func_start FUN_02002080
FUN_02002080: ; 0x02002080
	push {r0, lr}
	add r0, r0, #0x48
	ldr r1, _020020C8 ; =FUN_02009cac
	blx r1
	pop {r0, lr}
	add r1, r0, #0
	mrs r2, apsr
	str r2, [r1], #4
	mov r0, #0xd3
	msr cpsr_c, r0
	str sp, [r1, #0x40]
	msr cpsr_c, r2
	mov r0, #1
	stm r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, ip, sp, lr}
	add r0, pc, #0x8 ; =_020020C8
	str r0, [r1, #0x3c]
	mov r0, #0
	bx lr
	.align 2, 0_020020C8: .word FUN_02009cac
	arm_func_end FUN_02002080

	arm_func_start FUN_020020cc
FUN_020020cc: ; 0x020020CC
	push {r0, lr}
	add r0, r0, #0x48
	ldr r1, _0200210C ; =FUN_02009cec
	blx r1
	pop {r0, lr}
	mrs r1, apsr
	bic r1, r1, #0x1f
	orr r1, r1, #0xd3
	msr cpsr_c, r1
	ldr r1, [r0], #4
	msr spsr_fsxc, r1
	ldr sp, [r0, #0x40]
	ldr lr, [r0, #0x3c]
	ldm r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, ip, sp, lr} ^
	mov r0, r0
	subs pc, lr, #4
	.align 2, 0_0200210C: .word FUN_02009cec
	arm_func_end FUN_020020cc

	arm_func_start FUN_02002110
FUN_02002110: ; 0x02002110
	push {r4, lr}
	ldr r4, _02002140 ; =0x0208EC30
	ldr r0, [r4, #4]
	cmn r0, #1
	popne {r4, pc}
	mov r0, #0x80000001
	str r0, [r4, #4]
	bl FUN_02002144
	ldr r1, [r4, #4]
	orr r0, r1, r0
	str r0, [r4, #4]
	pop {r4, pc}
	.align 2, 0_02002140: .word 0x0208EC30
	arm_func_end FUN_02002110

	arm_func_start FUN_02002144
FUN_02002144: ; 0x02002144
	push {r3, lr}
	bl FUN_02003e60
	ldr r1, _02002158 ; =0x020877F0
	ldr r0, [r1, r0, lsl #2]
	pop {r3, pc}
	.align 2, 0_02002158: .word 0x020877F0
	arm_func_end FUN_02002144

	arm_func_start FUN_0200215c
FUN_0200215c: ; 0x0200215C
	push {r3, lr}
	bl FUN_02002110
	tst r0, #0x10000000
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_0200215c

	arm_func_start FUN_02002174
FUN_02002174: ; 0x02002174
	mov r3, #0
	str r3, [r0, #4]
	str r3, [r0]
	str r3, [r0, #0xc]
	str r3, [r0, #8]
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r3, [r0, #0x18]
	str r3, [r0, #0x1c]
	bx lr
	arm_func_end FUN_02002174

	arm_func_start FUN_0200219c
FUN_0200219c: ; 0x0200219C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	mov r4, r1
	mov r7, r2
	bl FUN_02003da8
	ldr r2, [r5, #0x1c]
	ldr r1, [r5, #0x14]
	mov r6, r0
	cmp r1, r2
	bgt _020021F8
	and r7, r7, #1
	arm_func_end FUN_0200219c
_020021C8:
	cmp r7, #0
	bne _020021E0
	mov r0, r6
	bl FUN_02003dbc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020021E0:
	mov r0, r5
	bl FUN_02001c28
	ldr r2, [r5, #0x1c]
	ldr r1, [r5, #0x14]
	cmp r1, r2
	ble _020021C8
_020021F8:
	ldr r0, [r5, #0x18]
	add r0, r0, r2
	bl FUN_0201f9bc
	ldr r2, [r5, #0x10]
	add r0, r5, #8
	str r4, [r2, r1, lsl #2]
	ldr r1, [r5, #0x1c]
	add r1, r1, #1
	str r1, [r5, #0x1c]
	bl FUN_02001c78
	mov r0, r6
	bl FUN_02003dbc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02002230
FUN_02002230: ; 0x02002230
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r7, r2
	bl FUN_02003da8
	ldr r1, [r6, #0x1c]
	mov r4, r0
	cmp r1, #0
	bne _02002284
	and r7, r7, #1
	arm_func_end FUN_02002230
_02002258:
	cmp r7, #0
	bne _02002270
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02002270:
	add r0, r6, #8
	bl FUN_02001c28
	ldr r0, [r6, #0x1c]
	cmp r0, #0
	beq _02002258
_02002284:
	cmp r5, #0
	ldrne r1, [r6, #0x10]
	ldrne r0, [r6, #0x18]
	ldrne r0, [r1, r0, lsl #2]
	strne r0, [r5]
	ldr r0, [r6, #0x18]
	ldr r1, [r6, #0x14]
	add r0, r0, #1
	bl FUN_0201f9bc
	ldr r2, [r6, #0x1c]
	mov r0, r6
	sub r2, r2, #1
	str r1, [r6, #0x18]
	str r2, [r6, #0x1c]
	bl FUN_02001c78
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020022d0
FUN_020022d0: ; 0x020022D0
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r7, r2
	bl FUN_02003da8
	ldr r1, [r6, #0x14]
	ldr r2, [r6, #0x1c]
	mov r4, r0
	cmp r1, r2
	bgt _0200232C
	and r7, r7, #1
	arm_func_end FUN_020022d0
_020022FC:
	cmp r7, #0
	bne _02002314
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02002314:
	mov r0, r6
	bl FUN_02001c28
	ldr r1, [r6, #0x14]
	ldr r0, [r6, #0x1c]
	cmp r1, r0
	ble _020022FC
_0200232C:
	ldr r0, [r6, #0x18]
	add r0, r0, r1
	sub r0, r0, #1
	bl FUN_0201f9bc
	ldr r0, [r6, #0x10]
	str r1, [r6, #0x18]
	str r5, [r0, r1, lsl #2]
	ldr r1, [r6, #0x1c]
	add r0, r6, #8
	add r1, r1, #1
	str r1, [r6, #0x1c]
	bl FUN_02001c78
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0200236c
FUN_0200236c: ; 0x0200236C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r7, r2
	bl FUN_02003da8
	ldr r1, [r6, #0x1c]
	mov r4, r0
	cmp r1, #0
	bne _020023C0
	and r7, r7, #1
	arm_func_end FUN_0200236c
_02002394:
	cmp r7, #0
	bne _020023AC
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020023AC:
	add r0, r6, #8
	bl FUN_02001c28
	ldr r0, [r6, #0x1c]
	cmp r0, #0
	beq _02002394
_020023C0:
	cmp r5, #0
	ldrne r1, [r6, #0x10]
	ldrne r0, [r6, #0x18]
	ldrne r0, [r1, r0, lsl #2]
	strne r0, [r5]
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020023e4
FUN_020023e4: ; 0x020023E4
	ldr r1, [r0, #0xc]
	mov r2, #0
	and r1, r1, #0xff000000
	bic r1, r1, #0xff000000
	str r2, [r0, #4]
	str r2, [r0]
	str r2, [r0, #8]
	str r1, [r0, #0xc]
	bx lr
	arm_func_end FUN_020023e4

	arm_func_start FUN_02002408
FUN_02002408: ; 0x02002408
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	bl FUN_02003da8
	ldr r1, _02002454 ; =LAB_020939a4
	mov r5, r0
	ldr r6, [r1, #4]
	mov r4, #0
	arm_func_end FUN_02002408
_02002424:
	mov r0, r7
	bl FUN_020024b0
	cmp r0, #0
	bne _02002448
	mov r0, r7
	str r7, [r6, #0x84]
	bl FUN_02001c28
	str r4, [r6, #0x84]
	b _02002424
_02002448:
	mov r0, r5
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02002454: .word LAB_020939a4

	arm_func_start FUN_02002458
FUN_02002458: ; 0x02002458
	ldr ip, _02002464 ; =LAB_02002544
	mov r1, #0x10000000
	bx ip
	.align 2, 0_02002464: .word LAB_02002544
	arm_func_end FUN_02002458

	arm_func_start FUN_02002468
FUN_02002468: ; 0x02002468
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x88]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r4, #0
	arm_func_end FUN_02002468
_02002480:
	add r0, r5, #0x88
	bl FUN_02001654
	ldr r1, [r0, #0xc]
	and r1, r1, #0xff000000
	str r4, [r0, #8]
	bic r1, r1, #0xff000000
	str r1, [r0, #0xc]
	bl FUN_02001c78
	ldr r0, [r5, #0x88]
	cmp r0, #0
	bne _02002480
	pop {r3, r4, r5, pc}

	arm_func_start FUN_020024b0
FUN_020024b0: ; 0x020024B0
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_02003da8
	ldr r2, [r6, #8]
	ldr r1, _02002540 ; =LAB_020939a4
	mov r4, r0
	cmp r2, #0
	ldr r0, [r1, #4]
	bne _02002508
	ldr r2, [r6, #0xc]
	mov r1, r6
	bic r2, r2, #0xff000000
	orr r3, r2, #0x10000000
	add r2, r3, #1
	and r3, r3, #0xff000000
	bic r2, r2, #0xff000000
	orr r2, r3, r2
	str r0, [r6, #8]
	str r2, [r6, #0xc]
	bl FUN_0200261c
	mov r5, #1
	b _02002530
	arm_func_end FUN_020024b0
_02002508:
	cmp r2, r0
	movne r5, #0
	bne _02002530
	ldr r1, [r6, #0xc]
	mov r5, #1
	add r0, r1, #1
	and r1, r1, #0xff000000
	bic r0, r0, #0xff000000
	orr r0, r1, r0
	str r0, [r6, #0xc]
_02002530:
	mov r0, r4
	bl FUN_02003dbc
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0_02002540: .word LAB_020939a4

	arm_func_start LAB_02002544
LAB_02002544: ; 0x02002544
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_02003da8
	cmp r5, #0
	ldrne r3, [r6, #0xc]
	ldr r1, _02002618 ; =LAB_020939a4
	andne r3, r3, #0xff000000
	ldr r2, [r1, #4]
	mov r4, r0
	mov r1, #0
	cmpne r5, r3
	beq _02002580
	bl FUN_02003dbc
	pop {r4, r5, r6, pc}
	arm_func_end LAB_02002544
_02002580:
	ldr r0, [r6, #0xc]
	and r3, r0, #0xff000000
	cmp r3, #0x10000000
	beq _020025A0
	cmp r3, #0x20000000
	beq _020025B4
	cmp r3, #0x30000000
	bne _020025D0
_020025A0:
	ldr r0, [r6, #8]
	cmp r0, r2
	bne _020025DC
	ldr r0, [r6, #0xc]
	b _020025B4
_020025B4:
	sub r0, r0, #1
	bic r0, r0, #0xff000000
	orr r0, r3, r0
	str r0, [r6, #0xc]
	bics r0, r0, #0xff000000
	moveq r1, #1
	b _020025DC
_020025D0:
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, r5, r6, pc}
_020025DC:
	cmp r1, #0
	beq _0200260C
	mov r0, r2
	mov r1, r6
	bl FUN_02002640
	ldr r0, [r6, #0xc]
	mov r2, #0
	bic r1, r0, #0xff000000
	mov r0, r6
	str r2, [r6, #8]
	str r1, [r6, #0xc]
	bl FUN_02001c78
_0200260C:
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, r5, r6, pc}
	.align 2, 0_02002618: .word LAB_020939a4

	arm_func_start FUN_0200261c
FUN_0200261c: ; 0x0200261C
	ldr r3, [r0, #0x8c]
	mov r2, #0
	cmp r3, #0
	streq r1, [r0, #0x88]
	strne r1, [r3, #0x10]
	str r3, [r1, #0x14]
	str r2, [r1, #0x10]
	str r1, [r0, #0x8c]
	bx lr
	arm_func_end FUN_0200261c

	arm_func_start FUN_02002640
FUN_02002640: ; 0x02002640
	ldr r2, [r1, #0x10]
	ldr r1, [r1, #0x14]
	cmp r2, #0
	streq r1, [r0, #0x8c]
	strne r1, [r2, #0x14]
	cmp r1, #0
	streq r2, [r0, #0x88]
	strne r2, [r1, #0x10]
	bx lr
	arm_func_end FUN_02002640

	arm_func_start FUN_02002664
FUN_02002664: ; 0x02002664
	mov ip, #0
	mov r1, #0
	arm_func_end FUN_02002664
_0200266C:
	mov r0, #0
_02002670:
	orr r2, r1, r0
	mcr p15, #0, ip, c7, c10, #4
	mcr p15, #0, r2, c7, c14, #2
	add r0, r0, #0x20
	cmp r0, #0x400
	blt _02002670
	add r1, r1, #0x40000000
	cmp r1, #0
	bne _0200266C
	bx lr

	arm_func_start FUN_02002698
FUN_02002698: ; 0x02002698
	add r1, r1, r0
	bic r0, r0, #0x1f
	arm_func_end FUN_02002698
_020026A0:
	mcr p15, #0, r0, c7, c6, #1
	add r0, r0, #0x20
	cmp r0, r1
	blt _020026A0
	bx lr

	arm_func_start FUN_020026b4
FUN_020026b4: ; 0x020026B4
	add r1, r1, r0
	bic r0, r0, #0x1f
	arm_func_end FUN_020026b4
_020026BC:
	mcr p15, #0, r0, c7, c10, #1
	add r0, r0, #0x20
	cmp r0, r1
	blt _020026BC
	bx lr

	arm_func_start FUN_020026d0
FUN_020026d0: ; 0x020026D0
	mov ip, #0
	add r1, r1, r0
	bic r0, r0, #0x1f
	arm_func_end FUN_020026d0
_020026DC:
	mcr p15, #0, ip, c7, c10, #4
	mcr p15, #0, r0, c7, c14, #1
	add r0, r0, #0x20
	cmp r0, r1
	blt _020026DC
	bx lr

	arm_func_start FUN_020026f4
FUN_020026f4: ; 0x020026F4
	mov r0, #0
	mcr p15, #0, r0, c7, c10, #4
	bx lr
	arm_func_end FUN_020026f4

	arm_func_start FUN_02002700
FUN_02002700: ; 0x02002700
	mov r0, #0
	mcr p15, #0, r0, c7, c5, #0
	bx lr
	arm_func_end FUN_02002700

	arm_func_start FUN_0200270c
FUN_0200270c: ; 0x0200270C
	add r1, r1, r0
	bic r0, r0, #0x1f
	arm_func_end FUN_0200270c
_02002714:
	mcr p15, #0, r0, c7, c5, #1
	add r0, r0, #0x20
	cmp r0, r1
	blt _02002714
	bx lr

	arm_func_start FUN_02002728
FUN_02002728: ; 0x02002728
	mov ip, #0x4000000
	ldr r1, [ip, #0x208]
	str ip, [ip, #0x208]
	arm_func_end FUN_02002728
_02002734:
	ldrh r0, [ip, #6]
	cmp r0, #0
	bne _02002734
	str r1, [ip, #0x208]
	bx lr

	arm_func_start FUN_02002748
FUN_02002748: ; 0x02002748
	ldr ip, _02002750 ; =LAB_02002754
	bx ip
	.align 2, 0_02002750: .word LAB_02002754
	arm_func_end FUN_02002748

	arm_func_start LAB_02002754
LAB_02002754: ; 0x02002754
	push {r3, lr}
	bl FUN_0201598c
	bl FUN_0200279c
	bl FUN_02001128
	bl FUN_020028b8
	bl FUN_02000e18
	bl FUN_02001088
	bl FUN_02003108
	bl FUN_020084b0
	bl FUN_02003998
	bl FUN_02003fdc
	bl FUN_020017ec
	bl FUN_02003e7c
	bl FUN_0201191c
	bl FUN_0200fe34
	bl FUN_020167cc
	bl FUN_02002728
	pop {r3, pc}
	arm_func_end LAB_02002754

	arm_func_start FUN_0200279c
FUN_0200279c: ; 0x0200279C
	push {r3, r4, r5, lr}
	ldr r1, _020028B4 ; =LAB_02093bfc
	ldr r0, [r1]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r5, #0
	mov r2, #1
	mov r0, r5
	str r2, [r1]
	bl FUN_02002928
	mov r1, r0
	mov r0, r5
	bl FUN_02002aac
	mov r0, r5
	bl FUN_02002a08
	mov r1, r0
	mov r0, r5
	bl FUN_02002ac0
	mov r4, #2
	mov r0, r4
	mov r1, r5
	bl FUN_02002ac0
	mov r0, r4
	mov r1, r5
	bl FUN_02002aac
	mov r4, #3
	mov r0, r4
	bl FUN_02002928
	mov r1, r0
	mov r0, r4
	bl FUN_02002aac
	mov r0, r4
	bl FUN_02002a08
	mov r1, r0
	mov r0, r4
	bl FUN_02002ac0
	mov r4, #4
	mov r0, r4
	bl FUN_02002928
	mov r1, r0
	mov r0, r4
	bl FUN_02002aac
	mov r0, r4
	bl FUN_02002a08
	mov r1, r0
	mov r0, r4
	bl FUN_02002ac0
	mov r4, #5
	mov r0, r4
	bl FUN_02002928
	mov r1, r0
	mov r0, r4
	bl FUN_02002aac
	mov r0, r4
	bl FUN_02002a08
	mov r1, r0
	mov r0, r4
	bl FUN_02002ac0
	mov r4, #6
	mov r0, r4
	bl FUN_02002928
	mov r1, r0
	mov r0, r4
	bl FUN_02002aac
	mov r0, r4
	bl FUN_02002a08
	mov r1, r0
	mov r0, r4
	bl FUN_02002ac0
	pop {r3, r4, r5, pc}
	.align 2, 0_020028B4: .word LAB_02093bfc
	arm_func_end FUN_0200279c

	arm_func_start FUN_020028b8
FUN_020028b8: ; 0x020028B8
	push {r4, lr}
	bl FUN_02002110
	mov r4, #2
	mov r0, r4
	bl FUN_02002928
	mov r1, r0
	mov r0, r4
	bl FUN_02002aac
	mov r0, r4
	bl FUN_02002a08
	mov r1, r0
	mov r0, r4
	bl FUN_02002ac0
	mov r0, #1
	mov r1, #0x2000000
	mov r2, #0x2a
	bl FUN_020030e0
	pop {r4, pc}
	arm_func_end FUN_020028b8

	arm_func_start FUN_02002900
FUN_02002900: ; 0x02002900
	lsl r0, r0, #2
	add r0, r0, #0x2f00000
	add r0, r0, #0xff000
	ldr r0, [r0, #0xdc4]
	bx lr
	arm_func_end FUN_02002900

	arm_func_start FUN_02002914
FUN_02002914: ; 0x02002914
	lsl r0, r0, #2
	add r0, r0, #0x2f00000
	add r0, r0, #0xff000
	ldr r0, [r0, #0xda0]
	bx lr
	arm_func_end FUN_02002914

	arm_func_start FUN_02002928
FUN_02002928: ; 0x02002928
	push {r3, lr}
	cmp r0, #6
	arm_func_end FUN_02002928

	arm_func_start switchD
switchD: ; 0x02002930
	addls pc, pc, r0, lsl #2
	b _020029E0
	arm_func_end switchD
_02002938: ; jump table
	b LAB_02002954 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0200293C
	b _020029E0
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02002940
	b _0200295C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02002944
	b _02002988
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02002948
	b _02002990
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0200294C
	b _020029D0
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02002950
	b _020029D8
	arm_func_end caseD_6
LAB_02002954:
	ldr r0, _020029E8 ; =0x023E0000
	pop {r3, pc}
_0200295C:
	ldr r0, _020029EC ; =LAB_02093bfc
	ldr r0, [r0, #4]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_02002110
	and r0, r0, #0xf
	cmp r0, #1
	moveq r0, #0
	movne r0, #0x2700000
	pop {r3, pc}
_02002988:
	mov r0, #0x2000000
	pop {r3, pc}
_02002990:
	ldr r0, _020029F0 ; =0x027E0000
	ldr r1, _020029F4 ; =0x00000000
	ldr r2, _020029F8 ; =0x00000400
	add r3, r0, #0x3f80
	cmp r1, #0
	sub r2, r3, r2
	bne _020029BC
	ldr r1, _020029FC ; =0x027E0080
	cmp r0, r1
	movlo r0, r1
	pop {r3, pc}
_020029BC:
	cmp r1, #0
	ldrlt r0, _020029FC ; =0x027E0080
	sublt r0, r0, r1
	subge r0, r2, r1
	pop {r3, pc}
_020029D0:
	ldr r0, _02002A00 ; =0x02FFF680
	pop {r3, pc}
_020029D8:
	ldr r0, _02002A04 ; =0x037F8000
	pop {r3, pc}
_020029E0:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_020029E8: .word 0x023E0000
_020029EC: .word LAB_02093bfc
_020029F0: .word 0x027E0000
_020029F4: .word 0x00000000
_020029F8: .word 0x00000400
_020029FC: .word 0x027E0080
_02002A00: .word 0x02FFF680
_02002A04: .word 0x037F8000

	arm_func_start FUN_02002a08
FUN_02002a08: ; 0x02002A08
	push {r3, lr}
	cmp r0, #6
	arm_func_end FUN_02002a08

	arm_func_start switchD
switchD: ; 0x02002A10
	addls pc, pc, r0, lsl #2
	b _02002A88
	arm_func_end switchD
_02002A18: ; jump table
	b LAB_02002a34 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02002A1C
	b _02002A88
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02002A20
	b _02002A3C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02002A24
	b _02002A68
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02002A28
	b _02002A70
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02002A2C
	b _02002A78
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02002A30
	b _02002A80
	arm_func_end caseD_6
LAB_02002a34:
	ldr r0, _02002A90 ; =0x021604C0
	pop {r3, pc}
_02002A3C:
	ldr r0, _02002A94 ; =LAB_02093bfc
	ldr r0, [r0, #4]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_02002110
	and r0, r0, #0xf
	cmp r0, #1
	moveq r0, #0
	ldrne r0, _02002A98 ; =0x023E0000
	pop {r3, pc}
_02002A68:
	ldr r0, _02002A9C ; =0x01FFBD20
	pop {r3, pc}
_02002A70:
	ldr r0, _02002AA0 ; =0x027E0080
	pop {r3, pc}
_02002A78:
	ldr r0, _02002AA4 ; =0x02FFF000
	pop {r3, pc}
_02002A80:
	ldr r0, _02002AA8 ; =0x037F8000
	pop {r3, pc}
_02002A88:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_02002A90: .word 0x021604C0
_02002A94: .word LAB_02093bfc
_02002A98: .word 0x023E0000
_02002A9C: .word 0x01FFBD20
_02002AA0: .word 0x027E0080
_02002AA4: .word 0x02FFF000
_02002AA8: .word 0x037F8000

	arm_func_start FUN_02002aac
FUN_02002aac: ; 0x02002AAC
	lsl r0, r0, #2
	add r0, r0, #0x2f00000
	add r0, r0, #0xff000
	str r1, [r0, #0xdc4]
	bx lr
	arm_func_end FUN_02002aac

	arm_func_start FUN_02002ac0
FUN_02002ac0: ; 0x02002AC0
	lsl r0, r0, #2
	add r0, r0, #0x2f00000
	add r0, r0, #0xff000
	str r1, [r0, #0xda0]
	bx lr
	arm_func_end FUN_02002ac0

	arm_func_start FUN_02002ad4
FUN_02002ad4: ; 0x02002AD4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_02002914
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r0, r5
	sub r1, r5, #1
	mvn r2, r1
	sub r0, r0, #1
	and r4, r2, r0
	add r0, r4, r6
	add r0, r0, r5
	sub r1, r0, #1
	mov r0, r7
	and r5, r2, r1
	bl FUN_02002900
	cmp r5, r0
	movhi r0, #0
	pophi {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	mov r1, r5
	bl FUN_02002ac0
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02002ad4

	arm_func_start FUN_02002b40
FUN_02002b40: ; 0x02002B40
	mov r2, #0
	str r0, [r1, #4]
	str r2, [r1]
	cmp r0, #0
	strne r1, [r0]
	mov r0, r1
	bx lr
	arm_func_end FUN_02002b40

	arm_func_start FUN_02002b5c
FUN_02002b5c: ; 0x02002B5C
	ldr r3, [r1, #4]
	cmp r3, #0
	ldrne r2, [r1]
	strne r2, [r3]
	ldr r2, [r1]
	cmp r2, #0
	ldreq r0, [r1, #4]
	ldrne r1, [r1, #4]
	strne r1, [r2, #4]
	bx lr
	arm_func_end FUN_02002b5c

	arm_func_start FUN_02002b84
FUN_02002b84: ; 0x02002B84
	push {r3, lr}
	mov lr, r0
	cmp r0, #0
	mov ip, #0
	beq _02002BB0
	arm_func_end FUN_02002b84
_02002B98:
	cmp r1, lr
	bls _02002BB0
	mov ip, lr
	ldr lr, [lr, #4]
	cmp lr, #0
	bne _02002B98
_02002BB0:
	stm r1, {ip, lr}
	cmp lr, #0
	beq _02002BEC
	str r1, [lr]
	ldr r3, [r1, #8]
	add r2, r1, r3
	cmp r2, lr
	bne _02002BEC
	ldr r2, [lr, #8]
	add r2, r3, r2
	str r2, [r1, #8]
	ldr lr, [lr, #4]
	str lr, [r1, #4]
	cmp lr, #0
	strne r1, [lr]
_02002BEC:
	cmp ip, #0
	beq _02002C24
	str r1, [ip, #4]
	ldr r2, [ip, #8]
	add r3, ip, r2
	cmp r3, r1
	popne {r3, pc}
	ldr r1, [r1, #8]
	cmp lr, #0
	add r1, r2, r1
	str r1, [ip, #8]
	str lr, [ip, #4]
	strne ip, [lr]
	pop {r3, pc}
_02002C24:
	mov r0, r1
	pop {r3, pc}

	arm_func_start FUN_02002c2c
FUN_02002c2c: ; 0x02002C2C
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	mov r5, r1
	mov r7, r2
	bl FUN_02003da8
	ldr r1, _02002D30 ; =LAB_02093c04
	mov r6, r0
	ldr r1, [r1, r4, lsl #2]
	cmp r1, #0
	bne _02002C60
	bl FUN_02003dbc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02002c2c
_02002C60:
	cmp r5, #0
	ldrlt r5, [r1]
	ldr r1, [r1, #0x10]
	mov r0, #0xc
	mla r4, r5, r0, r1
	ldr r0, [r4, #4]
	add r1, r7, #0x3f
	mov r5, r0
	cmp r0, #0
	bic r7, r1, #0x1f
	beq _02002CA4
_02002C8C:
	ldr r1, [r5, #8]
	cmp r7, r1
	ble _02002CA4
	ldr r5, [r5, #4]
	cmp r5, #0
	bne _02002C8C
_02002CA4:
	cmp r5, #0
	bne _02002CBC
	mov r0, r6
	bl FUN_02003dbc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02002CBC:
	ldr r1, [r5, #8]
	sub r1, r1, r7
	cmp r1, #0x40
	bhs _02002CDC
	mov r1, r5
	bl FUN_02002b5c
	str r0, [r4, #4]
	b _02002D10
_02002CDC:
	str r7, [r5, #8]
	add r2, r5, r7
	str r1, [r2, #8]
	ldr r0, [r5]
	str r0, [r5, r7]
	ldr r0, [r5, #4]
	str r0, [r2, #4]
	cmp r0, #0
	strne r2, [r0]
	ldr r0, [r2]
	cmp r0, #0
	strne r2, [r0, #4]
	streq r2, [r4, #4]
_02002D10:
	ldr r0, [r4, #8]
	mov r1, r5
	bl FUN_02002b40
	str r0, [r4, #8]
	mov r0, r6
	bl FUN_02003dbc
	add r0, r5, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02002D30: .word LAB_02093c04

	arm_func_start FUN_02002d34
FUN_02002d34: ; 0x02002D34
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_02003da8
	ldr r1, _02002D98 ; =LAB_02093c04
	mov r4, r0
	ldr r0, [r1, r7, lsl #2]
	cmp r6, #0
	ldrlt r6, [r0]
	ldr r1, [r0, #0x10]
	mov r0, #0xc
	mla r7, r6, r0, r1
	sub r5, r5, #0x20
	ldr r0, [r7, #8]
	mov r1, r5
	bl FUN_02002b5c
	str r0, [r7, #8]
	ldr r0, [r7, #4]
	mov r1, r5
	bl FUN_02002b84
	str r0, [r7, #4]
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02002D98: .word LAB_02093c04
	arm_func_end FUN_02002d34

	arm_func_start FUN_02002d9c
FUN_02002d9c: ; 0x02002D9C
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r5, r1
	bl FUN_02003da8
	ldr r1, _02002DC8 ; =LAB_02093c04
	ldr r1, [r1, r4, lsl #2]
	ldr r4, [r1]
	str r5, [r1]
	bl FUN_02003dbc
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_02002DC8: .word LAB_02093c04
	arm_func_end FUN_02002d9c

	arm_func_start FUN_02002dcc
FUN_02002dcc: ; 0x02002DCC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r5, r1
	mov r4, r2
	mov r6, r3
	bl FUN_02003da8
	mov r1, #0xc
	ldr r2, _02002E70 ; =LAB_02093c04
	mul r1, r6, r1
	str r5, [r2, r7, lsl #2]
	add r2, r5, #0x14
	str r2, [r5, #0x10]
	str r6, [r5, #4]
	cmp r6, #0
	mov r7, #0
	ble _02002E40
	mvn lr, #0
	mov ip, r7
	mov r2, #0xc
	arm_func_end FUN_02002dcc
_02002E18:
	mul r3, r7, r2
	ldr r6, [r5, #0x10]
	add r7, r7, #1
	str lr, [r6, r3]
	add r3, r6, r3
	str ip, [r3, #8]
	str ip, [r3, #4]
	ldr r3, [r5, #4]
	cmp r7, r3
	blt _02002E18
_02002E40:
	ldr r3, [r5, #0x10]
	bic r2, r4, #0x1f
	add r1, r3, r1
	add r1, r1, #0x1f
	bic r1, r1, #0x1f
	mvn r3, #0
	str r3, [r5]
	str r1, [r5, #8]
	str r2, [r5, #0xc]
	bl FUN_02003dbc
	ldr r0, [r5, #8]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02002E70: .word LAB_02093c04

	arm_func_start FUN_02002e74
FUN_02002e74: ; 0x02002E74
	push {r4, r5, r6, lr}
	mov r4, r0
	mov r6, r1
	mov r5, r2
	bl FUN_02003da8
	ldr r2, _02002F10 ; =LAB_02093c04
	add r1, r6, #0x1f
	ldr r2, [r2, r4, lsl #2]
	bic r6, r1, #0x1f
	ldr lr, [r2, #4]
	bic r5, r5, #0x1f
	cmp lr, #0
	mov r4, #0
	ble _02002F04
	ldr ip, [r2, #0x10]
	mov r1, #0xc
	arm_func_end FUN_02002e74
_02002EB4:
	mul r3, r4, r1
	ldr r2, [ip, r3]
	add r3, ip, r3
	cmp r2, #0
	bge _02002EF8
	sub r1, r5, r6
	str r1, [r3]
	mov r2, #0
	str r2, [r6]
	str r2, [r6, #4]
	ldr r1, [r3]
	str r1, [r6, #8]
	str r6, [r3, #4]
	str r2, [r3, #8]
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, r5, r6, pc}
_02002EF8:
	add r4, r4, #1
	cmp r4, lr
	blt _02002EB4
_02002F04:
	bl FUN_02003dbc
	mvn r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_02002F10: .word LAB_02093c04

	arm_func_start FUN_02002f14
FUN_02002f14: ; 0x02002F14
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, #0
	bl FUN_02003da8
	ldr r1, _02002F74 ; =LAB_02093c04
	cmp r5, #0
	ldr r1, [r1, r6, lsl #2]
	ldrlt r5, [r1]
	ldr r2, [r1, #0x10]
	mov r1, #0xc
	mla r1, r5, r1, r2
	ldr r2, [r1, #4]
	cmp r2, #0
	beq _02002F68
	arm_func_end FUN_02002f14
_02002F50:
	ldr r1, [r2, #8]
	ldr r2, [r2, #4]
	sub r1, r1, #0x20
	cmp r2, #0
	add r4, r4, r1
	bne _02002F50
_02002F68:
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, r5, r6, pc}
	.align 2, 0_02002F74: .word LAB_02093c04

	arm_func_start FUN_02002f78
FUN_02002f78: ; 0x02002F78
	cmp r0, #0x5000000
	blo _02002F90
	ldr r1, _02002F98 ; =0x07000800
	cmp r0, r1
	movlo r0, #1
	bxlo lr
	arm_func_end FUN_02002f78
_02002F90:
	mov r0, #0
	bx lr
	.align 2, 0_02002F98: .word 0x07000800

	arm_func_start FUN_02002f9c
FUN_02002f9c: ; 0x02002F9C
	mrc p15, #0, r0, c9, c1, #0
	ldr r1, _02002FAC ; =0xFFFFF000
	and r0, r0, r1
	bx lr
	.align 2, 0_02002FAC: .word 0xFFFFF000
	arm_func_end FUN_02002f9c

	arm_func_start FUN_02002fb0
FUN_02002fb0: ; 0x02002FB0
	mrc p15, #0, r0, c1, c0, #0
	orr r0, r0, #1
	mcr p15, #0, r0, c1, c0, #0
	bx lr
	arm_func_end FUN_02002fb0

	arm_func_start FUN_02002fc0
FUN_02002fc0: ; 0x02002FC0
	mrc p15, #0, r0, c1, c0, #0
	bic r0, r0, #1
	mcr p15, #0, r0, c1, c0, #0
	bx lr
	arm_func_end FUN_02002fc0

	arm_func_start FUN_02002fd0
FUN_02002fd0: ; 0x02002FD0
	mrc p15, #0, r1, c2, c0, #1
	orr r1, r1, r0
	mcr p15, #0, r1, c2, c0, #1
	bx lr
	arm_func_end FUN_02002fd0

	arm_func_start FUN_02002fe0
FUN_02002fe0: ; 0x02002FE0
	mrc p15, #0, r1, c2, c0, #1
	bic r1, r1, r0
	mcr p15, #0, r1, c2, c0, #1
	bx lr
	arm_func_end FUN_02002fe0

	arm_func_start FUN_02002ff0
FUN_02002ff0: ; 0x02002FF0
	mrc p15, #0, r1, c2, c0, #0
	orr r1, r1, r0
	mcr p15, #0, r1, c2, c0, #0
	bx lr
	arm_func_end FUN_02002ff0

	arm_func_start FUN_02003000
FUN_02003000: ; 0x02003000
	mrc p15, #0, r1, c2, c0, #0
	bic r1, r1, r0
	mcr p15, #0, r1, c2, c0, #0
	bx lr
	arm_func_end FUN_02003000

	arm_func_start FUN_02003010
FUN_02003010: ; 0x02003010
	mrc p15, #0, r2, c5, c0, #2
	bic r2, r2, r0
	orr r2, r2, r1
	mcr p15, #0, r2, c5, c0, #2
	bx lr
	arm_func_end FUN_02003010

	arm_func_start FUN_02003024
FUN_02003024: ; 0x02003024
	mrc p15, #0, r1, c3, c0, #0
	orr r1, r1, r0
	mcr p15, #0, r1, c3, c0, #0
	bx lr
	arm_func_end FUN_02003024

	arm_func_start FUN_02003034
FUN_02003034: ; 0x02003034
	mrc p15, #0, r1, c3, c0, #0
	bic r1, r1, r0
	mcr p15, #0, r1, c3, c0, #0
	bx lr
	arm_func_end FUN_02003034

	arm_func_start FUN_02003044
FUN_02003044: ; 0x02003044
	push {r3, lr}
	ldr r2, _0200305C ; =0x0208EC38
	ldr r2, [r2, r0, lsl #2]
	mov r0, r1
	blx r2
	pop {r3, pc}
	.align 2, 0_0200305C: .word 0x0208EC38
	arm_func_end FUN_02003044

	arm_func_start FUN_02003060
FUN_02003060: ; 0x02003060
	mcr p15, #0, r0, c6, c0, #0
	bx lr
	arm_func_end FUN_02003060

	arm_func_start FUN_02003068
FUN_02003068: ; 0x02003068
	mcr p15, #0, r0, c6, c1, #0
	bx lr
	arm_func_end FUN_02003068

	arm_func_start FUN_02003070
FUN_02003070: ; 0x02003070
	mcr p15, #0, r0, c6, c2, #0
	bx lr
	arm_func_end FUN_02003070

	arm_func_start FUN_02003078
FUN_02003078: ; 0x02003078
	mcr p15, #0, r0, c6, c3, #0
	bx lr
	arm_func_end FUN_02003078

	arm_func_start FUN_02003080
FUN_02003080: ; 0x02003080
	mcr p15, #0, r0, c6, c4, #0
	bx lr
	arm_func_end FUN_02003080

	arm_func_start FUN_02003088
FUN_02003088: ; 0x02003088
	mcr p15, #0, r0, c6, c5, #0
	bx lr
	arm_func_end FUN_02003088

	arm_func_start FUN_02003090
FUN_02003090: ; 0x02003090
	mcr p15, #0, r0, c6, c6, #0
	bx lr
	arm_func_end FUN_02003090

	arm_func_start FUN_02003098
FUN_02003098: ; 0x02003098
	mcr p15, #0, r0, c6, c7, #0
	bx lr
	arm_func_end FUN_02003098

	arm_func_start FUN_020030a0
FUN_020030a0: ; 0x020030A0
	mrc p15, #0, r0, c6, c0, #0
	bx lr
	arm_func_end FUN_020030a0

	arm_func_start FUN_020030a8
FUN_020030a8: ; 0x020030A8
	mrc p15, #0, r0, c6, c1, #0
	bx lr
	arm_func_end FUN_020030a8

	arm_func_start FUN_020030b0
FUN_020030b0: ; 0x020030B0
	mrc p15, #0, r0, c6, c2, #0
	bx lr
	arm_func_end FUN_020030b0

	arm_func_start FUN_020030b8
FUN_020030b8: ; 0x020030B8
	mrc p15, #0, r0, c6, c3, #0
	bx lr
	arm_func_end FUN_020030b8

	arm_func_start FUN_020030c0
FUN_020030c0: ; 0x020030C0
	mrc p15, #0, r0, c6, c4, #0
	bx lr
	arm_func_end FUN_020030c0

	arm_func_start FUN_020030c8
FUN_020030c8: ; 0x020030C8
	mrc p15, #0, r0, c6, c5, #0
	bx lr
	arm_func_end FUN_020030c8

	arm_func_start FUN_020030d0
FUN_020030d0: ; 0x020030D0
	mrc p15, #0, r0, c6, c6, #0
	bx lr
	arm_func_end FUN_020030d0

	arm_func_start FUN_020030d8
FUN_020030d8: ; 0x020030D8
	mrc p15, #0, r0, c6, c7, #0
	bx lr
	arm_func_end FUN_020030d8

	arm_func_start FUN_020030e0
FUN_020030e0: ; 0x020030E0
	push {r3, lr}
	sub r3, r2, #0x16
	mov ip, #0x1000
	rsb ip, ip, #0
	lsr r3, r3, #1
	and r1, r1, ip, lsl r3
	orr r1, r2, r1
	orr r1, r1, #1
	bl FUN_02003044
	pop {r3, pc}
	arm_func_end FUN_020030e0

	arm_func_start FUN_02003108
FUN_02003108: ; 0x02003108
	ldr r1, _02003164 ; =0x02FFFD9C
	ldr r0, _02003168 ; =LAB_02093c28
	ldr r2, [r1]
	mov r1, #0
	str r2, [r0, #8]
	cmp r2, #0x2600000
	blo _0200312C
	cmp r2, #0x2800000
	movlo r1, #1
	arm_func_end FUN_02003108
_0200312C:
	ldr r0, _02003168 ; =LAB_02093c28
	cmp r1, #0
	moveq r2, #0
	cmp r2, #0
	str r2, [r0]
	ldreq r1, _02003164 ; =0x02FFFD9C
	ldreq r2, _0200316C ; =FUN_02003180
	biceq r0, r1, #0x800000
	streq r2, [r1]
	streq r2, [r0]
	ldr r0, _02003168 ; =LAB_02093c28
	mov r1, #0
	str r1, [r0, #0xc]
	bx lr
	.align 2, 0_02003164: .word 0x02FFFD9C
_02003168: .word LAB_02093c28
_0200316C: .word FUN_02003180

	arm_func_start FUN_02003170
FUN_02003170: ; 0x02003170
	ldr r0, _0200317C ; =LAB_02093c28
	ldr r0, [r0, #8]
	bx lr
	.align 2, 0_0200317C: .word LAB_02093c28
	arm_func_end FUN_02003170

	arm_func_start FUN_02003180
FUN_02003180: ; 0x02003180
	ldr ip, _020031EC ; =LAB_02093c28
	ldr ip, [ip]
	cmp ip, #0
	movne lr, pc
	bxne ip
	arm_func_end FUN_02003180

	arm_func_start LAB_02003194
LAB_02003194: ; 0x02003194
	ldr ip, _020031F0 ; =0x02000000
	stmdb ip!, {r0, r1, r2, r3, sp, lr}
	and r0, sp, #1
	mov sp, ip
	mrs r1, apsr
	and r1, r1, #0x1f
	teq r1, #0x17
	bne _020031BC
	bl FUN_020031f4
	b _020031C8
	arm_func_end LAB_02003194
_020031BC:
	teq r1, #0x1b
	bne _020031C8
	bl FUN_020031f4
_020031C8:
	ldr ip, _020031EC ; =LAB_02093c28
	ldr ip, [ip]
	cmp ip, #0
_020031D4:
	beq _020031D4
_020031D8:
	mov r0, r0
	b _020031D8

	arm_func_start FUN_020031e0
FUN_020031e0: ; 0x020031E0
	pop {r0, r1, r2, r3, ip, lr}
	mov sp, ip
	bx lr
	.align 2, 0_020031EC: .word LAB_02093c28
_020031F0: .word 0x02000000
	arm_func_end FUN_020031e0

	arm_func_start FUN_020031f4
FUN_020031f4: ; 0x020031F4
	push {r0, lr}
	bl FUN_02003208
	bl FUN_02003288
	pop {r0, lr}
	bx lr
	arm_func_end FUN_020031f4

	arm_func_start FUN_02003208
FUN_02003208: ; 0x02003208
	ldr r1, _02003284 ; =LAB_02093c58
	str r0, [r1, #0x6c]
	ldr r0, [ip]
	str r0, [r1, #4]
	ldr r0, [ip, #4]
	str r0, [r1, #8]
	ldr r0, [ip, #8]
	str r0, [r1, #0xc]
	ldr r0, [ip, #0xc]
	str r0, [r1, #0x10]
	ldr r2, [ip, #0x10]
	bic r2, r2, #1
	add r0, r1, #0x14
	stm r0, {r4, r5, r6, r7, r8, sb, sl, fp}
	ldr r0, [r2]
	str r0, [r1, #0x64]
	ldr r3, [r2, #4]
	str r3, [r1]
	ldr r0, [r2, #8]
	str r0, [r1, #0x34]
	ldr r0, [r2, #0xc]
	str r0, [r1, #0x40]
	mrs r0, apsr
	orr r3, r3, #0x80
	bic r3, r3, #0x20
	msr cpsr_fsxc, r3
	str sp, [r1, #0x38]
	str lr, [r1, #0x3c]
	mrs r2, spsr
	msr cpsr_fsxc, r0
	bx lr
	.align 2, 0_02003284: .word LAB_02093c58
	arm_func_end FUN_02003208

	arm_func_start FUN_02003288
FUN_02003288: ; 0x02003288
	push {r3, lr}
	ldr r0, _020032EC ; =LAB_02093c28
	ldr r0, [r0, #0xc]
	cmp r0, #0
	popeq {r3, pc}
	mrs r2, apsr
	mov r0, sp
	ldr r1, _020032F0 ; =0x0000009F
	msr cpsr_fsxc, r1
	mov r1, sp
	mov sp, r0
	push {r1, r2}
	bl FUN_02002fb0
	ldr r0, _020032F4 ; =LAB_02093c58
	ldr r1, _020032F8 ; =LAB_02093c2c
	ldr r1, [r1]
	ldr ip, _020032FC ; =LAB_02093c34
	ldr ip, [ip]
	ldr lr, _02003300 ; =0x020032D8
	bx ip
_020032D8:
	.byte 0x38, 0xFF, 0xFF, 0xEB, 0x06, 0x00, 0xBD, 0xE8
	.byte 0x01, 0xD0, 0xA0, 0xE1, 0x02, 0xF0, 0x2F, 0xE1, 0x08, 0x80, 0xBD, 0xE8
_020032EC: .word LAB_02093c28
_020032F0: .word 0x0000009F
_020032F4: .word LAB_02093c58
_020032F8: .word LAB_02093c2c
_020032FC: .word LAB_02093c34
_02003300: .word 0x020032D8
	arm_func_end FUN_02003288

	arm_func_start FUN_02003304
FUN_02003304: ; 0x02003304
	ldr r1, _02003324 ; =LAB_02093cc8
	mov r2, #1
	lsl r0, r2, r0
	ldrh r2, [r1]
	lsl r0, r0, #0x10
	orr r0, r2, r0, lsr #16
	strh r0, [r1]
	bx lr
	.align 2, 0_02003324: .word LAB_02093cc8
	arm_func_end FUN_02003304

	arm_func_start FUN_02003328
FUN_02003328: ; 0x02003328
	push {r4, r5, r6, lr}
	ldr r4, _0200338C ; =_02093CCC
	ldrh r0, [r4]
	cmp r0, #0
	popne {r4, r5, r6, pc}
	mov r1, #1
	mov r6, #0
	mov r0, r6
	strh r1, [r4]
	bl FUN_02003304
	str r6, [r4, #8]
	mov r5, #8
	ldr r3, _02003390 ; =0x04000102
	str r6, [r4, #0xc]
	strh r6, [r3]
	ldr r1, _02003394 ; =FUN_020033a8
	mov r0, r5
	strh r6, [r3, #-2]
	mov r2, #0xc1
	strh r2, [r3]
	bl FUN_02000e30
	mov r0, r5
	bl FUN_02000ffc
	str r6, [r4, #4]
	pop {r4, r5, r6, pc}
	.align 2, 0_0200338C: .word _02093CCC
_02003390: .word 0x04000102
_02003394: .word FUN_020033a8
	arm_func_end FUN_02003328

	arm_func_start FUN_02003398
FUN_02003398: ; 0x02003398
	ldr r0, _020033A4 ; =_02093CCC
	ldrh r0, [r0]
	bx lr
	.align 2, 0_020033A4: .word _02093CCC
	arm_func_end FUN_02003398

	arm_func_start FUN_020033a8
FUN_020033a8: ; 0x020033A8
	push {r3, lr}
	ldr r0, _02003404 ; =_02093CCC
	mov r3, #0
	ldr r2, [r0, #8]
	ldr ip, [r0, #0xc]
	adds r2, r2, #1
	str r2, [r0, #8]
	adc r1, ip, #0
	str r1, [r0, #0xc]
	ldr r1, [r0, #4]
	cmp r1, #0
	beq _020033F0
	ldr r2, _02003408 ; =0x04000102
	mov r1, #0xc1
	strh r3, [r2]
	strh r3, [r2, #-2]
	strh r1, [r2]
	str r3, [r0, #4]
	arm_func_end FUN_020033a8
_020033F0:
	mov r0, #0
	ldr r1, _0200340C ; =FUN_020033a8
	mov r2, r0
	bl FUN_02000f8c
	pop {r3, pc}
	.align 2, 0_02003404: .word _02093CCC
_02003408: .word 0x04000102
_0200340C: .word FUN_020033a8

	arm_func_start FUN_02003410
FUN_02003410: ; 0x02003410
	push {r3, r4, lr}
	sub sp, sp, #0xc
	bl FUN_02003da8
	ldr r4, _020034A4 ; =0x04000100
	ldr r2, _020034A8 ; =0x0000FFFF
	ldrh ip, [r4]
	ldr r3, _020034AC ; =_02093CCC
	sub r1, r2, #0x10000
	strh ip, [sp]
	ldr ip, [r3, #8]
	ldr lr, [r3, #0xc]
	and ip, ip, r1
	and lr, lr, r2
	str ip, [sp, #4]
	str lr, [sp, #8]
	ldr r1, [r4, #0x114]
	tst r1, #8
	beq _0200347C
	ldrh r1, [sp]
	tst r1, #0x8000
	bne _0200347C
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	adds r2, r2, #1
	adc r3, r3, #0
	str r2, [sp, #4]
	str r3, [sp, #8]
	arm_func_end FUN_02003410
_0200347C:
	bl FUN_02003dbc
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	ldrh r0, [sp]
	lsl r1, r3, #0x10
	orr r1, r1, r2, lsr #16
	orr r1, r1, r0, asr #31
	orr r0, r0, r2, lsl #16
	add sp, sp, #0xc
	pop {r3, r4, pc}
	.align 2, 0_020034A4: .word 0x04000100
_020034A8: .word 0x0000FFFF
_020034AC: .word _02093CCC

	arm_func_start FUN_020034b0
FUN_020034b0: ; 0x020034B0
	ldr r0, _020034BC ; =0x04000100
	ldrh r0, [r0]
	bx lr
	.align 2, 0_020034BC: .word 0x04000100
	arm_func_end FUN_020034b0

	arm_func_start FUN_020034c0
FUN_020034c0: ; 0x020034C0
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02003da8
	lsr ip, r5, #0x10
	mov r3, #1
	rsb r1, r3, #0x10000
	ldr lr, _02003524 ; =0x04000214
	mov r6, #8
	ldr r2, _02003528 ; =_02093CCC
	str r6, [lr]
	str r3, [r2, #4]
	orr ip, ip, r4, lsl #16
	str ip, [r2, #8]
	lsr r4, r4, #0x10
	ldr r3, _0200352C ; =0x04000102
	str r4, [r2, #0xc]
	mov r2, #0
	strh r2, [r3]
	and r1, r5, r1
	strh r1, [r3, #-2]
	mov r1, #0xc1
	strh r1, [r3]
	bl FUN_02003dbc
	pop {r4, r5, r6, pc}
	.align 2, 0_02003524: .word 0x04000214
_02003528: .word _02093CCC
_0200352C: .word 0x04000102
	arm_func_end FUN_020034c0

	arm_func_start FUN_02003530
FUN_02003530: ; 0x02003530
	push {r4, r5, r6, lr}
	mov r5, r0
	bl FUN_02003410
	mov r4, #0
	ldr r3, _020035A8 ; =0x04000106
	mov r2, r4
	strh r4, [r3]
	ldr ip, [r5, #0xc]
	ldr lr, [r5, #0x10]
	subs r6, ip, r0
	sbc r5, lr, r1
	ldr r1, _020035AC ; =FUN_0200389c
	mov r0, #1
	bl FUN_02000f8c
	subs r0, r6, #0
	sbcs r0, r5, #0
	ldrlt r4, _020035B0 ; =0x0000FFFE
	blt _0200358C
	subs r0, r6, #0x10000
	sbcs r0, r5, r4
	mvnlt r0, r6
	lsllt r0, r0, #0x10
	lsrlt r4, r0, #0x10
	arm_func_end FUN_02003530
_0200358C:
	ldr r2, _020035B4 ; =0x04000104
	mov r1, #0xc1
	strh r4, [r2]
	mov r0, #0x10
	strh r1, [r2, #2]
	bl FUN_02000ffc
	pop {r4, r5, r6, pc}
	.align 2, 0_020035A8: .word 0x04000106
_020035AC: .word FUN_0200389c
_020035B0: .word 0x0000FFFE
_020035B4: .word 0x04000104

	arm_func_start FUN_020035b8
FUN_020035b8: ; 0x020035B8
	push {r4, lr}
	ldr r4, _020035F0 ; =LAB_02093cdc
	ldrh r0, [r4]
	cmp r0, #0
	popne {r4, pc}
	mov r0, #1
	strh r0, [r4]
	bl FUN_02003304
	mov r1, #0
	str r1, [r4, #4]
	mov r0, #0x10
	str r1, [r4, #8]
	bl FUN_0200102c
	pop {r4, pc}
	.align 2, 0_020035F0: .word LAB_02093cdc
	arm_func_end FUN_020035b8

	arm_func_start FUN_020035f4
FUN_020035f4: ; 0x020035F4
	ldr r0, _02003600 ; =LAB_02093cdc
	ldrh r0, [r0]
	bx lr
	.align 2, 0_02003600: .word LAB_02093cdc
	arm_func_end FUN_020035f4

	arm_func_start FUN_02003604
FUN_02003604: ; 0x02003604
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #8]
	bx lr
	arm_func_end FUN_02003604

	arm_func_start FUN_02003614
FUN_02003614: ; 0x02003614
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	ldr r0, [r8, #0x20]
	ldr r4, [r8, #0x1c]
	cmp r0, #0
	mov r6, r1
	mov r7, r2
	cmpeq r4, #0
	mov sb, #0
	beq _0200368C
	bl FUN_02003410
	ldr r7, [r8, #0x28]
	ldr r6, [r8, #0x24]
	cmp r7, r1
	cmpeq r6, r0
	bhs _0200368C
	ldr r4, [r8, #0x1c]
	ldr r5, [r8, #0x20]
	subs r0, r0, r6
	mov r2, r4
	mov r3, r5
	sbc r1, r1, r7
	bl FUN_0201f954
	adds r2, r0, #1
	adc r0, r1, sb
	umull r3, r1, r4, r2
	mla r1, r4, r0, r1
	mla r1, r5, r2, r1
	adds r6, r6, r3
	adc r7, r7, r1
	arm_func_end FUN_02003614
_0200368C:
	ldr r0, _02003738 ; =LAB_02093cdc
	str r6, [r8, #0xc]
	str r7, [r8, #0x10]
	ldr r2, [r0, #4]
	cmp r2, #0
	beq _02003700
_020036A4:
	ldr r0, [r2, #0xc]
	ldr r1, [r2, #0x10]
	subs r0, r6, r0
	sbc r1, r7, r1
	subs r0, r0, #0
	sbcs r0, r1, #0
	bge _020036F4
	ldr r0, [r2, #0x14]
	str r0, [r8, #0x14]
	str r8, [r2, #0x14]
	ldr r0, [r8, #0x14]
	str r2, [r8, #0x18]
	cmp r0, #0
	strne r8, [r0, #0x18]
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r1, _02003738 ; =LAB_02093cdc
	mov r0, r8
	str r8, [r1, #4]
	bl FUN_02003530
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020036F4:
	ldr r2, [r2, #0x18]
	cmp r2, #0
	bne _020036A4
_02003700:
	ldr r1, _02003738 ; =LAB_02093cdc
	mov r0, #0
	str r0, [r8, #0x18]
	ldr r0, [r1, #8]
	str r8, [r1, #8]
	str r0, [r8, #0x14]
	cmp r0, #0
	strne r8, [r0, #0x18]
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	str r8, [r1, #8]
	mov r0, r8
	str r8, [r1, #4]
	bl FUN_02003530
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02003738: .word LAB_02093cdc

	arm_func_start FUN_0200373c
FUN_0200373c: ; 0x0200373C
	push {r4, r5, r6, r7, r8, lr}
	movs r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	beq _02003760
	ldr r0, [r8]
	cmp r0, #0
	beq _02003764
	arm_func_end FUN_0200373c
_02003760:
	bl FUN_02004160
_02003764:
	bl FUN_02003da8
	mov r2, #0
	ldr r1, [sp, #0x18]
	mov r4, r0
	str r2, [r8, #0x1c]
	str r2, [r8, #0x20]
	str r5, [r8]
	str r1, [r8, #4]
	bl FUN_02003410
	adds r3, r7, r0
	adc r2, r6, r1
	mov r0, r8
	mov r1, r3
	bl FUN_02003614
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020037a8
FUN_020037a8: ; 0x020037A8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs sb, r0
	mov r7, r1
	mov r8, r2
	mov r5, r3
	ldr r6, [sp, #0x20]
	beq _020037D0
	ldr r0, [sb]
	cmp r0, #0
	beq _020037D4
	arm_func_end FUN_020037a8
_020037D0:
	bl FUN_02004160
_020037D4:
	bl FUN_02003da8
	ldr ip, [sp, #0x24]
	ldr r3, [sp, #0x28]
	mov r1, #0
	mov r4, r0
	mov r0, sb
	mov r2, r1
	str r5, [sb, #0x1c]
	str r6, [sb, #0x20]
	str r7, [sb, #0x24]
	str r8, [sb, #0x28]
	str ip, [sb]
	str r3, [sb, #4]
	bl FUN_02003614
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02003818
FUN_02003818: ; 0x02003818
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	ldr r1, [r5]
	mov r4, r0
	cmp r1, #0
	bne _0200383C
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02003818
_0200383C:
	ldr r0, [r5, #0x18]
	cmp r0, #0
	ldreq r2, [r5, #0x14]
	ldreq r1, _02003898 ; =LAB_02093cdc
	streq r2, [r1, #8]
	ldrne r1, [r5, #0x14]
	strne r1, [r0, #0x14]
	ldr r1, [r5, #0x14]
	cmp r1, #0
	strne r0, [r1, #0x18]
	bne _0200387C
	ldr r1, _02003898 ; =LAB_02093cdc
	cmp r0, #0
	str r0, [r1, #4]
	beq _0200387C
	bl FUN_02003530
_0200387C:
	mov r2, #0
	mov r0, r4
	str r2, [r5]
	str r2, [r5, #0x1c]
	str r2, [r5, #0x20]
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	.align 2, 0_02003898: .word LAB_02093cdc

	arm_func_start FUN_0200389c
FUN_0200389c: ; 0x0200389C
	push {r0, lr}
	bl FUN_020038ac
	pop {r0, lr}
	bx lr
	arm_func_end FUN_0200389c

	arm_func_start FUN_020038ac
FUN_020038ac: ; 0x020038AC
	push {r3, r4, r5, lr}
	ldr r1, _0200398C ; =0x04000106
	mov r4, #0
	mov r0, #0x10
	strh r4, [r1]
	bl FUN_0200102c
	ldr r0, _02003990 ; =0x027E0000
	add r0, r0, #0x3000
	ldr r1, [r0, #0xff8]
	orr r1, r1, #0x10
	str r1, [r0, #0xff8]
	bl FUN_02003410
	ldr r2, _02003994 ; =LAB_02093cdc
	ldr r5, [r2, #4]
	cmp r5, #0
	popeq {r3, r4, r5, pc}
	ldr r3, [r5, #0x10]
	ldr ip, [r5, #0xc]
	cmp r1, r3
	cmpeq r0, ip
	bhs _0200390C
	mov r0, r5
	bl FUN_02003530
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020038ac
_0200390C:
	ldr r0, [r5, #0x18]
	str r0, [r2, #4]
	cmp r0, #0
	streq r4, [r2, #8]
	strne r4, [r0, #0x14]
	ldr r0, [r5, #0x20]
	ldr r2, [r5, #0x1c]
	cmp r0, #0
	ldr r4, [r5]
	mov r0, #0
	cmpeq r2, #0
	streq r0, [r5]
	cmp r4, #0
	beq _0200394C
	ldr r0, [r5, #4]
	blx r4
_0200394C:
	ldr r0, [r5, #0x20]
	ldr r2, [r5, #0x1c]
	cmp r0, #0
	cmpeq r2, #0
	mov r1, #0
	beq _02003974
	mov r0, r5
	mov r2, r1
	str r4, [r5]
	bl FUN_02003614
_02003974:
	ldr r0, _02003994 ; =LAB_02093cdc
	ldr r0, [r0, #4]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_02003530
	pop {r3, r4, r5, pc}
	.align 2, 0_0200398C: .word 0x04000106
_02003990: .word 0x027E0000
_02003994: .word LAB_02093cdc

	arm_func_start FUN_02003998
FUN_02003998: ; 0x02003998
	push {r3, r4, r5, lr}
	ldr r4, _020039D4 ; =LAB_02093ce8
	ldrh r0, [r4]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r0, #1
	strh r0, [r4]
	mov r5, #0
	str r5, [r4, #0xc]
	mov r0, #4
	str r5, [r4, #0x10]
	bl FUN_0200102c
	str r5, [r4, #8]
	str r5, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_020039D4: .word LAB_02093ce8
	arm_func_end FUN_02003998

	arm_func_start FUN_020039d8
FUN_020039d8: ; 0x020039D8
	push {r3, lr}
	ldr r1, _02003A50 ; =LAB_02093ce8
	ldr r3, [r1, #0xc]
	cmp r3, #0
	beq _02003A48
	ldr ip, [r0, #0xc]
	arm_func_end FUN_020039d8
_020039F0:
	ldr r1, [r3, #0xc]
	cmp r1, ip
	blo _02003A3C
	bne _02003A10
	ldrsh r2, [r3, #0x10]
	ldrsh r1, [r0, #0x10]
	cmp r2, r1
	ble _02003A3C
_02003A10:
	ldr r1, [r3, #0x14]
	str r1, [r0, #0x14]
	str r3, [r0, #0x18]
	str r0, [r3, #0x14]
	cmp r1, #0
	strne r0, [r1, #0x18]
	popne {r3, pc}
	ldr r1, _02003A50 ; =LAB_02093ce8
	str r0, [r1, #0xc]
	bl FUN_02003b64
	pop {r3, pc}
_02003A3C:
	ldr r3, [r3, #0x18]
	cmp r3, #0
	bne _020039F0
_02003A48:
	bl FUN_02003a54
	pop {r3, pc}
	.align 2, 0_02003A50: .word LAB_02093ce8

	arm_func_start FUN_02003a54
FUN_02003a54: ; 0x02003A54
	push {r3, lr}
	ldr r1, _02003A88 ; =LAB_02093ce8
	mov r2, #0
	ldr r3, [r1, #0x10]
	str r3, [r0, #0x14]
	str r2, [r0, #0x18]
	str r0, [r1, #0x10]
	cmp r3, #0
	strne r0, [r3, #0x18]
	popne {r3, pc}
	str r0, [r1, #0xc]
	bl FUN_02003b64
	pop {r3, pc}
	.align 2, 0_02003A88: .word LAB_02093ce8
	arm_func_end FUN_02003a54

	arm_func_start FUN_02003a8c
FUN_02003a8c: ; 0x02003A8C
	cmp r0, #0
	bxeq lr
	ldr r2, [r0, #0x18]
	ldr r1, [r0, #0x14]
	cmp r2, #0
	ldreq r0, _02003AC0 ; =LAB_02093ce8
	strne r1, [r2, #0x14]
	streq r1, [r0, #0x10]
	cmp r1, #0
	ldreq r0, _02003AC0 ; =LAB_02093ce8
	strne r2, [r1, #0x18]
	streq r2, [r0, #0xc]
	bx lr
	.align 2, 0_02003AC0: .word LAB_02093ce8
	arm_func_end FUN_02003a8c

	arm_func_start FUN_02003ac4
FUN_02003ac4: ; 0x02003AC4
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #8]
	str r1, [r0, #0x20]
	bx lr
	arm_func_end FUN_02003ac4

	arm_func_start FUN_02003ad8
FUN_02003ad8: ; 0x02003AD8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_02003da8
	mov r4, r0
	cmp r8, #0
	beq _02003B08
	ldr r0, [r8]
	cmp r0, #0
	beq _02003B0C
	arm_func_end FUN_02003ad8
_02003B08:
	bl FUN_02004160
_02003B0C:
	ldr r0, _02003B60 ; =0x04000006
	ldrh sb, [r0]
	mov r0, sb
	bl FUN_02003d58
	mov r1, #0
	cmp r7, sb
	addle r0, r0, #1
	ldr r2, [sp, #0x20]
	str r1, [r8, #0x1c]
	str r0, [r8, #0xc]
	mov r1, #0
	mov r0, r8
	strh r7, [r8, #0x10]
	strh r6, [r8, #0x12]
	str r5, [r8]
	str r2, [r8, #4]
	str r1, [r8, #0x24]
	bl FUN_020039d8
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02003B60: .word 0x04000006

	arm_func_start FUN_02003b64
FUN_02003b64: ; 0x02003B64
	push {r3, r4, r5, lr}
	mov r4, #4
	mov r5, r0
	ldr r1, _02003BA0 ; =FUN_02003ba4
	mov r0, r4
	bl FUN_02000e30
	ldrsh r0, [r5, #0x10]
	bl FUN_020043ec
	sub r2, r4, #0xfc000000
	ldrh r1, [r2]
	mov r0, r4
	orr r1, r1, #0x20
	strh r1, [r2]
	bl FUN_02000ffc
	pop {r3, r4, r5, pc}
	.align 2, 0_02003BA0: .word FUN_02003ba4
	arm_func_end FUN_02003b64

	arm_func_start FUN_02003ba4
FUN_02003ba4: ; 0x02003BA4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r4, #4
	mov r0, r4
	bl FUN_0200102c
	sub sb, r4, #0xfc000000
	ldr r0, _02003CFC ; =0x027E0000
	ldrh r1, [sb]
	ldr fp, _02003D00 ; =0x0000FFDF
	add r0, r0, #0x3000
	and r1, r1, fp
	strh r1, [sb]
	ldr r1, [r0, #0xff8]
	orr r1, r1, #4
	str r1, [r0, #0xff8]
	ldrh r0, [sb]
	asr r1, r0, #8
	lsl r0, r0, #1
	and r1, r1, #0xff
	and r0, r0, #0x100
	orr r0, r1, r0
	sub r0, r0, #1
	bl FUN_02003d58
	ldr r4, _02003D04 ; =LAB_02093ce8
	ldr sl, [r4, #0xc]
	cmp sl, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r8, _02003D08 ; =0x04000006
	mov r5, #4
	arm_func_end FUN_02003ba4
_02003C14:
	ldrh r7, [r8]
	mov r0, r7
	bl FUN_02003d58
	mov r6, r0
	mov r0, sl
	mov r1, r6
	mov r2, r7
	bl FUN_02003d0c
	cmp r0, #0
	beq _02003C50
	cmp r0, #1
	beq _02003C8C
	cmp r0, #2
	beq _02003CD0
	b _02003CEC
_02003C50:
	mov r0, sl
	bl FUN_02003b64
	ldrh r1, [r8]
	ldrsh r0, [sl, #0x10]
	cmp r0, r1
	ldreq r0, [sl, #0xc]
	cmpeq r0, r6
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r5
	bl FUN_0200102c
	ldrh r1, [sb]
	mov r0, r5
	and r1, r1, fp
	strh r1, [sb]
	bl FUN_0200105c
_02003C8C:
	ldr r6, [sl]
	mov r0, sl
	bl FUN_02003a8c
	mov r0, #0
	str r0, [sl]
	cmp r6, #0
	beq _02003CB0
	ldr r0, [sl, #4]
	blx r6
_02003CB0:
	ldr r0, [sl, #0x1c]
	cmp r0, #0
	beq _02003CEC
	ldr r0, [sl, #0x24]
	cmp r0, #0
	bne _02003CEC
	str r6, [sl]
	b _02003CD8
_02003CD0:
	mov r0, sl
	bl FUN_02003a8c
_02003CD8:
	ldr r1, [r4, #8]
	mov r0, sl
	add r1, r1, #1
	str r1, [sl, #0xc]
	bl FUN_020039d8
_02003CEC:
	ldr sl, [r4, #0xc]
	cmp sl, #0
	bne _02003C14
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02003CFC: .word 0x027E0000
_02003D00: .word 0x0000FFDF
_02003D04: .word LAB_02093ce8
_02003D08: .word 0x04000006

	arm_func_start FUN_02003d0c
FUN_02003d0c: ; 0x02003D0C
	ldrsh r3, [r0, #0x10]
	ldr ip, [r0, #0xc]
	subs r1, r1, ip
	sub r2, r2, r3
	bmi _02003D30
	cmp r1, #0
	bne _02003D38
	cmp r2, #0
	bge _02003D38
	arm_func_end FUN_02003d0c
_02003D30:
	mov r0, #0
	bx lr
_02003D38:
	ldrsh r0, [r0, #0x12]
	cmp r2, #0
	addlt r1, r2, #7
	addlt r2, r1, #0x100
	cmp r2, r0
	movle r0, #1
	movgt r0, #2
	bx lr

	arm_func_start FUN_02003d58
FUN_02003d58: ; 0x02003D58
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	ldr r1, _02003D90 ; =LAB_02093ce8
	ldr r4, _02003D90 ; =LAB_02093ce8
	ldr r2, [r1, #4]
	cmp r5, r2
	ldrlt r2, [r1, #8]
	addlt r2, r2, #1
	strlt r2, [r1, #8]
	str r5, [r4, #4]
	bl FUN_02003dbc
	ldr r0, [r4, #8]
	pop {r3, r4, r5, pc}
	.align 2, 0_02003D90: .word LAB_02093ce8
	arm_func_end FUN_02003d58

	arm_func_start FUN_02003d94
FUN_02003d94: ; 0x02003D94
	mrs r0, apsr
	bic r1, r0, #0x80
	msr cpsr_c, r1
	and r0, r0, #0x80
	bx lr
	arm_func_end FUN_02003d94

	arm_func_start FUN_02003da8
FUN_02003da8: ; 0x02003DA8
	mrs r0, apsr
	orr r1, r0, #0x80
	msr cpsr_c, r1
	and r0, r0, #0x80
	bx lr
	arm_func_end FUN_02003da8

	arm_func_start FUN_02003dbc
FUN_02003dbc: ; 0x02003DBC
	mrs r1, apsr
	bic r2, r1, #0x80
	orr r2, r2, r0
	msr cpsr_c, r2
	and r0, r1, #0x80
	bx lr
	arm_func_end FUN_02003dbc

	arm_func_start FUN_02003dd4
FUN_02003dd4: ; 0x02003DD4
	mrs r0, apsr
	orr r1, r0, #0xc0
	msr cpsr_c, r1
	and r0, r0, #0xc0
	bx lr
	arm_func_end FUN_02003dd4

	arm_func_start FUN_02003de8
FUN_02003de8: ; 0x02003DE8
	mrs r1, apsr
	bic r2, r1, #0xc0
	orr r2, r2, r0
	msr cpsr_c, r2
	and r0, r1, #0xc0
	bx lr
	arm_func_end FUN_02003de8

	arm_func_start FUN_02003e00
FUN_02003e00: ; 0x02003E00
	mrs r0, apsr
	and r0, r0, #0x80
	bx lr
	arm_func_end FUN_02003e00

	arm_func_start FUN_02003e0c
FUN_02003e0c: ; 0x02003E0C
	mrs r0, apsr
	and r0, r0, #0x1f
	bx lr
	arm_func_end FUN_02003e0c
_02003E18:
	subs r0, r0, #4
	bhs _02003E18
	bx lr

	arm_func_start FUN_02003e24
FUN_02003e24: ; 0x02003E24
	push {r3, lr}
	lsl r0, r0, #1
	cmp r0, #0x10
	popls {r3, pc}
	sub r0, r0, #0x10
	bl _02003E18
	pop {r3, pc}
	arm_func_end FUN_02003e24

	arm_func_start FUN_02003e40
FUN_02003e40: ; 0x02003E40
	push {r4, lr}
	mov r4, #1
	mov r0, r4
	blx FUN_020004BE
	mov r0, r4
	mov r1, r4
	bl FUN_02000c98
	pop {r4, pc}
	arm_func_end FUN_02003e40

	arm_func_start FUN_02003e60
FUN_02003e60: ; 0x02003E60
	push {r3, lr}
	bl FUN_02003e70
	ldrh r0, [r0]
	pop {r3, pc}
	arm_func_end FUN_02003e60

	arm_func_start FUN_02003e70
FUN_02003e70: ; 0x02003E70
	ldr r0, _02003E78 ; =0x02FFFC40
	bx lr
	.align 2, 0_02003E78: .word 0x02FFFC40
	arm_func_end FUN_02003e70

	arm_func_start FUN_02003e7c
FUN_02003e7c: ; 0x02003E7C
	push {r3, r4, r5, lr}
	ldr r0, _02003EC8 ; =_02093CFC
	ldrh r1, [r0]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	strh r1, [r0]
	bl FUN_0201598c
	mov r5, #0xc
	mov r4, #1
	arm_func_end FUN_02003e7c
_02003EA4:
	mov r0, r5
	mov r1, r4
	bl FUN_02015ae0
	cmp r0, #0
	beq _02003EA4
	ldr r1, _02003ECC ; =FUN_020010cc
	mov r0, r5
	bl FUN_02015a94
	pop {r3, r4, r5, pc}
	.align 2, 0_02003EC8: .word _02093CFC
_02003ECC: .word FUN_020010cc

	arm_func_start FUN_02003ed0
FUN_02003ed0: ; 0x02003ED0
	push {r3, r4, r5, lr}
	ldr r1, _02003F30 ; =0x02FFFC40
	mov r5, r0
	ldrh r0, [r1]
	cmp r0, #2
	bne _02003EEC
	bl FUN_02004160
	arm_func_end FUN_02003ed0
_02003EEC:
	bl FUN_02001440
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_0200ff8c
	mov r0, #0x40000
	bl FUN_02000fd0
	mvn r0, #0
	bl FUN_0200105c
	bl FUN_02007414
	ldr r4, _02003F34 ; =0x02FFFC20
	mov r0, #0x10
	str r5, [r4]
	bl FUN_020010fc
	bl FUN_02003170
	str r0, [r4, #0x37c]
	bl FUN_01FF81B8
	pop {r3, r4, r5, pc}
	.align 2, 0_02003F30: .word 0x02FFFC40
_02003F34: .word 0x02FFFC20

	arm_func_start FUN_02003f38
FUN_02003f38: ; 0x02003F38
	mov r1, r0
	ldr r0, _02003F4C ; =0x02FFFCF4
	ldr ip, _02003F50 ; =_memcpy
	mov r2, #6
	bx ip
	.align 2, 0_02003F4C: .word 0x02FFFCF4
_02003F50: .word _memcpy
	arm_func_end FUN_02003f38

	arm_func_start FUN_02003f54
FUN_02003f54: ; 0x02003F54
	push {r3, r4, r5, lr}
	ldr r4, _02003FD0 ; =0x02FFFC80
	mov r5, r0
	ldrh r2, [r4, #0x64]
	add r0, r4, #6
	add r1, r5, #4
	lsl r2, r2, #0x1d
	lsr r2, r2, #0x1d
	strb r2, [r5]
	ldrb r3, [r4, #2]
	mov r2, #0x14
	lsl r3, r3, #0x1c
	lsr r3, r3, #0x1c
	strb r3, [r5, #1]
	ldrb r3, [r4, #3]
	strb r3, [r5, #2]
	ldrb r3, [r4, #4]
	strb r3, [r5, #3]
	ldrb r3, [r4, #0x1a]
	strh r3, [r5, #0x1a]
	ldrb r3, [r4, #0x50]
	strh r3, [r5, #0x52]
	bl FUN_0200781c
	add r0, r4, #0x1c
	add r1, r5, #0x1c
	mov r2, #0x34
	bl FUN_0200781c
	mov r0, #0
	strh r0, [r5, #0x18]
	strh r0, [r5, #0x50]
	pop {r3, r4, r5, pc}
	.align 2, 0_02003FD0: .word 0x02FFFC80
	arm_func_end FUN_02003f54

	arm_func_start FUN_02003fd4
FUN_02003fd4: ; 0x02003FD4
	clz r0, r0
	bx lr
	arm_func_end FUN_02003fd4

	arm_func_start FUN_02003fdc
FUN_02003fdc: ; 0x02003FDC
	ldr r0, _02004008 ; =LAB_02093d00
	mov r3, #0
	str r3, [r0]
	ldr r0, _0200400C ; =LAB_02093d04
	mov r2, r3
	arm_func_end FUN_02003fdc
_02003FF0:
	lsl r1, r3, #1
	add r3, r3, #1
	strh r2, [r0, r1]
	cmp r3, #9
	blt _02003FF0
	bx lr
	.align 2, 0_02004008: .word LAB_02093d00
_0200400C: .word LAB_02093d04

	arm_func_start FUN_02004010
FUN_02004010: ; 0x02004010
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r5, r0
	mov sl, r1
	bl FUN_02003da8
	ldr r4, _02004088 ; =LAB_02093d00
	ldr r1, _0200408C ; =0x000001FF
	ldr r2, [r4]
	mov sb, r0
	and r0, r5, r2
	ldr r6, _02004090 ; =LAB_02093d04
	and r8, r0, r1
	mov r7, #1
	mov r5, #0
	arm_func_end FUN_02004010
_02004044:
	mov r0, r8
	bl FUN_02003fd4
	rsbs r2, r0, #0x1f
	bmi _0200407C
	lsl r1, r2, #1
	ldrh r0, [r6, r1]
	mvn r2, r7, lsl r2
	cmp sl, r0
	ldreq r0, [r4]
	and r8, r8, r2
	andeq r0, r0, r2
	strheq r5, [r6, r1]
	streq r0, [r4]
	b _02004044
_0200407C:
	mov r0, sb
	bl FUN_02003dbc
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02004088: .word LAB_02093d00
_0200408C: .word 0x000001FF
_02004090: .word LAB_02093d04

	arm_func_start FUN_02004094
FUN_02004094: ; 0x02004094
	push {r4, r5, r6, lr}
	ldr r1, _02004150 ; =0x04000006
	mov r5, r0
	ldrh r6, [r1]
	ldr r4, _02004154 ; =0x02FFFC00
	bl FUN_020034b0
	orr r0, r0, r6, lsl #16
	str r0, [r5]
	ldr r0, _02004158 ; =LAB_02093cd4
	ldrh r1, [r4, #0xf8]
	ldr r2, [r0]
	ldr r3, [r0, #4]
	eor r1, r2, r1, lsl #16
	str r1, [r5, #4]
	ldr r2, [r0]
	ldr r2, _0200415C ; =0x04000600
	ldr r1, [r0, #4]
	ldr r0, [r4, #0xf4]
	ldr r3, [r4, #0x3c]
	eor r0, r1, r0
	eor r3, r3, r0
	str r3, [r5, #8]
	ldr r1, [r2]
	add r0, r4, #0x300
	eor r1, r3, r1
	str r1, [r5, #8]
	ldr r1, [r4, #0x1e8]
	sub r2, r2, #0x4d0
	str r1, [r5, #0xc]
	ldr r3, [r4, #0x1ec]
	add r1, r4, #0x3a8
	str r3, [r5, #0x10]
	ldrh ip, [r0, #0x94]
	ldr r3, [r4, #0x390]
	eor r3, r3, ip, lsl #16
	str r3, [r5, #0x14]
	ldrh r4, [r0, #0xaa]
	ldrh r3, [r0, #0xac]
	orr r3, r3, r4, lsl #16
	str r3, [r5, #0x18]
	ldrh r2, [r2]
	ldrh r1, [r1]
	ldrh r3, [r0, #0x98]
	orr r0, r2, r1
	orr r0, r0, r3, lsl #16
	arm_func_end FUN_02004094

	arm_func_start FUN_02004148
FUN_02004148: ; 0x02004148
	str r0, [r5, #0x1c]
	pop {r4, r5, r6, pc}
	.align 2, 0_02004150: .word 0x04000006
_02004154: .word 0x02FFFC00
_02004158: .word LAB_02093cd4
_0200415C: .word 0x04000600
	arm_func_end FUN_02004148

	arm_func_start FUN_02004160
FUN_02004160: ; 0x02004160
	push {r3, lr}
	ldr r0, _0200418C ; =LAB_02093d18
	ldr r2, [r0]
	cmp r2, #0
	beq _02004184
	mov r1, #0
	str r1, [r0]
	ldr r0, [r0, #4]
	blx r2
	arm_func_end FUN_02004160
_02004184:
	bl FUN_02004190
	pop {r3, pc}
	.align 2, 0_0200418C: .word LAB_02093d18

	arm_func_start FUN_02004190
FUN_02004190: ; 0x02004190
	push {r3, lr}
	bl FUN_02003da8
	arm_func_end FUN_02004190
_02004198:
	bl FUN_020041a0
	b _02004198

	arm_func_start FUN_020041a0
FUN_020041a0: ; 0x020041A0
	mov r0, #0
	mcr p15, #0, r0, c7, c0, #4
	bx lr
	arm_func_end FUN_020041a0

	arm_func_start FUN_020041ac
FUN_020041ac: ; 0x020041AC
	mov r1, #0
	str r1, [r0, #8]
	str r1, [r0, #4]
	str r1, [r0]
	bx lr
	arm_func_end FUN_020041ac

	arm_func_start FUN_020041c0
FUN_020041c0: ; 0x020041C0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r2
	mov r8, r0
	mov r7, r1
	mov r6, r3
	mov r4, #0
	bl FUN_02003da8
	mov r5, r0
	cmp sb, #0
	beq _020041F4
	cmp sb, #1
	beq _02004220
	b _02004244
	arm_func_end FUN_020041c0
_020041F4:
	ldr r0, [r8]
	and r0, r0, r7
	cmp r7, r0
	beq _0200421C
_02004204:
	add r0, r8, #4
	bl FUN_02001c28
	ldr r0, [r8]
	and r0, r0, r7
	cmp r7, r0
	bne _02004204
_0200421C:
	b _02004240
_02004220:
	ldr r0, [r8]
	tst r0, r7
	bne _02004240
_0200422C:
	add r0, r8, #4
	bl FUN_02001c28
	ldr r0, [r8]
	tst r0, r7
	beq _0200422C
_02004240:
	ldr r4, [r8]
_02004244:
	cmp r4, #0
	ldrne r1, [r8]
	mvnne r0, r6
	andne r0, r1, r0
	strne r0, [r8]
	mov r0, r5
	bl FUN_02003dbc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02004268
FUN_02004268: ; 0x02004268
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r6, r0
	bl FUN_02003da8
	mov r4, r0
	cmp r5, #0
	beq _02004298
	ldr r1, [r6]
	add r0, r6, #4
	orr r1, r1, r5
	str r1, [r6]
	bl FUN_02001c78
	arm_func_end FUN_02004268
_02004298:
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020042a4
FUN_020042a4: ; 0x020042A4
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _020043D0 ; =0x04000304
	ldr r4, _020043D4 ; =0xFFFFFDF1
	ldrh r0, [r1]
	orr r0, r0, #0x8000
	strh r0, [r1]
	ldrh r0, [r1]
	and r0, r0, r4
	orr r0, r0, #0xe
	orr r0, r0, #0x200
	strh r0, [r1]
	ldrh r0, [r1]
	orr r0, r0, #1
	strh r0, [r1]
	bl FUN_02006f0c
	ldr r5, _020043D8 ; =LAB_02093d20
	ldrh r0, [r5, #2]
	cmp r0, #0
	bne _02004318
	add r4, r4, #0x20c
	arm_func_end FUN_020042a4
_020042F4:
	bl FUN_02001440
	mov r6, r0
	cmp r6, r4
	bne _02004308
	bl FUN_02004160
_02004308:
	strh r6, [r5, #2]
	ldrh r0, [r5, #2]
	cmp r0, #0
	beq _020042F4
_02004318:
	ldr r0, _020043DC ; =0x04000004
	mov r7, #0
	mov r6, #0x4000000
	strh r7, [r0]
	ldr r4, _020043E0 ; =0x0208EC78
	str r7, [r6]
	ldr r0, [r4, #4]
	sub r1, r6, #0x4000001
	cmp r0, r1
	beq _02004378
	mov r5, #1
	mov r2, r7
	str r5, [sp]
	add r1, r6, #8
	mov r3, #0x60
	bl FUN_02006f7c
	strh r7, [r6, #0x6c]
	str r5, [sp]
	ldr r0, [r4, #4]
	mov r2, r7
	add r1, r6, #0x1000
	mov r3, #0x70
	bl FUN_02006f7c
	b _0200439C
_02004378:
	mov r0, r7
	add r1, r6, #8
	mov r2, #0x60
	bl FUN_02007838
	mov r0, r7
	add r1, r6, #0x1000
	mov r2, #0x70
	strh r7, [r6, #0x6c]
	bl FUN_02007838
_0200439C:
	ldr r0, _020043E4 ; =0x04000020
	mov r2, #0x100
	strh r2, [r0]
	strh r2, [r0, #6]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x16]
	add r1, r0, #0x1000
	ldr r0, _020043E8 ; =0x04001026
	strh r2, [r1]
	strh r2, [r0]
	strh r2, [r0, #0xa]
	strh r2, [r0, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020043D0: .word 0x04000304
_020043D4: .word 0xFFFFFDF1
_020043D8: .word LAB_02093d20
_020043DC: .word 0x04000004
_020043E0: .word 0x0208EC78
_020043E4: .word 0x04000020
_020043E8: .word 0x04001026

	arm_func_start FUN_020043ec
FUN_020043ec: ; 0x020043EC
	ldr r3, _02004410 ; =0x04000004
	lsl r1, r0, #0x18
	ldrh r2, [r3]
	and ip, r0, #0x100
	and r0, r2, #0x3f
	orr r0, r0, r1, lsr #16
	orr r0, r0, ip, asr #1
	strh r0, [r3]
	bx lr
	.align 2, 0_02004410: .word 0x04000004
	arm_func_end FUN_020043ec

	arm_func_start FUN_02004414
FUN_02004414: ; 0x02004414
	ldr r3, _02004444 ; =0x04000004
	cmp r0, #0
	ldrh r0, [r3]
	ldrhne r1, [r3]
	and r0, r0, #8
	orrne r1, r1, #8
	strhne r1, [r3]
	ldrheq r2, [r3]
	ldreq r1, _02004448 ; =0x0000FFF7
	andeq r1, r2, r1
	strheq r1, [r3]
	bx lr
	.align 2, 0_02004444: .word 0x04000004
_02004448: .word 0x0000FFF7
	arm_func_end FUN_02004414

	arm_func_start FUN_0200444c
FUN_0200444c: ; 0x0200444C
	ldr r0, _02004458 ; =0x0208EC78
	ldrh r0, [r0]
	bx lr
	.align 2, 0_02004458: .word 0x0208EC78
	arm_func_end FUN_0200444c

	arm_func_start FUN_0200445c
FUN_0200445c: ; 0x0200445C
	push {r3, lr}
	mov lr, #0x4000000
	ldr ip, [lr]
	ldr r1, _02004494 ; =0x0208EC78
	and r2, ip, #0x30000
	mov r3, #0
	ldr r0, _02004498 ; =LAB_02093d20
	lsr r2, r2, #0x10
	strh r3, [r1]
	strh r2, [r0]
	bic r0, ip, #0x30000
	str r0, [lr]
	bl FUN_02017680
	pop {r3, pc}
	.align 2, 0_02004494: .word 0x0208EC78
_02004498: .word LAB_02093d20
	arm_func_end FUN_0200445c

	arm_func_start FUN_0200449c
FUN_0200449c: ; 0x0200449C
	ldr r0, _020044D8 ; =LAB_02093d20
	ldr r1, _020044DC ; =0x0208EC78
	ldrh r2, [r0]
	mov r0, #1
	strh r0, [r1]
	mov r1, #0x4000000
	cmp r2, #0
	ldrne r0, [r1]
	bicne r0, r0, #0x30000
	orrne r0, r0, r2, lsl #16
	strne r0, [r1]
	ldreq r0, [r1]
	orreq r0, r0, #0x10000
	streq r0, [r1]
	bx lr
	.align 2, 0_020044D8: .word LAB_02093d20
_020044DC: .word 0x0208EC78
	arm_func_end FUN_0200449c

	arm_func_start FUN_020044e0
FUN_020044e0: ; 0x020044E0
	push {r3, lr}
	ldr r3, _0200453C ; =0x0208EC78
	mov lr, #0x4000000
	ldrh ip, [r3]
	ldr lr, [lr]
	ldr r3, _02004540 ; =LAB_02093d20
	cmp ip, #0
	strh r0, [r3]
	ldr r3, _02004544 ; =0xFFF0FFF0
	moveq r0, #0
	and r3, lr, r3
	orr r0, r3, r0, lsl #16
	orr r0, r1, r0
	orr r1, r0, r2, lsl #3
	mov ip, #0x4000000
	ldr r0, _02004540 ; =LAB_02093d20
	str r1, [ip]
	ldrh r0, [r0]
	cmp r0, #0
	ldreq r0, _0200453C ; =0x0208EC78
	moveq r1, #0
	strheq r1, [r0]
	pop {r3, pc}
	.align 2, 0_0200453C: .word 0x0208EC78
_02004540: .word LAB_02093d20
_02004544: .word 0xFFF0FFF0
	arm_func_end FUN_020044e0

	arm_func_start FUN_02004548
FUN_02004548: ; 0x02004548
	ldr r2, _02004560 ; =0x04001000
	ldr r1, [r2]
	bic r1, r1, #7
	orr r0, r1, r0
	str r0, [r2]
	bx lr
	.align 2, 0_02004560: .word 0x04001000
	arm_func_end FUN_02004548

	arm_func_start FUN_02004564
FUN_02004564: ; 0x02004564
	cmp r1, #0
	moveq r1, #0
	strheq r1, [r0]
	bxeq lr
	orrgt r1, r1, #0x4000
	strhgt r1, [r0]
	rsble r1, r1, #0
	orrle r1, r1, #0x8000
	strhle r1, [r0]
	bx lr
	arm_func_end FUN_02004564

	arm_func_start FUN_0200458c
FUN_0200458c: ; 0x0200458C
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, [sp, #0x1c]
	ldr r5, [r1, #4]
	sub r8, r4, r3
	ldr lr, [r1, #0xc]
	mul r7, r5, r8
	ldr r4, [sp, #0x18]
	ldr r6, [r1]
	sub ip, r4, r2
	ldr r4, [r1, #8]
	mul r8, lr, r8
	lsl r5, r5, #0xc
	mla r1, r6, ip, r7
	asr r7, r5, #0x10
	lsl lr, lr, #0xc
	mla ip, r4, ip, r8
	lsl r5, r6, #0xc
	lsl r6, r7, #0x10
	asr r7, lr, #0x10
	asr r5, r5, #0x10
	lsr lr, r6, #0x10
	lsl r4, r4, #0xc
	lsl r6, r7, #0x10
	asr r7, r4, #0x10
	lsr r4, r6, #0x10
	add r2, r1, r2, lsl #12
	add r3, ip, r3, lsl #12
	lsl r1, r5, #0x10
	lsl r5, lr, #0x10
	orr r5, r5, r1, lsr #16
	lsl r1, r7, #0x10
	lsl r4, r4, #0x10
	str r5, [r0]
	orr r1, r4, r1, lsr #16
	str r1, [r0, #4]
	asr r1, r2, #4
	str r1, [r0, #8]
	asr r1, r3, #4
	str r1, [r0, #0xc]
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0200458c

	arm_func_start FUN_0200462c
FUN_0200462c: ; 0x0200462C
	cmp r2, #0
	orrlt r1, r1, #0xc0
	strhlt r1, [r0]
	rsblt r1, r2, #0
	strhlt r1, [r0, #4]
	orrge r1, r1, #0x80
	strhge r1, [r0]
	strhge r2, [r0, #4]
	bx lr
	arm_func_end FUN_0200462c

	arm_func_start FUN_02004650
FUN_02004650: ; 0x02004650
	ldrh r3, [r0]
	cmp r1, #0
	and r2, r3, #0xc0
	bge _0200467C
	cmp r2, #0x80
	biceq r2, r3, #0xc0
	orreq r2, r2, #0xc0
	strheq r2, [r0]
	rsb r1, r1, #0
	strh r1, [r0, #4]
	bx lr
	arm_func_end FUN_02004650
_0200467C:
	cmp r2, #0xc0
	biceq r2, r3, #0xc0
	orreq r2, r2, #0x80
	strheq r2, [r0]
	strh r1, [r0, #4]
	bx lr

	arm_func_start FUN_02004694
FUN_02004694: ; 0x02004694
	ldr r1, _020046A8 ; =0x04000400
	mov r2, #0x17
	ldr ip, _020046AC ; =LAB_02006ee8
	str r2, [r1]
	bx ip
	.align 2, 0_020046A8: .word 0x04000400
_020046AC: .word LAB_02006ee8
	arm_func_end FUN_02004694

	arm_func_start FUN_020046b0
FUN_020046b0: ; 0x020046B0
	ldr r1, _020046C4 ; =0x04000400
	mov r2, #0x19
	ldr ip, _020046C8 ; =LAB_02006ee8
	str r2, [r1]
	bx ip
	.align 2, 0_020046C4: .word 0x04000400
_020046C8: .word LAB_02006ee8
	arm_func_end FUN_020046b0

	arm_func_start FUN_020046cc
FUN_020046cc: ; 0x020046CC
	ldr r1, _020046E0 ; =0x04000400
	mov r2, #0x1a
	ldr ip, _020046E4 ; =FUN_0200791c
	str r2, [r1]
	bx ip
	.align 2, 0_020046E0: .word 0x04000400
_020046E4: .word FUN_0200791c
	arm_func_end FUN_020046cc

	arm_func_start FUN_020046e8
FUN_020046e8: ; 0x020046E8
	push {r4, r5, r6, lr}
	bl FUN_02004858
	ldr r0, _020047D0 ; =0x04000504
	mov r1, #0
	str r1, [r0]
	arm_func_end FUN_020046e8
_020046FC:
	ldr r1, [r0, #0xfc]
	tst r1, #0x8000000
	bne _020046FC
	ldr r4, _020047D4 ; =0x04000060
	mov r5, #0
	strh r5, [r4]
	str r5, [r0, #0xfc]
	str r5, [r4, #-0x50]
	ldrh r2, [r4]
	ldr r6, _020047D8 ; =0xFFFFCFFD
	ldr r1, _020047DC ; =0x0000CFFB
	orr r2, r2, #0x2000
	strh r2, [r4]
	ldrh r2, [r4]
	orr r2, r2, #0x1000
	strh r2, [r4]
	ldrh r2, [r4]
	and r2, r2, r6
	strh r2, [r4]
	ldrh r2, [r4]
	bic r2, r2, #0x3000
	orr r2, r2, #0x10
	strh r2, [r4]
	ldrh r2, [r4]
	and r1, r2, r1
	strh r1, [r4]
	ldr r1, [r0, #0xfc]
	orr r1, r1, #0x8000
	str r1, [r0, #0xfc]
	ldr r1, [r0, #0xfc]
	bic r1, r1, #0xc0000000
	orr r1, r1, #0x80000000
	str r1, [r0, #0xfc]
	bl FUN_0200487c
	str r5, [r4, #0x2f0]
	lsr r2, r6, #0x11
	add r1, r4, #0x2f4
	ldr r0, _020047E0 ; =0x04000356
	strh r2, [r1]
	strh r5, [r0]
	str r5, [r0, #2]
	strh r5, [r0, #6]
	sub r1, r4, #0x58
	ldrh r0, [r1]
	bic r0, r0, #3
	strh r0, [r1]
	bl FUN_02004ac4
	ldr r1, _020047E4 ; =0x001F0080
	ldr r0, _020047E8 ; =0x040004A4
	str r1, [r0]
	str r5, [r0, #4]
	str r5, [r0, #8]
	pop {r4, r5, r6, pc}
	.align 2, 0_020047D0: .word 0x04000504
_020047D4: .word 0x04000060
_020047D8: .word 0xFFFFCFFD
_020047DC: .word 0x0000CFFB
_020047E0: .word 0x04000356
_020047E4: .word 0x001F0080
_020047E8: .word 0x040004A4

	arm_func_start FUN_020047ec
FUN_020047ec: ; 0x020047EC
	push {r3, lr}
	ldr r2, _02004848 ; =0x04000600
	arm_func_end FUN_020047ec
_020047F4:
	ldr r0, [r2]
	tst r0, #0x8000000
	bne _020047F4
	ldr r0, [r2]
	ldr r1, _0200484C ; =0x04000060
	orr r0, r0, #0x8000
	str r0, [r2]
	ldrh r0, [r1]
	orr r0, r0, #0x2000
	strh r0, [r1]
	ldrh r0, [r1]
	orr r0, r0, #0x1000
	strh r0, [r1]
	bl FUN_02004914
	ldr r2, _02004850 ; =0x001F0080
	ldr r1, _02004854 ; =0x040004A4
	mov r0, #0
	str r2, [r1]
	str r0, [r1, #4]
	str r0, [r1, #8]
	pop {r3, pc}
	.align 2, 0_02004848: .word 0x04000600
_0200484C: .word 0x04000060
_02004850: .word 0x001F0080
_02004854: .word 0x040004A4

	arm_func_start FUN_02004858
FUN_02004858: ; 0x02004858
	push {r4, lr}
	ldr r4, _02004878 ; =0x04000400
	mov r0, r4
	bl FUN_02004bf8
	arm_func_end FUN_02004858
_02004868:
	ldr r0, [r4, #0x200]
	tst r0, #0x8000000
	bne _02004868
	pop {r4, pc}
	.align 2, 0_02004878: .word 0x04000400

	arm_func_start FUN_0200487c
FUN_0200487c: ; 0x0200487C
	push {r4, lr}
	sub sp, sp, #8
	ldr r1, _02004908 ; =0x04000600
	ldr r0, [r1]
	orr r0, r0, #0x8000
	str r0, [r1]
	add r4, sp, #4
	arm_func_end FUN_0200487c
_02004898:
	mov r0, r4
	bl FUN_02004b78
	cmp r0, #0
	bne _02004898
	add r4, sp, #0
_020048AC:
	mov r0, r4
	bl FUN_02004ba4
	cmp r0, #0
	bne _020048AC
	ldr r1, _0200490C ; =0x04000440
	mov r0, #3
	str r0, [r1]
	mov r0, #0
	str r0, [r1, #0x14]
	str r0, [r1]
	ldr r0, [sp]
	mov r2, #0
	cmp r0, #0
	strne r0, [r1, #8]
	ldr r1, _02004910 ; =0x04000454
	mov r0, #2
	str r2, [r1]
	str r0, [r1, #-0x14]
	ldr r0, [sp, #4]
	str r0, [r1, #-0xc]
	str r2, [r1]
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0_02004908: .word 0x04000600
_0200490C: .word 0x04000440
_02004910: .word 0x04000454

	arm_func_start FUN_02004914
FUN_02004914: ; 0x02004914
	push {r4, lr}
	sub sp, sp, #8
	ldr r1, _0200499C ; =0x04000600
	ldr r0, [r1]
	orr r0, r0, #0x8000
	str r0, [r1]
	add r4, sp, #4
	arm_func_end FUN_02004914
_02004930:
	mov r0, r4
	bl FUN_02004b78
	cmp r0, #0
	bne _02004930
	add r4, sp, #0
_02004944:
	mov r0, r4
	bl FUN_02004ba4
	cmp r0, #0
	bne _02004944
	ldr r1, _020049A0 ; =0x04000440
	mov r0, #3
	str r0, [r1]
	mov r0, #0
	str r0, [r1, #0x14]
	str r0, [r1]
	ldr r0, [sp]
	ldr r2, _020049A0 ; =0x04000440
	cmp r0, #0
	strne r0, [r1, #8]
	mov r0, #2
	str r0, [r2]
	ldr r1, [sp, #4]
	mov r0, #0
	str r1, [r2, #8]
	str r0, [r2, #0x14]
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0_0200499C: .word 0x04000600
_020049A0: .word 0x04000440

	arm_func_start LAB_020049a4
LAB_020049a4: ; 0x020049A4
	cmp r0, #0
	ldreq r2, _020049EC ; =0x04000060
	ldreq r0, _020049F0 ; =0x0000CF7F
	ldrheq r1, [r2]
	andeq r0, r1, r0
	strheq r0, [r2]
	bxeq lr
	ldr ip, _020049F4 ; =0x0400035C
	lsl r0, r1, #6
	strh r3, [ip]
	sub r3, ip, #0x2fc
	ldrh r1, [r3]
	orr r0, r0, r2, lsl #8
	orr r0, r0, #0x80
	bic r1, r1, #0x3f40
	orr r0, r1, r0
	strh r0, [r3]
	bx lr
	.align 2, 0_020049EC: .word 0x04000060
_020049F0: .word 0x0000CF7F
_020049F4: .word 0x0400035C
	arm_func_end LAB_020049a4

	arm_func_start FUN_020049f8
FUN_020049f8: ; 0x020049F8
	push {r3, lr}
	ldr r2, _02004A24 ; =0x04000600
	mov r1, r0
	ldr r0, [r2]
	tst r0, #0x8000000
	mvnne r0, #0
	popne {r3, pc}
	add r0, r2, #0x40
	bl FUN_0200795c
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_02004A24: .word 0x04000600
	arm_func_end FUN_020049f8

	arm_func_start FUN_02004a28
FUN_02004a28: ; 0x02004A28
	push {r3, lr}
	ldr r2, _02004A54 ; =0x04000600
	mov r1, r0
	ldr r0, [r2]
	tst r0, #0x8000000
	mvnne r0, #0
	popne {r3, pc}
	add r0, r2, #0x80
	bl FUN_0200791c
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_02004A54: .word 0x04000600
	arm_func_end FUN_02004a28

	arm_func_start LAB_02004a58
LAB_02004a58: ; 0x02004A58
	ldr r1, _02004A68 ; =0x04000330
	ldr ip, _02004A6C ; =FUN_0200781c
	mov r2, #0x10
	bx ip
	.align 2, 0_02004A68: .word 0x04000330
_02004A6C: .word FUN_0200781c
	arm_func_end LAB_02004a58

	arm_func_start FUN_02004a70
FUN_02004a70: ; 0x02004A70
	ldr r1, _02004A7C ; =0x04000360
	ldr ip, _02004A80 ; =LAB_02007900
	bx ip
	.align 2, 0_02004A7C: .word 0x04000360
_02004A80: .word LAB_02007900
	arm_func_end FUN_02004a70

	arm_func_start FUN_02004a84
FUN_02004a84: ; 0x02004A84
	ldr r1, _02004A94 ; =0x04000380
	ldr ip, _02004A98 ; =FUN_0200781c
	mov r2, #0x40
	bx ip
	.align 2, 0_02004A94: .word 0x04000380
_02004A98: .word FUN_0200781c
	arm_func_end FUN_02004a84

	arm_func_start FUN_02004a9c
FUN_02004a9c: ; 0x02004A9C
	ldr ip, [sp]
	orr r0, r0, r1, lsl #16
	orr r1, r0, r3, lsl #24
	cmp ip, #0
	ldr r0, _02004AC0 ; =0x04000350
	orrne r1, r1, #0x8000
	str r1, [r0]
	strh r2, [r0, #4]
	bx lr
	.align 2, 0_02004AC0: .word 0x04000350
	arm_func_end FUN_02004a9c

	arm_func_start FUN_02004ac4
FUN_02004ac4: ; 0x02004AC4
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xc
	ldr r4, _02004B6C ; =0x0208EC7C
	ldr r0, [r4]
	cmn r0, #1
	beq _02004B20
	mov r7, #0
	str r7, [sp]
	ldr r5, _02004B70 ; =0x04000330
	str r7, [sp, #4]
	mov r6, #1
	mov r1, r5
	mov r2, r7
	str r6, [sp, #8]
	mov r3, #0x10
	bl FUN_0200714c
	str r6, [sp]
	ldr r0, [r4]
	mov r2, r7
	add r1, r5, #0x30
	mov r3, #0x60
	bl FUN_02006f7c
	b _02004B48
	arm_func_end FUN_02004ac4
_02004B20:
	ldr r4, _02004B70 ; =0x04000330
	mov r5, #0
	mov r0, r5
	mov r1, r4
	mov r2, #0x10
	bl FUN_02007838
	mov r0, r5
	add r1, r4, #0x30
	mov r2, #0x60
	bl FUN_02007838
_02004B48:
	mov r2, #0
	ldr r0, _02004B74 ; =0x040004D0
	mov r1, r2
_02004B54:
	add r2, r2, #1
	str r1, [r0]
	cmp r2, #0x20
	blt _02004B54
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_02004B6C: .word 0x0208EC7C
_02004B70: .word 0x04000330
_02004B74: .word 0x040004D0

	arm_func_start FUN_02004b78
FUN_02004b78: ; 0x02004B78
	ldr r2, _02004BA0 ; =0x04000600
	ldr r1, [r2]
	tst r1, #0x4000
	ldreq r1, [r2]
	mvnne r0, #0
	andeq r1, r1, #0x1f00
	lsreq r1, r1, #8
	streq r1, [r0]
	moveq r0, #0
	bx lr
	.align 2, 0_02004BA0: .word 0x04000600
	arm_func_end FUN_02004b78

	arm_func_start FUN_02004ba4
FUN_02004ba4: ; 0x02004BA4
	ldr r2, _02004BCC ; =0x04000600
	ldr r1, [r2]
	tst r1, #0x4000
	ldreq r1, [r2]
	mvnne r0, #0
	andeq r1, r1, #0x2000
	lsreq r1, r1, #0xd
	streq r1, [r0]
	moveq r0, #0
	bx lr
	.align 2, 0_02004BCC: .word 0x04000600
	arm_func_end FUN_02004ba4

	arm_func_start FUN_02004bd0
FUN_02004bd0: ; 0x02004BD0
	ldr r2, _02004BF4 ; =0x04000600
	ldr r1, [r2]
	tst r1, #1
	ldreq r1, [r2]
	mvnne r0, #0
	andeq r1, r1, #2
	streq r1, [r0]
	moveq r0, #0
	bx lr
	.align 2, 0_02004BF4: .word 0x04000600
	arm_func_end FUN_02004bd0

	arm_func_start FUN_02004bf8
FUN_02004bf8: ; 0x02004BF8
	mov r1, #0
	mov r2, #0
	mov r3, #0
	mov ip, #0
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	stm r0, {r1, r2, r3, ip}
	bx lr
	arm_func_end FUN_02004bf8

	arm_func_start FUN_02004c8c
FUN_02004c8c: ; 0x02004C8C
	ldr r1, _02004CBC ; =0x04000008
	mov r0, #0x4000000
	ldrh r1, [r1]
	ldr r0, [r0]
	and r0, r0, #0x38000000
	lsr r0, r0, #0x1b
	and r1, r1, #0x1f00
	lsl r0, r0, #0x10
	asr r1, r1, #8
	add r0, r0, #0x6000000
	add r0, r0, r1, lsl #11
	bx lr
	.align 2, 0_02004CBC: .word 0x04000008
	arm_func_end FUN_02004c8c

	arm_func_start FUN_02004cc0
FUN_02004cc0: ; 0x02004CC0
	ldr r0, _02004CDC ; =0x04001008
	ldrh r0, [r0]
	and r0, r0, #0x1f00
	asr r0, r0, #8
	lsl r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
	.align 2, 0_02004CDC: .word 0x04001008
	arm_func_end FUN_02004cc0

	arm_func_start FUN_02004ce0
FUN_02004ce0: ; 0x02004CE0
	ldr r1, _02004D10 ; =0x0400000A
	mov r0, #0x4000000
	ldrh r1, [r1]
	ldr r0, [r0]
	and r0, r0, #0x38000000
	lsr r0, r0, #0x1b
	and r1, r1, #0x1f00
	lsl r0, r0, #0x10
	asr r1, r1, #8
	add r0, r0, #0x6000000
	add r0, r0, r1, lsl #11
	bx lr
	.align 2, 0_02004D10: .word 0x0400000A
	arm_func_end FUN_02004ce0

	arm_func_start FUN_02004d14
FUN_02004d14: ; 0x02004D14
	ldr r0, _02004D30 ; =0x0400100A
	ldrh r0, [r0]
	and r0, r0, #0x1f00
	asr r0, r0, #8
	lsl r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
	.align 2, 0_02004D30: .word 0x0400100A
	arm_func_end FUN_02004d14

	arm_func_start FUN_02004d34
FUN_02004d34: ; 0x02004D34
	mov r0, #0x4000000
	ldr r1, [r0]
	ldrh r3, [r0, #0xc]
	ldr r0, [r0]
	and ip, r1, #7
	and r0, r0, #0x38000000
	lsr r1, r0, #0x1b
	and r0, r3, #0x1f00
	lsl r2, r1, #0x10
	cmp ip, #6
	lsr r1, r0, #8
	arm_func_end FUN_02004d34

	arm_func_start switchD
switchD: ; 0x02004D60
	addls pc, pc, ip, lsl #2
	arm_func_end switchD

	arm_func_start caseD_7
caseD_7: ; 0x02004D64
	b _02004DB0
	arm_func_end caseD_7
_02004D68: ; jump table
	b _02004D84 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02004D6C
	b _02004D84
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02004D70
	b _02004D84
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02004D74
	b _02004D84
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02004D78
	b _02004D84
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02004D7C
	b _02004D90
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02004D80
	b _02004DA8
	arm_func_end caseD_6
_02004D84:
	add r0, r2, #0x6000000
	add r0, r0, r1, lsl #11
	bx lr
_02004D90:
	tst r3, #0x80
	lslne r0, r1, #0xe
	addne r0, r0, #0x6000000
	addeq r0, r2, #0x6000000
	addeq r0, r0, r1, lsl #11
	bx lr
_02004DA8:
	mov r0, #0x6000000
	bx lr
_02004DB0:
	mov r0, #0
	bx lr

	arm_func_start FUN_02004db8
FUN_02004db8: ; 0x02004DB8
	ldr r1, _02004E28 ; =0x04001000
	ldr r0, [r1]
	ldrh r1, [r1, #0xc]
	and r2, r0, #7
	cmp r2, #6
	and r0, r1, #0x1f00
	lsr r0, r0, #8
	arm_func_end FUN_02004db8

	arm_func_start switchD
switchD: ; 0x02004DD4
	addls pc, pc, r2, lsl #2
	arm_func_end switchD

	arm_func_start caseD_7
caseD_7: ; 0x02004DD8
	b _02004E20
	arm_func_end caseD_7
_02004DDC: ; jump table
	b _02004DF8 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02004DE0
	b _02004DF8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02004DE4
	b _02004DF8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02004DE8
	b _02004DF8
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02004DEC
	b _02004DF8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02004DF0
	b _02004E04
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02004DF4
	b _02004E18
	arm_func_end caseD_6
_02004DF8:
	lsl r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
_02004E04:
	tst r1, #0x80
	lslne r0, r0, #0xe
	lsleq r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
_02004E18:
	mov r0, #0
	bx lr
_02004E20:
	mov r0, #0
	bx lr
	.align 2, 0_02004E28: .word 0x04001000

	arm_func_start FUN_02004e2c
FUN_02004e2c: ; 0x02004E2C
	mov r0, #0x4000000
	ldr r1, [r0]
	ldrh r3, [r0, #0xe]
	ldr r0, [r0]
	and ip, r1, #7
	and r0, r0, #0x38000000
	lsr r1, r0, #0x1b
	and r0, r3, #0x1f00
	lsl r2, r1, #0x10
	cmp ip, #6
	lsr r1, r0, #8
	arm_func_end FUN_02004e2c

	arm_func_start switchD
switchD: ; 0x02004E58
	addls pc, pc, ip, lsl #2
	arm_func_end switchD

	arm_func_start caseD_7
caseD_7: ; 0x02004E5C
	b _02004EA8
	arm_func_end caseD_7
_02004E60: ; jump table
	b _02004E7C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02004E64
	b _02004E7C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02004E68
	b _02004E7C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02004E6C
	b _02004E88
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02004E70
	b _02004E88
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02004E74
	b _02004E88
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02004E78
	b _02004EA0
	arm_func_end caseD_6
_02004E7C:
	add r0, r2, #0x6000000
	add r0, r0, r1, lsl #11
	bx lr
_02004E88:
	tst r3, #0x80
	lslne r0, r1, #0xe
	addne r0, r0, #0x6000000
	addeq r0, r2, #0x6000000
	addeq r0, r0, r1, lsl #11
	bx lr
_02004EA0:
	mov r0, #0
	bx lr
_02004EA8:
	mov r0, #0
	bx lr

	arm_func_start FUN_02004eb0
FUN_02004eb0: ; 0x02004EB0
	ldr r1, _02004F20 ; =0x04001000
	ldr r0, [r1]
	ldrh r1, [r1, #0xe]
	and r2, r0, #7
	cmp r2, #6
	and r0, r1, #0x1f00
	lsr r0, r0, #8
	arm_func_end FUN_02004eb0

	arm_func_start switchD
switchD: ; 0x02004ECC
	addls pc, pc, r2, lsl #2
	arm_func_end switchD

	arm_func_start caseD_7
caseD_7: ; 0x02004ED0
	b _02004F18
	arm_func_end caseD_7
_02004ED4: ; jump table
	b _02004EF0 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02004ED8
	b _02004EF0
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02004EDC
	b _02004EF0
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02004EE0
	b _02004EFC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02004EE4
	b _02004EFC
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02004EE8
	b _02004EFC
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02004EEC
	b _02004F10
	arm_func_end caseD_6
_02004EF0:
	lsl r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
_02004EFC:
	tst r1, #0x80
	lslne r0, r0, #0xe
	lsleq r0, r0, #0xb
	add r0, r0, #0x6200000
	bx lr
_02004F10:
	mov r0, #0
	bx lr
_02004F18:
	mov r0, #0
	bx lr
	.align 2, 0_02004F20: .word 0x04001000

	arm_func_start FUN_02004f24
FUN_02004f24: ; 0x02004F24
	ldr r1, _02004F54 ; =0x04000008
	mov r0, #0x4000000
	ldrh r1, [r1]
	ldr r0, [r0]
	and r0, r0, #0x7000000
	lsr r0, r0, #0x18
	and r1, r1, #0x3c
	lsl r0, r0, #0x10
	asr r1, r1, #2
	add r0, r0, #0x6000000
	add r0, r0, r1, lsl #14
	bx lr
	.align 2, 0_02004F54: .word 0x04000008
	arm_func_end FUN_02004f24

	arm_func_start FUN_02004f58
FUN_02004f58: ; 0x02004F58
	ldr r0, _02004F74 ; =0x04001008
	ldrh r0, [r0]
	and r0, r0, #0x3c
	asr r0, r0, #2
	lsl r0, r0, #0xe
	add r0, r0, #0x6200000
	bx lr
	.align 2, 0_02004F74: .word 0x04001008
	arm_func_end FUN_02004f58

	arm_func_start FUN_02004f78
FUN_02004f78: ; 0x02004F78
	ldr r1, _02004FA8 ; =0x0400000A
	mov r0, #0x4000000
	ldrh r1, [r1]
	ldr r0, [r0]
	and r0, r0, #0x7000000
	lsr r0, r0, #0x18
	and r1, r1, #0x3c
	lsl r0, r0, #0x10
	asr r1, r1, #2
	add r0, r0, #0x6000000
	add r0, r0, r1, lsl #14
	bx lr
	.align 2, 0_02004FA8: .word 0x0400000A
	arm_func_end FUN_02004f78

	arm_func_start FUN_02004fac
FUN_02004fac: ; 0x02004FAC
	ldr r0, _02004FC8 ; =0x0400100A
	ldrh r0, [r0]
	and r0, r0, #0x3c
	asr r0, r0, #2
	lsl r0, r0, #0xe
	add r0, r0, #0x6200000
	bx lr
	.align 2, 0_02004FC8: .word 0x0400100A
	arm_func_end FUN_02004fac

	arm_func_start FUN_02004fcc
FUN_02004fcc: ; 0x02004FCC
	mov r1, #0x4000000
	ldr r0, [r1]
	ldrh r2, [r1, #0xc]
	and r0, r0, #7
	cmp r0, #5
	blt _02004FEC
	tst r2, #0x80
	bne _02005014
	arm_func_end FUN_02004fcc
_02004FEC:
	mov r0, #0x4000000
	ldr r1, [r0]
	and r0, r2, #0x3c
	and r1, r1, #0x7000000
	lsr r1, r1, #0x18
	lsl r1, r1, #0x10
	add r1, r1, #0x6000000
	lsr r0, r0, #2
	add r0, r1, r0, lsl #14
	bx lr
_02005014:
	mov r0, #0
	bx lr

	arm_func_start FUN_0200501c
FUN_0200501c: ; 0x0200501C
	ldr r1, _02005058 ; =0x04001000
	ldr r0, [r1]
	ldrh r1, [r1, #0xc]
	and r0, r0, #7
	cmp r0, #5
	blt _0200503C
	tst r1, #0x80
	bne _02005050
	arm_func_end FUN_0200501c
_0200503C:
	and r0, r1, #0x3c
	lsr r0, r0, #2
	lsl r0, r0, #0xe
	add r0, r0, #0x6200000
	bx lr
_02005050:
	mov r0, #0
	bx lr
	.align 2, 0_02005058: .word 0x04001000

	arm_func_start FUN_0200505c
FUN_0200505c: ; 0x0200505C
	mov r1, #0x4000000
	ldr r0, [r1]
	ldrh r2, [r1, #0xe]
	and r0, r0, #7
	cmp r0, #3
	blt _02005084
	cmp r0, #6
	bge _020050AC
	tst r2, #0x80
	bne _020050AC
	arm_func_end FUN_0200505c
_02005084:
	mov r0, #0x4000000
	ldr r1, [r0]
	and r0, r2, #0x3c
	and r1, r1, #0x7000000
	lsr r1, r1, #0x18
	lsl r1, r1, #0x10
	add r1, r1, #0x6000000
	lsr r0, r0, #2
	add r0, r1, r0, lsl #14
	bx lr
_020050AC:
	mov r0, #0
	bx lr

	arm_func_start FUN_020050b4
FUN_020050b4: ; 0x020050B4
	ldr r1, _020050F8 ; =0x04001000
	ldr r0, [r1]
	ldrh r1, [r1, #0xe]
	and r0, r0, #7
	cmp r0, #3
	blt _020050DC
	cmp r0, #6
	bge _020050F0
	tst r1, #0x80
	bne _020050F0
	arm_func_end FUN_020050b4
_020050DC:
	and r0, r1, #0x3c
	lsr r0, r0, #2
	lsl r0, r0, #0xe
	add r0, r0, #0x6200000
	bx lr
_020050F0:
	mov r0, #0
	bx lr
	.align 2, 0_020050F8: .word 0x04001000

	arm_func_start FUN_020050fc
FUN_020050fc: ; 0x020050FC
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r3, _0200515C ; =0x0208EC7C
	mov r4, r0
	ldr r0, [r3]
	mov lr, r1
	mov r3, r2
	cmn r0, #1
	beq _02005144
	cmp r3, #0x1c
	bls _02005144
	mov ip, #1
	mov r1, r4
	add r2, lr, #0x5000000
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_020050fc
_02005144:
	mov r0, r4
	mov r2, r3
	add r1, lr, #0x5000000
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_0200515C: .word 0x0208EC7C

	arm_func_start FUN_02005160
FUN_02005160: ; 0x02005160
	push {r3, lr}
	ldr r3, _020051B8 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r3]
	mov r3, r2
	cmn r0, #1
	beq _020051A0
	cmp r3, #0x1c
	bls _020051A0
	add r2, r1, #0x400
	mov ip, #1
	mov r1, lr
	add r2, r2, #0x5000000
	str ip, [sp]
	bl FUN_020070a4
	pop {r3, pc}
	arm_func_end FUN_02005160
_020051A0:
	add r1, r1, #0x400
	mov r0, lr
	mov r2, r3
	add r1, r1, #0x5000000
	bl FUN_0200781c
	pop {r3, pc}
	.align 2, 0_020051B8: .word 0x0208EC7C

	arm_func_start FUN_020051bc
FUN_020051bc: ; 0x020051BC
	push {r3, lr}
	ldr r3, _02005214 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r3]
	mov r3, r2
	cmn r0, #1
	beq _020051FC
	cmp r3, #0x1c
	bls _020051FC
	add r2, r1, #0x200
	mov ip, #1
	mov r1, lr
	add r2, r2, #0x5000000
	str ip, [sp]
	bl FUN_020070a4
	pop {r3, pc}
	arm_func_end FUN_020051bc
_020051FC:
	add r1, r1, #0x200
	mov r0, lr
	mov r2, r3
	add r1, r1, #0x5000000
	bl FUN_0200781c
	pop {r3, pc}
	.align 2, 0_02005214: .word 0x0208EC7C

	arm_func_start FUN_02005218
FUN_02005218: ; 0x02005218
	push {r3, lr}
	ldr r3, _02005270 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r3]
	mov r3, r2
	cmn r0, #1
	beq _02005258
	cmp r3, #0x1c
	bls _02005258
	add r2, r1, #0x600
	mov ip, #1
	mov r1, lr
	add r2, r2, #0x5000000
	str ip, [sp]
	bl FUN_020070a4
	pop {r3, pc}
	arm_func_end FUN_02005218
_02005258:
	add r1, r1, #0x600
	mov r0, lr
	mov r2, r3
	add r1, r1, #0x5000000
	bl FUN_0200781c
	pop {r3, pc}
	.align 2, 0_02005270: .word 0x0208EC7C

	arm_func_start FUN_02005274
FUN_02005274: ; 0x02005274
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r3, _020052D4 ; =0x0208EC7C
	mov r4, r0
	ldr r0, [r3]
	mov lr, r1
	mov r3, r2
	cmn r0, #1
	beq _020052BC
	cmp r3, #0x30
	bls _020052BC
	mov ip, #1
	mov r1, r4
	add r2, lr, #0x7000000
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_02005274
_020052BC:
	mov r0, r4
	mov r2, r3
	add r1, lr, #0x7000000
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_020052D4: .word 0x0208EC7C

	arm_func_start FUN_020052d8
FUN_020052d8: ; 0x020052D8
	push {r3, lr}
	ldr r3, _02005330 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r3]
	mov r3, r2
	cmn r0, #1
	beq _02005318
	cmp r3, #0x30
	bls _02005318
	add r2, r1, #0x400
	mov ip, #1
	mov r1, lr
	add r2, r2, #0x7000000
	str ip, [sp]
	bl FUN_02007000
	pop {r3, pc}
	arm_func_end FUN_020052d8
_02005318:
	add r1, r1, #0x400
	mov r0, lr
	mov r2, r3
	add r1, r1, #0x7000000
	bl FUN_0200784c
	pop {r3, pc}
	.align 2, 0_02005330: .word 0x0208EC7C

	arm_func_start FUN_02005334
FUN_02005334: ; 0x02005334
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r3, _02005394 ; =0x0208EC7C
	mov r4, r0
	ldr r0, [r3]
	mov lr, r1
	mov r3, r2
	cmn r0, #1
	beq _0200537C
	cmp r3, #0x30
	bls _0200537C
	mov ip, #1
	mov r1, r4
	add r2, lr, #0x6400000
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_02005334
_0200537C:
	mov r0, r4
	mov r2, r3
	add r1, lr, #0x6400000
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_02005394: .word 0x0208EC7C

	arm_func_start FUN_02005398
FUN_02005398: ; 0x02005398
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r3, _020053F8 ; =0x0208EC7C
	mov r4, r0
	ldr r0, [r3]
	mov lr, r1
	mov r3, r2
	cmn r0, #1
	beq _020053E0
	cmp r3, #0x30
	bls _020053E0
	mov ip, #1
	mov r1, r4
	add r2, lr, #0x6600000
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_02005398
_020053E0:
	mov r0, r4
	mov r2, r3
	add r1, lr, #0x6600000
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_020053F8: .word 0x0208EC7C

	arm_func_start FUN_020053fc
FUN_020053fc: ; 0x020053FC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004c8c
	ldr r1, _02005468 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005450
	cmp r4, #0x1c
	bls _02005450
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020053fc
_02005450:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005468: .word 0x0208EC7C

	arm_func_start FUN_0200546c
FUN_0200546c: ; 0x0200546C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004cc0
	ldr r1, _020054D8 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _020054C0
	cmp r4, #0x1c
	bls _020054C0
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200546c
_020054C0:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_020054D8: .word 0x0208EC7C

	arm_func_start FUN_020054dc
FUN_020054dc: ; 0x020054DC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004ce0
	ldr r1, _02005548 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005530
	cmp r4, #0x1c
	bls _02005530
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020054dc
_02005530:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005548: .word 0x0208EC7C

	arm_func_start FUN_0200554c
FUN_0200554c: ; 0x0200554C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004d14
	ldr r1, _020055B8 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _020055A0
	cmp r4, #0x1c
	bls _020055A0
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200554c
_020055A0:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_020055B8: .word 0x0208EC7C

	arm_func_start FUN_020055bc
FUN_020055bc: ; 0x020055BC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004d34
	ldr r1, _02005628 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005610
	cmp r4, #0x1c
	bls _02005610
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020055bc
_02005610:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005628: .word 0x0208EC7C

	arm_func_start FUN_0200562c
FUN_0200562c: ; 0x0200562C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004db8
	ldr r1, _02005698 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005680
	cmp r4, #0x1c
	bls _02005680
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200562c
_02005680:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005698: .word 0x0208EC7C

	arm_func_start FUN_0200569c
FUN_0200569c: ; 0x0200569C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004e2c
	ldr r1, _02005708 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _020056F0
	cmp r4, #0x1c
	bls _020056F0
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200569c
_020056F0:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005708: .word 0x0208EC7C

	arm_func_start FUN_0200570c
FUN_0200570c: ; 0x0200570C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004eb0
	ldr r1, _02005778 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005760
	cmp r4, #0x1c
	bls _02005760
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_020070a4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200570c
_02005760:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200781c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005778: .word 0x0208EC7C

	arm_func_start FUN_0200577c
FUN_0200577c: ; 0x0200577C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004f24
	ldr r1, _020057E8 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _020057D0
	cmp r4, #0x30
	bls _020057D0
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200577c
_020057D0:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_020057E8: .word 0x0208EC7C

	arm_func_start FUN_020057ec
FUN_020057ec: ; 0x020057EC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004f58
	ldr r1, _02005858 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005840
	cmp r4, #0x30
	bls _02005840
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020057ec
_02005840:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005858: .word 0x0208EC7C

	arm_func_start FUN_0200585c
FUN_0200585c: ; 0x0200585C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004f78
	ldr r1, _020058C8 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _020058B0
	cmp r4, #0x30
	bls _020058B0
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200585c
_020058B0:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_020058C8: .word 0x0208EC7C

	arm_func_start FUN_020058cc
FUN_020058cc: ; 0x020058CC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004fac
	ldr r1, _02005938 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005920
	cmp r4, #0x30
	bls _02005920
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020058cc
_02005920:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005938: .word 0x0208EC7C

	arm_func_start FUN_0200593c
FUN_0200593c: ; 0x0200593C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02004fcc
	ldr r1, _020059A8 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005990
	cmp r4, #0x30
	bls _02005990
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200593c
_02005990:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_020059A8: .word 0x0208EC7C

	arm_func_start FUN_020059ac
FUN_020059ac: ; 0x020059AC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_0200501c
	ldr r1, _02005A18 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005A00
	cmp r4, #0x30
	bls _02005A00
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020059ac
_02005A00:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005A18: .word 0x0208EC7C

	arm_func_start FUN_02005a1c
FUN_02005a1c: ; 0x02005A1C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_0200505c
	ldr r1, _02005A88 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005A70
	cmp r4, #0x30
	bls _02005A70
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_02005a1c
_02005A70:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005A88: .word 0x0208EC7C

	arm_func_start FUN_02005a8c
FUN_02005a8c: ; 0x02005A8C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020050b4
	ldr r1, _02005AF8 ; =0x0208EC7C
	mov lr, r0
	ldr r0, [r1]
	cmn r0, #1
	beq _02005AE0
	cmp r4, #0x30
	bls _02005AE0
	mov ip, #1
	mov r1, r6
	mov r3, r4
	add r2, lr, r5
	str ip, [sp]
	bl FUN_02007000
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_02005a8c
_02005AE0:
	mov r0, r6
	mov r2, r4
	add r1, lr, r5
	bl FUN_0200784c
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005AF8: .word 0x0208EC7C

	arm_func_start FUN_02005afc
FUN_02005afc: ; 0x02005AFC
	push {r3, lr}
	bl FUN_02006b94
	ldr r1, _02005B78 ; =LAB_02093d24
	cmp r0, #0x20
	str r0, [r1, #0x14]
	bgt _02005B3C
	cmp r0, #0x20
	bge _02005B60
	cmp r0, #0
	pople {r3, pc}
	cmp r0, #0x10
	ldreq r2, _02005B7C ; =0x06880000
	moveq r0, #0
	streq r2, [r1, #0x10]
	streq r0, [r1, #0xc]
	pop {r3, pc}
	arm_func_end FUN_02005afc
_02005B3C:
	cmp r0, #0x40
	bgt _02005B58
	ldreq r2, _02005B80 ; =0x06894000
	moveq r0, #0x4000
	streq r2, [r1, #0x10]
	streq r0, [r1, #0xc]
	pop {r3, pc}
_02005B58:
	cmp r0, #0x60
	popne {r3, pc}
_02005B60:
	ldr r2, _02005B84 ; =0x06890000
	ldr r0, _02005B78 ; =LAB_02093d24
	mov r1, #0
	str r2, [r0, #0x10]
	str r1, [r0, #0xc]
	pop {r3, pc}
	.align 2, 0_02005B78: .word LAB_02093d24
_02005B7C: .word 0x06880000
_02005B80: .word 0x06894000
_02005B84: .word 0x06890000

	arm_func_start FUN_02005b88
FUN_02005b88: ; 0x02005B88
	push {r3, r4, lr}
	sub sp, sp, #0xc
	ldr ip, _02005BF4 ; =LAB_02093d24
	ldr r3, _02005BF8 ; =0x0208EC7C
	ldr r4, [ip, #0x10]
	ldr lr, [r3]
	ldr ip, [ip, #0xc]
	add r4, r4, r1
	mov r1, r0
	mov r3, r2
	cmn lr, #1
	sub r4, r4, ip
	beq _02005BE4
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	mov ip, #1
	mov r0, lr
	mov r2, r4
	str ip, [sp, #8]
	bl FUN_02007254
	add sp, sp, #0xc
	pop {r3, r4, pc}
	arm_func_end FUN_02005b88
_02005BE4:
	mov r1, r4
	bl FUN_0200784c
	add sp, sp, #0xc
	pop {r3, r4, pc}
	.align 2, 0_02005BF4: .word LAB_02093d24
_02005BF8: .word 0x0208EC7C

	arm_func_start FUN_02005bfc
FUN_02005bfc: ; 0x02005BFC
	push {r4, lr}
	ldr r0, _02005C34 ; =0x0208EC7C
	ldr r0, [r0]
	cmn r0, #1
	beq _02005C14
	bl FUN_02007350
	arm_func_end FUN_02005bfc
_02005C14:
	ldr r4, _02005C38 ; =LAB_02093d24
	ldr r0, [r4, #0x14]
	bl FUN_0200638c
	mov r0, #0
	str r0, [r4, #0x14]
	str r0, [r4, #0x10]
	str r0, [r4, #0xc]
	pop {r4, pc}
	.align 2, 0_02005C34: .word 0x0208EC7C
_02005C38: .word LAB_02093d24

	arm_func_start FUN_02005c3c
FUN_02005c3c: ; 0x02005C3C
	push {r3, lr}
	bl FUN_02006c08
	ldr r1, _02005C50 ; =LAB_02093d24
	str r0, [r1]
	pop {r3, pc}
	.align 2, 0_02005C50: .word LAB_02093d24
	arm_func_end FUN_02005c3c

	arm_func_start FUN_02005c54
FUN_02005c54: ; 0x02005C54
	push {r3, r4, lr}
	sub sp, sp, #0xc
	ldr r3, _02005CB8 ; =0x0208EC7C
	mov r4, r0
	ldr lr, [r3]
	mov r3, r2
	cmn lr, #1
	beq _02005CA4
	mov ip, #0
	add r2, r1, #0x98000
	str ip, [sp]
	str ip, [sp, #4]
	mov ip, #1
	mov r0, lr
	mov r1, r4
	add r2, r2, #0x6800000
	str ip, [sp, #8]
	bl FUN_02007254
	add sp, sp, #0xc
	pop {r3, r4, pc}
	arm_func_end FUN_02005c54
_02005CA4:
	add r1, r1, #0x98000
	add r1, r1, #0x6800000
	bl FUN_0200784c
	add sp, sp, #0xc
	pop {r3, r4, pc}
	.align 2, 0_02005CB8: .word 0x0208EC7C

	arm_func_start FUN_02005cbc
FUN_02005cbc: ; 0x02005CBC
	push {r4, lr}
	ldr r0, _02005CEC ; =0x0208EC7C
	ldr r0, [r0]
	cmn r0, #1
	beq _02005CD4
	bl FUN_02007350
	arm_func_end FUN_02005cbc
_02005CD4:
	ldr r4, _02005CF0 ; =LAB_02093d24
	ldr r0, [r4]
	bl FUN_02006a48
	mov r0, #0
	str r0, [r4]
	pop {r4, pc}
	.align 2, 0_02005CEC: .word 0x0208EC7C
_02005CF0: .word LAB_02093d24

	arm_func_start FUN_02005cf4
FUN_02005cf4: ; 0x02005CF4
	push {r3, lr}
	bl FUN_02006bb8
	mov r1, #6
	mul lr, r0, r1
	ldr r2, _02005D40 ; =0x02087814
	ldr r1, _02005D44 ; =0x02087816
	ldrh ip, [r2, lr]
	ldr r2, _02005D48 ; =0x02087818
	ldrh r3, [r1, lr]
	ldr r1, _02005D4C ; =0x02093D40
	ldrh r2, [r2, lr]
	str r0, [r1, #0x14]
	lsl r0, ip, #0xc
	str r0, [r1, #4]
	lsl r0, r3, #0xc
	str r0, [r1, #0x18]
	lsl r0, r2, #0xc
	str r0, [r1, #0x1c]
	pop {r3, pc}
	.align 2, 0_02005D40: .word 0x02087814
_02005D44: .word 0x02087816
_02005D48: .word 0x02087818
_02005D4C: .word 0x02093D40
	arm_func_end FUN_02005cf4

	arm_func_start FUN_02005d50
FUN_02005d50: ; 0x02005D50
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	ldr r3, _02005E94 ; =0x02093D40
	mov r7, r0
	ldr r4, [r3, #0x18]
	mov ip, r1
	cmp r4, #0
	ldreq r0, [r3, #4]
	mov r6, r2
	addeq r2, r0, ip
	beq _02005E44
	ldr r1, [r3, #0x1c]
	add r0, ip, r6
	cmp r0, r1
	ldrlo r0, [r3, #4]
	addlo r2, r0, ip
	blo _02005E44
	cmp ip, r1
	addhs r0, r4, ip
	subhs r2, r0, r1
	bhs _02005E44
	ldr r0, _02005E98 ; =0x0208EC7C
	sub r5, r1, ip
	ldr r0, [r0]
	ldr r8, [r3, #4]
	cmn r0, #1
	beq _02005DE0
	cmp r5, #0x30
	bls _02005DE0
	mov lr, #1
	mov r1, r7
	mov r3, r5
	add r2, r8, ip
	str lr, [sp]
	bl FUN_02007000
	b _02005DF0
	arm_func_end FUN_02005d50
_02005DE0:
	mov r0, r7
	mov r2, r5
	add r1, r8, ip
	bl FUN_0200784c
_02005DF0:
	ldr r0, _02005E98 ; =0x0208EC7C
	ldr r0, [r0]
	cmn r0, #1
	beq _02005E2C
	mov r1, #0
	str r1, [sp]
	mov r2, r4
	str r1, [sp, #4]
	mov r4, #1
	add r1, r7, r5
	sub r3, r6, r5
	str r4, [sp, #8]
	bl FUN_02007254
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_02005E2C:
	mov r1, r4
	add r0, r7, r5
	sub r2, r6, r5
	bl FUN_0200784c
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_02005E44:
	ldr r0, _02005E98 ; =0x0208EC7C
	ldr r0, [r0]
	cmn r0, #1
	beq _02005E7C
	mov r4, #0
	str r4, [sp]
	str r4, [sp, #4]
	mov r4, #1
	mov r1, r7
	mov r3, r6
	str r4, [sp, #8]
	bl FUN_02007254
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_02005E7C:
	mov r1, r2
	mov r0, r7
	mov r2, r6
	bl FUN_0200784c
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02005E94: .word 0x02093D40
_02005E98: .word 0x0208EC7C

	arm_func_start FUN_02005e9c
FUN_02005e9c: ; 0x02005E9C
	push {r4, lr}
	ldr r0, _02005ED8 ; =0x0208EC7C
	ldr r0, [r0]
	cmn r0, #1
	beq _02005EB4
	bl FUN_02007350
	arm_func_end FUN_02005e9c
_02005EB4:
	ldr r4, _02005EDC ; =0x02093D40
	ldr r0, [r4, #0x14]
	bl FUN_02006520
	mov r0, #0
	str r0, [r4, #0x1c]
	str r0, [r4, #0x18]
	str r0, [r4, #4]
	str r0, [r4, #0x14]
	pop {r4, pc}
	.align 2, 0_02005ED8: .word 0x0208EC7C
_02005EDC: .word 0x02093D40

	arm_func_start FUN_02005ee0
FUN_02005ee0: ; 0x02005EE0
	push {r3, lr}
	bl FUN_02006bcc
	asr r3, r0, #4
	ldr r1, _02005F0C ; =0x02093D40
	ldr r2, _02005F10 ; =0x02087804
	lsl r3, r3, #1
	ldrh r2, [r2, r3]
	str r0, [r1, #0xc]
	lsl r0, r2, #0xc
	str r0, [r1, #8]
	pop {r3, pc}
	.align 2, 0_02005F0C: .word 0x02093D40
_02005F10: .word 0x02087804
	arm_func_end FUN_02005ee0

	arm_func_start FUN_02005f14
FUN_02005f14: ; 0x02005F14
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	ldr r3, _02005F7C ; =0x0208EC7C
	ldr ip, _02005F80 ; =0x02093D40
	ldr lr, [r3]
	mov r6, r0
	mov r5, r1
	mov r3, r2
	cmn lr, #1
	ldr r4, [ip, #8]
	beq _02005F6C
	mov r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	mov ip, #1
	mov r0, lr
	mov r1, r6
	add r2, r4, r5
	str ip, [sp, #8]
	bl FUN_02007254
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_02005f14
_02005F6C:
	add r1, r4, r5
	bl FUN_0200784c
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02005F7C: .word 0x0208EC7C
_02005F80: .word 0x02093D40

	arm_func_start FUN_02005f84
FUN_02005f84: ; 0x02005F84
	push {r4, lr}
	ldr r0, _02005FB8 ; =0x0208EC7C
	ldr r0, [r0]
	cmn r0, #1
	beq _02005F9C
	bl FUN_02007350
	arm_func_end FUN_02005f84
_02005F9C:
	ldr r4, _02005FBC ; =0x02093D40
	ldr r0, [r4, #0xc]
	bl FUN_02006698
	mov r0, #0
	str r0, [r4, #0xc]
	str r0, [r4, #8]
	pop {r4, pc}
	.align 2, 0_02005FB8: .word 0x0208EC7C
_02005FBC: .word 0x02093D40

	arm_func_start FUN_02005fc0
FUN_02005fc0: ; 0x02005FC0
	tst r0, #1
	ldrne r1, _02006034 ; =0x04000240
	mov r2, #0x80
	strbne r2, [r1]
	tst r0, #2
	ldrne r1, _02006038 ; =0x04000241
	strbne r2, [r1]
	tst r0, #4
	ldrne r1, _0200603C ; =0x04000242
	strbne r2, [r1]
	tst r0, #8
	ldrne r1, _02006040 ; =0x04000243
	strbne r2, [r1]
	tst r0, #0x10
	ldrne r1, _02006044 ; =0x04000244
	strbne r2, [r1]
	tst r0, #0x20
	ldrne r1, _02006048 ; =0x04000245
	strbne r2, [r1]
	tst r0, #0x40
	ldrne r1, _0200604C ; =0x04000246
	strbne r2, [r1]
	tst r0, #0x80
	ldrne r1, _02006050 ; =0x04000248
	strbne r2, [r1]
	tst r0, #0x100
	ldrne r0, _02006054 ; =0x04000249
	strbne r2, [r0]
	bx lr
	.align 2, 0_02006034: .word 0x04000240
_02006038: .word 0x04000241
_0200603C: .word 0x04000242
_02006040: .word 0x04000243
_02006044: .word 0x04000244
_02006048: .word 0x04000245
_0200604C: .word 0x04000246
_02006050: .word 0x04000248
_02006054: .word 0x04000249
	arm_func_end FUN_02005fc0

	arm_func_start FUN_02006058
FUN_02006058: ; 0x02006058
	push {r3, lr}
	ldr r1, _0200623C ; =LAB_02093d60
	mvn lr, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #2]
	cmp r0, #0x40
	ldr ip, _02006240 ; =0x04000243
	orr r2, r3, r2
	and r2, lr, r2
	strh r2, [r1]
	strh r0, [r1, #2]
	mov r3, #0x91
	mov r1, #0x89
	mov r2, #0x81
	bgt _02006140
	cmp r0, #0x40
	bge _02006224
	cmp r0, #0x20
	bgt _02006134
	cmp r0, #0
	arm_func_end FUN_02006058

	arm_func_start switchD
switchD: ; 0x020060A8
	addge pc, pc, r0, lsl #2
	b _0200622C
	arm_func_end switchD
_020060B0: ; jump table
	b _0200622C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020060B4
	b _020061AC
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020060B8
	b _0200618C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020060BC
	b _020061A4
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020060C0
	b _02006178
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020060C4
	b _020061CC
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020060C8
	b _02006184
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x020060CC
	b _0200619C
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x020060D0
	b _0200616C
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x020060D4
	b _020061DC
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x020060D8
	b _020061EC
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x020060DC
	b _020061B4
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x020060E0
	b _02006174
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x020060E4
	b _020061C8
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x020060E8
	b _02006180
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x020060EC
	b _02006194
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x020060F0
	b _02006208
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x020060F4
	b _0200622C
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x020060F8
	b _0200622C
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x020060FC
	b _0200622C
	arm_func_end caseD_13

	arm_func_start caseD_14
caseD_14: ; 0x02006100
	b _0200622C
	arm_func_end caseD_14

	arm_func_start caseD_15
caseD_15: ; 0x02006104
	b _0200622C
	arm_func_end caseD_15

	arm_func_start caseD_16
caseD_16: ; 0x02006108
	b _0200622C
	arm_func_end caseD_16

	arm_func_start caseD_17
caseD_17: ; 0x0200610C
	b _0200622C
	arm_func_end caseD_17

	arm_func_start caseD_18
caseD_18: ; 0x02006110
	b _0200622C
	arm_func_end caseD_18

	arm_func_start caseD_19
caseD_19: ; 0x02006114
	b _0200622C
	arm_func_end caseD_19

	arm_func_start caseD_1a
caseD_1a: ; 0x02006118
	b _0200622C
	arm_func_end caseD_1a

	arm_func_start caseD_1b
caseD_1b: ; 0x0200611C
	b _0200622C
	arm_func_end caseD_1b

	arm_func_start caseD_1c
caseD_1c: ; 0x02006120
	b _0200622C
	arm_func_end caseD_1c

	arm_func_start caseD_1d
caseD_1d: ; 0x02006124
	b _0200622C
	arm_func_end caseD_1d

	arm_func_start caseD_1e
caseD_1e: ; 0x02006128
	b _0200622C
	arm_func_end caseD_1e

	arm_func_start caseD_1f
caseD_1f: ; 0x0200612C
	b _0200622C
	arm_func_end caseD_1f

	arm_func_start caseD_20
caseD_20: ; 0x02006130
	b _0200621C
	arm_func_end caseD_20
_02006134:
	cmp r0, #0x30
	beq _02006200
	b _0200622C
_02006140:
	cmp r0, #0x60
	bgt _02006160
	bge _02006214
	cmp r0, #0x50
	ldreq r0, _02006244 ; =0x04000246
	strbeq r3, [r0]
	strbeq r2, [r0, #-2]
	b _0200622C
_02006160:
	cmp r0, #0x70
	beq _020061F4
	b _0200622C
_0200616C:
	strb r2, [ip]
	b _0200622C
_02006174:
	strb r1, [ip]
_02006178:
	ldr r0, _02006248 ; =0x04000242
	b _02006228
_02006180:
	strb r3, [ip]
_02006184:
	ldr r0, _02006248 ; =0x04000242
	strb r1, [r0]
_0200618C:
	ldr r0, _0200624C ; =0x04000241
	b _02006228
_02006194:
	mov r0, #0x99
	strb r0, [ip]
_0200619C:
	ldr r0, _02006248 ; =0x04000242
	strb r3, [r0]
_020061A4:
	ldr r0, _0200624C ; =0x04000241
	strb r1, [r0]
_020061AC:
	ldr r0, _02006250 ; =0x04000240
	b _02006228
_020061B4:
	ldr r0, _02006250 ; =0x04000240
	strb r2, [r0]
	strb r1, [r0, #1]
	strb r3, [r0, #3]
	b _0200622C
_020061C8:
	strb r3, [ip]
_020061CC:
	ldr r0, _02006250 ; =0x04000240
_020061D0:
	strb r2, [r0]
	strb r1, [r0, #2]
	b _0200622C
_020061DC:
	ldr r0, _02006250 ; =0x04000240
	strb r2, [r0]
	strb r1, [r0, #3]
	b _0200622C
_020061EC:
	ldr r0, _0200624C ; =0x04000241
	b _020061D0
_020061F4:
	ldr r0, _02006244 ; =0x04000246
	mov r1, #0x99
	strb r1, [r0]
_02006200:
	ldr r0, _02006254 ; =0x04000245
	strb r3, [r0]
_02006208:
	ldr r0, _02006258 ; =0x04000244
	strb r2, [r0]
	b _0200622C
_02006214:
	ldr r0, _02006244 ; =0x04000246
	strb r1, [r0]
_0200621C:
	ldr r0, _02006254 ; =0x04000245
	b _02006228
_02006224:
	ldr r0, _02006244 ; =0x04000246
_02006228:
	strb r2, [r0]
_0200622C:
	ldr r0, _0200623C ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_0200623C: .word LAB_02093d60
_02006240: .word 0x04000243
_02006244: .word 0x04000246
_02006248: .word 0x04000242
_0200624C: .word 0x04000241
_02006250: .word 0x04000240
_02006254: .word 0x04000245
_02006258: .word 0x04000244

	arm_func_start FUN_0200625c
FUN_0200625c: ; 0x0200625C
	push {r3, lr}
	ldr r2, _02006374 ; =LAB_02093d60
	mvn lr, r0
	ldrh ip, [r2]
	ldrh r3, [r2, #4]
	cmp r0, #0x30
	mov r1, #0x82
	orr r3, ip, r3
	and r3, lr, r3
	strh r3, [r2]
	strh r0, [r2, #4]
	bgt _020062C8
	cmp r0, #0x30
	bge _02006328
	cmp r0, #0x10
	bgt _020062BC
	bge _02006334
	cmp r0, #3
	arm_func_end FUN_0200625c

	arm_func_start switchD
switchD: ; 0x020062A4
	addls pc, pc, r0, lsl #2
	b _02006364
	arm_func_end switchD
_020062AC: ; jump table
	b _02006364 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020062B0
	b _0200630C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020062B4
	b _02006314
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020062B8
	b _02006300
	arm_func_end caseD_3
_020062BC:
	cmp r0, #0x20
	beq _0200635C
	b _02006364
_020062C8:
	cmp r0, #0x50
	bgt _020062E4
	bge _0200633C
	cmp r0, #0x40
	ldreq r0, _02006378 ; =0x04000246
	strbeq r1, [r0]
	b _02006364
_020062E4:
	cmp r0, #0x60
	bgt _020062F4
	beq _02006350
	b _02006364
_020062F4:
	cmp r0, #0x70
	beq _0200631C
	b _02006364
_02006300:
	ldr r0, _0200637C ; =0x04000241
	mov r2, #0x8a
	strb r2, [r0]
_0200630C:
	ldr r0, _02006380 ; =0x04000240
	b _02006360
_02006314:
	ldr r0, _0200637C ; =0x04000241
	b _02006360
_0200631C:
	ldr r0, _02006378 ; =0x04000246
	mov r2, #0x9a
	strb r2, [r0]
_02006328:
	ldr r0, _02006384 ; =0x04000245
	mov r2, #0x92
	strb r2, [r0]
_02006334:
	ldr r0, _02006388 ; =0x04000244
	b _02006360
_0200633C:
	ldr r0, _02006378 ; =0x04000246
	mov r2, #0x92
	strb r2, [r0]
	strb r1, [r0, #-2]
	b _02006364
_02006350:
	ldr r0, _02006378 ; =0x04000246
	mov r2, #0x8a
	strb r2, [r0]
_0200635C:
	ldr r0, _02006384 ; =0x04000245
_02006360:
	strb r1, [r0]
_02006364:
	ldr r0, _02006374 ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_02006374: .word LAB_02093d60
_02006378: .word 0x04000246
_0200637C: .word 0x04000241
_02006380: .word 0x04000240
_02006384: .word 0x04000245
_02006388: .word 0x04000244

	arm_func_start FUN_0200638c
FUN_0200638c: ; 0x0200638C
	push {r3, lr}
	ldr r1, _02006478 ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0xe]
	cmp r0, #0x20
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0xe]
	bgt _020063E8
	cmp r0, #0x20
	bge _0200644C
	cmp r0, #0
	bgt _020063DC
	moveq r1, #0x4000000
	ldreq r0, [r1]
	biceq r0, r0, #0x40000000
	streq r0, [r1]
	b _02006468
	arm_func_end FUN_0200638c
_020063DC:
	cmp r0, #0x10
	beq _02006404
	b _02006468
_020063E8:
	cmp r0, #0x40
	bgt _020063F8
	beq _02006420
	b _02006468
_020063F8:
	cmp r0, #0x60
	beq _02006440
	b _02006468
_02006404:
	mov r2, #0x4000000
	ldr r1, [r2]
	mov r0, #0x84
	orr r1, r1, #0x40000000
	str r1, [r2]
	strb r0, [r2, #0x244]
	b _02006468
_02006420:
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _0200647C ; =0x04000246
	orr r1, r1, #0x40000000
	str r1, [r2]
	mov r1, #0x8c
	strb r1, [r0]
	b _02006468
_02006440:
	ldr r0, _0200647C ; =0x04000246
	mov r1, #0x8c
	strb r1, [r0]
_0200644C:
	ldr r0, _02006480 ; =0x04000245
	mov r1, #0x84
	strb r1, [r0]
	mov r1, #0x4000000
	ldr r0, [r1]
	orr r0, r0, #0x40000000
	str r0, [r1]
_02006468:
	ldr r0, _02006478 ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_02006478: .word LAB_02093d60
_0200647C: .word 0x04000246
_02006480: .word 0x04000245

	arm_func_start FUN_02006484
FUN_02006484: ; 0x02006484
	push {r3, lr}
	ldr r1, _02006514 ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x10]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x10]
	beq _020064F4
	cmp r0, #0x20
	beq _020064C4
	cmp r0, #0x40
	beq _020064E4
	b _02006504
	arm_func_end FUN_02006484
_020064C4:
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _02006518 ; =0x04000245
_020064D0:
	orr r1, r1, #0x80000000
	str r1, [r2]
	mov r1, #0x85
	strb r1, [r0]
	b _02006504
_020064E4:
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _0200651C ; =0x04000246
	b _020064D0
_020064F4:
	mov r1, #0x4000000
	ldr r0, [r1]
	bic r0, r0, #0x80000000
	str r0, [r1]
_02006504:
	ldr r0, _02006514 ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_02006514: .word LAB_02093d60
_02006518: .word 0x04000245
_0200651C: .word 0x04000246

	arm_func_start FUN_02006520
FUN_02006520: ; 0x02006520
	push {r4, lr}
	ldr r1, _02006680 ; =LAB_02093d60
	mvn ip, r0
	ldrh r4, [r1]
	ldrh r3, [r1, #8]
	ldr r2, _02006684 ; =0x04000243
	cmp r0, #0
	orr r3, r4, r3
	and r3, ip, r3
	strh r3, [r1]
	strh r0, [r1, #8]
	sub r3, r2, #1
	mov ip, #0x8b
	mov r1, #0x83
	bne _02006574
	ldr r2, _02006688 ; =0x04000060
	ldr r0, _0200668C ; =0x0000CFFE
	ldrh r1, [r2]
	and r0, r1, r0
	strh r0, [r2]
	b _02006670
	arm_func_end FUN_02006520
_02006574:
	ldr r4, _02006688 ; =0x04000060
	cmp r0, #0xf
	ldrh lr, [r4]
	bic lr, lr, #0x3000
	orr lr, lr, #1
	strh lr, [r4]

	arm_func_start switchD
switchD: ; 0x0200658C
	addls pc, pc, r0, lsl #2
	b _02006670
_02006594: ; jump table
	b _02006670 ; case 0
	arm_func_end switchD

	arm_func_start caseD_1
caseD_1: ; 0x02006598
	b _02006668
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0200659C
	b _02006648
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020065A0
	b _02006660
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020065A4
	b _02006634
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020065A8
	b _020065D4
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020065AC
	b _02006644
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x020065B0
	b _02006658
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x020065B4
	b _02006628
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x020065B8
	b _020065E0
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x020065BC
	b _020065EC
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x020065C0
	b _020065FC
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x020065C4
	b _02006630
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x020065C8
	b _02006614
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x020065CC
	b _0200663C
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x020065D0
	b _02006650
	arm_func_end caseD_f
_020065D4:
	strb r1, [r4, #0x1e0]
	strb ip, [r3]
	b _02006670
_020065E0:
	strb r1, [r4, #0x1e0]
	strb ip, [r2]
	b _02006670
_020065EC:
	ldr r0, _02006690 ; =0x04000241
	strb r1, [r0]
	strb ip, [r0, #2]
	b _02006670
_020065FC:
	ldr r2, _02006690 ; =0x04000241
	strb r1, [r4, #0x1e0]
	strb ip, [r2]
	mov r0, #0x93
	strb r0, [r2, #2]
	b _02006670
_02006614:
	strb r1, [r4, #0x1e0]
	strb ip, [r3]
	mov r0, #0x93
	strb r0, [r3, #1]
	b _02006670
_02006628:
	strb r1, [r2]
	b _02006670
_02006630:
	strb ip, [r2]
_02006634:
	strb r1, [r3]
	b _02006670
_0200663C:
	mov r0, #0x93
	strb r0, [r2]
_02006644:
	strb ip, [r3]
_02006648:
	ldr r0, _02006690 ; =0x04000241
	b _0200666C
_02006650:
	mov r0, #0x9b
	strb r0, [r2]
_02006658:
	mov r0, #0x93
	strb r0, [r3]
_02006660:
	ldr r0, _02006690 ; =0x04000241
	strb ip, [r0]
_02006668:
	ldr r0, _02006694 ; =0x04000240
_0200666C:
	strb r1, [r0]
_02006670:
	ldr r0, _02006680 ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r4, pc}
	.align 2, 0_02006680: .word LAB_02093d60
_02006684: .word 0x04000243
_02006688: .word 0x04000060
_0200668C: .word 0x0000CFFE
_02006690: .word 0x04000241
_02006694: .word 0x04000240

	arm_func_start FUN_02006698
FUN_02006698: ; 0x02006698
	push {r3, lr}
	ldr r1, _02006764 ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0xa]
	cmp r0, #0x30
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0xa]
	bgt _020066E8
	cmp r0, #0x30
	bge _0200673C
	cmp r0, #0x10
	bgt _020066DC
	bge _02006748
	b _02006754
	arm_func_end FUN_02006698
_020066DC:
	cmp r0, #0x20
	beq _02006720
	b _02006754
_020066E8:
	cmp r0, #0x60
	bgt _02006708
	bge _02006714
	cmp r0, #0x40
	ldreq r0, _02006768 ; =0x04000246
	moveq r1, #0x83
	strbeq r1, [r0]
	b _02006754
_02006708:
	cmp r0, #0x70
	beq _02006730
	b _02006754
_02006714:
	ldr r0, _02006768 ; =0x04000246
	mov r1, #0x8b
	strb r1, [r0]
_02006720:
	ldr r0, _0200676C ; =0x04000245
	mov r1, #0x83
	strb r1, [r0]
	b _02006754
_02006730:
	ldr r0, _02006768 ; =0x04000246
	mov r1, #0x9b
	strb r1, [r0]
_0200673C:
	ldr r0, _0200676C ; =0x04000245
	mov r1, #0x93
	strb r1, [r0]
_02006748:
	ldr r0, _02006770 ; =0x04000244
	mov r1, #0x83
	strb r1, [r0]
_02006754:
	ldr r0, _02006764 ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_02006764: .word LAB_02093d60
_02006768: .word 0x04000246
_0200676C: .word 0x04000245
_02006770: .word 0x04000244

	arm_func_start FUN_02006774
FUN_02006774: ; 0x02006774
	push {r3, lr}
	ldr r1, _02006858 ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0xc]
	cmp r0, #0xc
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0xc]
	arm_func_end FUN_02006774

	arm_func_start switchD
switchD: ; 0x0200679C
	addls pc, pc, r0, lsl #2
	b _02006848
	arm_func_end switchD
_020067A4: ; jump table
	b LAB_02006800 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020067A8
	b _02006818
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020067AC
	b _020067E4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020067B0
	b _020067D8
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020067B4
	b _0200682C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020067B8
	b _02006848
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020067BC
	b _02006848
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x020067C0
	b _02006848
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x020067C4
	b _020067F8
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x020067C8
	b _02006848
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x020067CC
	b _02006848
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x020067D0
	b _02006848
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x020067D4
	b _020067EC
	arm_func_end caseD_c
_020067D8:
	ldr r0, _0200685C ; =0x04000240
	mov r1, #0x93
	strb r1, [r0]
_020067E4:
	ldr r0, _02006860 ; =0x04000241
	b _02006830
_020067EC:
	ldr r0, _02006864 ; =0x04000242
	mov r1, #0x93
	strb r1, [r0]
_020067F8:
	ldr r0, _02006868 ; =0x04000243
	b _02006830
LAB_02006800:
	ldr r2, _0200686C ; =0x04000060
	ldr r0, _02006870 ; =0x0000BFFF
	ldrh r1, [r2]
	and r0, r1, r0
	strh r0, [r2]
	b _02006848
_02006818:
	ldr r0, _0200685C ; =0x04000240
	mov r1, #0x9b
	strb r1, [r0]
	sub r1, r0, #0x1e0
	b _0200683C
_0200682C:
	ldr r0, _02006864 ; =0x04000242
_02006830:
	mov r2, #0x9b
	ldr r1, _0200686C ; =0x04000060
	strb r2, [r0]
_0200683C:
	ldrh r0, [r1]
	orr r0, r0, #0x4000
	strh r0, [r1]
_02006848:
	ldr r0, _02006858 ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_02006858: .word LAB_02093d60
_0200685C: .word 0x04000240
_02006860: .word 0x04000241
_02006864: .word 0x04000242
_02006868: .word 0x04000243
_0200686C: .word 0x04000060
_02006870: .word 0x0000BFFF

	arm_func_start FUN_02006874
FUN_02006874: ; 0x02006874
	push {r3, lr}
	ldr r1, _0200690C ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #6]
	cmp r0, #8
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #6]
	bgt _020068D0
	cmp r0, #8
	bge _020068F0
	cmp r0, #4
	bgt _020068FC
	cmp r0, #0
	blt _020068FC
	beq _020068FC
	cmp r0, #4
	ldreq r0, _02006910 ; =0x04000242
	moveq r1, #0x82
	strbeq r1, [r0]
	b _020068FC
	arm_func_end FUN_02006874
_020068D0:
	cmp r0, #0xc
	bne _020068FC
	ldr r1, _02006914 ; =0x04000243
	mov r0, #0x8a
	strb r0, [r1]
	mov r0, #0x82
	strb r0, [r1, #-1]
	b _020068FC
_020068F0:
	ldr r0, _02006914 ; =0x04000243
	mov r1, #0x82
	strb r1, [r0]
_020068FC:
	ldr r0, _0200690C ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_0200690C: .word LAB_02093d60
_02006910: .word 0x04000242
_02006914: .word 0x04000243

	arm_func_start FUN_02006918
FUN_02006918: ; 0x02006918
	ldr r2, _02006934 ; =LAB_02093d60
	lsl r1, r0, #0x10
	ldrh r3, [r2]
	ldr ip, _02006938 ; =FUN_02005fc0
	orr r1, r3, r1, lsr #16
	strh r1, [r2]
	bx ip
	.align 2, 0_02006934: .word LAB_02093d60
_02006938: .word FUN_02005fc0
	arm_func_end FUN_02006918

	arm_func_start FUN_0200693c
FUN_0200693c: ; 0x0200693C
	push {r3, lr}
	ldr r1, _020069C8 ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x12]
	cmp r0, #0x80
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x12]
	bgt _02006998
	cmp r0, #0x80
	bge _020069AC
	cmp r0, #4
	bgt _020069B8
	cmp r0, #0
	blt _020069B8
	beq _020069B8
	cmp r0, #4
	ldreq r0, _020069CC ; =0x04000242
	moveq r1, #0x84
	strbeq r1, [r0]
	b _020069B8
	arm_func_end FUN_0200693c
_02006998:
	cmp r0, #0x180
	bne _020069B8
	ldr r0, _020069D0 ; =0x04000249
	mov r1, #0x81
	strb r1, [r0]
_020069AC:
	ldr r0, _020069D4 ; =0x04000248
	mov r1, #0x81
	strb r1, [r0]
_020069B8:
	ldr r0, _020069C8 ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_020069C8: .word LAB_02093d60
_020069CC: .word 0x04000242
_020069D0: .word 0x04000249
_020069D4: .word 0x04000248

	arm_func_start FUN_020069d8
FUN_020069d8: ; 0x020069D8
	push {r3, lr}
	ldr r1, _02006A3C ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x14]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x14]
	beq _02006A2C
	cmp r0, #8
	beq _02006A20
	cmp r0, #0x100
	ldreq r0, _02006A40 ; =0x04000249
	moveq r1, #0x82
	strbeq r1, [r0]
	b _02006A2C
	arm_func_end FUN_020069d8
_02006A20:
	ldr r0, _02006A44 ; =0x04000243
	mov r1, #0x84
	strb r1, [r0]
_02006A2C:
	ldr r0, _02006A3C ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_02006A3C: .word LAB_02093d60
_02006A40: .word 0x04000249
_02006A44: .word 0x04000243

	arm_func_start FUN_02006a48
FUN_02006a48: ; 0x02006A48
	push {r3, lr}
	ldr r1, _02006ABC ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x16]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x16]
	beq _02006A9C
	cmp r0, #0x80
	bne _02006AAC
	ldr r3, _02006AC0 ; =0x04001000
	ldr r0, _02006AC4 ; =0x04000248
	ldr r2, [r3]
	mov r1, #0x82
	orr r2, r2, #0x40000000
	str r2, [r3]
	strb r1, [r0]
	b _02006AAC
	arm_func_end FUN_02006a48
_02006A9C:
	ldr r1, _02006AC0 ; =0x04001000
	ldr r0, [r1]
	bic r0, r0, #0x40000000
	str r0, [r1]
_02006AAC:
	ldr r0, _02006ABC ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_02006ABC: .word LAB_02093d60
_02006AC0: .word 0x04001000
_02006AC4: .word 0x04000248

	arm_func_start FUN_02006ac8
FUN_02006ac8: ; 0x02006AC8
	push {r3, lr}
	ldr r1, _02006B3C ; =LAB_02093d60
	mvn ip, r0
	ldrh r3, [r1]
	ldrh r2, [r1, #0x18]
	cmp r0, #0
	orr r2, r3, r2
	and r2, ip, r2
	strh r2, [r1]
	strh r0, [r1, #0x18]
	beq _02006B1C
	cmp r0, #0x100
	bne _02006B2C
	ldr r3, _02006B40 ; =0x04001000
	ldr r0, _02006B44 ; =0x04000249
	ldr r2, [r3]
	mov r1, #0x83
	orr r2, r2, #0x80000000
	str r2, [r3]
	strb r1, [r0]
	b _02006B2C
	arm_func_end FUN_02006ac8
_02006B1C:
	ldr r1, _02006B40 ; =0x04001000
	ldr r0, [r1]
	bic r0, r0, #0x80000000
	str r0, [r1]
_02006B2C:
	ldr r0, _02006B3C ; =LAB_02093d60
	ldrh r0, [r0]
	bl FUN_02005fc0
	pop {r3, pc}
	.align 2, 0_02006B3C: .word LAB_02093d60
_02006B40: .word 0x04001000
_02006B44: .word 0x04000249

	arm_func_start LAB_02006b48
LAB_02006b48: ; 0x02006B48
	push {r4, lr}
	ldrh r4, [r0]
	mov r1, #0
	ldr r2, _02006B7C ; =LAB_02093d60
	strh r1, [r0]
	ldrh r3, [r2]
	lsl r1, r4, #0x10
	mov r0, r4
	orr r1, r3, r1, lsr #16
	strh r1, [r2]
	bl FUN_02005fc0
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02006B7C: .word LAB_02093d60
	arm_func_end LAB_02006b48

	arm_func_start FUN_02006b80
FUN_02006b80: ; 0x02006B80
	ldr r0, _02006B8C ; =0x02093D62
	ldr ip, _02006B90 ; =LAB_02006b48
	bx ip
	.align 2, 0_02006B8C: .word 0x02093D62
_02006B90: .word LAB_02006b48
	arm_func_end FUN_02006b80

	arm_func_start FUN_02006b94
FUN_02006b94: ; 0x02006B94
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _02006BB0 ; =0x02093D6E
	bic r1, r1, #0x40000000
	ldr ip, _02006BB4 ; =LAB_02006b48
	str r1, [r2]
	bx ip
	.align 2, 0_02006BB0: .word 0x02093D6E
_02006BB4: .word LAB_02006b48
	arm_func_end FUN_02006b94

	arm_func_start FUN_02006bb8
FUN_02006bb8: ; 0x02006BB8
	ldr r0, _02006BC4 ; =_02093D68
	ldr ip, _02006BC8 ; =LAB_02006b48
	bx ip
	.align 2, 0_02006BC4: .word _02093D68
_02006BC8: .word LAB_02006b48
	arm_func_end FUN_02006bb8

	arm_func_start FUN_02006bcc
FUN_02006bcc: ; 0x02006BCC
	ldr r0, _02006BD8 ; =0x02093D6A
	ldr ip, _02006BDC ; =LAB_02006b48
	bx ip
	.align 2, 0_02006BD8: .word 0x02093D6A
_02006BDC: .word LAB_02006b48
	arm_func_end FUN_02006bcc

	arm_func_start FUN_02006be0
FUN_02006be0: ; 0x02006BE0
	ldr r0, _02006BEC ; =0x02093D72
	ldr ip, _02006BF0 ; =LAB_02006b48
	bx ip
	.align 2, 0_02006BEC: .word 0x02093D72
_02006BF0: .word LAB_02006b48
	arm_func_end FUN_02006be0

	arm_func_start FUN_02006bf4
FUN_02006bf4: ; 0x02006BF4
	ldr r0, _02006C00 ; =_02093D74
	ldr ip, _02006C04 ; =LAB_02006b48
	bx ip
	.align 2, 0_02006C00: .word _02093D74
_02006C04: .word LAB_02006b48
	arm_func_end FUN_02006bf4

	arm_func_start FUN_02006c08
FUN_02006c08: ; 0x02006C08
	ldr r2, _02006C24 ; =0x04001000
	ldr r0, _02006C28 ; =0x02093D76
	ldr r1, [r2]
	ldr ip, _02006C2C ; =LAB_02006b48
	bic r1, r1, #0x40000000
	str r1, [r2]
	bx ip
	.align 2, 0_02006C24: .word 0x04001000
_02006C28: .word 0x02093D76
_02006C2C: .word LAB_02006b48
	arm_func_end FUN_02006c08

	arm_func_start LAB_02006c30
LAB_02006c30: ; 0x02006C30
	push {r4, lr}
	ldrh r4, [r0]
	mov r1, #0
	strh r1, [r0]
	tst r4, #1
	ldrne r0, _02006CC8 ; =0x04000240
	strbne r1, [r0]
	tst r4, #2
	ldrne r0, _02006CCC ; =0x04000241
	strbne r1, [r0]
	tst r4, #4
	ldrne r0, _02006CD0 ; =0x04000242
	strbne r1, [r0]
	tst r4, #8
	ldrne r0, _02006CD4 ; =0x04000243
	strbne r1, [r0]
	tst r4, #0x10
	ldrne r0, _02006CD8 ; =0x04000244
	strbne r1, [r0]
	tst r4, #0x20
	ldrne r0, _02006CDC ; =0x04000245
	strbne r1, [r0]
	tst r4, #0x40
	ldrne r0, _02006CE0 ; =0x04000246
	strbne r1, [r0]
	tst r4, #0x80
	ldrne r0, _02006CE4 ; =0x04000248
	strbne r1, [r0]
	tst r4, #0x100
	ldrne r0, _02006CE8 ; =0x04000249
	strbne r1, [r0]
	ldr r1, _02006CEC ; =0x02093D22
	lsl r0, r4, #0x10
	ldrh r1, [r1]
	lsr r0, r0, #0x10
	bl FUN_02004010
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02006CC8: .word 0x04000240
_02006CCC: .word 0x04000241
_02006CD0: .word 0x04000242
_02006CD4: .word 0x04000243
_02006CD8: .word 0x04000244
_02006CDC: .word 0x04000245
_02006CE0: .word 0x04000246
_02006CE4: .word 0x04000248
_02006CE8: .word 0x04000249
_02006CEC: .word 0x02093D22
	arm_func_end LAB_02006c30

	arm_func_start FUN_02006cf0
FUN_02006cf0: ; 0x02006CF0
	ldr r0, _02006CFC ; =0x02093D62
	ldr ip, _02006D00 ; =LAB_02006c30
	bx ip
	.align 2, 0_02006CFC: .word 0x02093D62
_02006D00: .word LAB_02006c30
	arm_func_end FUN_02006cf0

	arm_func_start FUN_02006d04
FUN_02006d04: ; 0x02006D04
	ldr r0, _02006D10 ; =LAB_02093d64
	ldr ip, _02006D14 ; =LAB_02006c30
	bx ip
	.align 2, 0_02006D10: .word LAB_02093d64
_02006D14: .word LAB_02006c30
	arm_func_end FUN_02006d04

	arm_func_start FUN_02006d18
FUN_02006d18: ; 0x02006D18
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _02006D34 ; =0x02093D6E
	bic r1, r1, #0x40000000
	ldr ip, _02006D38 ; =LAB_02006c30
	str r1, [r2]
	bx ip
	.align 2, 0_02006D34: .word 0x02093D6E
_02006D38: .word LAB_02006c30
	arm_func_end FUN_02006d18

	arm_func_start FUN_02006d3c
FUN_02006d3c: ; 0x02006D3C
	mov r2, #0x4000000
	ldr r1, [r2]
	ldr r0, _02006D58 ; =_02093D70
	bic r1, r1, #0x80000000
	ldr ip, _02006D5C ; =LAB_02006c30
	str r1, [r2]
	bx ip
	.align 2, 0_02006D58: .word _02093D70
_02006D5C: .word LAB_02006c30
	arm_func_end FUN_02006d3c

	arm_func_start FUN_02006d60
FUN_02006d60: ; 0x02006D60
	ldr r0, _02006D6C ; =_02093D68
	ldr ip, _02006D70 ; =LAB_02006c30
	bx ip
	.align 2, 0_02006D6C: .word _02093D68
_02006D70: .word LAB_02006c30
	arm_func_end FUN_02006d60

	arm_func_start FUN_02006d74
FUN_02006d74: ; 0x02006D74
	ldr r0, _02006D80 ; =0x02093D6A
	ldr ip, _02006D84 ; =LAB_02006c30
	bx ip
	.align 2, 0_02006D80: .word 0x02093D6A
_02006D84: .word LAB_02006c30
	arm_func_end FUN_02006d74

	arm_func_start FUN_02006d88
FUN_02006d88: ; 0x02006D88
	ldr r0, _02006D94 ; =_02093D6C
	ldr ip, _02006D98 ; =LAB_02006c30
	bx ip
	.align 2, 0_02006D94: .word _02093D6C
_02006D98: .word LAB_02006c30
	arm_func_end FUN_02006d88

	arm_func_start FUN_02006d9c
FUN_02006d9c: ; 0x02006D9C
	ldr r0, _02006DA8 ; =0x02093D66
	ldr ip, _02006DAC ; =LAB_02006c30
	bx ip
	.align 2, 0_02006DA8: .word 0x02093D66
_02006DAC: .word LAB_02006c30
	arm_func_end FUN_02006d9c

	arm_func_start FUN_02006db0
FUN_02006db0: ; 0x02006DB0
	ldr r0, _02006DBC ; =LAB_02093d60
	ldr ip, _02006DC0 ; =LAB_02006c30
	bx ip
	.align 2, 0_02006DBC: .word LAB_02093d60
_02006DC0: .word LAB_02006c30
	arm_func_end FUN_02006db0

	arm_func_start FUN_02006dc4
FUN_02006dc4: ; 0x02006DC4
	ldr r0, _02006DD0 ; =0x02093D72
	ldr ip, _02006DD4 ; =LAB_02006c30
	bx ip
	.align 2, 0_02006DD0: .word 0x02093D72
_02006DD4: .word LAB_02006c30
	arm_func_end FUN_02006dc4

	arm_func_start FUN_02006dd8
FUN_02006dd8: ; 0x02006DD8
	ldr r0, _02006DE4 ; =_02093D74
	ldr ip, _02006DE8 ; =LAB_02006c30
	bx ip
	.align 2, 0_02006DE4: .word _02093D74
_02006DE8: .word LAB_02006c30
	arm_func_end FUN_02006dd8

	arm_func_start FUN_02006dec
FUN_02006dec: ; 0x02006DEC
	ldr r2, _02006E08 ; =0x04001000
	ldr r0, _02006E0C ; =0x02093D76
	ldr r1, [r2]
	ldr ip, _02006E10 ; =LAB_02006c30
	bic r1, r1, #0x40000000
	str r1, [r2]
	bx ip
	.align 2, 0_02006E08: .word 0x04001000
_02006E0C: .word 0x02093D76
_02006E10: .word LAB_02006c30
	arm_func_end FUN_02006dec

	arm_func_start FUN_02006e14
FUN_02006e14: ; 0x02006E14
	ldr r2, _02006E30 ; =0x04001000
	ldr r0, _02006E34 ; =_02093D78
	ldr r1, [r2]
	ldr ip, _02006E38 ; =LAB_02006c30
	bic r1, r1, #0x80000000
	str r1, [r2]
	bx ip
	.align 2, 0_02006E30: .word 0x04001000
_02006E34: .word _02093D78
_02006E38: .word LAB_02006c30
	arm_func_end FUN_02006e14

	arm_func_start FUN_02006e3c
FUN_02006e3c: ; 0x02006E3C
	ldr r0, _02006E48 ; =LAB_02093d60
	ldrh r0, [r0, #8]
	bx lr
	.align 2, 0_02006E48: .word LAB_02093d60
	arm_func_end FUN_02006e3c

	arm_func_start FUN_02006e4c
FUN_02006e4c: ; 0x02006E4C
	mov r1, #0
	tst r0, #1
	addne r1, r1, #0x20000
	tst r0, #2
	addne r1, r1, #0x20000
	tst r0, #4
	addne r1, r1, #0x20000
	tst r0, #8
	addne r1, r1, #0x20000
	tst r0, #0x10
	addne r1, r1, #0x10000
	tst r0, #0x20
	addne r1, r1, #0x4000
	tst r0, #0x40
	addne r1, r1, #0x4000
	tst r0, #0x80
	addne r1, r1, #0x8000
	tst r0, #0x100
	addne r1, r1, #0x4000
	mov r0, r1
	bx lr
	arm_func_end FUN_02006e4c

	arm_func_start FUN_02006ea0
FUN_02006ea0: ; 0x02006EA0
	ldr r0, _02006EB0 ; =LAB_02093d60
	ldr ip, _02006EB4 ; =FUN_02006e4c
	ldrh r0, [r0, #8]
	bx ip
	.align 2, 0_02006EB0: .word LAB_02093d60
_02006EB4: .word FUN_02006e4c
	arm_func_end FUN_02006ea0

	arm_func_start FUN_02006eb8
FUN_02006eb8: ; 0x02006EB8
	ldr r0, _02006EC8 ; =LAB_02093d60
	ldr ip, _02006ECC ; =FUN_02006e4c
	ldrh r0, [r0, #0xa]
	bx ip
	.align 2, 0_02006EC8: .word LAB_02093d60
_02006ECC: .word FUN_02006e4c
	arm_func_end FUN_02006eb8

	arm_func_start FUN_02006ed0
FUN_02006ed0: ; 0x02006ED0
	ldr r0, _02006EE0 ; =LAB_02093d60
	ldr ip, _02006EE4 ; =FUN_02006e4c
	ldrh r0, [r0, #0x14]
	bx ip
	.align 2, 0_02006EE0: .word LAB_02093d60
_02006EE4: .word FUN_02006e4c
	arm_func_end FUN_02006ed0

	arm_func_start LAB_02006ee8
LAB_02006ee8: ; 0x02006EE8
	ldm r0!, {r2, r3, ip}
	stm r1, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1, {r2, r3, ip}
	bx lr
	arm_func_end LAB_02006ee8

	arm_func_start FUN_02006f0c
FUN_02006f0c: ; 0x02006F0C
	ldr r0, _02006F64 ; =LAB_02093d60
	mov r2, #0
	strh r2, [r0]
	strh r2, [r0, #2]
	strh r2, [r0, #4]
	strh r2, [r0, #6]
	strh r2, [r0, #8]
	strh r2, [r0, #0xa]
	strh r2, [r0, #0xc]
	strh r2, [r0, #0xe]
	strh r2, [r0, #0x10]
	strh r2, [r0, #0x12]
	strh r2, [r0, #0x14]
	strh r2, [r0, #0x16]
	ldr r1, _02006F68 ; =0x04000240
	strh r2, [r0, #0x18]
	str r2, [r1]
	strb r2, [r1, #4]
	strb r2, [r1, #5]
	strb r2, [r1, #6]
	strh r2, [r1, #8]
	bx lr
	.align 2, 0_02006F64: .word LAB_02093d60
_02006F68: .word 0x04000240
	arm_func_end FUN_02006f0c

	arm_func_start FUN_02006f6c
FUN_02006f6c: ; 0x02006F6C
	ldr r1, _02006F78 ; =0x04000247
	strb r0, [r1]
	bx lr
	.align 2, 0_02006F78: .word 0x04000247
	arm_func_end FUN_02006f6c

	arm_func_start FUN_02006f7c
FUN_02006f7c: ; 0x02006F7C
	push {r3, r4, lr}
	sub sp, sp, #4
	cmp r3, #0
	addeq sp, sp, #4
	mov ip, r1
	popeq {r3, r4, pc}
	add r1, r0, r0, lsl #1
	add r1, r1, #2
	lsl r1, r1, #2
	add r1, r1, #0xb0
	add r4, r1, #0x4000000
	arm_func_end FUN_02006f7c
_02006FA8:
	ldr r1, [r4]
	tst r1, #0x80000000
	bne _02006FA8
	ldr r1, [sp, #0x10]
	lsr r3, r3, #2
	cmp r1, #0
	mov r1, r2
	beq _02006FD8
	mov lr, #0x12
	mov r2, ip
	orr r3, r3, #0x85000000
	b _02006FE4
_02006FD8:
	mov lr, #0x16
	mov r2, ip
	orr r3, r3, #0x5000000
_02006FE4:
	str lr, [sp]
	bl FUN_01FF845C
_02006FEC:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _02006FEC
	add sp, sp, #4
	pop {r3, r4, pc}

	arm_func_start FUN_02007000
FUN_02007000: ; 0x02007000
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	movs r5, r3
	mov r8, r0
	mov r7, r1
	mov r6, r2
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r2, r5
	mov r3, #0
	bl FUN_020074c8
	add r0, r8, r8, lsl #1
	add r0, r0, #2
	lsl r0, r0, #2
	add r0, r0, #0xb0
	add r4, r0, #0x4000000
	arm_func_end FUN_02007000
_02007040:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _02007040
	ldr r0, [sp, #0x20]
	lsr r3, r5, #2
	cmp r0, #0
	beq _02007074
	mov r5, #2
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x84000000
	b _02007088
_02007074:
	mov r5, #6
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x4000000
_02007088:
	str r5, [sp]
	bl FUN_01FF845C
_02007090:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _02007090
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020070a4
FUN_020070a4: ; 0x020070A4
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	movs r5, r3
	mov r8, r0
	mov r7, r1
	mov r6, r2
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r2, r5
	mov r3, #0
	bl FUN_020074c8
	add r0, r8, r8, lsl #1
	add r0, r0, #2
	lsl r0, r0, #2
	add r0, r0, #0xb0
	add r4, r0, #0x4000000
	arm_func_end FUN_020070a4
_020070E4:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _020070E4
	ldr r0, [sp, #0x20]
	cmp r0, #0
	beq _0200711C
	lsr r3, r5, #1
	mov r5, #2
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x80000000
	str r5, [sp]
	b _02007134
_0200711C:
	mov ip, #6
	mov r0, r8
	mov r1, r7
	mov r2, r6
	lsr r3, r5, #1
	str ip, [sp]
_02007134:
	bl FUN_01FF845C
_02007138:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _02007138
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0200714c
FUN_0200714c: ; 0x0200714C
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	movs r8, r3
	mov r6, r0
	mov r5, r1
	mov r4, r2
	ldr r7, [sp, #0x20]
	bne _02007188
	cmp r7, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r0, [sp, #0x24]
	blx r7
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0200714c
_02007188:
	bl FUN_02007350
	cmp r7, #0
	beq _020071FC
	ldr r2, [sp, #0x24]
	mov r0, r6
	mov r1, r7
	bl FUN_02000f44
	ldr r0, [sp, #0x28]
	lsr r3, r8, #2
	cmp r0, #0
	beq _020071D8
	mov ip, #0x10
	mov r0, r6
	mov r1, r4
	mov r2, r5
	orr r3, r3, #0xc5000000
	str ip, [sp]
	bl FUN_01FF845C
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
_020071D8:
	mov ip, #0x14
	mov r0, r6
	mov r1, r4
	mov r2, r5
	orr r3, r3, #0x45000000
	str ip, [sp]
	bl FUN_01FF845C
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
_020071FC:
	ldr r0, [sp, #0x28]
	lsr r3, r8, #2
	cmp r0, #0
	beq _02007230
	mov ip, #0x10
	mov r0, r6
	mov r1, r4
	mov r2, r5
	orr r3, r3, #0x85000000
	str ip, [sp]
	bl FUN_01FF845C
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
_02007230:
	mov ip, #0x14
	mov r0, r6
	mov r1, r4
	mov r2, r5
	orr r3, r3, #0x5000000
	str ip, [sp]
	bl FUN_01FF845C
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02007254
FUN_02007254: ; 0x02007254
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, r3
	mov r4, #0
	mov r6, r2
	mov r2, r5
	mov r3, r4
	mov r8, r0
	mov r7, r1
	ldr sb, [sp, #0x20]
	bl FUN_020074c8
	cmp r5, #0
	bne _02007298
	cmp sb, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sp, #0x24]
	blx sb
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02007254
_02007298:
	mov r0, r8
	bl FUN_02007350
	cmp sb, #0
	beq _02007304
	ldr r2, [sp, #0x24]
	mov r0, r8
	mov r1, sb
	bl FUN_02000f44
	ldr r0, [sp, #0x28]
	lsr r3, r5, #2
	cmp r0, #0
	beq _020072E4
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0xc4000000
	str r4, [sp]
	bl FUN_01FF845C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_020072E4:
	mov r4, #4
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x44000000
	str r4, [sp]
	bl FUN_01FF845C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02007304:
	ldr r0, [sp, #0x28]
	lsr r3, r5, #2
	cmp r0, #0
	beq _02007330
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x84000000
	str r4, [sp]
	bl FUN_01FF845C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02007330:
	mov r4, #4
	mov r0, r8
	mov r1, r7
	mov r2, r6
	orr r3, r3, #0x4000000
	str r4, [sp]
	bl FUN_01FF845C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02007350
FUN_02007350: ; 0x02007350
	push {r4, lr}
	mov r4, r0
	bl FUN_02003da8
	mov r1, #0xc
	mul r3, r4, r1
	add r1, r3, #0xb8
	add r2, r1, #0x4000000
	arm_func_end FUN_02007350
_0200736C:
	ldr r1, [r2]
	tst r1, #0x80000000
	bne _0200736C
	cmp r4, #0
	bne _020073A0
	add r1, r3, #0xb0
	add r2, r3, #0x4000000
	mov r3, #0
	str r3, [r2, #0xb0]
	add r2, r1, #0x4000000
	ldr r1, _020073A8 ; =0x81400001
	str r3, [r2, #4]
	str r1, [r2, #8]
_020073A0:
	bl FUN_02003dbc
	pop {r4, pc}
	.align 2, 0_020073A8: .word 0x81400001

	arm_func_start FUN_020073ac
FUN_020073ac: ; 0x020073AC
	push {r4, lr}
	mov r4, r0
	bl FUN_02003da8
	mov r1, #0xc
	mul r3, r4, r1
	add r2, r3, #0x4000000
	ldr r1, [r2, #0xb8]
	cmp r4, #0
	bic r1, r1, #0x3a000000
	str r1, [r2, #0xb8]
	ldr r1, [r2, #0xb8]
	bic r1, r1, #0x80000000
	str r1, [r2, #0xb8]
	ldr r1, [r2, #0xb8]
	ldr r1, [r2, #0xb8]
	bne _02007408
	add r1, r3, #0xb0
	mov r3, #0
	str r3, [r2, #0xb0]
	add r2, r1, #0x4000000
	ldr r1, _02007410 ; =0x81400001
	str r3, [r2, #4]
	str r1, [r2, #8]
	arm_func_end FUN_020073ac
_02007408:
	bl FUN_02003dbc
	pop {r4, pc}
	.align 2, 0_02007410: .word 0x81400001

	arm_func_start FUN_02007414
FUN_02007414: ; 0x02007414
	push {r3, lr}
	mov r0, #0
	bl FUN_020073ac
	mov r0, #1
	bl FUN_020073ac
	mov r0, #2
	bl FUN_020073ac
	mov r0, #3
	bl FUN_020073ac
	pop {r3, pc}
	arm_func_end FUN_02007414

	arm_func_start FUN_0200743c
FUN_0200743c: ; 0x0200743C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	mov r4, r1
	mov r7, #0
	mov r6, #0xc
	arm_func_end FUN_0200743c
_02007450:
	cmp r7, r5
	beq _020074B8
	mul r0, r7, r6
	add r0, r0, #0x4000000
	ldr r0, [r0, #0xb8]
	tst r0, #0x80000000
	andne r0, r0, #0x38000000
	cmpne r0, r4
	beq _020074B8
	cmp r0, #0x8000000
	bne _02007484
	cmp r4, #0x10000000
	beq _020074B8
_02007484:
	cmp r0, #0x10000000
	bne _02007494
	cmp r4, #0x8000000
	beq _020074B8
_02007494:
	cmp r0, #0x18000000
	cmpne r0, #0x20000000
	cmpne r0, #0x28000000
	cmpne r0, #0x30000000
	cmpne r0, #0x38000000
	cmpne r0, #0x8000000
	cmpne r0, #0x10000000
	bne _020074B8
	bl FUN_02004160
_020074B8:
	add r7, r7, #1
	cmp r7, #3
	blt _02007450
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020074c8
FUN_020074c8: ; 0x020074C8
	push {r3, lr}
	cmp r0, #0
	popne {r3, pc}
	cmp r3, #0
	and ip, r1, #0xff000000
	beq _020074EC
	cmp r3, #0x800000
	subeq r1, r1, r2
	b _020074F0
	arm_func_end FUN_020074c8
_020074EC:
	add r1, r1, r2
_020074F0:
	cmp ip, #0x4000000
	and r0, r1, #0xff000000
	beq _02007514
	cmp ip, #0x8000000
	bhs _02007514
	cmp r0, #0x4000000
	beq _02007514
	cmp r0, #0x8000000
	poplo {r3, pc}
_02007514:
	bl FUN_02004160
	pop {r3, pc}

	arm_func_start FUN_0200751c
FUN_0200751c: ; 0x0200751C
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	cmp r2, #0
	bne _02007540
	cmp r3, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [sp, #0x18]
	blx r3
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0200751c
_02007540:
	ldr r0, _020075FC ; =FUN_02093d7c
_02007544:
	ldr r5, [r0]
	cmp r5, #0
	bne _02007544
	ldr r5, _02007600 ; =0x04000600
_02007554:
	ldr r0, [r5]
	and r0, r0, #0x7000000
	lsr r0, r0, #0x18
	tst r0, #2
	beq _02007554
	ldr r6, _020075FC ; =FUN_02093d7c
	mov r0, #1
	str r0, [r6]
	str r4, [r6, #4]
	str r1, [r6, #8]
	str r2, [r6, #0xc]
	str r3, [r6, #0x10]
	ldr r7, [sp, #0x18]
	mov r0, r4
	mov r3, #0
	str r7, [r6, #0x14]
	bl FUN_020074c8
	mov r0, r4
	bl FUN_02007350
	bl FUN_02003da8
	ldr r1, [r5]
	mov r7, #0x200000
	and r1, r1, #0xc0000000
	lsr r1, r1, #0x1e
	mov r4, r0
	mov r0, r7
	str r1, [r6, #0x18]
	bl FUN_02000eb8
	str r0, [r6, #0x1c]
	ldr r0, [r5]
	ldr r1, _02007604 ; =FUN_02007608
	bic r0, r0, #0xc0000000
	orr r0, r0, #0x40000000
	str r0, [r5]
	mov r0, r7
	bl FUN_02000e30
	mov r0, r7
	bl FUN_02000ffc
	bl FUN_02007608
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020075FC: .word FUN_02093d7c
_02007600: .word 0x04000600
_02007604: .word FUN_02007608

	arm_func_start FUN_02007608
FUN_02007608: ; 0x02007608
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _020076AC ; =FUN_02093d7c
	ldr r5, [r0, #0xc]
	cmp r5, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r6, _020076AC ; =FUN_02093d7c
	cmp r5, #0x1d8
	ldr r0, [r6, #0xc]
	movhs r5, #0x1d8
	ldr r4, [r6, #8]
	subs r0, r0, r5
	str r0, [r6, #0xc]
	add r0, r4, r5
	str r0, [r6, #8]
	bne _02007680
	mov r7, #0
	ldr r0, [r6, #4]
	ldr r1, _020076B0 ; =FUN_020076bc
	mov r2, r7
	bl FUN_02000f44
	str r7, [sp]
	sub r3, r7, #0x3bc00000
	ldr r0, [r6, #4]
	ldr r2, _020076B4 ; =0x04000400
	mov r1, r4
	orr r3, r3, r5, lsr #2
	bl FUN_01FF845C
	mov r0, #0x200000
	bl FUN_0200105c
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02007608
_02007680:
	mov r0, #0
	str r0, [sp]
	ldr r3, _020076B8 ; =0x84400000
	ldr r0, [r6, #4]
	ldr r2, _020076B4 ; =0x04000400
	mov r1, r4
	orr r3, r3, r5, lsr #2
	bl FUN_01FF845C
	mov r0, #0x200000
	bl FUN_0200105c
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020076AC: .word FUN_02093d7c
_020076B0: .word FUN_020076bc
_020076B4: .word 0x04000400
_020076B8: .word 0x84400000

	arm_func_start FUN_020076bc
FUN_020076bc: ; 0x020076BC
	push {r3, r4, r5, lr}
	mov r5, #0x200000
	mov r0, r5
	bl FUN_0200102c
	ldr r1, _02007714 ; =0x04000600
	ldr r4, _02007718 ; =FUN_02093d7c
	ldr r0, [r1]
	ldr r2, [r4, #0x18]
	bic r0, r0, #0xc0000000
	orr r0, r0, r2, lsl #30
	str r0, [r1]
	ldr r1, [r4, #0x1c]
	mov r0, r5
	bl FUN_02000e30
	mov r0, #0
	str r0, [r4]
	ldr r1, [r4, #0x10]
	ldr r0, [r4, #0x14]
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	blx r1
	pop {r3, r4, r5, pc}
	.align 2, 0_02007714: .word 0x04000600
_02007718: .word FUN_02093d7c
	arm_func_end FUN_020076bc

	arm_func_start FUN_0200771c
FUN_0200771c: ; 0x0200771C
	push {r3, r4, r5, r6, r7, lr}
	movs r4, r2
	mov r6, r0
	mov r5, r1
	bne _02007744
	cmp r3, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [sp, #0x18]
	blx r3
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0200771c
_02007744:
	ldr r0, _020077CC ; =FUN_02093d7c
_02007748:
	ldr r1, [r0]
	cmp r1, #0
	bne _02007748
	ldr r2, _020077CC ; =FUN_02093d7c
	mov r0, #1
	str r0, [r2]
	str r6, [r2, #4]
	ldr r7, [sp, #0x18]
	str r3, [r2, #0x10]
	mov r0, r6
	mov r1, #0x38000000
	str r7, [r2, #0x14]
	bl FUN_0200743c
	mov r7, #0
	mov r0, r6
	mov r1, r5
	mov r2, r4
	mov r3, r7
	bl FUN_020074c8
	mov r0, r6
	bl FUN_02007350
	mov r0, r6
	ldr r1, _020077D0 ; =FUN_020077d8
	mov r2, r7
	bl FUN_02000f44
	mov r0, r6
	mov r1, r5
	str r7, [sp]
	sub r2, r7, #0x3c00000
	orr r3, r2, r4, lsr #2
	ldr r2, _020077D4 ; =0x04000400
	bl FUN_01FF845C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020077CC: .word FUN_02093d7c
_020077D0: .word FUN_020077d8
_020077D4: .word 0x04000400

	arm_func_start FUN_020077d8
FUN_020077d8: ; 0x020077D8
	push {r3, lr}
	ldr r0, _02007800 ; =FUN_02093d7c
	mov r1, #0
	str r1, [r0]
	ldr r1, [r0, #0x10]
	ldr r0, [r0, #0x14]
	cmp r1, #0
	popeq {r3, pc}
	blx r1
	pop {r3, pc}
	.align 2, 0_02007800: .word FUN_02093d7c
	arm_func_end FUN_020077d8

	arm_func_start FUN_02007804
FUN_02007804: ; 0x02007804
	mov r3, #0
	arm_func_end FUN_02007804
_02007808:
	cmp r3, r2
	strhlt r0, [r1, r3]
	addlt r3, r3, #2
	blt _02007808
	bx lr

	arm_func_start FUN_0200781c
FUN_0200781c: ; 0x0200781C
	mov ip, #0
	arm_func_end FUN_0200781c
_02007820:
	cmp ip, r2
	ldrhlt r3, [r0, ip]
	strhlt r3, [r1, ip]
	addlt ip, ip, #2
	blt _02007820
	bx lr

	arm_func_start FUN_02007838
FUN_02007838: ; 0x02007838
	add ip, r1, r2
	arm_func_end FUN_02007838
_0200783C:
	cmp r1, ip
	stmlt r1!, {r0}
	blt _0200783C
	bx lr

	arm_func_start FUN_0200784c
FUN_0200784c: ; 0x0200784C
	add ip, r1, r2
	arm_func_end FUN_0200784c
_02007850:
	cmp r1, ip
	ldmlt r0!, {r2}
	stmlt r1!, {r2}
	blt _02007850
	bx lr

	arm_func_start FUN_02007864
FUN_02007864: ; 0x02007864
	add ip, r0, r2
	arm_func_end FUN_02007864
_02007868:
	cmp r0, ip
	ldmlt r0!, {r2}
	strlt r2, [r1]
	blt _02007868
	bx lr

	arm_func_start FUN_0200787c
FUN_0200787c: ; 0x0200787C
	push {r4, r5, r6, r7, r8, sb}
	add sb, r1, r2
	lsr ip, r2, #5
	add ip, r1, ip, lsl #5
	mov r2, r0
	mov r3, r2
	mov r4, r2
	mov r5, r2
	mov r6, r2
	mov r7, r2
	mov r8, r2
	arm_func_end FUN_0200787c
_020078A8:
	cmp r1, ip
	stmlt r1!, {r0, r2, r3, r4, r5, r6, r7, r8}
	blt _020078A8
_020078B4:
	cmp r1, sb
	stmlt r1!, {r0}
	blt _020078B4
	pop {r4, r5, r6, r7, r8, sb}
	bx lr

	arm_func_start FUN_020078c8
FUN_020078c8: ; 0x020078C8
	push {r4, r5, r6, r7, r8, sb, sl}
	add sl, r1, r2
	lsr ip, r2, #5
	add ip, r1, ip, lsl #5
	arm_func_end FUN_020078c8
_020078D8:
	cmp r1, ip
	ldmlt r0!, {r2, r3, r4, r5, r6, r7, r8, sb}
	stmlt r1!, {r2, r3, r4, r5, r6, r7, r8, sb}
	blt _020078D8
_020078E8:
	cmp r1, sl
	ldmlt r0!, {r2}
	stmlt r1!, {r2}
	blt _020078E8
	pop {r4, r5, r6, r7, r8, sb, sl}
	bx lr

	arm_func_start LAB_02007900
LAB_02007900: ; 0x02007900
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	bx lr
	arm_func_end LAB_02007900

	arm_func_start FUN_0200791c
FUN_0200791c: ; 0x0200791C
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	bx lr
	arm_func_end FUN_0200791c

	arm_func_start FUN_02007938
FUN_02007938: ; 0x02007938
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	bx lr
	arm_func_end FUN_02007938

	arm_func_start FUN_0200795c
FUN_0200795c: ; 0x0200795C
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	stm r1!, {r2, r3, ip}
	ldm r0, {r0, r2, r3, ip}
	stm r1!, {r0, r2, r3, ip}
	bx lr
	arm_func_end FUN_0200795c

	arm_func_start MemWrite
MemWrite: ; 0x02007988
	cmp r2, #0
	bxeq lr
	tst r0, #1
	beq _020079B4
	ldrh ip, [r0, #-1]
	and ip, ip, #0xff
	orr r3, ip, r1, lsl #8
	strh r3, [r0, #-1]
	add r0, r0, #1
	subs r2, r2, #1
	bxeq lr
	arm_func_end MemWrite
_020079B4:
	cmp r2, #2
	blo _020079FC
	orr r1, r1, r1, lsl #8
	tst r0, #2
	beq _020079D4
	strh r1, [r0], #2
	subs r2, r2, #2
	bxeq lr
_020079D4:
	orr r1, r1, r1, lsl #16
	bics r3, r2, #3
	beq _020079F4
	sub r2, r2, r3
	add ip, r3, r0
_020079E8:
	str r1, [r0], #4
	cmp r0, ip
	blo _020079E8
_020079F4:
	tst r2, #2
	strhne r1, [r0], #2
_020079FC:
	tst r2, #1
	bxeq lr
	ldrh r3, [r0]
	and r3, r3, #0xff00
	and r1, r1, #0xff
	orr r1, r1, r3
	strh r1, [r0]
	bx lr

	arm_func_start FUN_02007a1c
FUN_02007a1c: ; 0x02007A1C
	cmp r2, #0
	bxeq lr
	cmp r2, #8
	bgt _02007A5C
	rsb r3, r2, #8
	arm_func_end FUN_02007a1c

	arm_func_start switchD
switchD: ; 0x02007A30
	add pc, pc, r3, lsl #2
	mov r0, r0
	arm_func_end switchD

	arm_func_start caseD_8
caseD_8: ; 0x02007A38
	strb r1, [r0], #1
	arm_func_end caseD_8

	arm_func_start caseD_7
caseD_7: ; 0x02007A3C
	strb r1, [r0], #1
	arm_func_end caseD_7

	arm_func_start caseD_6
caseD_6: ; 0x02007A40
	strb r1, [r0], #1
	arm_func_end caseD_6

	arm_func_start caseD_5
caseD_5: ; 0x02007A44
	strb r1, [r0], #1
	arm_func_end caseD_5

	arm_func_start caseD_4
caseD_4: ; 0x02007A48
	strb r1, [r0], #1
	arm_func_end caseD_4

	arm_func_start caseD_3
caseD_3: ; 0x02007A4C
	strb r1, [r0], #1
	arm_func_end caseD_3

	arm_func_start caseD_2
caseD_2: ; 0x02007A50
	strb r1, [r0], #1
	arm_func_end caseD_2

	arm_func_start caseD_1
caseD_1: ; 0x02007A54
	strb r1, [r0], #1
	arm_func_end caseD_1

	arm_func_start caseD_0
caseD_0: ; 0x02007A58
	bx lr
	arm_func_end caseD_0
_02007A5C:
	orr r1, r1, r1, lsl #8
	orr r1, r1, r1, lsl #16
	tst r0, #1
	subne r2, r2, #1
	strbne r1, [r0], #1
	tst r0, #2
	subne r2, r2, #2
	strhne r1, [r0], #2
	tst r0, #4
	subne r2, r2, #4
	strne r1, [r0], #4
	cmp r2, #0x20
	blt _02007AC8
	push {r4, r5, r6, r7, r8, sb, sl}
	mov r4, r1
	mov r5, r1
	mov r6, r1
	mov r7, r1
	mov r8, r1
	mov sb, r1
	mov sl, r1
	subs r2, r2, #0x20
_02007AB4:
	stmge r0!, {r1, r4, r5, r6, r7, r8, sb, sl}
	subsge r2, r2, #0x20
	bge _02007AB4
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl}
_02007AC8:
	cmp r2, #4
	blt _02007AE4
	subs r2, r2, #4
_02007AD4:
	strge r1, [r0], #4
	subs r2, r2, #4
	bge _02007AD4
	add r2, r2, #4
_02007AE4:
	subs r2, r2, #1
	strbge r1, [r0], #1
	subsge r2, r2, #1
	strbge r1, [r0], #1
	subsge r2, r2, #1
	strbge r1, [r0], #1
	bx lr

	arm_func_start _memcpy
_memcpy: ; 0x02007B00
	cmp r2, #0
	bxeq lr
	tst r1, #1
	beq _02007B40
	ldrh ip, [r1, #-1]
	and ip, ip, #0xff
	tst r0, #1
	ldrhne r3, [r0, #-1]
	lsrne r3, r3, #8
	ldrheq r3, [r0]
	orr r3, ip, r3, lsl #8
	strh r3, [r1, #-1]
	add r0, r0, #1
	add r1, r1, #1
	subs r2, r2, #1
	bxeq lr
	arm_func_end _memcpy
_02007B40:
	eor ip, r1, r0
	tst ip, #1
	beq _02007B94
	bic r0, r0, #1
	ldrh ip, [r0], #2
	lsr r3, ip, #8
	subs r2, r2, #2
	blo _02007B78
_02007B60:
	ldrh ip, [r0], #2
	orr ip, r3, ip, lsl #8
	strh ip, [r1], #2
	lsr r3, ip, #0x10
	subs r2, r2, #2
	bhs _02007B60
_02007B78:
	tst r2, #1
	bxeq lr
	ldrh ip, [r1]
	and ip, ip, #0xff00
	orr ip, ip, r3
	strh ip, [r1]
	bx lr
_02007B94:
	tst ip, #2
	beq _02007BC0
	bics r3, r2, #1
	beq _02007C0C
	sub r2, r2, r3
	add ip, r3, r1
_02007BAC:
	ldrh r3, [r0], #2
	strh r3, [r1], #2
	cmp r1, ip
	blo _02007BAC
	b _02007C0C
_02007BC0:
	cmp r2, #2
	blo _02007C0C
	tst r1, #2
	beq _02007BE0
	ldrh r3, [r0], #2
	strh r3, [r1], #2
	subs r2, r2, #2
	bxeq lr
_02007BE0:
	bics r3, r2, #3
	beq _02007C00
	sub r2, r2, r3
	add ip, r3, r1
_02007BF0:
	ldr r3, [r0], #4
	str r3, [r1], #4
	cmp r1, ip
	blo _02007BF0
_02007C00:
	tst r2, #2
	ldrhne r3, [r0], #2
	strhne r3, [r1], #2
_02007C0C:
	tst r2, #1
	bxeq lr
	ldrh r2, [r1]
	ldrh r0, [r0]
	and r2, r2, #0xff00
	and r0, r0, #0xff
	orr r0, r2, r0
	strh r0, [r1]
	bx lr

	arm_func_start FUN_02007c30
FUN_02007c30: ; 0x02007C30
	add ip, r0, r2
	cmp r0, ip
	bhs _02007C58
	arm_func_end FUN_02007c30
_02007C3C:
	ldrb r3, [r0], #1
	ldrb r2, [r1], #1
	subs r2, r3, r2
	movne r0, r2
	bxne lr
	cmp r0, ip
	blo _02007C3C
_02007C58:
	mov r0, #0
	bx lr
_02007C60:
	cmp r2, #8
	bgt _02007CB8
	rsb r3, r2, #8

	arm_func_start switchD
switchD: ; 0x02007C6C
	add pc, pc, r3, lsl #3
	mov r0, r0
	arm_func_end switchD

	arm_func_start caseD_8
caseD_8: ; 0x02007C74
	ldrb r3, [r0], #1
	strb r3, [r1], #1
	arm_func_end caseD_8

	arm_func_start caseD_7
caseD_7: ; 0x02007C7C
	ldrb r3, [r0], #1
	strb r3, [r1], #1
	arm_func_end caseD_7

	arm_func_start caseD_6
caseD_6: ; 0x02007C84
	ldrb r3, [r0], #1
	strb r3, [r1], #1
	arm_func_end caseD_6

	arm_func_start caseD_5
caseD_5: ; 0x02007C8C
	ldrb r3, [r0], #1
	strb r3, [r1], #1
	arm_func_end caseD_5

	arm_func_start caseD_4
caseD_4: ; 0x02007C94
	ldrb r3, [r0], #1
	strb r3, [r1], #1
	arm_func_end caseD_4

	arm_func_start caseD_3
caseD_3: ; 0x02007C9C
	ldrb r3, [r0], #1
	strb r3, [r1], #1
	arm_func_end caseD_3

	arm_func_start caseD_2
caseD_2: ; 0x02007CA4
	ldrb r3, [r0], #1
	strb r3, [r1], #1
	arm_func_end caseD_2

	arm_func_start caseD_1
caseD_1: ; 0x02007CAC
	ldrb r3, [r0], #1
	strb r3, [r1], #1
	arm_func_end caseD_1

	arm_func_start caseD_0
caseD_0: ; 0x02007CB4
	bx lr
	arm_func_end caseD_0
_02007CB8:
	tst r0, #1
	subne r2, r2, #1
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	tst r0, #2
	subne r2, r2, #2
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	and r3, r1, #3
	bic r1, r1, #3
	cmp r3, #0
	beq _02007D04
	cmp r3, #1
	beq _02007D40
	cmp r3, #2
	beq _02007DD8
	b _02007E70
_02007D04:
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #0x20
_02007D0C:
	ldmge r0!, {r4, r5, r6, r7, r8, sb, sl, lr}
	stmge r1!, {r4, r5, r6, r7, r8, sb, sl, lr}
	subsge r2, r2, #0x20
	bge _02007D0C
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #4
_02007D28:
	ldrge r3, [r0], #4
	strge r3, [r1], #4
	subsge r2, r2, #4
	bge _02007D28
	add r2, r2, #4
	b _02007F08
_02007D40:
	ldr ip, [r1]
	lsl ip, ip, #0x18
	lsr ip, ip, #0x18
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #0x20
_02007D54:
	ldmge r0!, {r4, r5, r6, r7, r8, sb, sl, lr}
	lsrge r3, r4, #0x18
	orrge r4, ip, r4, lsl #8
	lsrge ip, r5, #0x18
	orrge r5, r3, r5, lsl #8
	lsrge r3, r6, #0x18
	orrge r6, ip, r6, lsl #8
	lsrge ip, r7, #0x18
	orrge r7, r3, r7, lsl #8
	lsrge r3, r8, #0x18
	orrge r8, ip, r8, lsl #8
	lsrge ip, sb, #0x18
	orrge sb, r3, sb, lsl #8
	lsrge r3, sl, #0x18
	orrge sl, ip, sl, lsl #8
	lsrge ip, lr, #0x18
	orrge lr, r3, lr, lsl #8
	stmge r1!, {r4, r5, r6, r7, r8, sb, sl, lr}
	subsge r2, r2, #0x20
	bge _02007D54
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #4
_02007DB0:
	ldrge r3, [r0], #4
	orrge ip, ip, r3, lsl #8
	strge ip, [r1], #4
	lsrge ip, r3, #0x18
	subsge r2, r2, #4
	bge _02007DB0
	add r2, r2, #4
	sub r0, r0, #1
	add r2, r2, #1
	b _02007F08
_02007DD8:
	ldr ip, [r1]
	lsl ip, ip, #0x10
	lsr ip, ip, #0x10
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #0x20
_02007DEC:
	ldmge r0!, {r4, r5, r6, r7, r8, sb, sl, lr}
	lsrge r3, r4, #0x10
	orrge r4, ip, r4, lsl #16
	lsrge ip, r5, #0x10
	orrge r5, r3, r5, lsl #16
	lsrge r3, r6, #0x10
	orrge r6, ip, r6, lsl #16
	lsrge ip, r7, #0x10
	orrge r7, r3, r7, lsl #16
	lsrge r3, r8, #0x10
	orrge r8, ip, r8, lsl #16
	lsrge ip, sb, #0x10
	orrge sb, r3, sb, lsl #16
	lsrge r3, sl, #0x10
	orrge sl, ip, sl, lsl #16
	lsrge ip, lr, #0x10
	orrge lr, r3, lr, lsl #16
	stmge r1!, {r4, r5, r6, r7, r8, sb, sl, lr}
	subsge r2, r2, #0x20
	bge _02007DEC
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #4
_02007E48:
	ldrge r3, [r0], #4
	orrge ip, ip, r3, lsl #16
	strge ip, [r1], #4
	lsrge ip, r3, #0x10
	subsge r2, r2, #4
	bge _02007E48
	add r2, r2, #4
	sub r0, r0, #2
	add r2, r2, #2
	b _02007F08
_02007E70:
	ldr ip, [r1]
	lsl ip, ip, #8
	lsr ip, ip, #8
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #0x20
_02007E84:
	ldmge r0!, {r4, r5, r6, r7, r8, sb, sl, lr}
	lsrge r3, r4, #8
	orrge r4, ip, r4, lsl #24
	lsrge ip, r5, #8
	orrge r5, r3, r5, lsl #24
	lsrge r3, r6, #8
	orrge r6, ip, r6, lsl #24
	lsrge ip, r7, #8
	orrge r7, r3, r7, lsl #24
	lsrge r3, r8, #8
	orrge r8, ip, r8, lsl #24
	lsrge ip, sb, #8
	orrge sb, r3, sb, lsl #24
	lsrge r3, sl, #8
	orrge sl, ip, sl, lsl #24
	lsrge ip, lr, #8
	orrge lr, r3, lr, lsl #24
	stmge r1!, {r4, r5, r6, r7, r8, sb, sl, lr}
	subsge r2, r2, #0x20
	bge _02007E84
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #4
_02007EE0:
	ldrge r3, [r0], #4
	orrge ip, ip, r3, lsl #24
	strge ip, [r1], #4
	lsrge ip, r3, #8
	subsge r2, r2, #4
	bge _02007EE0
	add r2, r2, #4
	sub r0, r0, #3
	add r2, r2, #3
	b _02007F08
_02007F08:
	tst r2, #4
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	tst r2, #2
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	tst r2, #1
	ldrbne r3, [r0], #1
	strbne r3, [r1], #1
	bx lr

	arm_func_start FUN_02007f50
FUN_02007f50: ; 0x02007F50
	cmp r2, #0
	subsne r3, r0, r1
	bxeq lr
	bgt _02007C60
	add r1, r1, r2
	add r0, r0, r2
	cmp r2, #8
	bgt _02007FC0
	rsb r3, r2, #8
	arm_func_end FUN_02007f50

	arm_func_start switchD
switchD: ; 0x02007F74
	add pc, pc, r3, lsl #3
	mov r0, r0
	arm_func_end switchD

	arm_func_start caseD_8
caseD_8: ; 0x02007F7C
	ldrb r3, [r0, #-1]!
	strb r3, [r1, #-1]!
	arm_func_end caseD_8

	arm_func_start caseD_7
caseD_7: ; 0x02007F84
	ldrb r3, [r0, #-1]!
	strb r3, [r1, #-1]!
	arm_func_end caseD_7

	arm_func_start caseD_6
caseD_6: ; 0x02007F8C
	ldrb r3, [r0, #-1]!
	strb r3, [r1, #-1]!
	arm_func_end caseD_6

	arm_func_start caseD_5
caseD_5: ; 0x02007F94
	ldrb r3, [r0, #-1]!
	strb r3, [r1, #-1]!
	arm_func_end caseD_5

	arm_func_start caseD_4
caseD_4: ; 0x02007F9C
	ldrb r3, [r0, #-1]!
	strb r3, [r1, #-1]!
	arm_func_end caseD_4

	arm_func_start caseD_3
caseD_3: ; 0x02007FA4
	ldrb r3, [r0, #-1]!
	strb r3, [r1, #-1]!
	arm_func_end caseD_3

	arm_func_start caseD_2
caseD_2: ; 0x02007FAC
	ldrb r3, [r0, #-1]!
	strb r3, [r1, #-1]!
	arm_func_end caseD_2

	arm_func_start caseD_1
caseD_1: ; 0x02007FB4
	ldrb r3, [r0, #-1]!
	strb r3, [r1, #-1]!
	arm_func_end caseD_1

	arm_func_start caseD_0
caseD_0: ; 0x02007FBC
	bx lr
	arm_func_end caseD_0
_02007FC0:
	tst r0, #2
	subne r2, r2, #2
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	tst r0, #1
	subne r2, r2, #1
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	and r3, r1, #3
	bic r1, r1, #3
	cmp r3, #0
	beq _0200800C
	cmp r3, #1
	beq _02008048
	cmp r3, #2
	beq _020080E4
	b _02008180
_0200800C:
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #0x20
_02008014:
	ldmdbge r0!, {r4, r5, r6, r7, r8, sb, sl, lr}
	stmdbge r1!, {r4, r5, r6, r7, r8, sb, sl, lr}
	subsge r2, r2, #0x20
	bge _02008014
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #4
_02008030:
	ldrge r3, [r0, #-4]!
	strge r3, [r1, #-4]!
	subsge r2, r2, #4
	bge _02008030
	add r2, r2, #4
	b _0200821C
_02008048:
	ldr ip, [r1]
	lsr ip, ip, #8
	lsl ip, ip, #8
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #0x20
_0200805C:
	ldmdbge r0!, {r4, r5, r6, r7, r8, sb, sl, lr}
	lslge r3, lr, #8
	orrge lr, ip, lr, lsr #24
	lslge ip, sl, #8
	orrge sl, r3, sl, lsr #24
	lslge r3, sb, #8
	orrge sb, ip, sb, lsr #24
	lslge ip, r8, #8
	orrge r8, r3, r8, lsr #24
	lslge r3, r7, #8
	orrge r7, ip, r7, lsr #24
	lslge ip, r6, #8
	orrge r6, r3, r6, lsr #24
	lslge r3, r5, #8
	orrge r5, ip, r5, lsr #24
	lslge ip, r4, #8
	orrge r4, r3, r4, lsr #24
	stmdage r1!, {r4, r5, r6, r7, r8, sb, sl, lr}
	subsge r2, r2, #0x20
	bge _0200805C
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #4
_020080B8:
	ldrge r3, [r0, #-4]!
	orrge ip, ip, r3, lsr #24
	strge ip, [r1], #-4
	lslge ip, r3, #8
	subsge r2, r2, #4
	bge _020080B8
	add r2, r2, #4
	add r1, r1, #4
	add r0, r0, #3
	add r2, r2, #3
	b _0200821C
_020080E4:
	ldr ip, [r1]
	lsr ip, ip, #0x10
	lsl ip, ip, #0x10
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #0x20
_020080F8:
	ldmdbge r0!, {r4, r5, r6, r7, r8, sb, sl, lr}
	lslge r3, lr, #0x10
	orrge lr, ip, lr, lsr #16
	lslge ip, sl, #0x10
	orrge sl, r3, sl, lsr #16
	lslge r3, sb, #0x10
	orrge sb, ip, sb, lsr #16
	lslge ip, r8, #0x10
	orrge r8, r3, r8, lsr #16
	lslge r3, r7, #0x10
	orrge r7, ip, r7, lsr #16
	lslge ip, r6, #0x10
	orrge r6, r3, r6, lsr #16
	lslge r3, r5, #0x10
	orrge r5, ip, r5, lsr #16
	lslge ip, r4, #0x10
	orrge r4, r3, r4, lsr #16
	stmdage r1!, {r4, r5, r6, r7, r8, sb, sl, lr}
	subsge r2, r2, #0x20
	bge _020080F8
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #4
_02008154:
	ldrge r3, [r0, #-4]!
	orrge ip, ip, r3, lsr #16
	strge ip, [r1], #-4
	lslge ip, r3, #0x10
	subsge r2, r2, #4
	bge _02008154
	add r2, r2, #4
	add r1, r1, #4
	add r0, r0, #2
	add r2, r2, #2
	b _0200821C
_02008180:
	ldr ip, [r1]
	lsr ip, ip, #0x18
	lsl ip, ip, #0x18
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #0x20
_02008194:
	ldmdbge r0!, {r4, r5, r6, r7, r8, sb, sl, lr}
	lslge r3, lr, #0x18
	orrge lr, ip, lr, lsr #8
	lslge ip, sl, #0x18
	orrge sl, r3, sl, lsr #8
	lslge r3, sb, #0x18
	orrge sb, ip, sb, lsr #8
	lslge ip, r8, #0x18
	orrge r8, r3, r8, lsr #8
	lslge r3, r7, #0x18
	orrge r7, ip, r7, lsr #8
	lslge ip, r6, #0x18
	orrge r6, r3, r6, lsr #8
	lslge r3, r5, #0x18
	orrge r5, ip, r5, lsr #8
	lslge ip, r4, #0x18
	orrge r4, r3, r4, lsr #8
	stmdage r1!, {r4, r5, r6, r7, r8, sb, sl, lr}
	subsge r2, r2, #0x20
	bge _02008194
	add r2, r2, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, lr}
	subs r2, r2, #4
_020081F0:
	ldrge r3, [r0, #-4]!
	orrge ip, ip, r3, lsr #8
	strge ip, [r1], #-4
	lslge ip, r3, #0x18
	subsge r2, r2, #4
	bge _020081F0
	add r2, r2, #4
	add r1, r1, #4
	add r0, r0, #1
	add r2, r2, #1
	b _0200821C
_0200821C:
	tst r2, #4
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	tst r2, #2
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	tst r2, #1
	ldrbne r3, [r0, #-1]!
	strbne r3, [r1, #-1]!
	bx lr

	thumb_func_start FUN_02008264
FUN_02008264: ; 0x02008264
	movs r1, #0
	movs r2, #0
	movs r3, #0
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r2, r3}
	bx lr
	movs r0, r0
	thumb_func_end FUN_02008264

	arm_func_start FUN_02008274
FUN_02008274: ; 0x02008274
	.word 0xE1010090
	bx lr
	arm_func_end FUN_02008274

	arm_func_start LzPkbDecompression
LzPkbDecompression: ; 0x0200827C
	push {r4, r5, r6, r7, lr}
	ldr r5, [r0], #4
	lsr r2, r5, #8
	mov r7, #0
	tst r5, #0xf
	movne r7, #1
	arm_func_end LzPkbDecompression
_02008294:
	cmp r2, #0
	ble _02008354
	ldrb lr, [r0], #1
	mov r4, #8
_020082A4:
	subs r4, r4, #1
	blt _02008294
	tst lr, #0x80
	bne _020082C8
	ldrb r6, [r0], #1
	.word 0xE1416096
	add r1, r1, #1
	sub r2, r2, #1
	b _02008344
_020082C8:
	ldrb r5, [r0]
	cmp r7, #0
	moveq r6, #3
	beq _02008310
	tst r5, #0xe0
	movne r6, #1
	bne _02008310
	add r0, r0, #1
	and r6, r5, #0xf
	lsl r6, r6, #4
	tst r5, #0x10
	beq _02008308
	lsl r6, r6, #8
	ldrb r5, [r0], #1
	add r6, r6, r5, lsl #4
	add r6, r6, #0x100
_02008308:
	add r6, r6, #0x11
	ldrb r5, [r0]
_02008310:
	add r3, r6, r5, asr #4
	add r0, r0, #1
	and r5, r5, #0xf
	lsl ip, r5, #8
	ldrb r6, [r0], #1
	orr r5, r6, ip
	add ip, r5, #1
	sub r2, r2, r3
_02008330:
	ldrb r5, [r1, -ip]
	.word 0xE1415095
	add r1, r1, #1
	subs r3, r3, #1
	bgt _02008330
_02008344:
	cmp r2, #0
	lslgt lr, lr, #1
	bgt _020082A4
	b _02008294
_02008354:
	pop {r4, r5, r6, r7, lr}
	bx lr

	arm_func_start UnkPkbDecompression
UnkPkbDecompression: ; 0x0200835C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #4
	add r2, r0, #4
	add r7, r2, #1
	ldrb sl, [r0]
	and r4, sl, #0xf
	mov r3, #0
	mov lr, #0
	and sl, r4, #7
	add fp, sl, #4
	str fp, [sp]
	ldr sl, [r0]
	lsr ip, sl, #8
	ldrb sl, [r2]
	add sl, sl, #1
	add r0, r2, sl, lsl #1
	mov r2, r7
	arm_func_end UnkPkbDecompression
_020083A0:
	cmp ip, #0
	ble _02008428
	mov r8, #0x20
	ldr r5, [r0], #4
_020083B0:
	subs r8, r8, #1
	blt _020083A0
	mov sl, #1
	and sb, sl, r5, lsr #31
	ldrb r6, [r2]
	lsl r6, r6, sb
	lsr sl, r2, #1
	lsl sl, sl, #1
	ldrb fp, [r2]
	and fp, fp, #0x3f
	add fp, fp, #1
	add sl, sl, fp, lsl #1
	add r2, sl, sb
	tst r6, #0x80
	beq _02008418
	lsr r3, r3, r4
	ldrb sl, [r2]
	rsb fp, r4, #0x20
	orr r3, r3, sl, lsl fp
	mov r2, r7
	add lr, lr, #1
	ldr fp, [sp]
	cmp lr, fp
	streq r3, [r1], #4
	subeq ip, ip, #4
	moveq lr, #0
_02008418:
	cmp ip, #0
	lslgt r5, r5, #1
	bgt _020083B0
	b _020083A0
_02008428:
	add sp, sp, #4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bx lr

	arm_func_start FUN_02008434
FUN_02008434: ; 0x02008434
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	mov r6, r0
	mov r7, r3
	mvn r1, #0
	mov r4, r2
	bl FUN_0200743c
	mov r0, r6
	mov r1, r5
	mov r2, r7
	mov r3, #0x1000000
	bl FUN_020074c8
	cmp r7, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r6, r6, lsl #1
	add r0, r0, #2
	lsl r0, r0, #2
	add r0, r0, #0xb0
	add r1, r0, #0x4000000
	arm_func_end FUN_02008434
_02008480:
	ldr r0, [r1]
	tst r0, #0x80000000
	bne _02008480
	ldr r3, _020084AC ; =0xAF000001
	mov ip, #0
	mov r0, r6
	mov r1, r5
	mov r2, r4
	str ip, [sp]
	bl FUN_01FF845C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020084AC: .word 0xAF000001

	arm_func_start FUN_020084b0
FUN_020084b0: ; 0x020084B0
	push {r3, lr}
	mov r0, #3
	bl FUN_02006f6c
	mov r0, #0
	bl FUN_020073ac
	pop {r3, pc}
	arm_func_end FUN_020084b0

	arm_func_start FUN_020084c8
FUN_020084c8: ; 0x020084C8
	mov r1, #0
	mov r2, #0x1000
	mov r3, #0
	stm r0!, {r2, r3}
	stm r0!, {r1, r2}
	bx lr
	arm_func_end FUN_020084c8

	arm_func_start FUN_020084e0
FUN_020084e0: ; 0x020084E0
	mov r2, #0x1000
	str r2, [r0, #0x20]
	mov r3, #0
	stm r0!, {r2, r3}
	mov r1, #0
	stm r0!, {r1, r3}
	stm r0!, {r2, r3}
	stm r0!, {r1, r3}
	bx lr
	arm_func_end FUN_020084e0

	arm_func_start FUN_02008504
FUN_02008504: ; 0x02008504
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r6, [r0]
	ldr r5, [r0, #4]
	smull r8, r7, r2, r6
	ldr r4, [r0, #8]
	ldr ip, [r0, #0xc]
	smull fp, r4, r2, r4
	str r4, [sp]
	ldr sl, [r0, #0x10]
	smull r6, r5, r2, r5
	smull r4, lr, r3, ip
	ldr sb, [r0, #0x14]
	smull ip, r2, r3, sl
	smull sl, sb, r3, sb
	lsr r3, r8, #0xc
	orr r3, r3, r7, lsl #20
	lsr r7, r6, #0xc
	orr r7, r7, r5, lsl #20
	lsr r8, ip, #0xc
	orr r8, r8, r2, lsl #20
	str r3, [r1]
	lsr r3, r4, #0xc
	str r7, [r1, #4]
	lsr r4, sl, #0xc
	orr r3, r3, lr, lsl #20
	orr r4, r4, sb, lsl #20
	ldr r5, [sp]
	lsr r6, fp, #0xc
	orr r6, r6, r5, lsl #20
	ldr r2, [sp, #0x28]
	ldr r7, [r0, #0x18]
	ldr r5, [r0, #0x1c]
	str r6, [r1, #8]
	ldr r0, [r0, #0x20]
	str r3, [r1, #0xc]
	smull sb, r7, r2, r7
	str r8, [r1, #0x10]
	lsr r8, sb, #0xc
	orr r8, r8, r7, lsl #20
	smull r6, r5, r2, r5
	smull r3, r0, r2, r0
	str r4, [r1, #0x14]
	lsr r4, r6, #0xc
	lsr r2, r3, #0xc
	orr r4, r4, r5, lsl #20
	orr r2, r2, r0, lsl #20
	str r8, [r1, #0x18]
	str r4, [r1, #0x1c]
	str r2, [r1, #0x20]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02008504

	arm_func_start FUN_020085cc
FUN_020085cc: ; 0x020085CC
	mov r2, #0x1000
	mov r3, #0
	stm r0!, {r2, r3}
	mov r1, #0
	stm r0!, {r1, r3}
	stm r0!, {r2, r3}
	stm r0!, {r1, r3}
	stm r0!, {r2, r3}
	stm r0!, {r1, r3}
	bx lr
	arm_func_end FUN_020085cc

	arm_func_start FUN_020085f4
FUN_020085f4: ; 0x020085F4
	stmdb sp!, {r4}
	mov ip, #0
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4, ip}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4, ip}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4, ip}
	mov ip, #0x1000
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4, ip}
	ldm sp!, {r4}
	bx lr
	arm_func_end FUN_020085f4

	arm_func_start FUN_02008628
FUN_02008628: ; 0x02008628
	push {r3, r4, r5, lr}
	ldr ip, [sp, #0x10]
	mov r5, r0
	mov r4, r1
	str ip, [sp]
	bl FUN_02008504
	ldr r2, [r5, #0x24]
	ldr r1, [r5, #0x28]
	ldr r0, [r5, #0x2c]
	str r2, [r4, #0x24]
	str r1, [r4, #0x28]
	str r0, [r4, #0x2c]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02008628

	thumb_func_start FUN_0200865c
FUN_0200865c: ; 0x0200865C
	str r1, [r0, #0x14]
	rsbs r1, r1, #0
	str r1, [r0, #0x1c]
	movs r1, #1
	lsls r1, r1, #0xc
	stm r0!, {r1}
	movs r3, #0
	movs r1, #0
	stm r0!, {r1, r3}
	stm r0!, {r1, r2}
	str r1, [r0, #4]
	adds r0, #0xc
	stm r0!, {r2, r3}
	stm r0!, {r1, r3}
	bx lr
	movs r0, r0
	thumb_func_end FUN_0200865c

	thumb_func_start FUN_0200867c
FUN_0200867c: ; 0x0200867C
	str r1, [r0, #0x18]
	movs r3, #0
	stm r0!, {r2, r3}
	rsbs r1, r1, #0
	stm r0!, {r1, r3}
	movs r1, #1
	lsls r1, r1, #0xc
	stm r0!, {r1, r3}
	thumb_func_end FUN_0200867c
_0200868C:
	.byte 0x04, 0x30, 0x00, 0x21
	.byte 0x0E, 0xC0, 0x0A, 0xC0, 0x70, 0x47, 0x00, 0x00

	thumb_func_start FUN_02008698
FUN_02008698: ; 0x02008698
	stm r0!, {r2}
	movs r3, #0
	stm r0!, {r1, r3}
	rsbs r1, r1, #0
	thumb_func_end FUN_02008698
_020086A0:
	.byte 0x0E, 0xC0, 0x00, 0x21, 0x00, 0x22, 0x01, 0x23, 0x1B, 0x03, 0x0E, 0xC0, 0x00, 0x23, 0x0E, 0xC0
	.byte 0x70, 0x47, 0x00, 0x00

	arm_func_start FUN_020086b4
FUN_020086b4: ; 0x020086B4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x68
	mov sl, r0
	ldr r0, [sl, #0x14]
	ldr r3, [sl, #0x18]
	ldr r2, [sl, #0xc]
	ldr r6, [sl, #0x20]
	add sb, sp, #0x38
	cmp sl, r1
	str r1, [sp]
	movne sb, r1
	smull fp, r8, r2, r6
	smull r7, r1, r0, r3
	subs r7, fp, r7
	sbc ip, r8, r1
	ldr r4, [sl, #0x10]
	ldr r5, [sl, #0x1c]
	adds r1, r7, #0x800
	smull fp, r8, r4, r6
	smull r7, r6, r0, r5
	adc r0, ip, #0
	subs r7, fp, r7
	sbc r6, r8, r6
	lsr r8, r1, #0xc
	orr r8, r8, r0, lsl #20
	smull r1, r0, r2, r5
	adds r7, r7, #0x800
	smull r5, r3, r4, r3
	adc r2, r6, #0
	lsr r7, r7, #0xc
	orr r7, r7, r2, lsl #20
	subs r1, r1, r5
	sbc r5, r0, r3
	ldr r2, [sl]
	adds r6, r1, #0x800
	ldr fp, [sl, #4]
	smull r4, r3, r2, r7
	smull r1, r0, fp, r8
	adc r2, r5, #0
	lsr r6, r6, #0xc
	orr r6, r6, r2, lsl #20
	subs r2, r4, r1
	ldr r1, [sl, #8]
	sbc r0, r3, r0
	smlal r2, r0, r1, r6
	adds r1, r2, #0x800
	adc r2, r0, #0
	lsr r0, r1, #0xc
	asr r1, r8, #0x1f
	str r1, [sp, #4]
	asr r1, r7, #0x1f
	str r1, [sp, #8]
	asr r1, r6, #0x1f
	str r1, [sp, #0xc]
	orrs r0, r0, r2, lsl #20
	mov r1, #0
	addeq sp, sp, #0x68
	subeq r0, r1, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_02009638
	ldr r1, [sl, #8]
	ldr r2, [sl, #0x1c]
	ldr fp, [sl, #0x10]
	smull r0, r4, r2, r1
	smull r3, r2, fp, r1
	ldr r5, [sl, #0x18]
	str r2, [sp, #0x18]
	str r3, [sp, #0x14]
	smull r3, r2, r5, r1
	str r2, [sp, #0x20]
	ldr r2, [sl, #0x20]
	str r3, [sp, #0x1c]
	str r2, [sp, #0x10]
	ldr r5, [sp, #0x10]
	ldm sl, {r3, lr}
	smull ip, r5, lr, r5
	subs r0, ip, r0
	ldr r2, [sl, #0xc]
	sbc r4, r5, r4
	smull r1, r5, r2, r1
	str r5, [sp, #0x28]
	lsr r5, r0, #0xc
	ldr fp, [sl, #0x14]
	orr r5, r5, r4, lsl #20
	smull r4, r2, lr, fp
	ldr r0, [sp, #0x14]
	subs r4, r4, r0
	ldr r0, [sp, #0x18]
	lsr r4, r4, #0xc
	sbc r0, r2, r0
	orr r4, r4, r0, lsl #20
	ldr r0, [sp, #0x10]
	ldr r2, [sp, #0x1c]
	smull ip, r0, r3, r0
	subs r2, ip, r2
	ldr ip, [sp, #0x20]
	sbc r0, r0, ip
	smull ip, fp, r3, fp
	ldr r3, [sp, #0x28]
	subs r1, ip, r1
	sbc r3, fp, r3
	lsr fp, r2, #0xc
	orr fp, fp, r0, lsl #20
	lsr r0, r1, #0xc
	orr r0, r0, r3, lsl #20
	str r0, [sp, #0x24]
	bl FUN_02009604
	smull r2, r1, r0, r5
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	rsb r5, r2, #0
	smull r2, r1, r0, r4
	lsr r4, r2, #0xc
	orr r4, r4, r1, lsl #20
	smull r2, r1, r0, fp
	lsr r3, r2, #0xc
	orr r3, r3, r1, lsl #20
	ldr r1, [sp, #0x24]
	umull lr, fp, r0, r7
	smull r2, r1, r0, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	ldr r1, [sp, #8]
	asr ip, r0, #0x1f
	mla fp, r0, r1, fp
	mla fp, ip, r7, fp
	lsr r1, lr, #0xc
	orr r1, r1, fp, lsl #20
	stm sb, {r1, r5}
	str r1, [sp, #0x34]
	ldr r1, [sp, #4]
	umull fp, r7, r0, r8
	mla r7, r0, r1, r7
	mla r7, ip, r8, r7
	lsr r1, fp, #0xc
	orr r1, r1, r7, lsl #20
	rsb r1, r1, #0
	str r4, [sb, #8]
	str r1, [sb, #0xc]
	str r1, [sp, #0x2c]
	umull r8, r7, r0, r6
	ldr r1, [sp, #0xc]
	rsb r2, r2, #0
	mla r7, r0, r1, r7
	str r3, [sb, #0x10]
	mla r7, ip, r6, r7
	lsr fp, r8, #0xc
	str r2, [sb, #0x14]
	orr fp, fp, r7, lsl #20
	str fp, [sb, #0x18]
	ldr r7, [sl]
	ldr r1, [sl, #0x1c]
	ldr r8, [sl, #0x18]
	smull r6, r1, r7, r1
	ldr r7, [sl, #4]
	smull ip, r7, r8, r7
	subs r6, r6, ip
	sbc r1, r1, r7
	lsr r6, r6, #0xc
	orr r6, r6, r1, lsl #20
	smull r6, r1, r0, r6
	lsr r6, r6, #0xc
	orr r6, r6, r1, lsl #20
	rsb r1, r6, #0
	str r1, [sb, #0x1c]
	str r1, [sp, #0x30]
	ldr r7, [sl]
	ldr r1, [sl, #0x10]
	ldr r8, [sl, #0xc]
	smull r6, r1, r7, r1
	ldr r7, [sl, #4]
	smull ip, r7, r8, r7
	subs r6, r6, ip
	sbc r1, r1, r7
	lsr r6, r6, #0xc
	orr r6, r6, r1, lsl #20
	smull r6, r1, r0, r6
	lsr r8, r6, #0xc
	orr r8, r8, r1, lsl #20
	str r8, [sb, #0x20]
	add r0, sp, #0x38
	ldr r6, [sl, #0x28]
	ldr ip, [sp, #0x2c]
	ldr lr, [sl, #0x24]
	smull r7, r6, ip, r6
	ldr ip, [sp, #0x34]
	ldr r1, [sl, #0x2c]
	smlal r7, r6, ip, lr
	smlal r7, r6, fp, r1
	lsr r1, r7, #0xc
	orr r1, r1, r6, lsl #20
	rsb r1, r1, #0
	str r1, [sb, #0x24]
	ldr r1, [sl, #0x28]
	ldr r6, [sl, #0x24]
	smull ip, fp, r3, r1
	smlal ip, fp, r5, r6
	ldr r7, [sl, #0x2c]
	ldr r1, [sp, #0x30]
	cmp sb, r0
	smlal ip, fp, r1, r7
	lsr r1, ip, #0xc
	orr r1, r1, fp, lsl #20
	rsb r1, r1, #0
	str r1, [sb, #0x28]
	ldr r1, [sl, #0x28]
	ldr r3, [sl, #0x24]
	smull r6, r1, r2, r1
	smlal r6, r1, r4, r3
	ldr r5, [sl, #0x2c]
	smlal r6, r1, r8, r5
	lsr r2, r6, #0xc
	orr r2, r2, r1, lsl #20
	rsb r1, r2, #0
	str r1, [sb, #0x2c]
	bne _02008A1C
	ldr r1, [sp]
	bl FUN_02007938
	arm_func_end FUN_020086b4
_02008A1C:
	mov r0, #0
	add sp, sp, #0x68
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02008a28
FUN_02008a28: ; 0x02008A28
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x30
	ldr r8, [r0, #4]
	ldr r3, [r1, #0xc]
	mov ip, r2
	smull r6, r5, r8, r3
	ldr sb, [r0]
	ldr r3, [r1]
	cmp ip, r1
	smlal r6, r5, sb, r3
	ldr lr, [r0, #8]
	ldr r4, [r1, #0x18]
	addeq r2, sp, #0
	smlal r6, r5, lr, r4
	lsr r4, r6, #0xc
	orr r4, r4, r5, lsl #20
	str r4, [r2]
	ldr r4, [r1, #0x10]
	ldr r5, [r1, #4]
	smull r7, r6, r8, r4
	smlal r7, r6, sb, r5
	ldr r4, [r1, #0x1c]
	ldr r3, [r0, #0x10]
	smlal r7, r6, lr, r4
	lsr r4, r7, #0xc
	orr r4, r4, r6, lsl #20
	str r4, [r2, #4]
	ldr sl, [r1, #0x14]
	ldr r7, [r1, #8]
	smull r6, r4, r8, sl
	smlal r6, r4, sb, r7
	smull sb, r8, r3, sl
	ldr r5, [r0, #0xc]
	ldr sl, [r1, #0x20]
	smlal sb, r8, r5, r7
	ldr r7, [r0, #0x14]
	smlal r6, r4, lr, sl
	lsr r6, r6, #0xc
	orr r6, r6, r4, lsl #20
	smlal sb, r8, r7, sl
	lsr r4, sb, #0xc
	str r6, [r2, #8]
	orr r4, r4, r8, lsl #20
	str r4, [r2, #0x14]
	ldr r4, [r1, #0x10]
	ldr r6, [r1, #4]
	smull sb, r8, r3, r4
	smlal sb, r8, r5, r6
	ldr r4, [r1, #0x1c]
	ldr r6, [r0, #0x18]
	smlal sb, r8, r7, r4
	lsr r4, sb, #0xc
	orr r4, r4, r8, lsl #20
	str r4, [r2, #0x10]
	ldr r4, [r1, #0xc]
	ldr lr, [r1]
	smull sb, r8, r3, r4
	smlal sb, r8, r5, lr
	ldr r3, [r1, #0x18]
	ldr r5, [r0, #0x1c]
	smlal sb, r8, r7, r3
	lsr r7, sb, #0xc
	orr r7, r7, r8, lsl #20
	str r7, [r2, #0xc]
	smull r8, r7, r5, r4
	smlal r8, r7, r6, lr
	ldr r4, [r0, #0x20]
	ldr lr, [r0, #0x28]
	smlal r8, r7, r4, r3
	lsr r3, r8, #0xc
	orr r3, r3, r7, lsl #20
	str r3, [r2, #0x18]
	ldr r7, [r1, #0x10]
	ldr r3, [r0, #0x24]
	smull sl, r7, r5, r7
	ldr r8, [r1, #4]
	ldr sb, [r1, #0x1c]
	smlal sl, r7, r6, r8
	smlal sl, r7, r4, sb
	lsr r8, sl, #0xc
	orr r8, r8, r7, lsl #20
	str r8, [r2, #0x1c]
	ldr r7, [r1, #0x14]
	ldr sl, [r1, #8]
	smull sb, r8, r5, r7
	smlal sb, r8, r6, sl
	smull r7, r6, lr, r7
	smlal r7, r6, r3, sl
	ldr sl, [r1, #0x20]
	ldr r0, [r0, #0x2c]
	smlal sb, r8, r4, sl
	lsr r4, sb, #0xc
	orr r4, r4, r8, lsl #20
	smlal r7, r6, r0, sl
	str r4, [r2, #0x20]
	lsr r4, r7, #0xc
	orr r4, r4, r6, lsl #20
	ldr r6, [r1, #0x2c]
	add r5, sp, #0
	adds r4, r6, r4
	str r4, [r2, #0x2c]
	ldr r4, [r1, #0x10]
	ldr r6, [r1, #4]
	smull r8, r4, lr, r4
	smlal r8, r4, r3, r6
	ldr r7, [r1, #0x1c]
	ldr sb, [r1, #0x28]
	smlal r8, r4, r0, r7
	lsr r6, r8, #0xc
	orr r6, r6, r4, lsl #20
	adds r4, sb, r6
	str r4, [r2, #0x28]
	ldr r8, [r1, #0x24]
	ldr r6, [r1, #0x18]
	ldr r4, [r1]
	ldr r1, [r1, #0xc]
	smull r7, r1, lr, r1
	smlal r7, r1, r3, r4
	smlal r7, r1, r0, r6
	lsr r0, r7, #0xc
	orr r0, r0, r1, lsl #20
	adds r0, r8, r0
	cmp r2, r5
	str r0, [r2, #0x24]
	addne sp, sp, #0x30
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	ldm r5!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm r5, {r0, r1, r2, r3}
	stm ip, {r0, r1, r2, r3}
	add sp, sp, #0x30
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02008a28

	arm_func_start FUN_02008c40
FUN_02008c40: ; 0x02008C40
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r7, [r0, #4]
	ldr r5, [r1, #0xc]
	ldr r3, [r1, #0x10]
	ldr r4, [r1, #0x14]
	smull lr, ip, r7, r5
	smull r8, r3, r7, r3
	smull r6, r5, r7, r4
	ldr sl, [r0]
	ldr sb, [r1]
	ldr r7, [r1, #4]
	ldr r4, [r1, #8]
	smlal lr, ip, sl, sb
	smlal r8, r3, sl, r7
	smlal r6, r5, sl, r4
	ldr sb, [r0, #8]
	ldr r7, [r1, #0x18]
	ldr r4, [r1, #0x1c]
	ldr r0, [r1, #0x20]
	smlal lr, ip, sb, r7
	smlal r8, r3, sb, r4
	smlal r6, r5, sb, r0
	lsr sb, lr, #0xc
	lsr r7, r8, #0xc
	lsr r4, r6, #0xc
	ldr r0, [r1, #0x24]
	orr sb, sb, ip, lsl #20
	add r6, sb, r0
	ldr r0, [r1, #0x28]
	orr r7, r7, r3, lsl #20
	add r3, r7, r0
	ldr r0, [r1, #0x2c]
	orr r4, r4, r5, lsl #20
	add r0, r4, r0
	str r6, [r2]
	str r3, [r2, #4]
	str r0, [r2, #8]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02008c40

	arm_func_start FUN_02008cd8
FUN_02008cd8: ; 0x02008CD8
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x24
	mov r8, r0
	ldr r4, [r8]
	ldr r0, [r2]
	mov r7, r1
	sub r4, r4, r0
	ldr sb, [r8, #4]
	ldr r6, [r2, #4]
	ldr r1, [r8, #8]
	sub sb, sb, r6
	ldr r0, [r2, #8]
	add r5, sp, #0x18
	sub r2, r1, r0
	mov r0, r5
	mov r1, r5
	mov r6, r3
	str r4, [sp, #0x18]
	str sb, [sp, #0x1c]
	str r2, [sp, #0x20]
	bl FUN_020098b0
	add sb, sp, #0xc
	mov r0, r7
	mov r1, r5
	mov r2, sb
	bl FUN_020097d0
	mov r0, sb
	mov r1, sb
	bl FUN_020098b0
	add r4, sp, #0
	mov r0, r5
	mov r1, sb
	mov r2, r4
	bl FUN_020097d0
	ldr r2, [sp, #0xc]
	mov r1, sb
	str r2, [r6]
	ldr r2, [sp]
	mov r0, r8
	str r2, [r6, #4]
	ldr r2, [sp, #0x18]
	str r2, [r6, #8]
	ldr r2, [sp, #0x10]
	str r2, [r6, #0xc]
	ldr r2, [sp, #4]
	str r2, [r6, #0x10]
	ldr r2, [sp, #0x1c]
	str r2, [r6, #0x14]
	ldr r2, [sp, #0x14]
	str r2, [r6, #0x18]
	ldr r2, [sp, #8]
	str r2, [r6, #0x1c]
	ldr r2, [sp, #0x20]
	str r2, [r6, #0x20]
	bl FUN_02009794
	rsb r0, r0, #0
	str r0, [r6, #0x24]
	mov r1, r4
	mov r0, r8
	bl FUN_02009794
	rsb r0, r0, #0
	str r0, [r6, #0x28]
	mov r1, r5
	mov r0, r8
	bl FUN_02009794
	rsb r0, r0, #0
	str r0, [r6, #0x2c]
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02008cd8

	arm_func_start FUN_02008dec
FUN_02008dec: ; 0x02008DEC
	mov r2, #0x1000
	mov r3, #0
	stm r0!, {r2, r3}
	mov r1, #0
	stm r0!, {r1, r3}
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r3}
	stm r0!, {r1, r2, r3}
	stm r0!, {r1, r3}
	stm r0!, {r1, r2}
	bx lr
	arm_func_end FUN_02008dec

	arm_func_start FUN_02008e18
FUN_02008e18: ; 0x02008E18
	ldm r0!, {r2, r3, ip}
	add r0, r0, #4
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	add r0, r0, #4
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	add r0, r0, #4
	stm r1!, {r2, r3, ip}
	ldm r0!, {r2, r3, ip}
	add r0, r0, #4
	stm r1!, {r2, r3, ip}
	bx lr
	arm_func_end FUN_02008e18

	arm_func_start FUN_02008e4c
FUN_02008e4c: ; 0x02008E4C
	addvs r6, r2, #2
	submi r6, sb, #0x10000000
	movwhs r6, #0x1081
	tsteq fp, #0, #2
	subvs r2, r2, r0, lsl #4
	andgt r3, lr, ip
	subvs ip, r2, r6
	andgt r3, r6, ip
	ldrbmi ip, [r0, -lr]!
	arm_func_end FUN_02008e4c

	arm_func_start FUN_02008e70
FUN_02008e70: ; 0x02008E70
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x74
	ldr sb, [r0, #4]
	ldr r3, [r1, #0x10]
	add ip, sp, #0x34
	smull r4, r3, sb, r3
	cmp r2, r1
	str r2, [sp]
	movne ip, r2
	add r2, sp, #0x34
	str r2, [sp, #0x30]
	ldr fp, [r0]
	ldr r2, [r1]
	ldr r8, [r0, #8]
	smlal r4, r3, fp, r2
	ldr r2, [r1, #0x20]
	ldr r7, [r0, #0xc]
	smlal r4, r3, r8, r2
	ldr r2, [r1, #0x30]
	ldr r6, [r0, #0x14]
	smlal r4, r3, r7, r2
	lsr r2, r4, #0xc
	orr r2, r2, r3, lsl #20
	str r2, [ip]
	ldr r2, [r1, #0x14]
	ldr r4, [r1, #4]
	smull r3, r2, sb, r2
	smlal r3, r2, fp, r4
	ldr r5, [r1, #0x24]
	ldr r4, [sp, #0x30]
	smlal r3, r2, r8, r5
	cmp ip, r4
	ldr r4, [r1, #0x34]
	ldr sl, [r0, #0x10]
	smlal r3, r2, r7, r4
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [ip, #4]
	ldr r2, [r1, #0x3c]
	ldr r4, [r1, #0x2c]
	ldr r3, [r1, #0x1c]
	str r2, [sp, #4]
	str r4, [sp, #8]
	smull r3, r2, sb, r3
	ldr r4, [r1, #0xc]
	ldr r5, [r0, #0x18]
	smlal r3, r2, fp, r4
	ldr r4, [sp, #8]
	smlal r3, r2, r8, r4
	ldr r4, [sp, #4]
	smlal r3, r2, r7, r4
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [ip, #0xc]
	ldr r2, [r1, #0x18]
	ldr r4, [r1, #8]
	str r2, [sp, #0xc]
	ldr r2, [r1, #0x28]
	str r2, [sp, #0x10]
	ldr r2, [sp, #0xc]
	smull r3, r2, sb, r2
	smlal r3, r2, fp, r4
	ldr sb, [sp, #0x10]
	smlal r3, r2, r8, sb
	ldr r8, [sp, #0xc]
	smull fp, r8, r6, r8
	smlal fp, r8, sl, r4
	mov r4, sb
	smlal fp, r8, r5, r4
	ldr r4, [r1, #0x38]
	ldr sb, [r0, #0x1c]
	smlal r3, r2, r7, r4
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	smlal fp, r8, sb, r4
	lsr r2, fp, #0xc
	str r3, [ip, #8]
	orr r2, r2, r8, lsl #20
	str r2, [ip, #0x18]
	ldr r2, [r1, #0x14]
	ldr r3, [r1, #4]
	smull r8, r2, r6, r2
	smlal r8, r2, sl, r3
	ldr r4, [r1, #0x24]
	ldr r7, [r1, #0x34]
	smlal r8, r2, r5, r4
	smlal r8, r2, sb, r7
	lsr r3, r8, #0xc
	orr r3, r3, r2, lsl #20
	str r3, [ip, #0x14]
	ldr r2, [r1, #0xc]
	ldr lr, [r1, #0x2c]
	str r2, [sp, #0x14]
	ldr r2, [r1, #0x1c]
	ldr r3, [r1, #0x3c]
	smull r8, r7, r6, r2
	ldr r2, [sp, #0x14]
	ldr r4, [r0, #0x24]
	smlal r8, r7, sl, r2
	smlal r8, r7, r5, lr
	smlal r8, r7, sb, r3
	lsr r2, r8, #0xc
	orr r2, r2, r7, lsl #20
	str r2, [ip, #0x1c]
	ldr r2, [r1, #0x10]
	ldr r3, [r1]
	str r2, [sp, #0x18]
	smull r7, r2, r6, r2
	smlal r7, r2, sl, r3
	ldr r8, [r1, #0x20]
	ldr fp, [r0, #0x20]
	smlal r7, r2, r5, r8
	ldr r5, [sp, #0x18]
	ldr sl, [r1, #0x30]
	smull r6, r5, r4, r5
	smlal r6, r5, fp, r3
	smlal r7, r2, sb, sl
	ldr r3, [r0, #0x28]
	lsr r7, r7, #0xc
	orr r7, r7, r2, lsl #20
	smlal r6, r5, r3, r8
	ldr r2, [r0, #0x2c]
	str r7, [ip, #0x10]
	smlal r6, r5, r2, sl
	lsr r6, r6, #0xc
	orr r6, r6, r5, lsl #20
	str r6, [ip, #0x20]
	ldr r5, [r1, #4]
	ldr lr, [r1, #0x24]
	str r5, [sp, #0x1c]
	ldr r5, [r1, #0x14]
	ldr r6, [r1, #0x34]
	smull sl, sb, r4, r5
	ldr r5, [sp, #0x1c]
	ldr r8, [r0, #0x34]
	smlal sl, sb, fp, r5
	smlal sl, sb, r3, lr
	smlal sl, sb, r2, r6
	lsr r5, sl, #0xc
	orr r5, r5, sb, lsl #20
	str r5, [ip, #0x24]
	ldr r5, [r1, #0x2c]
	ldr sb, [r1, #0x1c]
	str r5, [sp, #0x20]
	ldr r5, [r1, #0xc]
	ldr r7, [r0, #0x30]
	str r5, [sp, #0x24]
	ldr r6, [r0, #0x38]
	ldr r5, [r0, #0x3c]
	smull sb, r0, r4, sb
	ldr sl, [sp, #0x24]
	ldr lr, [r1, #0x3c]
	smlal sb, r0, fp, sl
	ldr sl, [sp, #0x20]
	smlal sb, r0, r3, sl
	smlal sb, r0, r2, lr
	lsr sb, sb, #0xc
	orr sb, sb, r0, lsl #20
	str sb, [ip, #0x2c]
	ldr r0, [r1, #0x18]
	str r0, [sp, #0x28]
	ldr sb, [sp, #0x28]
	ldr r0, [r1, #8]
	smull sl, sb, r4, sb
	ldr r4, [sp, #0x28]
	smlal sl, sb, fp, r0
	smull r4, lr, r8, r4
	smlal r4, lr, r7, r0
	ldr r0, [r1, #0x28]
	ldr fp, [r1, #0x38]
	smlal sl, sb, r3, r0
	smlal r4, lr, r6, r0
	str r0, [sp, #0x2c]
	smlal sl, sb, r2, fp
	lsr r0, sl, #0xc
	orr r0, r0, sb, lsl #20
	smlal r4, lr, r5, fp
	str r0, [ip, #0x28]
	lsr r0, r4, #0xc
	orr r0, r0, lr, lsl #20
	str r0, [ip, #0x38]
	ldr r0, [r1, #0x14]
	ldr r2, [r1, #4]
	smull sb, r0, r8, r0
	smlal sb, r0, r7, r2
	ldr r3, [r1, #0x24]
	ldr r4, [r1, #0x34]
	smlal sb, r0, r6, r3
	smlal sb, r0, r5, r4
	lsr r2, sb, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [ip, #0x34]
	ldr r0, [r1, #0x10]
	ldr r2, [r1]
	smull sb, r0, r8, r0
	smlal sb, r0, r7, r2
	ldr r3, [r1, #0x20]
	ldr r4, [r1, #0x30]
	smlal sb, r0, r6, r3
	smlal sb, r0, r5, r4
	lsr r2, sb, #0xc
	orr r2, r2, r0, lsl #20
	str r2, [ip, #0x30]
	ldr r0, [r1, #0x1c]
	ldr r4, [r1, #0x3c]
	ldr r3, [r1, #0x2c]
	ldr r2, [r1, #0xc]
	smull r1, r0, r8, r0
	smlal r1, r0, r7, r2
	smlal r1, r0, r6, r3
	smlal r1, r0, r5, r4
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [ip, #0x3c]
	addne sp, sp, #0x74
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r4, [sp, #0x30]
	ldm r4!, {r0, r1, r2, r3}
	str r4, [sp, #0x30]
	ldr r4, [sp]
	stm r4!, {r0, r1, r2, r3}
	str r4, [sp]
	ldr r4, [sp, #0x30]
	ldm r4!, {r0, r1, r2, r3}
	str r4, [sp, #0x30]
	ldr r4, [sp]
	stm r4!, {r0, r1, r2, r3}
	str r4, [sp]
	ldr r4, [sp, #0x30]
	ldm r4!, {r0, r1, r2, r3}
	str r4, [sp, #0x30]
	ldr r4, [sp]
	stm r4!, {r0, r1, r2, r3}
	ldr r0, [sp, #0x30]
	str r4, [sp]
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	add sp, sp, #0x74
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02008e70

	arm_func_start FUN_0200922c
FUN_0200922c: ; 0x0200922C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, r0
	mov r0, r1
	mov r1, r4
	mov sb, r2
	mov r8, r3
	ldr r7, [sp, #0x24]
	ldr r6, [sp, #0x28]
	bl FUN_0200958c
	ldr r3, _02009374 ; =0x04000290
	mov r2, #0
	str r2, [r3]
	mov r2, #0x1000
	ldr r1, [sp, #0x20]
	str r2, [r3, #4]
	sub r2, r8, r1
	str r2, [r3, #8]
	mov r1, #0
	mov r5, r0
	str r1, [r3, #0xc]
	cmp r7, #0x1000
	mulne r1, r5, r7
	mov r4, #0
	str r4, [r6, #4]
	asrne r0, r1, #0xb
	str r4, [r6, #8]
	addne r0, r1, r0, lsr #20
	str r4, [r6, #0xc]
	asrne r5, r0, #0xc
	str r4, [r6, #0x10]
	str r5, [r6, #0x14]
	str r4, [r6, #0x18]
	str r4, [r6, #0x1c]
	str r4, [r6, #0x20]
	str r4, [r6, #0x24]
	rsb r0, r7, #0
	str r0, [r6, #0x2c]
	str r4, [r6, #0x30]
	str r4, [r6, #0x34]
	str r4, [r6, #0x3c]
	bl FUN_020095e0
	ldr r2, _02009374 ; =0x04000290
	mov ip, r4
	str ip, [r2]
	stmib r2, {r5, sb}
	str ip, [r2, #0xc]
	cmp r7, #0x1000
	beq _02009310
	asr r2, r7, #0x1f
	umull r5, r3, r0, r7
	mla r3, r0, r2, r3
	mla r3, r1, r7, r3
	mov r0, r5
	mov r1, r3
	mov r3, r4
	mov r2, #0x1000
	bl FUN_0201f7a4
	arm_func_end FUN_0200922c
_02009310:
	ldr r4, [sp, #0x20]
	lsl r2, r8, #1
	add r5, r4, r8
	asr r3, r5, #0x1f
	umull r8, r7, r0, r5
	mla r7, r0, r3, r7
	smull r4, r3, r2, r4
	mla r7, r1, r5, r7
	adds r2, r8, #0x80000000
	adc r7, r7, #0
	adds r4, r4, #0x800
	adc r2, r3, #0
	lsr r3, r4, #0xc
	orr r3, r3, r2, lsl #20
	umull r5, r4, r0, r3
	asr r2, r3, #0x1f
	mla r4, r0, r2, r4
	mla r4, r1, r3, r4
	adds r0, r5, #0x80000000
	str r7, [r6, #0x28]
	adc r0, r4, #0
	str r0, [r6, #0x38]
	bl FUN_02009604
	str r0, [r6]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02009374: .word 0x04000290

	arm_func_start FUN_02009378
FUN_02009378: ; 0x02009378
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	str r2, [sp]
	mov sl, r0
	ldr r0, [sp]
	mov r2, r3
	sub r0, r2, r0
	ldr r8, [sp, #0x44]
	str r3, [sp, #4]
	mov fp, r1
	ldr sb, [sp, #0x40]
	bl FUN_02009638
	mov r5, #0
	str r5, [r8, #4]
	str r5, [r8, #8]
	str r5, [r8, #0xc]
	str r5, [r8, #0x10]
	str r5, [r8, #0x18]
	str r5, [r8, #0x1c]
	str r5, [r8, #0x20]
	str r5, [r8, #0x24]
	str r5, [r8, #0x2c]
	str sb, [r8, #0x3c]
	bl FUN_020095e0
	mov r6, r1
	ldr r1, _02009588 ; =0x04000290
	mov r4, r0
	mov r2, #0x1000
	str r5, [r1]
	sub r0, sl, fp
	str r2, [r1, #4]
	str r0, [r1, #8]
	mov r0, r5
	cmp sb, #0x1000
	str r0, [r1, #0xc]
	beq _02009428
	asr r3, sb, #0x1f
	umull r0, r1, r4, sb
	mla r1, r4, r3, r1
	mla r1, r6, sb, r1
	mov r3, r5
	bl FUN_0201f7a4
	mov r4, r0
	mov r6, r1
	arm_func_end FUN_02009378
_02009428:
	lsl r1, r6, #0xd
	mov r0, #0x80000000
	orr r1, r1, r4, lsr #19
	adds r0, r0, r4, lsl #13
	adc r0, r1, #0
	str r0, [r8]
	bl FUN_020095e0
	mov r5, r0
	mov r7, r1
	ldr r3, _02009588 ; =0x04000290
	mov r0, #0
	ldr ip, [sp, #0x38]
	ldr r1, [sp, #0x3c]
	str r0, [r3]
	mov r2, #0x1000
	str r2, [r3, #4]
	sub ip, ip, r1
	str ip, [r3, #8]
	cmp sb, #0x1000
	str r0, [r3, #0xc]
	beq _0200949C
	asr r3, sb, #0x1f
	umull r0, r1, r5, sb
	mla r1, r5, r3, r1
	mla r1, r7, sb, r1
	mov r3, #0
	bl FUN_0201f7a4
	mov r5, r0
	mov r7, r1
_0200949C:
	lsl r1, r7, #0xd
	mov r0, #0x80000000
	orr r1, r1, r5, lsr #19
	adds r0, r0, r5, lsl #13
	adc r0, r1, #0
	str r0, [r8, #0x14]
	bl FUN_020095e0
	cmp sb, #0x1000
	beq _020094F0
	umull lr, ip, r0, sb
	asr r2, sb, #0x1f
	str r2, [sp, #0xc]
	str lr, [sp, #8]
	ldr lr, [sp, #0xc]
	mov r3, #0
	mla ip, r0, lr, ip
	mla ip, r1, sb, ip
	ldr r0, [sp, #8]
	mov r2, #0x1000
	mov r1, ip
	bl FUN_0201f7a4
_020094F0:
	ldr r3, [sp, #4]
	ldr r2, [sp]
	add r2, r3, r2
	rsb ip, r2, #0
	add r2, sl, fp
	rsb r3, r2, #0
	ldr sl, [sp, #0x3c]
	ldr r2, [sp, #0x38]
	asr sb, ip, #0x1f
	add r2, sl, r2
	umull fp, sl, r4, ip
	mla sl, r4, sb, sl
	mov r4, #0x80000000
	mla sl, r6, ip, sl
	adds r4, r4, r0, lsl #13
	lsl sb, r1, #0xd
	asr r6, r3, #0x1f
	umull ip, r4, r5, r3
	mla r4, r5, r6, r4
	orr sb, sb, r0, lsr #19
	mla r4, r7, r3, r4
	adc r3, sb, #0
	str r3, [r8, #0x28]
	adds r3, fp, #0x80000000
	adc r7, sl, #0
	adds r3, ip, #0x80000000
	asr r3, r2, #0x1f
	umull r6, r5, r0, r2
	mla r5, r0, r3, r5
	adc r3, r4, #0
	str r7, [r8, #0x30]
	mla r5, r1, r2, r5
	adds r0, r6, #0x80000000
	str r3, [r8, #0x34]
	adc r0, r5, #0
	str r0, [r8, #0x38]
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02009588: .word 0x04000290

	arm_func_start FUN_0200958c
FUN_0200958c: ; 0x0200958C
	push {r3, lr}
	bl FUN_02009694
	bl FUN_02009604
	pop {r3, pc}
	arm_func_end FUN_0200958c

	arm_func_start FUN_0200959c
FUN_0200959c: ; 0x0200959C
	push {r3, lr}
	bl FUN_02009638
	bl FUN_02009604
	pop {r3, pc}
	arm_func_end FUN_0200959c

	arm_func_start FUN_020095ac
FUN_020095ac: ; 0x020095AC
	push {r3, lr}
	cmp r0, #0
	movle r0, #0
	pople {r3, pc}
	ldr r1, _020095DC ; =0x040002B0
	mov r2, #1
	strh r2, [r1]
	mov r2, #0
	str r2, [r1, #8]
	str r0, [r1, #0xc]
	bl FUN_02009668
	pop {r3, pc}
	.align 2, 0_020095DC: .word 0x040002B0
	arm_func_end FUN_020095ac

	arm_func_start FUN_020095e0
FUN_020095e0: ; 0x020095E0
	ldr r1, _020095FC ; =0x04000280
	arm_func_end FUN_020095e0
_020095E4:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _020095E4
	ldr r1, _02009600 ; =0x040002A0
	ldm r1, {r0, r1}
	bx lr
	.align 2, 0_020095FC: .word 0x04000280
_02009600: .word 0x040002A0

	arm_func_start FUN_02009604
FUN_02009604: ; 0x02009604
	ldr r1, _02009630 ; =0x04000280
	arm_func_end FUN_02009604
_02009608:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _02009608
	ldr r1, _02009634 ; =0x040002A0
	ldm r1, {r0, r1}
	adds r0, r0, #0x80000
	adc r1, r1, #0
	lsr r0, r0, #0x14
	orr r0, r0, r1, lsl #12
	bx lr
	.align 2, 0_02009630: .word 0x04000280
_02009634: .word 0x040002A0

	arm_func_start FUN_02009638
FUN_02009638: ; 0x02009638
	ldr r3, _02009664 ; =0x04000280
	mov r1, #1
	strh r1, [r3]
	mov r2, #0
	str r2, [r3, #0x10]
	mov r1, #0x1000
	str r1, [r3, #0x14]
	str r0, [r3, #0x18]
	mov r0, r2
	str r0, [r3, #0x1c]
	bx lr
	.align 2, 0_02009664: .word 0x04000280
	arm_func_end FUN_02009638

	arm_func_start FUN_02009668
FUN_02009668: ; 0x02009668
	ldr r1, _0200968C ; =0x040002B0
	arm_func_end FUN_02009668
_0200966C:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _0200966C
	ldr r0, _02009690 ; =0x040002B4
	ldr r0, [r0]
	add r0, r0, #0x200
	lsr r0, r0, #0xa
	bx lr
	.align 2, 0_0200968C: .word 0x040002B0
_02009690: .word 0x040002B4

	arm_func_start FUN_02009694
FUN_02009694: ; 0x02009694
	ldr r3, _020096B8 ; =0x04000280
	mov r2, #1
	strh r2, [r3]
	mov r2, #0
	str r2, [r3, #0x10]
	str r0, [r3, #0x14]
	str r1, [r3, #0x18]
	str r2, [r3, #0x1c]
	bx lr
	.align 2, 0_020096B8: .word 0x04000280
	arm_func_end FUN_02009694

	arm_func_start FUN_020096bc
FUN_020096bc: ; 0x020096BC
	ldr r2, _020096F0 ; =0x04000280
	mov r3, #0
	strh r3, [r2]
	str r0, [r2, #0x10]
	str r1, [r2, #0x18]
	mov r0, r3
	str r0, [r2, #0x1c]
	arm_func_end FUN_020096bc
_020096D8:
	ldrh r0, [r2]
	tst r0, #0x8000
	bne _020096D8
	ldr r0, _020096F4 ; =0x040002A0
	ldr r0, [r0]
	bx lr
	.align 2, 0_020096F0: .word 0x04000280
_020096F4: .word 0x040002A0

	arm_func_start FUN_020096f8
FUN_020096f8: ; 0x020096F8
	ldr r2, _0200972C ; =0x04000280
	mov r3, #0
	strh r3, [r2]
	str r0, [r2, #0x10]
	str r1, [r2, #0x18]
	mov r0, r3
	str r0, [r2, #0x1c]
	arm_func_end FUN_020096f8
_02009714:
	ldrh r0, [r2]
	tst r0, #0x8000
	bne _02009714
	ldr r0, _02009730 ; =0x040002A8
	ldr r0, [r0]
	bx lr
	.align 2, 0_0200972C: .word 0x04000280
_02009730: .word 0x040002A8

	arm_func_start FUN_02009734
FUN_02009734: ; 0x02009734
	push {r4, lr}
	ldr lr, [r1]
	ldr r3, [r1, #4]
	ldm r0, {r4, ip}
	add ip, ip, r3
	add r4, r4, lr
	ldr r3, [r0, #8]
	ldr r0, [r1, #8]
	stm r2, {r4, ip}
	add r0, r3, r0
	str r0, [r2, #8]
	pop {r4, pc}
	arm_func_end FUN_02009734

	arm_func_start FUN_02009764
FUN_02009764: ; 0x02009764
	push {r4, lr}
	ldr lr, [r1]
	ldr r3, [r1, #4]
	ldm r0, {r4, ip}
	sub ip, ip, r3
	sub r4, r4, lr
	ldr r3, [r0, #8]
	ldr r0, [r1, #8]
	stm r2, {r4, ip}
	sub r0, r3, r0
	str r0, [r2, #8]
	pop {r4, pc}
	arm_func_end FUN_02009764

	arm_func_start FUN_02009794
FUN_02009794: ; 0x02009794
	push {r4, lr}
	ldr r3, [r0, #4]
	ldr r2, [r1, #4]
	ldr ip, [r0]
	smull r4, lr, r3, r2
	ldr r2, [r1]
	ldr r3, [r0, #8]
	smlal r4, lr, ip, r2
	ldr r0, [r1, #8]
	smlal r4, lr, r3, r0
	adds r0, r4, #0x800
	adc r1, lr, #0
	lsr r0, r0, #0xc
	orr r0, r0, r1, lsl #20
	pop {r4, pc}
	arm_func_end FUN_02009794

	arm_func_start FUN_020097d0
FUN_020097d0: ; 0x020097D0
	push {r4, r5, r6, r7, r8, lr}
	ldm r0, {r5, lr}
	ldr r6, [r1, #8]
	ldr r0, [r0, #8]
	ldm r1, {r4, ip}
	smull r8, r7, lr, r6
	smull r3, r1, r0, ip
	subs r3, r8, r3
	sbc r1, r7, r1
	adds r3, r3, #0x800
	smull r8, r7, r0, r4
	smull r6, r0, r5, r6
	adc r1, r1, #0
	subs r6, r8, r6
	lsr r3, r3, #0xc
	sbc r7, r7, r0
	adds r0, r6, #0x800
	orr r3, r3, r1, lsl #20
	smull ip, r6, r5, ip
	smull r4, r1, lr, r4
	adc r5, r7, #0
	subs r4, ip, r4
	sbc r1, r6, r1
	lsr r6, r0, #0xc
	adds r4, r4, #0x800
	orr r6, r6, r5, lsl #20
	adc r0, r1, #0
	lsr r1, r4, #0xc
	stm r2, {r3, r6}
	orr r1, r1, r0, lsl #20
	str r1, [r2, #8]
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020097d0

	arm_func_start FUN_02009850
FUN_02009850: ; 0x02009850
	ldr r1, [r0, #4]
	ldr r2, [r0]
	smull ip, r3, r1, r1
	smlal ip, r3, r2, r2
	ldr r0, [r0, #8]
	ldr r1, _020098A8 ; =0x040002B0
	smlal ip, r3, r0, r0
	mov r2, #1
	lsl r0, r3, #2
	strh r2, [r1]
	lsl r2, ip, #2
	str r2, [r1, #8]
	orr r0, r0, ip, lsr #30
	str r0, [r1, #0xc]
	arm_func_end FUN_02009850
_02009888:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _02009888
	ldr r0, _020098AC ; =0x040002B4
	ldr r0, [r0]
	add r0, r0, #1
	asr r0, r0, #1
	bx lr
	.align 2, 0_020098A8: .word 0x040002B0
_020098AC: .word 0x040002B4

	arm_func_start FUN_020098b0
FUN_020098b0: ; 0x020098B0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r2, [r0, #4]
	ldr r3, [r0]
	smull r6, r7, r2, r2
	smlal r6, r7, r3, r3
	ldr r2, [r0, #8]
	ldr r5, _020099B8 ; =0x04000280
	smlal r6, r7, r2, r2
	mov r3, #2
	strh r3, [r5]
	mov r4, #0
	str r4, [r5, #0x10]
	mov r3, #0x1000000
	str r3, [r5, #0x14]
	str r6, [r5, #0x18]
	lsl r2, r7, #2
	str r7, [r5, #0x1c]
	mov r3, #1
	strh r3, [r5, #0x30]
	lsl r4, r6, #2
	str r4, [r5, #0x38]
	orr r2, r2, r6, lsr #30
	str r2, [r5, #0x3c]
	arm_func_end FUN_020098b0
_0200990C:
	ldrh r2, [r5, #0x30]
	tst r2, #0x8000
	bne _0200990C
	ldr r2, _020099BC ; =0x040002B4
	ldr ip, [r2]
	sub r3, r2, #0x34
_02009924:
	ldrh r2, [r3]
	tst r2, #0x8000
	bne _02009924
	ldr r7, _020099C0 ; =0x040002A0
	ldr r8, [r0]
	ldr r6, [r7]
	ldmib r0, {r5, lr}
	umull r3, r2, r6, ip
	asr r0, ip, #0x1f
	mla r2, r6, r0, r2
	ldr fp, [r7, #4]
	umull sl, sb, r3, r8
	asr r4, r8, #0x1f
	mla r2, fp, ip, r2
	mla sb, r3, r4, sb
	mla sb, r2, r8, sb
	asr r0, r5, #0x1f
	umull r7, r6, r3, r5
	mla r6, r3, r0, r6
	adds sl, sl, #0
	adc r0, sb, #0x1000
	asr r4, r0, #0xd
	str r4, [r1]
	asr r0, lr, #0x1f
	umull r4, ip, r3, lr
	mla ip, r3, r0, ip
	mla r6, r2, r5, r6
	adds r0, r7, #0
	adc r0, r6, #0x1000
	asr r3, r0, #0xd
	mla ip, r2, lr, ip
	adds r0, r4, #0
	adc r0, ip, #0x1000
	asr r0, r0, #0xd
	str r3, [r1, #4]
	str r0, [r1, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020099B8: .word 0x04000280
_020099BC: .word 0x040002B4
_020099C0: .word 0x040002A0

	arm_func_start FUN_020099c4
FUN_020099c4: ; 0x020099C4
	push {r4, r5, r6, lr}
	ldm r1, {r4, ip}
	smull r6, r5, r0, r4
	smull r4, lr, r0, ip
	ldr r1, [r1, #8]
	lsr r6, r6, #0xc
	smull ip, r1, r0, r1
	lsr r0, ip, #0xc
	lsr r4, r4, #0xc
	ldr ip, [r2]
	orr r6, r6, r5, lsl #20
	add r5, ip, r6
	ldr ip, [r2, #4]
	orr r4, r4, lr, lsl #20
	add r4, ip, r4
	ldr r2, [r2, #8]
	orr r0, r0, r1, lsl #20
	add r0, r2, r0
	str r5, [r3]
	str r4, [r3, #4]
	str r0, [r3, #8]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020099c4

	arm_func_start FUN_02009a1c
FUN_02009a1c: ; 0x02009A1C
	push {r4, lr}
	ldr r3, [r0, #4]
	ldr r2, [r1, #4]
	ldr r4, [r0]
	sub r2, r3, r2
	smull ip, r3, r2, r2
	ldr lr, [r1]
	ldr r2, [r0, #8]
	sub r4, r4, lr
	ldr r0, [r1, #8]
	smlal ip, r3, r4, r4
	sub r0, r2, r0
	smlal ip, r3, r0, r0
	lsl r0, r3, #2
	ldr r1, _02009A90 ; =0x040002B0
	mov r2, #1
	strh r2, [r1]
	lsl r2, ip, #2
	str r2, [r1, #8]
	orr r0, r0, ip, lsr #30
	str r0, [r1, #0xc]
	arm_func_end FUN_02009a1c
_02009A70:
	ldrh r0, [r1]
	tst r0, #0x8000
	bne _02009A70
	ldr r0, _02009A94 ; =0x040002B4
	ldr r0, [r0]
	add r0, r0, #1
	asr r0, r0, #1
	pop {r4, pc}
	.align 2, 0_02009A90: .word 0x040002B0
_02009A94: .word 0x040002B4

	arm_func_start FUN_02009a98
FUN_02009a98: ; 0x02009A98
	push {r4, lr}
	cmp r0, #0
	ble _02009B1C
	cmp r1, #0
	ble _02009ADC
	cmp r1, r0
	movgt r2, r0
	movgt r4, #0
	movgt r0, #1
	bgt _02009BC4
	movlt r2, r1
	movlt r1, r0
	movlt r4, #0x4000
	movlt r0, #0
	blt _02009BC4
	mov r0, #0x2000
	pop {r4, pc}
	arm_func_end FUN_02009a98
_02009ADC:
	bge _02009B14
	rsb r1, r1, #0
	cmp r1, r0
	movlt r2, r1
	movlt r1, r0
	movlt r4, #0x4000
	movlt r0, #1
	blt _02009BC4
	movgt r2, r0
	movgt r4, #0x8000
	movgt r0, #0
	bgt _02009BC4
	mov r0, #0x6000
	pop {r4, pc}
_02009B14:
	mov r0, #0x4000
	pop {r4, pc}
_02009B1C:
	bge _02009BB4
	cmp r1, #0
	rsb r0, r0, #0
	bge _02009B6C
	rsb r1, r1, #0
	cmp r1, r0
	movgt r4, #0x8000
	movgt r2, r0
	rsbgt r4, r4, #0
	movgt r0, #1
	bgt _02009BC4
	bge _02009B64
	mov r4, #0x4000
	mov r2, r1
	mov r1, r0
	rsb r4, r4, #0
	mov r0, #0
	b _02009BC4
_02009B64:
	mov r0, #0xa000
	pop {r4, pc}
_02009B6C:
	cmp r1, #0
	ble _02009BAC
	cmp r1, r0
	bge _02009B94
	mov r4, #0x4000
	mov r2, r1
	mov r1, r0
	rsb r4, r4, #0
	mov r0, #1
	b _02009BC4
_02009B94:
	movgt r4, #0
	movgt r2, r0
	movgt r0, r4
	bgt _02009BC4
	mov r0, #0xe000
	pop {r4, pc}
_02009BAC:
	mov r0, #0xc000
	pop {r4, pc}
_02009BB4:
	mov r0, #0
	cmp r1, #0
	movlt r0, #0x8000
	pop {r4, pc}
_02009BC4:
	cmp r1, #0
	moveq r0, #0
	popeq {r4, pc}
	cmp r0, #0
	mov r0, r2
	beq _02009C00
	bl FUN_0200958c
	asr r1, r0, #5
	ldr r0, _02009C24 ; =0x0208B874
	lsl r1, r1, #1
	ldrsh r0, [r0, r1]
	add r0, r4, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
_02009C00:
	bl FUN_0200958c
	asr r1, r0, #5
	ldr r0, _02009C24 ; =0x0208B874
	lsl r1, r1, #1
	ldrsh r0, [r0, r1]
	sub r0, r4, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
	.align 2, 0_02009C24: .word 0x0208B874

	arm_func_start FUN_02009c28
FUN_02009c28: ; 0x02009C28
	bx lr
	arm_func_end FUN_02009c28

	arm_func_start FUN_02009c2c
FUN_02009c2c: ; 0x02009C2C
	push {r3, lr}
	cmp r0, #0
	movge r2, #0
	movge r3, #0x400
	lsl r0, r0, #0x10
	movlt r2, #0x400
	movlt r3, #0x800
	cmp r2, r3
	asr lr, r0, #0x10
	bgt _02009C88
	ldr r1, _02009CA8 ; =0x02087874
	arm_func_end FUN_02009c2c
_02009C58:
	add r0, r2, r3
	add r0, r0, r0, lsr #31
	asr ip, r0, #1
	add r0, r1, ip, lsl #2
	ldrsh r0, [r0, #2]
	cmp lr, r0
	beq _02009C88
	cmp r0, lr
	sublt r3, ip, #1
	addge r2, ip, #1
	cmp r2, r3
	ble _02009C58
_02009C88:
	lsl r0, ip, #1
	add r0, r0, #1
	lsl r1, r0, #0x10
	asr r0, r1, #0xc
	add r0, r1, r0, lsr #19
	lsl r0, r0, #3
	lsr r0, r0, #0x10
	pop {r3, pc}
	.align 2, 0_02009CA8: .word 0x02087874

	arm_func_start FUN_02009cac
FUN_02009cac: ; 0x02009CAC
	ldr r1, _02009CE8 ; =0x04000290
	stmdb sp!, {r4}
	ldm r1, {r2, r3, r4, ip}
	stm r0!, {r2, r3, r4, ip}
	ldrh ip, [r1, #-0x10]
	add r1, r1, #0x28
	ldm r1, {r2, r3}
	stm r0!, {r2, r3}
	and ip, ip, #3
	ldrh r2, [r1, #-8]
	strh ip, [r0]
	and r2, r2, #1
	strh r2, [r0, #2]
	ldm sp!, {r4}
	bx lr
	.align 2, 0_02009CE8: .word 0x04000290
	arm_func_end FUN_02009cac

	arm_func_start FUN_02009cec
FUN_02009cec: ; 0x02009CEC
	stmdb sp!, {r4}
	ldr r1, _02009D24 ; =0x04000290
	ldm r0, {r2, r3, r4, ip}
	stm r1, {r2, r3, r4, ip}
	ldrh r2, [r0, #0x18]
	ldrh r3, [r0, #0x1a]
	strh r2, [r1, #-0x10]
	strh r3, [r1, #0x20]
	add r0, r0, #0x10
	add r1, r1, #0x28
	ldm r0, {r2, r3}
	stm r1, {r2, r3}
	ldm sp!, {r4}
	bx lr
	.align 2, 0_02009D24: .word 0x04000290
	arm_func_end FUN_02009cec

	arm_func_start FUN_02009d28
FUN_02009d28: ; 0x02009D28
	ldr r1, _02009D60 ; =0x55555555
	ldr r2, _02009D64 ; =0x33333333
	and r1, r1, r0, lsr #1
	sub r0, r0, r1
	and r1, r0, r2
	and r0, r2, r0, lsr #2
	add r1, r1, r0
	ldr r0, _02009D68 ; =0x0F0F0F0F
	add r1, r1, r1, lsr #4
	and r0, r1, r0
	add r0, r0, r0, lsr #8
	add r0, r0, r0, lsr #16
	and r0, r0, #0xff
	bx lr
	.align 2, 0_02009D60: .word 0x55555555
_02009D64: .word 0x33333333
_02009D68: .word 0x0F0F0F0F
	arm_func_end FUN_02009d28

	arm_func_start FUN_02009d6c
FUN_02009d6c: ; 0x02009D6C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldm r0, {r2, r3, ip}
	add r4, r0, #0x18
	ldr lr, [r0, #0xc]
	ldr r5, _0200A11C ; =0x0208ED44
	mov r7, r4
	mov r8, #0
	arm_func_end FUN_02009d6c
_02009D88:
	mvn r1, r3
	and r6, r3, ip
	and r1, r1, lr
	orr r1, r6, r1
	ldr r6, [r7]
	add r1, r2, r1
	ldr r2, [r5]
	add r1, r6, r1
	add r2, r2, r1
	lsr r1, r2, #0x19
	orr r1, r1, r2, lsl #7
	add r2, r3, r1
	mvn r1, r2
	and r6, r2, r3
	and r1, r1, ip
	orr r1, r6, r1
	ldr r6, [r7, #4]
	add r1, lr, r1
	ldr sb, [r5, #4]
	add r1, r6, r1
	add r6, sb, r1
	lsr r1, r6, #0x14
	orr r1, r1, r6, lsl #12
	add lr, r2, r1
	mvn r1, lr
	and r6, lr, r2
	and r1, r1, r3
	orr r1, r6, r1
	ldr sb, [r7, #8]
	add r6, ip, r1
	ldr r1, [r7, #0xc]
	add sb, sb, r6
	ldr sl, [r5, #8]
	ldr r6, [r5, #0xc]
	add sl, sl, sb
	lsr sb, sl, #0xf
	orr sb, sb, sl, lsl #17
	add ip, lr, sb
	add r5, r5, #0x10
	add r7, r7, #0x10
	and sl, ip, lr
	mvn sb, ip
	and sb, sb, r2
	orr sb, sl, sb
	add r3, r3, sb
	add r1, r1, r3
	add r3, r6, r1
	lsr r1, r3, #0xa
	orr r1, r1, r3, lsl #22
	add r3, ip, r1
	add r8, r8, #1
	cmp r8, #4
	blt _02009D88
	ldr r1, _0200A120 ; =0x0208EC84
	mov r6, #0
_02009E64:
	mvn r7, lr
	ldr sb, [r1]
	and r8, r3, lr
	and r7, ip, r7
	orr r7, r8, r7
	ldr r8, [r4, sb, lsl #2]
	add r2, r2, r7
	ldr r7, [r5]
	add r2, r8, r2
	add r7, r7, r2
	lsr r2, r7, #0x1b
	orr r2, r2, r7, lsl #5
	add r2, r3, r2
	mvn r8, ip
	ldr r7, [r1, #4]
	and sb, r2, ip
	and r8, r3, r8
	orr sl, sb, r8
	mvn r8, r3
	ldr sb, [r1, #8]
	ldr fp, [r4, r7, lsl #2]
	add r7, lr, sl
	add r7, fp, r7
	ldr sl, [r5, #4]
	ldr sb, [r4, sb, lsl #2]
	add sl, sl, r7
	ldr r7, [r1, #0xc]
	and r8, r2, r8
	ldr r7, [r4, r7, lsl #2]
	lsr fp, sl, #0x17
	orr sl, fp, sl, lsl #9
	add lr, r2, sl
	ldr sl, [r5, #8]
	and fp, lr, r3
	orr r8, fp, r8
	add r8, ip, r8
	add r8, sb, r8
	add sb, sl, r8
	lsr r8, sb, #0x12
	orr r8, r8, sb, lsl #14
	add ip, lr, r8
	mvn r8, r2
	and sb, lr, r8
	ldr r8, [r5, #0xc]
	add r5, r5, #0x10
	add r1, r1, #0x10
	and sl, ip, r2
	orr sb, sl, sb
	add r3, r3, sb
	add r3, r7, r3
	add r7, r8, r3
	lsr r3, r7, #0xc
	orr r3, r3, r7, lsl #20
	add r3, ip, r3
	add r6, r6, #1
	cmp r6, #4
	blt _02009E64
	mov r6, #0
_02009F4C:
	ldr r8, [r1]
	eor r7, r3, ip
	eor r7, lr, r7
	ldr r8, [r4, r8, lsl #2]
	add r2, r2, r7
	ldr r7, [r5]
	add r2, r8, r2
	add r7, r7, r2
	lsr r2, r7, #0x1c
	orr r2, r2, r7, lsl #4
	add r2, r3, r2
	ldr r8, [r1, #4]
	eor r7, r2, r3
	eor r7, ip, r7
	ldr r8, [r4, r8, lsl #2]
	add r7, lr, r7
	ldr sb, [r1, #8]
	ldr sl, [r5, #4]
	add r7, r8, r7
	add r8, sl, r7
	lsr r7, r8, #0x15
	orr r7, r7, r8, lsl #11
	add lr, r2, r7
	eor r8, lr, r2
	ldr r7, [r1, #0xc]
	ldr sb, [r4, sb, lsl #2]
	eor r8, r3, r8
	add r8, ip, r8
	add sb, sb, r8
	ldr sl, [r5, #8]
	ldr r8, [r4, r7, lsl #2]
	add sb, sl, sb
	lsr r7, sb, #0x10
	orr r7, r7, sb, lsl #16
	add ip, lr, r7
	eor r7, ip, lr
	eor r7, r2, r7
	add r3, r3, r7
	add r3, r8, r3
	ldr r7, [r5, #0xc]
	add r5, r5, #0x10
	add r7, r7, r3
	add r1, r1, #0x10
	lsr r3, r7, #9
	orr r3, r3, r7, lsl #23
	add r3, ip, r3
	add r6, r6, #1
	cmp r6, #4
	blt _02009F4C
	mov r8, #0
_0200A014:
	mvn r6, lr
	ldr r7, [r1]
	orr r6, r3, r6
	eor r6, ip, r6
	ldr r7, [r4, r7, lsl #2]
	add r2, r2, r6
	ldr r6, [r5]
	add r2, r7, r2
	add r6, r6, r2
	lsr r2, r6, #0x1a
	orr r2, r2, r6, lsl #6
	add r2, r3, r2
	mvn r6, ip
	ldr sb, [r1, #4]
	orr r6, r2, r6
	eor r7, r3, r6
	ldr r6, [r1, #8]
	ldr sb, [r4, sb, lsl #2]
	add r7, lr, r7
	ldr sl, [r5, #4]
	add r7, sb, r7
	add sb, sl, r7
	lsr r7, sb, #0x16
	orr sb, r7, sb, lsl #10
	ldr r7, [r1, #0xc]
	add lr, r2, sb
	mvn sb, r3
	ldr r6, [r4, r6, lsl #2]
	orr sb, lr, sb
	eor sb, r2, sb
	add sb, ip, sb
	add sb, r6, sb
	ldr sl, [r5, #8]
	ldr r6, [r4, r7, lsl #2]
	add sb, sl, sb
	lsr r7, sb, #0x11
	orr sb, r7, sb, lsl #15
	ldr r7, [r5, #0xc]
	add ip, lr, sb
	add r5, r5, #0x10
	add r1, r1, #0x10
	mvn sb, r2
	orr sb, ip, sb
	eor sb, lr, sb
	add r3, r3, sb
	add r3, r6, r3
	add r6, r7, r3
	lsr r3, r6, #0xb
	orr r3, r3, r6, lsl #21
	add r3, ip, r3
	add r8, r8, #1
	cmp r8, #4
	blt _0200A014
	ldr r6, [r0]
	ldr r5, [r0, #4]
	ldr r4, [r0, #8]
	ldr r1, [r0, #0xc]
	add r6, r6, r2
	add r3, r5, r3
	add r2, r4, ip
	add r1, r1, lr
	str r6, [r0]
	str r3, [r0, #4]
	str r2, [r0, #8]
	str r1, [r0, #0xc]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0200A11C: .word 0x0208ED44
_0200A120: .word 0x0208EC84

	arm_func_start FUN_0200a124
FUN_0200a124: ; 0x0200A124
	push {r3, lr}
	ldr lr, _0200A158 ; =0x67452301
	mov r2, #0
	ldr ip, _0200A15C ; =0xEFCDAB89
	ldr r3, _0200A160 ; =0x98BADCFE
	ldr r1, _0200A164 ; =0x10325476
	str lr, [r0]
	str ip, [r0, #4]
	str r3, [r0, #8]
	str r1, [r0, #0xc]
	str r2, [r0, #0x10]
	str r2, [r0, #0x14]
	pop {r3, pc}
	.align 2, 0_0200A158: .word 0x67452301
_0200A15C: .word 0xEFCDAB89
_0200A160: .word 0x98BADCFE
_0200A164: .word 0x10325476
	arm_func_end FUN_0200a124

	arm_func_start FUN_0200a168
FUN_0200a168: ; 0x0200A168
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	ldr r4, [r7, #0x10]
	ldr r0, [r7, #0x14]
	mov r5, r2
	adds ip, r4, r5
	and r3, r4, #0x3f
	adc lr, r0, #0
	rsb r4, r3, #0x40
	mov r6, r1
	str ip, [r7, #0x10]
	str lr, [r7, #0x14]
	cmp r4, r5
	bls _0200A1BC
	cmp r5, #0
	popeq {r4, r5, r6, r7, r8, pc}
	add r1, r7, #0x18
	mov r0, r6
	add r1, r1, r3
	bl _memcpy
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0200a168
_0200A1BC:
	add r1, r7, #0x18
	mov r0, r6
	mov r2, r4
	add r1, r1, r3
	bl _memcpy
	mov r0, r7
	bl FUN_02009d6c
	sub r5, r5, r4
	lsr r8, r5, #6
	cmp r8, #0
	add r6, r6, r4
	ble _0200A218
	mov r4, #0x40
_0200A1F0:
	mov r0, r6
	mov r2, r4
	add r1, r7, #0x18
	bl _memcpy
	mov r0, r7
	add r6, r6, #0x40
	bl FUN_02009d6c
	sub r8, r8, #1
	cmp r8, #0
	bgt _0200A1F0
_0200A218:
	ands r2, r5, #0x3f
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r6
	add r1, r7, #0x18
	bl _memcpy
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0200a230
FUN_0200a230: ; 0x0200A230
	push {r4, r5, r6, r7, r8, lr}
	mov r5, r0
	ldr r2, [r5, #0x14]
	mov r4, r1
	ldr ip, [r5, #0x10]
	lsl r7, r2, #3
	ldr r1, _0200A2E0 ; =0x0208EC80
	mov r2, #1
	orr r7, r7, ip, lsr #29
	lsl r6, ip, #3
	bl FUN_0200a168
	ldr r0, [r5, #0x10]
	mov r1, #0
	and r8, r0, #0x3f
	rsb r2, r8, #0x40
	cmp r2, #8
	bhs _0200A290
	add r0, r5, #0x18
	add r0, r0, r8
	mov r8, r1
	bl MemWrite
	mov r0, r5
	bl FUN_02009d6c
	mov r2, #0x40
	arm_func_end FUN_0200a230
_0200A290:
	cmp r2, #8
	bls _0200A2AC
	add r0, r5, #0x18
	add r0, r0, r8
	sub r2, r2, #8
	mov r1, #0
	bl MemWrite
_0200A2AC:
	mov r0, r5
	str r6, [r5, #0x50]
	str r7, [r5, #0x54]
	bl FUN_02009d6c
	mov r0, r5
	mov r1, r4
	mov r2, #0x10
	bl _memcpy
	mov r0, r5
	mov r1, #0
	mov r2, #0x58
	bl MemWrite
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0200A2E0: .word 0x0208EC80

	arm_func_start FUN_0200a2e4
FUN_0200a2e4: ; 0x0200A2E4
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r4, [r6, #0x2c]
	mov r1, #0
	ldr r5, [r6, #0x4c]
	str r1, [r6, #0x2c]
	str r1, [r6, #0x4c]
	bl FUN_0200aaa8
	str r4, [r6, #0x2c]
	str r5, [r6, #0x4c]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0200a2e4

	arm_func_start FUN_0200a310
FUN_0200a310: ; 0x0200A310
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	movs r7, r2
	mov sb, r0
	mov r8, r1
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr sl, _0200A39C ; =0x0208EE44
	add r5, sb, #0x14
	mov r4, #0
	arm_func_end FUN_0200a310
_0200A330:
	ldr r0, [sb, #0x54]
	mov r1, r8
	rsb r6, r0, #0x40
	cmp r6, r7
	movhi r6, r7
	mov r2, r6
	add r0, r5, r0
	bl MemWrite
	ldr r0, [sb, #0x54]
	sub r7, r7, r6
	add r0, r0, r6
	str r0, [sb, #0x54]
	cmp r0, #0x40
	blo _0200A390
	ldr r1, [sl]
	mov r0, sb
	blx r1
	ldr r0, [sb, #0x58]
	str r4, [sb, #0x54]
	adds r0, r0, #1
	str r0, [sb, #0x58]
	ldreq r0, [sb, #0x5c]
	addeq r0, r0, #1
	streq r0, [sb, #0x5c]
_0200A390:
	cmp r7, #0
	bne _0200A330
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0200A39C: .word 0x0208EE44

	arm_func_start FUN_0200a3a0
FUN_0200a3a0: ; 0x0200A3A0
	ldr r1, _0200A3CC ; =LAB_02093d9c
	cmp r0, #0
	ldr r2, [r1]
	str r0, [r1]
	ldrne r1, _0200A3D0 ; =FUN_0200a2e4
	ldrne r0, _0200A3D4 ; =0x0208EE44
	ldreq r1, _0200A3D8 ; =FUN_0200aaa8
	ldreq r0, _0200A3D4 ; =0x0208EE44
	str r1, [r0]
	mov r0, r2
	bx lr
	.align 2, 0_0200A3CC: .word LAB_02093d9c
_0200A3D0: .word FUN_0200a2e4
_0200A3D4: .word 0x0208EE44
_0200A3D8: .word FUN_0200aaa8
	arm_func_end FUN_0200a3a0

	arm_func_start FUN_0200a3dc
FUN_0200a3dc: ; 0x0200A3DC
	push {r4, lr}
	ldr lr, _0200A41C ; =0x67452301
	mov r4, #0
	ldr ip, _0200A420 ; =0xEFCDAB89
	ldr r3, _0200A424 ; =0x98BADCFE
	ldr r2, _0200A428 ; =0x10325476
	ldr r1, _0200A42C ; =0xC3D2E1F0
	str r4, [r0, #0x58]
	str r4, [r0, #0x5c]
	str r4, [r0, #0x54]
	str lr, [r0]
	str ip, [r0, #4]
	str r3, [r0, #8]
	str r2, [r0, #0xc]
	str r1, [r0, #0x10]
	pop {r4, pc}
	.align 2, 0_0200A41C: .word 0x67452301
_0200A420: .word 0xEFCDAB89
_0200A424: .word 0x98BADCFE
_0200A428: .word 0x10325476
_0200A42C: .word 0xC3D2E1F0
	arm_func_end FUN_0200a3dc

	arm_func_start FUN_0200a430
FUN_0200a430: ; 0x0200A430
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	movs r7, r2
	mov sb, r0
	mov r8, r1
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr sl, _0200A4C0 ; =0x0208EE44
	add r5, sb, #0x14
	mov r4, #0
	arm_func_end FUN_0200a430
_0200A450:
	ldr r1, [sb, #0x54]
	mov r0, r8
	rsb r6, r1, #0x40
	cmp r6, r7
	movhi r6, r7
	mov r2, r6
	add r1, r5, r1
	bl _memcpy
	ldr r0, [sb, #0x54]
	add r8, r8, r6
	add r0, r0, r6
	str r0, [sb, #0x54]
	cmp r0, #0x40
	sub r7, r7, r6
	blo _0200A4B4
	ldr r1, [sl]
	mov r0, sb
	blx r1
	ldr r0, [sb, #0x58]
	str r4, [sb, #0x54]
	adds r0, r0, #1
	str r0, [sb, #0x58]
	ldreq r0, [sb, #0x5c]
	addeq r0, r0, #1
	streq r0, [sb, #0x5c]
_0200A4B4:
	cmp r7, #0
	bne _0200A450
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0200A4C0: .word 0x0208EE44

	arm_func_start FUN_0200a4c4
FUN_0200a4c4: ; 0x0200A4C4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r4, r0
	ldr r3, [r4, #0x54]
	ldr r2, [r4, #0x58]
	lsl r3, r3, #3
	add r7, r3, r2, lsl #9
	lsr r5, r7, #0x18
	lsr r3, r7, #8
	lsl r6, r7, #8
	lsl r7, r7, #0x18
	and r5, r5, #0xff
	and r3, r3, #0xff00
	and r6, r6, #0xff0000
	orr r3, r5, r3
	and r5, r7, #0xff000000
	orr r3, r6, r3
	orr r3, r5, r3
	str r3, [sp, #4]
	ldr r3, [r4, #0x5c]
	lsr r2, r2, #0x17
	add r6, r2, r3, lsl #9
	lsr r3, r6, #0x18
	lsr r2, r6, #8
	lsl r5, r6, #8
	lsl r7, r6, #0x18
	mov r6, r1
	and r3, r3, #0xff
	and r1, r2, #0xff00
	and r2, r5, #0xff0000
	orr r1, r3, r1
	and r3, r7, #0xff000000
	orr r1, r2, r1
	orr r2, r3, r1
	ldr r1, _0200A6B4 ; =0x0208B978
	str r2, [sp]
	mov r2, #1
	bl FUN_0200a430
	ldr r0, [r4, #0x54]
	rsb r2, r0, #0x40
	cmp r2, #8
	bhs _0200A578
	ldr r1, _0200A6B8 ; =0x0208B979
	mov r0, r4
	bl FUN_0200a430
	arm_func_end FUN_0200a4c4
_0200A578:
	ldr r1, [r4, #0x54]
	mov r0, r4
	rsb r2, r1, #0x38
	mov r1, #0
	bl FUN_0200a310
	add r1, sp, #0
	mov r0, r4
	mov r2, #8
	bl FUN_0200a430
	ldm r4, {r5, ip}
	lsr r1, r5, #0x18
	and r7, r1, #0xff
	mov r1, r6
	lsl r6, r5, #0x18
	and lr, r6, #0xff000000
	lsl r6, r5, #8
	lsr r5, r5, #8
	and r5, r5, #0xff00
	and r6, r6, #0xff0000
	orr r5, r7, r5
	orr r5, r6, r5
	orr r5, lr, r5
	lsr r6, ip, #0x18
	str r5, [r4]
	lsr r5, ip, #8
	ldr r3, [r4, #8]
	and r6, r6, #0xff
	and r5, r5, #0xff00
	orr r6, r6, r5
	lsr r5, r3, #0x18
	and lr, r5, #0xff
	lsl r5, ip, #0x18
	and r7, r5, #0xff000000
	lsl r5, ip, #8
	and r5, r5, #0xff0000
	orr r5, r5, r6
	orr r6, r7, r5
	lsr r5, r3, #8
	and r5, r5, #0xff00
	ldr r2, [r4, #0xc]
	str r6, [r4, #4]
	lsr r6, r2, #0x18
	orr lr, lr, r5
	lsr r5, r2, #8
	ldr r0, [r4, #0x10]
	and r6, r6, #0xff
	and r5, r5, #0xff00
	orr ip, r6, r5
	lsr r5, r0, #0x18
	and r6, r5, #0xff
	lsl r5, r3, #0x18
	lsl r3, r3, #8
	and r3, r3, #0xff0000
	and r5, r5, #0xff000000
	orr r3, r3, lr
	orr r3, r5, r3
	str r3, [r4, #8]
	lsl r3, r2, #8
	lsl r2, r2, #0x18
	and lr, r2, #0xff000000
	and r2, r3, #0xff0000
	orr r2, r2, ip
	orr r3, lr, r2
	lsr r5, r0, #8
	lsl ip, r0, #8
	and r2, r5, #0xff00
	lsl lr, r0, #0x18
	orr r0, r6, r2
	and r5, ip, #0xff0000
	and r2, lr, #0xff000000
	orr r0, r5, r0
	orr r5, r2, r0
	mov r0, r4
	mov r2, #0x14
	str r3, [r4, #0xc]
	str r5, [r4, #0x10]
	bl _memcpy
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0200A6B4: .word 0x0208B978
_0200A6B8: .word 0x0208B979

	arm_func_start FUN_0200a6bc
FUN_0200a6bc: ; 0x0200A6BC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x60
	add r4, sp, #0
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r0, r4
	bl FUN_0200a3dc
	mov r0, r4
	mov r1, r6
	mov r2, r5
	bl FUN_0200a430
	mov r0, r4
	mov r1, r7
	bl FUN_0200a4c4
	add sp, sp, #0x60
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0200a6bc

	arm_func_start FUN_0200a700
FUN_0200a700: ; 0x0200A700
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x98
	ldr lr, _0200A784 ; =0x0208B984
	add ip, sp, #8
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	mov r4, ip
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm lr, {r0, r1, r2}
	stm ip, {r0, r1, r2}
	add lr, sp, #0x38
	add ip, sp, #0x24
	str lr, [sp, #0x10]
	ldr lr, _0200A788 ; =FUN_0200a3dc
	str ip, [sp, #0x14]
	ldr ip, _0200A78C ; =FUN_0200a430
	str lr, [sp, #0x18]
	ldr lr, _0200A790 ; =FUN_0200a4c4
	str ip, [sp, #0x1c]
	ldr ip, [sp, #0xb0]
	str lr, [sp, #0x20]
	str ip, [sp]
	mov r3, r5
	mov r0, r8
	mov r1, r7
	mov r2, r6
	str r4, [sp, #4]
	bl FUN_0200a794
	add sp, sp, #0x98
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0200A784: .word 0x0208B984
_0200A788: .word FUN_0200a3dc
_0200A78C: .word FUN_0200a430
_0200A790: .word FUN_0200a4c4
	arm_func_end FUN_0200a700

	arm_func_start FUN_0200a794
FUN_0200a794: ; 0x0200A794
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xc0
	ldr r5, [sp, #0xe0]
	ldr r4, [sp, #0xe4]
	mov r8, r1
	movs sb, r0
	mov r7, r2
	cmpne r8, #0
	mov r6, r3
	cmpne r7, #0
	cmpne r6, #0
	cmpne r5, #0
	cmpne r4, #0
	addeq sp, sp, #0xc0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r4, #4]
	cmp r5, r0
	bls _0200A814
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x10]
	blx r1
	ldr r0, [r4, #8]
	ldr r3, [r4, #0x14]
	mov r1, r6
	mov r2, r5
	blx r3
	add r6, sp, #0x80
	ldr r0, [r4, #8]
	ldr r2, [r4, #0x18]
	mov r1, r6
	blx r2
	ldr r5, [r4]
	arm_func_end FUN_0200a794
_0200A814:
	cmp r5, #0
	mov r0, #0
	bls _0200A83C
	add r1, sp, #0x40
_0200A824:
	ldrb r2, [r6, r0]
	eor r2, r2, #0x36
	strb r2, [r1, r0]
	add r0, r0, #1
	cmp r0, r5
	blo _0200A824
_0200A83C:
	ldr r1, [r4, #4]
	cmp r0, r1
	bhs _0200A864
	mov r3, #0x36
	add r2, sp, #0x40
_0200A850:
	strb r3, [r2, r0]
	ldr r1, [r4, #4]
	add r0, r0, #1
	cmp r0, r1
	blo _0200A850
_0200A864:
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x10]
	blx r1
	ldr r0, [r4, #8]
	ldr r2, [r4, #4]
	ldr r3, [r4, #0x14]
	add r1, sp, #0x40
	blx r3
	ldr r0, [r4, #8]
	ldr r3, [r4, #0x14]
	mov r1, r8
	mov r2, r7
	blx r3
	ldr r0, [r4, #8]
	ldr r1, [r4, #0xc]
	ldr r2, [r4, #0x18]
	blx r2
	cmp r5, #0
	mov r3, #0
	bls _0200A8D0
	add r0, sp, #0
_0200A8B8:
	ldrb r1, [r6, r3]
	eor r1, r1, #0x5c
	strb r1, [r0, r3]
	add r3, r3, #1
	cmp r3, r5
	blo _0200A8B8
_0200A8D0:
	ldr r0, [r4, #4]
	cmp r3, r0
	bhs _0200A8F8
	mov r2, #0x5c
	add r1, sp, #0
_0200A8E4:
	strb r2, [r1, r3]
	ldr r0, [r4, #4]
	add r3, r3, #1
	cmp r3, r0
	blo _0200A8E4
_0200A8F8:
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x10]
	blx r1
	ldr r0, [r4, #8]
	ldr r2, [r4, #4]
	ldr r3, [r4, #0x14]
	add r1, sp, #0
	blx r3
	ldr r0, [r4, #8]
	ldr r1, [r4, #0xc]
	ldr r2, [r4]
	ldr r3, [r4, #0x14]
	blx r3
	ldr r0, [r4, #8]
	ldr r2, [r4, #0x18]
	mov r1, sb
	blx r2
	add sp, sp, #0xc0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0200a944
FUN_0200a944: ; 0x0200A944
	push {r3, lr}
	mov lr, #0
	mov r3, lr
	arm_func_end FUN_0200a944
_0200A950:
	mov ip, lr
	mov r2, r3
_0200A958:
	tst ip, #1
	eorne ip, r1, ip, lsr #1
	add r2, r2, #1
	lsreq ip, ip, #1
	cmp r2, #8
	blo _0200A958
	lsl r2, lr, #1
	add lr, lr, #1
	strh ip, [r0, r2]
	cmp lr, #0x100
	blo _0200A950
	pop {r3, pc}

	arm_func_start FUN_0200a988
FUN_0200a988: ; 0x0200A988
	push {r4, lr}
	cmp r3, #0
	ldrh lr, [r1]
	mov r4, #0
	bls _0200A9C0
	arm_func_end FUN_0200a988
_0200A99C:
	ldrb ip, [r2], #1
	add r4, r4, #1
	cmp r4, r3
	eor ip, lr, ip
	lsl ip, ip, #0x18
	lsr ip, ip, #0x17
	ldrh ip, [r0, ip]
	eor lr, ip, lr, lsr #8
	blo _0200A99C
_0200A9C0:
	strh lr, [r1]
	pop {r4, pc}

	arm_func_start FUN_0200a9c8
FUN_0200a9c8: ; 0x0200A9C8
	push {r3, lr}
	mov ip, #0
	mov r2, ip
	arm_func_end FUN_0200a9c8
_0200A9D4:
	mov r3, ip
	mov lr, r2
_0200A9DC:
	tst r3, #1
	eorne r3, r1, r3, lsr #1
	add lr, lr, #1
	lsreq r3, r3, #1
	cmp lr, #8
	blo _0200A9DC
	str r3, [r0, ip, lsl #2]
	add ip, ip, #1
	cmp ip, #0x100
	blo _0200A9D4
	pop {r3, pc}

	arm_func_start FUN_0200aa08
FUN_0200aa08: ; 0x0200AA08
	push {r4, lr}
	cmp r3, #0
	ldr lr, [r1]
	mov r4, #0
	bls _0200AA3C
	arm_func_end FUN_0200aa08
_0200AA1C:
	ldrb ip, [r2], #1
	add r4, r4, #1
	cmp r4, r3
	eor ip, lr, ip
	and ip, ip, #0xff
	ldr ip, [r0, ip, lsl #2]
	eor lr, ip, lr, lsr #8
	blo _0200AA1C
_0200AA3C:
	str lr, [r1]
	pop {r4, pc}

	arm_func_start FUN_0200aa44
FUN_0200aa44: ; 0x0200AA44
	push {r3, lr}
	mov lr, r1
	mov ip, #0
	mov r3, r2
	add r1, sp, #0
	mov r2, lr
	strh ip, [sp]
	bl FUN_0200a988
	ldrh r0, [sp]
	pop {r3, pc}
	arm_func_end FUN_0200aa44

	arm_func_start FUN_0200aa6c
FUN_0200aa6c: ; 0x0200AA6C
	push {r3, lr}
	mov lr, r1
	mvn ip, #0
	mov r3, r2
	add r1, sp, #0
	mov r2, lr
	str ip, [sp]
	bl FUN_0200aa08
	ldr r0, [sp]
	mvn r0, r0
	pop {r3, pc}
	.align 2, 0_0200AA98: .word 0x5A827999
_0200AA9C: .word 0x6ED9EBA1
_0200AAA0: .word 0x8F1BBCDC
_0200AAA4: .word 0xCA62C1D6
	arm_func_end FUN_0200aa6c

	arm_func_start FUN_0200aaa8
FUN_0200aaa8: ; 0x0200AAA8
	push {r4, r5, r6, r7, r8, sb, sl, fp, ip, lr}
	mov fp, r0
	sub sp, sp, #0x40
	mov ip, sp
	mvn r3, #0xff00
	add r8, fp, #0x14
	mov r1, ip
	ldm r8!, {r4, r5, r6, r7}
	mov sb, #0x10
	arm_func_end FUN_0200aaa8
_0200AACC:
	eor r2, r4, r4, ror #16
	and r2, r3, r2, lsr #8
	eor r4, r2, r4, ror #8
	eor r2, r5, r5, ror #16
	and r2, r3, r2, lsr #8
	eor r5, r2, r5, ror #8
	eor r2, r6, r6, ror #16
	and r2, r3, r2, lsr #8
	eor r6, r2, r6, ror #8
	eor r2, r7, r7, ror #16
	and r2, r3, r2, lsr #8
	eor r7, r2, r7, ror #8
	stm r1!, {r4, r5, r6, r7}
	subs sb, sb, #4
	ldmne r8!, {r4, r5, r6, r7}
	bne _0200AACC
	ldm fp, {r4, r5, r6, r7, r8}
	ldr ip, _0200AA98 ; =0x5A827999
	mov sb, #0
_0200AB18:
	and sl, r5, r6
	mvn lr, r5
	and lr, lr, r7
	orr sl, sl, lr
	add sl, sl, ip
	and lr, sb, #0xf
	ldr lr, [sp, lr, lsl #2]
	add sl, sl, r8
	add sl, sl, lr
	add sl, sl, r4, ror #27
	mov r8, r7
	mov r7, r6
	ror r6, r5, #2
	mov r5, r4
	mov r4, sl
	add sb, sb, #1
	cmp sb, #0x10
	bne _0200AB18
_0200AB60:
	and sl, r5, r6
	mvn lr, r5
	and lr, lr, r7
	orr sl, sl, lr
	add sl, sl, ip
	sub r2, sb, #0x10
	and r2, r2, #0xf
	sub lr, sb, #0xe
	and lr, lr, #0xf
	ldr r3, [sp, r2, lsl #2]
	ldr r1, [sp, lr, lsl #2]
	sub lr, sb, #8
	eor r3, r3, r1
	and lr, lr, #0xf
	ldr r1, [sp, lr, lsl #2]
	sub r2, sb, #3
	eor r3, r3, r1
	and r2, r2, #0xf
	ldr r1, [sp, r2, lsl #2]
	and r2, sb, #0xf
	eor r3, r3, r1
	ror r3, r3, #0x1f
	str r3, [sp, r2, lsl #2]
	and lr, sb, #0xf
	ldr lr, [sp, lr, lsl #2]
	add sl, sl, r8
	add sl, sl, lr
	add sl, sl, r4, ror #27
	mov r8, r7
	mov r7, r6
	ror r6, r5, #2
	mov r5, r4
	mov r4, sl
	add sb, sb, #1
	cmp sb, #0x14
	bne _0200AB60
	ldr ip, _0200AA9C ; =0x6ED9EBA1
_0200ABF4:
	eor sl, r5, r6
	eor sl, sl, r7
	add sl, sl, ip
	sub r2, sb, #0x10
	and r2, r2, #0xf
	sub lr, sb, #0xe
	and lr, lr, #0xf
	ldr r3, [sp, r2, lsl #2]
	ldr r1, [sp, lr, lsl #2]
	sub lr, sb, #8
	eor r3, r3, r1
	and lr, lr, #0xf
	ldr r1, [sp, lr, lsl #2]
	sub r2, sb, #3
	eor r3, r3, r1
	and r2, r2, #0xf
	ldr r1, [sp, r2, lsl #2]
	and r2, sb, #0xf
	eor r3, r3, r1
	ror r3, r3, #0x1f
	str r3, [sp, r2, lsl #2]
	and lr, sb, #0xf
	ldr lr, [sp, lr, lsl #2]
	add sl, sl, r8
	add sl, sl, lr
	add sl, sl, r4, ror #27
	mov r8, r7
	mov r7, r6
	ror r6, r5, #2
	mov r5, r4
	mov r4, sl
	add sb, sb, #1
	cmp sb, #0x28
	bne _0200ABF4
	ldr ip, _0200AAA0 ; =0x8F1BBCDC
_0200AC80:
	and sl, r5, r6
	and lr, r5, r7
	orr sl, sl, lr
	and lr, r6, r7
	orr sl, sl, lr
	add sl, sl, ip
	sub r2, sb, #0x10
	and r2, r2, #0xf
	sub lr, sb, #0xe
	and lr, lr, #0xf
	ldr r3, [sp, r2, lsl #2]
	ldr r1, [sp, lr, lsl #2]
	sub lr, sb, #8
	eor r3, r3, r1
	and lr, lr, #0xf
	ldr r1, [sp, lr, lsl #2]
	sub r2, sb, #3
	eor r3, r3, r1
	and r2, r2, #0xf
	ldr r1, [sp, r2, lsl #2]
	and r2, sb, #0xf
	eor r3, r3, r1
	ror r3, r3, #0x1f
	str r3, [sp, r2, lsl #2]
	and lr, sb, #0xf
	ldr lr, [sp, lr, lsl #2]
	add sl, sl, r8
	add sl, sl, lr
	add sl, sl, r4, ror #27
	mov r8, r7
	mov r7, r6
	ror r6, r5, #2
	mov r5, r4
	mov r4, sl
	add sb, sb, #1
	cmp sb, #0x3c
	bne _0200AC80
	ldr ip, _0200AAA4 ; =0xCA62C1D6
_0200AD18:
	eor sl, r5, r6
	eor sl, sl, r7
	add sl, sl, ip
	sub r2, sb, #0x10
	and r2, r2, #0xf
	sub lr, sb, #0xe
	and lr, lr, #0xf
	ldr r3, [sp, r2, lsl #2]
	ldr r1, [sp, lr, lsl #2]
	sub lr, sb, #8
	eor r3, r3, r1
	and lr, lr, #0xf
	ldr r1, [sp, lr, lsl #2]
	sub r2, sb, #3
	eor r3, r3, r1
	and r2, r2, #0xf
	ldr r1, [sp, r2, lsl #2]
	and r2, sb, #0xf
	eor r3, r3, r1
	ror r3, r3, #0x1f
	str r3, [sp, r2, lsl #2]
	and lr, sb, #0xf
	ldr lr, [sp, lr, lsl #2]
	add sl, sl, r8
	add sl, sl, lr
	add sl, sl, r4, ror #27
	mov r8, r7
	mov r7, r6
	ror r6, r5, #2
	mov r5, r4
	mov r4, sl
	add sb, sb, #1
	cmp sb, #0x50
	bne _0200AD18
	ldm fp, {r1, r2, r3, sb, sl}
	add r1, r1, r4
	add r2, r2, r5
	add r3, r3, r6
	add sb, sb, r7
	add sl, sl, r8
	stm fp, {r1, r2, r3, sb, sl}
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, fp, ip, pc}

	arm_func_start FUN_0200adc4
FUN_0200adc4: ; 0x0200ADC4
	push {r3, r4, r5, lr}
	ldr r0, _0200AE28 ; =_02093DA0
	ldrh r1, [r0]
	cmp r1, #0
	popne {r3, r4, r5, pc}
	mov r1, #1
	strh r1, [r0]
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0x20]
	str r1, [r0, #0xc]
	str r1, [r0, #0x10]
	bl FUN_0201598c
	mov r5, #5
	mov r4, #1
	arm_func_end FUN_0200adc4
_0200AE04:
	mov r0, r5
	mov r1, r4
	bl FUN_02015ae0
	cmp r0, #0
	beq _0200AE04
	ldr r1, _0200AE2C ; =FUN_0200b034
	mov r0, r5
	bl FUN_02015a94
	pop {r3, r4, r5, pc}
	.align 2, 0_0200AE28: .word _02093DA0
_0200AE2C: .word FUN_0200b034

	arm_func_start FUN_0200ae30
FUN_0200ae30: ; 0x0200AE30
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	bl FUN_02003da8
	ldr r4, _0200AE9C ; =_02093DA0
	ldr r1, [r4, #4]
	cmp r1, #0
	beq _0200AE60
	bl FUN_02003dbc
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0200ae30
_0200AE60:
	mov r1, #1
	str r1, [r4, #4]
	bl FUN_02003dbc
	mov r5, #0
	str r5, [r4, #0x18]
	str r5, [r4, #0x1c]
	str r8, [r4, #0xc]
	str r7, [r4, #8]
	str r6, [r4, #0x14]
	bl FUN_0200b514
	cmp r0, #0
	movne r0, r5
	streq r5, [r4, #4]
	moveq r0, #3
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0200AE9C: .word _02093DA0

	arm_func_start FUN_0200aea0
FUN_0200aea0: ; 0x0200AEA0
	push {r3, lr}
	ldr r1, _0200AED0 ; =FUN_0200b4dc
	mov r2, #0
	bl FUN_0200ae30
	ldr r1, _0200AED4 ; =_02093DA0
	cmp r0, #0
	str r0, [r1, #0x24]
	bne _0200AEC4
	bl FUN_0200b4ec
	arm_func_end FUN_0200aea0
_0200AEC4:
	ldr r0, _0200AED4 ; =_02093DA0
	ldr r0, [r0, #0x24]
	pop {r3, pc}
	.align 2, 0_0200AED0: .word FUN_0200b4dc
_0200AED4: .word _02093DA0

	arm_func_start FUN_0200aed8
FUN_0200aed8: ; 0x0200AED8
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	bl FUN_02003da8
	ldr r4, _0200AF44 ; =_02093DA0
	ldr r1, [r4, #4]
	cmp r1, #0
	beq _0200AF08
	bl FUN_02003dbc
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0200aed8
_0200AF08:
	mov r5, #1
	str r5, [r4, #4]
	bl FUN_02003dbc
	str r5, [r4, #0x18]
	mov r5, #0
	str r5, [r4, #0x1c]
	str r8, [r4, #0xc]
	str r7, [r4, #8]
	str r6, [r4, #0x14]
	bl FUN_0200b524
	cmp r0, #0
	movne r0, r5
	streq r5, [r4, #4]
	moveq r0, #3
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0200AF44: .word _02093DA0

	arm_func_start FUN_0200af48
FUN_0200af48: ; 0x0200AF48
	push {r3, lr}
	ldr r1, _0200AF78 ; =FUN_0200b4dc
	mov r2, #0
	bl FUN_0200aed8
	ldr r1, _0200AF7C ; =_02093DA0
	cmp r0, #0
	str r0, [r1, #0x24]
	bne _0200AF6C
	bl FUN_0200b4ec
	arm_func_end FUN_0200af48
_0200AF6C:
	ldr r0, _0200AF7C ; =_02093DA0
	ldr r0, [r0, #0x24]
	pop {r3, pc}
	.align 2, 0_0200AF78: .word FUN_0200b4dc
_0200AF7C: .word _02093DA0

	arm_func_start FUN_0200af80
FUN_0200af80: ; 0x0200AF80
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_02003da8
	ldr r8, _0200AFF8 ; =_02093DA0
	ldr r1, [r8, #4]
	cmp r1, #0
	beq _0200AFB4
	bl FUN_02003dbc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_0200af80
_0200AFB4:
	mov r1, #1
	str r1, [r8, #4]
	bl FUN_02003dbc
	mov r0, #2
	str r0, [r8, #0x18]
	mov sb, #0
	str sb, [r8, #0x1c]
	str r7, [r8, #0xc]
	str r6, [r8, #0x10]
	str r5, [r8, #8]
	str r4, [r8, #0x14]
	bl FUN_0200b504
	cmp r0, #0
	movne r0, sb
	streq sb, [r8, #4]
	moveq r0, #3
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0200AFF8: .word _02093DA0

	arm_func_start FUN_0200affc
FUN_0200affc: ; 0x0200AFFC
	push {r3, lr}
	ldr r2, _0200B02C ; =FUN_0200b4dc
	mov r3, #0
	bl FUN_0200af80
	ldr r1, _0200B030 ; =_02093DA0
	cmp r0, #0
	str r0, [r1, #0x24]
	bne _0200B020
	bl FUN_0200b4ec
	arm_func_end FUN_0200affc
_0200B020:
	ldr r0, _0200B030 ; =_02093DA0
	ldr r0, [r0, #0x24]
	pop {r3, pc}
	.align 2, 0_0200B02C: .word FUN_0200b4dc
_0200B030: .word _02093DA0

	arm_func_start FUN_0200b034
FUN_0200b034: ; 0x0200B034
	push {r4, r5, r6, r7, r8, lr}
	cmp r2, #0
	ldr r0, _0200B464 ; =0x02FFFDEA
	mov r4, #0
	ldr r6, _0200B468 ; =_02093DA0
	beq _0200B084
	ldr r0, [r6, #0x1c]
	cmp r0, #0
	strne r4, [r6, #0x1c]
	ldr r0, [r6, #4]
	cmp r0, #0
	strne r4, [r6, #4]
	ldr r2, [r6, #8]
	cmp r2, #0
	popeq {r4, r5, r6, r7, r8, pc}
	str r4, [r6, #8]
	ldr r1, [r6, #0x14]
	mov r0, #6
	blx r2
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0200b034
_0200B084:
	and r2, r1, #0x7f00
	lsr r2, r2, #8
	and r2, r2, #0xff
	cmp r2, #0x30
	and r1, r1, #0xff
	bne _0200B0B0
	ldr r0, [r6, #0x20]
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	blx r0
	pop {r4, r5, r6, r7, r8, pc}
_0200B0B0:
	cmp r1, #0
	bne _0200B3F0
	ldr r1, [r6, #0x18]
	mov r5, r4
	cmp r1, #0xf

	arm_func_start switchD
switchD: ; 0x0200B0C4
	addls pc, pc, r1, lsl #2
	arm_func_end switchD

	arm_func_start caseD_10
caseD_10: ; 0x0200B0C8
	b _0200B3E4
	arm_func_end caseD_10
_0200B0CC: ; jump table
	b LAB_0200b10c ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0200B0D0
	b _0200B160
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0200B0D4
	b _0200B1A8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0200B0D8
	b _0200B42C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0200B0DC
	b _0200B42C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0200B0E0
	b _0200B42C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0200B0E4
	b _0200B228
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0200B0E8
	b _0200B24C
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0200B0EC
	b _0200B26C
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0200B0F0
	b _0200B304
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0200B0F4
	b _0200B370
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0200B0F8
	b _0200B42C
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0200B0FC
	b _0200B42C
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0200B100
	b _0200B42C
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0200B104
	b _0200B42C
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0200B108
	b _0200B42C
	arm_func_end caseD_f
LAB_0200b10c:
	ldr r7, _0200B46C ; =0x02FFFDE8
	ldr r8, [r6, #0xc]
	ldr r0, [r7]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	bl FUN_0200b474
	str r0, [r8]
	ldr r0, [r7]
	lsl r0, r0, #0x13
	lsr r0, r0, #0x1b
	bl FUN_0200b474
	str r0, [r8, #4]
	ldr r0, [r7]
	lsl r0, r0, #0xa
	lsr r0, r0, #0x1a
	bl FUN_0200b474
	str r0, [r8, #8]
	mov r0, r8
	bl FUN_0200b678
	str r0, [r8, #0xc]
	b _0200B42C
_0200B160:
	ldr r7, _0200B470 ; =0x02FFFDEC
	ldr r8, [r6, #0xc]
	ldr r0, [r7]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1a
	bl FUN_0200b474
	str r0, [r8]
	ldr r0, [r7]
	lsl r0, r0, #0x11
	lsr r0, r0, #0x19
	bl FUN_0200b474
	str r0, [r8, #4]
	ldr r0, [r7]
_0200B194:
	lsl r0, r0, #9
	lsr r0, r0, #0x19
	bl FUN_0200b474
	str r0, [r8, #8]
	b _0200B42C
_0200B1A8:
	ldr r7, _0200B46C ; =0x02FFFDE8
	ldr r8, [r6, #0xc]
	ldr r0, [r7]
	and r0, r0, #0xff
	bl FUN_0200b474
	str r0, [r8]
	ldr r0, [r7]
	lsl r0, r0, #0x13
	lsr r0, r0, #0x1b
	bl FUN_0200b474
	str r0, [r8, #4]
	ldr r0, [r7]
	lsl r0, r0, #0xa
	lsr r0, r0, #0x1a
	bl FUN_0200b474
	str r0, [r8, #8]
	mov r0, r8
	bl FUN_0200b678
	str r0, [r8, #0xc]
	ldr r0, [r7, #4]
	ldr r8, [r6, #0x10]
	lsl r0, r0, #0x1a
	lsr r0, r0, #0x1a
	bl FUN_0200b474
	str r0, [r8]
	ldr r0, [r7, #4]
	lsl r0, r0, #0x11
	lsr r0, r0, #0x19
	bl FUN_0200b474
	str r0, [r8, #4]
	ldr r0, [r7, #4]
	b _0200B194
_0200B228:
	ldrh r0, [r0]
	ldr r1, [r6, #0xc]
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x1c
	cmp r0, #4
	moveq r0, #1
	streq r0, [r1]
	strne r5, [r1]
	b _0200B42C
_0200B24C:
	ldrh r0, [r0]
	ldr r1, [r6, #0xc]
	lsl r0, r0, #0x19
	lsrs r0, r0, #0x1f
	movne r0, #1
	strne r0, [r1]
	streq r5, [r1]
	b _0200B42C
_0200B26C:
	ldr r7, _0200B470 ; =0x02FFFDEC
	ldr r8, [r6, #0xc]
	ldr r0, [r7]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	str r0, [r8]
	ldr r0, [r7]
	lsl r0, r0, #0x12
	lsr r0, r0, #0x1a
	bl FUN_0200b474
	str r0, [r8, #4]
	ldr r0, [r7]
	lsl r0, r0, #9
	lsr r0, r0, #0x19
	bl FUN_0200b474
	str r0, [r8, #8]
	str r5, [r8, #0xc]
	ldr r0, [r7]
	lsl r0, r0, #0x18
	lsrs r0, r0, #0x1f
	ldrne r0, [r8, #0xc]
	addne r0, r0, #1
	strne r0, [r8, #0xc]
	ldr r0, _0200B470 ; =0x02FFFDEC
	ldr r0, [r0]
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x1f
	ldrne r0, [r8, #0xc]
	addne r0, r0, #2
	strne r0, [r8, #0xc]
	ldr r0, _0200B470 ; =0x02FFFDEC
	ldr r0, [r0]
	lsl r0, r0, #8
	lsrs r0, r0, #0x1f
	ldrne r0, [r8, #0xc]
	addne r0, r0, #4
	strne r0, [r8, #0xc]
	b _0200B42C
_0200B304:
	ldr r2, [r6, #0x1c]
	cmp r2, #0
	bne _0200B368
	ldr r1, [r6, #0xc]
	ldr r1, [r1]
	cmp r1, #1
	ldrh r1, [r0]
	lsl r1, r1, #0x1c
	bne _0200B34C
	lsr r1, r1, #0x1c
	cmp r1, #4
	beq _0200B42C
	add r1, r2, #1
	str r1, [r6, #0x1c]
	ldrh r1, [r0]
	bic r1, r1, #0xf
	orr r1, r1, #4
	b _0200B3C8
_0200B34C:
	lsrs r1, r1, #0x1c
	beq _0200B42C
	add r1, r2, #1
	str r1, [r6, #0x1c]
	ldrh r1, [r0]
	bic r1, r1, #0xf
	b _0200B3C8
_0200B368:
	str r5, [r6, #0x1c]
	b _0200B42C
_0200B370:
	ldr r2, [r6, #0x1c]
	cmp r2, #0
	bne _0200B3E0
	ldr r1, [r6, #0xc]
	ldr r1, [r1]
	cmp r1, #1
	ldrh r1, [r0]
	lsl r1, r1, #0x19
	bne _0200B3B0
	lsrs r1, r1, #0x1f
	bne _0200B42C
	add r1, r2, #1
	str r1, [r6, #0x1c]
	ldrh r1, [r0]
	orr r1, r1, #0x40
	b _0200B3C8
_0200B3B0:
	lsrs r1, r1, #0x1f
	beq _0200B42C
	add r1, r2, #1
	str r1, [r6, #0x1c]
	ldrh r1, [r0]
	bic r1, r1, #0x40
_0200B3C8:
	strh r1, [r0]
	bl FUN_0200b534
	cmp r0, #0
	streq r5, [r6, #0x1c]
	moveq r5, #3
	b _0200B42C
_0200B3E0:
	b _0200B368
_0200B3E4:
	str r4, [r6, #0x1c]
_0200B3E8:
	mov r5, #4
	b _0200B42C
_0200B3F0:
	str r4, [r6, #0x1c]
	cmp r1, #4

	arm_func_start switchD
switchD: ; 0x0200B3F8
	addls pc, pc, r1, lsl #2
	b _0200B428
_0200B400: ; jump table
	b _0200B428 ; case 0
	arm_func_end switchD

	arm_func_start caseD_1
caseD_1: ; 0x0200B404
	b _0200B414
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0200B408
	b _0200B418
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0200B40C
	b _0200B420
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0200B410
	b _0200B428
	arm_func_end caseD_4
_0200B414:
	b _0200B3E8
_0200B418:
	mov r5, #5
	b _0200B42C
_0200B420:
	mov r5, #1
	b _0200B42C
_0200B428:
	mov r5, #6
_0200B42C:
	ldr r0, [r6, #0x1c]
	cmp r0, #0
	popne {r4, r5, r6, r7, r8, pc}
	ldr r0, [r6, #4]
	cmp r0, #0
	strne r4, [r6, #4]
	ldr r2, [r6, #8]
	cmp r2, #0
	popeq {r4, r5, r6, r7, r8, pc}
	str r4, [r6, #8]
	ldr r1, [r6, #0x14]
	mov r0, r5
	blx r2
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0200B464: .word 0x02FFFDEA
_0200B468: .word _02093DA0
_0200B46C: .word 0x02FFFDE8
_0200B470: .word 0x02FFFDEC

	arm_func_start FUN_0200b474
FUN_0200b474: ; 0x0200B474
	push {r4, lr}
	mov ip, #0
	mov r2, ip
	arm_func_end FUN_0200b474
_0200B480:
	lsl r1, r2, #2
	lsr r1, r0, r1
	and r1, r1, #0xf
	cmp r1, #0xa
	movhs r0, #0
	pophs {r4, pc}
	add r2, r2, #1
	cmp r2, #8
	blt _0200B480
	mov r4, #0
	mov lr, #1
	mov r2, #0xa
_0200B4B0:
	lsl r1, r4, #2
	lsr r1, r0, r1
	and r3, r1, #0xf
	mul r1, lr, r2
	mla ip, lr, r3, ip
	add r4, r4, #1
	mov lr, r1
	cmp r4, #8
	blt _0200B4B0
	mov r0, ip
	pop {r4, pc}

	arm_func_start FUN_0200b4dc
FUN_0200b4dc: ; 0x0200B4DC
	ldr r1, _0200B4E8 ; =_02093DA0
	str r0, [r1, #0x24]
	bx lr
	.align 2, 0_0200B4E8: .word _02093DA0
	arm_func_end FUN_0200b4dc

	arm_func_start FUN_0200b4ec
FUN_0200b4ec: ; 0x0200B4EC
	ldr ip, _0200B500 ; =LAB_02093da4
	arm_func_end FUN_0200b4ec
_0200B4F0:
	ldr r0, [ip]
	cmp r0, #1
	beq _0200B4F0
	bx lr
	.align 2, 0_0200B500: .word LAB_02093da4

	arm_func_start FUN_0200b504
FUN_0200b504: ; 0x0200B504
	ldr ip, _0200B510 ; =LAB_0200b544
	mov r0, #0x10
	bx ip
	.align 2, 0_0200B510: .word LAB_0200b544
	arm_func_end FUN_0200b504

	arm_func_start FUN_0200b514
FUN_0200b514: ; 0x0200B514
	ldr ip, _0200B520 ; =LAB_0200b544
	mov r0, #0x11
	bx ip
	.align 2, 0_0200B520: .word LAB_0200b544
	arm_func_end FUN_0200b514

	arm_func_start FUN_0200b524
FUN_0200b524: ; 0x0200B524
	ldr ip, _0200B530 ; =LAB_0200b544
	mov r0, #0x12
	bx ip
	.align 2, 0_0200B530: .word LAB_0200b544
	arm_func_end FUN_0200b524

	arm_func_start FUN_0200b534
FUN_0200b534: ; 0x0200B534
	ldr ip, _0200B540 ; =LAB_0200b544
	mov r0, #0x27
	bx ip
	.align 2, 0_0200B540: .word LAB_0200b544
	arm_func_end FUN_0200b534

	arm_func_start LAB_0200b544
LAB_0200b544: ; 0x0200B544
	push {r4, lr}
	lsl r0, r0, #8
	mov r4, #0
	and r1, r0, #0x7f00
	mov r2, r4
	mov r0, #5
	bl FUN_02015b04
	cmp r0, #0
	movge r4, #1
	mov r0, r4
	pop {r4, pc}
	arm_func_end LAB_0200b544

	arm_func_start FUN_0200b570
FUN_0200b570: ; 0x0200B570
	ldr r3, [r0]
	cmp r3, #0x64
	bhs _0200B5C0
	ldr r2, [r0, #4]
	cmp r2, #1
	blo _0200B5C0
	cmp r2, #0xc
	bhi _0200B5C0
	ldr r1, [r0, #8]
	cmp r1, #1
	blo _0200B5C0
	cmp r1, #0x1f
	bhi _0200B5C0
	ldr r0, [r0, #0xc]
	cmp r0, #7
	bge _0200B5C0
	cmp r2, #1
	blo _0200B5C0
	cmp r2, #0xc
	bls _0200B5C8
	arm_func_end FUN_0200b570
_0200B5C0:
	mvn r0, #0
	bx lr
_0200B5C8:
	ldr r0, _0200B5FC ; =0x0208EE44
	sub r1, r1, #1
	ldr r0, [r0, r2, lsl #2]
	cmp r2, #3
	add r2, r1, r0
	blo _0200B5E8
	tst r3, #3
	addeq r2, r2, #1
_0200B5E8:
	ldr r0, _0200B600 ; =0x0000016D
	add r1, r3, #3
	mla r0, r3, r0, r2
	add r0, r0, r1, lsr #2
	bx lr
	.align 2, 0_0200B5FC: .word 0x0208EE44
_0200B600: .word 0x0000016D

	arm_func_start FUN_0200b604
FUN_0200b604: ; 0x0200B604
	mov r1, #0x3c
	ldm r0, {r2, r3}
	mla r3, r2, r1, r3
	ldr r0, [r0, #8]
	mla r0, r3, r1, r0
	bx lr
	arm_func_end FUN_0200b604

	arm_func_start FUN_0200b61c
FUN_0200b61c: ; 0x0200B61C
	push {r4, r5, r6, lr}
	mov r6, r1
	bl FUN_0200b570
	mov r4, r0
	mvn r5, #0
	cmp r4, r5
	moveq r0, r5
	moveq r1, r5
	popeq {r4, r5, r6, pc}
	mov r0, r6
	bl FUN_0200b604
	cmp r0, r5
	moveq r1, r5
	beq _0200B66C
	ldr r1, _0200B674 ; =0x00015180
	asr r2, r4, #0x1f
	umull ip, r3, r4, r1
	mla r3, r2, r1, r3
	adds r5, r0, ip
	adc r1, r3, r0, asr #31
	arm_func_end FUN_0200b61c
_0200B66C:
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0_0200B674: .word 0x00015180

	arm_func_start FUN_0200b678
FUN_0200b678: ; 0x0200B678
	push {r4, r5, r6, lr}
	ldr r1, [r0, #4]
	ldr r2, [r0]
	sub r1, r1, #2
	cmp r1, #1
	add ip, r2, #0x7d0
	sublt ip, ip, #1
	ldr r6, _0200B728 ; =0x51EB851F
	ldr lr, [r0, #8]
	smull r3, r2, r6, ip
	smull r4, r3, r6, ip
	lsr r5, ip, #0x1f
	add r3, r5, r3, asr #5
	add r2, r5, r2, asr #5
	mov r5, #0x64
	smull r2, r4, r5, r2
	sub r2, ip, r2
	addlt r1, r1, #0xc
	mov r0, #0x1a
	mul r0, r1, r0
	sub r1, r0, #2
	ldr r0, _0200B72C ; =0x66666667
	lsr r5, r1, #0x1f
	smull r1, ip, r0, r1
	add ip, r5, ip, asr #2
	asr r4, r2, #1
	add r0, lr, ip
	add r1, r2, r4, lsr #30
	add r2, r2, r0
	asr r6, r3, #1
	add r0, r3, r6, lsr #30
	add r1, r2, r1, asr #2
	add r1, r1, r0, asr #2
	add r0, r3, r3, lsl #2
	add r4, r1, r0
	ldr r3, _0200B730 ; =0x92492493
	lsr r1, r4, #0x1f
	smull r2, r0, r3, r4
	add r0, r4, r0
	add r0, r1, r0, asr #2
	mov r2, #7
	smull r0, r1, r2, r0
	sub r0, r4, r0
	pop {r4, r5, r6, pc}
	.align 2, 0_0200B728: .word 0x51EB851F
_0200B72C: .word 0x66666667
_0200B730: .word 0x92492493
	arm_func_end FUN_0200b678

	arm_func_start FUN_0200b734
FUN_0200b734: ; 0x0200B734
	push {r3, lr}
	mov r2, #0
	mov r1, r0
	mov r3, r2
	mov r0, #1
	str r2, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b734

	arm_func_start FUN_0200b754
FUN_0200b754: ; 0x0200B754
	push {r3, lr}
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	mov r1, r0
	mov r2, lr
	mov r3, ip
	mov r0, #2
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b754

	arm_func_start FUN_0200b77c
FUN_0200b77c: ; 0x0200B77C
	push {r3, lr}
	mov r2, #0
	mov r1, r0
	mov r3, r2
	mov r0, #3
	str r2, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b77c

	arm_func_start FUN_0200b79c
FUN_0200b79c: ; 0x0200B79C
	ldr ip, _0200B7B0 ; =FUN_0200bad4
	mov r2, r1
	mov r1, #6
	mov r3, #2
	bx ip
	.align 2, 0_0200B7B0: .word FUN_0200bad4
	arm_func_end FUN_0200b79c

	arm_func_start FUN_0200b7b4
FUN_0200b7b4: ; 0x0200B7B4
	ldr ip, _0200B7C8 ; =FUN_0200bad4
	mov r2, r1
	mov r1, #4
	mov r3, #1
	bx ip
	.align 2, 0_0200B7C8: .word FUN_0200bad4
	arm_func_end FUN_0200b7b4

	arm_func_start FUN_0200b7cc
FUN_0200b7cc: ; 0x0200B7CC
	push {r3, lr}
	mov r3, r2
	mov ip, #2
	mov r2, #0xc
	str ip, [sp]
	bl FUN_0200bafc
	pop {r3, pc}
	arm_func_end FUN_0200b7cc

	arm_func_start FUN_0200b7e8
FUN_0200b7e8: ; 0x0200B7E8
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	mov ip, #0
	mov r1, r0
	mov r2, lr
	mov r0, #9
	str ip, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b7e8

	arm_func_start FUN_0200b810
FUN_0200b810: ; 0x0200B810
	push {r3, lr}
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	mov r1, r0
	mov r2, lr
	mov r3, ip
	mov r0, #0xc
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b810

	arm_func_start FUN_0200b838
FUN_0200b838: ; 0x0200B838
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r2
	mov sb, r0
	mov r8, r1
	mov r6, r3
	mov r5, r7
	mov r4, #0
	b _0200B870
	arm_func_end FUN_0200b838
_0200B858:
	tst r5, #1
	beq _0200B868
	mov r0, r4
	bl FUN_0200c2e0
_0200B868:
	add r4, r4, #1
	lsr r5, r5, #1
_0200B870:
	cmp r4, #8
	bge _0200B880
	cmp r5, #0
	bne _0200B858
_0200B880:
	mov r1, sb
	mov r2, r8
	mov r3, r7
	mov r0, #0xd
	str r6, [sp]
	bl FUN_0200bb24
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0200b89c
FUN_0200b89c: ; 0x0200B89C
	push {r3, lr}
	lsl r1, r1, #0x1e
	orr r0, r1, r0, lsl #31
	ldr ip, [sp, #8]
	mov r1, r2
	orr r0, r0, ip, lsl #29
	ldr r2, [sp, #0xc]
	mov lr, #0
	orr r0, r0, r2, lsl #28
	ldr ip, [sp, #0x10]
	mov r2, r3
	orr r3, r0, ip, lsl #27
	mov r0, #0x11
	str lr, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b89c

	arm_func_start FUN_0200b8dc
FUN_0200b8dc: ; 0x0200B8DC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r4, r2
	mov r5, r1
	ldr r2, [sp, #0x18]
	mov r6, r0
	mov r1, r3
	bl FUN_0200c300
	str r0, [sp]
	mov r1, r6
	mov r2, r5
	mov r3, r4
	mov r0, #0x12
	bl FUN_0200bb24
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0200b8dc

	arm_func_start FUN_0200b91c
FUN_0200b91c: ; 0x0200B91C
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x1a
	str r3, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b91c

	arm_func_start FUN_0200b93c
FUN_0200b93c: ; 0x0200B93C
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x1b
	str r3, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b93c

	arm_func_start FUN_0200b95c
FUN_0200b95c: ; 0x0200B95C
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x13
	str r3, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b95c

	arm_func_start FUN_0200b97c
FUN_0200b97c: ; 0x0200B97C
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	mov ip, #0
	mov r1, r0
	mov r2, lr
	mov r0, #0x14
	str ip, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b97c

	arm_func_start FUN_0200b9a4
FUN_0200b9a4: ; 0x0200B9A4
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x15
	str r3, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200b9a4

	arm_func_start FUN_0200b9c4
FUN_0200b9c4: ; 0x0200B9C4
	push {r3, r4, r5, lr}
	ldr ip, [sp, #0x1c]
	lsl r1, r1, #0x18
	orr r4, r1, r3, lsl #26
	ldr r5, [sp, #0x24]
	lsl r1, ip, #0x16
	ldr r3, [sp, #0x18]
	ldr ip, [sp, #0x10]
	orr r4, r4, r5, lsl #16
	orr r4, ip, r4
	ldr lr, [sp, #0x20]
	orr r3, r1, r3, lsl #24
	ldr ip, [sp, #0x14]
	orr r1, r0, lr, lsl #16
	orr r3, ip, r3
	mov r0, #0xe
	str r4, [sp]
	bl FUN_0200bb24
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200b9c4

	arm_func_start FUN_0200ba10
FUN_0200ba10: ; 0x0200BA10
	push {r3, lr}
	ldr lr, [sp, #8]
	ldr ip, [sp, #0xc]
	str r1, [sp]
	orr r2, r2, r3, lsl #8
	mov r1, r0
	orr r3, ip, lr, lsl #8
	mov r0, #0xf
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200ba10

	arm_func_start FUN_0200ba38
FUN_0200ba38: ; 0x0200BA38
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr ip, [sp, #0x10]
	mov r4, r1
	mov lr, #0
	mov r1, r0
	orr r2, r4, r2, lsl #8
	orr r3, ip, r3, lsl #8
	mov r0, #0x10
	str lr, [sp]
	bl FUN_0200bb24
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0200ba38

	arm_func_start FUN_0200ba6c
FUN_0200ba6c: ; 0x0200BA6C
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x1f
	str r3, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200ba6c

	arm_func_start FUN_0200ba8c
FUN_0200ba8c: ; 0x0200BA8C
	push {r3, lr}
	mov r2, r1
	mov r3, #0
	mov r1, r0
	mov r0, #0x20
	str r3, [sp]
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200ba8c

	arm_func_start FUN_0200baac
FUN_0200baac: ; 0x0200BAAC
	push {r3, lr}
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	mov r1, r0
	mov r2, lr
	mov r3, ip
	mov r0, #0x19
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200baac

	arm_func_start FUN_0200bad4
FUN_0200bad4: ; 0x0200BAD4
	push {r3, lr}
	mov lr, r1
	mov ip, r2
	str r3, [sp]
	mov r1, r0
	mov r2, lr
	mov r3, ip
	mov r0, #6
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200bad4

	arm_func_start FUN_0200bafc
FUN_0200bafc: ; 0x0200BAFC
	push {r3, lr}
	ldr ip, [sp, #8]
	mov lr, r2
	str r3, [sp]
	mov r2, r1
	orr r1, r0, ip, lsl #24
	mov r3, lr
	mov r0, #7
	bl FUN_0200bb24
	pop {r3, pc}
	arm_func_end FUN_0200bafc

	arm_func_start FUN_0200bb24
FUN_0200bb24: ; 0x0200BB24
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r0, #1
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_0200bd98
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	str r7, [r0, #4]
	str r6, [r0, #8]
	str r5, [r0, #0xc]
	ldr r1, [sp, #0x18]
	str r4, [r0, #0x10]
	str r1, [r0, #0x14]
	bl FUN_0200be20
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0200bb24

	arm_func_start FUN_0200bb68
FUN_0200bb68: ; 0x0200BB68
	push {r3, lr}
	ldr r1, _0200BB98 ; =LAB_02093dc8
	ldr r0, [r1]
	cmp r0, #0
	popne {r3, pc}
	ldr r0, _0200BB9C ; =LAB_02093dcc
	mov r2, #1
	str r2, [r1]
	bl FUN_020023e4
	bl FUN_0200bbc8
	bl FUN_0200c2a8
	pop {r3, pc}
	.align 2, 0_0200BB98: .word LAB_02093dc8
_0200BB9C: .word LAB_02093dcc
	arm_func_end FUN_0200bb68

	arm_func_start FUN_0200bba0
FUN_0200bba0: ; 0x0200BBA0
	ldr r0, _0200BBAC ; =LAB_02093dcc
	ldr ip, _0200BBB0 ; =FUN_02002408
	bx ip
	.align 2, 0_0200BBAC: .word LAB_02093dcc
_0200BBB0: .word FUN_02002408
	arm_func_end FUN_0200bba0

	arm_func_start FUN_0200bbb4
FUN_0200bbb4: ; 0x0200BBB4
	ldr r0, _0200BBC0 ; =LAB_02093dcc
	ldr ip, _0200BBC4 ; =FUN_02002458
	bx ip
	.align 2, 0_0200BBC0: .word LAB_02093dcc
_0200BBC4: .word FUN_02002458
	arm_func_end FUN_0200bbb4

	arm_func_start FUN_0200bbc8
FUN_0200bbc8: ; 0x0200BBC8
	push {r3, r4, r5, lr}
	bl FUN_0200c194
	ldr r5, _0200BC80 ; =0x020940C0
	ldr r0, _0200BC84 ; =LAB_02093de4
	mov ip, #0
	str r5, [r0]
	mov r0, #0x18
	mov r1, r0
	b _0200BC00
	arm_func_end FUN_0200bbc8
_0200BBEC:
	add r3, ip, #1
	mul r2, ip, r1
	mla r4, r3, r0, r5
	mov ip, r3
	str r4, [r5, r2]
_0200BC00:
	cmp ip, #0xff
	blt _0200BBEC
	ldr r0, _0200BC88 ; =0x020950C0
	mov r3, #0
	str r3, [r0, #0x7e8]
	ldr r2, _0200BC8C ; =LAB_020958a8
	ldr r1, _0200BC84 ; =LAB_02093de4
	mov r5, #1
	str r2, [r1, #0x10]
	str r3, [r1, #8]
	str r3, [r1, #0xc]
	str r3, [r1, #0x1c]
	str r3, [r1, #0x14]
	str r3, [r1, #0x18]
	str r5, [r1, #0x20]
	ldr r0, _0200BC90 ; =LAB_02093e40
	ldr r4, _0200BC94 ; =LAB_02095920
	str r3, [r1, #4]
	str r0, [r4]
	bl FUN_0200c3e8
	mov r0, r5
	bl FUN_0200bd98
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r1, #0x1d
	str r1, [r0, #4]
	ldr r1, [r4]
	str r1, [r0, #8]
	bl FUN_0200be20
	mov r0, r5
	bl FUN_0200be58
	pop {r3, r4, r5, pc}
	.align 2, 0_0200BC80: .word 0x020940C0
_0200BC84: .word LAB_02093de4
_0200BC88: .word 0x020950C0
_0200BC8C: .word LAB_020958a8
_0200BC90: .word LAB_02093e40
_0200BC94: .word LAB_02095920

	arm_func_start FUN_0200bc98
FUN_0200bc98: ; 0x0200BC98
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r6, _0200BD90 ; =LAB_02093de4
	bl FUN_02003da8
	mov r4, r0
	tst r5, #1
	beq _0200BCF4
	bl FUN_0200c3c4
	ldr r1, [r6, #4]
	cmp r1, r0
	bne _0200BD14
	mov r5, #0x32
	arm_func_end FUN_0200bc98
_0200BCC8:
	mov r0, r4
	bl FUN_02003dbc
	mov r0, r5
	bl FUN_02003e24
	bl FUN_02003da8
	mov r4, r0
	bl FUN_0200c3c4
	ldr r1, [r6, #4]
	cmp r1, r0
	beq _0200BCC8
	b _0200BD14
_0200BCF4:
	bl FUN_0200c3c4
	ldr r1, [r6, #4]
	cmp r1, r0
	bne _0200BD14
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #0
	pop {r4, r5, r6, pc}
_0200BD14:
	ldr r2, [r6, #0x14]
	ldr r1, _0200BD94 ; =0x02093E08
	add r0, r2, #1
	ldr r5, [r1, r2, lsl #2]
	cmp r0, #8
	str r0, [r6, #0x14]
	movgt r0, #0
	strgt r0, [r6, #0x14]
	ldr r0, [r5]
	mov r1, r5
	cmp r0, #0
	beq _0200BD54
_0200BD44:
	ldr r1, [r1]
	ldr r0, [r1]
	cmp r0, #0
	bne _0200BD44
_0200BD54:
	ldr r0, [r6, #0x10]
	cmp r0, #0
	strne r5, [r0]
	streq r5, [r6]
	str r1, [r6, #0x10]
	ldr r1, [r6, #0x1c]
	mov r0, r4
	sub r1, r1, #1
	str r1, [r6, #0x1c]
	ldr r1, [r6, #4]
	add r1, r1, #1
	str r1, [r6, #4]
	bl FUN_02003dbc
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0_0200BD90: .word LAB_02093de4
_0200BD94: .word 0x02093E08

	arm_func_start FUN_0200bd98
FUN_0200bd98: ; 0x0200BD98
	push {r4, lr}
	mov r4, r0
	bl FUN_0200c268
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	bl FUN_0200c220
	cmp r0, #0
	popne {r4, pc}
	tst r4, #1
	moveq r0, #0
	popeq {r4, pc}
	bl FUN_0200c154
	cmp r0, #0
	ble _0200BDF8
	mov r4, #0
	arm_func_end FUN_0200bd98
_0200BDD8:
	mov r0, r4
	bl FUN_0200bc98
	cmp r0, #0
	bne _0200BDD8
	bl FUN_0200c220
	cmp r0, #0
	beq _0200BE00
	pop {r4, pc}
_0200BDF8:
	mov r0, #1
	bl FUN_0200be58
_0200BE00:
	bl FUN_0200c1f8
	mov r4, #1
_0200BE08:
	mov r0, r4
	bl FUN_0200bc98
	bl FUN_0200c220
	cmp r0, #0
	beq _0200BE08
	pop {r4, pc}

	arm_func_start FUN_0200be20
FUN_0200be20: ; 0x0200BE20
	push {r4, lr}
	mov r4, r0
	bl FUN_02003da8
	ldr r1, _0200BE54 ; =LAB_02093de4
	ldr r2, [r1, #0xc]
	cmp r2, #0
	streq r4, [r1, #8]
	strne r4, [r2]
	str r4, [r1, #0xc]
	mov r1, #0
	str r1, [r4]
	bl FUN_02003dbc
	pop {r4, pc}
	.align 2, 0_0200BE54: .word LAB_02093de4
	arm_func_end FUN_0200be20

	arm_func_start FUN_0200be58
FUN_0200be58: ; 0x0200BE58
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r8, r0
	mov r5, #0
	bl FUN_02003da8
	ldr sb, _0200BFE8 ; =LAB_02093de4
	mov r7, r0
	ldr r1, [sb, #8]
	cmp r1, #0
	bne _0200BE88
	bl FUN_02003dbc
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_0200be58
_0200BE88:
	ldr r1, [sb, #0x1c]
	cmp r1, #8
	blt _0200BEDC
	tst r8, #1
	bne _0200BEA8
	bl FUN_02003dbc
	mov r0, r5
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0200BEA8:
	mov r4, #1
_0200BEAC:
	mov r0, r4
	bl FUN_0200bc98
	ldr r0, [sb, #0x1c]
	cmp r0, #8
	bge _0200BEAC
	ldr r0, [sb, #8]
	cmp r0, #0
	bne _0200BEDC
	mov r0, r7
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0200BEDC:
	ldr r6, _0200BFEC ; =0x020940C0
	mov r1, #0x1800
	mov r0, r6
	bl FUN_020026d0
	ldr r1, [sb, #8]
	mov r2, r5
	mov r0, #7
	bl FUN_02015b04
	cmp r0, #0
	bge _0200BF8C
	tst r8, #1
	bne _0200BF1C
	mov r0, r7
	bl FUN_02003dbc
	mov r0, r5
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0200BF1C:
	mov sl, #7
	mov r4, #0x1800
	b _0200BF68
_0200BF28:
	mov r0, r7
	bl FUN_02003dbc
	mov r0, r5
	bl FUN_0200bc98
	bl FUN_02003da8
	mov r7, r0
	mov r0, r6
	mov r1, r4
	bl FUN_020026d0
	ldr r0, [sb, #8]
	cmp r0, #0
	bne _0200BF68
	mov r0, r7
	bl FUN_02003dbc
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0200BF68:
	ldr r0, [sb, #0x1c]
	cmp r0, #8
	bge _0200BF28
	ldr r1, [sb, #8]
	mov r0, sl
	mov r2, r5
	bl FUN_02015b04
	cmp r0, #0
	blt _0200BF28
_0200BF8C:
	ldr r2, [sb, #0x18]
	ldr r3, [sb, #8]
	ldr r1, _0200BFF0 ; =0x02093E08
	add r0, r2, #1
	str r3, [r1, r2, lsl #2]
	str r0, [sb, #0x18]
	cmp r0, #8
	strgt r5, [sb, #0x18]
	str r5, [sb, #8]
	str r5, [sb, #0xc]
	ldr r1, [sb, #0x1c]
	mov r0, r7
	add r1, r1, #1
	str r1, [sb, #0x1c]
	ldr r1, [sb, #0x20]
	add r1, r1, #1
	str r1, [sb, #0x20]
	bl FUN_02003dbc
	tst r8, #2
	beq _0200BFE0
	bl FUN_0200c1f8
_0200BFE0:
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0200BFE8: .word LAB_02093de4
_0200BFEC: .word 0x020940C0
_0200BFF0: .word 0x02093E08

	arm_func_start FUN_0200bff4
FUN_0200bff4: ; 0x0200BFF4
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_0200c08c
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #0
	arm_func_end FUN_0200bff4
_0200C00C:
	mov r0, r4
	bl FUN_0200bc98
	cmp r0, #0
	bne _0200C00C
	mov r0, r5
	bl FUN_0200c08c
	cmp r0, #0
	popne {r3, r4, r5, pc}
	bl FUN_0200c1f8
	mov r0, r5
	bl FUN_0200c08c
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #1
_0200C044:
	mov r0, r4
	bl FUN_0200bc98
	mov r0, r5
	bl FUN_0200c08c
	cmp r0, #0
	beq _0200C044
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200c060
FUN_0200c060: ; 0x0200C060
	push {r4, lr}
	bl FUN_02003da8
	ldr r1, _0200C088 ; =LAB_02093de4
	ldr r2, [r1, #8]
	cmp r2, #0
	ldreq r4, [r1, #4]
	ldrne r4, [r1, #0x20]
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0200C088: .word LAB_02093de4
	arm_func_end FUN_0200c060

	arm_func_start FUN_0200c08c
FUN_0200c08c: ; 0x0200C08C
	push {r4, lr}
	mov r4, r0
	bl FUN_02003da8
	ldr r1, _0200C0D8 ; =LAB_02093de4
	ldr r1, [r1, #4]
	cmp r4, r1
	bls _0200C0BC
	sub r1, r4, r1
	cmp r1, #0x80000000
	movlo r4, #0
	movhs r4, #1
	b _0200C0CC
	arm_func_end FUN_0200c08c
_0200C0BC:
	sub r1, r1, r4
	mov r4, #1
	cmp r1, #0x80000000
	movhs r4, #0
_0200C0CC:
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0200C0D8: .word LAB_02093de4

	arm_func_start FUN_0200c0dc
FUN_0200c0dc: ; 0x0200C0DC
	push {r4, lr}
	bl FUN_02003da8
	ldr r1, _0200C114 ; =LAB_02093de4
	mov r4, #0
	ldr r1, [r1]
	cmp r1, #0
	beq _0200C108
	arm_func_end FUN_0200c0dc
_0200C0F8:
	ldr r1, [r1]
	add r4, r4, #1
	cmp r1, #0
	bne _0200C0F8
_0200C108:
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0200C114: .word LAB_02093de4

	arm_func_start FUN_0200c118
FUN_0200c118: ; 0x0200C118
	push {r4, lr}
	bl FUN_02003da8
	ldr r1, _0200C150 ; =LAB_02093de4
	mov r4, #0
	ldr r1, [r1, #8]
	cmp r1, #0
	beq _0200C144
	arm_func_end FUN_0200c118
_0200C134:
	ldr r1, [r1]
	add r4, r4, #1
	cmp r1, #0
	bne _0200C134
_0200C144:
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0200C150: .word LAB_02093de4

	arm_func_start FUN_0200c154
FUN_0200c154: ; 0x0200C154
	push {r4, lr}
	bl FUN_0200c0dc
	mov r4, r0
	bl FUN_0200c118
	rsb r1, r4, #0x100
	sub r0, r1, r0
	pop {r4, pc}
	arm_func_end FUN_0200c154

	arm_func_start FUN_0200c170
FUN_0200c170: ; 0x0200C170
	push {r3, r4, r5, lr}
	mov r5, r1
	bl FUN_02003da8
	mov r4, r0
	mov r0, r5
	bl FUN_0200c330
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200c170

	arm_func_start FUN_0200c194
FUN_0200c194: ; 0x0200C194
	push {r4, r5, r6, lr}
	mov r4, #7
	ldr r1, _0200C1F4 ; =FUN_0200c170
	mov r0, r4
	bl FUN_02015a94
	bl FUN_0200c268
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r4
	mov r1, #1
	bl FUN_02015ae0
	cmp r0, #0
	popne {r4, r5, r6, pc}
	mov r5, r4
	mov r6, #0x32
	mov r4, #1
	arm_func_end FUN_0200c194
_0200C1D4:
	mov r0, r6
	bl FUN_02003e24
	mov r0, r5
	mov r1, r4
	bl FUN_02015ae0
	cmp r0, #0
	beq _0200C1D4
	pop {r4, r5, r6, pc}
	.align 2, 0_0200C1F4: .word FUN_0200c170

	arm_func_start FUN_0200c1f8
FUN_0200c1f8: ; 0x0200C1F8
	push {r3, r4, r5, lr}
	mov r5, #7
	mov r4, #0
	arm_func_end FUN_0200c1f8
_0200C204:
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_02015b04
	cmp r0, #0
	blt _0200C204
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200c220
FUN_0200c220: ; 0x0200C220
	push {r4, lr}
	bl FUN_02003da8
	ldr r1, _0200C264 ; =LAB_02093de4
	ldr r4, [r1]
	cmp r4, #0
	bne _0200C244
	bl FUN_02003dbc
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_0200c220
_0200C244:
	ldr r2, [r4]
	str r2, [r1]
	cmp r2, #0
	moveq r2, #0
	streq r2, [r1, #0x10]
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0200C264: .word LAB_02093de4

	arm_func_start FUN_0200c268
FUN_0200c268: ; 0x0200C268
	push {r4, lr}
	bl FUN_0200215c
	cmp r0, #0
	moveq r0, #1
	popeq {r4, pc}
	bl FUN_02003da8
	ldr r1, _0200C2A4 ; =0x04FFF200
	mov r2, #0x10
	str r2, [r1]
	ldr r4, [r1]
	bl FUN_02003dbc
	mov r0, #1
	cmp r4, #0
	moveq r0, #0
	pop {r4, pc}
	.align 2, 0_0200C2A4: .word 0x04FFF200
	arm_func_end FUN_0200c268

	arm_func_start FUN_0200c2a8
FUN_0200c2a8: ; 0x0200C2A8
	mov ip, #0
	ldr r3, _0200C2DC ; =LAB_020958c0
	mov r1, ip
	mov r0, #0xc
	arm_func_end FUN_0200c2a8
_0200C2B8:
	mul r2, ip, r0
	str r1, [r3, r2]
	add r2, r3, r2
	str r1, [r2, #4]
	add ip, ip, #1
	strb r1, [r2, #8]
	cmp ip, #8
	blt _0200C2B8
	bx lr
	.align 2, 0_0200C2DC: .word LAB_020958c0

	arm_func_start FUN_0200c2e0
FUN_0200c2e0: ; 0x0200C2E0
	ldr r2, _0200C2FC ; =LAB_020958c0
	mov r1, #0xc
	mla r1, r0, r1, r2
	ldrb r0, [r1, #8]
	add r0, r0, #1
	strb r0, [r1, #8]
	bx lr
	.align 2, 0_0200C2FC: .word LAB_020958c0
	arm_func_end FUN_0200c2e0

	arm_func_start FUN_0200c300
FUN_0200c300: ; 0x0200C300
	mov r3, #0xc
	mul r3, r0, r3
	ldr r0, _0200C32C ; =LAB_020958c0
	str r1, [r0, r3]
	add r1, r0, r3
	str r2, [r1, #4]
	ldrb r0, [r1, #8]
	add r0, r0, #1
	strb r0, [r1, #8]
	and r0, r0, #0xff
	bx lr
	.align 2, 0_0200C32C: .word LAB_020958c0
	arm_func_end FUN_0200c300

	arm_func_start FUN_0200c330
FUN_0200c330: ; 0x0200C330
	push {r3, lr}
	ldr r3, _0200C370 ; =LAB_020958c0
	and r2, r0, #0xff
	mov r1, #0xc
	mla r3, r2, r1, r3
	asr r1, r0, #8
	ldrb r0, [r3, #8]
	and r1, r1, #0xff
	cmp r1, r0
	popne {r3, pc}
	ldr r1, [r3]
	cmp r1, #0
	popeq {r3, pc}
	ldr r0, [r3, #4]
	blx r1
	pop {r3, pc}
	.align 2, 0_0200C370: .word LAB_020958c0
	arm_func_end FUN_0200c330

	arm_func_start FUN_0200c374
FUN_0200c374: ; 0x0200C374
	push {r4, lr}
	ldr r4, _0200C398 ; =LAB_02095920
	mov r1, #4
	ldr r0, [r4]
	add r0, r0, #4
	bl FUN_02002698
	ldr r0, [r4]
	ldr r0, [r0, #4]
	pop {r4, pc}
	.align 2, 0_0200C398: .word LAB_02095920
	arm_func_end FUN_0200c374

	arm_func_start FUN_0200c39c
FUN_0200c39c: ; 0x0200C39C
	push {r4, lr}
	ldr r4, _0200C3C0 ; =LAB_02095920
	mov r1, #2
	ldr r0, [r4]
	add r0, r0, #8
	bl FUN_02002698
	ldr r0, [r4]
	ldrh r0, [r0, #8]
	pop {r4, pc}
	.align 2, 0_0200C3C0: .word LAB_02095920
	arm_func_end FUN_0200c39c

	arm_func_start FUN_0200c3c4
FUN_0200c3c4: ; 0x0200C3C4
	push {r4, lr}
	ldr r4, _0200C3E4 ; =LAB_02095920
	mov r1, #4
	ldr r0, [r4]
	bl FUN_02002698
	ldr r0, [r4]
	ldr r0, [r0]
	pop {r4, pc}
	.align 2, 0_0200C3E4: .word LAB_02095920
	arm_func_end FUN_0200c3c4

	arm_func_start FUN_0200c3e8
FUN_0200c3e8: ; 0x0200C3E8
	push {r3, r4, r5, lr}
	mov lr, #0
	str lr, [r0, #4]
	strh lr, [r0, #8]
	strh lr, [r0, #0xa]
	str lr, [r0]
	mvn r3, #0
	mov ip, lr
	mov r1, #0x24
	arm_func_end FUN_0200c3e8
_0200C40C:
	mla r5, lr, r1, r0
	mov r4, ip
	str ip, [r5, #0x40]
_0200C418:
	add r2, r5, r4, lsl #1
	add r4, r4, #1
	strh r3, [r2, #0x20]
	cmp r4, #0x10
	blt _0200C418
	add lr, lr, #1
	cmp lr, #0x10
	blt _0200C40C
	mov r3, #0
	mvn r2, #0
_0200C440:
	add r1, r0, r3, lsl #1
	add r1, r1, #0x200
	add r3, r3, #1
	strh r2, [r1, #0x60]
	cmp r3, #0x10
	blt _0200C440
	mov r1, #0x280
	bl FUN_020026d0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200c464
FUN_0200c464: ; 0x0200C464
	ldr r1, _0200C4CC ; =0xFFFFFD2D
	cmp r0, r1
	movlt r0, r1
	blt _0200C47C
	cmp r0, #0
	movgt r0, #0
	arm_func_end FUN_0200c464
_0200C47C:
	add r1, r0, #0xd3
	mvn r2, #0xef
	cmp r0, r2
	ldr r3, _0200C4D0 ; =0x0208BAA0
	add r1, r1, #0x200
	ldrb r3, [r3, r1]
	movlt r0, #3
	blt _0200C4BC
	add r1, r2, #0x78
	cmp r0, r1
	movlt r0, #2
	blt _0200C4BC
	add r1, r2, #0xb4
	cmp r0, r1
	movlt r0, #1
	movge r0, #0
_0200C4BC:
	orr r0, r3, r0, lsl #8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0_0200C4CC: .word 0xFFFFFD2D
_0200C4D0: .word 0x0208BAA0

	arm_func_start FUN_0200c4d4
FUN_0200c4d4: ; 0x0200C4D4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_0200bba0
	add r3, r6, r5, lsl #3
	ldr r2, [r3, #0x18]
	cmp r2, #0
	beq _0200C564
	cmp r4, r2
	bne _0200C508
	bl FUN_0200bbb4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0200c4d4
_0200C508:
	add r1, r6, #0x18
	ldr r0, [r2, #0x18]
	add ip, r1, r5, lsl #3
	cmp ip, r0
	bne _0200C530
	ldr r0, [r3, #0x1c]
	mov r1, #0x3c
	str r0, [r2, #0x18]
	ldr r0, [r3, #0x18]
	b _0200C560
_0200C530:
	cmp r0, #0
	beq _0200C550
_0200C538:
	ldr r1, [r0, #4]
	cmp ip, r1
	beq _0200C550
	mov r0, r1
	cmp r1, #0
	bne _0200C538
_0200C550:
	add r1, r6, r5, lsl #3
	ldr r2, [r1, #0x1c]
	mov r1, #8
	str r2, [r0, #4]
_0200C560:
	bl FUN_020026b4
_0200C564:
	add r0, r6, #0x18
	ldr r1, [r4, #0x18]
	add r0, r0, r5, lsl #3
	str r0, [r4, #0x18]
	add r0, r6, r5, lsl #3
	str r1, [r0, #0x1c]
	str r4, [r0, #0x18]
	bl FUN_0200bbb4
	mov r5, #0x3c
	mov r0, r6
	mov r1, r5
	bl FUN_020026b4
	mov r0, r4
	mov r1, r5
	bl FUN_020026b4
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0200c5a4
FUN_0200c5a4: ; 0x0200C5A4
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	bl FUN_0200bba0
	mov r6, #0
	add r5, r7, #0x18
	mov r8, #8
	mov r4, #0x3c
	arm_func_end FUN_0200c5a4
_0200C5C0:
	add r1, r7, r6, lsl #3
	ldr r0, [r1, #0x18]
	cmp r0, #0
	beq _0200C628
	ldr r3, [r0, #0x18]
	add r2, r5, r6, lsl #3
	cmp r2, r3
	bne _0200C5F0
	ldr r2, [r1, #0x1c]
	mov r1, r4
	str r2, [r0, #0x18]
	b _0200C624
_0200C5F0:
	cmp r3, #0
	beq _0200C610
_0200C5F8:
	ldr r0, [r3, #4]
	cmp r2, r0
	beq _0200C610
	mov r3, r0
	cmp r0, #0
	bne _0200C5F8
_0200C610:
	add r0, r7, r6, lsl #3
	ldr r2, [r0, #0x1c]
	mov r0, r3
	mov r1, r8
	str r2, [r3, #4]
_0200C624:
	bl FUN_020026b4
_0200C628:
	add r6, r6, #1
	cmp r6, #4
	blt _0200C5C0
	bl FUN_0200bbb4
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0200c63c
FUN_0200c63c: ; 0x0200C63C
	push {r4, r5, r6, lr}
	mov r4, r0
	bl FUN_0200bba0
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _0200C67C
	mov r5, #0
	mov r4, #8
	arm_func_end FUN_0200c63c
_0200C65C:
	ldr r6, [r0, #4]
	mov r1, r4
	str r5, [r0]
	str r5, [r0, #4]
	bl FUN_020026b4
	mov r0, r6
	cmp r6, #0
	bne _0200C65C
_0200C67C:
	bl FUN_0200bbb4
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0200c684
FUN_0200c684: ; 0x0200C684
	sub sp, sp, #8
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	str r1, [r0]
	str r1, [r0, #4]
	add sp, sp, #8
	bx lr
	arm_func_end FUN_0200c684

	arm_func_start FUN_0200c6a4
FUN_0200c6a4: ; 0x0200C6A4
	push {r3, r4, r5, lr}
	ldr r4, [r2]
	ldr r3, [r0, #0x38]
	cmp r4, r3
	bhs _0200C848
	mov ip, #0
	arm_func_end FUN_0200c6a4
_0200C6BC:
	add r3, r0, r4, lsl #2
	ldr r4, [r3, #0x3c]
	and r3, r4, #0xff
	strb r4, [r1]
	cmp r3, #0x10
	lsr r4, r4, #8
	bgt _0200C704
	cmp r3, #0x10
	bge _0200C750
	cmp r3, #5

	arm_func_start switchD
switchD: ; 0x0200C6E4
	addls pc, pc, r3, lsl #2
	b _0200C830
	arm_func_end switchD
_0200C6EC: ; jump table
	b _0200C830 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0200C6F0
	b _0200C710
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0200C6F4
	b _0200C710
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0200C6F8
	b _0200C710
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0200C6FC
	b _0200C710
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0200C700
	b _0200C710
	arm_func_end caseD_5
_0200C704:
	cmp r3, #0x11
	beq _0200C7C4
	b _0200C830
_0200C710:
	add lr, r0, r4
	ldrh ip, [r0, r4]
	ldrh r5, [lr, #2]
	ldrh r4, [lr, #4]
	ldrh r3, [lr, #6]
	ldrh r0, [lr, #8]
	strh ip, [r1, #2]
	strh r5, [r1, #4]
	strh r0, [r1, #0xa]
	strh r4, [r1, #6]
	strh r3, [r1, #8]
	ldr r1, [r2]
	mov r0, #1
	add r1, r1, #1
	str r1, [r2]
	pop {r3, r4, r5, pc}
_0200C750:
	add lr, r0, r4
	b _0200C7A4
_0200C758:
	mov r0, #0xc
	mla r0, r5, r0, lr
	ldrh lr, [r0, #2]
	ldrh ip, [r0, #4]
	ldrh r5, [r0, #6]
	ldrh r4, [r0, #8]
	ldrh r3, [r0, #0xa]
	ldrh r0, [r0, #0xc]
	strh lr, [r1]
	strh ip, [r1, #2]
	strh r0, [r1, #0xa]
	strh r5, [r1, #4]
	strh r4, [r1, #6]
	strh r3, [r1, #8]
	ldr r1, [r2, #4]
	mov r0, #1
	add r1, r1, #1
	str r1, [r2, #4]
	pop {r3, r4, r5, pc}
_0200C7A4:
	ldrb r4, [lr, #1]
	ldrb r3, [lr]
	ldr r5, [r2, #4]
	sub r3, r4, r3
	add r3, r3, #1
	cmp r5, r3
	blo _0200C758
	b _0200C830
_0200C7C4:
	add r5, r0, r4
	b _0200C824
_0200C7CC:
	ldrb r4, [r5, r3]
	cmp r4, #0
	beq _0200C830
	mov r0, #0xc
	mla r0, r3, r0, r5
	ldrh r5, [r0, #8]
	ldrh r4, [r0, #0xa]
	ldrh lr, [r0, #0xc]
	ldrh ip, [r0, #0xe]
	ldrh r3, [r0, #0x10]
	ldrh r0, [r0, #0x12]
	strh r5, [r1]
	strh r4, [r1, #2]
	strh r0, [r1, #0xa]
	strh lr, [r1, #4]
	strh ip, [r1, #6]
	strh r3, [r1, #8]
	ldr r1, [r2, #4]
	mov r0, #1
	add r1, r1, #1
	str r1, [r2, #4]
	pop {r3, r4, r5, pc}
_0200C824:
	ldr r3, [r2, #4]
	cmp r3, #8
	blo _0200C7CC
_0200C830:
	ldr lr, [r2]
	ldr r3, [r0, #0x38]
	add r4, lr, #1
	stm r2, {r4, ip}
	cmp r4, r3
	blo _0200C6BC
_0200C848:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200c850
FUN_0200c850: ; 0x0200C850
	ldr r0, [r0, #0x38]
	bx lr
	arm_func_end FUN_0200c850

	arm_func_start FUN_0200c858
FUN_0200c858: ; 0x0200C858
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_0200bba0
	add r0, r6, #0x3c
	add r2, r6, r5, lsl #2
	add r0, r0, r5, lsl #2
	mov r1, #4
	str r4, [r2, #0x3c]
	bl FUN_020026b4
	bl FUN_0200bbb4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0200c858

	arm_func_start FUN_0200c88c
FUN_0200c88c: ; 0x0200C88C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_0200bba0
	add r0, r5, r4, lsl #2
	ldr r4, [r0, #0x3c]
	cmp r4, #0
	beq _0200C8B8
	cmp r4, #0x2000000
	addlo r4, r5, r4
	b _0200C8BC
	arm_func_end FUN_0200c88c
_0200C8B8:
	mov r4, #0
_0200C8BC:
	bl FUN_0200bbb4
	mov r0, r4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200c8c8
FUN_0200c8c8: ; 0x0200C8C8
	sub r3, r0, #9
	cmp r3, #0x1a
	mov r0, #0
	bxhi lr
	ldr r1, _0200C8EC ; =0x0400030F
	mov r2, #1
	tst r1, r2, lsl r3
	movne r0, r2
	bx lr
	.align 2, 0_0200C8EC: .word 0x0400030F
	arm_func_end FUN_0200c8c8

	arm_func_start FUN_0200c8f0
FUN_0200c8f0: ; 0x0200C8F0
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	mov r6, r1
	bl FUN_02003da8
	ldr r5, [r7, #8]
	mov r4, r0
	cmp r5, #0
	beq _0200C948
	ldr r0, [r5, #8]
	add r1, r5, #8
	cmp r0, #0
	beq _0200C940
	arm_func_end FUN_0200c8f0
_0200C920:
	cmp r0, r7
	ldreq r0, [r7]
	streq r0, [r1]
	beq _0200C940
	mov r1, r0
	ldr r0, [r0]
	cmp r0, #0
	bne _0200C920
_0200C940:
	mov r0, #0
	str r0, [r7]
_0200C948:
	ldr r0, [r7, #0xc]
	lsr r0, r0, #8
	and r8, r0, #0xff
	mov r0, r8
	bl FUN_0200c8c8
	cmp r0, #0
	bne _0200C970
	cmp r5, #0
	strne r8, [r5, #0x18]
	strne r6, [r5, #0x1c]
_0200C970:
	ldr r1, [r7, #0xc]
	add r0, r7, #0x18
	bic r1, r1, #0xcf
	str r6, [r7, #0x14]
	str r1, [r7, #0xc]
	bl FUN_02001c78
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0200c994
FUN_0200c994: ; 0x0200C994
	push {r3, r4, r5, lr}
	mov r5, r0
	cmp r1, #0x100
	bne _0200C9E4
	bl FUN_02003da8
	ldr r1, [r5, #0xc]
	mov r4, r0
	tst r1, #8
	bne _0200C9CC
	arm_func_end FUN_0200c994
_0200C9B8:
	add r0, r5, #0x18
	bl FUN_02001c28
	ldr r0, [r5, #0xc]
	tst r0, #8
	beq _0200C9B8
_0200C9CC:
	mov r0, r4
	bl FUN_02003dbc
	ldr r0, [r5, #0xc]
	ldr r1, [r5, #0x14]
	bic r0, r0, #8
	str r0, [r5, #0xc]
_0200C9E4:
	mov r0, r1
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200c9ec
FUN_0200c9ec: ; 0x0200C9EC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r5, r0
	ldr r0, [r5, #8]
	mov r4, r1
	cmp r4, #0x23
	ldr ip, [r0, #0x24]
	movhs r6, #4
	bhs _0200CD1C
	ldr r1, [ip, r4, lsl #2]
	cmp r1, #0
	moveq r6, #4
	beq _0200CD1C
	cmp r4, #0x22
	arm_func_end FUN_0200c9ec

	arm_func_start switchD
switchD: ; 0x0200CA24
	addls pc, pc, r4, lsl #2
	b _0200CD18
	arm_func_end switchD
_0200CA2C: ; jump table
	b LAB_0200cab8 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0200CA30
	b _0200CACC
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0200CA34
	b _0200CAD8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0200CA38
	b _0200CAF0
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0200CA3C
	b _0200CB0C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0200CA40
	b _0200CB28
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0200CA44
	b _0200CB44
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0200CA48
	b _0200CB50
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0200CA4C
	b _0200CB68
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0200CA50
	b _0200CB74
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0200CA54
	b _0200CB88
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0200CA58
	b _0200CB9C
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0200CA5C
	b _0200CBB0
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0200CA60
	b _0200CBC4
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0200CA64
	b _0200CBE0
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0200CA68
	b _0200CBF0
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x0200CA6C
	b _0200CBFC
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x0200CA70
	b _0200CC08
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x0200CA74
	b _0200CC1C
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0200CA78
	b _0200CC30
	arm_func_end caseD_13

	arm_func_start caseD_14
caseD_14: ; 0x0200CA7C
	b _0200CC40
	arm_func_end caseD_14

	arm_func_start caseD_15
caseD_15: ; 0x0200CA80
	b _0200CC4C
	arm_func_end caseD_15

	arm_func_start caseD_16
caseD_16: ; 0x0200CA84
	b _0200CC60
	arm_func_end caseD_16

	arm_func_start caseD_17
caseD_17: ; 0x0200CA88
	b _0200CC78
	arm_func_end caseD_17

	arm_func_start caseD_18
caseD_18: ; 0x0200CA8C
	b _0200CC84
	arm_func_end caseD_18

	arm_func_start caseD_19
caseD_19: ; 0x0200CA90
	b _0200CC90
	arm_func_end caseD_19

	arm_func_start caseD_1a
caseD_1a: ; 0x0200CA94
	b _0200CCA0
	arm_func_end caseD_1a

	arm_func_start caseD_1b
caseD_1b: ; 0x0200CA98
	b _0200CCAC
	arm_func_end caseD_1b

	arm_func_start caseD_1c
caseD_1c: ; 0x0200CA9C
	b _0200CCC4
	arm_func_end caseD_1c

	arm_func_start caseD_1d
caseD_1d: ; 0x0200CAA0
	b _0200CD18
	arm_func_end caseD_1d

	arm_func_start caseD_1e
caseD_1e: ; 0x0200CAA4
	b _0200CCD4
	arm_func_end caseD_1e

	arm_func_start caseD_1f
caseD_1f: ; 0x0200CAA8
	b _0200CCDC
	arm_func_end caseD_1f

	arm_func_start caseD_20
caseD_20: ; 0x0200CAAC
	b _0200CCE8
	arm_func_end caseD_20

	arm_func_start caseD_21
caseD_21: ; 0x0200CAB0
	b _0200CD04
	arm_func_end caseD_21

	arm_func_start caseD_22
caseD_22: ; 0x0200CAB4
	b _0200CD0C
	arm_func_end caseD_22
LAB_0200cab8:
	ldr r3, [r5, #0x10]
	ldr ip, [ip]
_0200CAC0:
	ldr r2, [r3], #4
_0200CAC4:
	mov r1, r5
_0200CAC8:
	b _0200CAE8
_0200CACC:
	ldr r3, [r5, #0x10]
	ldr ip, [ip, #4]
	b _0200CAC0
_0200CAD8:
	ldr r1, [r5, #0x10]
	ldr ip, [ip, #8]
_0200CAE0:
	ldm r1, {r2, r3}
	mov r1, r5
_0200CAE8:
	blx ip
_0200CAEC:
	b _0200CB04
_0200CAF0:
	ldr r1, [r5, #0x10]
	ldr r3, [ip, #0xc]
_0200CAF8:
	ldr r2, [r1]
_0200CAFC:
	mov r1, r5
	blx r3
_0200CB04:
	mov r6, r0
	b _0200CD1C
_0200CB0C:
	ldr r2, [r5, #0x10]
	ldr r1, [r2, #0xc]
	add r3, r2, #8
	str r1, [sp]
	ldm r2, {r1, r2}
	ldr ip, [ip, #0x10]
	b _0200CAC8
_0200CB28:
	ldr r3, [r5, #0x10]
	mov r1, r5
	add r2, r3, #8
	str r2, [sp]
	ldm r3, {r2, r3}
	ldr ip, [ip, #0x14]
	b _0200CAC8
_0200CB44:
	ldr r1, [r5, #0x10]
	ldr ip, [ip, #0x18]
	b _0200CAE0
_0200CB50:
	ldr r3, [r5, #0x10]
	mov r1, r5
	str r3, [sp]
	ldmib r3, {r2, r3}
	ldr ip, [ip, #0x1c]
	b _0200CAC8
_0200CB68:
	ldr r2, [ip, #0x20]
_0200CB6C:
	mov r1, r5
	b _0200CC38
_0200CB74:
	ldr r1, [ip, #0x24]
	blx r1
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_0200CB88:
	ldr r1, [ip, #0x28]
	blx r1
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_0200CB9C:
	ldr r1, [ip, #0x2c]
	blx r1
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_0200CBB0:
	ldr r1, [ip, #0x30]
	blx r1
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_0200CBC4:
	ldr r3, [r5, #0x10]
	mov r1, r5
	ldr r2, [r3, #8]
	str r2, [sp]
	ldm r3, {r2, r3}
	ldr ip, [ip, #0x34]
	b _0200CAC8
_0200CBE0:
	ldr r2, [r5, #0x10]
	ldr ip, [ip, #0x38]
	ldr r3, [r2, #4]
	b _0200CAC4
_0200CBF0:
	ldr r2, [r5, #0x10]
	ldr r3, [ip, #0x3c]
_0200CBF8:
	b _0200CAFC
_0200CBFC:
	ldr r2, [r5, #0x10]
	ldr r3, [ip, #0x40]
	b _0200CBF8
_0200CC08:
	ldr r1, [ip, #0x44]
	blx r1
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_0200CC1C:
	ldr r1, [ip, #0x48]
	blx r1
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_0200CC30:
	ldr r1, [r5, #0x10]
	ldr r2, [ip, #0x4c]
_0200CC38:
	blx r2
	b _0200CAEC
_0200CC40:
	ldr r3, [r5, #0x10]
	ldr ip, [ip, #0x50]
	b _0200CC98
_0200CC4C:
	ldr r2, [r5, #0x10]
	ldr r3, [ip, #0x54]
_0200CC54:
	ldm r2, {r1, r2}
	blx r3
	b _0200CAEC
_0200CC60:
	ldr r3, [r5, #0x10]
	ldr r1, [r3, #0xc]
	str r1, [sp]
	ldm r3, {r1, r2, r3}
	ldr ip, [ip, #0x58]
	b _0200CAC8
_0200CC78:
	ldr r3, [r5, #0x10]
	ldr ip, [ip, #0x5c]
	b _0200CC98
_0200CC84:
	ldr r3, [r5, #0x10]
	ldr ip, [ip, #0x60]
	b _0200CC98
_0200CC90:
	ldr r3, [r5, #0x10]
	ldr ip, [ip, #0x64]
_0200CC98:
	ldm r3, {r1, r2, r3}
	b _0200CAC8
_0200CCA0:
	ldr r2, [r5, #0x10]
	ldr r3, [ip, #0x68]
	b _0200CC54
_0200CCAC:
	ldr r3, [r5, #0x10]
	ldr r1, [r3, #0xc]
	str r1, [sp]
	ldm r3, {r1, r2, r3}
	ldr ip, [ip, #0x6c]
	b _0200CAC8
_0200CCC4:
	ldr r1, [r5, #0x10]
	ldr r2, [ip, #0x70]
	ldr r1, [r1]
	b _0200CC38
_0200CCD4:
	ldr r2, [ip, #0x78]
	b _0200CB6C
_0200CCDC:
	ldr r1, [r5, #0x10]
	ldr r3, [ip, #0x7c]
	b _0200CAF8
_0200CCE8:
	ldr r3, [r5, #0x10]
	mov r1, r5
	ldr r2, [r3, #8]
	str r2, [sp]
	ldm r3, {r2, r3}
	ldr ip, [ip, #0x80]
	b _0200CAC8
_0200CD04:
	ldr r2, [ip, #0x84]
	b _0200CB6C
_0200CD0C:
	ldr r1, [r5, #0x10]
	ldr ip, [ip, #0x88]
	b _0200CAE0
_0200CD18:
	mov r6, #4
_0200CD1C:
	mov r0, r4
	bl FUN_0200c8c8
	cmp r0, #0
	bne _0200CD60
	ldr r0, [r5, #0xc]
	tst r0, #4
	beq _0200CD4C
	mov r0, r5
	mov r1, r6
	bl FUN_0200c994
	mov r6, r0
	b _0200CD60
_0200CD4C:
	cmp r6, #0x100
	beq _0200CD60
	mov r0, r5
	mov r1, r6
	bl FUN_0200c8f0
_0200CD60:
	mov r0, r6
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}

	arm_func_start FUN_0200cd6c
FUN_0200cd6c: ; 0x0200CD6C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x48
	mov sl, r0
	mov sb, r1
	mov r7, #0
	bl FUN_02003da8
	ldr r1, [sl, #0x14]
	mov fp, r0
	tst r1, #0x20
	bicne r1, r1, #0x20
	ldrne r0, [sl, #8]
	strne r1, [sl, #0x14]
	cmpne r0, #0
	beq _0200CDF4
	mov r5, r7
	mov r6, #1
	mov r4, #3
	arm_func_end FUN_0200cd6c
_0200CDB0:
	ldr r1, [r0, #0xc]
	ldr r8, [r0]
	tst r1, #2
	movne r1, r6
	moveq r1, r5
	cmp r1, #0
	beq _0200CDE8
	ldr r1, [r0, #0xc]
	tst r1, #0x40
	bne _0200CDE8
	mov r1, r4
	bl FUN_0200c8f0
	cmp r8, #0
	ldreq r8, [sl, #8]
_0200CDE8:
	mov r0, r8
	cmp r8, #0
	bne _0200CDB0
_0200CDF4:
	mov r0, fp
	bl FUN_02003dbc
	bl FUN_02003da8
	ldr r1, [sl, #0x14]
	mov r4, r0
	tst r1, #0x40
	bne _0200CEAC
	tst r1, #8
	bne _0200CEAC
	ldr r0, [sl, #8]
	cmp r0, #0
	beq _0200CEAC
	cmp sb, #0
	beq _0200CE38
	tst r1, #0x10
	moveq r5, #1
	beq _0200CE3C
_0200CE38:
	mov r5, #0
_0200CE3C:
	cmp r5, #0
	ldrne r0, [sl, #0x14]
	orrne r0, r0, #0x10
	strne r0, [sl, #0x14]
	mov r0, r4
	bl FUN_02003dbc
	cmp r5, #0
	beq _0200CE68
	ldr r0, [sl, #8]
	mov r1, #9
	bl FUN_0200c9ec
_0200CE68:
	bl FUN_02003da8
	cmp sb, #0
	cmpeq r5, #0
	ldrne r7, [sl, #8]
	mov r4, r0
	ldrne r0, [r7, #0xc]
	orrne r0, r0, #0x40
	strne r0, [r7, #0xc]
	cmp sb, #0
	beq _0200CEA8
	ldr r0, [r7, #0xc]
	tst r0, #4
	beq _0200CEA8
	add r0, r7, #0x18
	bl FUN_02001c78
	mov r7, #0
_0200CEA8:
	b _0200CF04
_0200CEAC:
	cmp sb, #0
	beq _0200CF04
	tst r1, #0x10
	beq _0200CEE4
	add r5, sp, #0
	mov r0, r5
	bl FUN_0200dbf0
	str sl, [sp, #8]
	ldr r1, [sl, #0x14]
	mov r0, r5
	bic r2, r1, #0x10
	mov r1, #0xa
	str r2, [sl, #0x14]
	bl FUN_0200c9ec
_0200CEE4:
	ldr r0, [sl, #0x14]
	tst r0, #0x40
	beq _0200CF04
	bic r0, r0, #0x40
	orr r1, r0, #8
	add r0, sl, #0xc
	str r1, [sl, #0x14]
	bl FUN_02001c78
_0200CF04:
	mov r0, r4
	bl FUN_02003dbc
	mov r0, r7
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0200cf18
FUN_0200cf18: ; 0x0200CF18
	push {r4, r5, r6, r7, r8, lr}
	movs r5, r0
	ldr r4, [r5, #8]
	popeq {r4, r5, r6, r7, r8, pc}
	mov r7, #0
	mov r6, #1
	arm_func_end FUN_0200cf18
_0200CF30:
	bl FUN_02003da8
	ldr r1, [r5, #0xc]
	mov r8, r0
	orr r0, r1, #0x40
	str r0, [r5, #0xc]
	tst r0, #4
	beq _0200CF58
	add r0, r5, #0x18
	bl FUN_02001c78
	mov r5, r7
_0200CF58:
	mov r0, r8
	bl FUN_02003dbc
	cmp r5, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r1, [r5, #0xc]
	mov r0, r5
	lsr r1, r1, #8
	and r1, r1, #0xff
	bl FUN_0200c9ec
	cmp r0, #0x100
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	mov r1, r6
	bl FUN_0200cd6c
	movs r5, r0
	bne _0200CF30
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0200cf9c
FUN_0200cf9c: ; 0x0200CF9C
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	mov r4, r0
	b _0200CFB8
	arm_func_end FUN_0200cf9c
_0200CFB0:
	add r0, r5, #0x18
	bl FUN_02001c28
_0200CFB8:
	ldr r0, [r5, #0xc]
	tst r0, #0x40
	bne _0200CFCC
	tst r0, #1
	bne _0200CFB0
_0200CFCC:
	mov r0, r4
	bl FUN_02003dbc
	ldr r0, [r5, #0xc]
	tst r0, #0x40
	popeq {r3, r4, r5, pc}
	ldr r1, [r5, #0xc]
	mov r0, r5
	lsr r1, r1, #8
	and r1, r1, #0xff
	ldr r4, [r5, #8]
	bl FUN_0200c9ec
	mov r1, r0
	mov r0, r5
	bl FUN_0200c8f0
	mov r0, r4
	mov r1, #1
	bl FUN_0200cd6c
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_0200cf18
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200d020
FUN_0200d020: ; 0x0200D020
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	ldr r0, [sb, #0xc]
	mov r6, #0
	tst r0, #1
	mov r7, r6
	movne r0, #1
	moveq r0, r7
	mov r5, r1
	mov r8, r2
	ldr r4, [sb, #8]
	cmp r0, #0
	beq _0200D058
	bl FUN_02004160
	arm_func_end FUN_0200d020
_0200D058:
	cmp r4, #0
	moveq r0, #6
	streq r0, [sb, #0x14]
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sb, #0xc]
	mov r1, #2
	bic r0, r0, #0xff00
	orr r0, r0, r5, lsl #8
	orr r0, r0, #1
	str r0, [sb, #0xc]
	cmp r8, #0
	orrne r0, r0, #4
	str r1, [sb, #0x14]
	str r6, [sb]
	strne r0, [sb, #0xc]
	bl FUN_02003da8
	ldr r1, [r4, #0x14]
	mov r5, r0
	tst r1, #0x80
	beq _0200D0BC
	mov r0, sb
	mov r1, #3
	bl FUN_0200c8f0
	b _0200D0E0
_0200D0BC:
	ldr r1, [r4, #8]
	add r0, r4, #8
	cmp r1, #0
	beq _0200D0DC
_0200D0CC:
	mov r0, r1
	ldr r1, [r1]
	cmp r1, #0
	bne _0200D0CC
_0200D0DC:
	str sb, [r0]
_0200D0E0:
	ldr r0, [r4, #8]
	mov r6, #0
	cmp r0, sb
	bne _0200D0FC
	ldr r0, [r4, #0x14]
	tst r0, #0x10
	moveq r6, #1
_0200D0FC:
	mov r0, r5
	bl FUN_02003dbc
	ldr r0, [sb, #0x14]
	cmp r0, #3
	beq _0200D150
	mov r0, r4
	mov r1, r6
	bl FUN_0200cd6c
	cmp r8, #0
	beq _0200D140
	mov r0, sb
	bl FUN_0200cf9c
	ldr r0, [sb, #0x14]
	mov r7, #1
	cmp r0, #0
	movne r7, #0
	b _0200D150
_0200D140:
	cmp r0, #0
	beq _0200D14C
	bl FUN_0200cf18
_0200D14C:
	mov r7, #1
_0200D150:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0200d158
FUN_0200d158: ; 0x0200D158
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sb, r0
	mov r8, r1
	bl FUN_02003da8
	ldr r1, _0200D1E0 ; =LAB_02095924
	mov r6, r0
	ldr r7, [r1]
	cmp r7, #0
	beq _0200D1D0
	mov r4, #0
	mov r5, #1
	arm_func_end FUN_0200d158
_0200D184:
	ldr r0, [r7, #0x14]
	tst r0, #2
	movne r0, r5
	moveq r0, r4
	cmp r0, #0
	beq _0200D1C4
	mov r0, r7
	bl FUN_0200d7d0
	mov r1, sb
	mov r2, r8
	mov sl, r0
	bl FUN_02014fc4
	cmp r0, #0
	ldrsbeq r0, [r8, sl]
	cmpeq r0, #0
	beq _0200D1D0
_0200D1C4:
	ldr r7, [r7, #4]
	cmp r7, #0
	bne _0200D184
_0200D1D0:
	mov r0, r6
	bl FUN_02003dbc
	mov r0, r7
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0200D1E0: .word LAB_02095924

	arm_func_start FUN_0200d1e4
FUN_0200d1e4: ; 0x0200D1E4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x160
	add r8, sp, #0x5c
	mov r4, #0
	add r1, sp, #0
	mov r2, r8
	str r4, [sp]
	bl FUN_0200d318
	movs r7, r0
	beq _0200D2A4
	ldr sb, _0200D2B0 ; =LAB_02095924
	ldr r6, _0200D2B4 ; =LAB_02095a34
	str r7, [sb, #4]
	strh r4, [sb, #8]
	strh r4, [sb, #0xa]
	mov r5, #0x104
	mov r0, r6
	mov r1, r8
	mov r2, r5
	str r4, [sb, #0xc]
	bl StrncpyWithNullPad
	ldr r0, [r7, #0x24]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	beq _0200D2A0
	add r4, sp, #0x14
	mov r0, r4
	bl FUN_0200dbf0
	ldr r3, [sp]
	add ip, sp, #4
	mov r2, #1
	mov r0, r4
	mov r1, #4
	str r7, [sp, #0x1c]
	str ip, [sp, #0x24]
	str r3, [sp, #4]
	str r8, [sp, #8]
	str r2, [sp, #0x10]
	bl FUN_0200d020
	cmp r0, #0
	beq _0200D2A0
	ldr r3, [sp, #0xc]
	mov r0, r6
	mov r1, r8
	mov r2, r5
	strh r3, [sb, #8]
	bl StrncpyWithNullPad
	arm_func_end FUN_0200d1e4
_0200D2A0:
	mov r4, #1
_0200D2A4:
	mov r0, r4
	add sp, sp, #0x160
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0200D2B0: .word LAB_02095924
_0200D2B4: .word LAB_02095a34

	arm_func_start FUN_0200d2b8
FUN_0200d2b8: ; 0x0200D2B8
	push {r3, lr}
	sub lr, r1, #1
	cmp lr, r3
	movge lr, r3
	mov ip, #0
	b _0200D2D8
	arm_func_end FUN_0200d2b8
_0200D2D0:
	strb r1, [r0, ip]
	add ip, ip, #1
_0200D2D8:
	cmp ip, lr
	bge _0200D2EC
	ldrsb r1, [r2, ip]
	cmp r1, #0
	bne _0200D2D0
_0200D2EC:
	cmp ip, r3
	bge _0200D308
	ldrsb r1, [r2, ip]
	cmp r1, #0
	ldrne r1, [sp, #8]
	movne r2, #1
	strne r2, [r1]
_0200D308:
	mov r1, #0
	strb r1, [r0, ip]
	mov r0, ip
	pop {r3, pc}

	arm_func_start FUN_0200d318
FUN_0200d318: ; 0x0200D318
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r3, _0200D5F4 ; =LAB_02095924
	mov r6, #0
	ldr r4, [r3, #4]
	mov r7, r1
	mov sl, r0
	mov sb, r2
	str r6, [sp, #8]
	cmp r4, #0
	mov r1, #1
	mov r5, r6
	bne _0200D368
	ldr r2, [r3]
	ldr r0, _0200D5F8 ; =LAB_02095a34
	str r2, [r3, #4]
	strh r6, [r3, #8]
	str r6, [r3, #0xc]
	strh r6, [r3, #0xa]
	strb r6, [r0]
	arm_func_end FUN_0200d318
_0200D368:
	ldrb r0, [sl]
	cmp r0, #0x2f
	beq _0200D37C
	cmp r0, #0x5c
	bne _0200D394
_0200D37C:
	ldr r0, _0200D5F4 ; =LAB_02095924
	cmp r7, #0
	ldr r0, [r0, #4]
	add sl, sl, #1
	str r0, [sp, #4]
	b _0200D45C
_0200D394:
	mov r4, #0
_0200D398:
	ldrb r0, [sl, r4]
	cmp r0, #0
	cmpne r0, #0x2f
	beq _0200D3B0
	cmp r0, #0x5c
	bne _0200D42C
_0200D3B0:
	ldr r1, _0200D5F4 ; =LAB_02095924
	cmp r7, #0
	ldr r0, [r1, #4]
	str r0, [sp, #4]
	ldrhne r0, [r1, #8]
	strne r0, [r7]
	cmp sb, #0
	beq _0200D484
	ldr r0, _0200D5F4 ; =LAB_02095924
	ldrh r0, [r0, #8]
	cmp r0, #0
	bne _0200D484
	ldr r2, _0200D5F8 ; =LAB_02095a34
	ldrsb r0, [r2]
	cmp r0, #0
	beq _0200D484
	mov r1, #0x104
	add r4, sp, #8
	mov r0, sb
	mov r3, r1
	str r4, [sp]
	bl FUN_0200d2b8
	add r6, r6, r0
	ldr r2, _0200D5FC ; =0x0208EE78
	add r0, sb, r6
	rsb r1, r6, #0x104
	mov r3, #1
	str r4, [sp]
	bl FUN_0200d2b8
	add r6, r6, r0
	b _0200D484
_0200D42C:
	cmp r0, #0x3a
	bne _0200D464
	mov r0, sl
	mov r1, r4
	bl FUN_0200d158
	add r1, r4, #1
	ldrb r1, [sl, r1]!
	str r0, [sp, #4]
	cmp r1, #0x2f
	cmpne r1, #0x5c
	addeq sl, sl, #1
	cmp r7, #0
_0200D45C:
	strne r5, [r7]
	b _0200D484
_0200D464:
	eor r0, r0, #0x20
	sub r0, r0, #0xa1
	cmp r0, #0x3c
	mov r2, r1
	movhs r2, r5
	add r0, r4, #1
	add r4, r0, r2
	b _0200D398
_0200D484:
	cmp sb, #0
	mov r4, #1
	beq _0200D5D8
	ldr r0, [sp, #8]
	mov r7, #0
	cmp r0, #0
	bne _0200D5C8
	add fp, sp, #8
_0200D4A4:
	add r0, sl, r7
	ldrsb r8, [sl, r7]
	cmp r8, #0
	beq _0200D518
	and r1, r8, #0xff
	cmp r1, #0x2f
	mov r2, r4
	cmpne r1, #0x5c
	movne r2, r5
	cmp r2, #0
	bne _0200D518
	and r1, r8, #0xff
	eor r1, r1, #0x20
	sub r1, r1, #0xa1
	cmp r1, #0x3c
	mov r1, r5
	bhs _0200D504
	ldrsb r0, [r0, #1]
	cmp r0, #0x7f
	beq _0200D504
	sub r0, r0, #0x40
	and r0, r0, #0xff
	cmp r0, #0xbc
	movls r1, r4
_0200D504:
	mov r0, #2
	cmp r1, #0
	moveq r0, r4
	add r7, r7, r0
	b _0200D5BC
_0200D518:
	cmp r7, #0
	beq _0200D5A8
	cmp r7, #1
	bne _0200D534
	ldrsb r0, [sl]
	cmp r0, #0x2e
	beq _0200D5A8
_0200D534:
	cmp r7, #2
	ldrsbeq r0, [sl]
	cmpeq r0, #0x2e
	ldrsbeq r0, [sl, #1]
	cmpeq r0, #0x2e
	bne _0200D568
	cmp r6, #0
	subgt r6, r6, #1
	mov r0, sb
	mov r1, r6
	bl FUN_0200db78
	add r6, r0, #1
	b _0200D5A8
_0200D568:
	str fp, [sp]
	add r0, sb, r6
	rsb r1, r6, #0x104
	mov r2, sl
	mov r3, r7
	bl FUN_0200d2b8
	add r6, r6, r0
	cmp r8, #0
	beq _0200D5A8
	ldr r2, _0200D5FC ; =0x0208EE78
	add r0, sb, r6
	rsb r1, r6, #0x104
	mov r3, r4
	str fp, [sp]
	bl FUN_0200d2b8
	add r6, r6, r0
_0200D5A8:
	cmp r8, #0
	beq _0200D5C8
	add r0, r7, #1
	add sl, sl, r0
	mov r7, r5
_0200D5BC:
	ldr r0, [sp, #8]
	cmp r0, #0
	beq _0200D4A4
_0200D5C8:
	mov r1, #0
	mov r0, sb
	strb r1, [sb, r6]
	bl FUN_0200dbac
_0200D5D8:
	ldr r0, [sp, #8]
	cmp r0, #0
	movne r0, #0
	strne r0, [sp, #4]
	ldr r0, [sp, #4]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0200D5F4: .word LAB_02095924
_0200D5F8: .word LAB_02095a34
_0200D5FC: .word 0x0208EE78

	arm_func_start FUN_0200d600
FUN_0200d600: ; 0x0200D600
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r1, r4
	mov r2, #0x5c
	mov r5, r0
	bl MemWrite
	str r4, [r5, #0x10]
	str r4, [r5, #0xc]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200d600

	arm_func_start FUN_0200d624
FUN_0200d624: ; 0x0200D624
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r1
	mov r6, r2
	mov r8, r0
	mov r5, #0
	bl FUN_02003da8
	mov r4, r0
	mov r0, r7
	mov r1, r6
	bl FUN_0200d158
	cmp r0, #0
	bne _0200D708
	ldr r0, _0200D718 ; =LAB_02095924
	ldr r1, _0200D71C ; =LAB_02095924
	ldr r0, [r0]
	cmp r0, #0
	beq _0200D678
	arm_func_end FUN_0200d624
_0200D668:
	add r1, r0, #4
	ldr r0, [r0, #4]
	cmp r0, #0
	bne _0200D668
_0200D678:
	str r8, [r1]
	cmp r6, #3
	bhi _0200D6A0
	mov r3, #0
	mov r0, r8
	mov r1, r7
	add r2, r6, #1
	str r3, [r8]
	bl StrncpyWithNullPad
	b _0200D6F8
_0200D6A0:
	cmp r6, #0xf
	bhi _0200D6F4
	ldr sb, _0200D720 ; =LAB_02095934
	mov r5, #0
_0200D6B0:
	cmp r5, #0x10
	blt _0200D6C0
	bl FUN_02004160
	b _0200D6EC
_0200D6C0:
	lsl r1, r5, #4
	ldrsb r0, [sb, r1]
	cmp r0, #0
	bne _0200D6EC
	add r5, sb, r1
	mov r0, r5
	mov r1, r7
	add r2, r6, #1
	bl StrncpyWithNullPad
	str r5, [r8]
	b _0200D6F8
_0200D6EC:
	add r5, r5, #1
	b _0200D6B0
_0200D6F4:
	bl FUN_02004160
_0200D6F8:
	ldr r0, [r8, #0x14]
	mov r5, #1
	orr r0, r0, #1
	str r0, [r8, #0x14]
_0200D708:
	mov r0, r4
	bl FUN_02003dbc
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0200D718: .word LAB_02095924
_0200D71C: .word LAB_02095924
_0200D720: .word LAB_02095934

	arm_func_start FUN_0200d724
FUN_0200d724: ; 0x0200D724
	push {r4, lr}
	ldr r1, _0200D7C8 ; =LAB_02095924
	mov r4, r0
	ldr r0, [r1]
	cmp r4, r0
	bne _0200D740
	bl FUN_02004160
	arm_func_end FUN_0200d724
_0200D740:
	ldr r0, [r4]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_02003da8
	ldr r1, _0200D7C8 ; =LAB_02095924
	ldr r2, _0200D7CC ; =LAB_02095924
	ldr r1, [r1]
	cmp r1, #0
	beq _0200D784
_0200D764:
	cmp r1, r4
	ldreq r1, [r1, #4]
	streq r1, [r2]
	beq _0200D784
	add r2, r1, #4
	ldr r1, [r1, #4]
	cmp r1, #0
	bne _0200D764
_0200D784:
	ldrsb r1, [r4, #3]
	mov r3, #0
	cmp r1, #0
	ldrne r1, [r4]
	movne r2, #0
	strbne r2, [r1]
	ldr r1, [r4, #0x14]
	str r3, [r4]
	bic r2, r1, #1
	ldr r1, _0200D7C8 ; =LAB_02095924
	str r3, [r4, #4]
	str r2, [r4, #0x14]
	ldr r2, [r1, #4]
	cmp r2, r4
	streq r3, [r1, #4]
	bl FUN_02003dbc
	pop {r4, pc}
	.align 2, 0_0200D7C8: .word LAB_02095924
_0200D7CC: .word LAB_02095924

	arm_func_start FUN_0200d7d0
FUN_0200d7d0: ; 0x0200D7D0
	ldrsb r1, [r0, #3]
	cmp r1, #0
	ldrne r0, [r0]
	bx lr
	arm_func_end FUN_0200d7d0

	arm_func_start FUN_0200d7e0
FUN_0200d7e0: ; 0x0200D7E0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x48
	mov r5, r0
	add r4, sp, #0
	mov r0, r4
	str r1, [r5, #0x20]
	str r2, [r5, #0x24]
	bl FUN_0200dbf0
	mov r0, r4
	str r5, [sp, #8]
	mov r1, #0x11
	bl FUN_0200c9ec
	ldr r1, [r5, #0x14]
	mov r0, #1
	orr r1, r1, #2
	str r1, [r5, #0x14]
	add sp, sp, #0x48
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200d7e0

	arm_func_start FUN_0200d828
FUN_0200d828: ; 0x0200D828
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x48
	mov r5, r0
	bl FUN_02003da8
	ldr r1, [r5, #0x14]
	mov r4, r0
	tst r1, #2
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _0200D8D4
	mov r0, r5
	bl FUN_0200d8e8
	ldr r1, [r5, #0x14]
	mov r7, r0
	ldr r0, [r5, #8]
	orr r1, r1, #0x80
	str r1, [r5, #0x14]
	cmp r0, #0
	beq _0200D894
	mov r6, #3
	arm_func_end FUN_0200d828
_0200D87C:
	ldr r8, [r0]
	mov r1, r6
	bl FUN_0200c8f0
	mov r0, r8
	cmp r8, #0
	bne _0200D87C
_0200D894:
	mov r0, #0
	str r0, [r5, #8]
	cmp r7, #0
	beq _0200D8AC
	mov r0, r5
	bl FUN_0200d978
_0200D8AC:
	add r6, sp, #0
	mov r0, r6
	bl FUN_0200dbf0
	mov r0, r6
	str r5, [sp, #8]
	mov r1, #0x12
	bl FUN_0200c9ec
	ldr r0, [r5, #0x14]
	bic r0, r0, #0xa2
	str r0, [r5, #0x14]
_0200D8D4:
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #1
	add sp, sp, #0x48
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0200d8e8
FUN_0200d8e8: ; 0x0200D8E8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	bl FUN_02003da8
	ldr r1, [r6, #0x14]
	mov r4, r0
	tst r1, #8
	movne r0, #1
	moveq r0, #0
	mov r5, #1
	cmp r0, #0
	movne r5, #0
	cmp r5, #0
	beq _0200D968
	ldr r0, [r6, #0x14]
	tst r0, #0x10
	orreq r0, r0, #8
	streq r0, [r6, #0x14]
	beq _0200D968
	orr r0, r0, #0x40
	str r0, [r6, #0x14]
	bl FUN_02003da8
	ldr r1, [r6, #0x14]
	mov r7, r0
	tst r1, #0x40
	beq _0200D960
	arm_func_end FUN_0200d8e8
_0200D94C:
	add r0, r6, #0xc
	bl FUN_02001c28
	ldr r0, [r6, #0x14]
	tst r0, #0x40
	bne _0200D94C
_0200D960:
	mov r0, r7
	bl FUN_02003dbc
_0200D968:
	mov r0, r4
	bl FUN_02003dbc
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0200d978
FUN_0200d978: ; 0x0200D978
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	ldr r1, [r5, #0x14]
	mov r4, #1
	tst r1, #8
	movne r1, #1
	moveq r1, #0
	cmp r1, #0
	movne r4, #0
	cmp r4, #0
	ldreq r1, [r5, #0x14]
	biceq r1, r1, #8
	streq r1, [r5, #0x14]
	bl FUN_02003dbc
	mov r0, r5
	mov r1, #1
	bl FUN_0200cd6c
	cmp r0, #0
	beq _0200D9CC
	bl FUN_0200cf18
	arm_func_end FUN_0200d978
_0200D9CC:
	mov r0, r4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200d9d4
FUN_0200d9d4: ; 0x0200D9D4
	push {r4, r5, r6, lr}
	mov r4, r0
	ldr r5, [r4, #8]
	mov r6, r1
	ldr r0, [r5, #0xc]
	tst r0, #4
	beq _0200DA1C
	bl FUN_02003da8
	ldr r1, [r5, #0xc]
	mov r4, r0
	orr r0, r1, #8
	str r0, [r5, #0xc]
	add r0, r5, #0x18
	str r6, [r5, #0x14]
	bl FUN_02001c78
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0200d9d4
_0200DA1C:
	mov r0, r5
	bl FUN_0200c8f0
	mov r0, r4
	mov r1, #1
	bl FUN_0200cd6c
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	bl FUN_0200cf18
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0200da40
FUN_0200da40: ; 0x0200DA40
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r5, #0
	bl FUN_02003da8
	ldr r1, [r4, #0xc]
	tst r1, #1
	movne r1, #1
	moveq r1, r5
	cmp r1, #0
	beq _0200DA88
	ldr r1, [r4, #0xc]
	tst r1, #0x44
	moveq r5, #1
	movne r5, #0
	cmp r5, #0
	ldrne r1, [r4, #0xc]
	orrne r1, r1, #4
	strne r1, [r4, #0xc]
	arm_func_end FUN_0200da40
_0200DA88:
	bl FUN_02003dbc
	cmp r5, #0
	beq _0200DAA0
	mov r0, r4
	bl FUN_0200cf9c
	b _0200DAD0
_0200DAA0:
	bl FUN_02003da8
	ldr r1, [r4, #0xc]
	mov r5, r0
	tst r1, #1
	beq _0200DAC8
_0200DAB4:
	add r0, r4, #0x18
	bl FUN_02001c28
	ldr r0, [r4, #0xc]
	tst r0, #1
	bne _0200DAB4
_0200DAC8:
	mov r0, r5
	bl FUN_02003dbc
_0200DAD0:
	ldr r0, [r4, #0x14]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200dae4
FUN_0200dae4: ; 0x0200DAE4
	sub r3, r1, #1
	b _0200DAF0
	arm_func_end FUN_0200dae4
_0200DAEC:
	sub r3, r3, #1
_0200DAF0:
	cmp r3, #0
	ble _0200DB10
	add r2, r0, r3
	ldrb r2, [r2, #-1]
	eor r2, r2, #0x20
	sub r2, r2, #0xa1
	cmp r2, #0x3c
	blo _0200DAEC
_0200DB10:
	sub r1, r1, #1
	sub r0, r1, r3
	and r0, r0, #1
	sub r0, r1, r0
	bx lr

	arm_func_start FUN_0200db24
FUN_0200db24: ; 0x0200DB24
	push {r3, lr}
	mov r3, #0
	mov ip, #1
	b _0200DB54
	arm_func_end FUN_0200db24
_0200DB34:
	and r2, lr, #0xff
	eor r2, r2, #0x20
	sub r2, r2, #0xa1
	cmp r2, #0x3c
	movlo r2, ip
	movhs r2, r3
	add r1, r1, #1
	add r1, r1, r2
_0200DB54:
	ldrsb lr, [r0, r1]
	cmp lr, #0
	andne r2, lr, #0xff
	cmpne r2, #0x2f
	beq _0200DB70
	cmp r2, #0x5c
	bne _0200DB34
_0200DB70:
	mov r0, r1
	pop {r3, pc}

	arm_func_start FUN_0200db78
FUN_0200db78: ; 0x0200DB78
	push {r4, lr}
	mov r4, r0
	arm_func_end FUN_0200db78
_0200DB80:
	mov r0, r4
	bl FUN_0200dae4
	movs r1, r0
	bmi _0200DBA4
	ldrb r0, [r4, r1]
	cmp r0, #0x2f
	beq _0200DBA4
	cmp r0, #0x5c
	bne _0200DB80
_0200DBA4:
	mov r0, r1
	pop {r4, pc}

	arm_func_start FUN_0200dbac
FUN_0200dbac: ; 0x0200DBAC
	push {r3, r4, r5, lr}
	mov r5, r0
	bl GetStrLen
	mov r4, r0
	mov r0, r5
	mov r1, r4
	bl FUN_0200dae4
	cmp r0, #0
	blt _0200DBE8
	ldrb r1, [r5, r0]
	cmp r1, #0x2f
	cmpne r1, #0x5c
	moveq r1, #0
	moveq r4, r0
	strbeq r1, [r5, r0]
	arm_func_end FUN_0200dbac
_0200DBE8:
	mov r0, r4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200dbf0
FUN_0200dbf0: ; 0x0200DBF0
	mov r2, #0
	orr r1, r2, #0x2300
	str r2, [r0, #8]
	str r2, [r0, #4]
	str r2, [r0]
	str r2, [r0, #0x1c]
	str r2, [r0, #0x18]
	str r1, [r0, #0xc]
	str r2, [r0, #0x10]
	str r2, [r0, #0x14]
	bx lr
	arm_func_end FUN_0200dbf0

	arm_func_start FUN_0200dc1c
FUN_0200dc1c: ; 0x0200DC1C
	push {r4, lr}
	mov r4, r0
	bl FUN_02003da8
	ldr r1, [r4, #0xc]
	tst r1, #1
	movne r1, #1
	moveq r1, #0
	cmp r1, #0
	beq _0200DC5C
	ldr r1, [r4, #0xc]
	ldr r2, [r4, #8]
	orr r1, r1, #2
	str r1, [r4, #0xc]
	ldr r1, [r2, #0x14]
	orr r1, r1, #0x20
	str r1, [r2, #0x14]
	arm_func_end FUN_0200dc1c
_0200DC5C:
	bl FUN_02003dbc
	pop {r4, pc}

	arm_func_start FUN_0200dc64
FUN_0200dc64: ; 0x0200DC64
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x174
	add r6, sp, #0x5c
	mov r8, r0
	mov r0, r1
	mov r7, #0
	add r1, sp, #0
	mov r2, r6
	str r7, [sp]
	bl FUN_0200d318
	movs r5, r0
	beq _0200DCE4
	add r4, sp, #0x14
	mov r0, r4
	bl FUN_0200dbf0
	ldr r3, [sp]
	add ip, sp, #4
	mov sb, #1
	mov r0, r4
	mov r2, sb
	mov r1, #4
	str r5, [sp, #0x1c]
	str ip, [sp, #0x24]
	str r3, [sp, #4]
	str r6, [sp, #8]
	str r7, [sp, #0x10]
	bl FUN_0200d020
	cmp r0, #0
	strne r5, [r8]
	ldrne r0, [sp, #0xc]
	movne r7, sb
	strne r0, [r8, #4]
	arm_func_end FUN_0200dc64
_0200DCE4:
	mov r0, r7
	add sp, sp, #0x174
	pop {r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0200dcf0
FUN_0200dcf0: ; 0x0200DCF0
	push {r3, lr}
	sub sp, sp, #0x10
	add ip, sp, #0
	str r1, [r0, #8]
	str ip, [r0, #0x10]
	ldr lr, [sp, #0x18]
	str r2, [sp, #4]
	mov ip, #0
	mov r1, #7
	mov r2, #1
	str lr, [sp]
	str r3, [sp, #8]
	str ip, [sp, #0xc]
	bl FUN_0200d020
	add sp, sp, #0x10
	pop {r3, pc}
	arm_func_end FUN_0200dcf0

	arm_func_start FUN_0200dd30
FUN_0200dd30: ; 0x0200DD30
	push {r0, r1, r2, r3}
	push {r3, lr}
	sub sp, sp, #8
	ldr r2, [sp, #0x14]
	ldr r3, [sp, #0x18]
	cmp r2, #0
	mov ip, #0
	beq _0200DD74
	add r1, sp, #0
	str r2, [r0, #8]
	str r1, [r0, #0x10]
	mov r1, #6
	mov r2, #1
	str r3, [sp]
	str ip, [sp, #4]
	bl FUN_0200d020
	mov ip, r0
	arm_func_end FUN_0200dd30
_0200DD74:
	mov r0, ip
	add sp, sp, #8
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr

	arm_func_start FUN_0200dd88
FUN_0200dd88: ; 0x0200DD88
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x128
	add r4, sp, #0x10
	mov r7, r0
	mov r0, r1
	mov r6, r2
	mov r5, #0
	add r1, sp, #0
	mov r2, r4
	str r5, [sp]
	bl FUN_0200d318
	movs sb, r0
	beq _0200DE00
	mov r0, r7
	bl FUN_0200dbf0
	add r0, sp, #4
	str r0, [r7, #0x10]
	str sb, [r7, #8]
	mov r8, #1
	ldr r3, [sp]
	mov r0, r7
	mov r2, r8
	mov r1, #0xd
	str r3, [sp, #4]
	str r4, [sp, #8]
	str r6, [sp, #0xc]
	bl FUN_0200d020
	cmp r0, #0
	movne r5, r8
	streq r5, [r7, #8]
	arm_func_end FUN_0200dd88
_0200DE00:
	mov r0, r5
	add sp, sp, #0x128
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0200de0c
FUN_0200de0c: ; 0x0200DE0C
	ldr ip, _0200DE1C ; =FUN_0200d020
	mov r1, #8
	mov r2, #1
	bx ip
	.align 2, 0_0200DE1C: .word FUN_0200d020
	arm_func_end FUN_0200de0c

	arm_func_start FUN_0200de20
FUN_0200de20: ; 0x0200DE20
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r4, #0
	add r1, sp, #4
	mov r5, r0
	str r4, [sp, #4]
	bl FUN_0200f844
	cmp r0, #0
	bne _0200DE6C
	add r1, sp, #0
	str r1, [r5, #0x10]
	mov r0, r5
	mov r1, #0xf
	mov r2, #1
	str r4, [sp]
	bl FUN_0200d020
	cmp r0, #0
	ldrne r0, [sp]
	strne r0, [sp, #4]
	arm_func_end FUN_0200de20
_0200DE6C:
	ldr r0, [sp, #4]
	add sp, sp, #8
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200de78
FUN_0200de78: ; 0x0200DE78
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r4, #0
	add r1, sp, #4
	mov r5, r0
	str r4, [sp, #4]
	bl FUN_0200f884
	cmp r0, #0
	bne _0200DEC4
	add r1, sp, #0
	str r1, [r5, #0x10]
	mov r0, r5
	mov r1, #0x10
	mov r2, #1
	str r4, [sp]
	bl FUN_0200d020
	cmp r0, #0
	ldrne r0, [sp]
	strne r0, [sp, #4]
	arm_func_end FUN_0200de78
_0200DEC4:
	ldr r0, [sp, #4]
	add sp, sp, #8
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200ded0
FUN_0200ded0: ; 0x0200DED0
	push {r3, lr}
	sub sp, sp, #8
	add r3, sp, #0
	str r3, [r0, #0x10]
	str r1, [sp]
	str r2, [sp, #4]
	mov r1, #0xe
	mov r2, #1
	bl FUN_0200d020
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_0200ded0

	arm_func_start FUN_0200defc
FUN_0200defc: ; 0x0200DEFC
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	add r3, sp, #0
	mov r5, r0
	str r3, [r5, #0x10]
	str r1, [sp]
	mov r4, #1
	str r2, [sp, #4]
	mov r2, r4
	mov r1, #0
	bl FUN_0200d020
	cmp r0, #0
	ldrne r2, [sp, #4]
	bne _0200DF44
	ldr r0, [r5, #0x14]
	sub r2, r4, #2
	cmp r0, #6
	ldrne r2, [sp, #4]
	arm_func_end FUN_0200defc
_0200DF44:
	mov r0, r2
	add sp, sp, #8
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0200df50
FUN_0200df50: ; 0x0200DF50
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r5, r1
	add r1, sp, #0
	mov r6, r0
	mov r4, r2
	bl FUN_0200f884
	cmp r0, #0
	beq _0200DF9C
	add r1, sp, #4
	mov r0, r6
	bl FUN_0200f844
	cmp r0, #0
	beq _0200DF9C
	ldr r2, [sp]
	ldr r1, [sp, #4]
	add r0, r2, r4
	cmp r0, r1
	subhi r4, r1, r2
	arm_func_end FUN_0200df50
_0200DF9C:
	mov r1, #0
	add r3, r6, #0x30
	mov r0, r6
	mov r2, r1
	str r3, [r6, #0x10]
	str r5, [r6, #0x30]
	str r4, [r3, #4]
	bl FUN_0200d020
	mov r0, r4
	add sp, sp, #8
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0200dfc8
FUN_0200dfc8: ; 0x0200DFC8
	ldr ip, _0200DFD4 ; =FUN_0200dd88
	mov r2, #1
	bx ip
	.align 2, 0_0200DFD4: .word FUN_0200dd88
	arm_func_end FUN_0200dfc8

	arm_func_start thunk_FUN_0200de20
thunk_FUN_0200de20: ; 0x0200DFD8
	ldr ip, _0200DFE0 ; =FUN_0200de20
	bx ip
	.align 2, 0_0200DFE0: .word FUN_0200de20
	arm_func_end thunk_FUN_0200de20

	arm_func_start thunk_FUN_0200de78
thunk_FUN_0200de78: ; 0x0200DFE4
	ldr ip, _0200DFEC ; =FUN_0200de78
	bx ip
	.align 2, 0_0200DFEC: .word FUN_0200de78
	arm_func_end thunk_FUN_0200de78

	arm_func_start thunk_FUN_0200d1e4
thunk_FUN_0200d1e4: ; 0x0200DFF0
	ldr ip, _0200DFF8 ; =FUN_0200d1e4
	bx ip
	.align 2, 0_0200DFF8: .word FUN_0200d1e4
	arm_func_end thunk_FUN_0200d1e4

	arm_func_start FUN_0200dffc
FUN_0200dffc: ; 0x0200DFFC
	push {r4, lr}
	bl FUN_02003e60
	cmp r0, #2
	ldrne r0, _0200E060 ; =LAB_02095b38
	mov r1, #0
	strne r1, [r0, #4]
	strne r1, [r0, #8]
	strne r1, [r0, #0xc]
	bne _0200E034
	ldr r0, _0200E060 ; =LAB_02095b38
	mvn r2, #0
	str r2, [r0, #4]
	str r1, [r0, #8]
	str r2, [r0, #0xc]
	arm_func_end FUN_0200dffc
_0200E034:
	str r1, [r0, #0x10]
	ldr r1, _0200E064 ; =0x0208BD74
	ldr r4, _0200E060 ; =LAB_02095b38
	ldr r0, _0200E068 ; =0x0208EE7C
	str r1, [r4, #0x14]
	mov r2, #0x40
	mov r1, #3
	str r2, [r4, #0x18]
	bl FUN_0200d158
	str r0, [r4]
	pop {r4, pc}
	.align 2, 0_0200E060: .word LAB_02095b38
_0200E064: .word 0x0208BD74
_0200E068: .word 0x0208EE7C

	arm_func_start FUN_0200e06c
FUN_0200e06c: ; 0x0200E06C
	ldr r1, [r0, #0x1c]
	lsr r2, r1, #0x18
	tst r2, #1
	lslne r0, r1, #8
	lsrne r0, r0, #8
	ldreq r0, [r0, #8]
	bx lr
	arm_func_end FUN_0200e06c

	arm_func_start FUN_0200e088
FUN_0200e088: ; 0x0200E088
	push {r4, r5, r6, lr}
	ldr r1, [r0, #0xc]
	ldmib r0, {r4, r5}
	add r6, r5, r1
	mov r0, r4
	mov r1, r6
	bl FUN_0200270c
	mov r0, r4
	mov r1, r6
	bl FUN_02002698
	add r0, r4, r5
	sub r2, r6, r5
	mov r1, #0
	bl MemWrite
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0200e088

	arm_func_start FUN_0200e0c4
FUN_0200e0c4: ; 0x0200E0C4
	sub sp, sp, #8
	ldr r2, _0200E0EC ; =LAB_02095b38
	ldr r1, [r1, #0x18]
	ldr r2, [r2]
	str r1, [sp, #4]
	str r2, [sp]
	str r2, [r0]
	str r1, [r0, #4]
	add sp, sp, #8
	bx lr
	.align 2, 0_0200E0EC: .word LAB_02095b38
	arm_func_end FUN_0200e0c4

	arm_func_start FUN_0200e0f0
FUN_0200e0f0: ; 0x0200E0F0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xa0
	movs r4, r1
	ldreq sb, _0200E248 ; =LAB_02095b3c
	mov r5, r0
	ldrne sb, _0200E24C ; =LAB_02095b44
	lsl r8, r2, #5
	ldr r0, [sb]
	mov r7, #0
	cmp r0, #0
	beq _0200E174
	ldr r0, [sb, #4]
	cmp r8, r0
	bhs _0200E23C
	add r6, sp, #0x58
	mov r0, r6
	bl FUN_0200dbf0
	ldr r0, [sb]
	mov r1, r5
	add r0, r0, r8
	mov r2, #0x20
	bl _memcpy
	add r8, sp, #8
	mov r1, r5
	mov r0, r8
	str r4, [r5, #0x20]
	bl FUN_0200e0c4
	mov r0, r6
	ldm r8, {r1, r2}
	bl FUN_0200dd30
	cmp r0, #0
	beq _0200E23C
	b _0200E218
	arm_func_end FUN_0200e0f0
_0200E174:
	cmp r4, #0
	bne _0200E188
	bl FUN_0200ff80
	add sb, r0, #0x50
	b _0200E190
_0200E188:
	bl FUN_0200ff80
	add sb, r0, #0x58
_0200E190:
	ldr r0, [sb, #4]
	cmp r8, r0
	bhs _0200E23C
	add r6, sp, #0x10
	mov r0, r6
	bl FUN_0200dbf0
	ldr r3, [sb]
	ldr r2, [sb, #4]
	mov r0, r6
	add r1, r3, r8
	add r2, r3, r2
	bl FUN_0200fd64
	cmp r0, #0
	beq _0200E23C
	mov r0, r6
	mov r1, r5
	mov r2, #0x20
	bl FUN_0200defc
	cmp r0, #0x20
	mov r0, r6
	beq _0200E1EC
	bl FUN_0200de0c
	b _0200E23C
_0200E1EC:
	bl FUN_0200de0c
	add r8, sp, #0
	mov r1, r5
	mov r0, r8
	str r4, [r5, #0x20]
	bl FUN_0200e0c4
	mov r0, r6
	ldm r8, {r1, r2}
	bl FUN_0200dd30
	cmp r0, #0
	beq _0200E23C
_0200E218:
	mov r0, r6
	bl FUN_0200fad8
	str r0, [r5, #0x24]
	mov r0, r6
	bl FUN_0200de20
	str r0, [r5, #0x28]
	mov r0, r6
	bl FUN_0200de0c
	mov r7, #1
_0200E23C:
	mov r0, r7
	add sp, sp, #0xa0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0200E248: .word LAB_02095b3c
_0200E24C: .word LAB_02095b44

	arm_func_start FUN_0200e250
FUN_0200e250: ; 0x0200E250
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x50
	add r5, sp, #8
	mov r7, r0
	mov r0, r5
	mov r6, #0
	bl FUN_0200dbf0
	add r4, sp, #0
	mov r1, r7
	mov r0, r4
	bl FUN_0200e0c4
	mov r0, r5
	ldm r4, {r1, r2}
	bl FUN_0200dd30
	cmp r0, #0
	beq _0200E2C4
	mov r0, r7
	bl FUN_0200e06c
	mov r4, r0
	mov r0, r7
	bl FUN_0200e088
	ldr r1, [r7, #4]
	mov r0, r5
	mov r2, r4
	bl FUN_0200defc
	cmp r4, r0
	add r0, sp, #8
	moveq r6, #1
	bl FUN_0200de0c
	arm_func_end FUN_0200e250
_0200E2C4:
	mov r0, r6
	add sp, sp, #0x50
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0200e2d0
FUN_0200e2d0: ; 0x0200E2D0
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x58
	mov r4, #0
	mov r8, r0
	mov r6, r2
	mov r7, r1
	add r0, sp, #0x44
	mov r1, r4
	mov r2, #0x14
	mov r5, r3
	bl MemWrite
	ldr r2, _0200E38C ; =LAB_02095b38
	add r1, sp, #4
	ldr r0, [r2, #0x14]
	ldr r2, [r2, #0x18]
	bl _memcpy
	cmp r5, #0
	beq _0200E324
	mov r0, #1
	bl FUN_0200a3a0
	mov r4, r0
	arm_func_end FUN_0200e2d0
_0200E324:
	ldr r1, _0200E38C ; =LAB_02095b38
	add r0, sp, #0x44
	ldr ip, [r1, #0x18]
	add r3, sp, #4
	mov r1, r7
	mov r2, r6
	str ip, [sp]
	bl FUN_0200a700
	cmp r5, #0
	beq _0200E354
	mov r0, r4
	bl FUN_0200a3a0
_0200E354:
	mov r3, #0
	add r2, sp, #0x44
_0200E35C:
	ldr r1, [r2, r3]
	ldr r0, [r8, r3]
	cmp r1, r0
	bne _0200E378
	add r3, r3, #4
	cmp r3, #0x14
	blo _0200E35C
_0200E378:
	mov r0, #1
	cmp r3, #0x14
	movne r0, #0
	add sp, sp, #0x58
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0200E38C: .word LAB_02095b38

	arm_func_start FUN_0200e390
FUN_0200e390: ; 0x0200E390
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_0200e06c
	mov r4, r0
	bl FUN_02003e60
	cmp r0, #1
	beq _0200E420
	ldr r0, [r5, #0x1c]
	mov r3, #0
	lsr r0, r0, #0x18
	tst r0, #2
	beq _0200E400
	ldr r0, _0200E474 ; =0x0209390C
	ldr r2, _0200E478 ; =0x0209390C
	ldr r1, _0200E47C ; =0x66666667
	sub ip, r0, r2
	smull r0, lr, r1, ip
	lsr r0, ip, #0x1f
	ldr r1, [r5]
	add lr, r0, lr, asr #3
	cmp r1, lr
	bhs _0200E400
	mov r0, #0x14
	mla r0, r1, r0, r2
	ldr r1, [r5, #4]
	mov r2, r4
	bl FUN_0200e2d0
	mov r3, r0
	arm_func_end FUN_0200e390
_0200E400:
	cmp r3, #0
	bne _0200E420
	ldr r0, [r5, #4]
	mov r2, r4
	mov r1, #0
	bl MemWrite
	bl FUN_02004160
	pop {r3, r4, r5, pc}
_0200E420:
	ldr r0, [r5, #0x1c]
	lsr r0, r0, #0x18
	tst r0, #1
	beq _0200E43C
	ldr r0, [r5, #4]
	add r0, r0, r4
	bl MIi_UncompressBackward
_0200E43C:
	ldmib r5, {r0, r1}
	bl FUN_020026d0
	ldr r4, [r5, #0x10]
	ldr r5, [r5, #0x14]
	cmp r4, r5
	pophs {r3, r4, r5, pc}
_0200E454:
	ldr r0, [r4]
	cmp r0, #0
	beq _0200E464
	blx r0
_0200E464:
	add r4, r4, #4
	cmp r4, r5
	blo _0200E454
	pop {r3, r4, r5, pc}
	.align 2, 0_0200E474: .word 0x0209390C
_0200E478: .word 0x0209390C
_0200E47C: .word 0x66666667

	arm_func_start FUN_0200e480
FUN_0200e480: ; 0x0200E480
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov fp, r0
	arm_func_end FUN_0200e480
_0200E488:
	ldr r1, [fp, #8]
	ldr r0, [fp, #0xc]
	mov r4, #0
	ldr r6, [fp, #4]
	add r0, r1, r0
	mov r5, r4
	add r7, r6, r0
	bl FUN_02003da8
	ldr r1, _0200E56C ; =0x02099928
	mov ip, r4
	ldr lr, [r1]
	mov r8, lr
	cmp lr, #0
	beq _0200E534
	mov r2, r4
_0200E4C4:
	ldr sl, [r8, #8]
	ldr sb, [r8]
	cmp sl, #0
	ldr r3, [r8, #4]
	bne _0200E4E8
	cmp r3, r6
	blo _0200E4E8
	cmp r3, r7
	blo _0200E4F8
_0200E4E8:
	cmp sl, r6
	blo _0200E524
	cmp sl, r7
	bhs _0200E524
_0200E4F8:
	cmp r5, #0
	strne r8, [r5]
	moveq r4, r8
	cmp lr, r8
	streq sb, [r1]
	moveq lr, sb
	str r2, [r8]
	cmp ip, #0
	mov r5, r8
	strne sb, [ip]
	b _0200E528
_0200E524:
	mov ip, r8
_0200E528:
	mov r8, sb
	cmp sb, #0
	bne _0200E4C4
_0200E534:
	bl FUN_02003dbc
	cmp r4, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0200E540:
	ldr r1, [r4, #4]
	ldr r5, [r4]
	cmp r1, #0
	beq _0200E558
	ldr r0, [r4, #8]
	blx r1
_0200E558:
	mov r4, r5
	cmp r5, #0
	bne _0200E540
	b _0200E488
_0200E568:
	.byte 0xF8, 0x8F, 0xBD, 0xE8
_0200E56C: .word 0x02099928

	arm_func_start FUN_0200e570
FUN_0200e570: ; 0x0200E570
	push {r3, lr}
	bl FUN_0200e480
	mov r0, #1
	pop {r3, pc}
	arm_func_end FUN_0200e570

	arm_func_start FUN_0200e580
FUN_0200e580: ; 0x0200E580
	push {r4, r5, lr}
	sub sp, sp, #0x2c
	add r4, sp, #0
	mov r3, r0
	mov r2, r1
	mov r0, r4
	mov r1, r3
	mov r5, #0
	bl FUN_0200e0f0
	cmp r0, #0
	beq _0200E5C8
	mov r0, r4
	bl FUN_0200e250
	cmp r0, #0
	beq _0200E5C8
	mov r0, r4
	bl FUN_0200e390
	mov r5, #1
	arm_func_end FUN_0200e580
_0200E5C8:
	mov r0, r5
	add sp, sp, #0x2c
	pop {r4, r5, pc}

	arm_func_start FUN_0200e5d4
FUN_0200e5d4: ; 0x0200E5D4
	push {r3, r4, lr}
	sub sp, sp, #0x2c
	add r4, sp, #0
	mov r3, r0
	mov r2, r1
	mov r0, r4
	mov r1, r3
	bl FUN_0200e0f0
	cmp r0, #0
	beq _0200E614
	mov r0, r4
	bl FUN_0200e570
	cmp r0, #0
	addne sp, sp, #0x2c
	movne r0, #1
	popne {r3, r4, pc}
	arm_func_end FUN_0200e5d4
_0200E614:
	mov r0, #0
	add sp, sp, #0x2c
	pop {r3, r4, pc}

	arm_func_start FUN_0200e620
FUN_0200e620: ; 0x0200E620
	push {r4, r5, r6, lr}
	mov r4, r0
	ldr r5, [r4]
	mov r6, r2
	ldr r3, [r5, #0x20]
	ldr r0, [r3, #0x1c]
	cmp r0, #0
	beq _0200E650
	ldr r0, [r4, #4]
	bl _memcpy
	mov r0, #0
	b _0200E670
	arm_func_end FUN_0200e620
_0200E650:
	ldr r2, [r4, #4]
	ldr ip, [r3, #0x20]
	mov r0, r5
	mov r3, r6
	blx ip
	mov r1, r0
	ldr r0, [r5, #8]
	bl FUN_0200c994
_0200E670:
	ldr r1, [r4, #4]
	add r1, r1, r6
	str r1, [r4, #4]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0200e680
FUN_0200e680: ; 0x0200E680
	push {r3, lr}
	ldr ip, [r0, #8]
	mov r3, #0
	strh r1, [r0, #0x34]
	mov r1, #2
	mov r2, #1
	str ip, [r0, #0x30]
	strh r3, [r0, #0x36]
	str r3, [r0, #0x38]
	bl FUN_0200ef18
	pop {r3, pc}
	arm_func_end FUN_0200e680

	arm_func_start FUN_0200e6ac
FUN_0200e6ac: ; 0x0200E6AC
	push {r4, r5, r6, lr}
	sub sp, sp, #0x10
	mov r6, r0
	ldr r1, [r6, #8]
	add r5, r6, #0x30
	ldr r4, [r1, #0x20]
	add r0, sp, #0
	str r1, [sp]
	ldrh r2, [r5, #4]
	ldr r3, [r4, #0xc]
	add r1, sp, #8
	add r3, r3, r2, lsl #3
	mov r2, #8
	str r3, [sp, #4]
	bl FUN_0200e620
	movs r3, r0
	bne _0200E738
	add ip, r6, #0x20
	ldm r5, {r0, r1, r2}
	stm ip, {r0, r1, r2}
	ldrh r0, [r5, #6]
	cmp r0, #0
	ldreq r0, [r5, #8]
	cmpeq r0, #0
	bne _0200E728
	ldrh r0, [sp, #0xc]
	strh r0, [r6, #0x26]
	ldr r1, [r4, #0xc]
	ldr r0, [sp, #8]
	add r0, r1, r0
	str r0, [r6, #0x28]
	arm_func_end FUN_0200e6ac
_0200E728:
	ldrh r1, [sp, #0xe]
	ldr r0, _0200E744 ; =0x00000FFF
	and r0, r1, r0
	str r0, [r6, #0x2c]
_0200E738:
	mov r0, r3
	add sp, sp, #0x10
	pop {r4, r5, r6, pc}
	.align 2, 0_0200E744: .word 0x00000FFF

	arm_func_start FUN_0200e748
FUN_0200e748: ; 0x0200E748
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xc
	mov r6, r0
	ldr r5, [r6, #0x30]
	ldr r0, [r6, #8]
	mov r7, #1
	str r0, [sp, #4]
	add r4, sp, #4
	ldr r3, [r6, #0x28]
	add r1, sp, #0
	mov r0, r4
	mov r2, r7
	str r3, [sp, #8]
	bl FUN_0200e620
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, pc}
	ldrb r1, [sp]
	ands r2, r1, #0x7f
	asr r1, r1, #7
	str r2, [r5, #0x10]
	and r1, r1, #1
	addeq sp, sp, #0xc
	str r1, [r5, #0xc]
	moveq r0, r7
	popeq {r4, r5, r6, r7, pc}
	ldr r1, [r6, #0x34]
	cmp r1, #0
	bne _0200E7E8
	mov r0, r4
	add r1, r5, #0x14
	bl FUN_0200e620
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, pc}
	ldr r1, [r5, #0x10]
	mov r2, #0
	add r1, r5, r1
	strb r2, [r1, #0x14]
	b _0200E7F4
	arm_func_end FUN_0200e748
_0200E7E8:
	ldr r1, [sp, #8]
	add r1, r1, r2
	str r1, [sp, #8]
_0200E7F4:
	ldr r1, [r5, #0xc]
	cmp r1, #0
	bne _0200E820
	ldr r1, [r6, #8]
	str r1, [r5]
	ldrh r1, [r6, #0x26]
	str r1, [r5, #4]
	ldrh r1, [r6, #0x26]
	add r1, r1, #1
	strh r1, [r6, #0x26]
	b _0200E85C
_0200E820:
	add r0, sp, #4
	add r1, sp, #2
	mov r2, #2
	bl FUN_0200e620
	cmp r0, #0
	bne _0200E85C
	ldr r2, [r6, #8]
	ldr r1, _0200E870 ; =0x00000FFF
	str r2, [r5]
	ldrh r3, [sp, #2]
	mov r2, #0
	and r1, r3, r1
	strh r1, [r5, #4]
	strh r2, [r5, #6]
	str r2, [r5, #8]
_0200E85C:
	cmp r0, #0
	ldreq r1, [sp, #8]
	streq r1, [r6, #0x28]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0200E870: .word 0x00000FFF

	arm_func_start FUN_0200e874
FUN_0200e874: ; 0x0200E874
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x98
	mov sl, r0
	ldr r3, [sl, #0x40]
	mov r2, #1
	ldr r7, [sl, #0x3c]
	mov r1, #2
	str r3, [sp]
	mov r4, r2
	mov r6, #0
	bl FUN_0200ef18
	ldrsb r0, [r7]
	cmp r0, #0
	beq _0200EA60
	arm_func_end FUN_0200e874
_0200E8AC:
	mov r0, r7
	mov r1, r6
	bl FUN_0200db24
	mov sb, r0
	ldrsb r0, [r7, sb]
	mov r8, #1
	cmp r0, #0
	ldreq r0, [sp]
	cmpeq r0, #0
	moveq r8, r6
	cmp sb, #0
	addeq sp, sp, #0x98
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r0, [r7]
	cmp r0, #0x2e
	bne _0200E92C
	cmp sb, #1
	addeq r7, r7, #1
	beq _0200EA44
	cmp sb, #2
	ldrsbeq r0, [r7, #1]
	cmpeq r0, #0x2e
	bne _0200E934
	ldrh r0, [sl, #0x24]
	cmp r0, #0
	beq _0200E924
	ldr r1, [sl, #0x2c]
	mov r0, sl
	bl FUN_0200e680
_0200E924:
	add r7, r7, #2
	b _0200EA44
_0200E92C:
	cmp r0, #0x2a
	beq _0200EA60
_0200E934:
	cmp sb, #0x7f
	addgt sp, sp, #0x98
	movgt r0, #0xb
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r5, sp, #4
	str r5, [sl, #0x30]
	str r6, [sl, #0x34]
	mov fp, #3
_0200E954:
	mov r0, sl
	mov r1, fp
	mov r2, r4
	bl FUN_0200ef18
	cmp r0, #0
	addne sp, sp, #0x98
	movne r0, #0xb
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x10]
	cmp r8, r0
	ldreq r0, [sp, #0x14]
	cmpeq sb, r0
	bne _0200E954
	mov r1, r6
	mov r0, r6
	cmp sb, #0
	bls _0200E9D8
_0200E998:
	add r1, r5, r0
	ldrsb r2, [r7, r0]
	ldrsb r1, [r1, #0x14]
	sub r2, r2, #0x41
	sub r1, r1, #0x41
	and r2, r2, #0xff
	cmp r2, #0x19
	and r1, r1, #0xff
	addls r2, r2, #0x20
	cmp r1, #0x19
	addls r1, r1, #0x20
	subs r1, r2, r1
	bne _0200E9D8
	add r0, r0, #1
	cmp r0, sb
	blo _0200E998
_0200E9D8:
	cmp r1, #0
	bne _0200E954
	cmp r8, #0
	beq _0200EA10
	add r0, sp, #4
	add r3, sl, #0x30
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, sl
	mov r1, #2
	mov r2, #1
	add r7, r7, sb
	bl FUN_0200ef18
	b _0200EA44
_0200EA10:
	ldr r0, [sp]
	cmp r0, #0
	addne sp, sp, #0x98
	movne r0, #0xb
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r3, [sl, #0x44]
	ldr r2, [sp, #4]
	ldr r1, [sp, #8]
	add sp, sp, #0x98
	str r2, [r3]
	mov r0, #0
	str r1, [r3, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0200EA44:
	ldrsb r0, [r7]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	ldrsb r0, [r7, r0]!
	cmp r0, #0
	bne _0200E8AC
_0200EA60:
	ldr r0, [sp]
	cmp r0, #0
	moveq r0, #0xb
	addne r0, sl, #0x20
	ldrne r3, [sl, #0x44]
	ldmne r0, {r0, r1, r2}
	stmne r3, {r0, r1, r2}
	movne r0, #0
	add sp, sp, #0x98
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0200ea88
FUN_0200ea88: ; 0x0200EA88
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xe0
	mov fp, r0
	ldr r0, [fp, #8]
	add r8, sp, #4
	str r0, [sp]
	add r0, sp, #4
	mov r6, #3
	mov r7, #1
	bl FUN_0200dbf0
	ldr r0, [sp]
	str r0, [sp, #0xc]
	ldr r0, [fp, #0xc]
	tst r0, #0x20
	movne r0, r7
	moveq r0, #0
	cmp r0, #0
	ldrhne r5, [fp, #0x24]
	movne r4, #0x10000
	bne _0200EB64
	mov sb, #0
	ldr r4, [fp, #0x20]
	mov sl, sb
	mov r5, #0x10000
	arm_func_end FUN_0200ea88
_0200EAE8:
	mov r0, r8
	mov r1, sb
	bl FUN_0200e680
	add r2, sp, #0x4c
	str r2, [sp, #0x34]
	cmp sb, #0
	mov r0, r8
	mov r1, r6
	mov r2, r7
	ldreq sl, [sp, #0x30]
	str r7, [sp, #0x38]
	bl FUN_0200ef18
	cmp r0, #0
	bne _0200EB50
_0200EB20:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	ldreq r0, [sp, #0x50]
	cmpeq r0, r4
	ldrheq r5, [sp, #0x28]
	beq _0200EB50
	mov r0, r8
	mov r1, r6
	mov r2, r7
	bl FUN_0200ef18
	cmp r0, #0
	beq _0200EB20
_0200EB50:
	cmp r5, #0x10000
	bne _0200EB64
	add sb, sb, #1
	cmp sb, sl
	blo _0200EAE8
_0200EB64:
	cmp r5, #0x10000
	mov r0, #0
	strheq r0, [fp, #0x38]
	mov r6, #3
	mov r7, #1
	addeq sp, sp, #0xe0
	moveq r0, #0xb
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp]
	mov sb, r5
	bl FUN_0200d7d0
	bl GetStrLen
	add sl, r0, #2
	add r0, sp, #4
	mov r1, r5
	bl FUN_0200e680
	cmp r4, #0x10000
	ldrne r0, [sp, #0x5c]
	add r8, sp, #4
	addne sl, sl, r0
	cmp r5, #0
	beq _0200EC34
_0200EBBC:
	ldr r1, [sp, #0x30]
	mov r0, r8
	bl FUN_0200e680
	add r0, sp, #0x4c
	str r0, [sp, #0x34]
	mov r0, r8
	mov r1, r6
	mov r2, r7
	str r7, [sp, #0x38]
	bl FUN_0200ef18
	cmp r0, #0
	bne _0200EC28
_0200EBEC:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	beq _0200EC10
	ldrh r0, [sp, #0x50]
	cmp r0, sb
	ldreq r0, [sp, #0x5c]
	addeq r0, r0, #1
	addeq sl, sl, r0
	beq _0200EC28
_0200EC10:
	mov r0, r8
	mov r1, r6
	mov r2, r7
	bl FUN_0200ef18
	cmp r0, #0
	beq _0200EBEC
_0200EC28:
	ldrh sb, [sp, #0x28]
	cmp sb, #0
	bne _0200EBBC
_0200EC34:
	ldr r7, [fp, #0x30]
	add r0, sl, #1
	strh r0, [fp, #0x38]
	strh r5, [fp, #0x3a]
	cmp r7, #0
	add sb, sp, #4
	mov r8, #1
	beq _0200EDF4
	ldrh r6, [fp, #0x38]
	ldr r0, [fp, #0x34]
	cmp r0, r6
	blo _0200EDF4
	ldr r0, [sp]
	bl FUN_0200d7d0
	mov fp, r0
	bl GetStrLen
	mov sl, r0
	mov r0, fp
	mov r1, r7
	mov r2, sl
	bl _memcpy
	mov r0, #0
	add r0, sl, r0
	add r1, r7, r0
	ldr r0, _0200EE00 ; =0x0208EE80
	mov r2, #2
	bl _memcpy
	mov r0, sb
	mov r1, r5
	bl FUN_0200e680
	cmp r4, #0x10000
	beq _0200ED30
	add r3, sp, #0x4c
	mov r1, #3
	str r3, [sp, #0x34]
	mov r3, #0
	mov r0, sb
	mov r2, r8
	str r3, [sp, #0x38]
	mov sl, r1
	bl FUN_0200ef18
	cmp r0, #0
	bne _0200ED0C
_0200ECE0:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	ldreq r0, [sp, #0x50]
	cmpeq r0, r4
	beq _0200ED0C
	mov r0, sb
	mov r1, sl
	mov r2, r8
	bl FUN_0200ef18
	cmp r0, #0
	beq _0200ECE0
_0200ED0C:
	ldr r0, [sp, #0x5c]
	add r1, r7, r6
	add r4, r0, #1
	add r0, sp, #0x60
	mov r2, r4
	sub r1, r1, r4
	bl _memcpy
	sub r6, r6, r4
	b _0200ED40
_0200ED30:
	add r1, r7, r6
	mov r0, #0
	strb r0, [r1, #-1]
	sub r6, r6, #1
_0200ED40:
	cmp r5, #0
	add sl, sp, #4
	mov fp, #0
	mov r8, #3
	mov r4, #1
	beq _0200EDF4
	add sb, sp, #0x4c
_0200ED5C:
	ldr r1, [sp, #0x30]
	mov r0, sl
	bl FUN_0200e680
	add r1, r7, r6
	str sb, [sp, #0x34]
	str fp, [sp, #0x38]
	mov r0, #0x2f
	strb r0, [r1, #-1]
	mov r0, sl
	mov r1, r8
	mov r2, r4
	sub r6, r6, #1
	bl FUN_0200ef18
	cmp r0, #0
	bne _0200EDE8
_0200ED98:
	ldr r0, [sp, #0x58]
	cmp r0, #0
	beq _0200EDD0
	ldrh r0, [sp, #0x50]
	cmp r0, r5
	bne _0200EDD0
	ldr r5, [sp, #0x5c]
	add r1, r7, r6
	add r0, sp, #0x60
	sub r1, r1, r5
	mov r2, r5
	bl _memcpy
	sub r6, r6, r5
	b _0200EDE8
_0200EDD0:
	mov r0, sl
	mov r1, r8
	mov r2, r4
	bl FUN_0200ef18
	cmp r0, #0
	beq _0200ED98
_0200EDE8:
	ldrh r5, [sp, #0x28]
	cmp r5, #0
	bne _0200ED5C
_0200EDF4:
	mov r0, #0
	add sp, sp, #0xe0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0200EE00: .word 0x0208EE80

	arm_func_start FUN_0200ee04
FUN_0200ee04: ; 0x0200EE04
	push {r3, r4, r5, lr}
	sub sp, sp, #0x10
	mov r5, r0
	ldr r3, [r5, #8]
	ldr r4, [r5, #0x34]
	ldr r1, [r3, #0x20]
	lsl r2, r4, #3
	ldr r0, [r1, #8]
	cmp r0, r4, lsl #3
	addls sp, sp, #0x10
	movls r0, #0xb
	popls {r3, r4, r5, pc}
	str r3, [sp]
	ldr r1, [r1, #4]
	add r0, sp, #0
	add r3, r1, r2
	add r1, sp, #8
	mov r2, #8
	str r3, [sp, #4]
	bl FUN_0200e620
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r3, r4, r5, pc}
	ldr r1, [sp, #8]
	mov r0, r5
	str r1, [r5, #0x30]
	ldr r3, [sp, #0xc]
	mov r1, #7
	mov r2, #1
	str r3, [r5, #0x34]
	str r4, [r5, #0x38]
	bl FUN_0200ef18
	add sp, sp, #0x10
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200ee04

	arm_func_start FUN_0200ee8c
FUN_0200ee8c: ; 0x0200EE8C
	ldr r3, [r0, #0x30]
	ldr r2, [r0, #0x34]
	ldr r1, [r0, #0x38]
	str r3, [r0, #0x24]
	str r3, [r0, #0x2c]
	str r2, [r0, #0x28]
	str r1, [r0, #0x20]
	mov r0, #0
	bx lr
	arm_func_end FUN_0200ee8c

	arm_func_start FUN_0200eeb0
FUN_0200eeb0: ; 0x0200EEB0
	push {r3, lr}
	ldr lr, [r0, #8]
	ldr r2, [r0, #0x2c]
	ldr r3, [r0, #0x38]
	ldr ip, [lr, #0x20]
	add r1, r2, r3
	str r1, [r0, #0x2c]
	ldr r1, [r0, #0x30]
	ldr ip, [ip, #0x20]
	mov r0, lr
	blx ip
	pop {r3, pc}
	arm_func_end FUN_0200eeb0

	arm_func_start FUN_0200eee0
FUN_0200eee0: ; 0x0200EEE0
	push {r3, lr}
	ldr lr, [r0, #8]
	ldr r2, [r0, #0x2c]
	ldr r3, [r0, #0x38]
	ldr ip, [lr, #0x20]
	add r1, r2, r3
	str r1, [r0, #0x2c]
	ldr r1, [r0, #0x30]
	ldr ip, [ip, #0x24]
	mov r0, lr
	blx ip
	pop {r3, pc}
	arm_func_end FUN_0200eee0

	arm_func_start FUN_0200ef10
FUN_0200ef10: ; 0x0200EF10
	mov r0, #0
	bx lr
	arm_func_end FUN_0200ef10

	arm_func_start FUN_0200ef18
FUN_0200ef18: ; 0x0200EF18
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	ldr r3, [sb, #8]
	ldr r5, _0200EFE0 ; =0x00000101
	ldr r6, [r3, #0x20]
	mov r8, r1
	ldr r3, [r6, #0x30]
	mov r4, #1
	mov r7, r2
	mov r2, r5
	tst r3, r4, lsl r8
	beq _0200EF94
	ldr r2, [r6, #0x2c]
	blx r2
	mov r2, r0
	cmp r2, #0x100
	bgt _0200EF78
	bge _0200EF94
	cmp r2, #4
	bgt _0200EF94
	cmp r2, #0
	blt _0200EF94
	cmpne r2, #1
	b _0200EF94
	arm_func_end FUN_0200ef18
_0200EF78:
	add r0, r5, #1
	cmp r2, r0
	mvneq r0, r4, lsl r8
	ldreq r1, [r6, #0x30]
	moveq r2, r5
	andeq r0, r1, r0
	streq r0, [r6, #0x30]
_0200EF94:
	ldr r0, _0200EFE0 ; =0x00000101
	cmp r2, r0
	bne _0200EFC0
	cmp r8, #0xd
	movhs r2, #4
	bhs _0200EFC0
	ldr r1, _0200EFE4 ; =0x0208BDB4
	mov r0, sb
	ldr r1, [r1, r8, lsl #2]
	blx r1
	mov r2, r0
_0200EFC0:
	cmp r7, #0
	beq _0200EFD8
	mov r0, sb
	mov r1, r2
	bl FUN_0200c994
	mov r2, r0
_0200EFD8:
	mov r0, r2
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0200EFE0: .word 0x00000101
_0200EFE4: .word 0x0208BDB4

	arm_func_start FUN_0200efe8
FUN_0200efe8: ; 0x0200EFE8
	push {r3, lr}
	ldr r0, [r1, #4]
	ldr lr, [r3]
	ldr ip, [r0, #8]
	ldr r0, [r0, #0xc]
	sub r0, ip, r0
	cmp lr, r0
	strhi r0, [r3]
	str lr, [r1, #0x34]
	str r2, [r1, #0x30]
	ldr r2, [r3]
	mov r0, r1
	str r2, [r1, #0x38]
	mov r1, #0
	mov r2, r1
	bl FUN_0200ef18
	pop {r3, pc}
	arm_func_end FUN_0200efe8

	arm_func_start FUN_0200f02c
FUN_0200f02c: ; 0x0200F02C
	push {r3, lr}
	ldr r0, [r1, #4]
	ldr lr, [r3]
	ldr ip, [r0, #8]
	ldr r0, [r0, #0xc]
	sub r0, ip, r0
	cmp lr, r0
	strhi r0, [r3]
	str lr, [r1, #0x34]
	str r2, [r1, #0x30]
	ldr r2, [r3]
	mov r0, r1
	str r2, [r1, #0x38]
	mov r1, #1
	mov r2, #0
	bl FUN_0200ef18
	pop {r3, pc}
	arm_func_end FUN_0200f02c

	arm_func_start FUN_0200f070
FUN_0200f070: ; 0x0200F070
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	lsr ip, r2, #0x10
	strh r2, [r4, #0x34]
	mov r0, r4
	mov r1, #2
	mov r2, #1
	str r5, [r4, #8]
	str r5, [r4, #0x30]
	strh ip, [r4, #0x36]
	str r3, [r4, #0x38]
	bl FUN_0200ef18
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r2, [r4, #0xc]
	add r1, r4, #0x20
	orr r2, r2, #0x20
	bic r2, r2, #0x10
	str r2, [r4, #0xc]
	stmib r4, {r1, r5}
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f070

	arm_func_start FUN_0200f0c8
FUN_0200f0c8: ; 0x0200F0C8
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xa4
	add r3, sp, #0x10
	mov r4, #0
	mov r7, r0
	mov r6, r2
	mov r0, r1
	str r3, [r1, #0x30]
	str r4, [r1, #0x34]
	mov r1, #3
	mov r2, #1
	bl FUN_0200ef18
	movs r5, r0
	bne _0200F1E4
	str r4, [r6, #0x10]
	ldr r2, [sp, #0x20]
	add r0, sp, #0x24
	str r2, [r6, #0x118]
	add r1, r6, #0x14
	bl _memcpy
	ldr r0, [r6, #0x118]
	add r0, r6, r0
	strb r4, [r0, #0x14]
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	beq _0200F150
	mov r0, #0x100
	str r0, [r6, #0x11c]
	ldrh r1, [sp, #0x14]
	ldrh r0, [sp, #0x16]
	orr r0, r1, r0, lsl #16
	str r0, [r6, #0x16c]
	str r4, [r6, #0x168]
	b _0200F1C8
	arm_func_end FUN_0200f0c8
_0200F150:
	str r4, [r6, #0x11c]
	ldr r3, [sp, #0x14]
	str r3, [r6, #0x16c]
	str r4, [r6, #0x168]
	ldr r1, [r7, #0x20]
	lsl r2, r3, #3
	ldr r0, [r1, #8]
	cmp r0, r3, lsl #3
	bls _0200F1C8
	str r7, [sp]
	ldr r1, [r1, #4]
	add r0, sp, #0
	add r3, r1, r2
	add r1, sp, #8
	mov r2, #8
	str r3, [sp, #4]
	bl FUN_0200e620
	cmp r0, #0
	bne _0200F1C8
	ldr r2, [sp, #0xc]
	ldr r1, [sp, #8]
	mov r0, r7
	sub r1, r2, r1
	str r1, [r6, #0x168]
	ldr r1, [sp, #8]
	bl FUN_0200fae0
	cmp r0, #0
	ldrne r0, [r6, #0x11c]
	orrne r0, r0, #0x400
	strne r0, [r6, #0x11c]
_0200F1C8:
	mov r0, #0
	str r0, [r6, #0x138]
	str r0, [r6, #0x13c]
	str r0, [r6, #0x140]
	str r0, [r6, #0x144]
	str r0, [r6, #0x148]
	str r0, [r6, #0x14c]
_0200F1E4:
	mov r0, r5
	add sp, sp, #0xa4
	pop {r4, r5, r6, r7, pc}

	arm_func_start FUN_0200f1f0
FUN_0200f1f0: ; 0x0200F1F0
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x54
	add r4, sp, #0xc
	mov r8, r0
	mov r0, r4
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_0200dbf0
	mov lr, #0
	ldr ip, [sp, #0x70]
	add r3, sp, #0
	mov r0, r4
	mov r1, #4
	mov r2, #1
	strh r7, [sp, #0x40]
	str r6, [sp, #0x48]
	str ip, [sp, #0x4c]
	str r8, [sp, #0x14]
	str r8, [sp, #0x3c]
	strh lr, [sp, #0x42]
	str lr, [sp, #0x44]
	str r3, [sp, #0x50]
	bl FUN_0200ef18
	cmp r0, #0
	addne sp, sp, #0x54
	popne {r3, r4, r5, r6, r7, r8, pc}
	ldr r1, [sp, #0x70]
	cmp r1, #0
	ldrhne r1, [sp, #4]
	strne r1, [r5]
	ldreq r1, [sp, #4]
	streq r1, [r5]
	add sp, sp, #0x54
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0200f1f0

	arm_func_start FUN_0200f27c
FUN_0200f27c: ; 0x0200F27C
	push {r3, r4, r5, lr}
	mov r5, r1
	mov r0, #0
	ldr r4, [sp, #0x10]
	strh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	str r3, [r5, #0x30]
	ldr r3, [r4]
	mov r0, r5
	mov r1, #5
	mov r2, #1
	str r3, [r5, #0x34]
	bl FUN_0200ef18
	cmp r0, #0
	ldreq r1, [r5, #0x34]
	streq r1, [r4]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f27c

	arm_func_start FUN_0200f2c0
FUN_0200f2c0: ; 0x0200F2C0
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	str r2, [r4, #0x34]
	mov r0, r4
	mov r1, #6
	mov r2, #1
	str r5, [r4, #0x30]
	bl FUN_0200ef18
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r2, [r4, #0xc]
	add r1, r4, #0x20
	orr r2, r2, #0x10
	bic r2, r2, #0x20
	str r2, [r4, #0xc]
	stmib r4, {r1, r5}
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f2c0

	arm_func_start FUN_0200f308
FUN_0200f308: ; 0x0200F308
	push {r3, r4, r5, lr}
	mov r4, r1
	str r2, [r4, #0x30]
	ldr r1, [sp, #0x10]
	str r3, [r4, #0x34]
	ldr r3, [r1]
	mov r5, r0
	mov r0, r4
	mov r1, #7
	mov r2, #1
	str r3, [r4, #0x38]
	bl FUN_0200ef18
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r2, [r4, #0xc]
	add r1, r4, #0x20
	orr r2, r2, #0x10
	bic r2, r2, #0x20
	str r2, [r4, #0xc]
	stmib r4, {r1, r5}
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f308

	arm_func_start FUN_0200f35c
FUN_0200f35c: ; 0x0200F35C
	push {r4, lr}
	mov r4, r1
	mov r0, r4
	mov r1, #8
	mov r2, #1
	bl FUN_0200ef18
	ldr r1, [r4, #0xc]
	mov r2, #0
	bic r1, r1, #0x30
	str r2, [r4, #4]
	str r1, [r4, #0xc]
	pop {r4, pc}
	arm_func_end FUN_0200f35c

	arm_func_start FUN_0200f38c
FUN_0200f38c: ; 0x0200F38C
	push {r3, r4, r5, lr}
	sub sp, sp, #0x48
	add r4, sp, #0
	mov r5, r0
	mov r0, r4
	bl FUN_0200dbf0
	mov r0, r4
	mov r1, #9
	mov r2, #0
	str r5, [sp, #8]
	bl FUN_0200ef18
	add sp, sp, #0x48
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f38c

	arm_func_start FUN_0200f3c0
FUN_0200f3c0: ; 0x0200F3C0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x48
	add r4, sp, #0
	mov r5, r0
	mov r0, r4
	bl FUN_0200dbf0
	mov r0, r4
	mov r1, #0xa
	mov r2, #0
	str r5, [sp, #8]
	bl FUN_0200ef18
	add sp, sp, #0x48
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f3c0

	arm_func_start FUN_0200f3f4
FUN_0200f3f4: ; 0x0200F3F4
	push {r3, r4, r5, lr}
	sub sp, sp, #0x48
	add r4, sp, #0
	mov r5, r0
	mov r0, r4
	bl FUN_0200dbf0
	mov r0, r4
	mov r1, #0xb
	mov r2, #0
	str r5, [sp, #8]
	bl FUN_0200ef18
	add sp, sp, #0x48
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f3f4

	arm_func_start FUN_0200f428
FUN_0200f428: ; 0x0200F428
	push {r3, r4, r5, lr}
	sub sp, sp, #0x48
	add r4, sp, #0
	mov r5, r0
	mov r0, r4
	bl FUN_0200dbf0
	mov r0, r4
	mov r1, #0xc
	mov r2, #0
	str r5, [sp, #8]
	bl FUN_0200ef18
	add sp, sp, #0x48
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f428

	arm_func_start FUN_0200f45c
FUN_0200f45c: ; 0x0200F45C
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r4, r1
	mov r1, r2
	mov r2, r3
	mov ip, #0
	add r3, sp, #4
	mov r5, r0
	str ip, [sp]
	bl FUN_0200f1f0
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, pc}
	ldr r2, [sp, #4]
	ldr r3, [sp, #0x18]
	mov r0, r5
	mov r1, r4
	bl FUN_0200f2c0
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f45c

	arm_func_start FUN_0200f4ac
FUN_0200f4ac: ; 0x0200F4AC
	cmp r3, #0
	ldr r1, [r1, #4]
	ldr ip, [r2]
	beq _0200F4D0
	cmp r3, #1
	beq _0200F4D8
	cmp r3, #2
	beq _0200F4E0
	b _0200F4D8
	arm_func_end FUN_0200f4ac
_0200F4D0:
	ldr r0, [r1, #4]
	b _0200F4E4
_0200F4D8:
	ldr r0, [r1, #0xc]
	b _0200F4E4
_0200F4E0:
	ldr r0, [r1, #8]
_0200F4E4:
	add ip, ip, r0
	ldr r0, [r1, #4]
	cmp ip, r0
	blt _0200F500
	ldr r0, [r1, #8]
	cmp ip, r0
	ble _0200F508
_0200F500:
	mov r0, #6
	bx lr
_0200F508:
	str ip, [r1, #0xc]
	str ip, [r2]
	mov r0, #0
	bx lr

	arm_func_start FUN_0200f518
FUN_0200f518: ; 0x0200F518
	ldr r1, [r1, #4]
	mov r0, #0
	ldr r3, [r1, #8]
	ldr r1, [r1, #4]
	sub r1, r3, r1
	str r1, [r2]
	bx lr
	arm_func_end FUN_0200f518

	arm_func_start FUN_0200f534
FUN_0200f534: ; 0x0200F534
	ldr r1, [r1, #4]
	mov r0, #0
	ldr r3, [r1, #0xc]
	ldr r1, [r1, #4]
	sub r1, r3, r1
	str r1, [r2]
	bx lr
	arm_func_end FUN_0200f534

	arm_func_start FUN_0200f550
FUN_0200f550: ; 0x0200F550
	push {r4, lr}
	ldr r4, [r0, #0x20]
	bl FUN_0200fac4
	mov r0, #0
	str r0, [r4]
	str r0, [r4, #4]
	str r0, [r4, #8]
	str r0, [r4, #0xc]
	str r0, [r4, #0x10]
	str r0, [r4, #0x14]
	str r0, [r4, #0x18]
	pop {r4, pc}
	arm_func_end FUN_0200f550
_0200F580:
	.byte 0x00, 0x00, 0xA0, 0xE3, 0x00, 0x00, 0x81, 0xE5, 0x1E, 0xFF, 0x2F, 0xE1

	arm_func_start FUN_0200f58c
FUN_0200f58c: ; 0x0200F58C
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r4, #0
	mov r5, r1
	mov r1, r2
	mov r2, r3
	add r3, sp, #4
	str r4, [sp, #4]
	mov ip, #1
	mov r6, r0
	str ip, [sp]
	bl FUN_0200f1f0
	cmp r0, #0
	addne sp, sp, #8
	popne {r4, r5, r6, pc}
	ldr r2, [sp, #4]
	mov r0, r6
	mov r1, r5
	mov r3, r4
	bl FUN_0200f070
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0200f58c

	arm_func_start FUN_0200f5e4
FUN_0200f5e4: ; 0x0200F5E4
	ldr r2, [r1, #0xc]
	mov r0, #0
	bic r2, r2, #0x30
	str r0, [r1, #4]
	str r2, [r1, #0xc]
	bx lr
	arm_func_end FUN_0200f5e4

	arm_func_start FUN_0200f5fc
FUN_0200f5fc: ; 0x0200F5FC
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x18
	mov r4, #0
	mov r8, r1
	mov r7, r2
	mov r6, r3
	mov sb, r0
	mov r0, r6
	mov r1, r4
	mov r2, #0x54
	str r4, [sp, #0x14]
	mov r5, #5
	bl MemWrite
	mov r0, #1
	add sl, sp, #0x14
	str r0, [sp]
	mov r0, sb
	mov r1, r8
	mov r2, r7
	mov r3, sl
	bl FUN_0200f1f0
	cmp r0, #0
	bne _0200F670
	mov r0, #0x100
	str r0, [r6]
	ldr r0, [sp, #0x14]
	mov r5, r4
	str r0, [r6, #0x50]
	b _0200F710
	arm_func_end FUN_0200f5fc
_0200F670:
	mov r0, sb
	mov r1, r8
	mov r2, r7
	mov r3, sl
	str r4, [sp]
	bl FUN_0200f1f0
	cmp r0, #0
	bne _0200F710
	str r4, [r6]
	ldr r0, [sp, #0x14]
	str r0, [r6, #0x50]
	str r4, [r6, #0x4c]
	ldr r3, [sb, #0x20]
	ldr r1, [sp, #0x14]
	ldr r0, [r3, #8]
	lsl r2, r1, #3
	cmp r0, r1, lsl #3
	bls _0200F70C
	str sb, [sp, #4]
	ldr r1, [r3, #4]
	add r0, sp, #4
	add r3, r1, r2
	add r1, sp, #0xc
	mov r2, #8
	str r3, [sp, #8]
	bl FUN_0200e620
	cmp r0, #0
	bne _0200F70C
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0xc]
	mov r0, sb
	sub r1, r2, r1
	str r1, [r6, #0x4c]
	ldr r1, [sp, #0xc]
	bl FUN_0200fae0
	cmp r0, #0
	ldrne r0, [r6]
	orrne r0, r0, #0x400
	strne r0, [r6]
_0200F70C:
	mov r5, #0
_0200F710:
	ldr r1, [r6]
	mov r0, r5
	orr r1, r1, #0x200
	str r1, [r6]
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0200f728
FUN_0200f728: ; 0x0200F728
	push {r4, lr}
	mov r4, r1
	bl FUN_0200ff74
	mov lr, #0
	str lr, [r4, #0x20]
	str lr, [r4, #0x24]
	str lr, [r4, #0x28]
	str lr, [r4, #0x2c]
	ldr ip, [r0, #0x80]
	mov r2, lr
	str ip, [r4]
	stmib r4, {r2, lr}
	sub r1, lr, #0x80000001
	mov r0, lr
	str lr, [r4, #0xc]
	str r1, [r4, #0x10]
	str lr, [r4, #0x14]
	str r1, [r4, #0x18]
	str lr, [r4, #0x1c]
	pop {r4, pc}
	arm_func_end FUN_0200f728

	arm_func_start FUN_0200f778
FUN_0200f778: ; 0x0200F778
	push {r3, r4, r5, lr}
	mov r5, r1
	mov r4, r3
	mov r1, r2
	bl FUN_0200fab4
	mov r1, r5
	mov r2, r4
	bl _memcpy
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f778

	arm_func_start FUN_0200f7a0
FUN_0200f7a0: ; 0x0200F7A0
	push {r3, r4, r5, lr}
	mov r5, r1
	mov r4, r3
	mov r1, r2
	bl FUN_0200fab4
	mov r1, r0
	mov r0, r5
	mov r2, r4
	bl _memcpy
	mov r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0200f7a0

	arm_func_start FUN_0200f7cc
FUN_0200f7cc: ; 0x0200F7CC
	push {r4, lr}
	ldr ip, [sp, #8]
	ldr r4, [sp, #0x10]
	str ip, [r0, #0x34]
	str ip, [r0, #0x40]
	ldr lr, [sp, #0xc]
	cmp r4, #0
	ldreq r4, _0200F82C ; =FUN_0200f778
	ldr ip, [sp, #0x14]
	str r1, [r0, #0x28]
	cmp ip, #0
	ldreq ip, _0200F830 ; =FUN_0200f7a0
	str r3, [r0, #0x30]
	mov r3, #0
	str r2, [r0, #0x2c]
	str r2, [r0, #0x3c]
	ldr r2, _0200F834 ; =0x0208BDE8
	add r1, r0, #0x28
	str lr, [r0, #0x38]
	str r4, [r0, #0x48]
	str ip, [r0, #0x4c]
	str r3, [r0, #0x44]
	bl FUN_0200d7e0
	pop {r4, pc}
	.align 2, 0_0200F82C: .word FUN_0200f778
_0200F830: .word FUN_0200f7a0
_0200F834: .word 0x0208BDE8
	arm_func_end FUN_0200f7cc

	arm_func_start thunk_FUN_0200d828
thunk_FUN_0200d828: ; 0x0200F838
	ldr ip, _0200F840 ; =FUN_0200d828
	bx ip
	.align 2, 0_0200F840: .word FUN_0200d828
	arm_func_end thunk_FUN_0200d828

	arm_func_start FUN_0200f844
FUN_0200f844: ; 0x0200F844
	push {r4, lr}
	mov lr, r0
	ldr r0, [lr, #8]
	ldr r3, _0200F880 ; =0x0208BDE8
	ldr ip, [r0, #0x24]
	mov r2, r1
	cmp ip, r3
	mov r4, #0
	bne _0200F878
	mov r1, lr
	bl FUN_0200f518
	cmp r0, #0
	moveq r4, #1
	arm_func_end FUN_0200f844
_0200F878:
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0200F880: .word 0x0208BDE8

	arm_func_start FUN_0200f884
FUN_0200f884: ; 0x0200F884
	push {r4, lr}
	mov lr, r0
	ldr r0, [lr, #8]
	ldr r3, _0200F8C0 ; =0x0208BDE8
	ldr ip, [r0, #0x24]
	mov r2, r1
	cmp ip, r3
	mov r4, #0
	bne _0200F8B8
	mov r1, lr
	bl FUN_0200f534
	cmp r0, #0
	moveq r4, #1
	arm_func_end FUN_0200f884
_0200F8B8:
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0200F8C0: .word 0x0208BDE8

	arm_func_start FUN_0200f8c4
FUN_0200f8c4: ; 0x0200F8C4
	cmp r2, #0
	moveq r1, #0
	beq _0200F8D8
	cmp r1, #0
	moveq r2, #0
	arm_func_end FUN_0200f8c4
_0200F8D8:
	str r1, [r0, #0x54]
	str r2, [r0, #0x58]
	bx lr

	arm_func_start FUN_0200f8e4
FUN_0200f8e4: ; 0x0200F8E4
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x4c
	movs r8, r1
	mov sb, r0
	mov r4, r2
	beq _0200F910
	bl FUN_0200fac4
	cmp r0, #0
	beq _0200F910
	mov r0, sb
	bl FUN_0200fa24
	arm_func_end FUN_0200f8e4
_0200F910:
	ldr r5, [sb, #0x20]
	ldr r1, [r5, #8]
	ldr r0, [r5, #0x10]
	add r0, r1, r0
	add r0, r0, #0x3f
	bic r6, r0, #0x1f
	cmp r6, r4
	bhi _0200FA18
	add r4, sp, #4
	add r1, r8, #0x1f
	mov r0, r4
	bic r7, r1, #0x1f
	bl FUN_0200dbf0
	ldr r2, [r5, #4]
	mvn r0, #0
	str r0, [sp]
	ldr r3, [r5, #8]
	mov r0, r4
	mov r1, sb
	add r3, r2, r3
	bl FUN_0200dcf0
	cmp r0, #0
	beq _0200F99C
	ldr r2, [r5, #8]
	mov r0, r4
	mov r1, r7
	bl FUN_0200defc
	cmp r0, #0
	bge _0200F994
	ldr r2, [r5, #8]
	mov r0, r7
	mov r1, #0
	bl MemWrite
_0200F994:
	add r0, sp, #4
	bl FUN_0200de0c
_0200F99C:
	str r7, [r5, #4]
	ldr ip, [r5, #8]
	ldr r2, [r5, #0xc]
	mvn r0, #0
	str r0, [sp]
	ldr r3, [r5, #0x10]
	add r4, sp, #4
	mov r1, sb
	mov r0, r4
	add r3, r2, r3
	add r7, r7, ip
	bl FUN_0200dcf0
	cmp r0, #0
	beq _0200FA04
	ldr r2, [r5, #0x10]
	mov r0, r4
	mov r1, r7
	bl FUN_0200defc
	cmp r0, #0
	bge _0200F9FC
	ldr r2, [r5, #0x10]
	mov r0, r7
	mov r1, #0
	bl MemWrite
_0200F9FC:
	add r0, sp, #4
	bl FUN_0200de0c
_0200FA04:
	str r7, [r5, #0xc]
	str r8, [r5, #0x1c]
	ldr r0, [sb, #0x14]
	orr r0, r0, #4
	str r0, [sb, #0x14]
_0200FA18:
	mov r0, r6
	add sp, sp, #0x4c
	pop {r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0200fa24
FUN_0200fa24: ; 0x0200FA24
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r0, [r7, #0x14]
	mov r4, #0
	tst r0, #2
	movne r0, #1
	moveq r0, r4
	cmp r0, #0
	beq _0200FAA0
	mov r0, r7
	ldr r5, [r7, #0x20]
	bl FUN_0200d8e8
	mov r6, r0
	mov r0, r7
	bl FUN_0200fac4
	cmp r0, #0
	beq _0200FA90
	ldr r1, [r7, #0x14]
	mov r0, #0
	bic r1, r1, #4
	str r1, [r7, #0x14]
	ldr r4, [r5, #0x1c]
	ldr r1, [r5, #0x14]
	str r1, [r5, #4]
	ldr r1, [r5, #0x18]
	str r1, [r5, #0xc]
	str r0, [r5, #0x1c]
	arm_func_end FUN_0200fa24
_0200FA90:
	cmp r6, #0
	beq _0200FAA0
	mov r0, r7
	bl FUN_0200d978
_0200FAA0:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0200faa8
FUN_0200faa8: ; 0x0200FAA8
	ldr r0, [r0, #0x20]
	ldr r0, [r0]
	bx lr
	arm_func_end FUN_0200faa8

	arm_func_start FUN_0200fab4
FUN_0200fab4: ; 0x0200FAB4
	ldr r0, [r0, #0x20]
	ldr r0, [r0]
	add r0, r0, r1
	bx lr
	arm_func_end FUN_0200fab4

	arm_func_start FUN_0200fac4
FUN_0200fac4: ; 0x0200FAC4
	ldr r0, [r0, #0x14]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0200fac4

	arm_func_start FUN_0200fad8
FUN_0200fad8: ; 0x0200FAD8
	ldr r0, [r0, #0x24]
	bx lr
	arm_func_end FUN_0200fad8

	arm_func_start FUN_0200fae0
FUN_0200fae0: ; 0x0200FAE0
	mov r0, #0
	bx lr
	arm_func_end FUN_0200fae0

	arm_func_start FUN_0200fae8
FUN_0200fae8: ; 0x0200FAE8
	push {r4, lr}
	mov r4, r0
	bl FUN_020114f8
	cmp r0, #0
	mov r1, #5
	moveq r1, #0
	mov r0, r4
	bl FUN_0200d9d4
	pop {r4, pc}
	arm_func_end FUN_0200fae8

	arm_func_start FUN_0200fb0c
FUN_0200fb0c: ; 0x0200FB0C
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr ip, _0200FB4C ; =FUN_0200fae8
	mov lr, r1
	str ip, [sp]
	str r0, [sp, #4]
	mov r1, #1
	ldr r0, _0200FB50 ; =LAB_02095b54
	str r1, [sp, #8]
	mov r1, r2
	ldr r0, [r0]
	mov r2, lr
	bl FUN_0201121c
	mov r0, #0x100
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0_0200FB4C: .word FUN_0200fae8
_0200FB50: .word LAB_02095b54
	arm_func_end FUN_0200fb0c

	arm_func_start FUN_0200fb54
FUN_0200fb54: ; 0x0200FB54
	push {r3, lr}
	cmp r1, #1
	beq _0200FBAC
	cmp r1, #9
	beq _0200FB74
	cmp r1, #0xa
	beq _0200FB90
	b _0200FBB4
	arm_func_end FUN_0200fb54
_0200FB74:
	ldr r0, _0200FBBC ; =LAB_02095b54
	ldr r0, [r0, #4]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_0200ff8c
	mov r0, #0
	pop {r3, pc}
_0200FB90:
	ldr r0, _0200FBBC ; =LAB_02095b54
	ldr r0, [r0, #4]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_0200fffc
	mov r0, #0
	pop {r3, pc}
_0200FBAC:
	mov r0, #4
	pop {r3, pc}
_0200FBB4:
	ldr r0, _0200FBC0 ; =0x00000102
	pop {r3, pc}
	.align 2, 0_0200FBBC: .word LAB_02095b54
_0200FBC0: .word 0x00000102

	arm_func_start FUN_0200fbc4
FUN_0200fbc4: ; 0x0200FBC4
	mov r0, #4
	cmp r1, #1
	ldrne r0, _0200FBD4 ; =0x00000102
	bx lr
	.align 2, 0_0200FBD4: .word 0x00000102
	arm_func_end FUN_0200fbc4

	arm_func_start FUN_0200fbd8
FUN_0200fbd8: ; 0x0200FBD8
	mov r0, #4
	bx lr
	arm_func_end FUN_0200fbd8

	arm_func_start FUN_0200fbe0
FUN_0200fbe0: ; 0x0200FBE0
	mov r0, #4
	bx lr
	arm_func_end FUN_0200fbe0

	arm_func_start FUN_0200fbe8
FUN_0200fbe8: ; 0x0200FBE8
	mov r0, #0
	bx lr
	arm_func_end FUN_0200fbe8

	arm_func_start FUN_0200fbf0
FUN_0200fbf0: ; 0x0200FBF0
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	mov r4, r0
	bl FUN_0200fe34
	ldr r5, _0200FD1C ; =LAB_02095b54
	str r4, [r5]
	bl FUN_02001440
	ldr r4, _0200FD20 ; =LAB_02095b5c
	str r0, [r5, #4]
	mov r0, r4
	bl FUN_0200d600
	mov r7, #3
	ldr r1, _0200FD24 ; =0x0208EE84
	mov r0, r4
	mov r2, r7
	bl FUN_0200d624
	bl FUN_02003e60
	cmp r0, #1
	bne _0200FCA8
	bl FUN_0200ff80
	mov r6, r0
	bl FUN_0200ff80
	mov r5, r0
	ldr r1, _0200FD28 ; =FUN_0200fb54
	ldr r2, _0200FD2C ; =0x00000682
	mov r0, r4
	bl FUN_0200f8c4
	ldr r1, [r6, #0x40]
	sub r0, r7, #4
	cmp r1, r0
	cmpne r1, #0
	ldrne r2, [r5, #0x48]
	cmpne r2, r0
	cmpne r2, #0
	beq _0200FCB0
	str r1, [sp]
	ldr r1, [r6, #0x44]
	ldr r0, _0200FD30 ; =FUN_0200fb0c
	str r1, [sp, #4]
	str r0, [sp, #8]
	mov r1, #0
	str r1, [sp, #0xc]
	ldr r3, [r5, #0x4c]
	mov r0, r4
	bl FUN_0200f7cc
	b _0200FCB0
	arm_func_end FUN_0200fbf0
_0200FCA8:
	mov r0, r4
	bl FUN_0200fbe8
_0200FCB0:
	ldr r0, _0200FD20 ; =LAB_02095b5c
	ldr r0, [r0, #0x14]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	bne _0200FD0C
	ldr r5, _0200FD20 ; =LAB_02095b5c
	ldr r1, _0200FD34 ; =FUN_0200fbc4
	mov r0, r5
	mvn r2, #0
	bl FUN_0200f8c4
	mov r1, #0
	str r1, [sp]
	ldr r0, _0200FD38 ; =FUN_0200fbd8
	str r1, [sp, #4]
	ldr r4, _0200FD3C ; =FUN_0200fbe0
	str r0, [sp, #8]
	mov r0, r5
	mov r2, r1
	mov r3, r1
	str r4, [sp, #0xc]
	bl FUN_0200f7cc
_0200FD0C:
	ldr r0, _0200FD40 ; =0x0208EE88
	bl FUN_0200d1e4
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0200FD1C: .word LAB_02095b54
_0200FD20: .word LAB_02095b5c
_0200FD24: .word 0x0208EE84
_0200FD28: .word FUN_0200fb54
_0200FD2C: .word 0x00000682
_0200FD30: .word FUN_0200fb0c
_0200FD34: .word FUN_0200fbc4
_0200FD38: .word FUN_0200fbd8
_0200FD3C: .word FUN_0200fbe0
_0200FD40: .word 0x0208EE88

	arm_func_start FUN_0200fd44
FUN_0200fd44: ; 0x0200FD44
	mov r3, r0
	mov r2, r1
	ldr r0, _0200FD5C ; =LAB_02095b5c
	ldr ip, _0200FD60 ; =FUN_0200f8e4
	mov r1, r3
	bx ip
	.align 2, 0_0200FD5C: .word LAB_02095b5c
_0200FD60: .word FUN_0200f8e4
	arm_func_end FUN_0200fd44

	arm_func_start FUN_0200fd64
FUN_0200fd64: ; 0x0200FD64
	push {r3, lr}
	mov lr, r1
	mov r3, r2
	ldr ip, _0200FD8C ; =0x0000FFFF
	ldr r1, _0200FD90 ; =LAB_02095b5c
	mov r2, lr
	add r3, lr, r3
	str ip, [sp]
	bl FUN_0200dcf0
	pop {r3, pc}
	.align 2, 0_0200FD8C: .word 0x0000FFFF
_0200FD90: .word LAB_02095b5c
	arm_func_end FUN_0200fd64

	arm_func_start FUN_0200fd94
FUN_0200fd94: ; 0x0200FD94
	push {r3, lr}
	ldr r1, _0200FDBC ; =LAB_02095bb8
	ldr r2, [r1]
	cmp r2, #0
	popne {r3, pc}
	mov r2, #1
	str r2, [r1]
	bl FUN_0200fbf0
	bl FUN_0200dffc
	pop {r3, pc}
	.align 2, 0_0200FDBC: .word LAB_02095bb8
	arm_func_end FUN_0200fd94

	arm_func_start FUN_0200fdc0
FUN_0200fdc0: ; 0x0200FDC0
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, r0
	ldr r0, [r4, #0x38]
	ldr r1, [r4, #0x34]
	blx r1
	cmp r0, #0
	beq _0200FDF4
	mov r0, r4
	mov r1, #1
	bl FUN_02004268
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0200fdc0
_0200FDF4:
	mov r1, #0xc0
	ldr r3, _0200FE14 ; =FUN_0200fdc0
	add r0, r4, #0xc
	add r2, r1, #0x47
	str r4, [sp]
	bl FUN_02003ad8
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_0200FE14: .word FUN_0200fdc0

	arm_func_start LAB_0200fe18
LAB_0200fe18: ; 0x0200FE18
	push {r3, lr}
	ldrh r0, [r0]
	bl FUN_020013ec
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end LAB_0200fe18

	arm_func_start FUN_0200fe34
FUN_0200fe34: ; 0x0200FE34
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	ldr r5, _0200FF18 ; =LAB_02095c20
	ldr r0, [r5, #4]
	cmp r0, #0
	addne sp, sp, #8
	popne {r4, r5, r6, pc}
	mov r0, #1
	str r0, [r5, #4]
	bl FUN_02003e60
	cmp r0, #1
	bne _0200FE74
	ldr r0, _0200FF1C ; =0x02FFFE00
	mov r2, #0x160
	sub r1, r0, #0x380
	bl _memcpy
	arm_func_end FUN_0200fe34
_0200FE74:
	mov r4, #0
	ldr r0, _0200FF20 ; =LAB_02096260
	sub r3, r4, #1
	mov r6, #0x400
	mov r2, #0x2400
	mov r1, #4
	str r4, [r5, #0x4fc]
	str r4, [r5, #0x500]
	str r4, [r5, #0x504]
	str r3, [r5, #0x508]
	str r4, [r5, #0x50c]
	str r6, [r5, #0xc]
	str r2, [r5, #0x10]
	str r4, [r0]
	str r1, [r5, #8]
	bl FUN_0201019c
	add r3, r5, #0xe8
	str r4, [r5, #0x4ec]
	str r4, [r5, #0x4f0]
	str r4, [r5, #0x4f8]
	str r4, [r5, #0x4f4]
	str r6, [sp]
	ldr ip, [r5, #8]
	ldr r1, _0200FF24 ; =FUN_020102f4
	mov r2, r4
	add r0, r5, #0x28
	add r3, r3, #0x400
	str ip, [sp, #4]
	bl FUN_02001948
	add r0, r5, #0x28
	bl FUN_02001ce0
	bl FUN_020101c4
	bl FUN_020113a4
	bl FUN_02003e60
	cmp r0, #1
	bne _0200FF0C
	mov r0, #1
	bl FUN_0200ff50
_0200FF0C:
	bl FUN_02011434
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_0200FF18: .word LAB_02095c20
_0200FF1C: .word 0x02FFFE00
_0200FF20: .word LAB_02096260
_0200FF24: .word FUN_020102f4

	arm_func_start FUN_0200ff28
FUN_0200ff28: ; 0x0200FF28
	ldr r0, _0200FF34 ; =LAB_02095bbc
	ldr r0, [r0]
	bx lr
	.align 2, 0_0200FF34: .word LAB_02095bbc
	arm_func_end FUN_0200ff28

	arm_func_start FUN_0200ff38
FUN_0200ff38: ; 0x0200FF38
	push {r3, lr}
	bl FUN_0200ff28
	cmp r0, #0
	popne {r3, pc}
	bl FUN_02004160
	pop {r3, pc}
	arm_func_end FUN_0200ff38

	arm_func_start FUN_0200ff50
FUN_0200ff50: ; 0x0200FF50
	ldr r1, _0200FF5C ; =LAB_02095bbc
	str r0, [r1]
	bx lr
	.align 2, 0_0200FF5C: .word LAB_02095bbc
	arm_func_end FUN_0200ff50

	arm_func_start FUN_0200ff60
FUN_0200ff60: ; 0x0200FF60
	ldr r0, _0200FF70 ; =LAB_02095c20
	ldr r0, [r0]
	ldr r0, [r0]
	bx lr
	.align 2, 0_0200FF70: .word LAB_02095c20
	arm_func_end FUN_0200ff60

	arm_func_start FUN_0200ff74
FUN_0200ff74: ; 0x0200FF74
	ldr r0, _0200FF7C ; =0x02FFFA80
	bx lr
	.align 2, 0_0200FF7C: .word 0x02FFFA80
	arm_func_end FUN_0200ff74

	arm_func_start FUN_0200ff80
FUN_0200ff80: ; 0x0200FF80
	ldr r0, _0200FF88 ; =0x02FFFE00
	bx lr
	.align 2, 0_0200FF88: .word 0x02FFFE00
	arm_func_end FUN_0200ff80

	arm_func_start FUN_0200ff8c
FUN_0200ff8c: ; 0x0200FF8C
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	sub sp, sp, #0x40
	ldrh r0, [sp, #0x50]
	mov r5, #1
	mov r1, r5
	bl FUN_02010050
	add r4, sp, #0
	mov r0, r4
	bl FUN_020041ac
	add r0, sp, #0xc
	bl FUN_02003ac4
	ldr r1, _0200FFF8 ; =LAB_0200fe18
	add r0, sp, #0x50
	str r0, [sp, #0x38]
	mov r0, r4
	str r1, [sp, #0x34]
	bl FUN_0200fdc0
	mov r0, r4
	mov r1, r5
	mov r3, r5
	mov r2, #0
	bl FUN_020041c0
	add sp, sp, #0x40
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_0200FFF8: .word LAB_0200fe18
	arm_func_end FUN_0200ff8c

	arm_func_start FUN_0200fffc
FUN_0200fffc: ; 0x0200FFFC
	push {r4, lr}
	mov r4, r0
	bl FUN_020013d0
	mov r0, r4
	mov r1, #1
	bl FUN_020100c8
	pop {r4, pc}
	arm_func_end FUN_0200fffc

	arm_func_start FUN_02010018
FUN_02010018: ; 0x02010018
	ldr ip, _02010024 ; =FUN_02010050
	mov r1, #2
	bx ip
	.align 2, 0_02010024: .word FUN_02010050
	arm_func_end FUN_02010018

	arm_func_start FUN_02010028
FUN_02010028: ; 0x02010028
	push {r4, lr}
	mov r4, r0
	bl thunk_FUN_02010180
	cmp r0, #0
	bne _02010040
	bl thunk_FUN_02010160
	arm_func_end FUN_02010028
_02010040:
	mov r0, r4
	mov r1, #2
	bl FUN_020100c8
	pop {r4, pc}

	arm_func_start FUN_02010050
FUN_02010050: ; 0x02010050
	push {r4, r5, r6, r7, r8, lr}
	ldr r5, _020100C4 ; =LAB_02095c20
	mov r8, r0
	mov r7, r1
	bl FUN_02003da8
	ldr r1, [r5, #0x14]
	mov r6, r0
	cmp r1, r8
	bne _02010088
	ldr r0, [r5, #0x24]
	cmp r0, r7
	beq _020100AC
	bl FUN_02004160
	b _020100AC
	arm_func_end FUN_02010050
_02010088:
	mvn r4, #2
	b _02010098
_02010090:
	add r0, r5, #0x1c
	bl FUN_02001c28
_02010098:
	ldr r0, [r5, #0x14]
	cmp r0, r4
	bne _02010090
	str r8, [r5, #0x14]
	str r7, [r5, #0x24]
_020100AC:
	ldr r1, [r5, #0x18]
	mov r0, r6
	add r1, r1, #1
	str r1, [r5, #0x18]
	bl FUN_02003dbc
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020100C4: .word LAB_02095c20

	arm_func_start FUN_020100c8
FUN_020100c8: ; 0x020100C8
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _02010144 ; =LAB_02095c20
	mov r7, r0
	mov r6, r1
	bl FUN_02003da8
	ldr r1, [r4, #0x14]
	mov r5, r0
	cmp r1, r7
	bne _020100F8
	ldr r0, [r4, #0x18]
	cmp r0, #0
	bne _02010100
	arm_func_end FUN_020100c8
_020100F8:
	bl FUN_02004160
	b _02010138
_02010100:
	ldr r0, [r4, #0x24]
	cmp r0, r6
	beq _02010110
	bl FUN_02004160
_02010110:
	ldr r0, [r4, #0x18]
	subs r0, r0, #1
	str r0, [r4, #0x18]
	bne _02010138
	mvn r2, #2
	mov r1, #0
	add r0, r4, #0x1c
	str r2, [r4, #0x14]
	str r1, [r4, #0x24]
	bl FUN_02001c78
_02010138:
	mov r0, r5
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02010144: .word LAB_02095c20

	arm_func_start FUN_02010148
FUN_02010148: ; 0x02010148
	push {r3, lr}
	bl FUN_02003e60
	cmp r0, #1
	moveq r0, #7
	movne r0, #3
	pop {r3, pc}
	arm_func_end FUN_02010148

	arm_func_start FUN_02010160
FUN_02010160: ; 0x02010160
	mov r1, #0
	ldr r0, _02010178 ; =LAB_02095c20
	ldr ip, _0201017C ; =FUN_02010340
	mov r2, r1
	mov r3, r1
	bx ip
	.align 2, 0_02010178: .word LAB_02095c20
_0201017C: .word FUN_02010340
	arm_func_end FUN_02010160

	arm_func_start FUN_02010180
FUN_02010180: ; 0x02010180
	ldr r0, _02010198 ; =LAB_02095c20
	ldr r0, [r0, #4]
	tst r0, #4
	moveq r0, #1
	movne r0, #0
	bx lr
	.align 2, 0_02010198: .word LAB_02095c20
	arm_func_end FUN_02010180

	arm_func_start FUN_0201019c
FUN_0201019c: ; 0x0201019C
	ldr r2, _020101C0 ; =LAB_02095c20
	mov r0, #0
	mvn r1, #2
	str r1, [r2, #0x14]
	str r0, [r2, #0x18]
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	str r0, [r2, #0x1c]
	bx lr
	.align 2, 0_020101C0: .word LAB_02095c20
	arm_func_end FUN_0201019c

	arm_func_start FUN_020101c4
FUN_020101c4: ; 0x020101C4
	push {r3, r4, r5, lr}
	ldr r5, _02010204 ; =LAB_02095bc0
	ldr r3, _02010208 ; =LAB_02095c20
	mov r4, #0x60
	mov r1, r5
	mov r2, r4
	mov r0, #0
	str r5, [r3]
	bl FUN_0200787c
	mov r0, r5
	mov r1, r4
	bl FUN_020026d0
	ldr r1, _0201020C ; =FUN_020104b8
	mov r0, #0xb
	bl FUN_02015a94
	pop {r3, r4, r5, pc}
	.align 2, 0_02010204: .word LAB_02095bc0
_02010208: .word LAB_02095c20
_0201020C: .word FUN_020104b8
	arm_func_end FUN_020101c4

	arm_func_start FUN_02010210
FUN_02010210: ; 0x02010210
	push {r4, r5, r6, r7, r8, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02003da8
	ldr r1, _02010278 ; =LAB_02096140
	mov r6, r0
	ldr r8, [r1]
	ldr r7, _0201027C ; =LAB_02096140
	cmp r8, #0
	beq _0201026C
	arm_func_end FUN_02010210
_02010238:
	ldr r3, [r8, #8]
	cmp r3, #0
	beq _02010254
	ldr r0, [r8, #4]
	mov r1, r5
	mov r2, r4
	blx r3
_02010254:
	ldr r0, [r7]
	cmp r0, r8
	moveq r7, r0
	ldr r8, [r7]
	cmp r8, #0
	bne _02010238
_0201026C:
	mov r0, r6
	bl FUN_02003dbc
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02010278: .word LAB_02096140
_0201027C: .word LAB_02096140

	arm_func_start FUN_02010280
FUN_02010280: ; 0x02010280
	push {r4, r5, r6, lr}
	movs r5, r1
	mov r6, r0
	ldr r4, _020102F0 ; =LAB_02095c20
	beq _020102BC
	ldr r1, [r4, #8]
	add r0, r4, #0x28
	bl FUN_02001e00
	ldr r1, [r4, #4]
	add r0, r4, #0x28
	orr r1, r1, #8
	str r6, [r4, #0x4e8]
	str r1, [r4, #4]
	bl FUN_02001ce0
	b _020102CC
	arm_func_end FUN_02010280
_020102BC:
	mov r0, r4
	blx r6
	mov r0, r4
	bl FUN_020103b8
_020102CC:
	cmp r5, #0
	movne r0, #1
	popne {r4, r5, r6, pc}
	ldr r0, [r4]
	ldr r0, [r0]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_020102F0: .word LAB_02095c20

	arm_func_start FUN_020102f4
FUN_020102f4: ; 0x020102F4
	push {r3, r4, r5, r6, r7, lr}
	mov r5, #0
	ldr r6, _0201033C ; =LAB_02095c20
	mov r4, r5
	arm_func_end FUN_020102f4
_02010304:
	bl FUN_02003da8
	mov r7, r0
_0201030C:
	ldr r0, [r6, #4]
	tst r0, #8
	bne _02010324
	mov r0, r5
	bl FUN_02001c28
	b _0201030C
_02010324:
	mov r0, r7
	bl FUN_02003dbc
	ldr r0, [r6, #0x4e8]
	mov r1, r4
	bl FUN_02010280
	b _02010304
	.align 2, 0_0201033C: .word LAB_02095c20

	arm_func_start FUN_02010340
FUN_02010340: ; 0x02010340
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_02003da8
	ldr r1, [r8, #4]
	mov r4, r0
	tst r1, #4
	beq _02010380
	add sb, r8, #0xf4
	arm_func_end FUN_02010340
_0201036C:
	add r0, sb, #0x400
	bl FUN_02001c28
	ldr r0, [r8, #4]
	tst r0, #4
	bne _0201036C
_02010380:
	cmp r7, #0
	ldrne r0, [r8, #4]
	strne r6, [r8, #0x4ec]
	orrne r0, r0, #4
	strne r0, [r8, #4]
	mov r0, r4
	strne r5, [r8, #0x4f0]
	bl FUN_02003dbc
	ldr r0, [r8]
	ldr r0, [r0]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_020103b8
FUN_020103b8: ; 0x020103B8
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r5, [r7, #0x4ec]
	ldr r6, [r7, #0x4f0]
	bl FUN_02003da8
	ldr r2, [r7, #4]
	add r1, r7, #0xf4
	mov r4, r0
	bic r2, r2, #0x4c
	add r0, r1, #0x400
	str r2, [r7, #4]
	bl FUN_02001c78
	mov r0, r4
	bl FUN_02003dbc
	cmp r5, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	blx r5
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020103b8

	arm_func_start FUN_02010404
FUN_02010404: ; 0x02010404
	push {r4, lr}
	tst r0, #0x10
	mov r4, #0
	movne r1, #1
	bic r0, r0, #0x10
	moveq r1, r4
	cmp r0, #3
	bhi _02010434
	cmp r1, #0
	ldreq r4, _0201043C ; =0x0208BEE8
	beq _02010434
	bl FUN_02004160
	arm_func_end FUN_02010404
_02010434:
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0201043C: .word 0x0208BEE8

	arm_func_start FUN_02010440
FUN_02010440: ; 0x02010440
	push {r3, lr}
	cmp r1, r2
	blo _02010454
	bl FUN_02002700
	pop {r3, pc}
	arm_func_end FUN_02010440
_02010454:
	bl FUN_0200270c
	pop {r3, pc}

	arm_func_start FUN_0201045c
FUN_0201045c: ; 0x0201045C
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r6, r0
	cmp r5, r2
	blo _02010478
	bl FUN_02002664
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0201045c
_02010478:
	ands r0, r6, #0x1f
	beq _020104A4
	sub r6, r6, r0
	mov r4, #0x20
	mov r0, r6
	mov r1, r4
	bl FUN_020026b4
	mov r1, r4
	add r0, r6, r5
	bl FUN_020026b4
	add r5, r5, #0x20
_020104A4:
	mov r0, r6
	mov r1, r5
	bl FUN_02002698
	bl FUN_020026f4
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020104b8
FUN_020104b8: ; 0x020104B8
	push {r3, lr}
	cmp r0, #0xb
	popne {r3, pc}
	cmp r2, #0
	popeq {r3, pc}
	ldr r0, _020104E8 ; =LAB_02095c20
	ldr r1, [r0, #4]
	bic r1, r1, #0x20
	str r1, [r0, #4]
	ldr r0, [r0, #0x51c]
	bl FUN_02001ce0
	pop {r3, pc}
	.align 2, 0_020104E8: .word LAB_02095c20
	arm_func_end FUN_020104b8

	arm_func_start FUN_020104ec
FUN_020104ec: ; 0x020104EC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r0, [sl, #4]
	mov sb, r1
	mov fp, r2
	tst r0, #2
	mov r7, #1
	bne _02010560
	ldr r1, [sl, #4]
	mov r0, #0xb
	orr r2, r1, #2
	mov r1, r7
	str r2, [sl, #4]
	bl FUN_02015ae0
	cmp r0, #0
	bne _02010550
	mov r5, #0x32
	mov r4, #0xb
	arm_func_end FUN_020104ec
_02010534:
	mov r0, r5
	bl FUN_02003e24
	mov r0, r4
	mov r1, r7
	bl FUN_02015ae0
	cmp r0, #0
	beq _02010534
_02010550:
	mov r0, sl
	mov r1, #0
	mov r2, #1
	bl FUN_020104ec
_02010560:
	ldr r0, [sl]
	mov r1, #0x60
	bl FUN_020026d0
	bl FUN_020026f4
	ldr r0, _02010638 ; =LAB_020939a4
	mov r6, #0xb
	ldr r0, [r0, #4]
	mov r5, r6
	str r0, [sl, #0x51c]
	mov r4, #0
_02010588:
	ldr r0, [sl, #4]
	orr r0, r0, #0x20
	str r0, [sl, #4]
_02010594:
	mov r0, r6
	mov r1, sb
	mov r2, r7
	bl FUN_02015b04
	cmp r0, #0
	blt _02010594
	cmp sb, #0
	bne _020105D0
	ldr r8, [sl]
_020105B8:
	mov r0, r5
	mov r1, r8
	mov r2, r7
	bl FUN_02015b04
	cmp r0, #0
	blt _020105B8
_020105D0:
	bl FUN_02003da8
	ldr r1, [sl, #4]
	mov r8, r0
	tst r1, #0x20
	beq _020105F8
_020105E4:
	mov r0, r4
	bl FUN_02001c28
	ldr r0, [sl, #4]
	tst r0, #0x20
	bne _020105E4
_020105F8:
	mov r0, r8
	bl FUN_02003dbc
	ldr r0, [sl]
	mov r1, #0x60
	bl FUN_02002698
	ldr r0, [sl]
	ldr r0, [r0]
	cmp r0, #4
	bne _02010628
	sub fp, fp, #1
	cmp fp, #0
	bgt _02010588
_02010628:
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02010638: .word LAB_020939a4

	arm_func_start FUN_0201063c
FUN_0201063c: ; 0x0201063C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r0
	ldr r5, [sb, #0x510]
	ldr r0, _020107C8 ; =0x02000BAC
	ldr r6, [sb, #0x518]
	ldr sl, [sb, #0x514]
	mov r7, #0x100
	bl OSi_ReferSymbol
	cmp r5, #0xb
	bne _02010670
	bl FUN_02010c68
	mov r7, r0
	b _02010680
	arm_func_end FUN_0201063c
_02010670:
	cmp r5, #0xf
	ldreq r0, _020107CC ; =LAB_02095c20
	ldreq r0, [r0]
	ldreq r7, [r0, #0x20]
_02010680:
	ldr r4, _020107D0 ; =LAB_02096160
	mov fp, #9
_02010688:
	ldr r8, [sb, #0x504]
	ldr r0, [sb]
	cmp r7, r8
	movlo r8, r7
	str r8, [r0, #0x14]
	ldr r0, [sb, #4]
	tst r0, #0x40
	beq _020106C4
	ldr r1, [sb, #4]
	ldr r0, [sb]
	bic r1, r1, #0x40
	str r1, [sb, #4]
	mov r1, #7
	str r1, [r0]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020106C4:
	cmp r6, #3

	arm_func_start switchD
switchD: ; 0x020106C8
	addls pc, pc, r6, lsl #2
	b _02010748
	arm_func_end switchD
_020106D0: ; jump table
	b LAB_020106e0 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020106D4
	b _02010704
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020106D8
	b _02010704
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020106DC
	b _02010730
	arm_func_end caseD_3
LAB_020106e0:
	mov r0, r4
	mov r1, r8
	bl FUN_02002698
	ldr r1, [sb, #0x4fc]
	ldr r0, [sb]
	str r1, [r0, #0xc]
	ldr r0, [sb]
	str r4, [r0, #0x10]
	b _02010748
_02010704:
	ldr r0, [sb, #0x4fc]
	mov r1, r4
	mov r2, r8
	bl _memcpy
	mov r0, r4
	mov r1, r8
	bl FUN_020026d0
	bl FUN_020026f4
	ldr r0, [sb]
	str r4, [r0, #0xc]
	b _0201073C
_02010730:
	ldr r1, [sb, #0x4fc]
	ldr r0, [sb]
	str r1, [r0, #0xc]
_0201073C:
	ldr r1, [sb, #0x500]
	ldr r0, [sb]
	str r1, [r0, #0x10]
_02010748:
	mov r0, sb
	mov r1, r5
	mov r2, sl
	bl FUN_020104ec
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r6, #2
	bne _02010784
	mov r0, sb
	mov r1, fp
	mov r2, #1
	bl FUN_020104ec
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	b _0201079C
_02010784:
	cmp r6, #0
	bne _0201079C
	ldr r1, [sb, #0x500]
	mov r0, r4
	mov r2, r8
	bl _memcpy
_0201079C:
	ldr r0, [sb, #0x4fc]
	ldr r2, [sb, #0x500]
	ldr r1, [sb, #0x504]
	add r0, r0, r8
	add r2, r2, r8
	subs r1, r1, r8
	str r0, [sb, #0x4fc]
	str r2, [sb, #0x500]
	str r1, [sb, #0x504]
	bne _02010688
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020107C8: .word 0x02000BAC
_020107CC: .word LAB_02095c20
_020107D0: .word LAB_02096160

	arm_func_start FUN_020107d4
FUN_020107d4: ; 0x020107D4
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _02010AF8 ; =LAB_02095c20
	mov r4, #0x48
	ldr r6, [r1]
	mov r5, #0
	mov r7, r0
	mov r1, r5
	mov r2, r4
	add r0, r6, #0x18
	bl MemWrite
	ldr r0, _02010AFC ; =0x0000203F
	str r7, [r6, #4]
	str r0, [r6, #0x58]
	cmp r7, #0
	popeq {r3, r4, r5, r6, r7, pc}
	asr r0, r7, #8
	and r0, r0, #0xff
	mov r3, #1
	lsl ip, r3, r0
	and r2, r7, #0xff
	asr r1, r7, #0x10
	str ip, [r6, #0x18]
	mov r0, #0xff
	strb r0, [r6, #0x54]
	cmp r2, #1
	and r0, r1, #0xff
	bne _020108F4
	cmp ip, #0x2000
	bhi _02010858
	bhs _02010894
	cmp ip, #0x200
	beq _02010874
	b _02010AD8
	arm_func_end FUN_020107d4
_02010858:
	cmp ip, #0x10000
	bhi _02010868
	beq _020108A4
	b _02010AD8
_02010868:
	cmp ip, #0x20000
	beq _020108BC
	b _02010AD8
_02010874:
	mov r0, #0x10
	str r0, [r6, #0x24]
	str r3, [r6, #0x28]
	mov r0, #5
	str r0, [r6, #0x2c]
	mov r0, #0xf0
	strb r0, [r6, #0x54]
	b _020108D8
_02010894:
	mov r0, #0x20
	str r0, [r6, #0x24]
	mov r0, #2
	b _020108C8
_020108A4:
	mov r0, #0x80
	str r0, [r6, #0x24]
	mov r0, #2
	str r0, [r6, #0x28]
	mov r0, #0xa
	b _020108D0
_020108BC:
	mov r0, #0x100
	str r0, [r6, #0x24]
	mov r0, #3
_020108C8:
	str r0, [r6, #0x28]
	mov r0, #5
_020108D0:
	str r0, [r6, #0x2c]
	strb r5, [r6, #0x54]
_020108D8:
	ldr r0, [r6, #0x24]
	str r0, [r6, #0x1c]
	ldr r0, [r6, #0x58]
	orr r0, r0, #0x140
	orr r0, r0, #0x4200
	str r0, [r6, #0x58]
	pop {r3, r4, r5, r6, r7, pc}
_020108F4:
	cmp r2, #2
	bne _02010A98
	cmp ip, #0x100000
	bhi _02010924
	bhs _02010948
	cmp ip, #0x40000
	bhi _02010918
	beq _02010948
	b _02010AD8
_02010918:
	cmp ip, #0x80000
	beq _02010948
	b _02010AD8
_02010924:
	cmp ip, #0x400000
	bhi _0201093C
	bhs _020109B4
	cmp ip, #0x200000
	beq _02010970
	b _02010AD8
_0201093C:
	cmp ip, #0x800000
	beq _020109FC
	b _02010AD8
_02010948:
	mov r0, #0x19
	str r0, [r6, #0x30]
	mov r1, #0x12c
	str r1, [r6, #0x34]
	ldr r0, _02010B00 ; =0x00001388
	str r1, [r6, #0x50]
	str r0, [r6, #0x40]
	ldr r0, [r6, #0x58]
	orr r0, r0, #0x480
_0201096C:
	b _02010A64
_02010970:
	mov r0, #0x17
	str r0, [r6, #0x30]
	mov r0, #0x12c
	str r0, [r6, #0x34]
	mov r0, #0x1f4
	str r0, [r6, #0x40]
	add r0, r4, #0x1340
	ldr r1, _02010B04 ; =0x00002710
	str r0, [r6, #0x44]
	ldr r0, _02010B08 ; =0x0000EA60
	str r1, [r6, #0x38]
	str r0, [r6, #0x3c]
	strb r5, [r6, #0x54]
	ldr r0, [r6, #0x58]
	orr r0, r0, #0x480
	orr r0, r0, #0x5000
	b _0201096C
_020109B4:
	mov r0, #0x258
	str r0, [r6, #0x40]
	add r0, r0, #0x960
	str r0, [r6, #0x44]
	mov r0, #0x46
	str r0, [r6, #0x48]
	mov r0, #0x96
	ldr r1, _02010B0C ; =0x000059D8
	str r0, [r6, #0x4c]
	ldr r0, _02010B10 ; =0x000C3500
	str r1, [r6, #0x38]
	str r0, [r6, #0x3c]
	strb r5, [r6, #0x54]
	mov r0, #0x1000
	str r0, [r6, #0x20]
	ldr r0, [r6, #0x58]
	orr r0, r0, #0xd000
	b _0201096C
_020109FC:
	cmp r0, #0
	bne _02010A2C
	mov r0, #0x3e8
	str r0, [r6, #0x40]
	add r0, r0, #0x7d0
	ldr r1, _02010B14 ; =0x000109A0
	str r0, [r6, #0x44]
	ldr r0, _02010B18 ; =0x00027100
	str r1, [r6, #0x38]
	str r0, [r6, #0x3c]
	strb r5, [r6, #0x54]
	b _02010A5C
_02010A2C:
	cmp r0, #1
	bne _02010A68
	mov r0, #0x3e8
	str r0, [r6, #0x40]
	add r0, r0, #0x7d0
	ldr r1, _02010B14 ; =0x000109A0
	str r0, [r6, #0x44]
	ldr r0, _02010B18 ; =0x00027100
	str r1, [r6, #0x38]
	str r0, [r6, #0x3c]
	mov r0, #0x84
	strb r0, [r6, #0x54]
_02010A5C:
	ldr r0, [r6, #0x58]
	orr r0, r0, #0x5000
_02010A64:
	str r0, [r6, #0x58]
_02010A68:
	mov r0, #0x10000
	str r0, [r6, #0x1c]
	mov r0, #0x100
	str r0, [r6, #0x24]
	mov r0, #3
	str r0, [r6, #0x28]
	mov r0, #5
	str r0, [r6, #0x2c]
	ldr r0, [r6, #0x58]
	orr r0, r0, #0xb40
	str r0, [r6, #0x58]
	pop {r3, r4, r5, r6, r7, pc}
_02010A98:
	cmp r2, #3
	bne _02010AD8
	cmp ip, #0x2000
	cmpne ip, #0x8000
	bne _02010AD8
	str ip, [r6, #0x24]
	str ip, [r6, #0x1c]
	mov r0, #2
	str r0, [r6, #0x28]
	mov r0, #0
	strb r0, [r6, #0x54]
	ldr r0, [r6, #0x58]
	orr r0, r0, #0x140
	orr r0, r0, #0x4200
	str r0, [r6, #0x58]
	pop {r3, r4, r5, r6, r7, pc}
_02010AD8:
	mov r1, #0
	str r1, [r6, #4]
	str r1, [r6, #0x18]
	ldr r0, _02010AF8 ; =LAB_02095c20
	mov r1, #3
	ldr r0, [r0]
	str r1, [r0]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02010AF8: .word LAB_02095c20
_02010AFC: .word 0x0000203F
_02010B00: .word 0x00001388
_02010B04: .word 0x00002710
_02010B08: .word 0x0000EA60
_02010B0C: .word 0x000059D8
_02010B10: .word 0x000C3500
_02010B14: .word 0x000109A0
_02010B18: .word 0x00027100

	arm_func_start FUN_02010b1c
FUN_02010b1c: ; 0x02010B1C
	push {r3, r4, r5, lr}
	mov r4, #1
	mov r5, r0
	mov r2, r4
	mov r1, #2
	bl FUN_020104ec
	ldr r0, [r5]
	mov r1, #0
	str r1, [r0, #0xc]
	ldr r1, [r5]
	ldr r2, _02010B68 ; =LAB_02096160
	mov r0, r5
	str r2, [r1, #0x10]
	ldr r3, [r5]
	mov r2, r4
	mov r1, #6
	str r4, [r3, #0x14]
	bl FUN_020104ec
	pop {r3, r4, r5, pc}
	.align 2, 0_02010B68: .word LAB_02096160
	arm_func_end FUN_02010b1c

	arm_func_start FUN_02010b6c
FUN_02010b6c: ; 0x02010B6C
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, _02010BB4 ; =0x02000BAC
	mov r5, r1
	mov r4, r2
	bl OSi_ReferSymbol
	bl FUN_0200ff38
	bl FUN_02010148
	and r0, r6, r0
	cmp r6, r0
	beq _02010B9C
	bl FUN_02004160
	arm_func_end FUN_02010b6c
_02010B9C:
	ldr r0, _02010BB8 ; =LAB_02095c20
	mov r2, r5
	mov r3, r4
	mov r1, #1
	bl FUN_02010340
	pop {r4, r5, r6, pc}
	.align 2, 0_02010BB4: .word 0x02000BAC
_02010BB8: .word LAB_02095c20

	arm_func_start FUN_02010bbc
FUN_02010bbc: ; 0x02010BBC
	push {r4, r5, r6, lr}
	ldr ip, [sp, #0x20]
	mov r6, r0
	mov r4, r2
	mov r5, r1
	mov r0, #1
	cmp ip, #0
	ldr r2, [sp, #0x10]
	movne r0, #2
	mov r1, r3
	bl FUN_02010b6c
	ldr r2, _02010C20 ; =LAB_02095c20
	ldr r1, [sp, #0x18]
	str r6, [r2, #0x4fc]
	str r5, [r2, #0x500]
	str r4, [r2, #0x504]
	str r1, [r2, #0x510]
	ldr r0, [sp, #0x1c]
	ldr r3, [sp, #0x20]
	str r0, [r2, #0x514]
	ldr r1, [sp, #0x14]
	ldr r0, _02010C24 ; =FUN_0201063c
	str r3, [r2, #0x518]
	bl FUN_02010280
	pop {r4, r5, r6, pc}
	.align 2, 0_02010C20: .word LAB_02095c20
_02010C24: .word FUN_0201063c
	arm_func_end FUN_02010bbc

	arm_func_start FUN_02010c28
FUN_02010c28: ; 0x02010C28
	push {r3, r4, r5, lr}
	movs r5, r0
	bne _02010C38
	bl FUN_02004160
	arm_func_end FUN_02010c28
_02010C38:
	mov r4, #0
	mov r0, r4
	mov r1, r4
	mov r2, r4
	bl FUN_02010b6c
	mov r0, r5
	bl FUN_020107d4
	ldr r0, _02010C64 ; =FUN_02010b1c
	mov r1, r4
	bl FUN_02010280
	pop {r3, r4, r5, pc}
	.align 2, 0_02010C64: .word FUN_02010b1c

	arm_func_start FUN_02010c68
FUN_02010c68: ; 0x02010C68
	ldr r0, _02010C78 ; =LAB_02095c20
	ldr r0, [r0]
	ldr r0, [r0, #0x1c]
	bx lr
	.align 2, 0_02010C78: .word LAB_02095c20
	arm_func_end FUN_02010c68

	arm_func_start thunk_FUN_02010160
thunk_FUN_02010160: ; 0x02010C7C
	ldr ip, _02010C84 ; =FUN_02010160
	bx ip
	.align 2, 0_02010C84: .word FUN_02010160
	arm_func_end thunk_FUN_02010160

	arm_func_start thunk_FUN_02010180
thunk_FUN_02010180: ; 0x02010C88
	ldr ip, _02010C90 ; =FUN_02010180
	bx ip
	.align 2, 0_02010C90: .word FUN_02010180
	arm_func_end thunk_FUN_02010180

	arm_func_start FUN_02010c94
FUN_02010c94: ; 0x02010C94
	push {r3, r4, r5, lr}
	lsl r0, r0, #0x18
	orr r2, r0, r1, lsr #8
	lsl r3, r1, #0x18
	ldr r1, _02010D0C ; =0x040001A4
	arm_func_end FUN_02010c94
_02010CA8:
	ldr r0, [r1]
	tst r0, #0x80000000
	bne _02010CA8
	ldr r0, _02010D10 ; =0x040001A0
	and r1, r2, #0xff0000
	ldrh r5, [r0]
	and ip, r3, #0xff0000
	and lr, r2, #0xff000000
	lsr r4, r1, #8
	bic r1, r5, #0x2000
	orr r1, r1, #0xc000
	and r5, r2, #0xff00
	orr r4, r4, lr, lsr #24
	orr r5, r4, r5, lsl #8
	and lr, r3, #0xff000000
	lsr ip, ip, #8
	and r4, r3, #0xff00
	orr ip, ip, lr, lsr #24
	orr r4, ip, r4, lsl #8
	strh r1, [r0]
	orr r1, r5, r2, lsl #24
	str r1, [r0, #8]
	orr r1, r4, r3, lsl #24
	str r1, [r0, #0xc]
	pop {r3, r4, r5, pc}
	.align 2, 0_02010D0C: .word 0x040001A4
_02010D10: .word 0x040001A0

	arm_func_start FUN_02010d14
FUN_02010d14: ; 0x02010D14
	push {r3, lr}
	mov r1, r0
	mov r0, #0xb7
	bl FUN_02010c94
	ldr r1, _02010D40 ; =0x02FFFAE0
	ldr r0, _02010D44 ; =0x040001A4
	ldr r1, [r1]
	bic r1, r1, #0x7000000
	orr r1, r1, #0xa1000000
	str r1, [r0]
	pop {r3, pc}
	.align 2, 0_02010D40: .word 0x02FFFAE0
_02010D44: .word 0x040001A4
	arm_func_end FUN_02010d14

	arm_func_start FUN_02010d48
FUN_02010d48: ; 0x02010D48
	push {r4, lr}
	mov r4, #0
	mov r1, r4
	mov r0, #0xb8
	bl FUN_02010c94
	ldr r1, _02010D94 ; =0x02FFFAE0
	sub r0, r4, #0x2000
	ldr r2, [r1]
	ldr r1, _02010D98 ; =0x040001A4
	bic r2, r2, #0x7000000
	orr r2, r2, #0xa7000000
	and r0, r2, r0
	str r0, [r1]
	arm_func_end FUN_02010d48
_02010D7C:
	ldr r0, [r1]
	tst r0, #0x800000
	beq _02010D7C
	ldr r0, _02010D9C ; =0x04100010
	ldr r0, [r0]
	pop {r4, pc}
	.align 2, 0_02010D94: .word 0x02FFFAE0
_02010D98: .word 0x040001A4
_02010D9C: .word 0x04100010

	arm_func_start FUN_02010da0
FUN_02010da0: ; 0x02010DA0
	push {r3, r4, r5, lr}
	ldr r5, _02010DFC ; =0x02FFFC00
	ldr r0, [r5]
	tst r0, #0x20000000
	moveq r0, #0x20
	popeq {r3, r4, r5, pc}
	mov r4, #0
	mov r1, r4
	mov r0, #0xd6
	bl FUN_02010c94
	ldr r1, [r5, #-0x120]
	sub r0, r4, #0x2000
	bic r1, r1, #0x7000000
	orr r2, r1, #0xa7000000
	ldr r1, _02010E00 ; =0x040001A4
	and r0, r2, r0
	str r0, [r1]
	arm_func_end FUN_02010da0
_02010DE4:
	ldr r0, [r1]
	tst r0, #0x800000
	beq _02010DE4
	ldr r0, _02010E04 ; =0x04100010
	ldr r0, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0_02010DFC: .word 0x02FFFC00
_02010E00: .word 0x040001A4
_02010E04: .word 0x04100010

	arm_func_start FUN_02010e08
FUN_02010e08: ; 0x02010E08
	push {r3, r4, r5, lr}
	mov r4, r0
	bl FUN_02010da0
	tst r4, r0
	popeq {r3, r4, r5, pc}
	bl FUN_02010e68
	bl FUN_02010da0
	tst r0, #0x20
	popne {r3, r4, r5, pc}
	ldr r4, _02010E64 ; =LAB_02093994
	mov r5, #1
	arm_func_end FUN_02010e08
_02010E34:
	ldr r0, [r4]
	cmp r0, #0
	beq _02010E54
	bl FUN_020035f4
	cmp r0, #0
	beq _02010E54
	mov r0, r5
	bl FUN_02001eb0
_02010E54:
	bl FUN_02010da0
	tst r0, #0x20
	beq _02010E34
	pop {r3, r4, r5, pc}
	.align 2, 0_02010E64: .word LAB_02093994

	arm_func_start FUN_02010e68
FUN_02010e68: ; 0x02010E68
	push {r4, lr}
	mov r4, #0
	mov r1, r4
	mov r0, #0xb5
	bl FUN_02010c94
	ldr r1, _02010EAC ; =0x02FFFAE0
	sub r0, r4, #0x2000
	ldr r2, [r1]
	ldr r1, _02010EB0 ; =0x040001A4
	bic r2, r2, #0x7000000
	orr r2, r2, #0xa0000000
	and r0, r2, r0
	str r0, [r1]
	arm_func_end FUN_02010e68
_02010E9C:
	ldr r0, [r1]
	tst r0, #0x80000000
	bne _02010E9C
	pop {r4, pc}
	.align 2, 0_02010EAC: .word 0x02FFFAE0
_02010EB0: .word 0x040001A4

	arm_func_start FUN_02010eb4
FUN_02010eb4: ; 0x02010EB4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr r0, _02010FC0 ; =0x0208EE90
	mov r8, r3
	ldr r0, [r0]
	mov sl, r1
	mov sb, r2
	str r8, [sp, #4]
	str r0, [sp]
	ldr fp, _02010FC4 ; =0x04100010
	ldr r4, _02010FC8 ; =0x040001A4
	b _02010F98
	arm_func_end FUN_02010eb4
_02010EE4:
	mov r0, #0x200
	rsb r0, r0, #0
	and r6, sb, r0
	ldr r0, [sp]
	mov r5, sl
	cmp r6, r0
	mov r7, #0x200
	ldreq r5, _02010FCC ; =LAB_02096320
	beq _02010F5C
	cmp r6, sb
	bne _02010F24
	tst sl, #3
	bne _02010F24
	mov r0, r7
	cmp r8, r0
	bhs _02010F2C
_02010F24:
	ldr r5, _02010FCC ; =LAB_02096320
	str r6, [sp]
_02010F2C:
	mov r0, r6
	bl FUN_02010d14
	mov r3, #0
_02010F38:
	ldr r2, [r4]
	tst r2, #0x800000
	beq _02010F54
	ldr r1, [fp]
	cmp r3, #0x80
	strlo r1, [r5, r3, lsl #2]
	addlo r3, r3, #1
_02010F54:
	tst r2, #0x80000000
	bne _02010F38
_02010F5C:
	ldr r0, _02010FCC ; =LAB_02096320
	cmp r5, r0
	bne _02010F8C
	sub r3, sb, r6
	rsb r7, r3, #0x200
	ldr r0, _02010FCC ; =LAB_02096320
	cmp r8, r7
	movls r7, r8
	mov r1, sl
	mov r2, r7
	add r0, r0, r3
	bl _memcpy
_02010F8C:
	add sl, sl, r7
	add sb, sb, r7
	sub r8, r8, r7
_02010F98:
	cmp r8, #0
	bne _02010EE4
	bl FUN_02010d48
	bl FUN_02011540
	ldr r2, _02010FC0 ; =0x0208EE90
	ldr r1, [sp]
	ldr r0, [sp, #4]
	str r1, [r2]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02010FC0: .word 0x0208EE90
_02010FC4: .word 0x04100010
_02010FC8: .word 0x040001A4
_02010FCC: .word LAB_02096320

	arm_func_start FUN_02010fd0
FUN_02010fd0: ; 0x02010FD0
	push {r4, r5, r6, lr}
	ldr r5, _02011068 ; =LAB_02096260
	ldr r4, [r5, #8]
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r4, #0xc]
	add r0, r0, #0x200
	str r0, [r4, #0xc]
	ldr r0, [r4, #0x10]
	add r0, r0, #0x200
	str r0, [r4, #0x10]
	ldr r0, [r4, #0x14]
	subs r0, r0, #0x200
	str r0, [r4, #0x14]
	beq _02011018
	ldr r0, [r4, #0xc]
	bl FUN_02010d14
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02010fd0
_02011018:
	ldr r0, _0201106C ; =LAB_02095c20
	ldr r1, [r0, #0x50c]
	ldr r0, [r0, #0x508]
	ldr r1, [r1, #4]
	blx r1
	mov r6, #0x80000
	mov r0, r6
	bl FUN_0200102c
	mov r0, r6
	bl FUN_0200105c
	mov r0, #0
	str r0, [r5, #8]
	bl FUN_02010d48
	bl FUN_02011540
	ldr r1, [r4, #4]
	cmp r1, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r4, #8]
	blx r1
	pop {r4, r5, r6, pc}
	.align 2, 0_02011068: .word LAB_02096260
_0201106C: .word LAB_02095c20

	arm_func_start FUN_02011070
FUN_02011070: ; 0x02011070
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_02003da8
	ldr r2, _020110DC ; =LAB_02096260
	mov r4, #0x80000
	mov r5, r0
	ldr r1, _020110E0 ; =FUN_02010fd0
	mov r0, r4
	str r6, [r2, #8]
	bl FUN_02000e30
	mov r0, r4
	bl FUN_0200105c
	mov r0, r4
	bl FUN_02000ffc
	mov r0, r5
	bl FUN_02003dbc
	ldr r2, _020110E4 ; =LAB_02095c20
	ldr r1, _020110E8 ; =0x04100010
	ldr r0, [r2, #0x508]
	ldr r3, [r2, #0x50c]
	ldr r2, [r6, #0x10]
	ldr ip, [r3]
	mov r3, #0x200
	blx ip
	ldr r0, [r6, #0xc]
	bl FUN_02010d14
	pop {r4, r5, r6, pc}
	.align 2, 0_020110DC: .word LAB_02096260
_020110E0: .word FUN_02010fd0
_020110E4: .word LAB_02095c20
_020110E8: .word 0x04100010
	arm_func_end FUN_02011070

	arm_func_start FUN_020110ec
FUN_020110ec: ; 0x020110EC
	push {r3, lr}
	bl FUN_02010d48
	bl FUN_02011540
	mov r0, #8
	bl FUN_02010e08
	ldr r0, _02011118 ; =LAB_02095c20
	mov r2, #0
	ldr r1, [r0]
	str r2, [r1]
	bl FUN_020103b8
	pop {r3, pc}
	.align 2, 0_02011118: .word LAB_02095c20
	arm_func_end FUN_020110ec

	arm_func_start FUN_0201111c
FUN_0201111c: ; 0x0201111C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, #0
	mov sb, r1
	mov r8, r2
	mov r7, r3
	mov r5, r4
	mov r2, r4
	cmp r0, #3
	bhi _02011174
	cmp r7, #0
	beq _02011174
	tst sb, #0x1f
	bne _02011174
	ldr r0, _020111C8 ; =0x01FF8000
	add r1, sb, r7
	cmp r1, r0
	mov r0, #1
	bls _0201116C
	cmp sb, #0x2000000
	movlo r0, r4
	arm_func_end FUN_0201111c
_0201116C:
	cmp r0, #0
	movne r2, #1
_02011174:
	cmp r2, #0
	beq _020111A8
	mov r6, #1
	bl FUN_02002f9c
	add r1, sb, r7
	cmp r1, r0
	bls _020111A0
	bl FUN_02002f9c
	add r0, r0, #0x4000
	cmp sb, r0
	movlo r6, #0
_020111A0:
	cmp r6, #0
	movne r5, #1
_020111A8:
	cmp r5, #0
	beq _020111C0
	ldr r0, _020111CC ; =0x000001FF
	orr r1, r8, r7
	tst r1, r0
	moveq r4, #1
_020111C0:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020111C8: .word 0x01FF8000
_020111CC: .word 0x000001FF

	arm_func_start FUN_020111d0
FUN_020111d0: ; 0x020111D0
	push {r4, lr}
	ldr ip, _02011214 ; =LAB_02096260
	mov r4, #0
	ldr r1, [r0, #0x500]
	ldr r2, [r0, #0x4fc]
	ldr r3, [r0, #0x504]
	ldr ip, [ip, #0xc]
	mov r0, r4
	blx ip
	bl FUN_02010d48
	bl FUN_02011540
	mov r0, #8
	bl FUN_02010e08
	ldr r0, _02011218 ; =LAB_02095c20
	ldr r0, [r0]
	str r4, [r0]
	pop {r4, pc}
	.align 2, 0_02011214: .word LAB_02096260
_02011218: .word LAB_02095c20
	arm_func_end FUN_020111d0

	arm_func_start FUN_0201121c
FUN_0201121c: ; 0x0201121C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	ldr r4, _02011388 ; =LAB_02095c20
	bl FUN_0200ff38
	bl FUN_02010148
	tst r0, #4
	bne _02011248
	bl FUN_02004160
	arm_func_end FUN_0201121c
_02011248:
	mov r8, #1
	ldr r2, [sp, #0x20]
	ldr r3, [sp, #0x24]
	mov r0, r4
	mov r1, r8
	bl FUN_02010340
	mov r0, sb
	bl FUN_02010404
	str r0, [r4, #0x50c]
	cmp r0, #0
	andne r0, sb, #3
	subeq r0, r8, #2
	str r0, [r4, #0x508]
	cmp r0, #3
	bhi _02011290
	ldr r1, [r4, #0x50c]
	ldr r1, [r1, #4]
	blx r1
_02011290:
	ldr r8, _0201138C ; =LAB_02096260
	ldr r0, _02011390 ; =FUN_020110ec
	ldr r1, [r8]
	str r6, [r4, #0x500]
	add r2, r7, r1
	str r2, [r4, #0x4fc]
	str r5, [r4, #0x504]
	str r0, [r8, #0x14]
	mov r0, #0
	str r0, [r8, #0x18]
	str r2, [r8, #0x1c]
	str r6, [r8, #0x20]
	str r5, [r8, #0x24]
	str r0, [r8, #0x28]
	ldr r1, [r8, #0xc]
	ldr r0, _02011394 ; =FUN_02010eb4
	cmp r1, r0
	bne _02011358
	ldr r0, [r4, #0x508]
	mov r1, r6
	mov r3, r5
	bl FUN_0201111c
	cmp r0, #0
	beq _02011358
	bl FUN_02003da8
	ldr r1, [r8, #4]
	mov r5, r0
	cmp r1, #0
	beq _02011314
	ldr r0, [r4, #0x500]
	ldr r1, [r4, #0x504]
	ldr r2, [r4, #0xc]
	bl FUN_02010440
_02011314:
	ldr r0, _02011398 ; =0x0208EE90
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _02011334
	ldr r0, [r4, #0x500]
	ldr r1, [r4, #0x504]
	ldr r2, [r4, #0x10]
	bl FUN_0201045c
_02011334:
	mov r0, r5
	bl FUN_02003dbc
	ldr r0, _0201139C ; =LAB_02096270
	bl FUN_02011070
	ldr r0, [sp, #0x28]
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	bl thunk_FUN_02010160
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02011358:
	ldr r0, _0201138C ; =LAB_02096260
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _02011378
	ldr r0, [r4, #0x500]
	ldr r1, [r4, #0x504]
	ldr r2, [r4, #0xc]
	bl FUN_02010440
_02011378:
	ldr r1, [sp, #0x28]
	ldr r0, _020113A0 ; =FUN_020111d0
	bl FUN_02010280
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02011388: .word LAB_02095c20
_0201138C: .word LAB_02096260
_02011390: .word FUN_020110ec
_02011394: .word FUN_02010eb4
_02011398: .word 0x0208EE90
_0201139C: .word LAB_02096270
_020113A0: .word FUN_020111d0

	arm_func_start FUN_020113a4
FUN_020113a4: ; 0x020113A4
	push {r4, lr}
	ldr r1, _02011410 ; =FUN_02010eb4
	ldr r0, _02011414 ; =LAB_02096260
	str r1, [r0, #0xc]
	bl FUN_02003e60
	cmp r0, #1
	popne {r4, pc}
	bl FUN_0200ff80
	ldr r0, [r0, #0x80]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_02001440
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	mov r0, r4
	bl FUN_0200ff8c
	bl FUN_0200ff80
	ldr r2, [r0, #0x80]
	ldr r1, _02011418 ; =LAB_0209628c
	mov r0, #0
	mov r3, #0x88
	bl FUN_02010eb4
	mov r0, r4
	bl FUN_0200fffc
	mov r0, r4
	bl FUN_02001498
	pop {r4, pc}
	.align 2, 0_02011410: .word FUN_02010eb4
_02011414: .word LAB_02096260
_02011418: .word LAB_0209628c
	arm_func_end FUN_020113a4

	arm_func_start thunk_FUN_02010160
thunk_FUN_02010160: ; 0x0201141C
	ldr ip, _02011424 ; =FUN_02010160
	bx ip
	.align 2, 0_02011424: .word FUN_02010160
	arm_func_end thunk_FUN_02010160

	arm_func_start FUN_02011428
FUN_02011428: ; 0x02011428
	ldr r0, _02011430 ; =LAB_0209628c
	bx lr
	.align 2, 0_02011430: .word LAB_0209628c
	arm_func_end FUN_02011428

	arm_func_start FUN_02011434
FUN_02011434: ; 0x02011434
	push {r3, r4, r5, lr}
	bl FUN_0201598c
	ldr r4, _02011460 ; =LAB_02096520
	mov r5, #0
	str r5, [r4]
	ldr r1, _02011464 ; =FUN_02011468
	mov r0, #0xe
	str r5, [r4, #4]
	bl FUN_02015a94
	str r5, [r4, #8]
	pop {r3, r4, r5, pc}
	.align 2, 0_02011460: .word LAB_02096520
_02011464: .word FUN_02011468
	arm_func_end FUN_02011434

	arm_func_start FUN_02011468
FUN_02011468: ; 0x02011468
	push {r3, r4, r5, lr}
	and r0, r1, #0x3f
	cmp r0, #0x11
	bne _020114C0
	ldr r4, _020114F4 ; =LAB_02096520
	ldr r0, [r4, #4]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r5, #1
	mov r0, r5
	str r5, [r4, #4]
	mov r1, #0
	bl FUN_02010210
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _020114B0
	blx r0
	mov r5, r0
	arm_func_end FUN_02011468
_020114B0:
	cmp r5, #0
	popeq {r3, r4, r5, pc}
	bl FUN_02011508
	pop {r3, r4, r5, pc}
_020114C0:
	cmp r0, #2
	bne _020114EC
	ldr r2, _020114F4 ; =LAB_02096520
	mov r1, #0
	ldr r3, [r2]
	mov r0, #2
	add r3, r3, #1
	str r3, [r2]
	str r1, [r2, #4]
	bl FUN_02010210
	pop {r3, r4, r5, pc}
_020114EC:
	bl FUN_02004160
	pop {r3, r4, r5, pc}
	.align 2, 0_020114F4: .word LAB_02096520

	arm_func_start FUN_020114f8
FUN_020114f8: ; 0x020114F8
	ldr r0, _02011504 ; =LAB_02096520
	ldr r0, [r0, #4]
	bx lr
	.align 2, 0_02011504: .word LAB_02096520
	arm_func_end FUN_020114f8

	arm_func_start FUN_02011508
FUN_02011508: ; 0x02011508
	push {r3, lr}
	ldr r0, _0201153C ; =0x02FFFFA8
	ldrh r0, [r0]
	and r0, r0, #0x8000
	asrs r0, r0, #0xf
	beq _02011524
	bl FUN_02016cf0
	arm_func_end FUN_02011508
_02011524:
	mov r0, #1
	mov r1, r0
	bl FUN_02011590
	bl FUN_02007414
	bl FUN_02004160
	pop {r3, pc}
	.align 2, 0_0201153C: .word 0x02FFFFA8

	arm_func_start FUN_02011540
FUN_02011540: ; 0x02011540
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r1, _0201158C ; =0x02FFFC00
	ldr r1, [r1]
	str r1, [sp]
	ldr r1, [sp]
	cmp r0, r1
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	bl FUN_02003da8
	mov r4, r0
	mov r0, #0xe
	mov r1, #0x11
	mov r2, #0
	bl FUN_02011468
	mov r0, r4
	bl FUN_02003dbc
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_0201158C: .word 0x02FFFC00
	arm_func_end FUN_02011540

	arm_func_start FUN_02011590
FUN_02011590: ; 0x02011590
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r1, r7
	mov r0, #0xe
	mov r2, #0
	bl FUN_02015b04
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r5, #0xe
	mov r4, #0
	arm_func_end FUN_02011590
_020115BC:
	mov r0, r6
	blx FUN_020004BE
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_02015b04
	cmp r0, #0
	bne _020115BC
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020115e0
FUN_020115e0: ; 0x020115E0
	ldr r1, _020115FC ; =0x02FFFC30
	ldr r0, _02011600 ; =0x0000FFFF
	ldrh r1, [r1]
	cmp r1, r0
	movne r0, #1
	moveq r0, #0
	bx lr
	.align 2, 0_020115FC: .word 0x02FFFC30
_02011600: .word 0x0000FFFF
	arm_func_end FUN_020115e0

	arm_func_start FUN_02011604
FUN_02011604: ; 0x02011604
	push {r3, lr}
	ldr r1, _02011630 ; =_02096530
	mov r3, #0
	ldr r2, _02011634 ; =0x05000001
	add r0, sp, #0
	str r3, [sp]
	blx FUN_020000D0
	bl FUN_02001440
	ldr r1, _02011638 ; =LAB_0209652c
	strh r0, [r1, #6]
	pop {r3, pc}
	.align 2, 0_02011630: .word _02096530
_02011634: .word 0x05000001
_02011638: .word LAB_0209652c
	arm_func_end FUN_02011604

	arm_func_start FUN_0201163c
FUN_0201163c: ; 0x0201163C
	push {r3, r4, r5, lr}
	sub sp, sp, #0x10
	mov r4, #1
	bl FUN_020115e0
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r5, _02011734 ; =0x02FFFC30
	ldrb r0, [r5, #5]
	lsl r0, r0, #0x1e
	lsr r0, r0, #0x1f
	cmp r0, #1
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _02011738 ; =LAB_0209652c
	add r1, sp, #8
	ldrh r0, [r0, #6]
	bl FUN_020117bc
	add r0, sp, #0
	bl FUN_02011740
	mov r0, #0x8000000
	ldrb r2, [r0, #0xb2]
	cmp r2, #0x96
	bne _020116B4
	ldrh r1, [r5]
	ldrh r0, [r0, #0xbe]
	cmp r1, r0
	bne _020116FC
	arm_func_end FUN_0201163c
_020116B4:
	cmp r2, #0x96
	beq _020116D4
	ldr r1, _02011734 ; =0x02FFFC30
	ldr r0, _0201173C ; =0x0801FFFE
	ldrh r1, [r1]
	ldrh r0, [r0]
	cmp r1, r0
	bne _020116FC
_020116D4:
	ldr r2, _02011734 ; =0x02FFFC30
	mov r0, #0x8000000
	ldr r1, [r2, #8]
	ldr r0, [r0, #0xac]
	cmp r1, r0
	beq _02011710
	ldrb r0, [r2, #5]
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	beq _02011710
_020116FC:
	ldr r1, _02011734 ; =0x02FFFC30
	mov r4, #0
	ldrb r0, [r1, #5]
	orr r0, r0, #2
	strb r0, [r1, #5]
_02011710:
	add r0, sp, #0
	bl FUN_02011788
	ldr r0, _02011738 ; =LAB_0209652c
	add r1, sp, #8
	ldrh r0, [r0, #6]
	bl FUN_02011818
	mov r0, r4
	add sp, sp, #0x10
	pop {r3, r4, r5, pc}
	.align 2, 0_02011734: .word 0x02FFFC30
_02011738: .word LAB_0209652c
_0201173C: .word 0x0801FFFE

	arm_func_start FUN_02011740
FUN_02011740: ; 0x02011740
	ldr r2, _02011784 ; =0x04000204
	ldrh r1, [r2]
	and r1, r1, #0xc
	asr r1, r1, #2
	str r1, [r0]
	ldrh r1, [r2]
	and r1, r1, #0x10
	asr r1, r1, #4
	str r1, [r0, #4]
	ldrh r0, [r2]
	bic r0, r0, #0xc
	orr r0, r0, #0xc
	strh r0, [r2]
	ldrh r0, [r2]
	bic r0, r0, #0x10
	strh r0, [r2]
	bx lr
	.align 2, 0_02011784: .word 0x04000204
	arm_func_end FUN_02011740

	arm_func_start FUN_02011788
FUN_02011788: ; 0x02011788
	ldr r3, _020117B8 ; =0x04000204
	ldr r2, [r0]
	ldrh r1, [r3]
	bic r1, r1, #0xc
	orr r1, r1, r2, lsl #2
	strh r1, [r3]
	ldrh r1, [r3]
	ldr r2, [r0, #4]
	bic r0, r1, #0x10
	orr r0, r0, r2, lsl #4
	strh r0, [r3]
	bx lr
	.align 2, 0_020117B8: .word 0x04000204
	arm_func_end FUN_02011788

	arm_func_start FUN_020117bc
FUN_020117bc: ; 0x020117BC
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, _02011814 ; =0x02FFFFE8
	mov r7, r0
	mov r6, r1
	mov r4, #1
	arm_func_end FUN_020117bc
_020117D0:
	bl FUN_02003da8
	str r0, [r6, #4]
	mov r0, r5
	bl FUN_02001438
	ands r0, r0, #0x40
	str r0, [r6]
	popne {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	bl FUN_02001380
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r6, #4]
	bl FUN_02003dbc
	mov r0, r4
	blx FUN_020004BE
	b _020117D0
_02011810:
	.byte 0xF8, 0x80, 0xBD, 0xE8
_02011814: .word 0x02FFFFE8

	arm_func_start FUN_02011818
FUN_02011818: ; 0x02011818
	push {r4, lr}
	mov r4, r1
	ldr r1, [r4]
	cmp r1, #0
	bne _02011830
	bl thunk_FUN_02001354
	arm_func_end FUN_02011818
_02011830:
	ldr r0, [r4, #4]
	bl FUN_02003dbc
	pop {r4, pc}

	arm_func_start FUN_0201183c
FUN_0201183c: ; 0x0201183C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r1, r7
	mov r0, #0xd
	mov r2, #0
	bl FUN_02015b04
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r6, #1
	mov r5, #0xd
	mov r4, #0
	arm_func_end FUN_0201183c
_02011868:
	mov r0, r6
	blx FUN_020004BE
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_02015b04
	cmp r0, #0
	bne _02011868
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0201188c
FUN_0201188c: ; 0x0201188C
	push {r3, r4, r5, lr}
	mov r4, r0
	bl FUN_02003da8
	ldr r1, _02011918 ; =LAB_0209652c
	mov r5, r0
	str r4, [r1]
	bl FUN_020115e0
	cmp r0, #0
	beq _0201190C
	mov r1, #0x1000
	cmp r4, #0
	moveq r1, #0x5000
	mov r0, #0xf000
	bl FUN_02003010
	cmp r4, #0
	mov r4, #8
	beq _020118F4
	bl FUN_02002664
	bl FUN_020026f4
	mov r0, r4
	bl FUN_02002fe0
	mov r0, r4
	bl FUN_02003000
	mov r0, r4
	bl FUN_02003034
	b _0201190C
	arm_func_end FUN_0201188c
_020118F4:
	mov r0, r4
	bl FUN_02002fd0
	mov r0, r4
	bl FUN_02002ff0
	mov r0, r4
	bl FUN_02003024
_0201190C:
	mov r0, r5
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	.align 2, 0_02011918: .word LAB_0209652c

	arm_func_start FUN_0201191c
FUN_0201191c: ; 0x0201191C
	push {r3, r4, r5, lr}
	ldr r4, _020119B8 ; =_02096534
	ldr r0, [r4, #8]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r0, #1
	str r0, [r4, #8]
	bl FUN_02011604
	mov r0, #0
	str r0, [r4, #0xc]
	bl FUN_0201598c
	mov r5, #0xd
	mov r4, #1
	arm_func_end FUN_0201191c
_02011950:
	mov r0, r5
	mov r1, r4
	bl FUN_02015ae0
	cmp r0, #0
	beq _02011950
	ldr r1, _020119BC ; =LAB_02011bb0
	mov r0, r5
	bl FUN_02015a94
	bl FUN_020119cc
	mov r4, #0
	mov r0, r5
	mov r1, r4
	bl FUN_02015a94
	ldr r1, _020119C0 ; =FUN_02011bd8
	mov r0, r5
	bl FUN_02015a94
	ldr r1, _020119B8 ; =_02096534
	ldr r0, _020119C4 ; =_02096620
	str r4, [r1, #0x18]
	bl FUN_02011c5c
	ldr r1, _020119C8 ; =FUN_02011c48
	mov r0, #0x11
	bl FUN_02015a94
	mov r0, r4
	bl FUN_0201188c
	pop {r3, r4, r5, pc}
	.align 2, 0_020119B8: .word _02096534
_020119BC: .word LAB_02011bb0
_020119C0: .word FUN_02011bd8
_020119C4: .word _02096620
_020119C8: .word FUN_02011c48

	arm_func_start FUN_020119cc
FUN_020119cc: ; 0x020119CC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	ldr r0, _02011B88 ; =_02096534
	ldr r1, [r0]
	cmp r1, #0
	addne sp, sp, #0x14
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r5, _02011B8C ; =0x04000300
	mov r7, #1
	ldrh r1, [r5]
	str r7, [r0]
	tst r1, #1
	addeq sp, sp, #0x14
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #0x40000
	bl FUN_02000fd0
	sub r1, r5, #0xf8
	ldrh sb, [r1]
	ldr r4, _02011B90 ; =_02096530
	mov r8, r0
	strh r7, [r1]
	add fp, sp, #0xc
	ldrh r0, [r4, #2]
	mov r1, fp
	bl FUN_020117bc
	sub r6, r5, #0xfc
	ldrh r0, [r6]
	and r0, r0, #0x8000
	asr sl, r0, #0xf
	add r0, sp, #4
	bl FUN_02011740
	ldrh r0, [r6]
	ldr r5, _02011B94 ; =_02096560
	mov r1, #0x40
	bic r0, r0, #0x8000
	strh r0, [r6]
	add r0, r5, #0x80
	bl FUN_02002698
	ldr r1, _02011B98 ; =0x08000080
	add r2, r5, #0x80
	mov r3, #0x40
	str r7, [sp]
	mov r0, r7
	bl FUN_020070a4
	ldrh r1, [r6]
	add r0, sp, #4
	bic r1, r1, #0x8000
	orr r1, r1, sl, lsl #15
	strh r1, [r6]
	bl FUN_02011788
	ldrh r0, [r4, #2]
	mov r1, fp
	bl FUN_02011818
	ldr r1, _02011B9C ; =0x02FFFF9B
	ldrb r0, [r1]
	cmp r0, #0
	bne _02011ABC
	ldrb r0, [r1, #-1]
	cmp r0, #0
	bne _02011B20
	arm_func_end FUN_020119cc
_02011ABC:
	ldr r3, _02011B94 ; =_02096560
	ldr r4, _02011BA0 ; =0x02FFFC30
	ldrh r0, [r3, #0xbe]
	mov r2, #0
	strh r0, [r4]
	b _02011AE8
_02011AD4:
	add r0, r3, r2
	ldrb r1, [r0, #0xb5]
	add r0, r4, r2
	add r2, r2, #1
	strb r1, [r0, #2]
_02011AE8:
	cmp r2, #3
	blt _02011AD4
	ldrh r0, [r3, #0xb0]
	strh r0, [r4, #6]
	ldr r0, [r3, #0xac]
	str r0, [r4, #8]
	bl FUN_0201163c
	cmp r0, #0
	mov r2, #1
	ldr r1, _02011B9C ; =0x02FFFF9B
	moveq r2, #0
	mov r0, #1
	strb r2, [r1]
	strb r0, [r1, #-1]
_02011B20:
	ldr r0, _02011BA4 ; =0xFFFF0020
	ldr r1, _02011BA8 ; =_02096564
	mov r2, #0x9c
	bl FUN_0200784c
	bl FUN_02002664
	ldr r0, _02011B94 ; =_02096560
	add r0, r0, #0xfe000000
	lsr r0, r0, #5
	lsl r0, r0, #6
	orr r0, r0, #1
	bl FUN_0201183c
	mov r5, #1
	ldr r4, _02011B90 ; =_02096530
	b _02011B60
_02011B58:
	mov r0, r5
	blx FUN_020004BE
_02011B60:
	ldrh r0, [r4]
	cmp r0, #1
	bne _02011B58
	ldr r2, _02011BAC ; =0x04000208
	mov r0, r8
	ldrh r1, [r2]
	strh sb, [r2]
	bl FUN_02000fd0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02011B88: .word _02096534
_02011B8C: .word 0x04000300
_02011B90: .word _02096530
_02011B94: .word _02096560
_02011B98: .word 0x08000080
_02011B9C: .word 0x02FFFF9B
_02011BA0: .word 0x02FFFC30
_02011BA4: .word 0xFFFF0020
_02011BA8: .word _02096564
_02011BAC: .word 0x04000208

	arm_func_start LAB_02011bb0
LAB_02011bb0: ; 0x02011BB0
	push {r3, lr}
	and r0, r1, #0x3f
	cmp r0, #1
	ldreq r0, _02011BD4 ; =_02096530
	moveq r1, #1
	strheq r1, [r0]
	popeq {r3, pc}
	bl FUN_02004160
	pop {r3, pc}
	.align 2, 0_02011BD4: .word _02096530
	arm_func_end LAB_02011bb0

	arm_func_start FUN_02011bd8
FUN_02011bd8: ; 0x02011BD8
	push {r3, lr}
	and r0, r1, #0x3f
	cmp r0, #0x11
	bne _02011C28
	ldr r0, _02011C30 ; =_02096534
	ldr r1, [r0, #0xc]
	cmp r1, #0
	popne {r3, pc}
	ldr r1, [r0, #0x18]
	mov r0, #0
	cmp r1, #0
	beq _02011C0C
	blx r1
	arm_func_end FUN_02011bd8
_02011C0C:
	cmp r0, #0
	beq _02011C18
	bl FUN_02011c34
_02011C18:
	ldr r0, _02011C30 ; =_02096534
	mov r1, #1
	str r1, [r0, #0xc]
	pop {r3, pc}
_02011C28:
	bl FUN_02004160
	pop {r3, pc}
	.align 2, 0_02011C30: .word _02096534

	arm_func_start FUN_02011c34
FUN_02011c34: ; 0x02011C34
	push {r3, lr}
	mov r0, #2
	bl FUN_0201183c
	bl FUN_02004160
	pop {r3, pc}
	arm_func_end FUN_02011c34

	arm_func_start FUN_02011c48
FUN_02011c48: ; 0x02011C48
	ldr r0, _02011C58 ; =_02096534
	mov r1, #0
	str r1, [r0, #4]
	bx lr
	.align 2, 0_02011C58: .word _02096534
	arm_func_end FUN_02011c48

	arm_func_start FUN_02011c5c
FUN_02011c5c: ; 0x02011C5C
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	bl FUN_02003da8
	ldr r1, _02011CD8 ; =LAB_02096708
	mov r4, r0
	ldr r0, [r1]
	cmp r0, #0
	bne _02011CC8
	add r0, r5, #0xc4
	str r5, [r1]
	bl FUN_02011ce8
	ldr r0, _02011CDC ; =LAB_0209670c
	bl FUN_02011ce8
	mov r0, #0
	str r0, [r5, #0xc0]
	mov r2, #0x400
	ldr r1, _02011CE0 ; =FUN_02011cfc
	ldr r3, _02011CE4 ; =LAB_02096b30
	mov r0, r5
	str r2, [sp]
	mov r2, #0x14
	str r2, [sp, #4]
	mov r2, r5
	bl FUN_02001948
	mov r0, r5
	bl FUN_02001ce0
	arm_func_end FUN_02011c5c
_02011CC8:
	mov r0, r4
	bl FUN_02003dbc
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0_02011CD8: .word LAB_02096708
_02011CDC: .word LAB_0209670c
_02011CE0: .word FUN_02011cfc
_02011CE4: .word LAB_02096b30

	arm_func_start FUN_02011ce8
FUN_02011ce8: ; 0x02011CE8
	ldr ip, _02011CF8 ; =MemWrite
	mov r1, #0
	mov r2, #0x24
	bx ip
	.align 2, 0_02011CF8: .word MemWrite
	arm_func_end FUN_02011ce8

	arm_func_start FUN_02011cfc
FUN_02011cfc: ; 0x02011CFC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	mov r4, #0
	mov r7, r0
	add r5, sp, #0
	mov sb, r4
	mov r8, r4
	mov fp, r4
	arm_func_end FUN_02011cfc
_02011D1C:
	mov r0, r5
	mov r1, fp
	mov r2, #0x24
	bl MemWrite
	bl FUN_02003da8
	ldr r1, [r7, #0xc0]
	mov r6, r0
	cmp r1, #0
	bne _02011D54
_02011D40:
	mov r0, r4
	bl FUN_02001c28
	ldr r0, [r7, #0xc0]
	cmp r0, #0
	beq _02011D40
_02011D54:
	ldr lr, [r7, #0xc0]
	add ip, sp, #0
	ldm lr!, {r0, r1, r2, r3}
	mov sl, ip
	stm ip!, {r0, r1, r2, r3}
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldr r1, [lr]
	mov r0, r6
	str r1, [ip]
	bl FUN_02003dbc
	ldr r1, [sp]
	cmp r1, #0
	beq _02011D98
	mov r0, sl
	blx r1
	str r0, [sp, #8]
_02011D98:
	bl FUN_02003da8
	ldr r2, [sp, #4]
	ldr r1, _02011DE8 ; =LAB_02096708
	mov r6, r0
	strb sb, [r1, #0x26]
	cmp r2, #0
	beq _02011DBC
	mov r0, r5
	blx r2
_02011DBC:
	ldr r0, _02011DE8 ; =LAB_02096708
	ldr r0, [r0]
	cmp r0, #0
	beq _02011DDC
	mov r0, r6
	str r8, [r7, #0xc0]
	bl FUN_02003dbc
	b _02011D1C
_02011DDC:
	bl FUN_02001a38
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02011DE8: .word LAB_02096708

	arm_func_start FUN_02011dec
FUN_02011dec: ; 0x02011DEC
	push {r3, lr}
	mov r2, #0xf00
	bl FUN_02011e14
	cmp r0, #0
	ldreq r1, _02011E10 ; =LAB_02096b30
	moveq r2, #0
	ldreq r1, [r1, #4]
	strheq r2, [r1, #0x16]
	pop {r3, pc}
	.align 2, 0_02011E10: .word LAB_02096b30
	arm_func_end FUN_02011dec

	arm_func_start FUN_02011e14
FUN_02011e14: ; 0x02011E14
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov r8, r0
	mov r7, r1
	mov r5, r2
	bl FUN_02003da8
	ldr sb, _0201202C ; =LAB_02096b30
	mov r6, r0
	ldrh r1, [sb]
	cmp r1, #0
	beq _02011E50
	bl FUN_02003dbc
	add sp, sp, #4
	mov r0, #3
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02011e14
_02011E50:
	cmp r8, #0
	bne _02011E68
	bl FUN_02003dbc
	add sp, sp, #4
	mov r0, #6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02011E68:
	mov r0, r8
	bl FUN_02002f78
	cmp r0, #0
	beq _02011E8C
	mov r0, r6
	bl FUN_02003dbc
	add sp, sp, #4
	mov r0, #6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02011E8C:
	cmp r7, #3
	bls _02011EA8
	mov r0, r6
	bl FUN_02003dbc
	add sp, sp, #4
	mov r0, #6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02011EA8:
	tst r8, #0x1f
	beq _02011EC4
	mov r0, r6
	bl FUN_02003dbc
	add sp, sp, #4
	mov r0, #6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02011EC4:
	bl FUN_0201598c
	mov sl, #1
	mov r1, sl
	mov r0, #0xa
	bl FUN_02015ae0
	cmp r0, #0
	bne _02011EF4
	mov r0, r6
	bl FUN_02003dbc
	add sp, sp, #4
	mov r0, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02011EF4:
	mov r0, r8
	mov r1, r5
	bl FUN_02002698
	mov r4, #0
	mov r0, r7
	mov r1, r8
	mov r2, r4
	str sl, [sp]
	mov r3, r5
	bl FUN_02006f7c
	str r8, [sb, #4]
	add r0, r8, #0x200
	str r0, [r8]
	ldr r1, [sb, #4]
	ldr r0, [r1]
	add r0, r0, #0x300
	str r0, [r1, #4]
	ldr r1, [sb, #4]
	ldr r0, [r1, #4]
	add r0, r0, #0x800
	str r0, [r1, #0xc]
	ldr r1, [sb, #4]
	ldr r0, [r1, #0xc]
	add r0, r0, #0x100
	str r0, [r1, #0x10]
	bl FUN_0201272c
	ldr r0, [sb, #4]
	mov r1, r4
	strh r7, [r0, #0x14]
	ldr r0, [sb, #4]
	str r4, [r0, #0x14c]
	ldr r0, [sb, #4]
	add r0, r0, #0x100
	strh r4, [r0, #0x50]
	b _02011F9C
_02011F80:
	ldr r0, [sb, #4]
	add r0, r0, r4, lsl #2
	str r1, [r0, #0xcc]
	ldr r0, [sb, #4]
	add r0, r0, r4, lsl #2
	str r1, [r0, #0x10c]
	add r4, r4, #1
_02011F9C:
	cmp r4, #0x10
	blt _02011F80
	ldr r5, _02012030 ; =0x02096B48
	ldr r1, _02012034 ; =0x02096B68
	mov r0, r5
	mov r2, #0xa
	bl FUN_02002174
	mov r7, #0
	mov r4, #0x8000
	ldr sl, _02012038 ; =LAB_02096be0
	mov sb, #2
	mov r8, #1
	b _02011FF8
_02011FD0:
	lsl r2, r7, #8
	mov r1, sb
	add r0, sl, r7, lsl #8
	strh r4, [sl, r2]
	bl FUN_020026b4
	mov r0, r5
	mov r2, r8
	add r1, sl, r7, lsl #8
	bl FUN_0200219c
	add r7, r7, #1
_02011FF8:
	cmp r7, #0xa
	blt _02011FD0
	ldr r1, _0201203C ; =FUN_02012344
	mov r0, #0xa
	bl FUN_02015a94
	ldr r1, _0201202C ; =LAB_02096b30
	mov r2, #1
	mov r0, r6
	strh r2, [r1]
	bl FUN_02003dbc
	mov r0, #0
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0201202C: .word LAB_02096b30
_02012030: .word 0x02096B48
_02012034: .word 0x02096B68
_02012038: .word LAB_02096be0
_0201203C: .word FUN_02012344

	arm_func_start FUN_02012040
FUN_02012040: ; 0x02012040
	push {r3, r4, r5, lr}
	bl FUN_02003da8
	mov r5, r0
	bl FUN_02012254
	cmp r0, #0
	beq _02012068
	mov r0, r5
	bl FUN_02003dbc
	mov r0, #3
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02012040
_02012068:
	mov r4, #0
	mov r1, r4
	mov r0, #1
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	bl FUN_0201272c
	mov r1, r4
	mov r0, #0xa
	bl FUN_02015a94
	ldr r1, _020120AC ; =LAB_02096b30
	mov r0, r5
	str r4, [r1, #4]
	strh r4, [r1]
	bl FUN_02003dbc
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_020120AC: .word LAB_02096b30

	arm_func_start FUN_020120b0
FUN_020120b0: ; 0x020120B0
	ldr r2, _020120C4 ; =LAB_02096b30
	ldr r2, [r2, #4]
	add r0, r2, r0, lsl #2
	str r1, [r0, #0x18]
	bx lr
	.align 2, 0_020120C4: .word LAB_02096b30
	arm_func_end FUN_020120b0

	arm_func_start FUN_020120c8
FUN_020120c8: ; 0x020120C8
	push {r3, r4, r5, lr}
	ldr r5, _02012124 ; =0x02096B48
	mov r4, #0
	add r1, sp, #0
	mov r0, r5
	mov r2, r4
	bl FUN_02002230
	cmp r0, #0
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	ldr r0, [sp]
	mov r1, #2
	bl FUN_02002698
	ldr r1, [sp]
	ldrh r0, [r1]
	tst r0, #0x8000
	movne r0, r1
	popne {r3, r4, r5, pc}
	mov r0, r5
	mov r2, #1
	bl FUN_020022d0
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_02012124: .word 0x02096B48
	arm_func_end FUN_020120c8

	arm_func_start FUN_02012128
FUN_02012128: ; 0x02012128
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020120c8
	movs r4, r0
	moveq r0, #8
	popeq {r3, r4, r5, lr}
	addeq sp, sp, #0x10
	bxeq lr
	strh r5, [r4]
	ldrh r5, [sp, #0x14]
	add r0, sp, #0x14
	bic r0, r0, #3
	mov r3, #0
	cmp r5, #0
	add r2, r0, #4
	ble _02012188
	arm_func_end FUN_02012128
_0201216C:
	add r2, r2, #4
	ldr r1, [r2, #-4]
	add r0, r4, r3, lsl #2
	add r3, r3, #1
	str r1, [r0, #4]
	cmp r3, r5
	blt _0201216C
_02012188:
	mov r0, r4
	mov r1, #0x100
	bl FUN_020026b4
	mov r1, r4
	mov r0, #0xa
	mov r2, #0
	bl FUN_02015b04
	mov r5, r0
	ldr r0, _020121D0 ; =0x02096B48
	mov r1, r4
	mov r2, #1
	bl FUN_0200219c
	mov r0, #8
	cmp r5, #0
	movge r0, #2
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_020121D0: .word 0x02096B48

	arm_func_start FUN_020121d4
FUN_020121d4: ; 0x020121D4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r4, r1
	bl FUN_020120c8
	movs r5, r0
	moveq r0, #8
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl _memcpy
	mov r0, r5
	mov r1, r4
	bl FUN_020026b4
	mov r1, r5
	mov r0, #0xa
	mov r2, #0
	bl FUN_02015b04
	mov r4, r0
	ldr r0, _02012240 ; =0x02096B48
	mov r1, r5
	mov r2, #1
	bl FUN_0200219c
	mov r0, #8
	cmp r4, #0
	movge r0, #2
	pop {r4, r5, r6, pc}
	.align 2, 0_02012240: .word 0x02096B48
	arm_func_end FUN_020121d4

	arm_func_start FUN_02012244
FUN_02012244: ; 0x02012244
	ldr r0, _02012250 ; =LAB_02096b30
	ldr r0, [r0, #4]
	bx lr
	.align 2, 0_02012250: .word LAB_02096b30
	arm_func_end FUN_02012244

	arm_func_start FUN_02012254
FUN_02012254: ; 0x02012254
	ldr r0, _0201226C ; =LAB_02096b30
	ldrh r0, [r0]
	cmp r0, #0
	movne r0, #0
	moveq r0, #3
	bx lr
	.align 2, 0_0201226C: .word LAB_02096b30
	arm_func_end FUN_02012254

	arm_func_start FUN_02012270
FUN_02012270: ; 0x02012270
	push {r4, lr}
	bl FUN_02012254
	cmp r0, #0
	popne {r4, pc}
	ldr r4, _020122B0 ; =LAB_02096b30
	mov r1, #2
	ldr r0, [r4, #4]
	ldr r0, [r0, #4]
	bl FUN_02002698
	ldr r0, [r4, #4]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	cmp r0, #1
	movls r0, #3
	movhi r0, #0
	pop {r4, pc}
	.align 2, 0_020122B0: .word LAB_02096b30
	arm_func_end FUN_02012270

	arm_func_start FUN_020122b4
FUN_020122b4: ; 0x020122B4
	push {r0, r1, r2, r3}
	push {r4, lr}
	bl FUN_02012254
	cmp r0, #0
	popne {r4, lr}
	addne sp, sp, #0x10
	bxne lr
	ldr r4, _02012340 ; =LAB_02096b30
	mov r1, #2
	ldr r0, [r4, #4]
	ldr r0, [r0, #4]
	bl FUN_02002698
	ldr r1, [r4, #4]
	add r0, sp, #8
	ldr r1, [r1, #4]
	ldr r3, [sp, #8]
	bic r0, r0, #3
	add r4, r0, #4
	cmp r3, #0
	ldrh ip, [r1]
	mov r0, #3
	popeq {r4, lr}
	addeq sp, sp, #0x10
	bxeq lr
	mov r1, #0
	arm_func_end FUN_020122b4
_02012318:
	add r4, r4, #4
	ldr r2, [r4, #-4]
	cmp r2, ip
	moveq r0, r1
	subs r3, r3, #1
	str r3, [sp, #8]
	bne _02012318
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02012340: .word LAB_02096b30

	arm_func_start FUN_02012344
FUN_02012344: ; 0x02012344
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr r0, _02012718 ; =LAB_02096b30
	cmp r2, #0
	ldr r4, [r0, #4]
	mov sl, r1
	addne sp, sp, #8
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r4, #0x10]
	mov r1, #0x100
	bl FUN_02002698
	ldrh r0, [r4, #0x16]
	cmp r0, #0
	bne _02012388
	ldr r0, [r4, #4]
	mov r1, #0x800
	bl FUN_02002698
	arm_func_end FUN_02012344
_02012388:
	ldr r0, [r4, #0x10]
	cmp sl, r0
	beq _020123A0
	mov r0, sl
	mov r1, #0x100
	bl FUN_02002698
_020123A0:
	ldrh r0, [sl]
	cmp r0, #0x2c
	blo _0201244C
	cmp r0, #0x80
	bne _020123DC
	ldrh r0, [sl, #2]
	cmp r0, #0x13
	bne _020123C4
	bl FUN_02004160
_020123C4:
	ldr r1, [r4, #0xc8]
	cmp r1, #0
	beq _020126D4
_020123D0:
	mov r0, sl
_020123D4:
	blx r1
	b _020126D4
_020123DC:
	cmp r0, #0x82
	bne _0201242C
	ldrh r0, [sl, #6]
	add r1, r4, r0, lsl #2
	ldr r0, [r1, #0xcc]
	cmp r0, #0
	beq _020126D4
	ldr r0, [r1, #0x10c]
	str r0, [sl, #0x1c]
	ldr r0, [r4, #0x14c]
	strh r0, [sl, #0x22]
	ldr r1, [r4, #4]
	ldr r0, [sl, #8]
	ldrh r1, [r1, #0x72]
	bl FUN_02002698
	ldrh r1, [sl, #6]
	mov r0, sl
	add r1, r4, r1, lsl #2
	ldr r1, [r1, #0xcc]
	b _020123D4
_0201242C:
	cmp r0, #0x81
	bne _020126D4
	mov r0, #0xf
	strh r0, [sl]
	ldr r1, [sl, #0x1c]
	cmp r1, #0
	beq _020126D4
	b _020123D0
_0201244C:
	cmp r0, #0xe
	bne _0201248C
	ldrh r0, [sl, #4]
	add r0, r0, #0xf5
	add r0, r0, #0xff00
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #1
	bhi _0201248C
	ldrh r0, [sl, #2]
	cmp r0, #0
	bne _0201248C
	ldr r1, [r4, #4]
	ldr r0, [sl, #8]
	ldrh r1, [r1, #0x72]
	bl FUN_02002698
_0201248C:
	ldrh r1, [sl]
	cmp r1, #4
	cmpne r1, #2
	bne _020124A8
	ldrh r0, [sl, #2]
	cmp r0, #0
	beq _020124C4
_020124A8:
	cmp r1, #3
	beq _020124B8
	cmp r1, #0
	bne _020124C8
_020124B8:
	ldrh r0, [sl, #2]
	cmp r0, #0
	beq _020124C8
_020124C4:
	bl FUN_02012808
_020124C8:
	ldrh r1, [sl]
	cmp r1, #2
	ldrheq r0, [sl, #2]
	cmpeq r0, #0
	add r0, r4, r1, lsl #2
	bne _02012504
	ldr r4, [r0, #0x18]
	bl FUN_02012040
	cmp r4, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	blx r4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02012504:
	ldr r1, [r0, #0x18]
	cmp r1, #0
	beq _0201252C
	mov r0, sl
	blx r1
	ldr r0, _02012718 ; =LAB_02096b30
	ldrh r0, [r0]
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0201252C:
	ldrh r0, [sl]
	cmp r0, #8
	beq _02012540
	cmp r0, #0xc
	bne _020126D4
_02012540:
	cmp r0, #8
	bne _02012574
	add r0, sl, #0xa
	str r0, [sp]
	ldrh r5, [sl, #8]
	ldrh r6, [sl, #0x10]
	ldrh r0, [sl, #0x12]
	add fp, sl, #0x14
	mov r7, #0
	str r0, [sp, #4]
	ldrh r8, [sl, #0x2c]
	ldrh sb, [sl, #0x2e]
	b _020125A4
_02012574:
	cmp r0, #0xc
	bne _020125A4
	ldrh r5, [sl, #8]
	ldrh r7, [sl, #0xa]
	ldrh r0, [sl, #0xc]
	mov r6, #0
	mov fp, r6
	str r0, [sp, #4]
	add r0, sl, #0x10
	ldrh r8, [sl, #0x16]
	ldrh sb, [sl, #0x18]
	str r0, [sp]
_020125A4:
	cmp r5, #7
	cmpne r5, #9
	beq _020125B8
	cmp r5, #0x1a
	bne _020126D4
_020125B8:
	cmp r5, #7
	ldreq r1, [r4, #0x14c]
	mov r0, #1
	orreq r0, r1, r0, lsl r6
	mvnne r0, r0, lsl r6
	ldrne r1, [r4, #0x14c]
	mov r2, #0x44
	andne r0, r1, r0
	str r0, [r4, #0x14c]
	add r1, r4, #0x100
	strh r7, [r1, #0x50]
	ldr r0, _0201271C ; =LAB_02096b90
	mov r1, #0
	bl MemWrite
	ldr r1, _0201271C ; =LAB_02096b90
	mov r2, #0x82
	strh r2, [r1]
	mov r2, #0
	strh r2, [r1, #2]
	strh r5, [r1, #4]
	str r2, [r1, #8]
	str r2, [r1, #0xc]
	strh r2, [r1, #0x10]
	strh r6, [r1, #0x12]
	strh r7, [r1, #0x20]
	ldr r3, [r4, #0x14c]
	ldr r2, _02012720 ; =0x0000FFFF
	strh r3, [r1, #0x22]
	strh r2, [r1, #0x1a]
	ldr r3, [sp, #4]
	ldr r2, _0201271C ; =LAB_02096b90
	ldr r0, [sp]
	strh r3, [r2, #0x3c]
	ldr r1, _02012724 ; =0x02096BA4
	mov r2, #6
	bl _memcpy
	cmp fp, #0
	mov r2, #0x18
	beq _02012664
	ldr r1, _02012728 ; =0x02096BB4
	mov r0, fp
	bl FUN_0200781c
	b _02012670
_02012664:
	ldr r1, _02012728 ; =0x02096BB4
	mov r0, #0
	bl FUN_02007804
_02012670:
	mov r1, r8
	cmp r7, #0
	movne r1, sb
	ldr r0, _0201271C ; =LAB_02096b90
	cmp r7, #0
	ldr r5, _0201271C ; =LAB_02096b90
	strh r1, [r0, #0x40]
	movne sb, r8
	mov r6, #0
	strh sb, [r5, #0x42]
_02012698:
	strh r6, [r5, #6]
	add r2, r4, r6, lsl #2
	ldr r0, [r2, #0xcc]
	cmp r0, #0
	beq _020126C0
	ldr r1, [r2, #0x10c]
	mov r0, r5
	str r1, [r5, #0x1c]
	ldr r1, [r2, #0xcc]
	blx r1
_020126C0:
	add r0, r6, #1
	lsl r0, r0, #0x10
	lsr r6, r0, #0x10
	cmp r6, #0x10
	blo _02012698
_020126D4:
	mov r5, #0x100
	ldr r0, [r4, #0x10]
	mov r1, r5
	bl FUN_02002698
	bl FUN_0201272c
	ldr r0, [r4, #0x10]
	cmp sl, r0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r2, [sl]
	mov r0, sl
	mov r1, r5
	orr r2, r2, #0x8000
	strh r2, [sl]
	bl FUN_020026b4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02012718: .word LAB_02096b30
_0201271C: .word LAB_02096b90
_02012720: .word 0x0000FFFF
_02012724: .word 0x02096BA4
_02012728: .word 0x02096BB4

	arm_func_start FUN_0201272c
FUN_0201272c: ; 0x0201272C
	ldr r2, _02012748 ; =0x02FFFF96
	ldrh r1, [r2]
	tst r1, #1
	ldrne r0, _0201274C ; =0x0000FFFE
	andne r0, r1, r0
	strhne r0, [r2]
	bx lr
	.align 2, 0_02012748: .word 0x02FFFF96
_0201274C: .word 0x0000FFFE
	arm_func_end FUN_0201272c

	arm_func_start FUN_02012750
FUN_02012750: ; 0x02012750
	push {r3, lr}
	bl FUN_02012254
	cmp r0, #0
	movne r0, #0
	ldreq r0, _02012770 ; =LAB_02096b30
	ldreq r0, [r0, #4]
	ldreq r0, [r0, #4]
	pop {r3, pc}
	.align 2, 0_02012770: .word LAB_02096b30
	arm_func_end FUN_02012750

	arm_func_start FUN_02012774
FUN_02012774: ; 0x02012774
	push {r4, lr}
	bl FUN_02003da8
	ldr r1, _020127A0 ; =LAB_02096b30
	ldr r1, [r1, #4]
	cmp r1, #0
	addne r1, r1, #0x100
	ldrhne r4, [r1, #0x50]
	moveq r4, #0
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_020127A0: .word LAB_02096b30
	arm_func_end FUN_02012774

	arm_func_start FUN_020127a4
FUN_020127a4: ; 0x020127A4
	push {r4, lr}
	bl FUN_02003da8
	ldr r1, _020127D0 ; =LAB_02096b30
	ldr r1, [r1, #4]
	cmp r1, #0
	ldrne r4, [r1, #0x14c]
	moveq r4, #0
	bl FUN_02003dbc
	lsl r0, r4, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
	.align 2, 0_020127D0: .word LAB_02096b30
	arm_func_end FUN_020127a4

	arm_func_start FUN_020127d4
FUN_020127d4: ; 0x020127D4
	ldr r1, _020127F8 ; =LAB_0201281c
	ldr r2, _020127FC ; =LAB_02096b30
	ldr r0, _02012800 ; =LAB_02096b38
	str r1, [r2, #8]
	mov r3, #0
	ldr ip, _02012804 ; =LAB_02017584
	mov r1, #0x3e8
	str r3, [r2, #0xc]
	bx ip
	.align 2, 0_020127F8: .word LAB_0201281c
_020127FC: .word LAB_02096b30
_02012800: .word LAB_02096b38
_02012804: .word LAB_02017584
	arm_func_end FUN_020127d4

	arm_func_start FUN_02012808
FUN_02012808: ; 0x02012808
	ldr r0, _02012814 ; =LAB_02096b38
	ldr ip, _02012818 ; =FUN_020175a8
	bx ip
	.align 2, 0_02012814: .word LAB_02096b38
_02012818: .word FUN_020175a8
	arm_func_end FUN_02012808

	arm_func_start LAB_0201281c
LAB_0201281c: ; 0x0201281C
	ldr ip, _02012824 ; =FUN_02004160
	bx ip
	.align 2, 0_02012824: .word FUN_02004160
	arm_func_end LAB_0201281c

	arm_func_start FUN_02012828
FUN_02012828: ; 0x02012828
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_02003da8
	mov r5, r0
	bl FUN_02012254
	movs r4, r0
	beq _02012854
	mov r0, r5
	bl FUN_02003dbc
	mov r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02012828
_02012854:
	bl FUN_02012244
	str r6, [r0, #0xc8]
	mov r0, r5
	bl FUN_02003dbc
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0201286c
FUN_0201286c: ; 0x0201286C
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x44
	movs r5, r1
	mov r6, r0
	mov r4, r2
	beq _020128D4
	mov r7, #0
	add r0, sp, #0
	mov r1, r7
	mov r2, #0x44
	bl MemWrite
	ldr r1, _02012940 ; =0x0000FFFF
	mov r3, #0x82
	mov r2, #0x19
	add r0, sp, #0x14
	strh r3, [sp]
	strh r7, [sp, #2]
	strh r2, [sp, #4]
	strh r6, [sp, #6]
	str r7, [sp, #8]
	str r7, [sp, #0xc]
	strh r7, [sp, #0x10]
	strh r1, [sp, #0x1a]
	str r4, [sp, #0x1c]
	strh r7, [sp, #0x12]
	bl FUN_02003f38
	arm_func_end FUN_0201286c
_020128D4:
	bl FUN_02003da8
	mov r8, r0
	bl FUN_02012254
	movs r7, r0
	beq _020128FC
	mov r0, r8
	bl FUN_02003dbc
	add sp, sp, #0x44
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, pc}
_020128FC:
	bl FUN_02012244
	add r0, r0, r6, lsl #2
	str r5, [r0, #0xcc]
	str r4, [r0, #0x10c]
	cmp r5, #0
	beq _0201292C
	bl FUN_020127a4
	strh r0, [sp, #0x22]
	bl FUN_02012774
	strh r0, [sp, #0x20]
	add r0, sp, #0
	blx r5
_0201292C:
	mov r0, r8
	bl FUN_02003dbc
	mov r0, #0
	add sp, sp, #0x44
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02012940: .word 0x0000FFFF

	arm_func_start FUN_02012944
FUN_02012944: ; 0x02012944
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_02012244
	mov r5, r0
	bl FUN_02012254
	cmp r0, #0
	popne {r4, r5, r6, pc}
	cmp r6, #0
	moveq r0, #6
	popeq {r4, r5, r6, pc}
	mov r4, #0x7d0
	ldr r0, [r5, #4]
	mov r1, r4
	bl FUN_02002698
	ldr r0, [r5, #4]
	mov r1, r6
	mov r2, r4
	bl FUN_020078c8
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02012944

	arm_func_start FUN_02012994
FUN_02012994: ; 0x02012994
	push {r3, r4, r5, lr}
	bl FUN_02012244
	mov r5, r0
	mov r0, #2
	mov r1, #7
	mov r2, #8
	bl FUN_020122b4
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r5, #4]
	mov r4, #4
	mov r1, r4
	add r0, r0, #0xc
	bl FUN_02002698
	ldr r2, [r5, #4]
	ldr r0, [r2, #0xc]
	cmp r0, #1
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r1, r4
	add r0, r2, #0x3c
	bl FUN_02002698
	ldr r0, [r5, #4]
	ldrh r0, [r0, #0x3c]
	add r0, r0, #0x1f
	bic r0, r0, #0x1f
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02012994

	arm_func_start FUN_02012a04
FUN_02012a04: ; 0x02012A04
	push {r4, r5, r6, lr}
	bl FUN_02012244
	mov r5, #2
	mov r4, r0
	mov r0, r5
	mov r1, #7
	mov r2, #8
	bl FUN_020122b4
	cmp r0, #0
	movne r0, #0
	popne {r4, r5, r6, pc}
	ldr r0, [r4, #4]
	mov r1, #4
	add r0, r0, #0xc
	bl FUN_02002698
	ldr r2, [r4, #4]
	ldr r0, [r2, #0xc]
	cmp r0, #1
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r1, r5
	add r0, r2, #0x188
	bl FUN_02002698
	ldr r2, [r4, #4]
	mov r5, #2
	add r0, r2, #0x100
	ldrh r0, [r0, #0x88]
	mov r6, #1
	mov r1, r5
	cmp r0, #0
	add r0, r2, #0x3e
	movne r6, #0
	bl FUN_02002698
	ldr r0, [r4, #4]
	cmp r6, #1
	ldrh r6, [r0, #0x3e]
	addne r0, r6, #0x51
	bicne r0, r0, #0x1f
	lslne r0, r0, #1
	popne {r4, r5, r6, pc}
	mov r1, r5
	add r0, r0, #0xf8
	bl FUN_02002698
	ldr r0, [r4, #4]
	add r1, r6, #0xc
	ldrh r0, [r0, #0xf8]
	mul r0, r1, r0
	add r0, r0, #0x29
	bic r0, r0, #0x1f
	lsl r0, r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02012a04

	arm_func_start FUN_02012ad0
FUN_02012ad0: ; 0x02012AD0
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x3c
	mov r5, r0
	mov r4, r1
	bl FUN_02012244
	mov r6, r0
	bl FUN_02012254
	cmp r0, #0
	addne sp, sp, #0x3c
	movne r0, #0
	popne {r3, r4, r5, r6, pc}
	cmp r4, #1
	blo _02012B0C
	cmp r4, #0xf
	bls _02012B18
	arm_func_end FUN_02012ad0
_02012B0C:
	add sp, sp, #0x3c
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_02012B18:
	ldr r0, [r6, #4]
	mov r1, #2
	add r0, r0, #0x82
	add r0, r0, #0x100
	bl FUN_02002698
	ldr r0, [r6, #4]
	mov r1, #1
	add r0, r0, #0x100
	ldrh r0, [r0, #0x82]
	tst r0, r1, lsl r4
	addeq sp, sp, #0x3c
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	ldrh r0, [r5, #4]
	cmp r0, #0
	beq _02012B60
	cmp r0, #0xf
	bls _02012B6C
_02012B60:
	add sp, sp, #0x3c
	mov r0, #0
	pop {r3, r4, r5, r6, pc}
_02012B6C:
	add r0, r5, #0xa
	str r0, [sp]
	mov r6, #0
	add r3, sp, #0
_02012B7C:
	ldr r0, [r3, r6, lsl #2]
	ldrh r1, [r0, #4]
	cmp r4, r1
	addeq sp, sp, #0x3c
	popeq {r3, r4, r5, r6, pc}
	add r6, r6, #1
	add r1, r3, r6, lsl #2
	ldrh r0, [r5, #4]
	ldrh r2, [r5, #6]
	ldr r1, [r1, #-4]
	cmp r6, r0
	add r0, r2, r1
	str r0, [r3, r6, lsl #2]
	blt _02012B7C
	mov r0, #0
	add sp, sp, #0x3c
	pop {r3, r4, r5, r6, pc}

	arm_func_start FUN_02012bc0
FUN_02012bc0: ; 0x02012BC0
	push {r3, lr}
	bl FUN_02012254
	cmp r0, #0
	movne r0, #0x8000
	ldreq r0, _02012BDC ; =0x02FFFCFA
	ldrheq r0, [r0]
	pop {r3, pc}
	.align 2, 0_02012BDC: .word 0x02FFFCFA
	arm_func_end FUN_02012bc0

	arm_func_start FUN_02012be0
FUN_02012be0: ; 0x02012BE0
	push {r3, r4, r5, lr}
	bl FUN_02012244
	mov r5, r0
	bl FUN_02012254
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #2
	ldr r0, [r5, #4]
	mov r1, r4
	bl FUN_02002698
	ldr r1, [r5, #4]
	ldrh r0, [r1]
	cmp r0, #9
	beq _02012C2C
	cmp r0, #0xa
	cmpne r0, #0xb
	beq _02012C54
	b _02012C6C
	arm_func_end FUN_02012be0
_02012C2C:
	add r0, r1, #0x82
	mov r1, r4
	add r0, r0, #0x100
	bl FUN_02002698
	ldr r1, [r5, #4]
	add r0, r1, #0x100
	ldrh r0, [r0, #0x82]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
_02012C54:
	add r0, r1, #0xbc
	mov r1, #2
	bl FUN_02002698
	ldr r0, [r5, #4]
	ldrh r0, [r0, #0xbc]
	pop {r3, r4, r5, pc}
_02012C6C:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02012c74
FUN_02012c74: ; 0x02012C74
	push {r4, lr}
	sub sp, sp, #8
	add r4, sp, #0
	mov r0, r4
	bl FUN_02003f38
	mov r2, #0
	mov r1, r2
	arm_func_end FUN_02012c74
_02012C90:
	ldrb r0, [r4, r2]
	add r2, r2, #1
	cmp r2, #6
	add r0, r1, r0
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	blt _02012C90
	ldr r0, _02012D00 ; =0x02FFFC3C
	ldr ip, _02012D04 ; =0x66666667
	ldr r0, [r0]
	mov r3, #0x14
	lsl r0, r0, #0x10
	add r0, r1, r0, lsr #16
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	rsb r0, r0, r0, lsl #3
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	lsr r1, r2, #0x1f
	smull r2, lr, ip, r2
	add lr, r1, lr, asr #3
	smull r1, r2, r3, lr
	rsb lr, r1, r0, lsr #16
	add r0, lr, #0xc8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0_02012D00: .word 0x02FFFC3C
_02012D04: .word 0x66666667

	arm_func_start FUN_02012d08
FUN_02012d08: ; 0x02012D08
	push {r4, lr}
	sub sp, sp, #8
	add r4, sp, #0
	mov r0, r4
	bl FUN_02003f38
	mov r1, #0
	mov r2, r1
	arm_func_end FUN_02012d08
_02012D24:
	ldrb r0, [r4, r1]
	add r1, r1, #1
	cmp r1, #6
	add r0, r2, r0
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	blt _02012D24
	ldr r0, _02012D98 ; =0x02FFFC3C
	mov r1, #0xd
	ldr r0, [r0]
	ldr r3, _02012D9C ; =0x66666667
	lsl r0, r0, #0x10
	add r0, r2, r0, lsr #16
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	mul r0, r2, r1
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	lsr r1, r2, #0x1f
	smull r2, ip, r3, r2
	add ip, r1, ip, asr #2
	mov r3, #0xa
	smull r1, r2, r3, ip
	rsb ip, r1, r0, lsr #16
	add r0, ip, #0x1e
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0_02012D98: .word 0x02FFFC3C
_02012D9C: .word 0x66666667

	arm_func_start FUN_02012da0
FUN_02012da0: ; 0x02012DA0
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x84
	ldrh r2, [r1, #0x3c]
	mov lr, r0
	cmp r2, #0
	beq _02012DE8
	mov r0, #0
	add r5, sp, #0
	strb r0, [sp]
	mov r4, #8
	arm_func_end FUN_02012da0
_02012DC8:
	ldm r5!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	subs r4, r4, #1
	bne _02012DC8
	ldr r0, [r5]
	add sp, sp, #0x84
	str r0, [lr]
	pop {r4, r5, r6, r7, pc}
_02012DE8:
	ldrh r0, [r1, #0x3e]
	strb r0, [sp]
	ands r0, r0, #0xff
	bne _02012E20
	add r5, sp, #0
	mov r4, #8
_02012E00:
	ldm r5!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	subs r4, r4, #1
	bne _02012E00
	ldr r0, [r5]
	add sp, sp, #0x84
	str r0, [lr]
	pop {r4, r5, r6, r7, pc}
_02012E20:
	ldrh r2, [r1]
	cmp r0, #0x10
	movhi r0, #0x10
	strbhi r0, [sp]
	ldrb r0, [sp]
	lsl r2, r2, #1
	sub r4, r2, #0x40
	mov r3, #0
	cmp r0, #0
	mov r2, r3
	add r0, r1, #0x40
	lsl r4, r4, #0x10
	ble _02012ED0
	add ip, sp, #0
_02012E58:
	ldrb r5, [r0, #1]
	ldrb r7, [r0]
	add r6, ip, r2, lsl #3
	add r1, r5, #2
	lsl r1, r1, #0x10
	add r3, r3, r1, lsr #16
	strb r7, [r6, #4]
	lsl r3, r3, #0x10
	lsr r3, r3, #0x10
	strb r5, [r6, #5]
	add r5, r0, #2
	str r5, [r6, #8]
	cmp r3, r4, lsr #16
	bls _02012EBC
	mov r0, #0
	strb r0, [sp]
	mov r4, #8
_02012E9C:
	ldm ip!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	subs r4, r4, #1
	bne _02012E9C
	ldr r0, [ip]
	add sp, sp, #0x84
	str r0, [lr]
	pop {r4, r5, r6, r7, pc}
_02012EBC:
	ldrb r5, [sp]
	add r2, r2, #1
	add r0, r0, r1, lsr #16
	cmp r2, r5
	blt _02012E58
_02012ED0:
	add ip, sp, #0
	mov r4, #8
_02012ED8:
	ldm ip!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	subs r4, r4, #1
	bne _02012ED8
	ldr r0, [ip]
	str r0, [lr]
	add sp, sp, #0x84
	pop {r4, r5, r6, r7, pc}

	arm_func_start FUN_02012ef8
FUN_02012ef8: ; 0x02012EF8
	push {r3, r4, lr}
	sub sp, sp, #0xc
	ldr r4, _02012F64 ; =0x0208EE98
	ldr r0, [r4]
	cmp r0, #0x10000
	bne _02012F3C
	bl FUN_0200adc4
	add r0, sp, #0
	bl FUN_0200af48
	cmp r0, #0
	bne _02012F3C
	ldr r1, [sp, #8]
	ldr r0, [sp, #4]
	add r0, r1, r0, lsl #8
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [r4]
	arm_func_end FUN_02012ef8
_02012F3C:
	ldr r1, _02012F64 ; =0x0208EE98
	ldr r0, [r1]
	add r0, r0, #1
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	lsl r0, r2, #0x10
	str r2, [r1]
	lsr r0, r0, #0x10
	add sp, sp, #0xc
	pop {r3, r4, pc}
	.align 2, 0_02012F64: .word 0x0208EE98

	arm_func_start FUN_02012f68
FUN_02012f68: ; 0x02012F68
	ldr ip, _02012F74 ; =LAB_02012f78
	mov r1, #0
	bx ip
	.align 2, 0_02012F74: .word LAB_02012f78
	arm_func_end FUN_02012f68

	arm_func_start LAB_02012f78
LAB_02012f78: ; 0x02012F78
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r6, r0
	mov r5, r1
	mov r0, #1
	mov r1, #0
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #8
	popne {r4, r5, r6, pc}
	mov r4, #3
	mov r0, r4
	mov r1, r6
	bl FUN_020120b0
	bl FUN_020127d4
	bl FUN_02012244
	mov r3, r0
	ldr r2, [r3, #0x10]
	mov r0, r4
	stm sp, {r2, r5}
	mov r1, #4
	ldm r3, {r2, r3}
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	arm_func_end LAB_02012f78

	arm_func_start FUN_02012fe4
FUN_02012fe4: ; 0x02012FE4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, #1
	mov r1, r0
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #4
	mov r0, r4
	mov r1, r5
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02012fe4

	arm_func_start FUN_02013028
FUN_02013028: ; 0x02013028
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, #1
	mov r1, r0
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #5
	mov r0, r4
	mov r1, r5
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02013028

	arm_func_start FUN_0201306c
FUN_0201306c: ; 0x0201306C
	push {r4, r5, r6, lr}
	mov r5, #2
	mov r6, r0
	mov r1, r5
	mov r0, #1
	bl FUN_020122b4
	cmp r0, #0
	popne {r4, r5, r6, pc}
	mov r4, #6
	mov r0, r4
	mov r1, r6
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, r5
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0201306c

	arm_func_start FUN_020130b4
FUN_020130b4: ; 0x020130B4
	ldr ip, _020130C0 ; =LAB_020130c4
	mov r3, #0
	bx ip
	.align 2, 0_020130C0: .word LAB_020130c4
	arm_func_end FUN_020130b4

	arm_func_start LAB_020130c4
LAB_020130c4: ; 0x020130C4
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r6, r1
	mov r1, r2
	mov r5, r3
	bl FUN_02011dec
	cmp r0, #0
	addne sp, sp, #8
	popne {r4, r5, r6, pc}
	mov r4, #0
	mov r0, r4
	mov r1, r6
	bl FUN_020120b0
	bl FUN_020127d4
	bl FUN_02012244
	mov r3, r0
	ldr r2, [r3, #0x10]
	mov r0, r4
	stm sp, {r2, r5}
	mov r1, #4
	ldm r3, {r2, r3}
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	arm_func_end LAB_020130c4

	arm_func_start FUN_0201312c
FUN_0201312c: ; 0x0201312C
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02012270
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #1
	mov r0, r4
	mov r1, r5
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0201312c

	arm_func_start FUN_02013168
FUN_02013168: ; 0x02013168
	push {r3, r4, r5, lr}
	mov r4, #2
	mov r5, r0
	mov r1, r4
	mov r0, #1
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r0, r4
	mov r1, r5
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02013168

	arm_func_start FUN_020131ac
FUN_020131ac: ; 0x020131AC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r0, #1
	mov r1, #2
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	cmp r4, #0
	moveq r0, #6
	popeq {r3, r4, r5, pc}
	ldrh r0, [r4, #4]
	cmp r0, #0
	beq _020131F4
	ldr r0, [r4]
	cmp r0, #0
	moveq r0, #6
	popeq {r3, r4, r5, pc}
	arm_func_end FUN_020131ac
_020131F4:
	ldrh r1, [r4, #0x14]
	ldrh r0, [r4, #0x34]
	mov r2, #0x2a
	cmp r1, #0
	moveq r2, #0
	add r0, r0, r2
	cmp r0, #0x200
	bgt _02013230
	ldrh r0, [r4, #0x36]
	cmp r1, #0
	movne r1, #6
	moveq r1, #0
	add r0, r0, r1
	cmp r0, #0x200
	ble _02013238
_02013230:
	mov r0, #6
	pop {r3, r4, r5, pc}
_02013238:
	mov r0, r4
	bl FUN_02013288
	mov r1, r5
	mov r0, #7
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0x40
	bl FUN_020026b4
	ldrh r1, [r4, #4]
	cmp r1, #0
	beq _0201326C
	ldr r0, [r4]
	bl FUN_020026b4
_0201326C:
	mov r2, r4
	mov r0, #7
	mov r1, #1
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02013288
FUN_02013288: ; 0x02013288
	ldrh r1, [r0, #4]
	cmp r1, #0x70
	movhi r0, #0
	bxhi lr
	ldrh r1, [r0, #0x18]
	cmp r1, #0xa
	blo _020132AC
	cmp r1, #0x3e8
	bls _020132B4
	arm_func_end FUN_02013288
_020132AC:
	mov r0, #0
	bx lr
_020132B4:
	ldrh r0, [r0, #0x32]
	cmp r0, #1
	blo _020132C8
	cmp r0, #0xe
	bls _020132D0
_020132C8:
	mov r0, #0
	bx lr
_020132D0:
	mov r0, #1
	bx lr

	arm_func_start FUN_020132d8
FUN_020132d8: ; 0x020132D8
	push {r4, r5, r6, r7, r8, lr}
	mov r6, #1
	mov r8, r0
	mov r5, #2
	mov r7, r1
	mov r0, r6
	mov r1, r5
	bl FUN_020122b4
	cmp r0, #0
	popne {r4, r5, r6, r7, r8, pc}
	bl FUN_02012244
	add r1, r0, #0x100
	mov r2, #0
	strh r2, [r1, #0x50]
	mov r4, #8
	str r2, [r0, #0x14c]
	mov r0, r4
	mov r1, r8
	bl FUN_020120b0
	mov r0, r4
	mov r1, r6
	mov r2, r7
	bl FUN_02012128
	cmp r0, #0
	moveq r0, r5
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020132d8

	arm_func_start FUN_02013340
FUN_02013340: ; 0x02013340
	ldr ip, _0201334C ; =FUN_020132d8
	mov r1, #1
	bx ip
	.align 2, 0_0201334C: .word FUN_020132d8
	arm_func_end FUN_02013340

	arm_func_start FUN_02013350
FUN_02013350: ; 0x02013350
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, #1
	mov r1, #7
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #9
	mov r0, r4
	mov r1, r5
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02013350

	arm_func_start FUN_02013394
FUN_02013394: ; 0x02013394
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x3c
	mov r5, r0
	mov r0, #3
	mov r4, r1
	mov r2, r0
	mov r1, #2
	mov r3, #5
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0x3c
	popne {r3, r4, r5, r6, pc}
	cmp r4, #0
	addeq sp, sp, #0x3c
	moveq r0, #6
	popeq {r3, r4, r5, r6, pc}
	ldr r0, [r4]
	cmp r0, #0
	addeq sp, sp, #0x3c
	moveq r0, #6
	popeq {r3, r4, r5, r6, pc}
	ldrh r0, [r4, #4]
	cmp r0, #0x400
	addhi sp, sp, #0x3c
	movhi r0, #6
	pophi {r3, r4, r5, r6, pc}
	ldrh r0, [r4, #0x12]
	cmp r0, #0x20
	addhi sp, sp, #0x3c
	movhi r0, #6
	pophi {r3, r4, r5, r6, pc}
	ldrh r0, [r4, #0x10]
	cmp r0, #0
	cmpne r0, #1
	cmpne r0, #2
	cmpne r0, #3
	addne sp, sp, #0x3c
	movne r0, #6
	popne {r3, r4, r5, r6, pc}
	add r0, r0, #0xfe
	add r0, r0, #0xff00
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #1
	bhi _0201345C
	ldrh r0, [r4, #0x34]
	cmp r0, #0x20
	addhi sp, sp, #0x3c
	movhi r0, #6
	pophi {r3, r4, r5, r6, pc}
	arm_func_end FUN_02013394
_0201345C:
	mov r6, #0x26
	mov r0, r6
	mov r1, r5
	bl FUN_020120b0
	ldrh lr, [r4, #6]
	ldrh r5, [r4, #4]
	ldrh r3, [r4, #8]
	ldr ip, [r4]
	add r1, sp, #0xc
	add r0, r4, #0xa
	mov r2, #6
	strh r6, [sp]
	strh lr, [sp, #2]
	str ip, [sp, #4]
	strh r5, [sp, #8]
	strh r3, [sp, #0xa]
	bl _memcpy
	ldrh ip, [r4, #0x10]
	ldrh r5, [r4, #0x34]
	ldrh r3, [r4, #0x12]
	add r1, sp, #0x16
	add r0, r4, #0x14
	mov r2, #0x20
	strh ip, [sp, #0x12]
	strh r5, [sp, #0x36]
	strh r3, [sp, #0x14]
	bl _memcpy
	add r0, sp, #0
	mov r1, #0x3c
	bl FUN_020121d4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x3c
	pop {r3, r4, r5, r6, pc}

	arm_func_start FUN_020134e4
FUN_020134e4: ; 0x020134E4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, #1
	mov r1, #5
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #0xb
	mov r0, r4
	mov r1, r5
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020134e4

	arm_func_start FUN_02013528
FUN_02013528: ; 0x02013528
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x28
	mov r7, r0
	mov r6, r1
	mov r0, #1
	mov r1, #2
	mov r5, r2
	mov r4, r3
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0x28
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r6, #0
	addeq sp, sp, #0x28
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldrh r1, [r6]
	mov r0, r6
	lsl r1, r1, #1
	bl FUN_020026b4
	bl FUN_02012244
	add r1, r0, #0x100
	mov sb, #0
	strh sb, [r1, #0x50]
	mov r8, #0xc
	str sb, [r0, #0x14c]
	mov r0, r8
	mov r1, r7
	bl FUN_020120b0
	strh r8, [sp]
	str r6, [sp, #4]
	cmp r5, #0
	mov r2, #0x18
	beq _020135C0
	add r1, sp, #8
	mov r0, r5
	bl _memcpy
	b _020135CC
	arm_func_end FUN_02013528
_020135C0:
	add r0, sp, #8
	mov r1, sb
	bl MemWrite
_020135CC:
	ldrh r2, [sp, #0x48]
	add r0, sp, #0
	mov r1, #0x28
	str r4, [sp, #0x20]
	strh r2, [sp, #0x26]
	bl FUN_020121d4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_020135f4
FUN_020135f4: ; 0x020135F4
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r5, r0
	mov r4, r1
	bl FUN_02012244
	mov r1, #0xa
	mov r7, r0
	str r1, [sp]
	mov r6, #0xb
	mov r0, #5
	mov r1, #7
	mov r2, #9
	mov r3, #8
	str r6, [sp, #4]
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, r6, r7, pc}
	ldr r1, [r7, #4]
	ldrh r0, [r1]
	cmp r0, #7
	beq _02013654
	cmp r0, #9
	bne _020136A4
	arm_func_end FUN_020135f4
_02013654:
	cmp r4, #1
	blo _02013664
	cmp r4, #0xf
	bls _02013670
_02013664:
	add sp, sp, #8
	mov r0, #6
	pop {r3, r4, r5, r6, r7, pc}
_02013670:
	add r0, r1, #0x82
	add r0, r0, #0x100
	mov r1, #2
	bl FUN_02002698
	ldr r0, [r7, #4]
	mov r1, #1
	add r0, r0, #0x100
	ldrh r0, [r0, #0x82]
	tst r0, r1, lsl r4
	bne _020136B4
	add sp, sp, #8
	mov r0, #7
	pop {r3, r4, r5, r6, r7, pc}
_020136A4:
	cmp r4, #0
	addne sp, sp, #8
	movne r0, #6
	popne {r3, r4, r5, r6, r7, pc}
_020136B4:
	mov r6, #0xd
	mov r0, r6
	mov r1, r5
	bl FUN_020120b0
	mov r1, #1
	lsl r2, r1, r4
	mov r0, r6
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020136e4
FUN_020136e4: ; 0x020136E4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x40
	mov r8, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_02012244
	mov sb, #2
	ldr r7, [r0, #4]
	mov r0, sb
	mov r1, #7
	mov r2, #8
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0x40
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r1, sb
	add r0, r7, #0x188
	bl FUN_02002698
	mov r1, sb
	add r0, r7, #0xc6
	bl FUN_02002698
	add r0, r7, #0x100
	ldrh r0, [r0, #0x88]
	cmp r0, #0
	ldrhne r0, [r7, #0xc6]
	cmpne r0, #1
	addne sp, sp, #0x40
	movne r0, #3
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	add r0, r7, #0xc
	mov r1, #4
	bl FUN_02002698
	ldr r0, [r7, #0xc]
	cmp r0, #1
	addeq sp, sp, #0x40
	moveq r0, #3
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	tst r5, #0x3f
	addne sp, sp, #0x40
	movne r0, #6
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrh sb, [sp, #0x60]
	tst sb, #0x1f
	addne sp, sp, #0x40
	movne r0, #6
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	add r0, r7, #0x9c
	mov r1, #2
	bl FUN_02002698
	ldrh r0, [r7, #0x9c]
	cmp r0, #0
	bne _020137E0
	bl FUN_02012a04
	cmp r5, r0
	addlt sp, sp, #0x40
	movlt r0, #6
	poplt {r4, r5, r6, r7, r8, sb, sl, pc}
	bl FUN_02012994
	cmp sb, r0
	addlt sp, sp, #0x40
	movlt r0, #6
	poplt {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020136e4
_020137E0:
	mov sl, #0xe
	mov r0, sl
	mov r1, r8
	bl FUN_020120b0
	add r8, sp, #0
	mov sb, #0
	mov r7, #0x40
	mov r0, sb
	mov r1, r8
	mov r2, r7
	bl FUN_02007838
	ldrh r3, [sp, #0x60]
	lsr r5, r5, #1
	add r1, sp, #0x14
	mov r0, sb
	mov r2, #0x1c
	strh sl, [sp]
	str r6, [sp, #4]
	str r5, [sp, #8]
	str r4, [sp, #0xc]
	str r3, [sp, #0x10]
	bl FUN_02007838
	ldr r0, [sp, #0x64]
	add r1, sp, #0x30
	mov r2, #0x10
	bl FUN_0200784c
	mov r0, r8
	mov r1, r7
	bl FUN_020121d4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02013864
FUN_02013864: ; 0x02013864
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x18
	mov r7, r1
	mov r8, r0
	mov r6, r2
	add r1, sp, #8
	mov r0, #0
	mov r2, #0x10
	mov r5, r3
	ldr r4, [sp, #0x34]
	bl FUN_02007838
	ldr r1, [sp, #0x48]
	ldrh ip, [sp, #0x38]
	ldr r0, [sp, #0x44]
	ldr lr, _02013904 ; =0x00001E03
	ldr r3, [sp, #0x3c]
	ldr r2, [sp, #0x40]
	strb r1, [sp, #0x16]
	cmp r0, #0
	cmpne r4, #0
	strb r3, [sp, #0x14]
	strb r2, [sp, #0x15]
	ldrh r1, [sp, #0x30]
	str lr, [sp, #8]
	orrne r0, lr, #4
	strne r0, [sp, #8]
	strh ip, [sp, #0x12]
	strh r4, [sp, #0xc]
	strh r4, [sp, #0xe]
	strhne r4, [sp, #0x10]
	str r1, [sp]
	add r4, sp, #8
	mov r0, r8
	mov r1, r7
	mov r2, r6
	mov r3, r5
	str r4, [sp, #4]
	bl FUN_020136e4
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02013904: .word 0x00001E03
	arm_func_end FUN_02013864

	arm_func_start FUN_02013908
FUN_02013908: ; 0x02013908
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x18
	add r4, sp, #8
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r1, r4
	mov r0, #0
	mov r2, #0x10
	mov r5, r3
	bl FUN_02007838
	ldrh ip, [sp, #0x34]
	mov r0, r8
	mov r1, r7
	strh ip, [sp, #0xc]
	strh ip, [sp, #0xe]
	mov ip, #3
	str ip, [sp, #8]
	ldrh ip, [sp, #0x30]
	mov r2, r6
	mov r3, r5
	str ip, [sp]
	str r4, [sp, #4]
	bl FUN_020136e4
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02013908

	arm_func_start FUN_02013970
FUN_02013970: ; 0x02013970
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x20
	mov r4, r0
	mov r7, r1
	bl FUN_02012244
	bl FUN_02012254
	cmp r0, #0
	addne sp, sp, #0x20
	popne {r3, r4, r5, r6, r7, pc}
	mov r6, #0x23
	mov r0, r6
	mov r1, r4
	bl FUN_020120b0
	add r5, sp, #0
	mov r4, #0x20
	mov r1, r5
	mov r2, r4
	mov r0, #0
	bl FUN_02007838
	add r1, sp, #4
	mov r0, r7
	mov r2, #0x1c
	strh r6, [sp]
	bl FUN_0200784c
	mov r0, r5
	mov r1, r4
	bl FUN_020121d4
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x20
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02013970

	arm_func_start FUN_020139ec
FUN_020139ec: ; 0x020139EC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x1c
	add r4, sp, #0
	mov r6, r0
	mov r5, r1
	mov r1, r4
	mov r0, #0
	mov r2, #0x1c
	bl FUN_02007838
	mov r2, #8
	mov r0, r6
	mov r1, r4
	str r2, [sp]
	strh r5, [sp, #0xa]
	bl FUN_02013970
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020139ec

	arm_func_start FUN_02013a30
FUN_02013a30: ; 0x02013A30
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x1c
	add r4, sp, #0
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r1, r4
	mov r0, #0
	mov r2, #0x1c
	bl FUN_02007838
	mov r2, #0x180
	mov r0, r7
	mov r1, r4
	str r2, [sp]
	strh r6, [sp, #0x12]
	strh r5, [sp, #0x14]
	bl FUN_02013970
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	arm_func_end FUN_02013a30

	arm_func_start FUN_02013a7c
FUN_02013a7c: ; 0x02013A7C
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x14
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	mov sl, #1
	bl FUN_02012244
	mov sb, #2
	ldr r4, [r0, #4]
	mov r0, sb
	mov r1, #9
	mov r2, #0xa
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0x14
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r1, sb
	add r0, r4, #0x188
	bl FUN_02002698
	add r0, r4, #0x100
	ldrh r0, [r0, #0x88]
	cmp r0, #0
	bne _02013B00
	add r0, r4, #0x82
	mov r1, sb
	add r0, r0, #0x100
	bl FUN_02002698
	add r2, r4, #0x100
	mov r1, sb
	add r0, r4, #0x86
	ldrh sl, [r2, #0x82]
	bl FUN_02002698
	arm_func_end FUN_02013a7c
_02013B00:
	cmp r6, #0
	addeq sp, sp, #0x14
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp sl, #0
	addeq sp, sp, #0x14
	moveq r0, #7
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov sb, #2
	mov r1, sb
	add r0, r4, #0x7c
	bl FUN_02002698
	ldr r0, [r4, #0x7c]
	cmp r6, r0
	addeq sp, sp, #0x14
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r5, #0x200
	addhi sp, sp, #0x14
	movhi r0, #6
	pophi {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r5, #0
	addeq sp, sp, #0x14
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_020026b4
	ldrh r2, [sp, #0x38]
	ldrh r1, [sp, #0x3c]
	ldrh r0, [sp, #0x40]
	str r2, [sp]
	str r1, [sp, #4]
	str r0, [sp, #8]
	str r8, [sp, #0xc]
	mov r2, r6
	mov r3, r5
	mov r0, #0xf
	mov r1, #7
	str r7, [sp, #0x10]
	bl FUN_02012128
	cmp r0, #0
	moveq r0, sb
	add sp, sp, #0x14
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02013bb4
FUN_02013bb4: ; 0x02013BB4
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_02012244
	mov r5, #2
	mov r4, r0
	mov r0, r5
	mov r1, #9
	mov r2, #0xa
	bl FUN_020122b4
	cmp r0, #0
	popne {r4, r5, r6, pc}
	ldr r0, [r4, #4]
	mov r1, #4
	add r0, r0, #0xc
	bl FUN_02002698
	ldr r0, [r4, #4]
	ldr r0, [r0, #0xc]
	cmp r0, #0
	moveq r0, #3
	popeq {r4, r5, r6, pc}
	mov r4, #0x10
	mov r0, r4
	mov r1, r6
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, r5
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02013bb4

	arm_func_start FUN_02013c2c
FUN_02013c2c: ; 0x02013C2C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02012244
	mov r7, r0
	mov r0, #1
	mov r1, #8
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, [r7, #4]
	mov r1, #4
	add r0, r0, #0x10
	bl FUN_02002698
	ldr r0, [r7, #4]
	ldr r0, [r0, #0x10]
	cmp r0, #1
	moveq r0, #3
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r4, #0x10
	movlo r0, #6
	poplo {r3, r4, r5, r6, r7, pc}
	cmp r5, #0
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_020026b4
	mov r7, #0x11
	mov r0, r7
	mov r1, r6
	bl FUN_020120b0
	mov r6, #2
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	bl FUN_02012128
	cmp r0, #0
	moveq r0, r6
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02013c2c

	arm_func_start FUN_02013cd4
FUN_02013cd4: ; 0x02013CD4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x10
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_02012244
	mov sb, r0
	mov r0, #1
	mov r1, #0xb
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sb, #4]
	mov r4, #4
	mov r1, r4
	add r0, r0, #0x10
	bl FUN_02002698
	ldr r0, [sb, #4]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #3
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r4, #0x5e0
	cmp r5, r0
	addhi sp, sp, #0x10
	movhi r0, #6
	pophi {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_020026b4
	mov sb, #0x12
	mov r0, sb
	mov r1, r8
	bl FUN_020120b0
	add r1, sp, #8
	mov r0, r7
	mov r2, #6
	bl _memcpy
	str r6, [sp]
	str r5, [sp, #4]
	ldr r2, [sp, #8]
	ldr r3, [sp, #0xc]
	mov r0, sb
	mov r1, r4
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02013cd4

	arm_func_start FUN_02013da4
FUN_02013da4: ; 0x02013DA4
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02012244
	mov r4, r0
	mov r0, #1
	mov r1, #0xb
	bl FUN_020122b4
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r4, #4]
	mov r1, #4
	add r0, r0, #0x10
	bl FUN_02002698
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	moveq r0, #3
	popeq {r3, r4, r5, pc}
	mov r4, #0x13
	mov r0, r4
	mov r1, r5
	bl FUN_020120b0
	mov r0, r4
	mov r1, #0
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02013da4

	arm_func_start FUN_02013e14
FUN_02013e14: ; 0x02013E14
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	mov sb, r1
	mov r6, r2
	mov r0, #2
	mov r1, #9
	mov r2, #0xa
	mov r5, r3
	mov r8, #1
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sb, #0x10
	addhs sp, sp, #0xc
	movhs r0, #6
	pophs {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r6, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_02012774
	movs fp, r0
	bne _02013E90
	bl FUN_020127a4
	mov r8, r0
	arm_func_end FUN_02013e14
_02013E90:
	mov r4, #0
	mov r0, r4
	mov r1, sl
	mov r2, #0x820
	bl FUN_0200787c
	add r0, sl, #0x800
	ldr r1, [sp, #0x30]
	mov r7, #1
	cmp r1, #0
	strh r4, [r0, #8]
	strh r4, [r0, #0xa]
	strh r4, [r0, #0xc]
	strh r4, [r0, #0xe]
	strh r5, [r0, #0x10]
	strh sb, [r0, #0x16]
	lsl r0, r7, fp
	lsl r0, r0, #0x10
	movne r4, #1
	add r1, sl, #0x800
	orr r0, r6, r0, lsr #16
	strh r4, [r1, #0x18]
	strh r0, [r1, #0xe]
	bl FUN_02009d28
	add r3, sl, #0x800
	mul r1, r5, r0
	strh r1, [r3, #0x14]
	ldrh r1, [r3, #0x14]
	strh r0, [r3, #0x12]
	cmp r1, #0x1fc
	movhi r0, #0
	strhhi r0, [r3, #0xe]
	addhi sp, sp, #0xc
	movhi r0, #6
	pophi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, r1, #4
	strh r0, [r3, #0x14]
	strh r7, [r3, #0x1c]
	cmp fp, #0
	bne _02014020
	orr r4, r8, #1
	mov r2, #0
_02013F34:
	ldrh r1, [r3, #0xe]
	lsl r0, r2, #9
	add r2, r2, #1
	and r1, r1, r4
	strh r1, [sl, r0]
	cmp r2, #4
	blt _02013F34
	ldr r1, _02014044 ; =FUN_020144a8
	mov r0, sb
	mov r2, sl
	bl FUN_0201286c
	mov sb, #0
	add r4, sl, #0x800
	mov fp, #2
	ldr r6, _02014048 ; =FUN_020143d0
	ldr r5, _0201404C ; =0x0000FFFF
	b _02014004
_02013F78:
	ldrh r2, [r4, #8]
	ldrh r1, [r4, #0xe]
	mov r0, r6
	add r2, r2, #1
	and r1, r1, r8
	and r2, r2, #3
	lsl r1, r1, #0x10
	strh r2, [r4, #8]
	lsr r1, r1, #0x10
	str r1, [sp]
	ldrh r3, [r4, #0x16]
	mov r1, sl
	add r2, sl, sb, lsl #9
	stmib sp, {r3, r7}
	ldrh r3, [r4, #0x14]
	bl FUN_02013a7c
	cmp r0, #7
	bne _02013FE0
	add r0, sl, sb, lsl #1
	add r0, r0, #0x800
	strh r5, [r0]
	ldrh r0, [r4, #0xa]
	add r0, r0, #1
	and r0, r0, #3
	strh r0, [r4, #0xa]
	b _02014000
_02013FE0:
	cmp r0, #0
	cmpne r0, #2
	addne r1, sl, #0x800
	movne r2, #5
	strhne r2, [r1, #0x1c]
	addne sp, sp, #0xc
	movne r0, r7
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02014000:
	add sb, sb, #1
_02014004:
	ldrh r0, [r4, #0x18]
	cmp r0, #1
	movne r0, r7
	moveq r0, fp
	cmp sb, r0
	blt _02013F78
	b _02014038
_02014020:
	ldr r1, _02014050 ; =FUN_020145dc
	mov r4, #3
	mov r0, sb
	mov r2, sl
	strh r4, [r3, #0xa]
	bl FUN_0201286c
_02014038:
	mov r0, #0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02014044: .word FUN_020144a8
_02014048: .word FUN_020143d0
_0201404C: .word 0x0000FFFF
_02014050: .word FUN_020145dc

	arm_func_start FUN_02014054
FUN_02014054: ; 0x02014054
	push {r3, r4, r5, lr}
	movs r5, r0
	moveq r0, #6
	popeq {r3, r4, r5, pc}
	add r0, r5, #0x800
	ldrh r1, [r0, #0xe]
	cmp r1, #0
	moveq r0, #3
	popeq {r3, r4, r5, pc}
	ldrh r0, [r0, #0x16]
	mov r4, #0
	mov r1, r4
	mov r2, r4
	bl FUN_0201286c
	add r1, r5, #0x800
	mov r0, r4
	strh r4, [r1, #0xe]
	strh r4, [r1, #0x1c]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02014054

	arm_func_start FUN_020140a0
FUN_020140a0: ; 0x020140A0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	mov sl, r0
	mov sb, r1
	mov r8, r2
	mov r0, #2
	mov r1, #9
	mov r2, #0xa
	mov r5, #0
	mov fp, #1
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, #0
	addeq sp, sp, #0x10
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sb, #0
	addeq sp, sp, #0x10
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r8, #0
	addeq sp, sp, #0x10
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_02012774
	movs r6, r0
	bne _0201411C
	bl FUN_020127a4
	mov r4, r0
	arm_func_end FUN_020140a0
_0201411C:
	add r0, sl, #0x800
	ldrh r0, [r0, #0x1c]
	cmp r0, #5
	addeq sp, sp, #0x10
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r0, #1
	cmpne r0, #4
	addne sp, sp, #0x10
	movne r0, #3
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r6, #0
	mov r7, #5
	bne _020142D4
	mov r5, #0
	str r5, [sp, #0xc]
	cmp r0, #4
	bne _020141F4
	add r2, sl, #0x800
	ldrh r1, [r2, #0xe]
	ldrh r0, [r2, #8]
	strh fp, [r2, #0x1c]
	and r1, r1, r4
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	str r1, [sp]
	ldrh r1, [r2, #0x16]
	add r0, r0, #3
	and r6, r0, #3
	stmib sp, {r1, fp}
	ldrh r3, [r2, #0x14]
	ldr r0, _020143CC ; =FUN_020143d0
	mov r1, sl
	add r2, sl, r6, lsl #9
	bl FUN_02013a7c
	cmp r0, #7
	bne _020141D8
	add r0, sl, r6, lsl #1
	rsb r1, fp, #0x10000
	add r0, r0, #0x800
	strh r1, [r0]
	add r0, sl, #0x800
	ldrh r1, [r0, #0xa]
	add r1, r1, #1
	and r1, r1, #3
	strh r1, [r0, #0xa]
	b _020141F4
_020141D8:
	cmp r0, #0
	cmpne r0, #2
	addne r1, sl, #0x800
	addne sp, sp, #0x10
	movne r0, fp
	strhne r7, [r1, #0x1c]
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020141F4:
	add r0, sl, #0x800
	ldrh r2, [r0, #0xc]
	ldrh r1, [r0, #0xa]
	cmp r2, r1
	beq _0201428C
	lsl r5, r2, #9
	ldrh r3, [sl, r5]
	mov r1, r8
	mov r2, #0x200
	orr r3, r3, #1
	strh r3, [sl, r5]
	ldrh r0, [r0, #0xc]
	add r0, sl, r0, lsl #9
	bl FUN_0200781c
	add r1, sl, #0x800
	ldrh r6, [r1, #0xc]
	ldrh r2, [r1, #0x18]
	mov r5, #1
	add r0, sl, r6, lsl #1
	add r0, r0, #0x800
	ldrh r3, [r0]
	add r0, r6, #1
	and r0, r0, #3
	strh r3, [r1, #0x1a]
	strh r0, [r1, #0xc]
	cmp r2, #0
	mov r7, #0
	bne _02014284
	cmp r4, #0
	beq _02014284
	ldrh r0, [r1, #8]
	lsl r0, r0, #9
	ldrh r0, [sl, r0]
	cmp r0, #1
	streq r5, [sp, #0xc]
	beq _0201428C
_02014284:
	mov r0, #0
	str r0, [sp, #0xc]
_0201428C:
	mov r4, #0
	mov r0, sl
	mov r1, r4
	bl FUN_02014790
	cmp r5, #0
	beq _020143C0
	mov r0, sl
	mov r1, r4
	mov r2, sb
	bl FUN_020146c0
	add r0, sl, #0x800
	ldrh r0, [r0, #0x18]
	cmp r0, #0
	bne _020143C0
	ldr r1, [sp, #0xc]
	mov r0, sl
	bl FUN_02014790
	b _020143C0
_020142D4:
	cmp r0, #4
	add r0, sl, #0x800
	moveq r5, #1
	strheq r5, [r0, #0x1c]
	beq _0201434C
	ldrh r1, [r0, #0xc]
	ldrh r0, [r0, #8]
	cmp r1, r0
	beq _0201434C
	lsl r2, r1, #9
	ldrh r0, [sl, r2]
	tst r0, #1
	orreq r0, r0, #1
	strheq r0, [sl, r2]
	beq _0201434C
	mov r1, r8
	add r0, sl, r2
	mov r2, #0x200
	bl FUN_0200781c
	add r1, sl, #0x800
	ldrh r3, [r1, #0xc]
	mov r7, r5
	mov r5, #1
	add r0, sl, r3, lsl #1
	add r0, r0, #0x800
	ldrh r2, [r0]
	add r0, r3, #1
	and r0, r0, #3
	strh r2, [r1, #0x1a]
	strh r0, [r1, #0xc]
_0201434C:
	cmp r5, #0
	beq _020143C0
	add r0, sl, #0x800
	ldrh r1, [r0, #0xa]
	ldrh r2, [r0, #0x10]
	mov r0, sb
	add r5, sl, r1, lsl #9
	add r1, r5, #0x20
	bl FUN_0200781c
	add r3, sl, #0x800
	ldrh r1, [r3, #0xe]
	ldr r0, _020143CC ; =FUN_020143d0
	add r2, r5, #0x20
	str r1, [sp]
	ldrh r4, [r3, #0x16]
	mov r1, sl
	stmib sp, {r4, fp}
	ldrh r3, [r3, #0x10]
	bl FUN_02013a7c
	add r1, sl, #0x800
	ldrh r2, [r1, #0xa]
	cmp r0, #2
	cmpne r0, #0
	add r2, r2, #1
	and r2, r2, #3
	movne r0, #5
	strh r2, [r1, #0xa]
	movne r7, fp
	strhne r0, [r1, #0x1c]
_020143C0:
	mov r0, r7
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020143CC: .word FUN_020143d0

	arm_func_start FUN_020143d0
FUN_020143d0: ; 0x020143D0
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02012244
	ldrh r2, [r5, #0xa]
	ldr r1, _020144A0 ; =FUN_020144a8
	add r0, r0, r2, lsl #2
	ldr r2, [r0, #0xcc]
	ldr r4, [r0, #0x10c]
	cmp r2, r1
	beq _02014404
	ldr r0, _020144A4 ; =FUN_020145dc
	cmp r2, r0
	popne {r3, r4, r5, pc}
	arm_func_end FUN_020143d0
_02014404:
	cmp r4, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x20]
	cmp r4, r0
	popne {r3, r4, r5, pc}
	bl FUN_02012774
	ldrh r1, [r5, #2]
	cmp r1, #0
	bne _02014460
	cmp r0, #0
	popne {r3, r4, r5, pc}
	add r1, r4, #0x800
	ldrh r0, [r1, #0xa]
	ldrh r2, [r5, #0x1a]
	add r0, r4, r0, lsl #1
	asr r2, r2, #1
	add r0, r0, #0x800
	strh r2, [r0]
	ldrh r0, [r1, #0xa]
	add r0, r0, #1
	and r0, r0, #3
	strh r0, [r1, #0xa]
	pop {r3, r4, r5, pc}
_02014460:
	cmp r1, #0xa
	bne _02014490
	cmp r0, #0
	addne r0, r4, #0x800
	ldrhne r1, [r0, #0xa]
	addne r1, r1, #3
	andne r1, r1, #3
	strhne r1, [r0, #0xa]
	add r0, r4, #0x800
	mov r1, #4
	strh r1, [r0, #0x1c]
	pop {r3, r4, r5, pc}
_02014490:
	add r0, r4, #0x800
	mov r1, #5
	strh r1, [r0, #0x1c]
	pop {r3, r4, r5, pc}
	.align 2, 0_020144A0: .word FUN_020144a8
_020144A4: .word FUN_020145dc

	arm_func_start FUN_020144a8
FUN_020144a8: ; 0x020144A8
	push {r4, r5, r6, lr}
	ldr r4, [r0, #0x1c]
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	ldrh r1, [r0, #2]
	cmp r1, #0
	bne _020145CC
	ldrh r1, [r0, #4]
	cmp r1, #0x15
	bgt _020144F4
	bge _02014514
	cmp r1, #9
	popgt {r4, r5, r6, pc}
	cmp r1, #7
	poplt {r4, r5, r6, pc}
	beq _02014534
	cmp r1, #9
	beq _02014544
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020144a8
_020144F4:
	cmp r1, #0x1a
	popgt {r4, r5, r6, pc}
	cmp r1, #0x19
	poplt {r4, r5, r6, pc}
	popeq {r4, r5, r6, pc}
	cmp r1, #0x1a
	beq _02014544
	pop {r4, r5, r6, pc}
_02014514:
	ldrh r1, [r0, #0x12]
	ldr r2, [r0, #0xc]
	mov r0, r4
	bl FUN_020146c0
	mov r0, r4
	mov r1, #0
	bl FUN_02014790
	pop {r4, r5, r6, pc}
_02014534:
	mov r0, r4
	mov r1, #0
	bl FUN_02014790
	pop {r4, r5, r6, pc}
_02014544:
	ldrh r5, [r0, #0x12]
	mov r6, #1
	bl FUN_02003da8
	add r1, r4, #0x800
	ldrh ip, [r1, #8]
	mvn r2, r6, lsl r5
	lsl r5, ip, #9
	ldrh r3, [r4, r5]
	lsl r2, r2, #0x10
	and r3, r3, r2, lsr #16
	strh r3, [r4, r5]
	ldrh r1, [r1, #0x18]
	cmp r1, #1
	bne _02014598
	add r1, ip, #1
	and r1, r1, #3
	lsl r1, r1, #0x10
	lsr r3, r1, #7
	ldrh r1, [r4, r3]
	and r1, r1, r2, lsr #16
	strh r1, [r4, r3]
_02014598:
	bl FUN_02003dbc
	mov r5, #0
	mov r0, r4
	mov r1, r5
	bl FUN_02014790
	add r0, r4, #0x800
	ldrh r0, [r0, #0x18]
	cmp r0, #1
	popne {r4, r5, r6, pc}
	mov r0, r4
	mov r1, r5
	bl FUN_02014790
	pop {r4, r5, r6, pc}
_020145CC:
	add r0, r4, #0x800
	mov r1, #5
	strh r1, [r0, #0x1c]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020145dc
FUN_020145dc: ; 0x020145DC
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	ldr r4, [r8, #0x1c]
	cmp r4, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldrh r0, [r8, #2]
	cmp r0, #0
	bne _020146B0
	ldrh r0, [r8, #4]
	cmp r0, #0x15
	bgt _0201461C
	bge _0201462C
	cmp r0, #9
	popgt {r4, r5, r6, r7, r8, pc}
	cmp r0, #7
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020145dc
_0201461C:
	cmp r0, #0x1a
	popgt {r4, r5, r6, r7, r8, pc}
	cmp r0, #0x19
	pop {r4, r5, r6, r7, r8, pc}
_0201462C:
	ldr r7, [r8, #0xc]
	ldrh r5, [r8, #0x10]
	ldrh r6, [r7]
	bl FUN_02012774
	add r1, r4, #0x800
	ldrh r1, [r1, #0x14]
	cmp r5, r1
	beq _02014654
	cmp r5, #0x200
	movhi r5, #0x200
_02014654:
	cmp r5, #4
	poplo {r4, r5, r6, r7, r8, pc}
	mov r1, #1
	tst r6, r1, lsl r0
	popeq {r4, r5, r6, r7, r8, pc}
	add r0, r4, #0x800
	ldrh r1, [r0, #8]
	mov r0, r7
	mov r2, r5
	add r1, r4, r1, lsl #9
	bl FUN_0200781c
	add r1, r4, #0x800
	ldrh r0, [r1, #8]
	ldrh r2, [r8, #0x1a]
	add r0, r4, r0, lsl #1
	asr r2, r2, #1
	add r0, r0, #0x800
	strh r2, [r0]
	ldrh r0, [r1, #8]
	add r0, r0, #1
	and r0, r0, #3
	strh r0, [r1, #8]
	pop {r4, r5, r6, r7, r8, pc}
_020146B0:
	add r0, r4, #0x800
	mov r1, #5
	strh r1, [r0, #0x1c]
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020146c0
FUN_020146c0: ; 0x020146C0
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r3, r1
	mov r1, #1
	lsl r4, r1, r3
	add r0, r6, #0x800
	ldrh r1, [r0, #0xe]
	lsl r7, r4, #0x10
	mov r5, r2
	tst r1, r7, lsr #16
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r4, [r0, #8]
	lsl r2, r4, #9
	ldrh r2, [r6, r2]
	tst r2, r7, lsr #16
	bne _02014724
	ldrh r0, [r0, #0x18]
	cmp r0, #1
	popne {r3, r4, r5, r6, r7, pc}
	add r0, r4, #1
	and r4, r0, #3
	lsl r0, r4, #9
	ldrh r0, [r6, r0]
	tst r0, r7, lsr #16
	popeq {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020146c0
_02014724:
	add r2, r6, r4, lsl #9
	mov r0, r6
	add r2, r2, #4
	bl FUN_02014934
	mov r1, r0
	add r0, r6, #0x800
	cmp r5, #0
	ldrh r2, [r0, #0x10]
	beq _02014754
	mov r0, r5
	bl FUN_0200781c
	b _0201475C
_02014754:
	mov r0, #0
	bl FUN_02007804
_0201475C:
	bl FUN_02003da8
	lsl r4, r4, #9
	mvn r1, r7, lsr #16
	ldrh r3, [r6, r4]
	lsl r1, r1, #0x10
	add r2, r6, #2
	and r1, r3, r1, lsr #16
	strh r1, [r6, r4]
	ldrh r1, [r2, r4]
	orr r1, r1, r7, lsr #16
	strh r1, [r2, r4]
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02014790
FUN_02014790: ; 0x02014790
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	mov sl, r0
	mov sb, r1
	bl FUN_02003da8
	add r1, sl, #0x800
	ldrh r1, [r1, #8]
	mov r4, r0
	lsl r1, r1, #9
	ldrh r1, [sl, r1]
	cmp r1, #0
	bne _020148CC
	bl FUN_020127a4
	add r1, sl, #0x800
	ldrh r6, [r1, #8]
	ldrh r1, [r1, #0x18]
	mov r7, r0
	add r0, r6, #1
	and r5, r0, #3
	cmp r1, #1
	addeq r0, r5, #1
	andeq r8, r0, #3
	movne r8, r5
	add r1, sl, r8, lsl #9
	mov r0, #0
	mov r2, #0x200
	bl FUN_02007804
	add r0, sl, #0x800
	ldrh r3, [r0, #0xe]
	orr r2, r7, #1
	lsl r1, r8, #9
	and r2, r3, r2
	strh r2, [sl, r1]
	ldrh r1, [r0, #0xe]
	strh r5, [r0, #8]
	lsl r2, r6, #9
	cmp sb, #1
	strh r1, [sl, r2]
	ldrheq r1, [sl, r2]
	ldreq r0, _020148D8 ; =0x0000FFFE
	andeq r0, r1, r0
	strheq r0, [sl, r2]
	mov r0, r4
	bl FUN_02003dbc
	add r3, sl, #0x800
	ldrh r1, [r3, #0xe]
	mov r4, #1
	ldr r0, _020148DC ; =FUN_020143d0
	and r1, r1, r7
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	str r1, [sp]
	ldrh r5, [r3, #0x16]
	mov r1, sl
	add r2, sl, r6, lsl #9
	str r5, [sp, #4]
	str r4, [sp, #8]
	ldrh r3, [r3, #0x14]
	bl FUN_02013a7c
	cmp r0, #7
	bne _020148B0
	add r0, sl, r6, lsl #1
	rsb r1, r4, #0x10000
	add r0, r0, #0x800
	strh r1, [r0]
	add r0, sl, #0x800
	ldrh r1, [r0, #0xa]
	add sp, sp, #0xc
	add r1, r1, #1
	and r1, r1, #3
	strh r1, [r0, #0xa]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02014790
_020148B0:
	cmp r0, #0
	cmpne r0, #2
	addne r0, sl, #0x800
	movne r1, #5
	strhne r1, [r0, #0x1c]
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020148CC:
	bl FUN_02003dbc
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020148D8: .word 0x0000FFFE
_020148DC: .word FUN_020143d0

	arm_func_start FUN_020148e0
FUN_020148e0: ; 0x020148E0
	push {r3, lr}
	mov r3, r2
	cmp r0, #0
	mov lr, r1
	mov ip, #1
	moveq r0, #0
	popeq {r3, pc}
	cmp lr, #0
	moveq r0, #0
	popeq {r3, pc}
	ldrh r1, [lr]
	ldrh r2, [lr, #2]
	tst r1, ip, lsl r3
	moveq r0, #0
	popeq {r3, pc}
	tst r2, ip, lsl r3
	moveq r0, #0
	popeq {r3, pc}
	add r2, lr, #4
	bl FUN_02014934
	pop {r3, pc}
	arm_func_end FUN_020148e0

	arm_func_start FUN_02014934
FUN_02014934: ; 0x02014934
	push {r3, r4, r5, lr}
	mov ip, #1
	lsl r3, ip, r3
	sub r3, r3, #1
	mov r5, r0
	and r0, r1, r3
	mov r4, r2
	bl FUN_02009d28
	add r1, r5, #0x800
	ldrh r1, [r1, #0x10]
	mla r0, r1, r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02014934

	arm_func_start FUN_02014964
FUN_02014964: ; 0x02014964
	push {r3, lr}
	mov ip, #1
	rsb r2, ip, #0x10000
	mov r3, #2
	str ip, [sp]
	bl FUN_02013e14
	pop {r3, pc}
	arm_func_end FUN_02014964

	arm_func_start thunk_FUN_02014054
thunk_FUN_02014054: ; 0x02014980
	ldr ip, _02014988 ; =FUN_02014054
	bx ip
	.align 2, 0_02014988: .word FUN_02014054
	arm_func_end thunk_FUN_02014054

	arm_func_start FUN_0201498c
FUN_0201498c: ; 0x0201498C
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	mov r7, r1
	mov r6, r2
	bl FUN_02012270
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	cmp r7, #3
	movhi r0, #6
	pophi {r3, r4, r5, r6, r7, pc}
	cmp r7, #0
	beq _020149D4
	cmp r6, #0
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	mov r1, #0x50
	bl FUN_020026b4
	arm_func_end FUN_0201498c
_020149D4:
	mov r5, #0x14
	mov r0, r5
	mov r1, r4
	bl FUN_020120b0
	mov r4, #2
	mov r0, r5
	mov r1, r4
	mov r2, r7
	mov r3, r6
	bl FUN_02012128
	cmp r0, #0
	moveq r0, r4
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02014a08
FUN_02014a08: ; 0x02014A08
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_02012270
	cmp r0, #0
	addne sp, sp, #4
	popne {r3, r4, r5, r6, r7, r8, pc}
	cmp r7, #3
	addhi sp, sp, #4
	movhi r0, #6
	pophi {r3, r4, r5, r6, r7, r8, pc}
	cmp r7, #0
	beq _02014A64
	cmp r5, #0
	addeq sp, sp, #4
	moveq r0, #6
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r5
	mov r1, #0x50
	bl FUN_020026b4
	arm_func_end FUN_02014a08
_02014A64:
	mov r4, #0x27
	mov r0, r4
	mov r1, r8
	bl FUN_020120b0
	mov r0, r4
	mov r2, r7
	mov r3, r5
	mov r1, #3
	str r6, [sp]
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02014a9c
FUN_02014a9c: ; 0x02014A9C
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xc
	mov r6, #2
	mov sb, r0
	mov r4, r1
	mov r8, r2
	mov r0, r6
	mov r1, #7
	mov r2, #9
	mov r7, r3
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, r8, sb, pc}
	cmp r4, #0
	addeq sp, sp, #0xc
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, pc}
	cmp r8, #0x70
	addhi sp, sp, #0xc
	movhi r0, #6
	pophi {r4, r5, r6, r7, r8, sb, pc}
	ldr r5, _02014B5C ; =0x020975E0
	mov r0, r4
	mov r1, r5
	mov r2, r8
	bl FUN_0200781c
	mov r0, r5
	mov r1, r8
	bl FUN_020026b4
	mov r4, #0x18
	mov r1, sb
	mov r0, r4
	bl FUN_020120b0
	ldrh lr, [sp, #0x28]
	str r7, [sp]
	ldrb ip, [sp, #0x2c]
	str lr, [sp, #4]
	mov r0, r4
	mov r2, r5
	mov r3, r8
	mov r1, #5
	str ip, [sp, #8]
	bl FUN_02012128
	cmp r0, #0
	moveq r0, r6
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02014B5C: .word 0x020975E0
	arm_func_end FUN_02014a9c

	arm_func_start FUN_02014b60
FUN_02014b60: ; 0x02014B60
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_02012270
	cmp r0, #0
	popne {r4, r5, r6, pc}
	cmp r5, #0
	cmpne r5, #1
	movne r0, #6
	popne {r4, r5, r6, pc}
	mov r4, #0x19
	mov r0, r4
	mov r1, r6
	bl FUN_020120b0
	mov r0, r4
	mov r2, r5
	mov r1, #1
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02014b60

	arm_func_start FUN_02014bb4
FUN_02014bb4: ; 0x02014BB4
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_02012270
	cmp r0, #0
	addne sp, sp, #8
	popne {r4, r5, r6, r7, r8, pc}
	mov r4, #0x1d
	mov r0, r4
	mov r1, r8
	bl FUN_020120b0
	ldrh ip, [sp, #0x20]
	mov r0, r4
	mov r2, r7
	mov r3, r6
	mov r1, #4
	stm sp, {r5, ip}
	bl FUN_02012128
	cmp r0, #0
	moveq r0, #2
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02014bb4

	arm_func_start FUN_02014c18
FUN_02014c18: ; 0x02014C18
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xc
	mov sb, r0
	mov r8, r1
	mov r7, r2
	mov r6, r3
	bl FUN_02012244
	mov r5, #2
	mov r1, r5
	mov r0, #1
	bl FUN_020122b4
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, r8, sb, pc}
	mov r4, #0x1e
	mov r0, r4
	mov r1, sb
	bl FUN_020120b0
	ldrh r2, [sp, #0x28]
	add r0, sp, #0
	mov r1, #0xa
	strh r4, [sp]
	strh r8, [sp, #2]
	strh r7, [sp, #4]
	strh r6, [sp, #6]
	strh r2, [sp, #8]
	bl FUN_020121d4
	cmp r0, #0
	moveq r0, r5
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02014c18

	arm_func_start _strcpy
_strcpy: ; 0x02014C94
	ldrsb r2, [r1]
	mov r3, r0
	cmp r2, #0
	beq _02014CB8
	arm_func_end _strcpy
_02014CA4:
	ldrsb r2, [r1]
	strb r2, [r0], #1
	ldrsb r2, [r1, #1]!
	cmp r2, #0
	bne _02014CA4
_02014CB8:
	mov r1, #0
	strb r1, [r0]
	mov r0, r3
	bx lr

	arm_func_start StrncpyWithNullPad
StrncpyWithNullPad: ; 0x02014CC8
	push {r3, r4, r5, lr}
	and lr, r0, #3
	and r4, r1, #3
	mov r3, r1
	teq lr, r4
	mov r4, #0
	bne _02014D64
	cmp lr, #0
	beq _02014D24
	sub r5, r2, #1
	b _02014D10
	arm_func_end StrncpyWithNullPad
_02014CF4:
	ldrsb ip, [r3]
	strb ip, [r0, r4]
	ldrsb ip, [r3]
	cmp ip, #0
	beq _02014D94
	add r3, r3, #1
	add r4, r4, #1
_02014D10:
	add ip, r4, lr
	cmp ip, #4
	bhs _02014D24
	cmp r4, r5
	blt _02014CF4
_02014D24:
	sub r5, r2, #4
	cmp r4, r5
	bge _02014D60
	ldr r3, _02014DC8 ; =0x7F7F7F7F
_02014D34:
	ldr lr, [r1, r4]
	and ip, lr, r3
	add ip, ip, r3
	orr ip, ip, lr
	orr ip, ip, r3
	mvns ip, ip
	bne _02014D60
	str lr, [r0, r4]
	add r4, r4, #4
	cmp r4, r5
	blt _02014D34
_02014D60:
	add r3, r1, r4
_02014D64:
	sub ip, r2, #1
	cmp r4, ip
	bge _02014D94
_02014D70:
	ldrsb r1, [r3]
	strb r1, [r0, r4]
	ldrsb r1, [r3]
	cmp r1, #0
	beq _02014D94
	add r4, r4, #1
	cmp r4, ip
	add r3, r3, #1
	blt _02014D70
_02014D94:
	sub r1, r2, #1
	cmp r4, r1
	cmpge r2, #0
	movgt r1, #0
	strbgt r1, [r0, r4]
	ldrsb r0, [r3]
	cmp r0, #0
	beq _02014DC0
	mov r0, r3
	bl GetStrLen
	add r4, r4, r0
_02014DC0:
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_02014DC8: .word 0x7F7F7F7F

	arm_func_start GetStrLen
GetStrLen: ; 0x02014DCC
	push {r3, lr}
	tst r0, #3
	mov ip, #0
	beq _02014DFC
	arm_func_end GetStrLen
_02014DDC:
	ldrsb r1, [r0, ip]
	cmp r1, #0
	moveq r0, ip
	popeq {r3, pc}
	add ip, ip, #1
	add r1, r0, ip
	tst r1, #3
	bne _02014DDC
_02014DFC:
	ldr r1, _02014E4C ; =0x7F7F7F7F
	add lr, r0, ip
_02014E04:
	ldr r3, [lr]
	and r2, r3, r1
	add r2, r2, r1
	orr r2, r2, r3
	orr r2, r2, r1
	mvns r2, r2
	addeq lr, lr, #4
	addeq ip, ip, #4
	beq _02014E04
	ldrsb r1, [r0, ip]
	cmp r1, #0
	beq _02014E44
_02014E34:
	add ip, ip, #1
	ldrsb r1, [r0, ip]
	cmp r1, #0
	bne _02014E34
_02014E44:
	mov r0, ip
	pop {r3, pc}
	.align 2, 0_02014E4C: .word 0x7F7F7F7F

	arm_func_start FUN_02014e50
FUN_02014e50: ; 0x02014E50
	push {r3, r4, r5, lr}
	mov r4, #0
	b _02014E70
	arm_func_end FUN_02014e50
_02014E5C:
	ldrsb r2, [r0, r4]
	cmp r2, #0
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	add r4, r4, #1
_02014E70:
	add r5, r0, r4
	tst r5, #3
	beq _02014E84
	cmp r4, r1
	blt _02014E5C
_02014E84:
	sub lr, r1, #4
	cmp r4, lr
	bge _02014EC8
	ldr r2, _02014EE4 ; =0x7F7F7F7F
_02014E94:
	ldr ip, [r5]
	and r3, ip, r2
	add r3, r3, r2
	orr r3, r3, ip
	orr r3, r3, r2
	mvns r3, r3
	bne _02014EC8
	add r4, r4, #4
	cmp r4, lr
	add r5, r5, #4
	blt _02014E94
	b _02014EC8
_02014EC4:
	add r4, r4, #1
_02014EC8:
	ldrsb r2, [r0, r4]
	cmp r2, #0
	beq _02014EDC
	cmp r4, r1
	blt _02014EC4
_02014EDC:
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_02014EE4: .word 0x7F7F7F7F

	arm_func_start FUN_02014ee8
FUN_02014ee8: ; 0x02014EE8
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl GetStrLen
	mov r1, r4
	add r0, r5, r0
	bl _strcpy
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02014ee8

	arm_func_start _strcmp
_strcmp: ; 0x02014F0C
	push {r3, lr}
	and ip, r0, #3
	and r2, r1, #3
	teq ip, r2
	mov r2, #0
	bne _02014F94
	cmp ip, #0
	beq _02014F64
	cmp ip, #4
	bhs _02014F64
	arm_func_end _strcmp
_02014F34:
	ldrb r3, [r0, r2]
	ldrb lr, [r1, r2]
	cmp r3, lr
	bne _02014F4C
	cmp r3, #0
	bne _02014F54
_02014F4C:
	sub r0, r3, lr
	pop {r3, pc}
_02014F54:
	add r2, r2, #1
	add r3, r2, ip
	cmp r3, #4
	blo _02014F34
_02014F64:
	ldr r3, _02014FC0 ; =0x7F7F7F7F
_02014F68:
	ldr lr, [r0, r2]
	ldr ip, [r1, r2]
	cmp lr, ip
	bne _02014F94
	and ip, lr, r3
	add ip, ip, r3
	orr ip, ip, lr
	orr ip, ip, r3
	mvns ip, ip
	addeq r2, r2, #4
	beq _02014F68
_02014F94:
	ldrb r3, [r0, r2]
	ldrb ip, [r1, r2]
	cmp r3, ip
	bne _02014FAC
	cmp r3, #0
	bne _02014FB4
_02014FAC:
	sub r0, r3, ip
	pop {r3, pc}
_02014FB4:
	add r2, r2, #1
	b _02014F94
_02014FBC:
	.byte 0x08, 0x80, 0xBD, 0xE8
_02014FC0: .word 0x7F7F7F7F

	arm_func_start FUN_02014fc4
FUN_02014fc4: ; 0x02014FC4
	push {r3, r4, r5, lr}
	cmp r2, #0
	beq _020150A0
	and r5, r0, #3
	and r3, r1, #3
	teq r5, r3
	mov r3, #0
	bne _0201506C
	cmp r5, #0
	beq _02015028
	b _02015014
	arm_func_end FUN_02014fc4
_02014FF0:
	ldrb r4, [r0, r3]
	ldrb ip, [r1, r3]
	cmp r4, ip
	bne _02015008
	cmp r4, #0
	bne _02015010
_02015008:
	sub r0, r4, ip
	pop {r3, r4, r5, pc}
_02015010:
	add r3, r3, #1
_02015014:
	add r4, r3, r5
	cmp r4, #4
	bhs _02015028
	cmp r3, r2
	blt _02014FF0
_02015028:
	sub r5, r2, #4
	cmp r3, r5
	bgt _0201506C
	ldr ip, _020150A8 ; =0x7F7F7F7F
_02015038:
	ldr r4, [r0, r3]
	ldr lr, [r1, r3]
	cmp r4, lr
	bne _0201506C
	and lr, r4, ip
	add lr, lr, ip
	orr lr, lr, r4
	orr lr, lr, ip
	mvns lr, lr
	bne _0201506C
	add r3, r3, #4
	cmp r3, r5
	ble _02015038
_0201506C:
	cmp r3, r2
	bge _020150A0
_02015074:
	ldrb r4, [r0, r3]
	ldrb r5, [r1, r3]
	cmp r4, r5
	bne _0201508C
	cmp r4, #0
	bne _02015094
_0201508C:
	sub r0, r4, r5
	pop {r3, r4, r5, pc}
_02015094:
	add r3, r3, #1
	cmp r3, r2
	blt _02015074
_020150A0:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_020150A8: .word 0x7F7F7F7F

	arm_func_start FUN_020150ac
FUN_020150ac: ; 0x020150AC
	ldr r2, [r0]
	cmp r2, #0
	ldrne r2, [r0, #4]
	strbne r1, [r2]
	ldrne r1, [r0]
	subne r1, r1, #1
	strne r1, [r0]
	ldr r1, [r0, #4]
	add r1, r1, #1
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020150ac

	arm_func_start FUN_020150d8
FUN_020150d8: ; 0x020150D8
	push {r3, lr}
	cmp r2, #0
	pople {r3, pc}
	ldr lr, [r0]
	mov ip, #0
	cmp lr, r2
	movhi lr, r2
	cmp lr, #0
	bls _02015110
	arm_func_end FUN_020150d8
_020150FC:
	ldr r3, [r0, #4]
	strb r1, [r3, ip]
	add ip, ip, #1
	cmp ip, lr
	blo _020150FC
_02015110:
	ldr r3, [r0]
	ldr r1, [r0, #4]
	sub r3, r3, lr
	add r1, r1, r2
	str r3, [r0]
	str r1, [r0, #4]
	pop {r3, pc}

	arm_func_start FUN_0201512c
FUN_0201512c: ; 0x0201512C
	push {r4, lr}
	cmp r2, #0
	pople {r4, pc}
	ldr r4, [r0]
	mov lr, #0
	cmp r4, r2
	movhi r4, r2
	cmp r4, #0
	bls _02015168
	arm_func_end FUN_0201512c
_02015150:
	ldrsb ip, [r1, lr]
	ldr r3, [r0, #4]
	strb ip, [r3, lr]
	add lr, lr, #1
	cmp lr, r4
	blo _02015150
_02015168:
	ldr r3, [r0]
	ldr r1, [r0, #4]
	sub r3, r3, r4
	add r1, r1, r2
	str r3, [r0]
	str r1, [r0, #4]
	pop {r4, pc}

	arm_func_start FUN_02015184
FUN_02015184: ; 0x02015184
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r1, sp, #0xc
	bic r1, r1, #3
	add r3, r1, #4
	ldr r2, [sp, #0xc]
	mvn r1, #0x80000000
	bl FUN_020151b0
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02015184

	arm_func_start FUN_020151b0
FUN_020151b0: ; 0x020151B0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	mov sl, r2
	ldrsb r2, [sl]
	str r1, [sp]
	mov fp, r3
	str r1, [sp, #0xc]
	str r0, [sp, #0x14]
	str r0, [sp, #0x10]
	cmp r2, #0
	beq _02015948
	arm_func_end FUN_020151b0
_020151DC:
	ldrsb r1, [sl]
	and r0, r1, #0xff
	eor r0, r0, #0x20
	sub r0, r0, #0xa1
	cmp r0, #0x3c
	bhs _02015218
	add r0, sp, #0xc
	bl FUN_020150ac
	ldrsb r1, [sl, #1]!
	cmp r1, #0
	beq _0201593C
_02015208:
	add r0, sp, #0xc
	add sl, sl, #1
	bl FUN_020150ac
	b _0201593C
_02015218:
	cmp r1, #0x25
	beq _02015224
	b _02015208
_02015224:
	mov r5, #0
	mov r6, r5
	mov r2, sl
	sub r7, r5, #1
	mov r0, #0xa
	mov r3, #0x57
_0201523C:
	ldrsb r4, [sl, #1]!
	cmp r4, #0x20
	bgt _02015250
	beq _0201528C
	b _020152A4
_02015250:
	cmp r4, #0x30
	bgt _020152A4
	cmp r4, #0x2b
	blt _020152A4
	beq _02015278
	cmp r4, #0x2d
	beq _02015294
	cmp r4, #0x30
	beq _0201529C
	b _020152A4
_02015278:
	ldrsb r1, [sl, #-1]
	cmp r1, #0x20
	bne _020152A4
	orr r5, r5, #2
	b _0201523C
_0201528C:
	orr r5, r5, #1
	b _0201523C
_02015294:
	orr r5, r5, #8
	b _0201523C
_0201529C:
	orr r5, r5, #0x10
	b _0201523C
_020152A4:
	cmp r4, #0x2a
	bne _020152C8
	add fp, fp, #4
	ldr r6, [fp, #-4]
	add sl, sl, #1
	cmp r6, #0
	rsblt r6, r6, #0
	orrlt r5, r5, #8
	b _020152F0
_020152C8:
	mov r1, #0xa
	b _020152DC
_020152D0:
	ldrsb r4, [sl], #1
	mla r4, r6, r1, r4
	sub r6, r4, #0x30
_020152DC:
	ldrsb r4, [sl]
	cmp r4, #0x30
	blt _020152F0
	cmp r4, #0x39
	ble _020152D0
_020152F0:
	ldrsb r1, [sl]
	cmp r1, #0x2e
	bne _0201534C
	ldrsb r1, [sl, #1]!
	mov r7, #0
	cmp r1, #0x2a
	bne _02015324
	add fp, fp, #4
	ldr r7, [fp, #-4]
	add sl, sl, #1
	cmp r7, #0
	mvnlt r7, #0
	b _0201534C
_02015324:
	mov r1, #0xa
	b _02015338
_0201532C:
	ldrsb r4, [sl], #1
	mla r4, r7, r1, r4
	sub r7, r4, #0x30
_02015338:
	ldrsb r4, [sl]
	cmp r4, #0x30
	blt _0201534C
	cmp r4, #0x39
	ble _0201532C
_0201534C:
	ldrsb r1, [sl]
	cmp r1, #0x68
	beq _02015364
	cmp r1, #0x6c
	beq _0201537C
	b _02015390
_02015364:
	ldrsb r1, [sl, #1]!
	cmp r1, #0x68
	orrne r5, r5, #0x40
	addeq sl, sl, #1
	orreq r5, r5, #0x100
	b _02015390
_0201537C:
	ldrsb r1, [sl, #1]!
	cmp r1, #0x6c
	orrne r5, r5, #0x20
	addeq sl, sl, #1
	orreq r5, r5, #0x80
_02015390:
	ldrsb r1, [sl]
	cmp r1, #0x69
	bgt _020153D4
	cmp r1, #0x63
	blt _020153B8
	beq _0201543C
	cmp r1, #0x64
	cmpne r1, #0x69
	beq _02015590
	b _02015574
_020153B8:
	cmp r1, #0x25
	bgt _020153C8
	beq _02015564
	b _02015574
_020153C8:
	cmp r1, #0x58
	beq _02015428
	b _02015574
_020153D4:
	cmp r1, #0x70
	bgt _020153EC
	bge _02015430
	cmp r1, #0x6f
	beq _02015414
	b _02015574
_020153EC:
	cmp r1, #0x78
	bgt _02015574
	cmp r1, #0x73
	blt _02015574
	beq _020154B0
	cmp r1, #0x75
	beq _02015420
	cmp r1, #0x78
	beq _02015588
	b _02015574
_02015414:
	orr r5, r5, #0x1000
	mov r0, #8
	b _02015590
_02015420:
	orr r5, r5, #0x1000
	b _02015590
_02015428:
	mov r3, #0x37
	b _02015588
_02015430:
	orr r5, r5, #4
	mov r7, #8
	b _02015588
_0201543C:
	cmp r7, #0
	add r4, sp, #0xc
	bge _02015574
	add fp, fp, #4
	tst r5, #8
	ldr r7, [fp, #-4]
	beq _0201547C
	lsl r1, r7, #0x18
	mov r0, r4
	asr r1, r1, #0x18
	bl FUN_020150ac
	mov r0, r4
	sub r2, r6, #1
	mov r1, #0x20
	bl FUN_020150d8
	b _020154AC
_0201547C:
	tst r5, #0x10
	movne r0, #0x30
	moveq r0, #0x20
	lsl r1, r0, #0x18
	mov r0, r4
	asr r1, r1, #0x18
	sub r2, r6, #1
	bl FUN_020150d8
	lsl r1, r7, #0x18
	mov r0, r4
	asr r1, r1, #0x18
	bl FUN_020150ac
_020154AC:
	b _02015938
_020154B0:
	add fp, fp, #4
	cmp r7, #0
	ldr r8, [fp, #-4]
	add sb, sp, #0xc
	mov r4, #0
	bge _020154EC
	ldrsb r0, [r8]
	cmp r0, #0
	beq _02015500
_020154D4:
	add r4, r4, #1
	ldrsb r0, [r8, r4]
	cmp r0, #0
	bne _020154D4
	b _02015500
_020154E8:
	add r4, r4, #1
_020154EC:
	cmp r4, r7
	bge _02015500
	ldrsb r0, [r8, r4]
	cmp r0, #0
	bne _020154E8
_02015500:
	tst r5, #8
	sub r6, r6, r4
	beq _02015530
	mov r0, sb
	mov r1, r8
	mov r2, r4
	bl FUN_0201512c
	mov r0, sb
	mov r2, r6
	mov r1, #0x20
	bl FUN_020150d8
	b _02015560
_02015530:
	tst r5, #0x10
	movne r0, #0x30
	moveq r0, #0x20
	lsl r1, r0, #0x18
	mov r0, sb
	mov r2, r6
	asr r1, r1, #0x18
	bl FUN_020150d8
	mov r0, sb
	mov r1, r8
	mov r2, r4
	bl FUN_0201512c
_02015560:
	b _02015938
_02015564:
	add r0, r2, #1
	cmp r0, sl
	bne _02015574
	b _02015208
_02015574:
	mov r1, r2
	add r0, sp, #0xc
	sub r2, sl, r2
	bl FUN_0201512c
	b _0201593C
_02015588:
	orr r5, r5, #0x1000
	mov r0, #0x10
_02015590:
	tst r5, #8
	bicne r5, r5, #0x10
	cmp r7, #0
	bicge r5, r5, #0x10
	movlt r7, #1
	mov r4, #0
	tst r5, #0x1000
	beq _02015650
	tst r5, #0x100
	addne fp, fp, #4
	ldrne r2, [fp, #-4]
	movne r1, #0
	andne r8, r2, #0xff
	bne _02015604
	tst r5, #0x40
	beq _020155E8
	add fp, fp, #4
	ldr r2, [fp, #-4]
	mov r1, #0
	lsl r2, r2, #0x10
	lsr r8, r2, #0x10
	b _02015604
_020155E8:
	tst r5, #0x80
	addne fp, fp, #8
	ldrne r1, [fp, #-4]
	ldrne r8, [fp, #-8]
	addeq fp, fp, #4
	ldreq r8, [fp, #-4]
	moveq r1, #0
_02015604:
	bic r5, r5, #3
	tst r5, #4
	beq _02015718
	cmp r0, #0x10
	bne _0201563C
	cmp r1, #0
	cmpeq r8, #0
	beq _02015718
	add r4, r3, #0x21
	mov r2, #0x30
	strb r4, [sp, #8]
	strb r2, [sp, #9]
	mov r4, #2
	b _02015718
_0201563C:
	cmp r0, #8
	moveq r2, #0x30
	strbeq r2, [sp, #8]
	moveq r4, #1
	b _02015718
_02015650:
	tst r5, #0x100
	beq _02015670
	add fp, fp, #4
	ldr r1, [fp, #-4]
	lsl r1, r1, #0x18
	asr r8, r1, #0x18
_02015668:
	asr r1, r8, #0x1f
	b _020156A8
_02015670:
	tst r5, #0x40
	beq _0201568C
	add fp, fp, #4
	ldr r1, [fp, #-4]
	lsl r1, r1, #0x10
	asr r8, r1, #0x10
	b _02015668
_0201568C:
	tst r5, #0x80
	addne fp, fp, #8
	ldrne r8, [fp, #-8]
	ldrne r1, [fp, #-4]
	addeq fp, fp, #4
	ldreq r8, [fp, #-4]
	asreq r1, r8, #0x1f
_020156A8:
	mov r2, #0
	and sb, r2, #0
	cmp sb, #0
	and sb, r1, #0x80000000
	cmpeq sb, #0
	beq _020156E0
	mvn r8, r8
	mov r4, #0x2d
	strb r4, [sp, #8]
	mvn r1, r1
	adds r8, r8, #1
	adc r1, r1, r2
	mov r4, #1
	b _02015718
_020156E0:
	cmp r1, r2
	cmpeq r8, r2
	bne _020156F4
	cmp r7, #0
	beq _02015718
_020156F4:
	tst r5, #2
	movne r2, #0x2b
	strbne r2, [sp, #8]
	movne r4, #1
	bne _02015718
	tst r5, #1
	movne r2, #0x20
	strbne r2, [sp, #8]
	movne r4, #1
_02015718:
	cmp r0, #8
	mov sb, #0
	beq _02015738
	cmp r0, #0xa
	beq _02015778
	cmp r0, #0x10
	beq _02015810
	b _02015854
_02015738:
	cmp r1, sb
	cmpeq r8, sb
	beq _02015854
	add r0, sp, #0x18
_02015748:
	and r2, r8, #7
	lsr r8, r8, #3
	add r2, r2, #0x30
	strb r2, [r0, sb]
	lsr r2, r1, #3
	cmp r2, #0
	orr r8, r8, r1, lsl #29
	mov r1, r2
	cmpeq r8, #0
	add sb, sb, #1
	bne _02015748
	b _02015854
_02015778:
	mov r0, sb
	cmp r0, sb
	cmpeq r1, sb
	bne _020157C4
	cmp r8, #0
	mov r3, #0xa
	beq _02015854
	ldr r2, _02015988 ; =0xCCCCCCCD
	add ip, sp, #0x18
_0201579C:
	umull r1, r0, r8, r2
	lsrs r0, r0, #3
	mul r1, r0, r3
	sub r1, r8, r1
	mov r8, r0
	add r0, r1, #0x30
	strb r0, [ip, sb]
	add sb, sb, #1
	bne _0201579C
	b _02015854
_020157C4:
	cmp r1, sb
	cmpeq r8, sb
	beq _02015854
_020157D0:
	mov r0, r8
	mov r2, #0xa
	mov r3, #0
	bl FUN_0201f954
	mov r2, #0xa
	umull r3, r2, r0, r2
	subs r2, r8, r3
	add r3, r2, #0x30
	add r2, sp, #0x18
	strb r3, [r2, sb]
	cmp r1, #0
	cmpeq r0, #0
	mov r8, r0
	add sb, sb, #1
	bne _020157D0
	b _02015854
_02015810:
	cmp r1, sb
	cmpeq r8, sb
	beq _02015854
	add r0, sp, #0x18
_02015820:
	and ip, r8, #0xf
	lsr r8, r8, #4
	lsr r2, r1, #4
	orr r8, r8, r1, lsl #28
	cmp ip, #0xa
	mov r1, r2
	addlt r2, ip, #0x30
	addge r2, ip, r3
	strb r2, [r0, sb]
	cmp r1, #0
	cmpeq r8, #0
	add sb, sb, #1
	bne _02015820
_02015854:
	cmp r4, #0
	add r0, sp, #0x18
	add r8, sp, #0xc
	ble _0201587C
	ldrsb r1, [sp, #8]
	cmp r1, #0x30
	moveq r1, #0x30
	strbeq r1, [r0, sb]
	addeq sb, sb, #1
	moveq r4, #0
_0201587C:
	tst r5, #0x10
	subne r0, r6, sb
	sub r7, r7, sb
	subne r0, r0, r4
	cmpne r7, r0
	movlt r7, r0
	cmp r7, #0
	subgt r6, r6, r7
	add r0, r4, sb
	sub r6, r6, r0
	ands r0, r5, #8
	str r0, [sp, #4]
	bne _020158C0
	add r0, sp, #0xc
	mov r2, r6
	mov r1, #0x20
	bl FUN_020150d8
_020158C0:
	cmp r4, #0
	ble _020158E4
	add r5, sp, #8
_020158CC:
	sub r4, r4, #1
	ldrsb r1, [r5, r4]
	mov r0, r8
	bl FUN_020150ac
	cmp r4, #0
	bgt _020158CC
_020158E4:
	add r5, sp, #0xc
	mov r2, r7
	mov r0, r5
	mov r1, #0x30
	bl FUN_020150d8
	cmp sb, #0
	ble _0201591C
	add r4, sp, #0x18
_02015904:
	sub sb, sb, #1
	ldrsb r1, [r4, sb]
	mov r0, r5
	bl FUN_020150ac
	cmp sb, #0
	bgt _02015904
_0201591C:
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _02015938
	add r0, sp, #0xc
	mov r2, r6
	mov r1, #0x20
	bl FUN_020150d8
_02015938:
	add sl, sl, #1
_0201593C:
	ldrsb r0, [sl]
	cmp r0, #0
	bne _020151DC
_02015948:
	ldr r0, [sp, #0xc]
	mov r2, #0
	cmp r0, #0
	ldrne r0, [sp, #0x10]
	strbne r2, [r0]
	bne _02015974
	ldr r0, [sp]
	cmp r0, #0
	ldrne r1, [sp, #0x14]
	addne r0, r1, r0
	strbne r2, [r0, #-1]
_02015974:
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x14]
	sub r0, r1, r0
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02015988: .word 0xCCCCCCCD

	arm_func_start FUN_0201598c
FUN_0201598c: ; 0x0201598C
	ldr ip, _02015994 ; =LAB_02015998
	bx ip
	.align 2, 0_02015994: .word LAB_02015998
	arm_func_end FUN_0201598c

	arm_func_start LAB_02015998
LAB_02015998: ; 0x02015998
	push {r3, r4, r5, r6, r7, lr}
	bl FUN_02003da8
	ldr r1, _02015A7C ; =0x02097660
	mov r4, r0
	ldrh r0, [r1]
	cmp r0, #0
	bne _02015A70
	mov r2, #1
	strh r2, [r1]
	mov r1, #0
	ldr r0, _02015A80 ; =0x02FFFC00
	mov r5, r1
	str r1, [r0, #0x388]
	ldr r0, _02015A84 ; =0x02097664
	arm_func_end LAB_02015998
_020159D0:
	str r5, [r0, r1, lsl #2]
	add r1, r1, #1
	cmp r1, #0x20
	blt _020159D0
	mov r6, #0x40000
	ldr r1, _02015A88 ; =0x0000C408
	ldr r7, _02015A8C ; =0x04000184
	mov r0, r6
	strh r1, [r7]
	bl FUN_0200105c
	ldr r1, _02015A90 ; =FUN_02015b7c
	mov r0, r6
	bl FUN_02000e30
	mov r0, r6
	bl FUN_02000ffc
	sub r3, r7, #4
	mov r1, #0
	mov r2, #0x3e8
_02015A18:
	ldrh r0, [r3]
	ands r7, r0, #0xf
	lsl r0, r7, #8
	strh r0, [r3]
	bne _02015A34
	cmp r5, #4
	bgt _02015A70
_02015A34:
	ldrh r0, [r3]
	mov r6, r2
	and r0, r0, #0xf
	cmp r0, r7
	bne _02015A68
_02015A48:
	cmp r6, #0
	movle r5, r1
	ble _02015A68
	ldrh r0, [r3]
	sub r6, r6, #1
	and r0, r0, #0xf
	cmp r0, r7
	beq _02015A48
_02015A68:
	add r5, r5, #1
	b _02015A18
_02015A70:
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02015A7C: .word 0x02097660
_02015A80: .word 0x02FFFC00
_02015A84: .word 0x02097664
_02015A88: .word 0x0000C408
_02015A8C: .word 0x04000184
_02015A90: .word FUN_02015b7c

	arm_func_start FUN_02015a94
FUN_02015a94: ; 0x02015A94
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r5, r1
	bl FUN_02003da8
	ldr r1, _02015AD8 ; =0x02097664
	ldr r3, _02015ADC ; =0x02FFFC00
	str r5, [r1, r4, lsl #2]
	cmp r5, #0
	ldrne r2, [r3, #0x388]
	mov r1, #1
	orrne r1, r2, r1, lsl r4
	mvneq r1, r1, lsl r4
	ldreq r2, [r3, #0x388]
	andeq r1, r2, r1
	str r1, [r3, #0x388]
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	.align 2, 0_02015AD8: .word 0x02097664
_02015ADC: .word 0x02FFFC00
	arm_func_end FUN_02015a94

	arm_func_start FUN_02015ae0
FUN_02015ae0: ; 0x02015AE0
	ldr r2, _02015B00 ; =0x02FFFC00
	mov r3, #1
	add r1, r2, r1, lsl #2
	ldr r1, [r1, #0x388]
	tst r1, r3, lsl r0
	moveq r3, #0
	mov r0, r3
	bx lr
	.align 2, 0_02015B00: .word 0x02FFFC00
	arm_func_end FUN_02015ae0

	arm_func_start FUN_02015b04
FUN_02015b04: ; 0x02015B04
	push {r3, r4, r5, lr}
	ldr r3, [sp]
	ldr r5, _02015B78 ; =0x04000184
	bic r3, r3, #0x1f
	and r0, r0, #0x1f
	orr r3, r3, r0
	ldrh r0, [r5]
	bic r3, r3, #0x20
	lsl r2, r2, #0x1f
	orr r2, r3, r2, lsr #26
	and r2, r2, #0x3f
	tst r0, #0x4000
	orr r4, r2, r1, lsl #6
	ldrhne r1, [r5]
	mvnne r0, #0
	orrne r1, r1, #0xc000
	strhne r1, [r5]
	popne {r3, r4, r5, pc}
	bl FUN_02003da8
	ldrh r1, [r5]
	tst r1, #2
	beq _02015B68
	bl FUN_02003dbc
	mvn r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02015b04
_02015B68:
	str r4, [r5, #4]
	bl FUN_02003dbc
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_02015B78: .word 0x04000184

	arm_func_start FUN_02015b7c
FUN_02015b7c: ; 0x02015B7C
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mvn r7, #3
	ldr sb, [sp]
	ldr r8, _02015C74 ; =0x04000184
	ldr r4, _02015C78 ; =0x02097664
	add sl, r7, #1
	mov r6, #0x4100000
	mov r5, #0
	arm_func_end FUN_02015b7c
_02015BA0:
	ldrh r0, [r8]
	tst r0, #0x4000
	ldrhne r0, [r8]
	addne r1, r7, #1
	orrne r0, r0, #0xc000
	strhne r0, [r8]
	bne _02015BE4
	bl FUN_02003da8
	ldrh r1, [r8]
	tst r1, #0x100
	beq _02015BD8
	bl FUN_02003dbc
	mov r1, r7
	b _02015BE4
_02015BD8:
	ldr sb, [r6]
	bl FUN_02003dbc
	mov r1, r5
_02015BE4:
	cmp r1, r7
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r1, sl
	beq _02015BA0
	lsl r0, sb, #0x1b
	lsrs r0, r0, #0x1b
	beq _02015BA0
	ldr r3, [r4, r0, lsl #2]
	cmp r3, #0
	beq _02015C24
	lsl r2, sb, #0x1a
	lsr r1, sb, #6
	lsr r2, r2, #0x1f
	blx r3
	b _02015BA0
_02015C24:
	lsl r0, sb, #0x1a
	lsrs r0, r0, #0x1f
	bne _02015BA0
	ldrh r0, [r8]
	orr sb, sb, #0x20
	tst r0, #0x4000
	ldrhne r0, [r8]
	orrne r0, r0, #0xc000
	strhne r0, [r8]
	bne _02015BA0
	bl FUN_02003da8
	ldrh r1, [r8]
	tst r1, #2
	beq _02015C60
	b _02015C64
_02015C60:
	str sb, [r8, #4]
_02015C64:
	bl FUN_02003dbc
	b _02015BA0
_02015C6C:
	.byte 0x04, 0xD0, 0x8D, 0xE2
	.byte 0xF8, 0x87, 0xBD, 0xE8
_02015C74: .word 0x04000184
_02015C78: .word 0x02097664

	arm_func_start FUN_02015c7c
FUN_02015c7c: ; 0x02015C7C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	lsl r0, r1, #0x10
	lsr r4, r0, #0x10
	and r0, r4, #0x7f00
	lsl r0, r0, #8
	cmp r2, #0
	lsr r0, r0, #0x10
	mov r2, #0
	ldr r3, _02015EE8 ; =0x020976E4
	beq _02015CE4
	mov r1, #1
	lsl r1, r1, r0
	ldrh r2, [r3, #0x38]
	lsl r1, r1, #0x10
	orr r1, r2, r1, lsr #16
	strh r1, [r3, #0x38]
	ldr r3, [r3, #4]
	cmp r3, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, #4
	mov r2, #0
	blx r3
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02015c7c
_02015CE4:
	cmp r0, #0x10
	bne _02015D90
	ldrh r1, [r3, #0x10]
	add r1, r1, #1
	strh r1, [r3, #0x10]
	ldrh r4, [r3, #0x10]
	ldrh r1, [r3, #0x18]
	cmp r4, r1
	strhhs r2, [r3, #0x10]
	ldr r1, _02015EEC ; =0x02FFFFAA
	ldrh lr, [r3, #0x10]
	ldrh r2, [r1]
	ldrh r1, [r1, #2]
	ldr r7, [r3, #0x14]
	strh r2, [sp, #4]
	strh r1, [sp, #6]
	ldr r5, [sp, #4]
	lsl r6, lr, #3
	lsl r1, r5, #7
	lsr r2, r1, #0x1f
	lsl r4, r5, #8
	lsl r1, r5, #5
	lsl ip, r5, #0x14
	lsr r5, ip, #0x14
	strh r5, [r7, r6]
	lsr r1, r1, #0x1e
	add r5, r7, lr, lsl #3
	lsr r4, r4, #0x14
	strh r4, [r5, #2]
	and r2, r2, #0xff
	strh r2, [r5, #4]
	and r1, r1, #0xff
	strh r1, [r5, #6]
	ldr r4, [r3, #4]
	cmp r4, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r2, [r3, #0x10]
	mov r1, #0
	and r2, r2, #0xff
	blx r4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_02015D90:
	tst r1, #0x1000000
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	and r1, r4, #0xff
	cmp r1, #4

	arm_func_start switchD
switchD: ; 0x02015DA4
	addls pc, pc, r1, lsl #2
	b _02015EDC
	arm_func_end switchD
_02015DAC: ; jump table
	b LAB_02015dc0 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02015DB0
	b _02015EDC
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02015DB4
	b _02015E80
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02015DB8
	b _02015E88
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02015DBC
	b _02015E78
	arm_func_end caseD_4
LAB_02015dc0:
	cmp r0, #0
	beq _02015DDC
	cmp r0, #1
	beq _02015E34
	cmp r0, #2
	strheq r2, [r3, #0x36]
	b _02015E3C
_02015DDC:
	ldr r1, _02015EEC ; =0x02FFFFAA
	ldrh r4, [r1]
	ldrh r1, [r1, #2]
	strh r4, [sp]
	strh r1, [sp, #2]
	ldr r4, [sp]
	lsl r1, r4, #0x14
	lsr r5, r1, #0x14
	lsl lr, r4, #8
	lsl r1, r4, #7
	lsr ip, r1, #0x1f
	lsl r1, r4, #5
	lsr r1, r1, #0x1e
	strh r5, [r3, #8]
	lsr lr, lr, #0x14
	strh lr, [r3, #0xa]
	and ip, ip, #0xff
	strh ip, [r3, #0xc]
	and r1, r1, #0xff
	strh r1, [r3, #0xe]
	strh r2, [r3, #0x36]
	b _02015E3C
_02015E34:
	mov r1, #2
	strh r1, [r3, #0x36]
_02015E3C:
	mov r1, #1
	mvn r1, r1, lsl r0
	ldrh r2, [r3, #0x3a]
	lsl r1, r1, #0x10
	and r1, r2, r1, lsr #16
	strh r1, [r3, #0x3a]
	ldr r3, [r3, #4]
	cmp r3, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, #0
	mov r2, r1
	blx r3
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_02015E78:
	mov r4, #3
	b _02015E8C
_02015E80:
	mov r4, #1
	b _02015E8C
_02015E88:
	mov r4, #2
_02015E8C:
	mov r2, #1
	lsl r1, r2, r0
	ldrh ip, [r3, #0x38]
	lsl r1, r1, #0x10
	mvn r2, r2, lsl r0
	orr r1, ip, r1, lsr #16
	strh r1, [r3, #0x38]
	ldrh ip, [r3, #0x3a]
	lsl r1, r2, #0x10
	and r1, ip, r1, lsr #16
	strh r1, [r3, #0x3a]
	ldr r3, [r3, #4]
	cmp r3, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	and r1, r4, #0xff
	mov r2, #0
	blx r3
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_02015EDC:
	bl FUN_02004160
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02015EE8: .word 0x020976E4
_02015EEC: .word 0x02FFFFAA

	arm_func_start FUN_02015ef0
FUN_02015ef0: ; 0x02015EF0
	push {r3, r4, r5, lr}
	ldr r4, _02015F5C ; =0x020976E4
	ldrh r0, [r4]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r0, #1
	strh r0, [r4]
	bl FUN_0201598c
	mov r0, #0
	strh r0, [r4, #0x10]
	str r0, [r4, #4]
	str r0, [r4, #0x14]
	strh r0, [r4, #0x36]
	strh r0, [r4, #0x34]
	strh r0, [r4, #0x3a]
	strh r0, [r4, #0x38]
	mov r5, #6
	mov r4, #1
	arm_func_end FUN_02015ef0
_02015F38:
	mov r0, r5
	mov r1, r4
	bl FUN_02015ae0
	cmp r0, #0
	beq _02015F38
	ldr r1, _02015F60 ; =FUN_02015c7c
	mov r0, r5
	bl FUN_02015a94
	pop {r3, r4, r5, pc}
	.align 2, 0_02015F5C: .word 0x020976E4
_02015F60: .word FUN_02015c7c

	arm_func_start FUN_02015f64
FUN_02015f64: ; 0x02015F64
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x14
	ldr ip, _02015FF4 ; =0x02FFFC80
	mov r4, r0
	ldrh r1, [ip, #0x58]
	ldrh r2, [ip, #0x5a]
	ldrh r0, [ip, #0x5e]
	cmp r1, #0
	ldrh lr, [ip, #0x60]
	cmpeq r0, #0
	cmpeq r2, #0
	ldrb r3, [ip, #0x5c]
	ldrb r5, [ip, #0x5d]
	ldrb r6, [ip, #0x62]
	ldrb ip, [ip, #0x63]
	cmpeq lr, #0
	beq _02015FC8
	str r5, [sp]
	stmib sp, {r0, lr}
	str r6, [sp, #0xc]
	mov r0, r4
	str ip, [sp, #0x10]
	bl FUN_020163a4
	cmp r0, #0
	beq _02015FE8
	arm_func_end FUN_02015f64
_02015FC8:
	mov r0, #0
	add sp, sp, #0x14
	strh r0, [r4]
	strh r0, [r4, #2]
	strh r0, [r4, #4]
	strh r0, [r4, #6]
	mov r0, #1
	pop {r3, r4, r5, r6, pc}
_02015FE8:
	mov r0, #1
	add sp, sp, #0x14
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02015FF4: .word 0x02FFFC80

	arm_func_start FUN_02015ff8
FUN_02015ff8: ; 0x02015FF8
	push {r4, r5, r6, lr}
	ldr r6, _020160DC ; =0x020976E4
	movs r5, r0
	mov r4, #0
	strheq r4, [r6, #0x34]
	popeq {r4, r5, r6, pc}
	bl FUN_02003da8
	ldrsh ip, [r5, #4]
	cmp ip, #0
	beq _02016064
	ldr r3, _020160E0 ; =0x04000280
	mov r1, #0x10000000
	strh r4, [r3]
	str r1, [r3, #0x10]
	ldrsh r1, [r5]
	str ip, [r3, #0x18]
	mov r2, r4
	str r2, [r3, #0x1c]
	str r1, [r6, #0x1c]
	str ip, [r6, #0x20]
	arm_func_end FUN_02015ff8
_02016048:
	ldrh r1, [r3]
	tst r1, #0x8000
	bne _02016048
	ldr r1, _020160E4 ; =0x040002A0
	ldr r1, [r1]
	str r1, [r6, #0x24]
	b _02016070
_02016064:
	str r4, [r6, #0x1c]
	str r4, [r6, #0x20]
	str r4, [r6, #0x24]
_02016070:
	ldrsh ip, [r5, #6]
	cmp ip, #0
	beq _020160C0
	ldr r3, _020160E0 ; =0x04000280
	mov r1, #0x10000000
	strh r4, [r3]
	str r1, [r3, #0x10]
	ldrsh r1, [r5, #2]
	str ip, [r3, #0x18]
	mov r2, #0
	str r2, [r3, #0x1c]
	str r1, [r6, #0x28]
	str ip, [r6, #0x2c]
_020160A4:
	ldrh r1, [r3]
	tst r1, #0x8000
	bne _020160A4
	ldr r1, _020160E4 ; =0x040002A0
	ldr r1, [r1]
	str r1, [r6, #0x30]
	b _020160CC
_020160C0:
	str r4, [r6, #0x28]
	str r4, [r6, #0x2c]
	str r4, [r6, #0x30]
_020160CC:
	bl FUN_02003dbc
	mov r0, #1
	strh r0, [r6, #0x34]
	pop {r4, r5, r6, pc}
	.align 2, 0_020160DC: .word 0x020976E4
_020160E0: .word 0x04000280
_020160E4: .word 0x040002A0

	arm_func_start FUN_020160e8
FUN_020160e8: ; 0x020160E8
	push {r3, r4, r5, lr}
	bl FUN_02003da8
	mov r5, #0
	mov r4, r0
	mov r2, r5
	mov r0, #6
	mov r1, #0x3000000
	bl FUN_02015b04
	cmp r0, #0
	movge r5, #1
	cmp r5, #0
	bne _02016150
	mov r0, r4
	bl FUN_02003dbc
	ldr r0, _0201617C ; =0x020976E4
	ldrh r1, [r0, #0x38]
	orr r1, r1, #1
	strh r1, [r0, #0x38]
	ldr r3, [r0, #4]
	cmp r3, #0
	popeq {r3, r4, r5, pc}
	mov r0, #0
	mov r2, r0
	mov r1, #4
	blx r3
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020160e8
_02016150:
	ldr r2, _0201617C ; =0x020976E4
	ldr r1, _02016180 ; =0x0000FFFE
	ldrh r3, [r2, #0x3a]
	mov r0, r4
	orr r3, r3, #1
	strh r3, [r2, #0x3a]
	ldrh r3, [r2, #0x38]
	and r1, r3, r1
	strh r1, [r2, #0x38]
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	.align 2, 0_0201617C: .word 0x020976E4
_02016180: .word 0x0000FFFE

	arm_func_start FUN_02016184
FUN_02016184: ; 0x02016184
	push {r3, lr}
	ldr r2, _020161CC ; =0x020976E4
	ldrh r1, [r2, #0x38]
	tst r1, #1
	movne r0, #1
	popne {r3, pc}
	ldrh ip, [r2, #8]
	ldrh r3, [r2, #0xa]
	mov r1, r0
	strh ip, [r0]
	strh r3, [r0, #2]
	ldrh r3, [r2, #0xc]
	ldrh r2, [r2, #0xe]
	strh r3, [r0, #4]
	strh r2, [r0, #6]
	bl FUN_02016590
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_020161CC: .word 0x020976E4
	arm_func_end FUN_02016184

	arm_func_start FUN_020161d0
FUN_020161d0: ; 0x020161D0
	push {r4, lr}
	mov r4, r0
	mov r0, #1
	bl FUN_020166ac
	mov r0, r4
	bl FUN_02016184
	pop {r4, pc}
	arm_func_end FUN_020161d0

	arm_func_start FUN_020161ec
FUN_020161ec: ; 0x020161EC
	push {r3, r4, r5, r6, r7, lr}
	ldr ip, _020162EC ; =0x020976E4
	mov r5, #0
	str r2, [ip, #0x14]
	mov r6, r1
	strh r5, [ip, #0x10]
	strh r6, [ip, #0x12]
	mov r4, r0
	strh r3, [ip, #0x18]
	cmp r3, #0
	bls _02016234
	mov r1, r5
	arm_func_end FUN_020161ec
_0201621C:
	ldr r0, [ip, #0x14]
	add r0, r0, r5, lsl #3
	add r5, r5, #1
	strh r1, [r0, #4]
	cmp r5, r3
	blo _0201621C
_02016234:
	bl FUN_02003da8
	and r1, r6, #0xff
	orr r1, r1, #0x100
	mov r7, #0
	mov r5, #6
	mov r6, r0
	mov r0, r5
	mov r2, r7
	orr r1, r1, #0x2000000
	bl FUN_02015b04
	cmp r0, #0
	blt _02016280
	orr r1, r4, #0x10000
	mov r0, r5
	mov r2, r7
	orr r1, r1, #0x1000000
	bl FUN_02015b04
	cmp r0, #0
	movge r7, #1
_02016280:
	tst r7, #0xff
	bne _020162C0
	mov r0, r6
	bl FUN_02003dbc
	ldr r0, _020162EC ; =0x020976E4
	ldrh r1, [r0, #0x38]
	orr r1, r1, #2
	strh r1, [r0, #0x38]
	ldr r3, [r0, #4]
	cmp r3, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, #1
	mov r1, #4
	mov r2, #0
	blx r3
	pop {r3, r4, r5, r6, r7, pc}
_020162C0:
	ldr r2, _020162EC ; =0x020976E4
	ldr r1, _020162F0 ; =0x0000FFFD
	ldrh r3, [r2, #0x3a]
	mov r0, r6
	orr r3, r3, #2
	strh r3, [r2, #0x3a]
	ldrh r3, [r2, #0x38]
	and r1, r3, r1
	strh r1, [r2, #0x38]
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020162EC: .word 0x020976E4
_020162F0: .word 0x0000FFFD

	arm_func_start FUN_020162f4
FUN_020162f4: ; 0x020162F4
	push {r3, r4, r5, lr}
	bl FUN_02003da8
	mov r5, #0
	mov r4, r0
	ldr r1, _02016388 ; =0x03000200
	mov r2, r5
	mov r0, #6
	bl FUN_02015b04
	cmp r0, #0
	movge r5, #1
	cmp r5, #0
	bne _0201635C
	mov r0, r4
	bl FUN_02003dbc
	ldr r0, _0201638C ; =0x020976E4
	ldrh r1, [r0, #0x38]
	orr r1, r1, #4
	strh r1, [r0, #0x38]
	ldr r3, [r0, #4]
	cmp r3, #0
	popeq {r3, r4, r5, pc}
	mov r0, #2
	mov r1, #4
	mov r2, #0
	blx r3
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020162f4
_0201635C:
	ldr r2, _0201638C ; =0x020976E4
	ldr r1, _02016390 ; =0x0000FFFB
	ldrh r3, [r2, #0x3a]
	mov r0, r4
	orr r3, r3, #4
	strh r3, [r2, #0x3a]
	ldrh r3, [r2, #0x38]
	and r1, r3, r1
	strh r1, [r2, #0x38]
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	.align 2, 0_02016388: .word 0x03000200
_0201638C: .word 0x020976E4
_02016390: .word 0x0000FFFB

	arm_func_start FUN_02016394
FUN_02016394: ; 0x02016394
	ldr r0, _020163A0 ; =0x020976E4
	ldrh r0, [r0, #0x10]
	bx lr
	.align 2, 0_020163A0: .word 0x020976E4
	arm_func_end FUN_02016394

	arm_func_start FUN_020163a4
FUN_020163a4: ; 0x020163A4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	mov r8, r2
	cmp sb, #0x1000
	cmplo r8, #0x1000
	ldrhlo r4, [sp, #0x2c]
	mov r7, r3
	mov sl, r0
	cmplo r4, #0x1000
	ldrhlo r3, [sp, #0x30]
	cmplo r3, #0x1000
	movhs r0, #1
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, #0x100
	ldrhlo r2, [sp, #0x34]
	cmplo r2, #0x100
	ldrhlo r1, [sp, #0x28]
	cmplo r1, #0xc0
	ldrhlo r0, [sp, #0x38]
	cmplo r0, #0xc0
	movhs r0, #1
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, r2
	cmpne r1, r0
	cmpne sb, r4
	cmpne r8, r3
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_02003da8
	ldrh lr, [sp, #0x2c]
	ldrh ip, [sp, #0x34]
	ldr r3, _02016588 ; =0x04000280
	sub r1, sb, lr
	mov r2, #0
	strh r2, [r3]
	lsl r1, r1, #8
	str r1, [r3, #0x10]
	sub r2, r7, ip
	ldrh r4, [sp, #0x38]
	ldrh r5, [sp, #0x28]
	str r2, [r3, #0x18]
	mov r1, #0
	sub r2, r5, r4
	ldrh r6, [sp, #0x30]
	str r1, [r3, #0x1c]
	str r2, [sp]
	sub r1, r8, r6
	arm_func_end FUN_020163a4
_02016460:
	ldrh r2, [r3]
	tst r2, #0x8000
	bne _02016460
	lsl fp, r1, #8
	ldr r1, _0201658C ; =0x040002A0
	ldr r2, [r1]
	mov r1, #0
	strh r1, [r3]
	ldr r1, _0201658C ; =0x040002A0
	cmp r2, #0x8000
	str fp, [r1, #-0x10]
	sub r3, r1, #8
	ldr r1, [sp]
	mov fp, #0
	stm r3, {r1, fp}
	bge _020164B0
	mov r1, fp
	sub r1, r1, #0x8000
	cmp r2, r1
	bge _020164BC
_020164B0:
	bl FUN_02003dbc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020164BC:
	strh r2, [sl, #4]
	ldrsh r2, [sl, #4]
	add r1, r7, ip
	add r3, sb, lr
	mul r1, r2, r1
	rsb r1, r1, r3, lsl #8
	lsl r1, r1, #9
	asr r2, r1, #0x10
	cmp r2, #0x8000
	bge _020164F4
	mov r1, fp
	sub r1, r1, #0x8000
	cmp r2, r1
	bge _02016500
_020164F4:
	bl FUN_02003dbc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02016500:
	ldr r1, _0201658C ; =0x040002A0
	strh r2, [sl]
	sub r2, r1, #0x20
_0201650C:
	ldrh r1, [r2]
	tst r1, #0x8000
	bne _0201650C
	ldr r1, _0201658C ; =0x040002A0
	ldr r7, [r1]
	bl FUN_02003dbc
	cmp r7, #0x8000
	bge _0201653C
	mov r1, #0x8000
	rsb r1, r1, #0
	cmp r7, r1
	bge _02016544
_0201653C:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02016544:
	strh r7, [sl, #6]
	ldrsh r2, [sl, #6]
	add r0, r5, r4
	add r3, r8, r6
	mul r0, r2, r0
	rsb r0, r0, r3, lsl #8
	lsl r0, r0, #9
	asr r0, r0, #0x10
	cmp r0, #0x8000
	bge _02016574
	cmp r0, r1
	bge _0201657C
_02016574:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0201657C:
	strh r0, [sl, #2]
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02016588: .word 0x04000280
_0201658C: .word 0x040002A0

	arm_func_start FUN_02016590
FUN_02016590: ; 0x02016590
	push {r4, r5, r6, lr}
	ldr r2, _020166A4 ; =0x020976E4
	ldrh r2, [r2, #0x34]
	cmp r2, #0
	bne _020165C8
	ldrh r4, [r1]
	ldrh r3, [r1, #2]
	ldrh r2, [r1, #4]
	ldrh r1, [r1, #6]
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r1, [r0, #6]
	strh r4, [r0]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02016590
_020165C8:
	ldrh r4, [r1, #4]
	ldrh r3, [r1, #6]
	ldr r2, _020166A8 ; =0x02097700
	cmp r4, #0
	moveq r1, #0
	strh r3, [r0, #6]
	strheq r1, [r0]
	strheq r1, [r0, #2]
	strh r4, [r0, #4]
	popeq {r4, r5, r6, pc}
	ldrh r4, [r1]
	ldr r3, [r2]
	ldr lr, [r2, #8]
	lsl r4, r4, #2
	subs ip, r4, r3
	asr r3, r3, #0x1f
	rsc r3, r3, r4, asr #31
	umull r6, r5, lr, ip
	mla r5, lr, r3, r5
	asr r3, lr, #0x1f
	mla r5, r3, ip, r5
	lsr r3, r6, #0x16
	orr r3, r3, r5, lsl #10
	strh r3, [r0]
	ldrsh r3, [r0]
	cmp r3, #0
	movlt r3, #0
	strhlt r3, [r0]
	blt _02016648
	cmp r3, #0xff
	movgt r3, #0xff
	strhgt r3, [r0]
_02016648:
	ldrh r3, [r1, #2]
	ldr r1, [r2, #0xc]
	ldr ip, [r2, #0x14]
	lsl r2, r3, #2
	subs r3, r2, r1
	asr r1, r1, #0x1f
	rsc r1, r1, r2, asr #31
	umull r4, lr, ip, r3
	mla lr, ip, r1, lr
	asr r1, ip, #0x1f
	mla lr, r1, r3, lr
	lsr r1, r4, #0x16
	orr r1, r1, lr, lsl #10
	strh r1, [r0, #2]
	ldrsh r1, [r0, #2]
	cmp r1, #0
	movlt r1, #0
	strhlt r1, [r0, #2]
	poplt {r4, r5, r6, pc}
	cmp r1, #0xbf
	movgt r1, #0xbf
	strhgt r1, [r0, #2]
	pop {r4, r5, r6, pc}
	.align 2, 0_020166A4: .word 0x020976E4
_020166A8: .word 0x02097700

	arm_func_start FUN_020166ac
FUN_020166ac: ; 0x020166AC
	ldr r1, _020166C0 ; =0x020976E4
	arm_func_end FUN_020166ac
_020166B0:
	ldrh r2, [r1, #0x3a]
	tst r2, r0
	bne _020166B0
	bx lr
	.align 2, 0_020166C0: .word 0x020976E4

	arm_func_start FUN_020166c4
FUN_020166c4: ; 0x020166C4
	ldr r1, _020166D4 ; =0x020976E4
	ldrh r1, [r1, #0x38]
	and r0, r1, r0
	bx lr
	.align 2, 0_020166D4: .word 0x020976E4
	arm_func_end FUN_020166c4

	arm_func_start FUN_020166d8
FUN_020166d8: ; 0x020166D8
	push {r4, r5, r6, lr}
	ldr r4, _02016750 ; =0x0209774C
	ldr r0, [r4]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	ldr r6, _02016754 ; =0x04000208
	ldr r5, _02016758 ; =0x0208EE9C
	arm_func_end FUN_020166d8
_020166F4:
	ldr r0, [r5]
	tst r0, #2
	beq _0201670C
	bl FUN_02003e0c
	cmp r0, #0x12
	beq _0201673C
_0201670C:
	ldr r0, [r5]
	tst r0, #4
	beq _02016724
	bl FUN_02003e00
	cmp r0, #0x80
	beq _0201673C
_02016724:
	ldr r0, [r5]
	tst r0, #8
	beq _02016740
	ldrh r0, [r6]
	cmp r0, #0
	bne _02016740
_0201673C:
	bl FUN_02015b7c
_02016740:
	ldr r0, [r4]
	cmp r0, #0
	bne _020166F4
	pop {r4, r5, r6, pc}
	.align 2, 0_02016750: .word 0x0209774C
_02016754: .word 0x04000208
_02016758: .word 0x0208EE9C

	arm_func_start FUN_0201675c
FUN_0201675c: ; 0x0201675C
	cmp r1, #0
	strne r0, [r1]
	bx lr
	arm_func_end FUN_0201675c

	arm_func_start FUN_02016768
FUN_02016768: ; 0x02016768
	push {r3, lr}
	ldr r2, _02016794 ; =0x02097720
	mov r3, #0
	ldr ip, [r2, #0x30]
	ldr r1, [r2, #0x34]
	cmp ip, #0
	str r3, [r2, #0x2c]
	popeq {r3, pc}
	str r3, [r2, #0x30]
	blx ip
	pop {r3, pc}
	.align 2, 0_02016794: .word 0x02097720
	arm_func_end FUN_02016768

	arm_func_start FUN_02016798
FUN_02016798: ; 0x02016798
	stmdb sp!, {r3}
	sub sp, sp, #4
	ldr r2, _020167C8 ; =0x02FFFC3C
	ldr r0, [r2]
	str r0, [sp]
	arm_func_end FUN_02016798
_020167AC:
	ldr r1, [r2]
	ldr r0, [sp]
	cmp r0, r1
	beq _020167AC
	add sp, sp, #4
	ldm sp!, {r3}
	bx lr
	.align 2, 0_020167C8: .word 0x02FFFC3C

	arm_func_start FUN_020167cc
FUN_020167cc: ; 0x020167CC
	push {r4, r5, r6, lr}
	ldr r0, _02016854 ; =0x02097720
	ldrh r1, [r0]
	cmp r1, #0
	popne {r4, r5, r6, pc}
	mov r4, #1
	strh r4, [r0]
	mov r1, #0
	str r1, [r0, #0x2c]
	str r1, [r0, #0x30]
	bl FUN_0201598c
	mov r1, r4
	mov r0, #8
	bl FUN_02015ae0
	cmp r0, #0
	bne _02016830
	mov r6, #0x64
	mov r5, #8
	arm_func_end FUN_020167cc
_02016814:
	mov r0, r6
	blx FUN_020004BE
	mov r0, r5
	mov r1, r4
	bl FUN_02015ae0
	cmp r0, #0
	beq _02016814
_02016830:
	ldr r1, _02016858 ; =FUN_02016860
	mov r0, #8
	bl FUN_02015a94
	ldr r1, _0201685C ; =0x02FFFC3C
	ldr r0, _02016854 ; =0x02097720
	ldr r1, [r1]
	str r1, [r0, #8]
	str r1, [r0, #4]
	pop {r4, r5, r6, pc}
	.align 2, 0_02016854: .word 0x02097720
_02016858: .word FUN_02016860
_0201685C: .word 0x02FFFC3C

	arm_func_start FUN_02016860
FUN_02016860: ; 0x02016860
	push {r3, lr}
	and r0, r1, #0x7f00
	lsl r3, r0, #8
	and r0, r1, #0xff
	cmp r2, #0
	lsr r1, r3, #0x10
	beq _02016894
	cmp r1, #0x61
	cmpne r1, #0x62
	moveq r0, #1
	movne r0, #2
	bl FUN_02016768
	pop {r3, pc}
	arm_func_end FUN_02016860
_02016894:
	sub r1, r1, #0x60
	cmp r1, #3

	arm_func_start switchD
switchD: ; 0x0201689C
	addls pc, pc, r1, lsl #2
	b _020168DC
	arm_func_end switchD
_020168A4: ; jump table
	b LAB_020168cc ; case 0

	arm_func_start caseD_61
caseD_61: ; 0x020168A8
	b _020168B4
	arm_func_end caseD_61

	arm_func_start caseD_62
caseD_62: ; 0x020168AC
	b _020168DC
	arm_func_end caseD_62

	arm_func_start caseD_63
caseD_63: ; 0x020168B0
	b _020168D0
	arm_func_end caseD_63
_020168B4:
	ldr r1, _020168E4 ; =0x02097720
	ldr r1, [r1, #0x38]
	cmp r1, #0
	strhne r0, [r1]
_020168C4:
	mov r0, #0
	b _020168DC
LAB_020168cc:
	b _020168C4
_020168D0:
	ldr r1, _020168E4 ; =0x02097720
	mov r2, #1
	str r2, [r1, #0xc]
_020168DC:
	bl FUN_02016768
	pop {r3, pc}
	.align 2, 0_020168E4: .word 0x02097720

	arm_func_start FUN_020168e8
FUN_020168e8: ; 0x020168E8
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_02003da8
	ldr r1, _02016968 ; =0x02097720
	mov r4, r0
	ldr r2, [r1, #0x2c]
	cmp r2, #0
	beq _02016920
	bl FUN_02003dbc
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020168e8
_02016920:
	mov r0, #1
	str r0, [r1, #0x2c]
	str r6, [r1, #0x38]
	ldr r0, [sp, #0x18]
	str r5, [r1, #0x30]
	str r0, [r1, #0x34]
	cmp r7, #0
	mov r5, #0
	ble _02016958
_02016944:
	ldr r0, [r8, r5, lsl #2]
	bl FUN_02016dbc
	add r5, r5, #1
	cmp r5, r7
	blt _02016944
_02016958:
	mov r0, r4
	bl FUN_02003dbc
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02016968: .word 0x02097720

	arm_func_start FUN_0201696c
FUN_0201696c: ; 0x0201696C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov r8, #0x10000
	mov r4, #0
	ldr r5, _02016A28 ; =0x00051D23
	ldr r6, _02016A2C ; =FUN_0201675c
	mov sl, r0
	mov sb, r1
	rsb r8, r8, #0
	add r7, sp, #4
	mov fp, r4
	arm_func_end FUN_0201696c
_02016998:
	str r8, [sp, #4]
	mov r0, sl
	mov r1, sb
	mov r2, fp
	mov r3, r6
	str r7, [sp]
	bl FUN_020168e8
	cmp r0, #0
	beq _020169E4
_020169BC:
	mov r0, r5
	bl FUN_02003e24
	mov r0, sl
	mov r1, sb
	str r7, [sp]
	mov r2, r4
	mov r3, r6
	bl FUN_020168e8
	cmp r0, #0
	bne _020169BC
_020169E4:
	ldr r0, [sp, #4]
	cmp r0, r8
	bne _02016A04
_020169F0:
	mov r0, r5
	bl FUN_02003e24
	ldr r0, [sp, #4]
	cmp r0, r8
	beq _020169F0
_02016A04:
	ldr r0, [sp, #4]
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r5
	bl FUN_02003e24
	b _02016998
_02016A20:
	.byte 0x08, 0xD0, 0x8D, 0xE2, 0xF8, 0x8F, 0xBD, 0xE8
_02016A28: .word 0x00051D23
_02016A2C: .word FUN_0201675c

	arm_func_start FUN_02016a30
FUN_02016a30: ; 0x02016A30
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	ldr r2, _02016AB4 ; =0x03006000
	mov r8, r0
	mov r6, r1
	add r0, sp, #0
	mov r1, #1
	str r2, [sp]
	bl FUN_0201696c
	mov r5, #0
	mov r4, #2
	mov r7, #1
	arm_func_end FUN_02016a30
_02016A60:
	mov r0, r5
	mov r1, r4
	mov r2, r5
	mov r3, r7
	bl FUN_02017168
	cmp r0, #1
	bne _02016A60
	and r0, r8, #0xff
	orr r3, r0, #0x6200
	orr r3, r3, #0x2000000
	ldr r1, _02016AB8 ; =0x01010000
	lsl r0, r6, #0x10
	orr r2, r1, r0, lsr #16
	add r0, sp, #0
	mov r1, r4
	str r3, [sp]
	str r2, [sp, #4]
	bl FUN_0201696c
	mov r0, r5
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02016AB4: .word 0x03006000
_02016AB8: .word 0x01010000

	arm_func_start FUN_02016abc
FUN_02016abc: ; 0x02016ABC
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	and r0, r0, #0xff
	orr lr, r0, #0x6100
	lsl r0, r1, #0x10
	ldr r1, _02016B00 ; =0x01010000
	orr lr, lr, #0x2000000
	orr r1, r1, r0, lsr #16
	str r1, [sp, #8]
	ldr ip, [sp, #0x10]
	str lr, [sp, #4]
	add r0, sp, #4
	mov r1, #2
	str ip, [sp]
	bl FUN_020168e8
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0_02016B00: .word 0x01010000
	arm_func_end FUN_02016abc

	arm_func_start FUN_02016b04
FUN_02016b04: ; 0x02016B04
	push {r3, lr}
	sub sp, sp, #8
	ldr r3, _02016B38 ; =FUN_0201675c
	add ip, sp, #4
	str ip, [sp]
	bl FUN_02016abc
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, pc}
	bl FUN_020166d8
	ldr r0, [sp, #4]
	add sp, sp, #8
	pop {r3, pc}
	.align 2, 0_02016B38: .word FUN_0201675c
	arm_func_end FUN_02016b04

	arm_func_start FUN_02016b3c
FUN_02016b3c: ; 0x02016B3C
	push {r3, lr}
	mov r3, r1
	cmp r0, #1
	beq _02016B60
	cmp r0, #2
	beq _02016B70
	cmp r0, #3
	beq _02016B68
	b _02016B78
	arm_func_end FUN_02016b3c
_02016B60:
	mov r0, #1
	b _02016B7C
_02016B68:
	mov r0, #2
	b _02016B7C
_02016B70:
	mov r0, #3
	b _02016B7C
_02016B78:
	mov r0, #0
_02016B7C:
	cmp r0, #0
	ldreq r0, _02016B9C ; =0x0000FFFF
	popeq {r3, pc}
	mov r1, #0
	str r2, [sp]
	mov r2, r1
	bl FUN_02016abc
	pop {r3, pc}
	.align 2, 0_02016B9C: .word 0x0000FFFF

	arm_func_start FUN_02016ba0
FUN_02016ba0: ; 0x02016BA0
	push {r3, lr}
	ldr r1, _02016BC4 ; =FUN_0201675c
	add r2, sp, #0
	bl FUN_02016b3c
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020166d8
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0_02016BC4: .word FUN_0201675c
	arm_func_end FUN_02016ba0

	arm_func_start FUN_02016bc8
FUN_02016bc8: ; 0x02016BC8
	push {r3, lr}
	mov ip, r2
	cmp r0, #0
	mov r2, #0
	bne _02016BF0
	cmp r1, #1
	moveq r2, #6
	cmp r1, #0
	moveq r2, #7
	b _02016C24
	arm_func_end FUN_02016bc8
_02016BF0:
	cmp r0, #1
	bne _02016C0C
	cmp r1, #1
	moveq r2, #4
	cmp r1, #0
	moveq r2, #5
	b _02016C24
_02016C0C:
	cmp r0, #2
	bne _02016C24
	cmp r1, #1
	moveq r2, #8
	cmp r1, #0
	moveq r2, #9
_02016C24:
	cmp r2, #0
	ldreq r0, _02016C4C ; =0x0000FFFF
	popeq {r3, pc}
	mov r1, #0
	str r3, [sp]
	mov r0, r2
	mov r2, r1
	mov r3, ip
	bl FUN_02016abc
	pop {r3, pc}
	.align 2, 0_02016C4C: .word 0x0000FFFF

	arm_func_start FUN_02016c50
FUN_02016c50: ; 0x02016C50
	push {r3, lr}
	ldr r2, _02016C74 ; =FUN_0201675c
	add r3, sp, #0
	bl FUN_02016bc8
	cmp r0, #0
	popne {r3, pc}
	bl FUN_020166d8
	ldr r0, [sp]
	pop {r3, pc}
	.align 2, 0_02016C74: .word FUN_0201675c
	arm_func_end FUN_02016c50

	arm_func_start FUN_02016c78
FUN_02016c78: ; 0x02016C78
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020175d8
	mov r1, #0
	mov r2, r1
	mov r3, r5
	mov r0, #0xe
	str r4, [sp]
	bl FUN_02016abc
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02016c78

	arm_func_start FUN_02016ca4
FUN_02016ca4: ; 0x02016CA4
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r0, _02016CE8 ; =FUN_0201675c
	add r1, sp, #0
	bl FUN_02016c78
	cmp r0, #0
	addne sp, sp, #4
	popne {r3, r4, pc}
	ldr r4, _02016CEC ; =0x0208EE9C
	mov r0, #0xc
	str r0, [r4]
	bl FUN_020166d8
	mov r0, #2
	str r0, [r4]
	ldr r0, [sp]
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_02016CE8: .word FUN_0201675c
_02016CEC: .word 0x0208EE9C
	arm_func_end FUN_02016ca4

	arm_func_start FUN_02016cf0
FUN_02016cf0: ; 0x02016CF0
	push {r4, lr}
	bl FUN_02016ca4
	cmp r0, #0
	beq _02016D18
	ldr r4, _02016D28 ; =0x00051D23
	arm_func_end FUN_02016cf0
_02016D04:
	mov r0, r4
	bl FUN_02003e24
	bl FUN_02016ca4
	cmp r0, #0
	bne _02016D04
_02016D18:
	bl FUN_02003da8
	bl FUN_02007414
_02016D20:
	bl FUN_020041a0
	b _02016D20
	.align 2, 0_02016D28: .word 0x00051D23

	arm_func_start FUN_02016d2c
FUN_02016d2c: ; 0x02016D2C
	push {r4, lr}
	mov r4, r0
	bl FUN_020173a4
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	lsl r0, r4, #0x10
	lsr r1, r0, #0x10
	mov r0, #0x10
	mov r2, #0
	bl FUN_02016b04
	pop {r4, pc}
	arm_func_end FUN_02016d2c

	arm_func_start FUN_02016d5c
FUN_02016d5c: ; 0x02016D5C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r2, sp, #0
	mov r0, #0xf
	mov r1, #3
	bl FUN_02016b04
	cmp r0, #0
	popne {r3, r4, r5, pc}
	cmp r5, #0
	beq _02016D9C
	ldrh r1, [sp]
	tst r1, #8
	movne r1, #1
	moveq r1, #0
	str r1, [r5]
	arm_func_end FUN_02016d5c
_02016D9C:
	cmp r4, #0
	popeq {r3, r4, r5, pc}
	ldrh r1, [sp]
	tst r1, #4
	movne r1, #1
	moveq r1, #0
	str r1, [r4]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02016dbc
FUN_02016dbc: ; 0x02016DBC
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, #8
	mov r4, #0
	arm_func_end FUN_02016dbc
_02016DCC:
	mov r0, r5
	mov r1, r6
	mov r2, r4
	bl FUN_02015b04
	cmp r0, #0
	bne _02016DCC
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02016de8
FUN_02016de8: ; 0x02016DE8
	push {r4, r5, r6, lr}
	ldr r4, _02016E74 ; =0x040001A4
	ldr r5, _02016E78 ; =0x0209773C
	mov r6, #0
	arm_func_end FUN_02016de8
_02016DF8:
	mov r0, #0xc
	mul r0, r6, r0
	add r1, r0, #0x4000000
	ldr r2, [r1, #0xb8]
	add r0, r0, #0xb8
	str r2, [r5, r6, lsl #2]
	ldr r1, [r1, #0xb8]
	add r2, r0, #0x4000000
	and r0, r1, #0x38000000
	cmp r0, #0x18000000
	cmpne r0, #0x20000000
	beq _02016E40
	cmp r0, #0x28000000
	bne _02016E4C
_02016E30:
	ldr r0, [r4]
	tst r0, #0x80000000
	bne _02016E30
	b _02016E64
_02016E40:
	mov r0, r6
_02016E44:
	bl FUN_02007350
	b _02016E64
_02016E4C:
	ldr r0, [r2]
	tst r0, #0x2000000
	mov r0, r6
	bne _02016E60
	b _02016E44
_02016E60:
	bl FUN_020073ac
_02016E64:
	add r6, r6, #1
	cmp r6, #3
	bls _02016DF8
	pop {r4, r5, r6, pc}
	.align 2, 0_02016E74: .word 0x040001A4
_02016E78: .word 0x0209773C

	arm_func_start FUN_02016e7c
FUN_02016e7c: ; 0x02016E7C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	ldr r3, _02017154 ; =0x02097720
	mov r7, r0
	ldr r0, [r3, #0x10]
	str r1, [sp]
	str r2, [sp, #4]
	mov r5, #1
	mov r4, #0
	bl FUN_020174fc
	ldr r0, _02017158 ; =0x04000208
	ldrh r6, [r0]
	strh r4, [r0]
	bl FUN_02003da8
	str r0, [sp, #0x10]
	ldr r0, _0201715C ; =0x003FFFFF
	bl FUN_0200102c
	str r0, [sp, #0xc]
	bl FUN_02003398
	cmp r0, #0
	movne r0, #8
	moveq r0, r4
	orr r0, r0, #0x40000
	bl FUN_02000fd0
	ldr r0, [sp, #0x10]
	bl FUN_02003dbc
	ldr r1, _02017158 ; =0x04000208
	tst r7, #8
	ldrh r0, [r1]
	strh r5, [r1]
	beq _02016F14
	bl FUN_02003e60
	add r0, r0, #0xfe
	add r0, r0, #0xff00
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #1
	bicls r7, r7, #8
	arm_func_end FUN_02016e7c
_02016F14:
	tst r7, #0x10
	beq _02016F28
	bl FUN_0201163c
	cmp r0, #0
	biceq r7, r7, #0x10
_02016F28:
	mov r1, #0x4000000
	add r0, r1, #0x1000
	ldr fp, [r1]
	ldr r5, [r0]
	bl FUN_020173a4
	add sb, sp, #0x14
	add sl, sp, #0x18
	str r0, [sp, #8]
	mov r0, sl
	mov r1, sb
	bl FUN_02016d5c
	cmp r0, #0
	beq _02016F7C
	ldr r8, _02017160 ; =0x00051D23
_02016F60:
	mov r0, r8
	bl FUN_02003e24
	mov r0, sl
	mov r1, sb
	bl FUN_02016d5c
	cmp r0, #0
	bne _02016F60
_02016F7C:
	mov r0, #2
	mov r1, #0
	bl FUN_02016c50
	cmp r0, #0
	beq _02016FB8
	ldr sl, _02017160 ; =0x00051D23
	mov sb, #2
	mov r8, #0
_02016F9C:
	mov r0, sl
	bl FUN_02003e24
	mov r0, sb
	mov r1, r8
	bl FUN_02016c50
	cmp r0, #0
	bne _02016F9C
_02016FB8:
	bl FUN_02016798
	mov r2, #0x4000000
	ldr r0, [r2]
	add r1, r2, #0x1000
	bic r0, r0, #0x30000
	str r0, [r2]
	ldr r0, [r1]
	bic r0, r0, #0x10000
	str r0, [r1]
	bl FUN_02016798
	bl FUN_02016798
	bl FUN_02016de8
	ldr r1, [sp, #0x14]
	ldr r0, _02017154 ; =0x02097720
	mov r8, #0
	str r8, [r0, #0xc]
	cmp r1, #0
	ldr r0, [sp, #0x18]
	movne r8, #0x80
	cmp r0, #0
	mov sb, #0x40
	mov r0, #0x40000
	moveq sb, #0
	bl FUN_02000fd0
	ldr r1, [sp]
	ldr r0, [sp, #4]
	orr r1, r1, r0
	orr r0, r7, sb
	orr r0, r0, r8
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	lsr r0, r0, #0x10
	lsr r1, r1, #0x10
	bl FUN_02016a30
	ldr r8, _02017154 ; =0x02097720
	ldr r0, [r8, #0xc]
	cmp r0, #0
	bne _02017060
_02017050:
	bl FUN_020041a0
	ldr r0, [r8, #0xc]
	cmp r0, #0
	beq _02017050
_02017060:
	mov r8, #0
	bl FUN_02003398
	cmp r0, #0
	movne r0, #8
	moveq r0, r8
	orr r0, r0, #0x40000
	bl FUN_02000fd0
	tst r7, #8
	beq _02017094
	ldr r0, _02017164 ; =0x04000214
	ldr r0, [r0]
	tst r0, #0x100000
	movne r4, #1
_02017094:
	cmp r4, #0
	mov r7, #1
	bne _02017108
	ldr r0, [sp, #8]
	cmp r0, #1
	bne _020170CC
_020170AC:
	mov r0, r7
	mov r1, r7
	mov r2, r7
	mov r3, r7
	bl FUN_02017168
	cmp r0, #1
	bne _020170AC
	b _020170F8
_020170CC:
	mov r0, r7
	bl FUN_02016ba0
	cmp r0, #0
	beq _020170F8
	ldr sb, _02017160 ; =0x00051D23
_020170E0:
	mov r0, sb
	bl FUN_02003e24
	mov r0, r7
	bl FUN_02016ba0
	cmp r0, #0
	bne _020170E0
_020170F8:
	mov r0, #0x4000000
	str fp, [r0]
	add r0, r0, #0x1000
	str r5, [r0]
_02017108:
	mov r0, #0x360000
	bl FUN_02003e24
	ldr r5, _02017158 ; =0x04000208
	ldrh r0, [r5]
	ldr r0, [sp, #0xc]
	strh r8, [r5]
	bl FUN_02000fd0
	ldr r0, [sp, #0x10]
	bl FUN_02003dbc
	ldrh r0, [r5]
	cmp r4, #0
	strh r6, [r5]
	beq _02017140
	bl FUN_02016cf0
_02017140:
	ldr r0, _02017154 ; =0x02097720
	ldr r0, [r0, #0x18]
	bl FUN_020174fc
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02017154: .word 0x02097720
_02017158: .word 0x04000208
_0201715C: .word 0x003FFFFF
_02017160: .word 0x00051D23
_02017164: .word 0x04000214

	arm_func_start FUN_02017168
FUN_02017168: ; 0x02017168
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r1
	mov r6, r3
	cmp r0, #0
	ldr r5, _02017354 ; =0x00051D23
	mov r4, #0
	beq _02017268
	cmp r0, #1
	bne _0201734C
	cmp r2, #0
	bne _020171B4
	ldr r1, _02017358 ; =0x02FFFC3C
	ldr r0, _0201735C ; =0x02097720
	ldr r1, [r1]
	ldr r0, [r0, #4]
	sub r0, r1, r0
	cmp r0, #7
	movls r0, r4
	popls {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02017168
_020171B4:
	cmp r7, #0
	beq _02017228
	cmp r6, #0
	beq _020171F0
	mov r0, r7
	bl FUN_02016ba0
	cmp r0, #0
	beq _02017228
_020171D4:
	mov r0, r5
	bl FUN_02003e24
	mov r0, r7
	bl FUN_02016ba0
	cmp r0, #0
	bne _020171D4
	b _02017228
_020171F0:
	mov r1, #0
	mov r0, r7
	mov r2, r1
	bl FUN_02016b3c
	cmp r0, #0
	beq _02017228
_02017208:
	mov r0, r5
	bl FUN_02003e24
	mov r0, r7
	mov r1, r4
	mov r2, r4
	bl FUN_02016b3c
	cmp r0, #0
	bne _02017208
_02017228:
	ldr r1, _02017360 ; =0x04000304
	ldr r4, _0201735C ; =0x02097720
	ldrh r0, [r1]
	orr r0, r0, #1
	strh r0, [r1]
	ldr r0, [r4, #0x14]
	bl FUN_02016d2c
	cmp r0, #0
	beq _0201734C
_0201724C:
	mov r0, r5
	bl FUN_02003e24
	ldr r0, [r4, #0x14]
	bl FUN_02016d2c
	cmp r0, #0
	bne _0201724C
	b _0201734C
_02017268:
	mov r0, r4
	bl FUN_02016d2c
	cmp r0, #0
	beq _02017290
_02017278:
	mov r0, r5
	bl FUN_02003e24
	mov r0, r4
	bl FUN_02016d2c
	cmp r0, #0
	bne _02017278
_02017290:
	ldr r1, _02017358 ; =0x02FFFC3C
	ldr r0, _0201735C ; =0x02097720
	ldr r1, [r1]
	ldr r0, [r0, #8]
	sub r0, r1, r0
	cmp r0, #2
	bhi _020172B4
	bl FUN_02016798
	bl FUN_02016798
_020172B4:
	ldr ip, _02017360 ; =0x04000304
	ldr r0, _02017364 ; =0x0000FFFE
	ldrh r3, [ip]
	ldr r2, _02017358 ; =0x02FFFC3C
	ldr r1, _0201735C ; =0x02097720
	and r0, r3, r0
	strh r0, [ip]
	ldr r0, [r2]
	cmp r7, #0
	str r0, [r1, #4]
	beq _0201734C
	cmp r6, #0
	beq _02017314
	mov r0, r7
	bl FUN_02016ba0
	cmp r0, #0
	beq _0201734C
_020172F8:
	mov r0, r5
	bl FUN_02003e24
	mov r0, r7
	bl FUN_02016ba0
	cmp r0, #0
	bne _020172F8
	b _0201734C
_02017314:
	mov r1, #0
	mov r0, r7
	mov r2, r1
	bl FUN_02016b3c
	cmp r0, #0
	beq _0201734C
_0201732C:
	mov r0, r5
	bl FUN_02003e24
	mov r0, r7
	mov r1, r4
	mov r2, r4
	bl FUN_02016b3c
	cmp r0, #0
	bne _0201732C
_0201734C:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02017354: .word 0x00051D23
_02017358: .word 0x02FFFC3C
_0201735C: .word 0x02097720
_02017360: .word 0x04000304
_02017364: .word 0x0000FFFE

	arm_func_start FUN_02017368
FUN_02017368: ; 0x02017368
	push {r4, lr}
	mov r4, r0
	cmp r4, #1
	beq _0201738C
	mov r4, #0
	bl FUN_0200444c
	cmp r0, #0
	beq _0201738C
	bl FUN_0200445c
	arm_func_end FUN_02017368
_0201738C:
	mov r1, #0
	mov r0, r4
	mov r2, r1
	mov r3, #1
	bl FUN_02017168
	pop {r4, pc}

	arm_func_start FUN_020173a4
FUN_020173a4: ; 0x020173A4
	ldr r0, _020173BC ; =0x04000304
	ldrh r0, [r0]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	.align 2, 0_020173BC: .word 0x04000304
	arm_func_end FUN_020173a4

	arm_func_start FUN_020173c0
FUN_020173c0: ; 0x020173C0
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	ldr ip, _020173D8 ; =FUN_02016b04
	mov r0, #0x12
	mov r2, #0
	bx ip
	.align 2, 0_020173D8: .word FUN_02016b04
	arm_func_end FUN_020173c0

	arm_func_start FUN_020173dc
FUN_020173dc: ; 0x020173DC
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, r0
	add r2, sp, #0
	mov r0, #0xf
	mov r1, #8
	bl FUN_02016b04
	cmp r0, #0
	addne sp, sp, #4
	popne {r3, r4, pc}
	cmp r4, #0
	ldrhne r1, [sp]
	strne r1, [r4]
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_020173dc

	arm_func_start LAB_02017418
LAB_02017418: ; 0x02017418
	push {r3, r4, r5, r6, r7, lr}
	movs r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	popeq {r3, r4, r5, r6, r7, pc}
	str r5, [r6, #8]
	bl FUN_02003da8
	ldr r2, [r7]
	mov r3, #0
	cmp r2, #0
	beq _02017480
	arm_func_end LAB_02017418
_02017448:
	cmp r4, #0
	bne _0201745C
	ldr r1, [r2, #8]
	cmp r1, r5
	bgt _02017480
_0201745C:
	cmp r4, #1
	bne _02017470
	ldr r1, [r2, #8]
	cmp r1, r5
	bge _02017480
_02017470:
	mov r3, r2
	ldr r2, [r2, #0xc]
	cmp r2, #0
	bne _02017448
_02017480:
	cmp r2, #0
	strne r2, [r6, #0xc]
	moveq r1, #0
	streq r1, [r6, #0xc]
	cmp r3, #0
	strne r6, [r3, #0xc]
	streq r6, [r7]
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020174a4
FUN_020174a4: ; 0x020174A4
	push {r3, r4, r5, lr}
	movs r5, r0
	mov r4, r1
	popeq {r3, r4, r5, pc}
	bl FUN_02003da8
	ldr r1, [r5]
	mov r2, r1
	cmp r1, #0
	beq _020174F4
	arm_func_end FUN_020174a4
_020174C8:
	cmp r1, r4
	bne _020174E4
	cmp r1, r2
	ldr r1, [r1, #0xc]
	streq r1, [r5]
	strne r1, [r2, #0xc]
	b _020174F4
_020174E4:
	mov r2, r1
	ldr r1, [r1, #0xc]
	cmp r1, #0
	bne _020174C8
_020174F4:
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}

	arm_func_start FUN_020174fc
FUN_020174fc: ; 0x020174FC
	push {r4, lr}
	movs r4, r0
	popeq {r4, pc}
	arm_func_end FUN_020174fc
_02017508:
	ldr r0, [r4, #4]
	ldr r1, [r4]
	blx r1
	ldr r4, [r4, #0xc]
	cmp r4, #0
	bne _02017508
	pop {r4, pc}

	arm_func_start FUN_02017524
FUN_02017524: ; 0x02017524
	mov r1, r0
	ldr r0, _0201753C ; =0x02097730
	ldr ip, _02017540 ; =LAB_02017418
	mov r2, #0xff
	mov r3, #0
	bx ip
	.align 2, 0_0201753C: .word 0x02097730
_02017540: .word LAB_02017418
	arm_func_end FUN_02017524

	arm_func_start FUN_02017544
FUN_02017544: ; 0x02017544
	mov r1, r0
	ldr r0, _0201755C ; =0x02097730
	ldr ip, _02017560 ; =LAB_02017418
	mvn r2, #0xfe
	mov r3, #1
	bx ip
	.align 2, 0_0201755C: .word 0x02097730
_02017560: .word LAB_02017418
	arm_func_end FUN_02017544

	arm_func_start FUN_02017564
FUN_02017564: ; 0x02017564
	mov r1, r0
	ldr r0, _0201757C ; =0x02097738
	ldr ip, _02017580 ; =LAB_02017418
	mov r2, #0xff
	mov r3, #0
	bx ip
	.align 2, 0_0201757C: .word 0x02097738
_02017580: .word LAB_02017418
	arm_func_end FUN_02017564

	arm_func_start LAB_02017584
LAB_02017584: ; 0x02017584
	mov r3, r0
	mov r2, r1
	mov r1, r3
	ldr r0, _020175A0 ; =0x02097730
	ldr ip, _020175A4 ; =LAB_02017418
	mov r3, #0
	bx ip
	.align 2, 0_020175A0: .word 0x02097730
_020175A4: .word LAB_02017418
	arm_func_end LAB_02017584

	arm_func_start FUN_020175a8
FUN_020175a8: ; 0x020175A8
	mov r1, r0
	ldr r0, _020175B8 ; =0x02097730
	ldr ip, _020175BC ; =FUN_020174a4
	bx ip
	.align 2, 0_020175B8: .word 0x02097730
_020175BC: .word FUN_020174a4
	arm_func_end FUN_020175a8

	arm_func_start FUN_020175c0
FUN_020175c0: ; 0x020175C0
	mov r1, r0
	ldr r0, _020175D0 ; =0x02097738
	ldr ip, _020175D4 ; =FUN_020174a4
	bx ip
	.align 2, 0_020175D0: .word 0x02097738
_020175D4: .word FUN_020174a4
	arm_func_end FUN_020175c0

	arm_func_start FUN_020175d8
FUN_020175d8: ; 0x020175D8
	push {r3, r4, r5, r6, r7, lr}
	mov r0, #0x360000
	bl FUN_02003e24
	ldr r0, _02017678 ; =0x0208EE9C
	mov r1, #0xe
	ldr r4, [r0]
	str r1, [r0]
	bl FUN_020173a4
	cmp r0, #1
	beq _0201766C
	mov r0, #2
	mov r1, #0
	bl FUN_02016c50
	cmp r0, #0
	beq _0201763C
	ldr r7, _0201767C ; =0x00051D23
	mov r6, #2
	mov r5, #0
	arm_func_end FUN_020175d8
_02017620:
	mov r0, r7
	bl FUN_02003e24
	mov r0, r6
	mov r1, r5
	bl FUN_02016c50
	cmp r0, #0
	bne _02017620
_0201763C:
	mov r0, #1
	bl FUN_02017368
	cmp r0, #0
	bne _0201766C
	mov r6, #5
	mov r5, #1
_02017654:
	mov r0, r6
	bl FUN_02003e24
	mov r0, r5
	bl FUN_02017368
	cmp r0, #0
	beq _02017654
_0201766C:
	ldr r0, _02017678 ; =0x0208EE9C
	str r4, [r0]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02017678: .word 0x0208EE9C
_0201767C: .word 0x00051D23

	arm_func_start FUN_02017680
FUN_02017680: ; 0x02017680
	ldr r1, _02017694 ; =0x02FFFC3C
	ldr r0, _02017698 ; =0x02097720
	ldr r1, [r1]
	str r1, [r0, #8]
	bx lr
	.align 2, 0_02017694: .word 0x02FFFC3C
_02017698: .word 0x02097720
	arm_func_end FUN_02017680

	arm_func_start FUN_0201769c
FUN_0201769c: ; 0x0201769C
	mov r2, #0
	str r2, [r0]
	str r2, [r0, #4]
	strh r2, [r0, #8]
	strh r1, [r0, #0xa]
	bx lr
	arm_func_end FUN_0201769c

	arm_func_start FUN_020176b4
FUN_020176b4: ; 0x020176B4
	ldrh r3, [r0, #0xa]
	mov r2, #0
	add ip, r1, r3
	str r2, [ip, #4]
	str r2, [r1, r3]
	ldrh r2, [r0, #8]
	str r1, [r0]
	str r1, [r0, #4]
	add r1, r2, #1
	strh r1, [r0, #8]
	bx lr
	arm_func_end FUN_020176b4

	arm_func_start FUN_020176e0
FUN_020176e0: ; 0x020176E0
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	bne _020176F8
	bl FUN_020176b4
	pop {r3, pc}
	arm_func_end FUN_020176e0
_020176F8:
	ldrh ip, [r0, #0xa]
	ldr r3, [r0, #4]
	mov r2, #0
	str r3, [r1, ip]
	add r3, r1, ip
	str r2, [r3, #4]
	ldrh r2, [r0, #0xa]
	ldr r3, [r0, #4]
	add r2, r3, r2
	str r1, [r2, #4]
	ldrh r2, [r0, #8]
	str r1, [r0, #4]
	add r1, r2, #1
	strh r1, [r0, #8]
	pop {r3, pc}

	arm_func_start FUN_02017734
FUN_02017734: ; 0x02017734
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	bne _0201774C
	bl FUN_020176b4
	pop {r3, pc}
	arm_func_end FUN_02017734
_0201774C:
	ldrh r3, [r0, #0xa]
	mov r2, #0
	str r2, [r1, r3]
	ldr r2, [r0]
	add r3, r1, r3
	str r2, [r3, #4]
	ldrh r2, [r0, #0xa]
	ldr r3, [r0]
	str r1, [r3, r2]
	ldrh r2, [r0, #8]
	str r1, [r0]
	add r1, r2, #1
	strh r1, [r0, #8]
	pop {r3, pc}

	arm_func_start FUN_02017784
FUN_02017784: ; 0x02017784
	push {r3, lr}
	cmp r1, #0
	bne _0201779C
	mov r1, r2
	bl FUN_020176e0
	pop {r3, pc}
	arm_func_end FUN_02017784
_0201779C:
	ldr r3, [r0]
	cmp r1, r3
	bne _020177B4
	mov r1, r2
	bl FUN_02017734
	pop {r3, pc}
_020177B4:
	ldrh lr, [r0, #0xa]
	ldr r3, [r1, lr]
	add ip, r2, lr
	str r3, [r2, lr]
	str r1, [ip, #4]
	add r3, r3, lr
	str r2, [r3, #4]
	ldrh r3, [r0, #0xa]
	str r2, [r1, r3]
	ldrh r1, [r0, #8]
	add r1, r1, #1
	strh r1, [r0, #8]
	pop {r3, pc}

	arm_func_start FUN_020177e8
FUN_020177e8: ; 0x020177E8
	push {r3, lr}
	ldrh ip, [r0, #0xa]
	ldr r3, [r1, ip]
	add lr, r1, ip
	cmp r3, #0
	ldreq r1, [lr, #4]
	streq r1, [r0]
	ldrne r2, [lr, #4]
	addne r1, r3, ip
	strne r2, [r1, #4]
	ldr r3, [lr, #4]
	cmp r3, #0
	ldreq r1, [lr]
	streq r1, [r0, #4]
	ldrhne r1, [r0, #0xa]
	ldrne r2, [lr]
	strne r2, [r3, r1]
	mov r1, #0
	str r1, [lr]
	str r1, [lr, #4]
	ldrh r1, [r0, #8]
	sub r1, r1, #1
	strh r1, [r0, #8]
	pop {r3, pc}
	arm_func_end FUN_020177e8

	arm_func_start FUN_02017848
FUN_02017848: ; 0x02017848
	cmp r1, #0
	ldreq r0, [r0]
	ldrhne r0, [r0, #0xa]
	addne r0, r1, r0
	ldrne r0, [r0, #4]
	bx lr
	arm_func_end FUN_02017848

	arm_func_start FUN_02017860
FUN_02017860: ; 0x02017860
	cmp r1, #0
	ldreq r0, [r0, #4]
	ldrhne r0, [r0, #0xa]
	ldrne r0, [r1, r0]
	bx lr
	arm_func_end FUN_02017860

	arm_func_start FUN_02017874
FUN_02017874: ; 0x02017874
	push {r4, r5, r6, lr}
	mov r4, #0
	mov r5, r1
	mov r1, r4
	mov r6, r0
	bl FUN_02017848
	movs r1, r0
	beq _020178B4
	arm_func_end FUN_02017874
_02017894:
	cmp r4, r5
	moveq r0, r1
	popeq {r4, r5, r6, pc}
	mov r0, r6
	add r4, r4, #1
	bl FUN_02017848
	movs r1, r0
	bne _02017894
_020178B4:
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020178bc
FUN_020178bc: ; 0x020178BC
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r1, #0
	mov r6, r0
	bl FUN_02017848
	movs r4, r0
	beq _0201791C
	arm_func_end FUN_020178bc
_020178D8:
	ldr r0, [r4, #0x18]
	cmp r0, r5
	bhi _02017908
	ldr r0, [r4, #0x1c]
	cmp r5, r0
	bhs _02017908
	mov r1, r5
	add r0, r4, #0xc
	bl FUN_020178bc
	cmp r0, #0
	moveq r0, r4
	pop {r4, r5, r6, pc}
_02017908:
	mov r0, r6
	mov r1, r4
	bl FUN_02017848
	movs r4, r0
	bne _020178D8
_0201791C:
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02017924
FUN_02017924: ; 0x02017924
	push {r4, lr}
	ldr r4, _02017948 ; =0x02097760
	mov r1, r0
	mov r0, r4
	bl FUN_020178bc
	cmp r0, #0
	addne r4, r0, #0xc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02017948: .word 0x02097760
	arm_func_end FUN_02017924

	arm_func_start FUN_0201794c
FUN_0201794c: ; 0x0201794C
	push {r4, r5, r6, lr}
	ldrh r5, [sp, #0x10]
	mov r4, r0
	mov r0, #0
	bic r6, r0, #0xff
	and r0, r5, #0xff
	orr r5, r6, r0
	mov r6, #4
	str r1, [r4]
	mov r1, r6
	add r0, r4, #0xc
	str r2, [r4, #0x18]
	str r3, [r4, #0x1c]
	str r5, [r4, #0x20]
	bl FUN_0201769c
	ldr r5, _020179C0 ; =0x0209775C
	ldr r0, [r5]
	cmp r0, #0
	bne _020179AC
	ldr r0, _020179C4 ; =0x02097760
	mov r1, r6
	bl FUN_0201769c
	mov r0, #1
	str r0, [r5]
	arm_func_end FUN_0201794c
_020179AC:
	mov r0, r4
	bl FUN_02017924
	mov r1, r4
	bl FUN_020176e0
	pop {r4, r5, r6, pc}
	.align 2, 0_020179C0: .word 0x0209775C
_020179C4: .word 0x02097760

	arm_func_start FUN_020179c8
FUN_020179c8: ; 0x020179C8
	push {r4, lr}
	mov r4, r0
	bl FUN_02017924
	mov r1, r4
	bl FUN_020177e8
	pop {r4, pc}
	arm_func_end FUN_020179c8

	arm_func_start FUN_020179e0
FUN_020179e0: ; 0x020179E0
	ldrh r2, [r1, #2]
	add r3, r1, #0x10
	asr r2, r2, #8
	and r2, r2, #0x7f
	lsl r2, r2, #0x10
	sub r2, r1, r2, lsr #16
	str r2, [r0]
	ldr r1, [r1, #4]
	add r1, r1, r3
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020179e0

	arm_func_start FUN_02017a0c
FUN_02017a0c: ; 0x02017A0C
	ldr r2, [r1, #8]
	ldr r1, [r1, #0xc]
	cmp r2, #0
	strne r1, [r2, #0xc]
	streq r1, [r0]
	cmp r1, #0
	strne r2, [r1, #8]
	streq r2, [r0, #4]
	mov r0, r2
	bx lr
	arm_func_end FUN_02017a0c

	arm_func_start FUN_02017a34
FUN_02017a34: ; 0x02017A34
	str r2, [r1, #8]
	cmp r2, #0
	ldrne r3, [r2, #0xc]
	strne r1, [r2, #0xc]
	ldreq r3, [r0]
	streq r1, [r0]
	str r3, [r1, #0xc]
	cmp r3, #0
	strne r1, [r3, #8]
	streq r1, [r0, #4]
	mov r0, r1
	bx lr
	arm_func_end FUN_02017a34

	arm_func_start FUN_02017a64
FUN_02017a64: ; 0x02017A64
	ldr r3, [r0]
	ldr r2, [r0, #4]
	add r0, r3, #0x10
	strh r1, [r3]
	mov r1, #0
	strh r1, [r3, #2]
	sub r0, r2, r0
	stmib r3, {r0, r1}
	mov r0, r3
	str r1, [r3, #0xc]
	bx lr
	arm_func_end FUN_02017a64

	arm_func_start FUN_02017a90
FUN_02017a90: ; 0x02017A90
	push {r4, r5, lr}
	sub sp, sp, #0xc
	mov r3, r1
	mov r5, r0
	str r2, [sp]
	ldr r1, _02017AF8 ; =0x45585048
	add r2, r5, #0x38
	bl FUN_0201794c
	mov r4, #0
	bic r1, r4, #1
	strh r1, [r5, #0x36]
	ldr r0, [r5, #0x18]
	strh r4, [r5, #0x34]
	str r0, [sp, #4]
	ldr r2, [r5, #0x1c]
	ldr r1, _02017AFC ; =0x00004652
	add r0, sp, #4
	str r2, [sp, #8]
	bl FUN_02017a64
	str r0, [r5, #0x24]
	str r0, [r5, #0x28]
	mov r0, r5
	str r4, [r5, #0x2c]
	str r4, [r5, #0x30]
	add sp, sp, #0xc
	pop {r4, r5, pc}
	.align 2, 0_02017AF8: .word 0x45585048
_02017AFC: .word 0x00004652
	arm_func_end FUN_02017a90

	arm_func_start FUN_02017b00
FUN_02017b00: ; 0x02017B00
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x18
	add r4, sp, #0x10
	mov r8, r0
	mov r0, r4
	mov r5, r1
	mov r7, r2
	mov sb, r3
	bl FUN_020179e0
	ldr r3, [sp, #0x14]
	sub r6, r7, #0x10
	add r2, sb, r7
	mov r0, r8
	mov r1, r5
	str r6, [sp, #0x14]
	str r3, [sp, #0xc]
	str r2, [sp, #8]
	bl FUN_02017a0c
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0x14]
	mov r5, r0
	sub r0, r1, r2
	cmp r0, #0x14
	strlo r2, [sp, #0x14]
	blo _02017B84
	ldr r1, _02017C64 ; =0x00004652
	mov r0, r4
	bl FUN_02017a64
	mov r1, r0
	mov r0, r8
	mov r2, r5
	bl FUN_02017a34
	mov r5, r0
	arm_func_end FUN_02017b00
_02017B84:
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #8]
	sub r0, r1, r0
	cmp r0, #0x14
	strlo r1, [sp, #8]
	blo _02017BB8
	ldr r1, _02017C64 ; =0x00004652
	add r0, sp, #8
	bl FUN_02017a64
	mov r1, r0
	mov r0, r8
	mov r2, r5
	bl FUN_02017a34
_02017BB8:
	ldr r0, [r8, #-4]
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #8]
	and r0, r0, #0xff
	tst r0, #1
	sub r2, r2, r1
	beq _02017BDC
	mov r0, #0
	bl FUN_02007838
_02017BDC:
	ldr r2, [sp, #8]
	ldr r1, _02017C68 ; =0x00005544
	add r0, sp, #0
	str r6, [sp]
	str r2, [sp, #4]
	bl FUN_02017a64
	mov r1, r0
	ldrh r3, [r1, #2]
	ldrh r2, [sp, #0x38]
	add r0, r8, #8
	bic r3, r3, #0x8000
	lsl r2, r2, #0x1f
	orr r2, r3, r2, lsr #16
	strh r2, [r1, #2]
	ldr r3, [sp, #0x14]
	bic r2, r2, #0x7f00
	strh r2, [r1, #2]
	sub r2, r1, r3
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
	ldrh r3, [r1, #2]
	lsl r2, r2, #0x19
	orr r2, r3, r2, lsr #17
	strh r2, [r1, #2]
	ldrh r3, [r8, #0x10]
	bic r2, r2, #0xff
	and r3, r3, #0xff
	orr r2, r2, r3
	strh r2, [r1, #2]
	ldr r2, [r8, #0xc]
	bl FUN_02017a34
	mov r0, r7
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02017C64: .word 0x00004652
_02017C68: .word 0x00005544

	arm_func_start FUN_02017c6c
FUN_02017c6c: ; 0x02017C6C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrh r4, [r0, #0x36]
	mov r3, r1
	ldr ip, [r0, #0x24]
	and r1, r4, #1
	lsl r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r1, #0
	moveq r6, #1
	movne r6, #0
	mov r4, r1
	cmp ip, #0
	sub lr, r1, #1
	beq _02017CFC
	sub r2, r2, #1
	mvn r5, r2
	arm_func_end FUN_02017c6c
_02017CAC:
	add r8, ip, #0x10
	add r7, r2, r8
	and sb, r5, r7
	sub r7, sb, r8
	ldr r8, [ip, #4]
	add r7, r3, r7
	cmp r8, r7
	blo _02017CF0
	cmp lr, r8
	bls _02017CF0
	mov r1, ip
	mov lr, r8
	mov r4, sb
	cmp r6, #0
	bne _02017CFC
	cmp r8, r3
	beq _02017CFC
_02017CF0:
	ldr ip, [ip, #0xc]
	cmp ip, #0
	bne _02017CAC
_02017CFC:
	cmp r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r5, #0
	mov r2, r4
	add r0, r0, #0x24
	str r5, [sp]
	bl FUN_02017b00
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02017d20
FUN_02017d20: ; 0x02017D20
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrh r4, [r0, #0x36]
	mov r3, r1
	ldr ip, [r0, #0x28]
	and r1, r4, #1
	lsl r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r1, #0
	moveq r5, #1
	movne r5, #0
	mov r4, r1
	cmp ip, #0
	sub lr, r1, #1
	beq _02017DAC
	sub r2, r2, #1
	mvn r2, r2
	arm_func_end FUN_02017d20
_02017D60:
	ldr r8, [ip, #4]
	add sb, ip, #0x10
	add r6, r8, sb
	sub r6, r6, r3
	and r7, r2, r6
	subs r6, r7, sb
	bmi _02017DA0
	cmp lr, r8
	bls _02017DA0
	mov r1, ip
	mov lr, r8
	mov r4, r7
	cmp r5, #0
	bne _02017DAC
	cmp r8, r3
	beq _02017DAC
_02017DA0:
	ldr ip, [ip, #8]
	cmp ip, #0
	bne _02017D60
_02017DAC:
	cmp r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r5, #1
	mov r2, r4
	add r0, r0, #0x24
	str r5, [sp]
	bl FUN_02017b00
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02017dd0
FUN_02017dd0: ; 0x02017DD0
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r5, r1
	ldr r2, [r5]
	ldr r1, [r5, #4]
	mov r6, r0
	str r2, [sp]
	str r1, [sp, #4]
	ldr r1, [r6]
	mov r4, #0
	cmp r1, #0
	beq _02017E44
	ldr r0, [r5]
	arm_func_end FUN_02017dd0
_02017E04:
	cmp r1, r0
	movlo r4, r1
	blo _02017E38
	ldr r0, [r5, #4]
	cmp r1, r0
	bne _02017E44
	ldr r2, [r1, #4]
	add r0, r1, #0x10
	add r2, r2, r0
	mov r0, r6
	str r2, [sp, #4]
	bl FUN_02017a0c
	b _02017E44
_02017E38:
	ldr r1, [r1, #0xc]
	cmp r1, #0
	bne _02017E04
_02017E44:
	cmp r4, #0
	beq _02017E78
	ldr r2, [r4, #4]
	add r1, r4, #0x10
	ldr r0, [r5]
	add r1, r2, r1
	cmp r1, r0
	bne _02017E78
	mov r0, r6
	mov r1, r4
	str r4, [sp]
	bl FUN_02017a0c
	mov r4, r0
_02017E78:
	ldr r1, [sp, #4]
	ldr r0, [sp]
	sub r0, r1, r0
	cmp r0, #0x10
	addlo sp, sp, #8
	movlo r0, #0
	poplo {r4, r5, r6, pc}
	ldr r1, _02017EBC ; =0x00004652
	add r0, sp, #0
	bl FUN_02017a64
	mov r1, r0
	mov r0, r6
	mov r2, r4
	bl FUN_02017a34
	mov r0, #1
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_02017EBC: .word 0x00004652

	arm_func_start FUN_02017ec0
FUN_02017ec0: ; 0x02017EC0
	push {r3, lr}
	add r1, r1, r0
	add r0, r0, #3
	bic r1, r1, #3
	bic r0, r0, #3
	cmp r0, r1
	bhi _02017EE8
	sub r3, r1, r0
	cmp r3, #0x4c
	bhs _02017EF0
	arm_func_end FUN_02017ec0
_02017EE8:
	mov r0, #0
	pop {r3, pc}
_02017EF0:
	bl FUN_02017a90
	pop {r3, pc}

	arm_func_start thunk_FUN_020179c8
thunk_FUN_020179c8: ; 0x02017EF8
	ldr ip, _02017F00 ; =FUN_020179c8
	bx ip
	.align 2, 0_02017F00: .word FUN_020179c8
	arm_func_end thunk_FUN_020179c8

	arm_func_start FUN_02017f04
FUN_02017f04: ; 0x02017F04
	push {r3, lr}
	cmp r1, #0
	moveq r1, #1
	add r1, r1, #3
	cmp r2, #0
	bic r1, r1, #3
	blt _02017F28
	bl FUN_02017c6c
	pop {r3, pc}
	arm_func_end FUN_02017f04
_02017F28:
	rsb r2, r2, #0
	bl FUN_02017d20
	pop {r3, pc}

	arm_func_start FUN_02017f34
FUN_02017f34: ; 0x02017F34
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	sub r5, r1, #0x10
	add r4, sp, #0
	mov r6, r0
	mov r0, r4
	mov r1, r5
	bl FUN_020179e0
	mov r1, r5
	add r0, r6, #0x2c
	bl FUN_02017a0c
	mov r1, r4
	add r0, r6, #0x24
	bl FUN_02017dd0
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02017f34

	arm_func_start FUN_02017f74
FUN_02017f74: ; 0x02017F74
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, r1
	mov r4, r0
	str r2, [sp]
	ldr r1, _02017FB8 ; =0x46524D48
	add r2, r4, #0x30
	bl FUN_0201794c
	ldr r3, [r4, #0x18]
	ldr r2, [r4, #0x1c]
	mov r1, #0
	mov r0, r4
	str r3, [r4, #0x24]
	str r2, [r4, #0x28]
	str r1, [r4, #0x2c]
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_02017FB8: .word 0x46524D48
	arm_func_end FUN_02017f74

	arm_func_start FUN_02017fbc
FUN_02017fbc: ; 0x02017FBC
	push {r4, r5, r6, lr}
	mov r4, r0
	ldr r3, [r4]
	sub r0, r2, #1
	mvn r2, r0
	add r0, r0, r3
	and r5, r2, r0
	ldr r0, [r4, #4]
	add r6, r1, r5
	cmp r6, r0
	movhi r0, #0
	pophi {r4, r5, r6, pc}
	ldr r0, [r4, #-4]
	sub r2, r6, r3
	and r0, r0, #0xff
	tst r0, #1
	beq _0201800C
	mov r1, r3
	mov r0, #0
	bl FUN_02007838
	arm_func_end FUN_02017fbc
_0201800C:
	mov r0, r5
	str r6, [r4]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02018018
FUN_02018018: ; 0x02018018
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r3, [r4, #4]
	sub r0, r2, #1
	mvn r2, r0
	sub r1, r3, r1
	ldr r0, [r4]
	and r5, r2, r1
	cmp r5, r0
	movlo r0, #0
	poplo {r3, r4, r5, pc}
	ldr r0, [r4, #-4]
	sub r2, r3, r5
	and r0, r0, #0xff
	tst r0, #1
	beq _02018064
	mov r1, r5
	mov r0, #0
	bl FUN_02007838
	arm_func_end FUN_02018018
_02018064:
	mov r0, r5
	str r5, [r4, #4]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02018070
FUN_02018070: ; 0x02018070
	ldr r2, [r0, #0x18]
	mov r1, #0
	str r2, [r0, #0x24]
	str r1, [r0, #0x2c]
	bx lr
	arm_func_end FUN_02018070

	arm_func_start FUN_02018084
FUN_02018084: ; 0x02018084
	ldr r2, [r0, #0x2c]
	cmp r2, #0
	beq _020180A4
	arm_func_end FUN_02018084
_02018090:
	ldr r1, [r0, #0x1c]
	str r1, [r2, #8]
	ldr r2, [r2, #0xc]
	cmp r2, #0
	bne _02018090
_020180A4:
	ldr r1, [r0, #0x1c]
	str r1, [r0, #0x28]
	bx lr

	arm_func_start FUN_020180b0
FUN_020180b0: ; 0x020180B0
	push {r3, lr}
	add r1, r1, r0
	add r0, r0, #3
	bic r1, r1, #3
	bic r0, r0, #3
	cmp r0, r1
	bhi _020180D8
	sub r3, r1, r0
	cmp r3, #0x30
	bhs _020180E0
	arm_func_end FUN_020180b0
_020180D8:
	mov r0, #0
	pop {r3, pc}
_020180E0:
	bl FUN_02017f74
	pop {r3, pc}

	arm_func_start thunk_FUN_020179c8
thunk_FUN_020179c8: ; 0x020180E8
	ldr ip, _020180F0 ; =FUN_020179c8
	bx ip
	.align 2, 0_020180F0: .word FUN_020179c8
	arm_func_end thunk_FUN_020179c8

	arm_func_start FUN_020180f4
FUN_020180f4: ; 0x020180F4
	push {r3, lr}
	cmp r1, #0
	moveq r1, #1
	add r1, r1, #3
	cmp r2, #0
	bic r1, r1, #3
	add r0, r0, #0x24
	blt _0201811C
	bl FUN_02017fbc
	pop {r3, pc}
	arm_func_end FUN_020180f4
_0201811C:
	rsb r2, r2, #0
	bl FUN_02018018
	pop {r3, pc}

	arm_func_start FUN_02018128
FUN_02018128: ; 0x02018128
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	tst r4, #1
	beq _02018140
	bl FUN_02018070
	arm_func_end FUN_02018128
_02018140:
	tst r4, #2
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_02018084
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02018154
FUN_02018154: ; 0x02018154
	ldrh r2, [r0, #0xc]
	ldrh ip, [r0, #0xe]
	mov r3, #0
	add r0, r0, r2
	cmp ip, #0
	bls _02018194
	arm_func_end FUN_02018154
_0201816C:
	ldr r2, [r0]
	cmp r2, r1
	bxeq lr
	add r2, r3, #1
	lsl r2, r2, #0x10
	ldr r3, [r0, #4]
	cmp ip, r2, lsr #16
	add r0, r0, r3
	lsr r3, r2, #0x10
	bhi _0201816C
_02018194:
	mov r0, #0
	bx lr

	arm_func_start FUN_0201819c
FUN_0201819c: ; 0x0201819C
	push {r3, lr}
	ldrh r3, [r0, #4]
	ldr r2, _02018260 ; =0x0000FFFF
	cmp r3, #0
	beq _020181C4
	cmp r3, #1
	beq _020181E0
	cmp r3, #2
	beq _020181F4
	b _02018258
	arm_func_end FUN_0201819c
_020181C4:
	ldrh r2, [r0]
	ldrh r3, [r0, #0xc]
	sub r0, r1, r2
	add r0, r3, r0
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	b _02018258
_020181E0:
	ldrh r2, [r0]
	sub r1, r1, r2
	add r0, r0, r1, lsl #1
	ldrh r2, [r0, #0xc]
	b _02018258
_020181F4:
	ldrh r3, [r0, #0xc]
	add ip, r0, #0xe
	sub r0, r3, #1
	add lr, ip, r0, lsl #2
	cmp ip, lr
	bhi _02018258
_0201820C:
	sub r3, lr, ip
	asr r0, r3, #1
	add r0, r3, r0, lsr #30
	asr r0, r0, #2
	add r0, r0, r0, lsr #31
	asr r3, r0, #1
	lsl r0, r3, #2
	ldrh r0, [ip, r0]
	add r3, ip, r3, lsl #2
	cmp r0, r1
	addlo ip, r3, #4
	blo _02018250
	cmp r1, r0
	sublo lr, r3, #4
	blo _02018250
	ldrh r2, [r3, #2]
	b _02018258
_02018250:
	cmp ip, lr
	bls _0201820C
_02018258:
	mov r0, r2
	pop {r3, pc}
	.align 2, 0_02018260: .word 0x0000FFFF

	arm_func_start FUN_02018264
FUN_02018264: ; 0x02018264
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	mov r1, r4
	bl FUN_02019bac
	ldr r0, _02018284 ; =FUN_02019ea8
	str r0, [r4, #4]
	pop {r4, pc}
	.align 2, 0_02018284: .word FUN_02019ea8
	arm_func_end FUN_02018264

	arm_func_start FUN_02018288
FUN_02018288: ; 0x02018288
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	mov r1, r4
	bl FUN_02019bac
	ldr r0, _020182A8 ; =FUN_02019ebc
	str r0, [r4, #4]
	pop {r4, pc}
	.align 2, 0_020182A8: .word FUN_02019ebc
	arm_func_end FUN_02018288

	arm_func_start FUN_020182ac
FUN_020182ac: ; 0x020182AC
	push {r3, lr}
	ldr r0, [r0]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	beq _020182E8
	arm_func_end FUN_020182ac
_020182C0:
	ldrh r2, [r0]
	cmp r2, r1
	ldrhls r2, [r0, #2]
	cmpls r1, r2
	bhi _020182DC
	bl FUN_0201819c
	pop {r3, pc}
_020182DC:
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _020182C0
_020182E8:
	ldr r0, _020182F0 ; =0x0000FFFF
	pop {r3, pc}
	.align 2, 0_020182F0: .word 0x0000FFFF

	arm_func_start FUN_020182f4
FUN_020182f4: ; 0x020182F4
	ldr ip, [r0]
	ldr r3, [ip, #0xc]
	cmp r3, #0
	beq _02018334
	arm_func_end FUN_020182f4
_02018304:
	ldrh r2, [r3]
	cmp r2, r1
	ldrhls r0, [r3, #2]
	cmpls r1, r0
	subls r0, r1, r2
	addls r1, r3, #8
	addls r0, r0, r0, lsl #1
	addls r0, r1, r0
	bxls lr
	ldr r3, [r3, #4]
	cmp r3, #0
	bne _02018304
_02018334:
	add r0, ip, #4
	bx lr

	arm_func_start FUN_0201833c
FUN_0201833c: ; 0x0201833C
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov sb, r0
	add r4, sp, #0
	ldr r6, [sb, #4]
	mov r0, r4
	mov r8, r1
	mov r7, r3
	str r2, [sp]
	mov r5, #0
	blx r6
	movs r1, r0
	beq _020183B8
	ldr sl, _020183E4 ; =0x0000FFFF
	arm_func_end FUN_0201833c
_02018374:
	cmp r1, #0xa
	beq _020183B8
	mov r0, sb
	bl FUN_020182ac
	mov r1, r0
	cmp r1, sl
	ldreq r0, [sb]
	ldrheq r1, [r0, #2]
	mov r0, sb
	bl FUN_020182f4
	ldrsb r1, [r0, #2]
	mov r0, r4
	add r1, r8, r1
	add r5, r5, r1
	blx r6
	movs r1, r0
	bne _02018374
_020183B8:
	cmp r7, #0
	beq _020183D0
	cmp r1, #0xa
	ldreq r0, [sp]
	movne r0, #0
	str r0, [r7]
_020183D0:
	cmp r5, #0
	subgt r5, r5, r8
	mov r0, r5
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020183E4: .word 0x0000FFFF

	arm_func_start FUN_020183e8
FUN_020183e8: ; 0x020183E8
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	mov r8, r0
	add r5, sp, #8
	ldr r7, [r8, #4]
	add ip, sp, #0
	mov r3, #0
	mov r0, r5
	mov r4, r1
	str r2, [sp, #8]
	str r3, [ip]
	str r3, [ip, #4]
	mov r6, #1
	blx r7
	cmp r0, #0
	beq _02018440
	arm_func_end FUN_020183e8
_02018428:
	cmp r0, #0xa
	mov r0, r5
	addeq r6, r6, #1
	blx r7
	cmp r0, #0
	bne _02018428
_02018440:
	ldr r0, [r8]
	ldrsb r0, [r0, #1]
	add r0, r4, r0
	mul r0, r6, r0
	sub r0, r0, r4
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0201845c
FUN_0201845c: ; 0x0201845C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #8
	mov r6, r2
	ldr r2, [sp, #0x28]
	add sb, sp, #0
	mov r4, #0
	mov r8, r0
	mov r7, r1
	mov r5, r3
	str r4, [sb]
	str r4, [sb, #4]
	cmp r2, #0
	mov r4, #1
	beq _020184C4
	add sb, sp, #0x28
	arm_func_end FUN_0201845c
_02018498:
	mov r0, r7
	mov r1, r6
	mov r3, sb
	bl FUN_0201833c
	ldr r1, [sp]
	ldr r2, [sp, #0x28]
	cmp r0, r1
	strgt r0, [sp]
	add r4, r4, #1
	cmp r2, #0
	bne _02018498
_020184C4:
	ldr r0, [r7]
	sub r2, r4, #1
	ldrsb r1, [r0, #1]
	ldr r0, [sp]
	add r1, r5, r1
	mul r1, r2, r1
	sub r1, r1, r5
	stm r8, {r0, r1}
	str r1, [sp, #4]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_020184f0
FUN_020184f0: ; 0x020184F0
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov lr, #3
	ldr r8, [sp, #0x20]
	ldr r7, [sp, #0x24]
	ldr sb, _020185D4 ; =0x0208BF20
	mov r6, #0
	mov ip, lr
	mvn r5, #0
	arm_func_end FUN_020184f0
_02018510:
	and sl, r3, r5, lsl r7
	cmp sl, r1
	and r4, r2, r5, lsl r8
	bhi _02018550
	mla r6, r2, sl, r6
	cmp r4, r0
	movhi r2, r4
	subhi r1, r1, sl
	subhi r3, r3, sl
	bhi _02018594
	sub r3, r3, sl
	mla r6, r4, r3, r6
	sub r0, r0, r4
	sub r1, r1, sl
	sub r2, r2, r4
	b _02018594
_02018550:
	cmp r4, r0
	mvn r3, r5, lsl r7
	mlals r6, r4, sl, r6
	movls r3, sl
	subls r0, r0, r4
	subls r2, r2, r4
	bls _02018594
	and r2, r1, r5, lsl r7
	mla r6, r4, r2, r6
	and r2, r0, r5, lsl r8
	mvn r4, r5, lsl r8
	add r2, r6, r2, lsl r7
	and r1, r1, r3
	add r1, r2, r1, lsl r8
	and r0, r0, r4
	add r0, r1, r0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02018594:
	cmp r2, #8
	movlt r4, r2
	movge r8, lr
	clzlt r4, r4
	rsblt r8, r4, #0x1f
	cmp r3, #8
	movge r4, ip
	movlt r4, r3
	clzlt r4, r4
	rsblt r4, r4, #0x1f
	add r4, sb, r4, lsl #3
	add r7, r4, r8, lsl #1
	ldrb r8, [r4, r8, lsl #1]
	ldrb r7, [r7, #1]
	b _02018510
_020185D0:
	.byte 0xF0, 0x87, 0xBD, 0xE8
_020185D4: .word 0x0208BF20

	arm_func_start FUN_020185d8
FUN_020185d8: ; 0x020185D8
	ldrb r3, [r0, #1]
	ldr r2, _020185F0 ; =0x0208BF40
	ldrb r1, [r0]
	add r0, r2, r3, lsl #4
	ldr r0, [r0, r1, lsl #2]
	bx lr
	.align 2, 0_020185F0: .word 0x0208BF40
	arm_func_end FUN_020185d8

	arm_func_start FUN_020185f4
FUN_020185f4: ; 0x020185F4
	push {r3, r4, r5, lr}
	cmp r3, #8
	ldreq r4, [sp, #0x10]
	mov ip, r0
	ldr r0, [sp, #0x14]
	cmpeq r4, #8
	bne _02018624
	ldr r2, [sp, #0x18]
	mov r1, ip
	lsl r2, r2, #3
	bl FUN_0200787c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020185f4
_02018624:
	ldr r4, [sp, #0x18]
	cmp r4, #4
	bne _02018684
	lsl r5, r1, #2
	add r4, r5, r3, lsl #2
	mvn r3, #0
	rsb r4, r4, #0x20
	lsr r3, r3, r5
	add r1, r4, r1, lsl #2
	lsl r3, r3, r1
	ldr r1, [sp, #0x10]
	add r2, ip, r2, lsl #2
	add r5, r2, r1, lsl #2
	and r1, r0, r3, lsr r4
	mvn r3, r3, lsr r4
	cmp r2, r5
	pophs {r3, r4, r5, pc}
_02018668:
	ldr r0, [r2]
	and r0, r0, r3
	orr r0, r1, r0
	str r0, [r2], #4
	cmp r2, r5
	blo _02018668
	pop {r3, r4, r5, pc}
_02018684:
	lsl r1, r1, #3
	add r3, r1, r3, lsl #3
	rsb r3, r3, #0x40
	mvn r4, #0
	cmp r3, #0x20
	lsr r5, r4, r1
	subhs lr, r3, #0x20
	addhs r4, r1, lr
	lslhs r4, r5, r4
	lsrhs r5, r4, lr
	mvn lr, #0
	lsllo r5, r5, r1
	cmp r1, #0x20
	lsl r4, lr, r3
	subhs lr, r1, #0x20
	addhs r1, lr, r3
	lsrhs r1, r4, r1
	lslhs r3, r1, lr
	lsrlo r3, r4, r3
	add r4, ip, r2, lsl #3
	ldr r1, [sp, #0x10]
	and r2, r0, r3
	add ip, r4, r1, lsl #3
	and r1, r0, r5
	mvn r5, r5
	mvn r3, r3
	cmp r4, ip
	pophs {r3, r4, r5, pc}
_020186F4:
	ldr r0, [r4]
	and r0, r0, r5
	orr r0, r1, r0
	str r0, [r4]
	ldr r0, [r4, #4]
	and r0, r0, r3
	orr r0, r2, r0
	str r0, [r4, #4]
	add r4, r4, #8
	cmp r4, ip
	blo _020186F4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02018724
FUN_02018724: ; 0x02018724
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x28
	ldr r5, [r0, #8]
	ldr r4, [r0, #0xc]
	cmp r5, #0
	strge r5, [sp]
	movlt r1, #0
	strlt r1, [sp]
	ldr r1, [r0, #0x10]
	mov r2, r4
	add sl, r5, r1
	ldr r1, [r0, #0x14]
	cmp r4, #0
	movlt r2, #0
	cmp sl, #8
	add r3, r4, r1
	movge sl, #8
	cmp r3, #8
	movge r3, #8
	cmp r4, #0
	movgt r4, #0
	cmp r5, #0
	ldr r7, [r0, #0x20]
	movgt r5, #0
	rsb r1, r4, #0
	mul r6, sl, r7
	ldr r8, [r0, #0x1c]
	rsb r4, r5, #0
	mul sb, r8, r4
	ldr r4, [r0, #0x18]
	mov sl, r6
	str r4, [sp, #0x10]
	ldr r4, [sp]
	cmp r7, #4
	mul r5, r4, r7
	ldr r4, [sp, #0x10]
	str r5, [sp]
	mla r4, r1, r4, sb
	ldr r1, [r0, #4]
	str r1, [sp, #0x14]
	ldr r1, [r0]
	bne _02018890
	ldr r7, [r0, #0x24]
	add r0, r1, r2, lsl #2
	str r0, [sp, #0xc]
	add r0, r1, r3, lsl #2
	ldr r1, [sp, #0xc]
	str r0, [sp, #8]
	cmp r1, r0
	addhs sp, sp, #0x28
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov fp, #0xf
	add r5, sp, #0x20
	arm_func_end FUN_02018724
_020187F8:
	ldr r0, [sp, #0xc]
	lsr r1, r4, #0x1f
	ldr sb, [r0]
	ldr r0, [sp, #0x14]
	rsb r2, r1, r4, lsl #29
	add r0, r0, r4, lsr #3
	str r0, [sp, #0x20]
	mov r0, #0
	strb r0, [sp, #0x24]
	strb r0, [sp, #0x25]
	mov r0, r5
	add r1, r1, r2, ror #29
	bl FUN_02019e48
	ldr r6, [sp]
	mov r0, r6
	cmp r0, sl
	bhs _02018868
_0201883C:
	mov r0, r5
	mov r1, r8
	bl FUN_02019e48
	cmp r0, #0
	mvnne r1, fp, lsl r6
	addne r0, r7, r0
	andne r1, sb, r1
	orrne sb, r1, r0, lsl r6
	add r6, r6, #4
	cmp r6, sl
	blo _0201883C
_02018868:
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #8]
	str sb, [r1], #4
	cmp r1, r0
	ldr r0, [sp, #0x10]
	str r1, [sp, #0xc]
	add r4, r4, r0
	blo _020187F8
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02018890:
	ldr r5, [r0, #0x24]
	add r0, r1, r3, lsl #3
	add fp, r1, r2, lsl #3
	str r0, [sp, #4]
	cmp fp, r0
	addhs sp, sp, #0x28
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020188AC:
	lsr r1, r4, #0x1f
	rsb r0, r1, r4, lsl #29
	add r1, r1, r0, ror #29
	ldm fp, {r6, r7}
	mov r0, #0
	strb r0, [sp, #0x1c]
	strb r0, [sp, #0x1d]
	ldr r0, [sp, #0x14]
	add r0, r0, r4, lsr #3
	str r0, [sp, #0x18]
	add r0, sp, #0x18
	bl FUN_02019e48
	ldr sb, [sp]
	mov r0, sb
	cmp r0, sl
	bhs _02018934
_020188EC:
	add r0, sp, #0x18
	mov r1, r8
	bl FUN_02019e48
	cmp r0, #0
	beq _02018928
	add r1, r5, r0
	cmp sb, #0x20
	mov r0, #0xff
	mvnlo r0, r0, lsl sb
	andlo r0, r6, r0
	subhs r2, sb, #0x20
	orrlo r6, r0, r1, lsl sb
	mvnhs r0, r0, lsl r2
	andhs r0, r7, r0
	orrhs r7, r0, r1, lsl r2
_02018928:
	add sb, sb, #8
	cmp sb, sl
	blo _020188EC
_02018934:
	ldr r0, [sp, #4]
	str r7, [fp, #4]
	str r6, [fp], #8
	cmp fp, r0
	ldr r0, [sp, #0x10]
	add r4, r4, r0
	blo _020188AC
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02018958
FUN_02018958: ; 0x02018958
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	ldr r4, [sp, #0x54]
	ldrb r6, [r0, #0xc]
	str r4, [sp, #0x54]
	ldr r4, [r4]
	ldr r5, [r1]
	lsl r7, r6, #6
	ldrb r4, [r4, #1]
	asr r6, r7, #2
	add r6, r7, r6, lsr #29
	cmp r4, #0
	ldr r5, [r5, #8]
	mov sl, r2
	mov sb, r3
	asr r8, r6, #3
	addeq sp, sp, #0x2c
	ldmib r0, {fp, ip}
	ldr lr, [r0]
	ldrb r2, [r5, #1]
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	adds r7, sl, r4
	addmi sp, sp, #0x2c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	adds r3, sb, r2
	addmi sp, sp, #0x2c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r5, #0
	cmp sl, #0
	lsrgt r5, sl, #3
	mov r6, #0
	cmp sb, #0
	add r7, r7, #7
	lsrgt r6, sb, #3
	cmp fp, r7, lsr #3
	lsr r7, r7, #3
	add r3, r3, #7
	movls r7, fp
	lsr fp, r3, #3
	cmp ip, r3, lsr #3
	movls fp, ip
	subs r3, r7, r5
	addmi sp, sp, #0x2c
	sub ip, fp, r6
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp ip, #0
	addlt sp, sp, #0x2c
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r7, [r0, #0x10]
	cmp sl, #0
	mla r6, r7, r6, r5
	sub r5, r7, r3
	mla r7, r8, r6, lr
	ldr r6, [sp, #0x54]
	mul fp, r8, r5
	ldr r6, [r6, #4]
	ldr r5, [sp, #0x50]
	str r4, [sp, #0x14]
	sub r5, r5, #1
	andge sl, sl, #7
	str r6, [sp, #8]
	cmp sb, #0
	ldr r1, [r1]
	str r5, [sp, #0x28]
	str r2, [sp, #0x18]
	ldr r2, [r1, #8]
	ldrb r4, [r0, #0xc]
	ldrb r0, [r2, #6]
	andge sb, sb, #7
	sub r2, sb, ip, lsl #3
	str r0, [sp, #0x20]
	str r4, [sp, #0x24]
	ldr r1, [r1, #8]
	str r2, [sp]
	ldrb r1, [r1]
	cmp sb, r2
	sub r6, sl, r3, lsl #3
	smulbb r0, r0, r1
	str r0, [sp, #0x1c]
	addle sp, sp, #0x2c
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r4, sp, #4
	arm_func_end FUN_02018958
_02018AA0:
	mov r5, sl
	str sb, [sp, #0x10]
	cmp sl, r6
	ble _02018AD0
_02018AB0:
	mov r0, r4
	str r7, [sp, #4]
	str r5, [sp, #0xc]
	bl FUN_02018724
	sub r5, r5, #8
	cmp r5, r6
	add r7, r7, r8
	bgt _02018AB0
_02018AD0:
	ldr r0, [sp]
	sub sb, sb, #8
	cmp sb, r0
	add r7, r7, fp
	bgt _02018AA0
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02018aec
FUN_02018aec: ; 0x02018AEC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x4c
	ldr r4, [sp, #0x74]
	ldrb r6, [r0, #0xc]
	ldr r7, [r1]
	ldr r5, [r4]
	ldr r7, [r7, #8]
	lsl r8, r6, #6
	ldrb r6, [r5, #1]
	asr r5, r8, #2
	add r5, r8, r5, lsr #29
	ldrb r7, [r7, #1]
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	cmp r6, #0
	asr sb, r5, #3
	addeq sp, sp, #0x4c
	ldmib r0, {r2, r3}
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r5, [sp, #8]
	adds r5, r5, r6
	addmi sp, sp, #0x4c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r8, [sp, #0xc]
	adds r8, r8, r7
	addmi sp, sp, #0x4c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr sl, [sp, #8]
	add r5, r5, #7
	cmp sl, #0
	movle sl, #0
	strle sl, [sp, #0x10]
	lsrgt sl, sl, #3
	strgt sl, [sp, #0x10]
	ldr sl, [sp, #0xc]
	cmp sl, #0
	movle sl, #0
	lsrgt sl, sl, #3
	cmp r2, r5, lsr #3
	lsr r5, r5, #3
	movls r5, r2
	add r2, r8, #7
	cmp r3, r2, lsr #3
	lsr r8, r2, #3
	ldr r2, [sp, #0x10]
	movls r8, r3
	subs r3, r5, r2
	sub r5, r8, sl
	addmi sp, sp, #0x4c
	popmi {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r5, #0
	addlt sp, sp, #0x4c
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r2, [sp, #8]
	ldr r8, [r4, #4]
	cmp r2, #0
	andge r2, r2, #7
	strge r2, [sp, #8]
	ldr r2, [sp, #0xc]
	str r6, [sp, #0x34]
	cmp r2, #0
	andge r2, r2, #7
	strge r2, [sp, #0xc]
	ldr r2, [sp, #0x70]
	str r7, [sp, #0x38]
	sub r4, r2, #1
	str r4, [sp, #0x48]
	ldr r2, [r1]
	str r8, [sp, #0x28]
	ldr r1, [r2, #8]
	ldr r4, [sp, #0xc]
	ldrb r1, [r1, #6]
	ldrb r7, [r0, #0xc]
	sub r4, r4, r5, lsl #3
	str r1, [sp, #0x40]
	str r7, [sp, #0x44]
	ldr r2, [r2, #8]
	ldr r6, [r0, #0x10]
	ldrb r5, [r2]
	str r4, [sp, #0x1c]
	lsl r7, r6, #0x18
	smulbb r1, r1, r5
	str r1, [sp, #0x3c]
	ldr r1, [sp, #8]
	ldr r4, [sp, #0xc]
	ldr r2, [sp, #0x1c]
	sub r5, r1, r3, lsl #3
	ldr r1, [r0, #4]
	ldr fp, [r0]
	ldr r0, [r0, #8]
	lsl r6, r6, #0x10
	lsr r8, r7, #0x18
	cmp r4, r2
	lsr r7, r6, #0x18
	str r1, [sp, #0x14]
	str r0, [sp, #0x18]
	addle sp, sp, #0x4c
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02018aec
_02018C74:
	ldr r0, [sp, #0xc]
	ldr r6, [sp, #0x10]
	str r0, [sp, #0x30]
	ldr r0, [sp, #8]
	cmp r0, r5
	mov r4, r0
	ble _02018CD0
_02018C90:
	ldr r2, [sp, #0x14]
	str r8, [sp]
	ldr r3, [sp, #0x18]
	mov r0, r6
	mov r1, sl
	str r7, [sp, #4]
	bl FUN_020184f0
	mla r1, r0, sb, fp
	add r0, sp, #0x24
	str r4, [sp, #0x2c]
	str r1, [sp, #0x24]
	bl FUN_02018724
	sub r4, r4, #8
	add r6, r6, #1
	cmp r4, r5
	bgt _02018C90
_02018CD0:
	ldr r0, [sp, #0xc]
	add sl, sl, #1
	sub r1, r0, #8
	ldr r0, [sp, #0x1c]
	str r1, [sp, #0xc]
	cmp r1, r0
	bgt _02018C74
	add sp, sp, #0x4c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02018cf4
FUN_02018cf4: ; 0x02018CF4
	push {r3, lr}
	mov r3, r0
	ldrb r2, [r3, #0xc]
	ldr ip, [r3, #4]
	cmp r2, #4
	orreq r0, r1, r1, lsl #4
	orreq r0, r0, r0, lsl #8
	orrne r0, r1, r1, lsl #8
	orr r1, r0, r0, lsl #16
	ldr r0, [r3, #8]
	lsl r2, r2, #6
	mul lr, ip, r0
	asr r0, r2, #2
	add r0, r2, r0, lsr #29
	asr r2, r0, #3
	mov r0, r1
	mul r2, lr, r2
	ldr r1, [r3]
	bl FUN_0200787c
	pop {r3, pc}
	arm_func_end FUN_02018cf4

	arm_func_start FUN_02018d44
FUN_02018d44: ; 0x02018D44
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	ldrb r2, [r7, #0xc]
	mov r6, r1
	ldr sb, [r7]
	cmp r2, #4
	orreq r0, r6, r6, lsl #4
	orreq r0, r0, r0, lsl #8
	orrne r0, r6, r6, lsl #8
	lsl r1, r2, #6
	orr r6, r0, r0, lsl #16
	asr r0, r1, #2
	add r0, r1, r0, lsr #29
	asr r3, r0, #3
	ldr r2, [r7, #0x10]
	ldr r1, [r7, #4]
	ldr r0, [r7, #8]
	mul r5, r3, r2
	mul r4, r3, r1
	mov r8, #0
	cmp r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02018d44
_02018D9C:
	mov r0, r6
	mov r1, sb
	mov r2, r4
	bl FUN_0200787c
	ldr r0, [r7, #8]
	add r8, r8, #1
	cmp r8, r0
	add sb, sb, r5
	blt _02018D9C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02018dc4
FUN_02018dc4: ; 0x02018DC4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	ldr r4, [sp, #0x58]
	mov sb, r2
	ldrb fp, [r0, #0xc]
	mov sl, r1
	add r1, sb, r4
	str r1, [sp, #0x28]
	ldr r2, [sp, #0x5c]
	mov r1, r3
	add r1, r1, r2
	cmp fp, #4
	str r1, [sp, #0x24]
	orreq r1, sl, sl, lsl #4
	orreq r1, r1, r1, lsl #8
	orrne r1, sl, sl, lsl #8
	str r3, [sp, #0xc]
	orr sl, r1, r1, lsl #16
	ldr r1, [sp, #0xc]
	lsl r6, fp, #6
	bic r1, r1, #7
	asr r4, r6, #2
	asr r2, r1, #2
	str r1, [sp, #0x2c]
	add r1, r1, r2, lsr #29
	ldr r2, [r0, #0x10]
	asr r3, r1, #3
	mul r1, r3, r2
	bic r3, sb, #7
	asr r5, r3, #2
	add r4, r6, r4, lsr #29
	str r3, [sp, #0x18]
	add r5, r3, r5, lsr #29
	asr r3, r4, #3
	str r3, [sp, #0x14]
	add r4, r1, r5, asr #3
	ldr r3, [sp, #0x24]
	ldr r5, [r0]
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x28]
	mla r4, r1, r4, r5
	add r3, r3, #7
	bic r1, r3, #7
	str r1, [sp, #0x20]
	ldr r1, [sp, #0x14]
	add r0, r0, #7
	mul r1, r2, r1
	str r1, [sp, #0x10]
	ldr r2, [sp, #0x2c]
	ldr r1, [sp, #0x20]
	str r4, [sp, #0x1c]
	cmp r2, r1
	bic r6, r0, #7
	addge sp, sp, #0x30
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02018dc4
_02018EA0:
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0xc]
	ldr r7, [sp, #0x1c]
	cmp r1, r0
	movlt r1, r0
	ldrlt r0, [sp, #0x2c]
	sublt r8, r1, r0
	ldr r1, [sp, #0x24]
	ldr r0, [sp, #0x2c]
	movge r8, #0
	sub r0, r1, r0
	cmp r0, #8
	movgt r0, #8
	sub r5, r0, r8
	ldr r0, [sp, #0x18]
	cmp r0, r6
	mov r4, r0
	bge _02018F2C
_02018EE8:
	ldr r0, [sp, #0x28]
	sub r1, sb, r4
	sub r0, r0, r4
	cmp r4, sb
	movge r1, #0
	cmp r0, #8
	movgt r0, #8
	sub r3, r0, r1
	mov r0, r7
	mov r2, r8
	stm sp, {r5, sl, fp}
	bl FUN_020185f4
	ldr r0, [sp, #0x14]
	add r4, r4, #8
	add r7, r7, r0
	cmp r4, r6
	blt _02018EE8
_02018F2C:
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x10]
	add r0, r1, r0
	str r0, [sp, #0x1c]
	ldr r0, [sp, #0x2c]
	add r1, r0, #8
	ldr r0, [sp, #0x20]
	str r1, [sp, #0x2c]
	cmp r1, r0
	blt _02018EA0
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02018f5c
FUN_02018f5c: ; 0x02018F5C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x48
	ldrb r4, [r0, #0xc]
	mov sl, r2
	mov fp, r1
	str r4, [sp, #0x10]
	ldr r1, [sp, #0x10]
	ldr r4, [sp, #0x70]
	cmp r1, #4
	add r1, sl, r4
	str r1, [sp, #0x3c]
	ldr r2, [sp, #0x74]
	mov r1, r3
	add r1, r1, r2
	bic r2, sl, #7
	str r1, [sp, #0x38]
	str r3, [sp, #0xc]
	str r2, [sp, #0x28]
	ldr r2, [sp, #0xc]
	orreq r1, fp, fp, lsl #4
	bic r2, r2, #7
	str r2, [sp, #0x40]
	ldr r2, [sp, #0x10]
	orreq r1, r1, r1, lsl #8
	lsl r5, r2, #6
	ldr r2, [sp, #0x38]
	asr r3, r5, #2
	add r6, r2, #7
	ldr r2, [sp, #0x28]
	add r3, r5, r3, lsr #29
	asr r4, r2, #2
	ldr r2, [sp, #0x40]
	orrne r1, fp, fp, lsl #8
	asr r5, r2, #2
	bic r2, r6, #7
	str r2, [sp, #0x34]
	asr r2, r3, #3
	str r2, [sp, #0x14]
	ldr r2, [sp, #0x28]
	orr fp, r1, r1, lsl #16
	add r2, r2, r4, lsr #29
	asr r2, r2, #3
	str r2, [sp, #0x2c]
	ldr r2, [sp, #0x40]
	ldr r3, [sp, #0x40]
	add r2, r2, r5, lsr #29
	asr r8, r2, #3
	ldr r2, [sp, #0x34]
	ldr r1, [r0, #0x10]
	cmp r3, r2
	ldr r2, [sp, #0x3c]
	add r2, r2, #7
	bic r7, r2, #7
	ldr r2, [r0, #4]
	str r2, [sp, #0x18]
	ldr r2, [r0, #8]
	ldr r0, [r0]
	str r2, [sp, #0x1c]
	str r0, [sp, #0x30]
	lsl r0, r1, #0x18
	lsr r0, r0, #0x18
	str r0, [sp, #0x20]
	lsl r0, r1, #0x10
	lsr r0, r0, #0x18
	str r0, [sp, #0x24]
	addge sp, sp, #0x48
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02018f5c
_02019068:
	ldr r1, [sp, #0x40]
	ldr r0, [sp, #0xc]
	ldr r6, [sp, #0x2c]
	cmp r1, r0
	movlt r1, r0
	ldrlt r0, [sp, #0x40]
	sublt sb, r1, r0
	ldr r1, [sp, #0x38]
	ldr r0, [sp, #0x40]
	movge sb, #0
	sub r0, r1, r0
	cmp r0, #8
	movgt r0, #8
	sub r5, r0, sb
	ldr r0, [sp, #0x28]
	cmp r0, r7
	mov r4, r0
	bge _02019124
_020190B0:
	ldr r0, [sp, #0x20]
	ldr r2, [sp, #0x18]
	str r0, [sp]
	ldr r0, [sp, #0x24]
	ldr r3, [sp, #0x1c]
	str r0, [sp, #4]
	mov r0, r6
	mov r1, r8
	bl FUN_020184f0
	ldr r2, [sp, #0x3c]
	sub r1, sl, r4
	cmp r4, sl
	sub r2, r2, r4
	movge r1, #0
	cmp r2, #8
	movgt r2, #8
	stm sp, {r5, fp}
	sub r3, r2, r1
	ldr r2, [sp, #0x10]
	ldr ip, [sp, #0x14]
	str r2, [sp, #8]
	ldr r2, [sp, #0x30]
	mla r0, ip, r0, r2
	mov r2, sb
	bl FUN_020185f4
	add r4, r4, #8
	add r6, r6, #1
	cmp r4, r7
	blt _020190B0
_02019124:
	ldr r0, [sp, #0x40]
	add r8, r8, #1
	add r1, r0, #8
	ldr r0, [sp, #0x34]
	str r1, [sp, #0x40]
	cmp r1, r0
	blt _02019068
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02019148
FUN_02019148: ; 0x02019148
	push {r4, lr}
	ldr r4, [sp, #8]
	str r3, [r0, #8]
	strb r4, [r0, #0xc]
	ldr lr, [sp, #0xc]
	stm r0, {r1, r2}
	ldr ip, [sp, #0x10]
	str lr, [r0, #0x14]
	str ip, [r0, #0x10]
	pop {r4, pc}
	arm_func_end FUN_02019148

	arm_func_start FUN_02019170
FUN_02019170: ; 0x02019170
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10
	mov r7, r1
	ldrh r1, [sp, #0x2c]
	mov r8, r0
	mov r0, r7
	mov r6, r2
	mov r5, r3
	bl FUN_020182ac
	ldr r1, _02019288 ; =0x0000FFFF
	mov r4, r0
	cmp r4, r1
	ldreq r0, [r7]
	ldrheq r4, [r0, #2]
	mov r0, r7
	mov r1, r4
	bl FUN_020182f4
	ldr r3, [r7]
	str r0, [sp, #8]
	ldr r2, [r3, #8]
	ldrh r1, [r2, #2]
	add r2, r2, #8
	mla r1, r4, r1, r2
	str r1, [sp, #0xc]
	ldr r3, [r3, #8]
	ldrb r1, [r3, #7]
	cmp r1, #7
	arm_func_end FUN_02019170

	arm_func_start switchD
switchD: ; 0x020191DC
	addls pc, pc, r1, lsl #2
	b _0201924C
	arm_func_end switchD
_020191E4: ; jump table
	b LAB_02019204 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020191E8
	b _02019210
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020191EC
	b _02019210
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020191F0
	b _02019224
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020191F4
	b _02019224
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020191F8
	b _0201923C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020191FC
	b _0201923C
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02019200
	b LAB_02019204
	arm_func_end caseD_7
LAB_02019204:
	ldrsb r0, [r0]
	add r6, r6, r0
	b _0201924C
_02019210:
	ldrb r1, [r3]
	ldrsb r0, [r0]
	sub r6, r6, r1
	add r5, r5, r0
	b _0201924C
_02019224:
	ldrsb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r0, [r3, #1]
	add r1, r2, r1
	sub r6, r6, r1
	b _02019248
_0201923C:
	ldrsb r1, [r0]
	ldrb r0, [r3, #1]
	add r0, r1, r0
_02019248:
	sub r5, r5, r0
_0201924C:
	ldr r0, [sp, #0x28]
	add r1, sp, #8
	str r0, [sp]
	str r1, [sp, #4]
	ldr r0, [r8, #0x14]
	mov r1, r7
	ldr r4, [r0]
	mov r0, r8
	mov r2, r6
	mov r3, r5
	blx r4
	ldr r0, [sp, #8]
	ldrsb r0, [r0, #2]
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02019288: .word 0x0000FFFF

	arm_func_start FUN_0201928c
FUN_0201928c: ; 0x0201928C
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr lr, [sp, #0x10]
	ldr ip, _020192B4 ; =0x0208BF08
	str lr, [sp]
	str ip, [sp, #4]
	str r2, [sp, #8]
	bl FUN_02019148
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0_020192B4: .word 0x0208BF08
	arm_func_end FUN_0201928c

	arm_func_start FUN_020192b8
FUN_020192b8: ; 0x020192B8
	push {r4, r5, r6, lr}
	sub sp, sp, #0x10
	cmp r2, #8
	movlt r4, r2
	movge r6, #3
	clzlt r4, r4
	rsblt r6, r4, #0x1f
	cmp r3, #8
	movlt r4, r3
	movge r5, #3
	clzlt r4, r4
	rsblt r5, r4, #0x1f
	ldr r4, _02019334 ; =0x0208BF20
	ldr lr, [sp, #0x20]
	add r5, r4, r5, lsl #3
	add r4, r5, r6, lsl #1
	ldrb r4, [r4, #1]
	ldr ip, [sp, #0xc]
	ldrb r5, [r5, r6, lsl #1]
	bic r6, ip, #0xff
	ldr ip, _02019338 ; =0x0208BF14
	str lr, [sp]
	orr r5, r6, r5
	bic lr, r5, #0xff00
	lsl r4, r4, #0x18
	str ip, [sp, #4]
	orr r4, lr, r4, lsr #16
	str r4, [sp, #8]
	bl FUN_02019148
	add sp, sp, #0x10
	pop {r4, r5, r6, pc}
	.align 2, 0_02019334: .word 0x0208BF20
_02019338: .word 0x0208BF14
	arm_func_end FUN_020192b8

	arm_func_start FUN_0201933c
FUN_0201933c: ; 0x0201933C
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	ldr r5, [sp, #0x24]
	ldr lr, [sp, #0x20]
	cmp r5, #0x20
	ldr ip, [sp, #0x28]
	bgt _02019378
	mla r4, r5, lr, r3
	ldr lr, [sp, #0x2c]
	mov r3, r5
	add r0, r0, r4, lsl #1
	stm sp, {ip, lr}
	bl FUN_020193ec
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0201933c
_02019378:
	add r6, lr, r2
	ldr r4, [sp, #0x2c]
	cmp lr, r6
	add r5, r3, r1
	addge sp, sp, #8
	lsl r1, r4, #0x1c
	popge {r4, r5, r6, r7, r8, pc}
_02019394:
	mov r2, lr
	cmp lr, #0x20
	addge r2, lr, #0x20
	mov r7, r3
	cmp r3, r5
	add r8, r0, r2, lsl #6
	bge _020193D8
_020193B0:
	mov r2, r7
	cmp r7, #0x20
	addge r2, r7, #0x3e0
	orr r4, ip, r1, lsr #16
	lsl r2, r2, #1
	add r7, r7, #1
	strh r4, [r8, r2]
	cmp r7, r5
	add ip, ip, #1
	blt _020193B0
_020193D8:
	add lr, lr, #1
	cmp lr, r6
	blt _02019394
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020193ec
FUN_020193ec: ; 0x020193EC
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, [sp, #0x1c]
	ldr r8, [sp, #0x18]
	mov r6, #0
	cmp r2, #0
	lsl ip, r4, #0x1c
	pople {r4, r5, r6, r7, r8, pc}
	mov r4, r6
	arm_func_end FUN_020193ec
_0201940C:
	mov r7, r0
	mov r5, r4
	cmp r1, #0
	ble _02019434
_0201941C:
	orr lr, r8, ip, lsr #16
	add r5, r5, #1
	cmp r5, r1
	add r8, r8, #1
	strh lr, [r7], #2
	blt _0201941C
_02019434:
	add r6, r6, #1
	cmp r6, r2
	add r0, r0, r3, lsl #1
	blt _0201940C
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02019448
FUN_02019448: ; 0x02019448
	push {r3, r4, r5, lr}
	lsr r3, r0, #3
	lsr r5, r1, #3
	mul lr, r3, r5
	and r4, r0, #2
	and r2, r0, #1
	add r2, r2, r4, lsr #1
	and r0, r0, #4
	lsl ip, r2, #1
	add lr, lr, #0
	add ip, ip, r0, lsr #2
	mla ip, r5, ip, lr
	and r4, r1, #2
	and lr, r1, #1
	add r4, lr, r4, lsr #1
	and lr, r1, #4
	lsl r1, r4, #1
	add r1, r1, lr, lsr #2
	mla ip, r3, r1, ip
	add r1, r2, r0, lsr #2
	add r0, r4, lr, lsr #2
	mla r0, r1, r0, ip
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02019448

	arm_func_start FUN_020194a4
FUN_020194a4: ; 0x020194A4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x3c
	mov r6, r0
	mov r0, r1
	cmp r0, #8
	ldr r0, [sp, #0x60]
	str r1, [sp, #0x10]
	str r0, [sp, #0x60]
	str r2, [sp, #0x14]
	ldrlt r0, [sp, #0x10]
	str r3, [sp, #0x38]
	ldr fp, [sp, #0x64]
	ldr r5, [sp, #0x68]
	ldr r4, [sp, #0x6c]
	movge r2, #3
	clzlt r0, r0
	rsblt r2, r0, #0x1f
	ldr r0, [sp, #0x14]
	cmp r0, #8
	ldrlt r0, [sp, #0x14]
	movge r1, #3
	clzlt r0, r0
	rsblt r1, r0, #0x1f
	ldr r0, _02019798 ; =0x0208BF20
	mvn r3, #0
	add r1, r0, r1, lsl #3
	add r0, r1, r2, lsl #1
	ldrb r1, [r1, r2, lsl #1]
	ldr r2, [sp, #0x10]
	cmp fp, #0
	str r1, [sp, #0x34]
	ldrb r1, [r0, #1]
	str r1, [sp, #0x30]
	ldr r1, [sp, #0x34]
	and r1, r2, r3, lsl r1
	str r1, [sp, #0x2c]
	ldr r2, [sp, #0x14]
	ldr r1, [sp, #0x30]
	and r1, r2, r3, lsl r1
	str r1, [sp, #0x28]
	moveq r1, #1
	streq r1, [sp, #0x18]
	movne r1, #2
	strne r1, [sp, #0x18]
	mov r1, #0
	str r1, [sp, #0x24]
	bl FUN_020185d8
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0x34]
	asr sb, r2, r1
	ldr r2, [sp, #0x14]
	ldr r1, [sp, #0x30]
	asr r1, r2, r1
	str r1, [sp, #0x20]
	ldr r2, [sp, #0x18]
	ldr r1, [sp, #0x34]
	lsl r2, r2, r1
	ldr r1, [sp, #0x30]
	lsl r8, r2, r1
	ldr r1, [sp, #0x24]
	b _02019628
	arm_func_end FUN_020194a4
_02019598:
	ldr r2, [sp, #0x1c]
	ldr r1, [sp, #0x30]
	mov sl, #0
	lsl r2, r2, r1
	ldr r1, [sp, #0x60]
	add r1, r1, r2, lsl #3
	mov r2, #0x400
	and ip, r1, #0xff
	rsb r2, r2, #0
	b _02019618
_020195C0:
	ldr r1, [sp, #0x34]
	ldr lr, [r6]
	lsl r3, sl, r1
	ldr r1, [sp, #0x38]
	add sl, sl, #1
	add r1, r1, r3, lsl #3
	lsl r7, r1, #0x17
	ldr r1, _0201979C ; =0xFE00FF00
	ldrh r3, [r6, #4]
	and r1, lr, r1
	orr r1, r1, ip
	orr r7, r1, r7, lsr #7
	ldr r1, _020197A0 ; =0x3FFF3FFF
	and r3, r3, r2
	orr r3, r3, r5
	and r1, r7, r1
	orr r1, r1, r0
	bic r1, r1, #0x2000
	orr r1, r1, fp, lsl #13
	strh r3, [r6, #4]
	add r5, r5, r8, asr r4
	str r1, [r6], #8
_02019618:
	cmp sl, sb
	blt _020195C0
	ldr r1, [sp, #0x1c]
	add r1, r1, #1
_02019628:
	str r1, [sp, #0x1c]
	ldr r2, [sp, #0x1c]
	ldr r1, [sp, #0x20]
	cmp r2, r1
	blt _02019598
	ldr r0, [sp, #0x24]
	mla r0, sb, r1, r0
	str r0, [sp, #0x24]
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x10]
	cmp r1, r0
	bhs _020196B4
	ldr r0, [sp, #0x60]
	ldr r1, [sp, #0x10]
	stm sp, {r0, fp}
	ldr r0, [sp, #0x2c]
	ldr r2, [sp, #0x2c]
	sub r7, r1, r0
	ldr r1, [sp, #0x38]
	str r5, [sp, #8]
	add r3, r1, r2, lsl #3
	ldr r2, [sp, #0x28]
	mov r0, r6
	mov r1, r7
	str r4, [sp, #0xc]
	bl FUN_020194a4
	ldr r1, [sp, #0x18]
	add r6, r6, r0, lsl #3
	mul r2, r1, r7
	ldr r1, [sp, #0x28]
	mul r2, r1, r2
	ldr r1, [sp, #0x24]
	add r5, r5, r2, lsr r4
	add r0, r1, r0
	str r0, [sp, #0x24]
_020196B4:
	ldr r1, [sp, #0x28]
	ldr r0, [sp, #0x14]
	cmp r1, r0
	bhs _02019720
	ldr r1, [sp, #0x60]
	ldr r0, [sp, #0x28]
	ldr r3, [sp, #0x38]
	add r0, r1, r0, lsl #3
	stm sp, {r0, fp}
	str r5, [sp, #8]
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x28]
	str r4, [sp, #0xc]
	sub r7, r1, r0
	ldr r1, [sp, #0x2c]
	mov r0, r6
	mov r2, r7
	bl FUN_020194a4
	ldr r2, [sp, #0x18]
	ldr r1, [sp, #0x2c]
	add r6, r6, r0, lsl #3
	mul r1, r2, r1
	mul r1, r7, r1
	add r5, r5, r1, lsr r4
	ldr r1, [sp, #0x24]
	add r0, r1, r0
	str r0, [sp, #0x24]
_02019720:
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x10]
	cmp r1, r0
	ldrlo r1, [sp, #0x28]
	ldrlo r0, [sp, #0x14]
	cmplo r1, r0
	bhs _0201978C
	ldr r1, [sp, #0x60]
	ldr r0, [sp, #0x28]
	ldr r2, [sp, #0x10]
	add r0, r1, r0, lsl #3
	stm sp, {r0, fp}
	str r5, [sp, #8]
	ldr r1, [sp, #0x2c]
	ldr r3, [sp, #0x14]
	sub r1, r2, r1
	ldr r2, [sp, #0x28]
	ldr r5, [sp, #0x2c]
	sub r2, r3, r2
	ldr r3, [sp, #0x38]
	mov r0, r6
	add r3, r3, r5, lsl #3
	str r4, [sp, #0xc]
	bl FUN_020194a4
	ldr r1, [sp, #0x24]
	add r0, r1, r0
	str r0, [sp, #0x24]
_0201978C:
	ldr r0, [sp, #0x24]
	add sp, sp, #0x3c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02019798: .word 0x0208BF20
_0201979C: .word 0xFE00FF00
_020197A0: .word 0x3FFF3FFF

	arm_func_start FUN_020197a4
FUN_020197a4: ; 0x020197A4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	mov sl, r0
	ldr r0, [sp, #0x38]
	ldr r4, [sl, #4]
	str r0, [sp, #0xc]
	ldr r5, [r4, #4]
	add r0, sp, #0xc
	mov sb, r1
	mov r8, r2
	str r3, [sp, #8]
	ldrsb r7, [sp, #0x41]
	ldr fp, [sl, #8]
	blx r5
	cmp r0, #0
	beq _0201982C
	ldrsb r6, [sp, #0x40]
	arm_func_end FUN_020197a4
_020197E8:
	cmp r0, #0xa
	beq _0201982C
	ldr r1, [sp, #8]
	mov r2, sb
	str r1, [sp]
	str r0, [sp, #4]
	ldr r0, [sl]
	mov r1, r4
	mov r3, r8
	bl FUN_02019170
	add r0, fp, r0
	mla sb, r0, r6, sb
	mla r8, r0, r7, r8
	add r0, sp, #0xc
	blx r5
	cmp r0, #0
	bne _020197E8
_0201982C:
	ldr r1, [sp, #0x3c]
	cmp r1, #0
	addeq sp, sp, #0x10
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r0, #0xa
	ldreq r1, [sp, #0xc]
	ldr r0, [sp, #0x3c]
	movne r1, #0
	str r1, [r0]
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02019858
FUN_02019858: ; 0x02019858
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	mov sl, r0
	ldr r0, [sl, #4]
	ldr r4, [sp, #0x60]
	ldr r0, [r0]
	ldrsb r7, [sp, #0x65]
	ldrsb r0, [r0, #1]
	ldr r5, [sl, #0xc]
	ldrsb r8, [sp, #0x64]
	add r5, r5, r0
	rsb r0, r7, #0
	mul r0, r5, r0
	str r0, [sp, #0x1c]
	mul r0, r5, r8
	str r0, [sp, #0x18]
	ldr r0, [sp, #0x58]
	str r1, [sp, #0xc]
	str r2, [sp, #0x10]
	mov sb, r3
	str r4, [sp, #0x2c]
	cmp r4, #0
	str r0, [sp, #0x58]
	mov r4, #0
	addeq sp, sp, #0x30
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r2, [sp, #0x5c]
	add r1, sb, #1
	and r0, r2, #0x800
	str r0, [sp, #0x14]
	add r0, r1, r1, lsr #31
	str r0, [sp, #0x28]
	ldrb r0, [sp, #0x64]
	and fp, r2, #0x400
	str r0, [sp, #0x20]
	ldrb r0, [sp, #0x65]
	str r0, [sp, #0x24]
	arm_func_end FUN_02019858
_020198EC:
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x1c]
	cmp r0, #0
	ldr r0, [sp, #0xc]
	mla r5, r4, r1, r0
	ldr r1, [sp, #0x18]
	ldr r0, [sp, #0x10]
	mla r6, r4, r1, r0
	beq _02019928
	ldr r2, [sp, #0x2c]
	mov r3, #0
	ldmib sl, {r0, r1}
	bl FUN_0201833c
	sub r0, sb, r0
	b _02019954
_02019928:
	cmp fp, #0
	beq _0201995C
	ldr r2, [sp, #0x2c]
	mov r3, #0
	ldmib sl, {r0, r1}
	bl FUN_0201833c
	add r0, r0, #1
	add r0, r0, r0, lsr #31
	asr r1, r0, #1
	ldr r0, [sp, #0x28]
	rsb r0, r1, r0, asr #1
_02019954:
	mla r5, r0, r8, r5
	mla r6, r0, r7, r6
_0201995C:
	ldr r3, [sp, #0x2c]
	mov r1, r5
	str r3, [sp]
	add r3, sp, #0x2c
	str r3, [sp, #4]
	ldr r3, [sp, #0x20]
	mov r2, r6
	strb r3, [sp, #8]
	ldr r3, [sp, #0x24]
	mov r0, sl
	strb r3, [sp, #9]
	ldr r3, [sp, #0x58]
	bl FUN_020197a4
	ldr r0, [sp, #0x2c]
	add r4, r4, #1
	cmp r0, #0
	bne _020198EC
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_020199a8
FUN_020199a8: ; 0x020199A8
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x28
	mov r8, r0
	ldr r4, [sp, #0x44]
	mov r5, r3
	str r4, [sp]
	ldr r3, [r8, #0xc]
	add r0, sp, #0x18
	mov r7, r1
	mov r6, r2
	ldmib r8, {r1, r2}
	ldr r4, [sp, #0x40]
	bl FUN_0201845c
	ldr r2, [sp, #0x18]
	ldr r0, [sp, #0x1c]
	str r2, [sp, #0x10]
	str r0, [sp, #0x14]
	str r2, [sp, #0x20]
	str r0, [sp, #0x24]
	tst r4, #0x10
	beq _02019A20
	add r0, r2, #1
	rsb r0, r0, #0
	add r0, r0, r0, lsr #31
	ldrsb r1, [sp, #0x48]
	asr r2, r0, #1
	ldrsb r0, [sp, #0x49]
	mla r7, r2, r1, r7
	mla r6, r2, r0, r6
	b _02019A38
	arm_func_end FUN_020199a8
_02019A20:
	tst r4, #0x20
	ldrsbne r1, [sp, #0x48]
	rsbne r2, r2, #0
	ldrsbne r0, [sp, #0x49]
	mlane r7, r2, r1, r7
	mlane r6, r2, r0, r6
_02019A38:
	tst r4, #2
	beq _02019A6C
	ldr r0, [sp, #0x24]
	ldrsb r2, [sp, #0x49]
	add r0, r0, #1
	rsb r0, r0, #0
	add r0, r0, r0, lsr #31
	ldrsb r1, [sp, #0x48]
	asr r3, r0, #1
	rsb r0, r2, #0
	mla r7, r3, r0, r7
	mla r6, r3, r1, r6
	b _02019A90
_02019A6C:
	tst r4, #4
	beq _02019A90
	ldrsb r1, [sp, #0x49]
	ldr r2, [sp, #0x24]
	ldrsb r0, [sp, #0x48]
	rsb r2, r2, #0
	rsb r1, r1, #0
	mla r7, r2, r1, r7
	mla r6, r2, r0, r6
_02019A90:
	str r5, [sp]
	ldr r1, [sp, #0x44]
	str r4, [sp, #4]
	ldrb r0, [sp, #0x48]
	str r1, [sp, #8]
	ldrb r4, [sp, #0x49]
	strb r0, [sp, #0xc]
	ldr r3, [sp, #0x20]
	mov r0, r8
	mov r1, r7
	mov r2, r6
	strb r4, [sp, #0xd]
	bl FUN_02019858
	add sp, sp, #0x28
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02019acc
FUN_02019acc: ; 0x02019ACC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	ldr ip, [sp, #0x30]
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	tst ip, #0x100
	beq _02019B20
	ldr r0, [r7, #4]
	ldr r1, [r7, #0xc]
	ldr r2, [sp, #0x34]
	bl FUN_020183e8
	ldrsb r2, [sp, #0x39]
	ldr r3, [sp, #0x28]
	ldrsb r1, [sp, #0x38]
	sub r3, r3, r0
	rsb r0, r2, #0
	mla r6, r3, r0, r6
	mla r5, r3, r1, r5
	b _02019B68
	arm_func_end FUN_02019acc
_02019B20:
	tst ip, #0x80
	beq _02019B68
	ldr r0, [r7, #4]
	ldr r1, [r7, #0xc]
	ldr r2, [sp, #0x34]
	bl FUN_020183e8
	ldr r1, [sp, #0x28]
	add r0, r0, #1
	ldrsb r3, [sp, #0x39]
	add ip, r1, #1
	add r1, r0, r0, lsr #31
	ldrsb r2, [sp, #0x38]
	add r0, ip, ip, lsr #31
	asr r1, r1, #1
	rsb r1, r1, r0, asr #1
	rsb r0, r3, #0
	mla r6, r1, r0, r6
	mla r5, r1, r2, r5
_02019B68:
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x30]
	str r1, [sp]
	ldr r1, [sp, #0x34]
	str r0, [sp, #4]
	ldrb r0, [sp, #0x38]
	str r1, [sp, #8]
	ldrb ip, [sp, #0x39]
	strb r0, [sp, #0xc]
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	strb ip, [sp, #0xd]
	bl FUN_02019858
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02019bac
FUN_02019bac: ; 0x02019BAC
	push {r3, r4, r5, r6, r7, lr}
	mov r4, #0
	movs r7, r0
	mov r6, r1
	mov r5, r4
	beq _02019C28
	cmp r7, #0
	beq _02019BE0
	ldr r1, [r7]
	ldr r0, _02019D60 ; =0x4E465452
	cmp r1, r0
	moveq r0, #1
	beq _02019BE4
	arm_func_end FUN_02019bac
_02019BE0:
	mov r0, #0
_02019BE4:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _02019C2C
	cmp r7, #0
	beq _02019C14
	ldrh r1, [r7, #6]
	ldr r0, _02019D64 ; =0x00000102
	cmp r1, r0
	movhs r0, #1
	bhs _02019C18
_02019C14:
	mov r0, #0
_02019C18:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	b _02019C2C
_02019C28:
	mov r0, r5
_02019C2C:
	cmp r0, #0
	bne _02019D20
	cmp r7, #0
	beq _02019C9C
	beq _02019C54
	ldr r1, [r7]
	ldr r0, _02019D60 ; =0x4E465452
	cmp r1, r0
	moveq r0, #1
	beq _02019C58
_02019C54:
	mov r0, #0
_02019C58:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _02019CA0
	cmp r7, #0
	beq _02019C88
	ldrh r1, [r7, #6]
	ldr r0, _02019D68 ; =0x00000101
	cmp r1, r0
	movhs r0, #1
	bhs _02019C8C
_02019C88:
	mov r0, #0
_02019C8C:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	b _02019CA0
_02019C9C:
	mov r0, #0
_02019CA0:
	cmp r0, #0
	bne _02019D20
	cmp r7, #0
	beq _02019D0C
	beq _02019CC8
	ldr r1, [r7]
	ldr r0, _02019D60 ; =0x4E465452
	cmp r1, r0
	moveq r0, #1
	beq _02019CCC
_02019CC8:
	mov r0, #0
_02019CCC:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _02019D10
	cmp r7, #0
	beq _02019CF8
	ldrh r0, [r7, #6]
	cmp r0, #0x100
	movhs r0, #1
	bhs _02019CFC
_02019CF8:
	mov r0, #0
_02019CFC:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	b _02019D10
_02019D0C:
	mov r0, #0
_02019D10:
	cmp r0, #0
	bne _02019D1C
	bl FUN_02004160
_02019D1C:
	mov r5, #1
_02019D20:
	mov r0, r7
	bl FUN_02019d70
	ldr r1, _02019D6C ; =0x46494E46
	mov r0, r7
	bl FUN_02018154
	cmp r0, #0
	moveq r0, #0
	streq r0, [r6]
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r0, #8
	str r0, [r6]
	cmp r5, #0
	ldrne r0, [r0, #8]
	strbne r4, [r0, #7]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02019D60: .word 0x4E465452
_02019D64: .word 0x00000102
_02019D68: .word 0x00000101
_02019D6C: .word 0x46494E46

	arm_func_start FUN_02019d70
FUN_02019d70: ; 0x02019D70
	push {r4, r5, r6, lr}
	ldrh r1, [r0, #0xc]
	ldrh r3, [r0, #0xe]
	mov r2, #0
	add r1, r0, r1
	cmp r3, #0
	pople {r4, r5, r6, pc}
	ldr r3, _02019E38 ; =0x46494E46
	ldr ip, _02019E3C ; =0x43574448
	ldr r4, _02019E40 ; =0x434D4150
	ldr lr, _02019E44 ; =0x43474C50
	arm_func_end FUN_02019d70
_02019D9C:
	ldr r5, [r1]
	cmp r5, r4
	bhi _02019DB0
	bhs _02019E0C
	b _02019E1C
_02019DB0:
	cmp r5, ip
	bhi _02019DC0
	beq _02019DF8
	b _02019E1C
_02019DC0:
	cmp r5, r3
	bne _02019E1C
	ldr r5, [r1, #0x10]
	add r5, r5, r0
	str r5, [r1, #0x10]
	ldr r5, [r1, #0x14]
	cmp r5, #0
	addne r5, r5, r0
	strne r5, [r1, #0x14]
	ldr r5, [r1, #0x18]
	cmp r5, #0
	addne r5, r5, r0
	strne r5, [r1, #0x18]
	b _02019E1C
_02019DF8:
	ldr r5, [r1, #0xc]
	cmp r5, #0
	addne r5, r5, r0
	strne r5, [r1, #0xc]
	b _02019E1C
_02019E0C:
	ldr r5, [r1, #0x10]
	cmp r5, #0
	addne r5, r5, r0
	strne r5, [r1, #0x10]
_02019E1C:
	ldrh r5, [r0, #0xe]
	ldr r6, [r1, #4]
	add r2, r2, #1
	cmp r2, r5
	add r1, r1, r6
	blt _02019D9C
	pop {r4, r5, r6, pc}
	.align 2, 0_02019E38: .word 0x46494E46
_02019E3C: .word 0x43574448
_02019E40: .word 0x434D4150
_02019E44: .word 0x43474C50

	arm_func_start FUN_02019e48
FUN_02019e48: ; 0x02019E48
	push {r4, r5, r6, lr}
	ldrsb r3, [r0, #4]
	ldrb r4, [r0, #5]
	mov r5, r1
	cmp r3, r5
	subge r1, r3, r5
	lsrge r2, r4, r1
	strbge r1, [r0, #4]
	bge _02019E98
	ldr r2, [r0]
	sub r6, r5, r3
	add r1, r2, #1
	str r1, [r0]
	ldrb r3, [r2]
	mov r2, #8
	mov r1, r6
	strb r3, [r0, #5]
	strb r2, [r0, #4]
	bl FUN_02019e48
	orr r2, r0, r4, lsl r6
	arm_func_end FUN_02019e48
_02019E98:
	rsb r0, r5, #8
	mov r1, #0xff
	and r0, r2, r1, asr r0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02019ea8
FUN_02019ea8: ; 0x02019EA8
	ldr r1, [r0]
	ldrh r2, [r1], #2
	str r1, [r0]
	mov r0, r2
	bx lr
	arm_func_end FUN_02019ea8

	arm_func_start FUN_02019ebc
FUN_02019ebc: ; 0x02019EBC
	ldr r1, [r0]
	ldrb r3, [r1]
	cmp r3, #0x81
	blo _02019ED4
	cmp r3, #0xa0
	blo _02019EDC
	arm_func_end FUN_02019ebc
_02019ED4:
	cmp r3, #0xe0
	blo _02019EFC
_02019EDC:
	ldrb r1, [r1, #1]
	ldr r2, [r0]
	orr r1, r1, r3, lsl #8
	lsl r1, r1, #0x10
	add r2, r2, #2
	str r2, [r0]
	lsr r3, r1, #0x10
	b _02019F08
_02019EFC:
	ldr r1, [r0]
	add r1, r1, #1
	str r1, [r0]
_02019F08:
	mov r0, r3
	bx lr

	arm_func_start FUN_02019f10
FUN_02019f10: ; 0x02019F10
	mov r0, #0
	bx lr
	arm_func_end FUN_02019f10

	arm_func_start FUN_02019f18
FUN_02019f18: ; 0x02019F18
	mvn r0, #0
	bx lr
	arm_func_end FUN_02019f18

	arm_func_start FUN_02019f20
FUN_02019f20: ; 0x02019F20
	mov r0, #0
	bx lr
	arm_func_end FUN_02019f20

	arm_func_start FUN_02019f28
FUN_02019f28: ; 0x02019F28
	mvn r0, #0
	bx lr
	arm_func_end FUN_02019f28

	arm_func_start FUN_02019f30
FUN_02019f30: ; 0x02019F30
	push {r4, r5, r6, r7, r8, lr}
	ldr r3, [r0]
	mov lr, #0
	cmp r3, #0
	beq _0201A00C
	mov r8, lr
	mov r4, lr
	arm_func_end FUN_02019f30
_02019F4C:
	ldr r6, [r3]
	ldr r5, [r2, #4]
	ldr ip, [r3, #0xc]
	cmp r6, r5
	bne _02019FA8
	ldr r5, [r3, #4]
	orr lr, lr, #1
	add r5, r6, r5
	str r5, [r2, #4]
	ldr r6, [r3, #8]
	ldr r5, [r3, #0xc]
	cmp r6, #0
	strne r5, [r6, #0xc]
	streq r5, [r0]
	cmp r5, #0
	strne r6, [r5, #8]
	ldr r5, [r1]
	cmp r5, #0
	strne r3, [r5, #8]
	ldr r5, [r1]
	str r5, [r3, #0xc]
	str r8, [r3, #8]
	str r3, [r1]
_02019FA8:
	ldr r7, [r3]
	ldr r5, [r3, #4]
	ldr r6, [r2]
	add r5, r7, r5
	cmp r6, r5
	bne _0201A000
	str r7, [r2]
	ldr r6, [r3, #8]
	ldr r5, [r3, #0xc]
	cmp r6, #0
	strne r5, [r6, #0xc]
	streq r5, [r0]
	cmp r5, #0
	strne r6, [r5, #8]
	ldr r5, [r1]
	orr lr, lr, #1
	cmp r5, #0
	strne r3, [r5, #8]
	ldr r5, [r1]
	str r5, [r3, #0xc]
	str r4, [r3, #8]
	str r3, [r1]
_0201A000:
	mov r3, ip
	cmp ip, #0
	bne _02019F4C
_0201A00C:
	mov r0, lr
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0201a014
FUN_0201a014: ; 0x0201A014
	mov r1, #0
	str r1, [r0]
	bx lr
	arm_func_end FUN_0201a014

	arm_func_start FUN_0201a020
FUN_0201a020: ; 0x0201A020
	push {r3, lr}
	subs lr, r1, #1
	mov ip, #0
	beq _0201A050
	arm_func_end FUN_0201a020
_0201A030:
	add r3, ip, #1
	add r2, r0, ip, lsl #4
	add ip, r0, r3, lsl #4
	str ip, [r2, #0xc]
	mov ip, r3
	str r2, [r2, #0x18]
	cmp r3, lr
	blo _0201A030
_0201A050:
	mov r2, #0
	str r2, [r0, #8]
	add r1, r0, r1, lsl #4
	str r2, [r1, #-4]
	pop {r3, pc}

	arm_func_start FUN_0201a064
FUN_0201a064: ; 0x0201A064
	push {r3, lr}
	ldr lr, [r1]
	cmp lr, #0
	ldrne ip, [lr, #0xc]
	strne ip, [r1]
	cmp lr, #0
	beq _0201A0B8
	stm lr, {r2, r3}
	mov r1, #0
	str r1, [lr, #8]
	str r1, [lr, #0xc]
	ldr r1, [r0]
	cmp r1, #0
	strne lr, [r1, #8]
	ldr r2, [r0]
	mov r1, #0
	str r2, [lr, #0xc]
	str r1, [lr, #8]
	str lr, [r0]
	mov r0, #1
	pop {r3, pc}
	arm_func_end FUN_0201a064
_0201A0B8:
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_0201a0c0
FUN_0201a0c0: ; 0x0201A0C0
	push {r3, lr}
	mov ip, #0
	str ip, [sp]
	bl FUN_0201a0d4
	pop {r3, pc}
	arm_func_end FUN_0201a0c0

	arm_func_start FUN_0201a0d4
FUN_0201a0d4: ; 0x0201A0D4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r7, [r0]
	ldr sb, [sp, #0x28]
	cmp r7, #0
	mov r6, #0
	beq _0201A13C
	sub ip, sb, #1
	mvn r8, ip
	mov fp, r6
	arm_func_end FUN_0201a0d4
_0201A0F8:
	cmp sb, #1
	ldrls lr, [r7]
	movls r5, fp
	movls r4, r3
	bls _0201A120
	ldr r5, [r7]
	add r4, r5, ip
	and lr, r8, r4
	sub r5, lr, r5
	add r4, r3, r5
_0201A120:
	ldr sl, [r7, #4]
	cmp sl, r4
	movhs r6, r7
	bhs _0201A13C
	ldr r7, [r7, #0xc]
	cmp r7, #0
	bne _0201A0F8
_0201A13C:
	cmp r6, #0
	beq _0201A200
	cmp r5, #0
	beq _0201A19C
	ldr r3, [r1]
	cmp r3, #0
	ldrne r7, [r3, #0xc]
	strne r7, [r1]
	cmp r3, #0
	beq _0201A200
	ldr r7, [r6]
	str r7, [r3]
	str r5, [r3, #4]
	mov r5, #0
	str r5, [r3, #8]
	str r5, [r3, #0xc]
	ldr r5, [r0]
	cmp r5, #0
	strne r3, [r5, #8]
	ldr r5, [r0]
	str r5, [r3, #0xc]
	mov r5, #0
	str r5, [r3, #8]
	str r3, [r0]
_0201A19C:
	ldr r3, [r6, #4]
	subs r3, r3, r4
	str r3, [r6, #4]
	ldr r3, [r6]
	add r3, r3, r4
	str r3, [r6]
	bne _0201A1F4
	ldr r4, [r6, #8]
	ldr r3, [r6, #0xc]
	cmp r4, #0
	strne r3, [r4, #0xc]
	streq r3, [r0]
	cmp r3, #0
	strne r4, [r3, #8]
	ldr r0, [r1]
	cmp r0, #0
	strne r6, [r0, #8]
	ldr r0, [r1]
	str r0, [r6, #0xc]
	mov r0, #0
	str r0, [r6, #8]
	str r6, [r1]
_0201A1F4:
	str lr, [r2]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0201A200:
	mov r0, #0
	str r0, [r2]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0201a20c
FUN_0201a20c: ; 0x0201A20C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r7, r0
	ldr r5, [r7]
	mov r6, r1
	cmp r5, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	add r4, sp, #0
	arm_func_end FUN_0201a20c
_0201A230:
	ldr r1, [r5]
	mov r0, r7
	str r1, [sp]
	ldr r3, [r5]
	ldr r2, [r5, #4]
	mov r1, r6
	add r3, r3, r2
	mov r2, r4
	str r3, [sp, #4]
	bl FUN_02019f30
	cmp r0, #0
	ldreq r5, [r5, #0xc]
	beq _0201A280
	ldr r0, [sp]
	str r0, [r5]
	ldr r1, [sp, #4]
	ldr r0, [sp]
	sub r0, r1, r0
	str r0, [r5, #4]
	ldr r5, [r7]
_0201A280:
	cmp r5, #0
	bne _0201A230
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0201a290
FUN_0201a290: ; 0x0201A290
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	add r3, r2, r3
	str r2, [sp]
	add r2, sp, #0
	mov r5, r1
	str r3, [sp, #4]
	mov r4, r0
	bl FUN_02019f30
	ldr r3, [r5]
	cmp r3, #0
	ldrne r0, [r3, #0xc]
	strne r0, [r5]
	cmp r3, #0
	addeq sp, sp, #8
	mov r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [sp]
	str r1, [r3]
	ldr r2, [sp, #4]
	ldr r1, [sp]
	sub r1, r2, r1
	str r1, [r3, #4]
	str r0, [r3, #8]
	str r0, [r3, #0xc]
	ldr r0, [r4]
	cmp r0, #0
	strne r3, [r0, #8]
	ldr r1, [r4]
	mov r0, #0
	str r1, [r3, #0xc]
	str r0, [r3, #8]
	str r3, [r4]
	mov r0, #1
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0201a290

	arm_func_start FUN_0201a320
FUN_0201a320: ; 0x0201A320
	lsl r0, r0, #4
	bx lr
	arm_func_end FUN_0201a320

	arm_func_start FUN_0201a328
FUN_0201a328: ; 0x0201A328
	push {r3, lr}
	ldr ip, _0201A36C ; =0x0209776C
	str r0, [ip, #0xc]
	str r1, [ip, #0x10]
	str r2, [ip, #0x14]
	str r3, [ip, #0x18]
	bl FUN_0201a470
	ldr r0, [sp, #8]
	cmp r0, #0
	popeq {r3, pc}
	ldr r3, _0201A370 ; =FUN_0201a380
	ldr r1, _0201A374 ; =0x0208EEA0
	ldr r2, _0201A378 ; =FUN_0201a404
	ldr r0, _0201A37C ; =0x0208EEA4
	str r3, [r1]
	str r2, [r0]
	pop {r3, pc}
	.align 2, 0_0201A36C: .word 0x0209776C
_0201A370: .word FUN_0201a380
_0201A374: .word 0x0208EEA0
_0201A378: .word FUN_0201a404
_0201A37C: .word 0x0208EEA4
	arm_func_end FUN_0201a328

	arm_func_start FUN_0201a380
FUN_0201a380: ; 0x0201A380
	push {r3, r4, r5, lr}
	cmp r0, #0
	moveq r5, #0x10
	addne r0, r0, #0xf
	bicne r5, r0, #0xf
	ldr r0, _0201A3F4 ; =0x0007FFF0
	mov r4, r1
	cmp r5, r0
	movhs r0, #0
	pophs {r3, r4, r5, pc}
	cmp r4, #0
	add r2, sp, #0
	beq _0201A3BC
	ldr r0, _0201A3F8 ; =0x02097770
	b _0201A3C0
	arm_func_end FUN_0201a380
_0201A3BC:
	ldr r0, _0201A3FC ; =0x0209776C
_0201A3C0:
	ldr r1, _0201A400 ; =0x02097774
	mov r3, r5
	bl FUN_0201a0c0
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [sp]
	lsr r1, r5, #4
	lsl r0, r0, #0xd
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	orr r0, r0, r4, lsl #31
	pop {r3, r4, r5, pc}
	.align 2, 0_0201A3F4: .word 0x0007FFF0
_0201A3F8: .word 0x02097770
_0201A3FC: .word 0x0209776C
_0201A400: .word 0x02097774

	arm_func_start FUN_0201a404
FUN_0201a404: ; 0x0201A404
	push {r3, lr}
	ldr r1, _0201A460 ; =0x7FFF0000
	lsl r2, r0, #0x10
	and r1, r0, r1
	lsr r1, r1, #0x10
	and r0, r0, #0x80000000
	lsr r2, r2, #0xd
	lsls r3, r1, #4
	lsr r0, r0, #0x1f
	beq _0201A458
	cmp r0, #0
	beq _0201A43C
	ldr r0, _0201A464 ; =0x02097770
	b _0201A440
	arm_func_end FUN_0201a404
_0201A43C:
	ldr r0, _0201A468 ; =0x0209776C
_0201A440:
	ldr r1, _0201A46C ; =0x02097774
	bl FUN_0201a290
	cmp r0, #0
	movne r0, #0
	moveq r0, #1
	pop {r3, pc}
_0201A458:
	mov r0, #2
	pop {r3, pc}
	.align 2, 0_0201A460: .word 0x7FFF0000
_0201A464: .word 0x02097770
_0201A468: .word 0x0209776C
_0201A46C: .word 0x02097774

	arm_func_start FUN_0201a470
FUN_0201a470: ; 0x0201A470
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x30
	ldr r5, _0201A674 ; =0x0208BF80
	add r4, sp, #0
	ldm r5!, {r0, r1, r2, r3}
	mov ip, r4
	stm r4!, {r0, r1, r2, r3}
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldm r5, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r0, _0201A678 ; =0x0209776C
	ldr r4, _0201A67C ; =0x02097774
	ldr r1, [r0, #0x10]
	ldr r2, [r0, #0xc]
	add r0, r1, r1, lsr #1
	sub r0, r2, r0
	lsr r5, r1, #1
	mov r6, #0
	mov r2, #0xc
	arm_func_end FUN_0201a470
_0201A4C0:
	cmp r6, #0
	beq _0201A4D0
	cmp r6, #2
	bne _0201A50C
_0201A4D0:
	mul r3, r6, r2
	ldr r7, [ip, r3]
	add lr, ip, r3
	cmp r7, #0
	cmpne r1, #0
	beq _0201A50C
	ldr r3, [lr, #8]
	cmp r7, r1
	movhi r7, r1
	add r3, r3, r7
	str r3, [lr, #8]
	ldr r3, [lr]
	sub r1, r1, r7
	sub r3, r3, r7
	str r3, [lr]
_0201A50C:
	add r6, r6, #1
	cmp r6, #4
	blo _0201A4C0
	ldr r1, [sp, #0xc]
	mov r7, #0
	sub r1, r1, r5
	str r1, [sp, #0xc]
	add r3, sp, #0
	mov r1, #0xc
_0201A530:
	mul r2, r7, r1
	ldr ip, [r3, r2]
	add r6, r3, r2
	cmp ip, #0
	cmpne r0, #0
	beq _0201A56C
	ldr r2, [r6, #4]
	cmp ip, r0
	movhi ip, r0
	add r2, r2, ip
	str r2, [r6, #4]
	ldr r2, [r6]
	sub r0, r0, ip
	sub r2, r2, ip
	str r2, [r6]
_0201A56C:
	add r7, r7, #1
	cmp r7, #4
	blo _0201A530
	ldr r0, _0201A680 ; =0x0209776C
	bl FUN_0201a014
	ldr r7, _0201A684 ; =0x02097770
	mov r0, r7
	bl FUN_0201a014
	ldr r6, _0201A678 ; =0x0209776C
	ldr r1, [r6, #0x18]
	ldr r0, [r6, #0x14]
	lsr r1, r1, #4
	bl FUN_0201a020
	str r0, [r6, #8]
	ldr r6, [sp, #8]
	cmp r6, #0
	beq _0201A5C4
	ldr r1, _0201A67C ; =0x02097774
	mov r0, r7
	mov r3, r6
	mov r2, #0
	bl FUN_0201a064
_0201A5C4:
	ldr r3, [sp, #4]
	cmp r3, #0
	beq _0201A5E0
	ldr r0, _0201A680 ; =0x0209776C
	ldr r1, _0201A67C ; =0x02097774
	mov r2, r6
	bl FUN_0201a064
_0201A5E0:
	ldr r6, [sp, #0x20]
	cmp r6, #0
	beq _0201A600
	ldr r0, _0201A684 ; =0x02097770
	ldr r1, _0201A67C ; =0x02097774
	mov r3, r6
	mov r2, #0x40000
	bl FUN_0201a064
_0201A600:
	ldr r3, [sp, #0x1c]
	cmp r3, #0
	beq _0201A61C
	ldr r0, _0201A680 ; =0x0209776C
	ldr r1, _0201A67C ; =0x02097774
	add r2, r6, #0x40000
	bl FUN_0201a064
_0201A61C:
	ldr r3, [sp, #0x28]
	cmp r3, #0
	beq _0201A638
	ldr r0, _0201A680 ; =0x0209776C
	ldr r1, _0201A67C ; =0x02097774
	mov r2, #0x60000
	bl FUN_0201a064
_0201A638:
	ldr r3, [sp, #0x10]
	cmp r3, #0
	beq _0201A654
	ldr r0, _0201A680 ; =0x0209776C
	ldr r1, _0201A67C ; =0x02097774
	add r2, r5, #0x20000
	bl FUN_0201a064
_0201A654:
	ldr r0, _0201A680 ; =0x0209776C
	mov r1, r4
	bl FUN_0201a20c
	ldr r0, _0201A684 ; =0x02097770
	mov r1, r4
	bl FUN_0201a20c
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0201A674: .word 0x0208BF80
_0201A678: .word 0x0209776C
_0201A67C: .word 0x02097774
_0201A680: .word 0x0209776C
_0201A684: .word 0x02097770

	arm_func_start FUN_0201a688
FUN_0201a688: ; 0x0201A688
	lsl r0, r0, #4
	bx lr
	arm_func_end FUN_0201a688

	arm_func_start FUN_0201a690
FUN_0201a690: ; 0x0201A690
	push {r4, lr}
	ldr ip, _0201A6D0 ; =0x02097788
	mov r4, r3
	str r0, [ip, #8]
	str r1, [ip, #0xc]
	str r2, [ip, #0x10]
	bl FUN_0201a7fc
	cmp r4, #0
	popeq {r4, pc}
	ldr r3, _0201A6D4 ; =FUN_0201a6e4
	ldr r1, _0201A6D8 ; =0x0208EEA8
	ldr r2, _0201A6DC ; =FUN_0201a7b8
	ldr r0, _0201A6E0 ; =0x0208EEAC
	str r3, [r1]
	str r2, [r0]
	pop {r4, pc}
	.align 2, 0_0201A6D0: .word 0x02097788
_0201A6D4: .word FUN_0201a6e4
_0201A6D8: .word 0x0208EEA8
_0201A6DC: .word FUN_0201a7b8
_0201A6E0: .word 0x0208EEAC
	arm_func_end FUN_0201a690

	arm_func_start FUN_0201a6e4
FUN_0201a6e4: ; 0x0201A6E4
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	cmp r0, #0
	moveq r4, #8
	addne r0, r0, #7
	bicne r4, r0, #7
	ldr r0, _0201A7AC ; =0x0007FFF8
	cmp r4, r0
	addhs sp, sp, #8
	movhs r0, #0
	pophs {r4, r5, r6, pc}
	cmp r1, #0
	add r2, sp, #4
	beq _0201A768
	ldr r6, _0201A7B0 ; =0x02097788
	ldr r5, _0201A7B4 ; =0x0209778C
	mov ip, #8
	mov r0, r6
	mov r1, r5
	mov r3, r4
	str ip, [sp]
	bl FUN_0201a0d4
	ldr r2, [sp, #4]
	add r1, r2, r4
	cmp r1, #0x10000
	bls _0201A780
	mov r0, r6
	mov r1, r5
	mov r3, r4
	bl FUN_0201a290
	add sp, sp, #8
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0201a6e4
_0201A768:
	ldr r0, _0201A7B0 ; =0x02097788
	mov ip, #0x10
	ldr r1, _0201A7B4 ; =0x0209778C
	mov r3, r4
	str ip, [sp]
	bl FUN_0201a0d4
_0201A780:
	cmp r0, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [sp, #4]
	lsr r1, r4, #3
	lsl r0, r0, #0xd
	lsr r0, r0, #0x10
	orr r0, r0, r1, lsl #16
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_0201A7AC: .word 0x0007FFF8
_0201A7B0: .word 0x02097788
_0201A7B4: .word 0x0209778C

	arm_func_start FUN_0201a7b8
FUN_0201a7b8: ; 0x0201A7B8
	push {r3, lr}
	mov r1, #0x10000
	rsb r1, r1, #0
	and r1, r0, r1
	lsl r2, r0, #0x10
	lsr r3, r1, #0x10
	ldr r0, _0201A7F4 ; =0x02097788
	ldr r1, _0201A7F8 ; =0x0209778C
	lsr r2, r2, #0xd
	lsl r3, r3, #3
	bl FUN_0201a290
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	.align 2, 0_0201A7F4: .word 0x02097788
_0201A7F8: .word 0x0209778C
	arm_func_end FUN_0201a7b8

	arm_func_start FUN_0201a7fc
FUN_0201a7fc: ; 0x0201A7FC
	push {r4, r5, r6, lr}
	ldr r4, _0201A84C ; =0x02097788
	ldr r1, [r4, #0x10]
	ldr r0, [r4, #0xc]
	lsr r1, r1, #4
	bl FUN_0201a020
	ldr r6, _0201A850 ; =0x02097788
	str r0, [r4, #4]
	mov r0, r6
	bl FUN_0201a014
	ldr r5, _0201A854 ; =0x0209778C
	ldr r3, [r4, #8]
	mov r0, r6
	mov r1, r5
	mov r2, #0
	bl FUN_0201a064
	mov r0, r6
	mov r1, r5
	bl FUN_0201a20c
	pop {r4, r5, r6, pc}
	.align 2, 0_0201A84C: .word 0x02097788
_0201A850: .word 0x02097788
_0201A854: .word 0x0209778C
	arm_func_end FUN_0201a7fc

	arm_func_start FUN_0201a858
FUN_0201a858: ; 0x0201A858
	push {r4, r5, r6, lr}
	ldr r4, _0201A8C0 ; =0x0209779C
	ldr r0, [r4, #0xc]
	cmp r0, #0
	popne {r4, r5, r6, pc}
	mov r6, #1
	str r6, [r4, #0xc]
	bl FUN_0200bb68
	ldr r0, _0201A8C4 ; =FUN_0201a904
	mov r5, #0
	str r0, [r4, #0x10]
	ldr r0, _0201A8C8 ; =LAB_0201a93c
	str r5, [r4, #0x14]
	str r0, [r4, #0x20]
	ldr r0, _0201A8CC ; =0x020977AC
	str r5, [r4, #0x24]
	bl FUN_02017544
	ldr r0, _0201A8D0 ; =0x020977BC
	bl FUN_02017564
	bl FUN_0201a9b4
	bl FUN_0201b390
	bl FUN_0201ab70
	sub r0, r5, #1
	strb r0, [r4]
	str r6, [r4, #4]
	pop {r4, r5, r6, pc}
	.align 2, 0_0201A8C0: .word 0x0209779C
_0201A8C4: .word FUN_0201a904
_0201A8C8: .word LAB_0201a93c
_0201A8CC: .word 0x020977AC
_0201A8D0: .word 0x020977BC
	arm_func_end FUN_0201a858

	arm_func_start LAB_0201a8d4
LAB_0201a8d4: ; 0x0201A8D4
	push {r4, lr}
	mov r4, #0
	arm_func_end LAB_0201a8d4
_0201A8DC:
	mov r0, r4
	bl FUN_0200bc98
	cmp r0, #0
	bne _0201A8DC
	bl FUN_0201ac24
	bl FUN_0201b3b0
	bl FUN_0201c4d0
	mov r0, r4
	bl FUN_0200be58
	pop {r4, pc}

	arm_func_start FUN_0201a904
FUN_0201a904: ; 0x0201A904
	push {r4, lr}
	bl FUN_0201b514
	mov r0, #0
	mov r1, r0
	mov r2, r0
	mov r3, r0
	bl FUN_0200b838
	bl FUN_0200c060
	mov r4, r0
	mov r0, #1
	bl FUN_0200be58
	mov r0, r4
	bl FUN_0200bff4
	pop {r4, pc}
	arm_func_end FUN_0201a904

	arm_func_start LAB_0201a93c
LAB_0201a93c: ; 0x0201A93C
	ldr ip, _0201A944 ; =LAB_0201b56c
	bx ip
	.align 2, 0_0201A944: .word LAB_0201b56c
	arm_func_end LAB_0201a93c

	arm_func_start FUN_0201a948
FUN_0201a948: ; 0x0201A948
	push {r4, lr}
	movs r4, r0
	popeq {r4, pc}
	mov r1, #0
	bl FUN_0200b93c
	ldr r0, _0201A974 ; =0x020977CC
	mvn r1, r4
	ldr r2, [r0, #8]
	and r1, r2, r1
	str r1, [r0, #8]
	pop {r4, pc}
	.align 2, 0_0201A974: .word 0x020977CC
	arm_func_end FUN_0201a948

	arm_func_start FUN_0201a978
FUN_0201a978: ; 0x0201A978
	ldr r1, _0201A990 ; =0x020977CC
	mvn r0, r0
	ldr r2, [r1]
	and r0, r2, r0
	str r0, [r1]
	bx lr
	.align 2, 0_0201A990: .word 0x020977CC
	arm_func_end FUN_0201a978

	arm_func_start FUN_0201a994
FUN_0201a994: ; 0x0201A994
	ldr r1, _0201A9B0 ; =0x020977CC
	mov r2, #1
	mvn r0, r2, lsl r0
	ldr r2, [r1, #4]
	and r0, r2, r0
	str r0, [r1, #4]
	bx lr
	.align 2, 0_0201A9B0: .word 0x020977CC
	arm_func_end FUN_0201a994

	arm_func_start FUN_0201a9b4
FUN_0201a9b4: ; 0x0201A9B4
	ldr r0, _0201A9CC ; =0x020977CC
	mov r1, #0
	str r1, [r0, #8]
	str r1, [r0]
	str r1, [r0, #4]
	bx lr
	.align 2, 0_0201A9CC: .word 0x020977CC
	arm_func_end FUN_0201a9b4

	arm_func_start FUN_0201a9d0
FUN_0201a9d0: ; 0x0201A9D0
	mov r2, #0x24
	mul r2, r0, r2
	ldr r0, _0201A9E4 ; =0x02097C50
	strb r1, [r0, r2]
	bx lr
	.align 2, 0_0201A9E4: .word 0x02097C50
	arm_func_end FUN_0201a9d0

	arm_func_start FUN_0201a9e8
FUN_0201a9e8: ; 0x0201A9E8
	mov r2, #0x24
	mul r2, r0, r2
	lsl r0, r1, #0x10
	ldr r1, _0201AA04 ; =0x02097C48
	lsr r0, r0, #0x10
	str r0, [r1, r2]
	bx lr
	.align 2, 0_0201AA04: .word 0x02097C48
	arm_func_end FUN_0201a9e8

	arm_func_start FUN_0201aa08
FUN_0201aa08: ; 0x0201AA08
	mov r2, #0x24
	mul r2, r0, r2
	ldr r0, _0201AA1C ; =0x02097C4C
	str r1, [r0, r2]
	bx lr
	.align 2, 0_0201AA1C: .word 0x02097C4C
	arm_func_end FUN_0201aa08

	arm_func_start FUN_0201aa20
FUN_0201aa20: ; 0x0201AA20
	push {r3, r4, r5, r6, r7, lr}
	mov r5, #0
	mov r6, r2
	mov r7, r0
	mov r0, r1
	ldr r2, _0201AA9C ; =FUN_0201b138
	mov r3, r5
	add r1, r6, #0x14
	str r5, [sp]
	bl FUN_0201bad8
	movs r4, r0
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, pc}
	str r5, [r4, #0xc]
	str r7, [r4, #0x10]
	mov r1, r6
	add r0, r4, #0x14
	str r5, [r4, #8]
	bl FUN_0201b990
	cmp r0, #0
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r2, _0201AAA0 ; =0x02097C30
	mov r1, #0x24
	mla r2, r7, r1, r2
	str r0, [r4, #8]
	mov r1, r4
	add r0, r2, #0xc
	bl FUN_020176e0
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0201AA9C: .word FUN_0201b138
_0201AAA0: .word 0x02097C30
	arm_func_end FUN_0201aa20

	arm_func_start LAB_0201aaa4
LAB_0201aaa4: ; 0x0201AAA4
	ldr r0, [r0]
	ldr ip, _0201AAB0 ; =LAB_0201ae80
	bx ip
	.align 2, 0_0201AAB0: .word LAB_0201ae80
	arm_func_end LAB_0201aaa4

	arm_func_start FUN_0201aab4
FUN_0201aab4: ; 0x0201AAB4
	mov r1, #0
	str r1, [r0]
	bx lr
	arm_func_end FUN_0201aab4

	arm_func_start FUN_0201aac0
FUN_0201aac0: ; 0x0201AAC0
	ldr r1, [r0]
	cmp r1, #0
	ldrne r1, [r0]
	movne r2, #0
	strne r2, [r1]
	strne r2, [r0]
	bx lr
	arm_func_end FUN_0201aac0

	arm_func_start LAB_0201aadc
LAB_0201aadc: ; 0x0201AADC
	ldr r2, [r0]
	cmp r2, #0
	ldrne r0, [r0]
	strbne r1, [r0, #0x41]
	bx lr
	arm_func_end LAB_0201aadc

	arm_func_start FUN_0201aaf0
FUN_0201aaf0: ; 0x0201AAF0
	ldr r2, [r0]
	cmp r2, #0
	ldrne r0, [r0]
	strbne r1, [r0, #0x40]
	bx lr
	arm_func_end FUN_0201aaf0

	arm_func_start FUN_0201ab04
FUN_0201ab04: ; 0x0201AB04
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	popeq {r3, pc}
	ldr r0, [r0]
	ldrb r0, [r0, #0x3c]
	bl FUN_0200b7b4
	pop {r3, pc}
	arm_func_end FUN_0201ab04

	arm_func_start FUN_0201ab24
FUN_0201ab24: ; 0x0201AB24
	push {r3, lr}
	ldr r3, [r0]
	cmp r3, #0
	popeq {r3, pc}
	ldr r0, [r0]
	ldrb r0, [r0, #0x3c]
	bl FUN_0200b7cc
	pop {r3, pc}
	arm_func_end FUN_0201ab24

	arm_func_start FUN_0201ab44
FUN_0201ab44: ; 0x0201AB44
	ldr r3, [r0]
	cmp r3, #0
	bxeq lr
	ldr r3, [r0]
	mov ip, #2
	strh ip, [r3, #0x34]
	ldr r3, [r0]
	strh r1, [r3, #0x38]
	ldr r0, [r0]
	strh r2, [r0, #0x3a]
	bx lr
	arm_func_end FUN_0201ab44

	arm_func_start FUN_0201ab70
FUN_0201ab70: ; 0x0201AB70
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r4, #0x14
	ldr r0, _0201AC14 ; =0x020977E4
	mov r1, r4
	bl FUN_0201769c
	ldr r6, _0201AC18 ; =0x020977D8
	mov r1, r4
	mov r0, r6
	bl FUN_0201769c
	mov r7, #0
	ldr r5, _0201AC1C ; =0x020977F0
	mov sl, r7
	mov r4, #0x44
	arm_func_end FUN_0201ab70
_0201ABA4:
	mla r1, r7, r4, r5
	strb sl, [r1, #0x2c]
	mov r0, r6
	strb r7, [r1, #0x3c]
	bl FUN_020176e0
	add r7, r7, #1
	cmp r7, #0x10
	blt _0201ABA4
	ldr r8, _0201AC20 ; =0x02097C30
	mov fp, #0xc
	mov r7, #0
	mov r6, #0x7f
	mov r5, #1
	mov r4, #0x24
_0201ABDC:
	mla sb, sl, r4, r8
	mov r0, sb
	mov r1, fp
	bl FUN_0201769c
	mov r1, r7
	add r0, sb, #0xc
	bl FUN_0201769c
	strb r6, [sb, #0x20]
	str r5, [sb, #0x18]
	add sl, sl, #1
	str r7, [sb, #0x1c]
	cmp sl, #0x20
	blt _0201ABDC
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0201AC14: .word 0x020977E4
_0201AC18: .word 0x020977D8
_0201AC1C: .word 0x020977F0
_0201AC20: .word 0x02097C30

	arm_func_start FUN_0201ac24
FUN_0201ac24: ; 0x0201AC24
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	bl FUN_0200c374
	mov fp, r0
	ldr r0, _0201AD7C ; =0x020977E4
	mov r1, #0
	bl FUN_02017848
	movs r6, r0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0x8000
	ldr r5, _0201AD80 ; =0x0208B9A0
	rsb r4, r4, #0
	arm_func_end FUN_0201ac24
_0201AC50:
	ldr r0, _0201AD7C ; =0x020977E4
	mov r1, r6
	bl FUN_02017848
	ldrb r1, [r6, #0x2d]
	mov r7, r0
	cmp r1, #0
	bne _0201AC80
	ldr r0, [r6, #0x30]
	bl FUN_0200c08c
	cmp r0, #0
	movne r0, #1
	strbne r0, [r6, #0x2d]
_0201AC80:
	ldrb r0, [r6, #0x2d]
	cmp r0, #0
	beq _0201ACA8
	ldrb r1, [r6, #0x3c]
	mov r0, #1
	tst fp, r0, lsl r1
	bne _0201ACA8
	mov r0, r6
	bl FUN_0201b0b8
	b _0201AD6C
_0201ACA8:
	add r0, r6, #0x1c
	bl FUN_0201c87c
	ldr r0, [r6, #4]
	ldrb r2, [r6, #0x41]
	ldrb r0, [r0, #0x20]
	ldrb r1, [r6, #0x40]
	lsl r2, r2, #1
	lsl r0, r0, #1
	lsl r1, r1, #1
	ldrsh sl, [r5, r0]
	add r0, r6, #0x1c
	ldrsh r8, [r5, r2]
	ldrsh sb, [r5, r1]
	bl FUN_0201c848
	asr r0, r0, #8
	lsl r0, r0, #1
	add r1, sb, r8
	ldrsh r0, [r5, r0]
	add r1, sl, r1
	add r8, r0, r1
	cmp r8, r4
	movlt r8, r4
	blt _0201AD10
	ldr r0, _0201AD84 ; =0x00007FFF
	cmp r8, r0
	movgt r8, r0
_0201AD10:
	ldrsh r0, [r6, #0x3e]
	cmp r8, r0
	beq _0201AD2C
	ldrb r0, [r6, #0x3c]
	mov r1, r8
	bl FUN_0200b79c
	strh r8, [r6, #0x3e]
_0201AD2C:
	ldrb r0, [r6, #0x2c]
	cmp r0, #2
	bne _0201AD50
	add r0, r6, #0x1c
	bl FUN_0201c894
	cmp r0, #0
	beq _0201AD50
	mov r0, r6
	bl FUN_0201b014
_0201AD50:
	ldrb r0, [r6, #0x2f]
	cmp r0, #0
	beq _0201AD6C
	ldrb r0, [r6, #0x3c]
	bl FUN_0200b77c
	mov r0, #0
	strb r0, [r6, #0x2f]
_0201AD6C:
	mov r6, r7
	cmp r7, #0
	bne _0201AC50
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0201AD7C: .word 0x020977E4
_0201AD80: .word 0x0208B9A0
_0201AD84: .word 0x00007FFF

	arm_func_start FUN_0201ad88
FUN_0201ad88: ; 0x0201AD88
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _0201AE20 ; =0x02097C30
	mov r3, #0x24
	mov r6, r0
	ldr r7, [r6]
	mla r4, r1, r3, r4
	mov r5, r2
	cmp r7, #0
	beq _0201ADB0
	bl FUN_0201aac0
	arm_func_end FUN_0201ad88
_0201ADB0:
	ldrh r1, [r4, #8]
	ldr r0, [r4, #0x18]
	cmp r1, r0
	blo _0201ADF0
	mov r7, #0
	mov r0, r4
	mov r1, r7
	bl FUN_02017848
	cmp r0, #0
	moveq r0, r7
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r1, [r0, #0x3d]
	cmp r5, r1
	movlt r0, r7
	poplt {r3, r4, r5, r6, r7, pc}
	bl FUN_0201b014
_0201ADF0:
	mov r0, r5
	bl FUN_0201b04c
	movs r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	mov r1, r5
	bl FUN_0201af70
	str r6, [r5]
	mov r0, r5
	str r5, [r6]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0201AE20: .word 0x02097C30

	arm_func_start thunk_FUN_0201b0b8
thunk_FUN_0201b0b8: ; 0x0201AE24
	ldr ip, _0201AE2C ; =FUN_0201b0b8
	bx ip
	.align 2, 0_0201AE2C: .word FUN_0201b0b8
	arm_func_end thunk_FUN_0201b0b8

	arm_func_start FUN_0201ae30
FUN_0201ae30: ; 0x0201AE30
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrb r0, [r5, #0x3c]
	ldr r4, [r5, #4]
	bl FUN_0200b754
	ldr r2, [r4, #0x1c]
	cmp r2, #0
	beq _0201AE5C
	ldrb r0, [r5, #0x3c]
	ldr r1, _0201AE7C ; =0x0000FFFF
	bl FUN_0200b7e8
	arm_func_end FUN_0201ae30
_0201AE5C:
	mov r0, r5
	bl FUN_0201af28
	bl FUN_0200c060
	mov r1, #1
	str r0, [r5, #0x30]
	strb r1, [r5, #0x2f]
	strb r1, [r5, #0x2c]
	pop {r3, r4, r5, pc}
	.align 2, 0_0201AE7C: .word 0x0000FFFF

	arm_func_start LAB_0201ae80
LAB_0201ae80: ; 0x0201AE80
	push {r3, r4, r5, lr}
	movs r5, r0
	mov r2, r1
	ldrbne r1, [r5, #0x2c]
	cmpne r1, #0
	popeq {r3, r4, r5, pc}
	cmp r2, #0
	bne _0201AEA8
	bl FUN_0201b014
	pop {r3, r4, r5, pc}
	arm_func_end LAB_0201ae80
_0201AEA8:
	mov r4, #0
	mov r1, r4
	add r0, r5, #0x1c
	bl FUN_0201c820
	mov r0, r5
	mov r1, r4
	bl FUN_0201b188
	mov r0, #2
	strb r0, [r5, #0x2c]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0201aed0
FUN_0201aed0: ; 0x0201AED0
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _0201AF24 ; =0x02097C30
	mov r2, #0x24
	mla r6, r0, r2, r3
	mov r5, #0
	mov r7, r1
	mov r1, r5
	add r0, r6, #0xc
	bl FUN_02017848
	movs r4, r0
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, r4
	add r0, r6, #0xc
	bl FUN_020177e8
	str r7, [r4, #0xc]
	str r4, [r7, #8]
	ldr r0, [r4, #8]
	bl FUN_0201ba1c
	ldr r0, [r4, #8]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0201AF24: .word 0x02097C30
	arm_func_end FUN_0201aed0

	arm_func_start FUN_0201af28
FUN_0201af28: ; 0x0201AF28
	push {r4, lr}
	mov r4, r0
	mov r2, #0
	mov r1, #0x7f
	add r0, r4, #0x1c
	strb r2, [r4, #0x2e]
	strb r2, [r4, #0x2d]
	strb r2, [r4, #0x2f]
	strh r2, [r4, #0x34]
	strh r2, [r4, #0x3e]
	strb r1, [r4, #0x40]
	strb r1, [r4, #0x41]
	bl FUN_0201c808
	add r0, r4, #0x1c
	mov r1, #0x7f00
	mov r2, #1
	bl FUN_0201c820
	pop {r4, pc}
	arm_func_end FUN_0201af28

	arm_func_start FUN_0201af70
FUN_0201af70: ; 0x0201AF70
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, #0
	mov r5, r0
	bl FUN_02017848
	movs r1, r0
	beq _0201AFAC
	arm_func_end FUN_0201af70
_0201AF8C:
	ldrb r2, [r4, #0x3d]
	ldrb r0, [r1, #0x3d]
	cmp r2, r0
	blo _0201AFAC
	mov r0, r5
	bl FUN_02017848
	movs r1, r0
	bne _0201AF8C
_0201AFAC:
	mov r0, r5
	mov r2, r4
	bl FUN_02017784
	str r5, [r4, #4]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0201afc0
FUN_0201afc0: ; 0x0201AFC0
	push {r3, r4, r5, lr}
	ldr r4, _0201B010 ; =0x020977E4
	mov r5, r0
	mov r0, r4
	mov r1, #0
	bl FUN_02017848
	movs r1, r0
	beq _0201B000
	arm_func_end FUN_0201afc0
_0201AFE0:
	ldrb r2, [r5, #0x3d]
	ldrb r0, [r1, #0x3d]
	cmp r2, r0
	blo _0201B000
	mov r0, r4
	bl FUN_02017848
	movs r1, r0
	bne _0201AFE0
_0201B000:
	ldr r0, _0201B010 ; =0x020977E4
	mov r2, r5
	bl FUN_02017784
	pop {r3, r4, r5, pc}
	.align 2, 0_0201B010: .word 0x020977E4

	arm_func_start FUN_0201b014
FUN_0201b014: ; 0x0201B014
	push {r4, lr}
	mov r4, r0
	ldrb r0, [r4, #0x2c]
	cmp r0, #2
	bne _0201B034
	ldrb r0, [r4, #0x3c]
	ldr r1, _0201B048 ; =0xFFFFFD2D
	bl FUN_0200b79c
	arm_func_end FUN_0201b014
_0201B034:
	ldrb r0, [r4, #0x3c]
	bl FUN_0200b734
	mov r0, r4
	bl FUN_0201b0b8
	pop {r4, pc}
	.align 2, 0_0201B048: .word 0xFFFFFD2D

	arm_func_start FUN_0201b04c
FUN_0201b04c: ; 0x0201B04C
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r4, #0
	ldr r0, _0201B0B0 ; =0x020977D8
	mov r1, r4
	bl FUN_02017848
	movs r5, r0
	bne _0201B090
	ldr r0, _0201B0B4 ; =0x020977E4
	mov r1, r4
	bl FUN_02017848
	mov r5, r0
	ldrb r1, [r5, #0x3d]
	cmp r6, r1
	movlt r0, r4
	poplt {r4, r5, r6, pc}
	bl FUN_0201b014
	arm_func_end FUN_0201b04c
_0201B090:
	ldr r0, _0201B0B0 ; =0x020977D8
	mov r1, r5
	bl FUN_020177e8
	mov r0, r5
	strb r6, [r5, #0x3d]
	bl FUN_0201afc0
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0_0201B0B0: .word 0x020977D8
_0201B0B4: .word 0x020977E4

	arm_func_start FUN_0201b0b8
FUN_0201b0b8: ; 0x0201B0B8
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r1, [r6]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1]
	ldr r5, [r6, #4]
	strne r0, [r6]
	mov r1, r6
	mov r0, r5
	bl FUN_020177e8
	ldr r1, [r6, #8]
	mov r4, #0
	str r4, [r6, #4]
	cmp r1, #0
	beq _0201B10C
	add r0, r5, #0xc
	bl FUN_020176e0
	ldr r0, [r6, #8]
	str r4, [r0, #0xc]
	str r4, [r6, #8]
	arm_func_end FUN_0201b0b8
_0201B10C:
	ldr r0, _0201B130 ; =0x020977E4
	mov r1, r6
	bl FUN_020177e8
	ldr r0, _0201B134 ; =0x020977D8
	mov r1, r6
	bl FUN_020176e0
	mov r0, #0
	strb r0, [r6, #0x2c]
	pop {r4, r5, r6, pc}
	.align 2, 0_0201B130: .word 0x020977E4
_0201B134: .word 0x020977D8

	arm_func_start FUN_0201b138
FUN_0201b138: ; 0x0201B138
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #8]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_0201ba04
	ldr r1, [r4, #0xc]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1, #8]
	popne {r4, pc}
	ldr r1, [r4, #0x10]
	ldr r2, _0201B184 ; =0x02097C30
	mov r0, #0x24
	mla r0, r1, r0, r2
	mov r1, r4
	add r0, r0, #0xc
	bl FUN_020177e8
	pop {r4, pc}
	.align 2, 0_0201B184: .word 0x02097C30
	arm_func_end FUN_0201b138

	arm_func_start FUN_0201b188
FUN_0201b188: ; 0x0201B188
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r4, [r6, #4]
	mov r5, r1
	cmp r4, #0
	beq _0201B1B4
	mov r0, r4
	mov r1, r6
	bl FUN_020177e8
	mov r0, #0
	str r0, [r6, #4]
	arm_func_end FUN_0201b188
_0201B1B4:
	ldr r0, _0201B1E4 ; =0x020977E4
	mov r1, r6
	bl FUN_020177e8
	strb r5, [r6, #0x3d]
	cmp r4, #0
	beq _0201B1D8
	mov r0, r4
	mov r1, r6
	bl FUN_0201af70
_0201B1D8:
	mov r0, r6
	bl FUN_0201afc0
	pop {r4, r5, r6, pc}
	.align 2, 0_0201B1E4: .word 0x020977E4

	arm_func_start FUN_0201b1e8
FUN_0201b1e8: ; 0x0201B1E8
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x4c]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_0201a948
	mov r0, #0
	str r0, [r4, #0x4c]
	str r0, [r4, #0x50]
	pop {r4, pc}
	arm_func_end FUN_0201b1e8

	arm_func_start FUN_0201b210
FUN_0201b210: ; 0x0201B210
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x48]
	mov r2, #1
	mov r1, #0
	lsl r2, r2, r0
	ldr r0, [r4, #0x4c]
	mov r3, r1
	bl FUN_0200b810
	ldr r0, [r4, #0x2c]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	popne {r4, pc}
	add r0, r4, #8
	bl FUN_02017544
	add r0, r4, #0x18
	bl FUN_02017564
	ldr r0, [r4, #0x2c]
	orr r0, r0, #2
	str r0, [r4, #0x2c]
	pop {r4, pc}
	arm_func_end FUN_0201b210

	arm_func_start FUN_0201b264
FUN_0201b264: ; 0x0201B264
	push {r3, lr}
	ldr r1, [r0, #0x2c]
	lsl r1, r1, #0x1f
	asrs r1, r1, #0x1f
	popeq {r3, pc}
	bl FUN_0201b2ec
	pop {r3, pc}
	arm_func_end FUN_0201b264

	arm_func_start FUN_0201b280
FUN_0201b280: ; 0x0201B280
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	ldr r0, [r7, #0x50]
	mov r6, #0
	str r1, [r7, #0x44]
	cmp r0, #0
	pople {r4, r5, r6, r7, r8, pc}
	ldr r4, _0201B2E8 ; =0x020980C0
	mov r8, #1
	arm_func_end FUN_0201b280
_0201B2A4:
	add r0, r7, r6
	ldrb r5, [r0, #0x54]
	ldr r1, [r7, #0x44]
	add r0, r4, r5, lsl #3
	ldr r0, [r0, #4]
	add r0, r1, r0
	bl FUN_0200c464
	mov r2, r0
	lsl r0, r8, r5
	and r1, r2, #0xff
	asr r2, r2, #8
	bl FUN_0200b97c
	ldr r0, [r7, #0x50]
	add r6, r6, #1
	cmp r6, r0
	blt _0201B2A4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0201B2E8: .word 0x020980C0

	arm_func_start FUN_0201b2ec
FUN_0201b2ec: ; 0x0201B2EC
	push {r4, r5, r6, lr}
	mov r4, r0
	ldr r0, [r4, #0x2c]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	beq _0201B354
	ldr r0, [r4, #0x48]
	mov r6, #1
	mov r1, #0
	lsl r2, r6, r0
	ldr r0, [r4, #0x4c]
	mov r3, r1
	bl FUN_0200b838
	add r0, r4, #8
	bl FUN_020175a8
	add r0, r4, #0x18
	bl FUN_020175c0
	ldr r0, [r4, #0x2c]
	bic r0, r0, #2
	str r0, [r4, #0x2c]
	bl FUN_0200c060
	mov r5, r0
	mov r0, r6
	bl FUN_0200be58
	mov r0, r5
	bl FUN_0200bff4
	arm_func_end FUN_0201b2ec
_0201B354:
	mov r0, r4
	bl FUN_0201b360
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0201b360
FUN_0201b360: ; 0x0201B360
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x48]
	bl FUN_0201a994
	ldr r0, _0201B38C ; =0x020980B4
	mov r1, r4
	bl FUN_020177e8
	ldr r0, [r4, #0x2c]
	bic r0, r0, #1
	str r0, [r4, #0x2c]
	pop {r4, pc}
	.align 2, 0_0201B38C: .word 0x020980B4
	arm_func_end FUN_0201b360

	arm_func_start FUN_0201b390
FUN_0201b390: ; 0x0201B390
	ldr r1, _0201B3A8 ; =0x02098140
	mov r2, #0
	ldr r0, _0201B3AC ; =0x02098188
	str r2, [r1]
	str r2, [r0]
	bx lr
	.align 2, 0_0201B3A8: .word 0x02098140
_0201B3AC: .word 0x02098188
	arm_func_end FUN_0201b390

	arm_func_start FUN_0201b3b0
FUN_0201b3b0: ; 0x0201B3B0
	push {r3, r4, r5, lr}
	ldr r4, _0201B42C ; =0x02098188
	ldr r0, [r4]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [r4, #4]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	add r0, r4, #0x3c
	bl FUN_0201c87c
	ldr r0, [r4, #0x4c]
	cmp r0, #0
	beq _0201B3FC
	add r0, r4, #0x3c
	bl FUN_0201c894
	cmp r0, #0
	beq _0201B3FC
	bl FUN_0201b430
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0201b3b0
_0201B3FC:
	add r0, r4, #0x3c
	bl FUN_0201c848
	ldr r1, [r4, #0x50]
	asr r5, r0, #8
	cmp r5, r1
	popeq {r3, r4, r5, pc}
	ldr r0, [r4, #0x24]
	mov r1, r5
	mov r2, #0
	bl FUN_0200b97c
	str r5, [r4, #0x50]
	pop {r3, r4, r5, pc}
	.align 2, 0_0201B42C: .word 0x02098188

	arm_func_start FUN_0201b430
FUN_0201b430: ; 0x0201B430
	push {r3, r4, r5, r6, r7, lr}
	ldr r6, _0201B50C ; =0x02098188
	mov r4, #0
	ldr r0, [r6]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r1, [r6, #0x2c]
	mov r7, #1
	cmp r1, #0
	movlt r7, r4
	cmp r7, #0
	movne r0, #1
	lslne r2, r0, r1
	ldr r0, [r6, #0x24]
	ldr r1, [r6, #0x28]
	moveq r2, #0
	mov r3, #0
	bl FUN_0200b838
	cmp r7, #0
	beq _0201B4B4
	bl FUN_0200c060
	mov r5, r0
	mov r0, #1
	bl FUN_0200be58
	mov r0, r5
	bl FUN_0200bff4
	ldr r5, _0201B510 ; =0x02098148
	arm_func_end FUN_0201b430
_0201B49C:
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_02002230
	cmp r0, #0
	bne _0201B49C
_0201B4B4:
	ldr r0, [r6, #0x28]
	cmp r0, #0
	beq _0201B4C4
	bl FUN_0201a978
_0201B4C4:
	ldr r0, [r6, #0x20]
	cmp r0, #0
	beq _0201B4D4
	bl FUN_0201a948
_0201B4D4:
	cmp r7, #0
	beq _0201B4E4
	ldr r0, [r6, #0x2c]
	bl FUN_0201a994
_0201B4E4:
	ldr r0, [r6, #4]
	cmp r0, #1
	bne _0201B504
	mov r0, #0
	mov r1, r0
	mov r2, r0
	mov r3, r0
	bl FUN_0200baac
_0201B504:
	str r4, [r6]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0201B50C: .word 0x02098188
_0201B510: .word 0x02098148

	arm_func_start FUN_0201b514
FUN_0201b514: ; 0x0201B514
	push {r4, lr}
	ldr r3, _0201B568 ; =0x02098188
	ldr r0, [r3]
	cmp r0, #0
	popeq {r4, pc}
	ldr r1, [r3, #0x2c]
	cmp r1, #0
	movge r0, #1
	lslge r2, r0, r1
	ldr r0, [r3, #0x24]
	ldr r1, [r3, #0x28]
	movlt r2, #0
	mov r3, #0
	bl FUN_0200b838
	bl FUN_0200c060
	mov r4, r0
	mov r0, #1
	bl FUN_0200be58
	mov r0, r4
	bl FUN_0200bff4
	pop {r4, pc}
	.align 2, 0_0201B568: .word 0x02098188
	arm_func_end FUN_0201b514

	arm_func_start LAB_0201b56c
LAB_0201b56c: ; 0x0201B56C
	push {r3, r4, r5, lr}
	ldr r4, _0201B5E8 ; =0x02098188
	ldr r0, [r4]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r5, #0
	ldr r1, [r4, #0xc]
	ldr r2, [r4, #0x14]
	mov r0, r5
	str r5, [r4, #0x1c]
	bl FUN_02007838
	ldr r1, [r4, #0x10]
	ldr r2, [r4, #0x14]
	mov r0, r5
	bl FUN_02007838
	ldr r0, [r4, #0xc]
	ldr r1, [r4, #0x14]
	bl FUN_020026d0
	ldr r0, [r4, #0x10]
	ldr r1, [r4, #0x14]
	bl FUN_020026d0
	ldr r1, [r4, #0x2c]
	mov r3, #0
	cmp r1, #0
	movge r0, #1
	lslge r5, r0, r1
	ldr r0, [r4, #0x24]
	ldr r1, [r4, #0x28]
	mov r2, r5
	bl FUN_0200b810
	pop {r3, r4, r5, pc}
	.align 2, 0_0201B5E8: .word 0x02098188
	arm_func_end LAB_0201b56c

	arm_func_start FUN_0201b5ec
FUN_0201b5ec: ; 0x0201B5EC
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r1
	mov r0, r4
	mov r1, r5
	mov r2, #0x30
	mov r6, #0
	bl FUN_0200784c
	ldr r0, [r5, #0x18]
	mov r2, #0
	mov r1, r6
	cmp r0, #0
	addne r1, r4, r0
	ldr r0, [r5, #0x20]
	str r1, [r5, #0x98]
	mov r1, #0
	cmp r0, #0
	addne r1, r4, r0
	ldr r0, [r5, #0x10]
	str r1, [r5, #0x90]
	cmp r0, #0
	moveq r0, #0
	addne r0, r4, r0
	ldr r1, [r5, #0x90]
	str r2, [r5, #0x9c]
	str r0, [r5, #0x94]
	ldr r0, [r1, #8]
	cmp r0, #0
	bls _0201B690
	arm_func_end FUN_0201b5ec
_0201B660:
	add r0, r1, #0xc
	add r1, r0, r2, lsl #4
	ldr r0, [r1]
	add r2, r2, #1
	cmp r0, #0
	moveq r0, r6
	addne r0, r4, r0
	str r0, [r1, #8]
	ldr r1, [r5, #0x90]
	ldr r0, [r1, #8]
	cmp r2, r0
	blo _0201B660
_0201B690:
	ldr r0, _0201B6A0 ; =0x020981DC
	str r6, [r5, #0x30]
	str r5, [r0]
	pop {r4, r5, r6, pc}
	.align 2, 0_0201B6A0: .word 0x020981DC

	arm_func_start FUN_0201b6a4
FUN_0201b6a4: ; 0x0201B6A4
	ldr r1, _0201B6B8 ; =0x020981DC
	ldr r2, [r1]
	str r0, [r1]
	mov r0, r2
	bx lr
	.align 2, 0_0201B6B8: .word 0x020981DC
	arm_func_end FUN_0201b6a4

	arm_func_start FUN_0201b6bc
FUN_0201b6bc: ; 0x0201B6BC
	ldr r0, _0201B6C8 ; =0x020981DC
	ldr r0, [r0]
	bx lr
	.align 2, 0_0201B6C8: .word 0x020981DC
	arm_func_end FUN_0201b6bc

	arm_func_start FUN_0201b6cc
FUN_0201b6cc: ; 0x0201B6CC
	ldr r1, _0201B72C ; =0x020981DC
	ldr r3, [r1]
	ldr r2, [r3, #0x98]
	ldr r1, [r2, #0xc]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x98]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0_0201B72C: .word 0x020981DC
	arm_func_end FUN_0201b6cc

	arm_func_start FUN_0201b730
FUN_0201b730: ; 0x0201B730
	ldr r1, _0201B790 ; =0x020981DC
	ldr r3, [r1]
	ldr r2, [r3, #0x98]
	ldr r1, [r2, #0x10]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x98]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0_0201B790: .word 0x020981DC
	arm_func_end FUN_0201b730

	arm_func_start FUN_0201b794
FUN_0201b794: ; 0x0201B794
	ldr r1, _0201B7F4 ; =0x020981DC
	ldr r3, [r1]
	ldr r2, [r3, #0x98]
	ldr r1, [r2, #0x14]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x98]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0_0201B7F4: .word 0x020981DC
	arm_func_end FUN_0201b794

	arm_func_start FUN_0201b7f8
FUN_0201b7f8: ; 0x0201B7F8
	ldr r1, _0201B858 ; =0x020981DC
	ldr r3, [r1]
	ldr r2, [r3, #0x98]
	ldr r1, [r2, #0x18]
	cmp r1, #0
	moveq r2, #0
	addne r2, r2, r1
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r0, #0
	movlt r0, #0
	bxlt lr
	ldr r1, [r2]
	cmp r0, r1
	movhs r0, #0
	bxhs lr
	add r0, r2, r0, lsl #2
	ldr r1, [r0, #4]
	ldr r0, [r3, #0x98]
	cmp r1, #0
	moveq r0, #0
	addne r0, r0, r1
	bx lr
	.align 2, 0_0201B858: .word 0x020981DC
	arm_func_end FUN_0201b7f8

	arm_func_start FUN_0201b85c
FUN_0201b85c: ; 0x0201B85C
	ldr r1, _0201B880 ; =0x020981DC
	ldr r1, [r1]
	ldr r2, [r1, #0x90]
	ldr r1, [r2, #8]
	cmp r0, r1
	movhs r0, #0
	addlo r0, r2, r0, lsl #4
	ldrlo r0, [r0, #0x10]
	bx lr
	.align 2, 0_0201B880: .word 0x020981DC
	arm_func_end FUN_0201b85c

	arm_func_start FUN_0201b884
FUN_0201b884: ; 0x0201B884
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, _0201B948 ; =0x020981DC
	mov sb, r2
	ldr r7, [r4]
	mov sl, r1
	ldr r2, [r7, #0x90]
	mov r8, r3
	ldr r1, [r2, #8]
	cmp r0, r1
	mvnhs r0, #0
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r5, [r7, #0x9c]
	add r1, r2, #0xc
	cmp r5, #0
	moveq r5, sb
	add fp, r1, r0, lsl #4
	cmp sb, #0
	mov r4, #0
	ble _0201B940
	arm_func_end FUN_0201b884
_0201B8D0:
	ldr r0, [fp, #4]
	sub r6, sb, r4
	cmp r6, r5
	movgt r6, r5
	sub r0, r0, r8
	cmp r6, r0
	movhi r6, r0
	cmp r6, #0
	beq _0201B940
	ldr r1, [fp]
	mov r2, #0
	add r0, r7, #0x34
	add r1, r1, r8
	bl FUN_0200ded0
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r1, sl
	mov r2, r6
	add r0, r7, #0x34
	bl FUN_0200defc
	cmp r0, #0
	poplt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r4, r4, r0
	cmp r4, sb
	add r8, r8, r0
	add sl, sl, r0
	blt _0201B8D0
_0201B940:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0201B948: .word 0x020981DC

	arm_func_start FUN_0201b94c
FUN_0201b94c: ; 0x0201B94C
	ldr r1, _0201B970 ; =0x020981DC
	ldr r1, [r1]
	ldr r2, [r1, #0x90]
	ldr r1, [r2, #8]
	cmp r0, r1
	movhs r0, #0
	addlo r0, r2, r0, lsl #4
	ldrlo r0, [r0, #0x14]
	bx lr
	.align 2, 0_0201B970: .word 0x020981DC
	arm_func_end FUN_0201b94c

	arm_func_start FUN_0201b974
FUN_0201b974: ; 0x0201B974
	ldr r2, _0201B98C ; =0x020981DC
	ldr r2, [r2]
	ldr r2, [r2, #0x90]
	add r0, r2, r0, lsl #4
	str r1, [r0, #0x14]
	bx lr
	.align 2, 0_0201B98C: .word 0x020981DC
	arm_func_end FUN_0201b974

	arm_func_start FUN_0201b990
FUN_0201b990: ; 0x0201B990
	push {r4, r5, r6, lr}
	add r2, r0, #3
	add r0, r0, r1
	bic r6, r2, #3
	cmp r6, r0
	movhi r0, #0
	pophi {r4, r5, r6, pc}
	sub r1, r0, r6
	cmp r1, #0x10
	movlo r0, #0
	poplo {r4, r5, r6, pc}
	mov r5, #0
	mov r2, r5
	add r0, r6, #0x10
	sub r1, r1, #0x10
	bl FUN_020180b0
	movs r4, r0
	moveq r0, r5
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r4
	bl FUN_0201bb50
	cmp r0, #0
	movne r0, r6
	popne {r4, r5, r6, pc}
	mov r0, r4
	bl thunk_FUN_020179c8
	mov r0, r5
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0201b990

	arm_func_start FUN_0201ba04
FUN_0201ba04: ; 0x0201BA04
	push {r4, lr}
	mov r4, r0
	bl FUN_0201ba1c
	ldr r0, [r4]
	bl thunk_FUN_020179c8
	pop {r4, pc}
	arm_func_end FUN_0201ba04

	arm_func_start FUN_0201ba1c
FUN_0201ba1c: ; 0x0201BA1C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r8, r0
	mov r6, #0
	mov r1, r6
	add r0, r8, #4
	bl FUN_02017860
	movs r5, r0
	beq _0201BAB4
	mov sl, #1
	mov sb, r6
	mov r4, r6
	arm_func_end FUN_0201ba1c
_0201BA48:
	mov r0, r5
	mov r1, r4
	bl FUN_02017860
	movs r7, r0
	beq _0201BA94
_0201BA5C:
	ldr ip, [r7, #0xc]
	cmp ip, #0
	beq _0201BA80
	ldr r1, [r7, #8]
	ldr r2, [r7, #0x10]
	ldr r3, [r7, #0x14]
	add r0, r7, #0x20
	blx ip
	mov r6, sl
_0201BA80:
	mov r0, r5
	mov r1, r7
	bl FUN_02017860
	movs r7, r0
	bne _0201BA5C
_0201BA94:
	mov r1, r5
	add r0, r8, #4
	bl FUN_020177e8
	mov r1, sb
	add r0, r8, #4
	bl FUN_02017860
	movs r5, r0
	bne _0201BA48
_0201BAB4:
	ldr r0, [r8]
	mov r1, #3
	bl FUN_02018128
	cmp r6, #0
	beq _0201BACC
	bl FUN_0201bbc0
_0201BACC:
	mov r0, r8
	bl FUN_0201bb84
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0201bad8
FUN_0201bad8: ; 0x0201BAD8
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r1
	mov r8, r0
	add r0, r7, #0x1f
	bic r1, r0, #0x1f
	mov r6, r2
	ldr r0, [r8]
	add r1, r1, #0x20
	mov r2, #0x20
	mov r5, r3
	bl FUN_020180f4
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	add r0, r8, #4
	mov r1, #0
	bl FUN_02017860
	str r7, [r4, #8]
	str r6, [r4, #0xc]
	ldr r2, [sp, #0x18]
	str r5, [r4, #0x10]
	mov r1, r4
	str r2, [r4, #0x14]
	bl FUN_020176e0
	add r0, r4, #0x20
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0201bad8

	arm_func_start FUN_0201bb40
FUN_0201bb40: ; 0x0201BB40
	ldr ip, _0201BB4C ; =FUN_0201769c
	mov r1, #0
	bx ip
	.align 2, 0_0201BB4C: .word FUN_0201769c
	arm_func_end FUN_0201bb40

	arm_func_start FUN_0201bb50
FUN_0201bb50: ; 0x0201BB50
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r0, r5, #4
	mov r1, #0xc
	bl FUN_0201769c
	mov r0, r5
	str r4, [r5]
	bl FUN_0201bb84
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0201bb50

	arm_func_start FUN_0201bb84
FUN_0201bb84: ; 0x0201BB84
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5]
	mov r1, #0x14
	mov r2, #4
	bl FUN_020180f4
	movs r4, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_0201bb40
	mov r1, r4
	add r0, r5, #4
	bl FUN_020176e0
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0201bb84

	arm_func_start FUN_0201bbc0
FUN_0201bbc0: ; 0x0201BBC0
	push {r4, lr}
	bl FUN_0200c060
	mov r4, r0
	mov r0, #1
	bl FUN_0200be58
	mov r0, r4
	bl FUN_0200bff4
	pop {r4, pc}
	arm_func_end FUN_0201bbc0

	arm_func_start FUN_0201bbe0
FUN_0201bbe0: ; 0x0201BBE0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sl, r1
	mov sb, r2
	mov fp, r3
	bl FUN_0201b730
	movs r5, r0
	addeq sp, sp, #8
	moveq r0, #4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	tst sl, #2
	ldr r0, [r5]
	beq _0201BC34
	mov r1, sb
	mov r2, fp
	bl FUN_0201be48
	movs r6, r0
	bne _0201BC3C
	add sp, sp, #8
	mov r0, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0201bbe0
_0201BC34:
	bl FUN_0201b94c
	mov r6, r0
_0201BC3C:
	and r8, sl, #4
	mov r7, #0
_0201BC44:
	add r0, r5, r7, lsl #1
	ldrh r0, [r0, #4]
	ldr r1, _0201BD1C ; =0x0000FFFF
	cmp r0, r1
	beq _0201BCF8
	bl FUN_0201b794
	movs r4, r0
	addeq sp, sp, #8
	moveq r0, #5
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sp, #4
	str r0, [sp]
	add r0, r5, r7, lsl #1
	ldrh r0, [r0, #4]
	mov r1, sl
	mov r2, sb
	mov r3, fp
	bl FUN_0201bd20
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r4]
	lsr r0, r0, #0x18
	tst r0, #1
	cmpne r8, #0
	beq _0201BCDC
	str sb, [sp]
	ldr r1, [r4]
	ldr r0, [sp, #4]
	lsl r3, r1, #8
	mov r1, r6
	mov r2, r7
	lsr r3, r3, #8
	bl FUN_0201c230
	cmp r0, #0
	addeq sp, sp, #8
	moveq r0, #9
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0201BCDC:
	cmp r6, #0
	ldrne r2, [sp, #4]
	cmpne r2, #0
	beq _0201BCF8
	mov r0, r6
	mov r1, r7
	bl FUN_0200c4d4
_0201BCF8:
	add r7, r7, #1
	cmp r7, #4
	blt _0201BC44
	ldr r0, [sp, #0x30]
	cmp r0, #0
	strne r6, [r0]
	mov r0, #0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0201BD1C: .word 0x0000FFFF

	arm_func_start FUN_0201bd20
FUN_0201bd20: ; 0x0201BD20
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_0201b794
	cmp r0, #0
	moveq r0, #5
	popeq {r4, r5, r6, pc}
	tst r6, #4
	ldr r0, [r0]
	beq _0201BD84
	lsr r1, r0, #0x18
	lsl r0, r0, #8
	tst r1, #1
	mov r1, r5
	mov r2, r4
	lsr r0, r0, #8
	beq _0201BD70
	bl FUN_0201bf20
	b _0201BD74
	arm_func_end FUN_0201bd20
_0201BD70:
	bl FUN_0201beb4
_0201BD74:
	cmp r0, #0
	bne _0201BD90
	mov r0, #9
	pop {r4, r5, r6, pc}
_0201BD84:
	lsl r0, r0, #8
	lsr r0, r0, #8
	bl FUN_0201b94c
_0201BD90:
	ldr r1, [sp, #0x10]
	cmp r1, #0
	strne r0, [r1]
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0201bda4
FUN_0201bda4: ; 0x0201BDA4
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r8, r0
	mov r7, r1
	mov r5, r2
	mov r4, r3
	bl FUN_0201b85c
	movs r6, r0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r0, [sp, #0x20]
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r2, r7
	mov r3, r5
	add r1, r6, #0x20
	str r4, [sp]
	bl FUN_0201bad8
	movs r5, r0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r4, #0
	mov r0, r8
	mov r1, r5
	mov r2, r6
	mov r3, r4
	bl FUN_0201b884
	cmp r6, r0
	addne sp, sp, #4
	movne r0, r4
	popne {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r5
	mov r1, r6
	bl FUN_020026b4
	mov r0, r5
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0201bda4

	arm_func_start FUN_0201be48
FUN_0201be48: ; 0x0201BE48
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_0201b94c
	movs r4, r0
	bne _0201BEA8
	cmp r5, #0
	moveq r2, #0
	beq _0201BE78
	bl FUN_0201b6bc
	mov r2, r0
	arm_func_end FUN_0201be48
_0201BE78:
	ldr r1, _0201BEB0 ; =FUN_0201c0a0
	mov r0, r7
	mov r3, r7
	str r6, [sp]
	bl FUN_0201bda4
	mov r4, r0
	cmp r5, #0
	cmpne r4, #0
	beq _0201BEA8
	mov r0, r7
	mov r1, r4
	bl FUN_0201b974
_0201BEA8:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0201BEB0: .word FUN_0201c0a0

	arm_func_start FUN_0201beb4
FUN_0201beb4: ; 0x0201BEB4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_0201b94c
	movs r4, r0
	bne _0201BF14
	cmp r5, #0
	moveq r2, #0
	beq _0201BEE4
	bl FUN_0201b6bc
	mov r2, r0
	arm_func_end FUN_0201beb4
_0201BEE4:
	ldr r1, _0201BF1C ; =FUN_0201c0d0
	mov r0, r7
	mov r3, r7
	str r6, [sp]
	bl FUN_0201bda4
	mov r4, r0
	cmp r5, #0
	cmpne r4, #0
	beq _0201BF14
	mov r0, r7
	mov r1, r4
	bl FUN_0201b974
_0201BF14:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0201BF1C: .word FUN_0201c0d0

	arm_func_start FUN_0201bf20
FUN_0201bf20: ; 0x0201BF20
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov r4, r0
	mov sl, r1
	mov sb, r2
	bl FUN_0201b94c
	movs r7, r0
	bne _0201C030
	mov r5, #0
	ldr r1, _0201C03C ; =0x020981E0
	mov r0, r4
	mov r3, r5
	mov r2, #0x3c
	bl FUN_0201b884
	cmp r0, #0x3c
	addne sp, sp, #4
	movne r0, r5
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, _0201C040 ; =0x020981E0
	cmp sl, #0
	ldr r0, [r0, #0x38]
	addeq sp, sp, #4
	lsl r8, r0, #2
	lsl r6, r8, #1
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp sb, #0
	beq _0201BF98
	bl FUN_0201b6bc
	mov r5, r0
	arm_func_end FUN_0201bf20
_0201BF98:
	ldr r2, _0201C044 ; =FUN_0201c100
	mov r0, sl
	mov r3, r5
	add r1, r6, #0x5c
	str r4, [sp]
	bl FUN_0201bad8
	movs r7, r0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r5, #0
	mov r0, r4
	mov r1, r7
	mov r3, r5
	add r2, r8, #0x3c
	bl FUN_0201b884
	add r1, r8, #0x3c
	cmp r0, r1
	addne sp, sp, #4
	movne r0, r5
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r1, [r7, #0x38]
	add r0, r7, #0x3c
	mov r2, r8
	add r1, r0, r1, lsl #2
	bl _memcpy
	mov r1, r5
	mov r2, r8
	add r0, r7, #0x3c
	bl MemWrite
	mov r0, r7
	add r1, r6, #0x3c
	bl FUN_020026b4
	cmp sb, #0
	beq _0201C030
	mov r0, r4
	mov r1, r7
	bl FUN_0201b974
_0201C030:
	mov r0, r7
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0201C03C: .word 0x020981E0
_0201C040: .word 0x020981E0
_0201C044: .word FUN_0201c100

	arm_func_start FUN_0201c048
FUN_0201c048: ; 0x0201C048
	push {r3, r4, r5, r6, r7, lr}
	movs r4, r1
	mov r7, r0
	mov r6, r2
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_02003da8
	mov r5, r0
	mov r0, r4
	bl FUN_0201b6a4
	mov r4, r0
	mov r0, r6
	bl FUN_0201b94c
	cmp r7, r0
	bne _0201C08C
	mov r0, r6
	mov r1, #0
	bl FUN_0201b974
	arm_func_end FUN_0201c048
_0201C08C:
	mov r0, r4
	bl FUN_0201b6a4
	mov r0, r5
	bl FUN_02003dbc
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0201c0a0
FUN_0201c0a0: ; 0x0201C0A0
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, r2
	mov r5, r0
	mov r2, r3
	bl FUN_0201c048
	mov r0, r5
	add r1, r5, r4
	bl FUN_0200ba6c
	mov r0, r5
	bl FUN_0200c5a4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0201c0a0

	arm_func_start FUN_0201c0d0
FUN_0201c0d0: ; 0x0201C0D0
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, r2
	mov r5, r0
	mov r2, r3
	bl FUN_0201c048
	mov r0, r5
	add r1, r5, r4
	bl FUN_0200ba8c
	mov r0, r5
	bl FUN_0200c63c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0201c0d0

	arm_func_start FUN_0201c100
FUN_0201c100: ; 0x0201C100
	push {r4, lr}
	mov r1, r2
	mov r4, r0
	mov r2, r3
	bl FUN_0201c048
	mov r0, r4
	bl FUN_0200c63c
	pop {r4, pc}
	arm_func_end FUN_0201c100

	arm_func_start FUN_0201c120
FUN_0201c120: ; 0x0201C120
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r2
	mov r7, r0
	mov r4, r3
	mov r6, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0200c88c
	cmp r7, r0
	bne _0201C158
	mov r0, r5
	mov r1, r4
	mov r2, #0
	bl FUN_0200c858
	arm_func_end FUN_0201c120
_0201C158:
	mov r0, r7
	add r1, r7, r6
	bl FUN_0200ba8c
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0201c168
FUN_0201c168: ; 0x0201C168
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	bl FUN_0200c88c
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r8
	bl FUN_0200c850
	ldr r1, [r8, #0x38]
	sub r0, r0, #1
	add r1, r1, r7
	add r1, r8, r1, lsl #2
	cmp r7, r0
	ldrlo r0, [r1, #0x40]
	ldr r4, [r1, #0x3c]
	ldrhs r0, [r8, #8]
	cmp r5, #0
	sub sb, r0, r4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r2, _0201C22C ; =FUN_0201c120
	mov r0, r5
	mov r3, r8
	add r1, sb, #0x20
	str r7, [sp]
	bl FUN_0201bad8
	movs r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r6
	mov r1, r5
	mov r2, sb
	mov r3, r4
	bl FUN_0201b884
	cmp sb, r0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r5
	mov r1, sb
	bl FUN_020026b4
	mov r0, r8
	mov r1, r7
	mov r2, r5
	bl FUN_0200c858
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0201C22C: .word FUN_0201c120
	arm_func_end FUN_0201c168

	arm_func_start FUN_0201c230
FUN_0201c230: ; 0x0201C230
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x1c
	mov sl, r0
	add r0, sp, #0
	mov sb, r1
	mov r8, r2
	mov r7, r3
	ldr r6, [sp, #0x40]
	bl FUN_0200c684
	ldr r1, [sp]
	ldr r0, [sp, #4]
	str r1, [sp, #8]
	str r0, [sp, #0xc]
	cmp sb, #0
	add r5, sp, #8
	addeq sp, sp, #0x1c
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	add r4, sp, #0x10
	mov r0, sb
	mov r1, r4
	mov r2, r5
	bl FUN_0200c6a4
	cmp r0, #0
	beq _0201C2E4
	arm_func_end FUN_0201c230
_0201C294:
	ldrb r0, [sp, #0x10]
	cmp r0, #1
	ldrheq r0, [sp, #0x14]
	cmpeq r8, r0
	bne _0201C2CC
	ldrh r1, [sp, #0x12]
	mov r0, sl
	mov r2, r7
	mov r3, r6
	bl FUN_0201c168
	cmp r0, #0
	addeq sp, sp, #0x1c
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0201C2CC:
	mov r0, sb
	mov r1, r4
	mov r2, r5
	bl FUN_0200c6a4
	cmp r0, #0
	bne _0201C294
_0201C2E4:
	mov r0, #1
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0201c2f0
FUN_0201c2f0: ; 0x0201C2F0
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	bl FUN_0201b6bc
	mov r6, #0
	mov r5, r6
	arm_func_end FUN_0201c2f0
_0201C304:
	mov r0, r6
	bl FUN_0201b7f8
	movs r7, r0
	beq _0201C374
	ldrb r1, [r7]
	mov r0, r6
	bl FUN_0201a9e8
	ldrh r1, [r7, #2]
	mov r0, r6
	bl FUN_0201aa08
	ldr r0, [r7, #4]
	cmp r0, #0
	cmpne r4, #0
	ldrbne r0, [r7]
	movne r8, r5
	cmpne r0, #0
	ble _0201C374
_0201C348:
	ldr r2, [r7, #4]
	mov r0, r6
	mov r1, r4
	bl FUN_0201aa20
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldrb r0, [r7]
	add r8, r8, #1
	cmp r8, r0
	blt _0201C348
_0201C374:
	add r6, r6, #1
	cmp r6, #0x20
	blt _0201C304
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0201c388
FUN_0201c388: ; 0x0201C388
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	mov r6, r1
	mov r7, r0
	mov r0, r6
	mov r5, r2
	bl FUN_0201b6cc
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r0]
	bl FUN_0201b94c
	movs r4, r0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, r5
	bl FUN_0201c7c8
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	stm sp, {r0, r4, r6}
	str r5, [sp, #0xc]
	ldrb r1, [r0, #9]
	ldrh r2, [r0, #4]
	ldrb r3, [r0, #8]
	mov r0, r7
	bl FUN_0201c408
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0201c388

	arm_func_start FUN_0201c408
FUN_0201c408: ; 0x0201C408
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r8, r2
	mov r2, r3
	ldr r7, [sp, #0x20]
	mov r4, r0
	mov r5, r1
	bl FUN_0201ad88
	movs r6, r0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r5
	mov r1, r6
	bl FUN_0201aed0
	mov r5, #0
	add ip, sp, #4
	mov r2, r0
	mov r0, r8
	mov r3, r5
	mov r1, #6
	str ip, [sp]
	bl FUN_0201bbe0
	cmp r0, #0
	beq _0201C480
	mov r0, r6
	bl thunk_FUN_0201b0b8
	add sp, sp, #8
	mov r0, r5
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0201c408
_0201C480:
	ldr ip, [sp, #0x24]
	ldr r2, [r7]
	ldr r1, [ip, #0x18]
	ldr r3, [sp, #4]
	mov r0, r6
	add r1, ip, r1
	bl FUN_0201ae30
	ldrb r1, [r7, #6]
	mov r0, r4
	bl FUN_0201aaf0
	ldrb r1, [r7, #7]
	mov r0, r4
	bl FUN_0201ab04
	ldr r1, [sp, #0x28]
	ldr r2, [sp, #0x2c]
	mov r0, r4
	bl FUN_0201ab44
	mov r0, #1
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0201c4d0
FUN_0201c4d0: ; 0x0201C4D0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r4, _0201C5D4 ; =0x0208B9A0
	ldr r5, _0201C5D8 ; =0x0209824C
	mov r7, #0
	mov sb, #0x17c
	arm_func_end FUN_0201c4d0
_0201C4E4:
	mla r6, r7, sb, r5
	ldr r1, [r6, #0x118]
	lsl r0, r1, #0x1f
	asrs r0, r0, #0x1f
	beq _0201C5C4
	ldr r0, [r6, #0x11c]
	cmp r0, #0
	bne _0201C508
	b _0201C5BC
_0201C508:
	lsl r0, r1, #0x1d
	asrs r0, r0, #0x1f
	ldrne r0, [r6, #0x120]
	cmpne r0, #0
	beq _0201C534
	mov r0, r6
	bl FUN_0201b210
	ldr r0, [r6, #0x118]
	orr r0, r0, #2
	bic r0, r0, #4
	str r0, [r6, #0x118]
_0201C534:
	ldr r0, [r6, #0x118]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	beq _0201C5C4
	add r0, r6, #0xf0
	bl FUN_0201c87c
	ldr r1, [r6, #0x15c]
	add r0, r6, #0xf0
	lsl r1, r1, #1
	ldrsh r8, [r4, r1]
	bl FUN_0201c848
	asr r0, r0, #8
	ldr r1, [r6, #0x160]
	lsl r0, r0, #1
	lsl r2, r1, #1
	ldrsh r1, [r4, r0]
	ldrsh r2, [r4, r2]
	ldr r0, [r6, #0x164]
	add r1, r1, r8
	add r8, r2, r1
	cmp r8, r0
	beq _0201C59C
	mov r0, r6
	mov r1, r8
	bl FUN_0201b280
	str r8, [r6, #0x164]
_0201C59C:
	ldr r0, [r6, #0x118]
	lsl r0, r0, #0x1c
	asrs r0, r0, #0x1f
	beq _0201C5C4
	add r0, r6, #0xf0
	bl FUN_0201c894
	cmp r0, #0
	beq _0201C5C4
_0201C5BC:
	mov r0, r6
	bl FUN_0201c608
_0201C5C4:
	add r7, r7, #1
	cmp r7, #4
	blt _0201C4E4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0201C5D4: .word 0x0208B9A0
_0201C5D8: .word 0x0209824C

	arm_func_start FUN_0201c5dc
FUN_0201c5dc: ; 0x0201C5DC
	ldr r2, [r0, #0x154]
	cmp r2, #0
	movne r1, #0
	strne r1, [r2]
	strne r1, [r0, #0x154]
	ldr r1, [r0, #0x118]
	bic r1, r1, #1
	bic r1, r1, #4
	bic r1, r1, #2
	str r1, [r0, #0x118]
	bx lr
	arm_func_end FUN_0201c5dc

	arm_func_start FUN_0201c608
FUN_0201c608: ; 0x0201C608
	push {r4, lr}
	mov r4, r0
	ldr r0, _0201C698 ; =0x02099904
	bl FUN_02002408
	ldr r0, _0201C69C ; =0x0209821C
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _0201C634
	add r0, r0, #0xc8
	add r0, r0, #0x1000
	bl FUN_02002408
	arm_func_end FUN_0201c608
_0201C634:
	ldr r0, [r4, #0x118]
	lsl r0, r0, #0x1e
	asrs r0, r0, #0x1f
	beq _0201C64C
	mov r0, r4
	bl FUN_0201b264
_0201C64C:
	ldr r0, [r4, #0x118]
	lsl r0, r0, #0x1f
	asrs r0, r0, #0x1f
	beq _0201C668
	ldr r1, [r4, #0x178]
	mov r0, r4
	blx r1
_0201C668:
	mov r0, r4
	bl FUN_0201c6a0
	ldr r0, _0201C698 ; =0x02099904
	bl FUN_02002458
	ldr r0, _0201C69C ; =0x0209821C
	ldr r0, [r0, #4]
	cmp r0, #0
	popeq {r4, pc}
	add r0, r0, #0xc8
	add r0, r0, #0x1000
	bl FUN_02002458
	pop {r4, pc}
	.align 2, 0_0201C698: .word 0x02099904
_0201C69C: .word 0x0209821C

	arm_func_start FUN_0201c6a0
FUN_0201c6a0: ; 0x0201C6A0
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x118]
	lsl r1, r1, #0x1f
	asrs r1, r1, #0x1f
	popeq {r4, pc}
	bl FUN_0201c708
	ldr r1, [r4, #0x170]
	mov r0, r4
	blx r1
	ldr r0, _0201C700 ; =0x0209991C
	mov r1, r4
	bl FUN_0201c72c
	ldr r0, _0201C704 ; =0x0209821C
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _0201C6F4
	add r0, r0, #0xe0
	mov r1, r4
	add r0, r0, #0x1000
	bl FUN_0201c72c
	arm_func_end FUN_0201c6a0
_0201C6F4:
	mov r0, r4
	bl FUN_0201c5dc
	pop {r4, pc}
	.align 2, 0_0201C700: .word 0x0209991C
_0201C704: .word 0x0209821C

	arm_func_start FUN_0201c708
FUN_0201c708: ; 0x0201C708
	push {r3, lr}
	ldr r1, [r0, #0x128]
	cmp r1, #0
	popeq {r3, pc}
	subs r1, r1, #1
	str r1, [r0, #0x128]
	popne {r3, pc}
	bl FUN_0201b1e8
	pop {r3, pc}
	arm_func_end FUN_0201c708

	arm_func_start FUN_0201c72c
FUN_0201c72c: ; 0x0201C72C
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	bl FUN_02003da8
	mov r4, r0
	mov r0, r8
	mov r1, #0
	bl FUN_02017848
	movs r5, r0
	beq _0201C790
	arm_func_end FUN_0201c72c
_0201C754:
	mov r0, r8
	mov r1, r5
	bl FUN_02017848
	ldr r1, [r5, #8]
	mov r6, r0
	cmp r1, r7
	bne _0201C784
	mov r0, r8
	mov r1, r5
	bl FUN_020177e8
	mov r0, r5
	bl FUN_0201c79c
_0201C784:
	mov r5, r6
	cmp r6, #0
	bne _0201C754
_0201C790:
	mov r0, r4
	bl FUN_02003dbc
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0201c79c
FUN_0201c79c: ; 0x0201C79C
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02003da8
	mov r4, r0
	ldr r0, _0201C7C4 ; =0x02098228
	mov r1, r5
	bl FUN_020176e0
	mov r0, r4
	bl FUN_02003dbc
	pop {r3, r4, r5, pc}
	.align 2, 0_0201C7C4: .word 0x02098228
	arm_func_end FUN_0201c79c

	arm_func_start FUN_0201c7c8
FUN_0201c7c8: ; 0x0201C7C8
	cmp r1, #0
	movlt r0, #0
	bxlt lr
	ldr r2, [r0, #0x1c]
	cmp r1, r2
	movhs r0, #0
	bxhs lr
	mov r2, #0xc
	mul r3, r1, r2
	add ip, r0, #0x20
	ldr r1, [ip, r3]
	sub r0, r2, #0xd
	cmp r1, r0
	add r0, ip, r3
	moveq r0, #0
	bx lr
	arm_func_end FUN_0201c7c8

	arm_func_start FUN_0201c808
FUN_0201c808: ; 0x0201C808
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0]
	str r1, [r0, #0xc]
	str r1, [r0, #8]
	bx lr
	arm_func_end FUN_0201c808

	arm_func_start FUN_0201c820
FUN_0201c820: ; 0x0201C820
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_0201c848
	stm r6, {r0, r5}
	mov r1, #0
	str r4, [r6, #0xc]
	str r1, [r6, #8]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0201c820

	arm_func_start FUN_0201c848
FUN_0201c848: ; 0x0201C848
	push {r4, lr}
	ldr r1, [r0, #0xc]
	ldr r2, [r0, #8]
	cmp r2, r1
	ldrge r0, [r0, #4]
	popge {r4, pc}
	ldr r4, [r0]
	ldr r0, [r0, #4]
	sub r0, r0, r4
	mul r0, r2, r0
	bl FUN_0201f9bc
	add r0, r4, r0
	pop {r4, pc}
	arm_func_end FUN_0201c848

	arm_func_start FUN_0201c87c
FUN_0201c87c: ; 0x0201C87C
	ldr r2, [r0, #8]
	ldr r1, [r0, #0xc]
	cmp r2, r1
	addlt r1, r2, #1
	strlt r1, [r0, #8]
	bx lr
	arm_func_end FUN_0201c87c

	arm_func_start FUN_0201c894
FUN_0201c894: ; 0x0201C894
	ldr r1, [r0, #8]
	ldr r0, [r0, #0xc]
	cmp r1, r0
	movge r0, #1
	movlt r0, #0
	bx lr
	arm_func_end FUN_0201c894

	arm_func_start thunk_FUN_0201c8c8
thunk_FUN_0201c8c8: ; 0x0201C8AC
	ldr ip, _0201C8B4 ; =FUN_0201c8c8
	bx ip
	.align 2, 0_0201C8B4: .word FUN_0201c8c8
	arm_func_end thunk_FUN_0201c8c8

	arm_func_start FUN_0201c8b8
FUN_0201c8b8: ; 0x0201C8B8
	bx lr
	arm_func_end FUN_0201c8b8

	arm_func_start FUN_0201c8bc
FUN_0201c8bc: ; 0x0201C8BC
	bx lr
	arm_func_end FUN_0201c8bc

	arm_func_start FUN_0201c8c0
FUN_0201c8c0: ; 0x0201C8C0
	mov r0, #0
	bx lr
	arm_func_end FUN_0201c8c0

	arm_func_start FUN_0201c8c8
FUN_0201c8c8: ; 0x0201C8C8
	bx lr
	arm_func_end FUN_0201c8c8

	arm_func_start FUN_0201c8cc
FUN_0201c8cc: ; 0x0201C8CC
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r2
	ldr r5, [r6]
	mov r7, r1
	cmp r5, #0
	mov r4, #0
	bls _0201C914
	arm_func_end FUN_0201c8cc
_0201C8E8:
	bl FUN_0201c8c0
	and r1, r0, #0xff
	cmp r1, #0xd
	strb r0, [r7, r4]
	cmpne r1, #0xa
	addeq r0, r4, #1
	streq r0, [r6]
	beq _0201C914
	add r4, r4, #1
	cmp r4, r5
	blo _0201C8E8
_0201C914:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0201c91c
FUN_0201c91c: ; 0x0201C91C
	push {r3, lr}
	ldr r0, [r2]
	cmp r0, #1
	bls _0201C950
	add r3, r1, r0
	ldrb r2, [r3, #-1]
	mov r0, r1
	mov r1, #0
	strb r2, [sp]
	strb r1, [r3, #-1]
	bl FUN_0201c8bc
	add r0, sp, #0
	b _0201C954
	arm_func_end FUN_0201c91c
_0201C950:
	mov r0, r1
_0201C954:
	bl FUN_0201c8b8
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_0201c960
FUN_0201c960: ; 0x0201C960
	mov r0, #0
	bx lr
	arm_func_end FUN_0201c960

	arm_func_start FUN_0201c968
FUN_0201c968: ; 0x0201C968
	push {r4, lr}
	ldrsb r2, [r0]
	tst r2, #1
	asreq r2, r2, #1
	streq r2, [r1]
	addeq r0, r0, #1
	popeq {r4, pc}
	ldrb r4, [r0, #1]
	tst r2, #2
	asreq r2, r2, #2
	orreq r2, r4, r2, lsl #8
	streq r2, [r1]
	addeq r0, r0, #2
	popeq {r4, pc}
	tst r2, #4
	ldrb lr, [r0, #2]
	bne _0201C9C8
	asr r3, r2, #3
	lsl r2, r4, #8
	orr r2, r2, r3, lsl #16
	orr r2, lr, r2
	str r2, [r1]
	add r0, r0, #3
	pop {r4, pc}
	arm_func_end FUN_0201c968
_0201C9C8:
	ldrb ip, [r0, #3]
	asr r3, r2, #3
	lsl r2, r4, #0x10
	orr r2, r2, r3, lsl #24
	orr r2, r2, lr, lsl #8
	orr r2, ip, r2
	str r2, [r1]
	add r0, r0, #4
	pop {r4, pc}

	arm_func_start FUN_0201c9ec
FUN_0201c9ec: ; 0x0201C9EC
	push {r4, lr}
	ldrb r2, [r0]
	tst r2, #1
	lsreq r2, r2, #1
	streq r2, [r1]
	addeq r0, r0, #1
	popeq {r4, pc}
	ldrb r4, [r0, #1]
	tst r2, #2
	lsreq r2, r2, #2
	orreq r2, r4, r2, lsl #8
	streq r2, [r1]
	addeq r0, r0, #2
	popeq {r4, pc}
	tst r2, #4
	ldrb lr, [r0, #2]
	bne _0201CA4C
	lsr r3, r2, #3
	lsl r2, r4, #8
	orr r2, r2, r3, lsl #16
	orr r2, lr, r2
	str r2, [r1]
	add r0, r0, #3
	pop {r4, pc}
	arm_func_end FUN_0201c9ec
_0201CA4C:
	ldrb ip, [r0, #3]
	lsr r3, r2, #3
	lsl r2, r4, #0x10
	orr r2, r2, r3, lsl #24
	orr r2, r2, lr, lsl #8
	orr r2, ip, r2
	str r2, [r1]
	add r0, r0, #4
	pop {r4, pc}

	arm_func_start FUN_0201ca70
FUN_0201ca70: ; 0x0201CA70
	push {r4, r5, r6, lr}
	subs r6, r1, #1
	mov r5, #0
	bmi _0201CACC
	mov r1, #0xc
	arm_func_end FUN_0201ca70
_0201CA84:
	add r3, r5, r6
	asr r4, r3, #1
	mul r3, r4, r1
	ldr ip, [r0, r3]
	add lr, r0, r3
	cmp r2, ip
	sublo r6, r4, #1
	blo _0201CAC4
	ldr r3, [lr, #4]
	bic r3, r3, #1
	add r3, ip, r3
	cmp r2, r3
	addhi r5, r4, #1
	bhi _0201CAC4
	mov r0, lr
	pop {r4, r5, r6, pc}
_0201CAC4:
	cmp r5, r6
	ble _0201CA84
_0201CACC:
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0201cad4
FUN_0201cad4: ; 0x0201CAD4
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xc
	mov r4, r0
	mov sb, r1
	mov r2, #0
	mov r0, sb
	mov r1, r4
	str r2, [sb, #4]
	str r2, [sb, #8]
	bl FUN_0201e56c
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sb, #0xc]
	ldr r1, [sb, #0x10]
	ldr r3, _0201CBD8 ; =0x2AAAAAAB
	sub r5, r1, r0
	smull r2, r1, r3, r5
	lsr r3, r5, #0x1f
	mov r2, r4
	add r1, r3, r1, asr #1
	bl FUN_0201ca70
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldr r1, [r0, #4]
	tst r1, #1
	addne r1, r0, #8
	ldreq r1, [r0, #8]
	str r1, [sb, #4]
	ldr r1, [r0]
	str r1, [sb]
	ldr r1, [r0]
	ldr r0, [sb, #4]
	sub r7, r4, r1
	bl FUN_0201e58c
	mov r8, #0
	add r5, sp, #4
	add r4, sp, #0
	add r6, sp, #8
	arm_func_end FUN_0201cad4
_0201CB74:
	mov r1, r6
	bl FUN_0201c9ec
	ldr r1, [sp, #8]
	cmp r1, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, pc}
	mov r1, r5
	bl FUN_0201c9ec
	mov r1, r4
	bl FUN_0201c9ec
	ldr r1, [sp, #8]
	add r2, r8, r1
	cmp r7, r2
	addlo sp, sp, #0xc
	poplo {r4, r5, r6, r7, r8, sb, pc}
	ldr r1, [sp, #4]
	add r8, r2, r1
	cmp r7, r8
	bhi _0201CB74
	ldr r1, [sb, #4]
	ldr r0, [sp]
	add r0, r1, r0
	str r0, [sb, #8]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0201CBD8: .word 0x2AAAAAAB

	arm_func_start FUN_0201cbdc
FUN_0201cbdc: ; 0x0201CBDC
	ldr r0, [r0, #8]
	cmp r0, #0
	ldrbne r0, [r0]
	andne r0, r0, #0x1f
	moveq r0, #0
	and r0, r0, #0xff
	bx lr
	arm_func_end FUN_0201cbdc

	arm_func_start FUN_0201cbf8
FUN_0201cbf8: ; 0x0201CBF8
	push {r3, r4, r5, lr}
	sub sp, sp, #0xa0
	mov r4, r0
	arm_func_end FUN_0201cbf8
_0201CC04:
	ldr r2, [r4, #8]
	cmp r2, #0
	beq _0201CC1C
	ldrb r0, [r2]
	tst r0, #0x80
	beq _0201CC60
_0201CC1C:
	mov r1, r4
	add r0, r4, #0x18
	bl FUN_0201e470
	mov r1, r4
	bl FUN_0201cad4
	ldr r0, [r4, #4]
	cmp r0, #0
	addeq sp, sp, #0xa0
	moveq r0, #0xff
	popeq {r3, r4, r5, pc}
	mov r1, r4
	add r0, r4, #0x18
	bl FUN_0201e4cc
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _0201CC04
	b _0201CE64
_0201CC60:
	and r0, r0, #0x1f
	cmp r0, #0x13

	arm_func_start switchD
switchD: ; 0x0201CC68
	addls pc, pc, r0, lsl #2
	b _0201CE58
	arm_func_end switchD
_0201CC70: ; jump table
	b _0201CE58 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0201CC74
	b _0201CE58
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0201CC78
	b _0201CCC0
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0201CC7C
	b _0201CCD4
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0201CC80
	b _0201CCE8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0201CC84
	b _0201CCF0
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0201CC88
	b _0201CD10
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0201CC8C
	b _0201CD24
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0201CC90
	b _0201CD38
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0201CC94
	b _0201CD54
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0201CC98
	b _0201CD78
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0201CC9C
	b _0201CD80
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0201CCA0
	b _0201CD94
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0201CCA4
	b _0201CDAC
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0201CCA8
	b _0201CE58
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0201CCAC
	b _0201CDC0
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x0201CCB0
	b _0201CDE8
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x0201CCB4
	b _0201CE08
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x0201CCB8
	b _0201CE30
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0201CCBC
	b _0201CE50
	arm_func_end caseD_13
_0201CCC0:
	add r1, sp, #0x9c
_0201CCC4:
	add r0, r2, #1
_0201CCC8:
	bl FUN_0201c968
_0201CCCC:
	add r0, r0, #4
	b _0201CDB8
_0201CCD4:
	add r1, sp, #0x94
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x98
	b _0201CCC8
_0201CCE8:
	add r1, sp, #0x90
	b _0201CCC4
_0201CCF0:
	add r1, sp, #0x84
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x88
	bl FUN_0201c9ec
	add r1, sp, #0x8c
_0201CD08:
	bl FUN_0201c9ec
	b _0201CCCC
_0201CD10:
	add r1, sp, #0x7c
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x80
	b _0201CCC8
_0201CD24:
	add r1, sp, #0x74
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x78
	b _0201CCC8
_0201CD38:
	add r1, sp, #0x68
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x6c
	bl FUN_0201c968
	add r1, sp, #0x70
	b _0201CCC8
_0201CD54:
	add r1, sp, #0x58
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x5c
	bl FUN_0201c968
	add r1, sp, #0x60
	bl FUN_0201c9ec
	add r1, sp, #0x64
	b _0201CD08
_0201CD78:
	add r1, sp, #0x54
	b _0201CCC4
_0201CD80:
	add r1, sp, #0x4c
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x50
	b _0201CCC8
_0201CD94:
	add r1, sp, #0x44
	add r0, r2, #5
	bl FUN_0201c9ec
	add r1, sp, #0x48
	bl FUN_0201c968
_0201CDA8:
	b _0201CDB8
_0201CDAC:
	add r1, sp, #0x40
_0201CDB0:
	add r0, r2, #1
	bl FUN_0201c968
_0201CDB8:
	str r0, [r4, #8]
	b _0201CE64
_0201CDC0:
	add r1, sp, #0x34
	add r0, r2, #1
	bl FUN_0201c9ec
	add r1, sp, #0x38
	bl FUN_0201c9ec
	add r1, sp, #0x3c
	bl FUN_0201c968
	ldr r1, [sp, #0x34]
	add r0, r0, r1, lsl #2
	b _0201CDA8
_0201CDE8:
	add r1, sp, #0x24
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x28
	bl FUN_0201c968
	add r1, sp, #0x2c
	add r0, r0, #4
	b _0201CCC8
_0201CE08:
	add r1, sp, #0x14
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x1c
	bl FUN_0201c968
	add r1, sp, #0x18
	add r0, r0, #1
	bl FUN_0201c968
	add r1, sp, #0x20
	b _0201CCC8
_0201CE30:
	add r1, sp, #8
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0xc
	add r0, r0, #1
	bl FUN_0201c968
	add r1, sp, #0x10
	b _0201CD08
_0201CE50:
	add r1, sp, #4
	b _0201CDB0
_0201CE58:
	add sp, sp, #0xa0
	mov r0, #0xff
	pop {r3, r4, r5, pc}
_0201CE64:
	ldr r2, [r4, #8]
	ldrb r0, [r2]
	and r0, r0, #0x1f
	cmp r0, #1
	addne sp, sp, #0xa0
	popne {r3, r4, r5, pc}
	add r5, sp, #0
_0201CE80:
	mov r1, r5
	add r0, r2, #1
	bl FUN_0201c968
	ldr r1, [r4, #8]
	ldr r0, [sp]
	add r2, r1, r0
	str r2, [r4, #8]
	ldrb r0, [r1, r0]
	and r0, r0, #0x1f
	cmp r0, #1
	beq _0201CE80
	add sp, sp, #0xa0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0201ceb4
FUN_0201ceb4: ; 0x0201CEB4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xa4
	mov sb, r0
	mov r8, r1
	str r2, [sp]
	arm_func_end FUN_0201ceb4
_0201CEC8:
	ldr r2, [r8, #8]
	cmp r2, #0
	bne _0201CF10
	mov r0, sb
	mov r1, r8
	bl FUN_0201e470
	mov r1, r8
	bl FUN_0201cad4
	ldr r0, [r8, #4]
	cmp r0, #0
	bne _0201CEF8
	bl FUN_0201ddcc
_0201CEF8:
	mov r0, sb
	mov r1, r8
	bl FUN_0201e4cc
	ldr r2, [r8, #8]
	cmp r2, #0
	beq _0201CEC8
_0201CF10:
	ldrb r7, [r2]
	and r0, r7, #0x1f
	cmp r0, #0x13

	arm_func_start switchD
switchD: ; 0x0201CF1C
	addls pc, pc, r0, lsl #2
	b _0201D6CC
	arm_func_end switchD
_0201CF24: ; jump table
	b _0201D6CC ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0201CF28
	b _0201CF74
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0201CF2C
	b _0201CF94
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0201CF30
	b _0201CFDC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0201CF34
	b _0201D058
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0201CF38
	b _0201D0B0
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0201CF3C
	b _0201D134
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0201CF40
	b _0201D19C
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0201CF44
	b _0201D204
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0201CF48
	b _0201D2A8
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0201CF4C
	b _0201D350
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0201CF50
	b _0201D3A4
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0201CF54
	b _0201D428
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0201CF58
	b _0201D450
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0201CF5C
	b _0201D6CC
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0201CF60
	b _0201D498
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x0201CF64
	b _0201D4D0
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x0201CF68
	b _0201D564
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x0201CF6C
	b _0201D604
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0201CF70
	b _0201D6BC
	arm_func_end caseD_13
_0201CF74:
	add r1, sp, #0xa0
	add r0, r2, #1
	bl FUN_0201c968
	ldr r1, [r8, #8]
	ldr r0, [sp, #0xa0]
	add r0, r1, r0
_0201CF8C:
	str r0, [r8, #8]
	b _0201D6D0
_0201CF94:
	add r1, sp, #0x9c
	add r0, r2, #1
	bl FUN_0201c968
	mov r4, r0
	ldrb r1, [r4]
	ldrb r0, [r4, #1]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #3]
	orr r0, r1, r0, lsl #8
	orr r0, r0, r2, lsl #16
	ldr r5, [sb, #0x18]
	ldr r1, [sp, #0x9c]
	orr r2, r0, r3, lsl #24
	add r0, r5, r1
	mvn r1, #0
	blx r2
	add r0, r4, #4
	b _0201CF8C
_0201CFDC:
	add r1, sp, #0x94
	add r0, r2, #1
	and r4, r7, #0x40
	bl FUN_0201c968
	add r1, sp, #0x98
	bl FUN_0201c968
	cmp r4, #0
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	add r4, r0, #4
	ldrne r0, [sp, #0x94]
	orr r1, r2, r1, lsl #8
	addne r0, sb, r0, lsl #2
	ldrne r0, [r0, #0x1c]
	orr r1, r1, r3, lsl #16
	andne r0, r0, #0xff
	orr r2, r1, r5, lsl #24
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x94]
	ldrbeq r0, [r1, r0]
	cmp r0, #0
	beq _0201D050
	ldr r3, [sb, #0x18]
	ldr r0, [sp, #0x98]
	mvn r1, #0
	add r0, r3, r0
	blx r2
_0201D050:
	str r4, [r8, #8]
	b _0201D6D0
_0201D058:
	add r1, sp, #0x90
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_0201c968
	cmp r4, #0
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	add r4, r0, #4
	ldrne r0, [sp, #0x90]
	orr r1, r2, r1, lsl #8
	addne r0, sb, r0, lsl #2
	ldrne r0, [r0, #0x1c]
	orr r1, r1, r3, lsl #16
	orr r2, r1, r5, lsl #24
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x90]
	ldreq r0, [r1, r0]
	mvn r1, #0
	blx r2
	b _0201D050
_0201D0B0:
	add r1, sp, #0x84
	add r0, r2, #1
	bl FUN_0201c968
	add r1, sp, #0x88
	bl FUN_0201c9ec
	add r1, sp, #0x8c
	bl FUN_0201c9ec
	ldr r3, [sb, #0x18]
	ldr r2, [sp, #0x84]
	ldr r6, [sp, #0x88]
	ldrb r5, [r0]
	ldrb r4, [r0, #1]
	ldr r1, [sp, #0x8c]
	add r2, r3, r2
	ldrb sl, [r0, #2]
	orr r3, r5, r4, lsl #8
	mla r4, r6, r1, r2
	ldrb r2, [r0, #3]
	orr r1, r3, sl, lsl #16
	cmp r6, #0
	orr r5, r1, r2, lsl #24
	add fp, r0, #4
	beq _0201D12C
	mvn sl, #0
_0201D110:
	ldr r0, [sp, #0x8c]
	mov r1, sl
	sub r4, r4, r0
	mov r0, r4
	blx r5
	subs r6, r6, #1
	bne _0201D110
_0201D12C:
	str fp, [r8, #8]
	b _0201D6D0
_0201D134:
	add r1, sp, #0x7c
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_0201c968
	add r1, sp, #0x80
	bl FUN_0201c968
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	cmp r4, #0
	ldrb r3, [r0, #2]
	orr r1, r2, r1, lsl #8
	ldrb r5, [r0, #3]
	add r4, r0, #4
	ldrne r0, [sp, #0x7c]
	orr r1, r1, r3, lsl #16
	addne r0, sb, r0, lsl #2
	orr r2, r1, r5, lsl #24
	ldrne r3, [r0, #0x1c]
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x7c]
	ldreq r3, [r1, r0]
	ldr r0, [sp, #0x80]
	mov r1, #0
	add r0, r3, r0
	blx r2
	b _0201D050
_0201D19C:
	add r1, sp, #0x74
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_0201c968
	add r1, sp, #0x78
	bl FUN_0201c968
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	cmp r4, #0
	ldrb r3, [r0, #2]
	orr r1, r2, r1, lsl #8
	ldrb r5, [r0, #3]
	add r4, r0, #4
	ldrne r0, [sp, #0x74]
	orr r1, r1, r3, lsl #16
	addne r0, sb, r0, lsl #2
	orr r2, r1, r5, lsl #24
	ldrne r3, [r0, #0x1c]
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x74]
	ldreq r3, [r1, r0]
	ldr r0, [sp, #0x78]
	mvn r1, #0
	add r0, r3, r0
	blx r2
	b _0201D050
_0201D204:
	add r1, sp, #0x68
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_0201c968
	add r1, sp, #0x6c
	bl FUN_0201c968
	add r1, sp, #0x70
	bl FUN_0201c968
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	orr r2, r1, r5, lsl #24
	tst r7, #0x40
	add r5, r0, #4
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x68]
	ldrsheq r0, [r1, r0]
	beq _0201D26C
	ldr r0, [sp, #0x68]
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x1c]
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
_0201D26C:
	cmp r0, #0
	beq _0201D2A0
	cmp r4, #0
	ldrne r0, [sp, #0x6c]
	ldreq r1, [sb, #0x18]
	addne r0, sb, r0, lsl #2
	ldrne r3, [r0, #0x1c]
	ldreq r0, [sp, #0x6c]
	ldreq r3, [r1, r0]
	ldr r0, [sp, #0x70]
	mvn r1, #0
	add r0, r3, r0
	blx r2
_0201D2A0:
	str r5, [r8, #8]
	b _0201D6D0
_0201D2A8:
	add r1, sp, #0x58
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_0201c968
	add r1, sp, #0x5c
	bl FUN_0201c968
	add r1, sp, #0x60
	bl FUN_0201c9ec
	add r1, sp, #0x64
	bl FUN_0201c9ec
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	orr r5, r1, r5, lsl #24
	ldrne r1, [sp, #0x58]
	add fp, r0, #4
	addne r1, sb, r1, lsl #2
	ldrne r1, [r1, #0x1c]
	ldrne r0, [sp, #0x5c]
	ldreq r2, [sb, #0x18]
	ldreq r1, [sp, #0x58]
	ldreq r0, [sp, #0x5c]
	ldreq r1, [r2, r1]
	ldr r6, [sp, #0x60]
	add r4, r1, r0
	ldr r0, [sp, #0x64]
	cmp r6, #0
	mla r4, r6, r0, r4
	beq _0201D34C
	mvn sl, #0
_0201D330:
	ldr r0, [sp, #0x64]
	mov r1, sl
	sub r4, r4, r0
	mov r0, r4
	blx r5
	subs r6, r6, #1
	bne _0201D330
_0201D34C:
	b _0201D12C
_0201D350:
	add r1, sp, #0x54
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_0201c968
	cmp r4, #0
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	add r4, r0, #4
	ldrne r0, [sp, #0x54]
	orr r1, r2, r1, lsl #8
	addne r0, sb, r0, lsl #2
	ldrne r0, [r0, #0x1c]
	orr r1, r1, r3, lsl #16
	orr r2, r1, r5, lsl #24
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x54]
	ldreq r0, [r1, r0]
	blx r2
	b _0201D050
_0201D3A4:
	add r1, sp, #0x4c
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_0201c968
	add r1, sp, #0x50
	bl FUN_0201c968
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	tst r7, #0x40
	orr r1, r1, r5, lsl #24
	add r5, r0, #4
	ldrne r0, [sp, #0x4c]
	ldreq r2, [sb, #0x18]
	addne r0, sb, r0, lsl #2
	ldrne r0, [r0, #0x1c]
	andne r0, r0, #0xff
	ldreq r0, [sp, #0x4c]
	ldrbeq r0, [r2, r0]
	cmp r0, #0
	beq _0201D424
	cmp r4, #0
	ldrne r0, [sp, #0x50]
	ldreq r2, [sb, #0x18]
	addne r0, sb, r0, lsl #2
	ldrne r0, [r0, #0x1c]
	ldreq r0, [sp, #0x50]
	ldreq r0, [r2, r0]
	blx r1
_0201D424:
	b _0201D2A0
_0201D428:
	ldr r0, [sp]
	cmp r0, r2
	addeq sp, sp, #0xa4
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, sp, #0x44
	add r0, r2, #5
	bl FUN_0201c9ec
	add r1, sp, #0x48
	bl FUN_0201c968
	b _0201CF8C
_0201D450:
	add r1, sp, #0x40
	add r0, r2, #1
	bl FUN_0201c968
	ldr r2, [sb, #0x18]
	ldr r1, [sp, #0x40]
	mov r4, r0
	add r0, r2, r1
	ldr r2, [r0, #8]
	cmp r2, #0
	beq _0201D494
	ldr r0, [r0]
	ldr r1, [sb, #4]
	cmp r1, r0
	streq r2, [sb, #8]
	beq _0201D494
	mvn r1, #0
	blx r2
_0201D494:
	b _0201D050
_0201D498:
	ldr r0, [sp]
	cmp r0, r2
	addeq sp, sp, #0xa4
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, sp, #0x34
	add r0, r2, #1
	bl FUN_0201c9ec
	add r1, sp, #0x38
	bl FUN_0201c9ec
	add r1, sp, #0x3c
	bl FUN_0201c968
	ldr r1, [sp, #0x34]
	add r0, r0, r1, lsl #2
	b _0201CF8C
_0201D4D0:
	add r1, sp, #0x24
	add r0, r2, #1
	and r5, r7, #0x20
	bl FUN_0201c968
	add r1, sp, #0x28
	bl FUN_0201c968
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r4, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r2, r1, r3, lsl #16
	add r1, sp, #0x2c
	add r0, r0, #4
	orr r4, r2, r4, lsl #24
	bl FUN_0201c968
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	cmp r5, #0
	ldrb r3, [r0, #2]
	orr r1, r2, r1, lsl #8
	ldrb r6, [r0, #3]
	add r5, r0, #4
	ldrne r0, [sp, #0x24]
	orr r1, r1, r3, lsl #16
	addne r0, sb, r0, lsl #2
	orr r2, r1, r6, lsl #24
	ldrne r3, [r0, #0x1c]
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x24]
	ldreq r3, [r1, r0]
	ldr r0, [sp, #0x28]
	ldr r1, [sp, #0x2c]
	add r0, r3, r0
	add r1, r4, r1
	blx r2
	b _0201D2A0
_0201D564:
	add r1, sp, #0x14
	add r0, r2, #1
	and r5, r7, #0x20
	bl FUN_0201c968
	add r1, sp, #0x1c
	bl FUN_0201c968
	ldrb r2, [r0], #1
	add r1, sp, #0x18
	and r4, r2, #0x20
	bl FUN_0201c968
	add r1, sp, #0x20
	bl FUN_0201c968
	cmp r5, #0
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r6, [r0, #3]
	add r5, r0, #4
	ldrne r0, [sp, #0x14]
	orr r1, r2, r1, lsl #8
	addne r0, sb, r0, lsl #2
	ldrne r0, [r0, #0x1c]
	orr r1, r1, r3, lsl #16
	orr r2, r1, r6, lsl #24
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #0x14]
	ldreq r0, [r1, r0]
	cmp r4, #0
	ldrne r1, [sp, #0x18]
	ldreq r3, [sb, #0x18]
	addne r1, sb, r1, lsl #2
	ldrne r4, [r1, #0x1c]
	ldreq r1, [sp, #0x18]
	ldreq r4, [r3, r1]
	ldr r3, [sp, #0x1c]
	ldr r1, [sp, #0x20]
	add r0, r0, r3
	add r1, r4, r1
	blx r2
	b _0201D2A0
_0201D604:
	add r1, sp, #8
	add r0, r2, #1
	and r4, r7, #0x20
	bl FUN_0201c968
	ldrb r2, [r0], #1
	add r1, sp, #0xc
	and r6, r2, #0x20
	bl FUN_0201c968
	add r1, sp, #0x10
	bl FUN_0201c9ec
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb r5, [r0, #3]
	orr r1, r2, r1, lsl #8
	orr r1, r1, r3, lsl #16
	cmp r4, #0
	add fp, r0, #4
	ldrne r0, [sp, #8]
	orr r5, r1, r5, lsl #24
	addne r0, sb, r0, lsl #2
	ldrne r4, [r0, #0x1c]
	ldreq r1, [sb, #0x18]
	ldreq r0, [sp, #8]
	ldreq r4, [r1, r0]
	cmp r6, #0
	ldrne r0, [sp, #0xc]
	ldreq r1, [sb, #0x18]
	addne r0, sb, r0, lsl #2
	ldrne r0, [r0, #0x1c]
	ldreq r0, [sp, #0xc]
	ldreq r0, [r1, r0]
	ldr r1, [sp, #0x10]
	add r4, r4, r0
	bl FUN_0201fbc8
	movs r6, r0
	mvn sl, #0
	beq _0201D6B8
_0201D69C:
	ldr r0, [sp, #0x10]
	mov r1, sl
	sub r4, r4, r0
	mov r0, r4
	blx r5
	subs r6, r6, #1
	bne _0201D69C
_0201D6B8:
	b _0201D12C
_0201D6BC:
	add r1, sp, #4
	add r0, r2, #1
	bl FUN_0201c968
	b _0201CF8C
_0201D6CC:
	bl FUN_0201ddcc
_0201D6D0:
	tst r7, #0x80
	movne r0, #0
	strne r0, [r8, #8]
	b _0201CEC8
_0201D6E0:
	.byte 0xA4, 0xD0, 0x8D, 0xE2, 0xF0, 0x8F, 0xBD, 0xE8

	arm_func_start FUN_0201d6e8
FUN_0201d6e8: ; 0x0201D6E8
	push {r4, r5, lr}
	sub sp, sp, #0x8c
	ldr r2, [r1]
	mov r4, r0
	str r2, [sp, #4]
	ldr r0, [r1, #4]
	add ip, sp, #0x38
	str r0, [sp, #8]
	ldr r0, [r1, #8]
	add lr, r4, #0x1c
	str r0, [sp, #0xc]
	ldr r0, [r1, #0xc]
	mov r5, #5
	str r0, [sp, #0x10]
	ldr r0, [r1, #0x10]
	str r0, [sp, #0x14]
	ldr r0, [r1, #0x14]
	str r0, [sp, #0x18]
	ldr r0, [r4]
	str r0, [sp, #0x1c]
	ldr r0, [r4, #4]
	str r0, [sp, #0x20]
	ldr r0, [r4, #8]
	str r0, [sp, #0x24]
	ldr r0, [r4, #0xc]
	str r0, [sp, #0x28]
	ldr r0, [r4, #0x10]
	str r0, [sp, #0x2c]
	ldr r0, [r4, #0x14]
	str r0, [sp, #0x30]
	ldr r0, [r4, #0x18]
	str r0, [sp, #0x34]
	arm_func_end FUN_0201d6e8
_0201D768:
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	subs r5, r5, #1
	bne _0201D768
	add r5, sp, #4
	ldr r1, [lr]
	mov r0, r5
	str r1, [ip]
	bl FUN_0201cbdc
_0201D78C:
	cmp r0, #0x12

	arm_func_start switchD
switchD: ; 0x0201D790
	addls pc, pc, r0, lsl #2
	b _0201D7E4
	arm_func_end switchD
_0201D798: ; jump table
	b _0201D7F0 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0201D79C
	b _0201D7E4
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0201D7A0
	b _0201D7F0
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0201D7A4
	b _0201D7F0
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0201D7A8
	b _0201D7F0
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0201D7AC
	b _0201D7F0
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0201D7B0
	b _0201D7F0
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0201D7B4
	b _0201D7F0
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0201D7B8
	b _0201D7F0
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0201D7BC
	b _0201D7F0
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0201D7C0
	b _0201D7F0
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0201D7C4
	b _0201D7F0
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0201D7C8
	b _0201D7F0
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0201D7CC
	b _0201D7FC
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0201D7D0
	b _0201D7E4
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0201D7D4
	b _0201D7F0
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x0201D7D8
	b _0201D7F0
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x0201D7DC
	b _0201D7F0
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x0201D7E0
	b _0201D7F0
	arm_func_end caseD_12
_0201D7E4:
	add sp, sp, #0x8c
	mov r0, #0
	pop {r4, r5, pc}
_0201D7F0:
	mov r0, r5
	bl FUN_0201cbf8
	b _0201D78C
_0201D7FC:
	ldr r0, [sp, #0xc]
	add r1, sp, #0
	add r0, r0, #1
	bl FUN_0201c968
	ldr ip, [sp, #0x34]
	ldr r3, [sp]
	mov r1, #0
	add r0, ip, r3
	ldr r2, [r0, #4]
	str r2, [r4]
	ldr r2, [ip, r3]
	str r2, [r4, #4]
	str r1, [r4, #8]
	str r0, [r4, #0xc]
	add sp, sp, #0x8c
	pop {r4, r5, pc}

	arm_func_start FUN_0201d83c
FUN_0201d83c: ; 0x0201D83C
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	mov r6, r1
	ldr r1, [r6]
	mov r7, r0
	cmp r1, #0
	ldr r4, [r6, #0xc]
	mov r5, #0
	bls _0201D8B0
	add r8, sp, #0
	arm_func_end FUN_0201d83c
_0201D864:
	ldrb r1, [r4]
	ldrb r0, [r4, #1]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #3]
	orr r0, r1, r0, lsl #8
	orr r1, r0, r2, lsl #16
	mov r0, r7
	mov r2, r8
	orr r1, r1, r3, lsl #24
	bl FUN_0201de1c
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #1
	popne {r4, r5, r6, r7, r8, pc}
	ldr r0, [r6]
	add r5, r5, #1
	cmp r5, r0
	add r4, r4, #4
	blo _0201D864
_0201D8B0:
	mov r0, #0
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0201d8bc
FUN_0201d8bc: ; 0x0201D8BC
	push {r3, r4, r5, fp, lr}
	sub sp, sp, #0x2c
	mov fp, sp
	str sp, [fp, #0x18]
	ldr r5, [r0, #0x14]
	bl FUN_0201dde4
	b _0201D94C
	arm_func_end FUN_0201d8bc

	arm_func_start FUN_0201d8d8
FUN_0201d8d8: ; 0x0201D8D8
	add r4, fp, #0x1c
	add r0, r5, #1
	mov r1, r4
	bl FUN_0201c9ec
	add r1, fp, #0x20
	bl FUN_0201c9ec
	add r1, fp, #0x24
	bl FUN_0201c968
	str r0, [fp, #0x28]
	ldr r0, [fp, #8]
	mov r1, r4
	bl FUN_0201d83c
	cmp r0, #0
	beq _0201D914
	bl FUN_0201e62c
	arm_func_end FUN_0201d8d8
_0201D914:
	ldr r0, _0201D958 ; =0x0208EF0C
	add r1, fp, #0x1c
	bl FUN_0201d83c
	cmp r0, #0
	beq _0201D940
	ldr r3, _0201D95C ; =0x0208EF00
	ldr r0, _0201D960 ; =0x0208EF24
	ldr r2, _0201D964 ; =FUN_0201d968
	add r1, fp, #0
	str r3, [fp]
	bl FUN_0201e5e4
_0201D940:
	add r0, fp, #4
	bl FUN_0201dcf8
	ldr sp, [fp, #0x18]
_0201D94C:
	bl FUN_0201ddcc
	add sp, fp, #0x2c
	pop {r3, r4, r5, fp, pc}
	.align 2, 0_0201D958: .word 0x0208EF0C
_0201D95C: .word 0x0208EF00
_0201D960: .word 0x0208EF24
_0201D964: .word FUN_0201d968

	arm_func_start FUN_0201d968
FUN_0201d968: ; 0x0201D968
	bx lr
	arm_func_end FUN_0201d968

	arm_func_start FUN_0201d96c
FUN_0201d96c: ; 0x0201D96C
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r3
	mov r5, r2
	mov r2, r4
	mov r7, r0
	mov r6, r1
	bl FUN_0201ceb4
	ldr r2, [r7, #0x18]
	ldr r1, [r5, #8]
	ldr r0, [r7, #4]
	add r3, r2, r1
	str r0, [r2, r1]
	ldr r1, [r7]
	mov r0, r7
	str r1, [r3, #4]
	ldr r2, [r7, #8]
	mov r1, r6
	str r2, [r3, #8]
	str r4, [r3, #0x14]
	ldr r3, [r6]
	ldr r2, [r5, #4]
	add r2, r3, r2
	bl FUN_0201e5b4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0201d96c

	arm_func_start FUN_0201d9cc
FUN_0201d9cc: ; 0x0201D9CC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xa4
	mov r6, r1
	ldr r1, [r6]
	mov r7, r0
	str r1, [sp, #0x1c]
	ldr r0, [r6, #4]
	add r8, sp, #0x50
	str r0, [sp, #0x20]
	ldr r0, [r6, #8]
	mov r5, r2
	str r0, [sp, #0x24]
	ldr r0, [r6, #0xc]
	add sb, r7, #0x1c
	str r0, [sp, #0x28]
	ldr r0, [r6, #0x10]
	mov r4, #5
	str r0, [sp, #0x2c]
	ldr r0, [r6, #0x14]
	str r0, [sp, #0x30]
	ldr r0, [r7]
	str r0, [sp, #0x34]
	ldr r0, [r7, #4]
	str r0, [sp, #0x38]
	ldr r0, [r7, #8]
	str r0, [sp, #0x3c]
	ldr r0, [r7, #0xc]
	str r0, [sp, #0x40]
	ldr r0, [r7, #0x10]
	str r0, [sp, #0x44]
	ldr r0, [r7, #0x14]
	str r0, [sp, #0x48]
	ldr r0, [r7, #0x18]
	str r0, [sp, #0x4c]
	arm_func_end FUN_0201d9cc
_0201DA54:
	ldm sb!, {r0, r1, r2, r3}
	stm r8!, {r0, r1, r2, r3}
	subs r4, r4, #1
	bne _0201DA54
	add r4, sp, #0x1c
	ldr r1, [sb]
	mov r0, r4
	str r1, [r8]
	bl FUN_0201cbdc
	add r8, sp, #0
	add fp, sp, #4
	add sb, sp, #0x14
	add sl, sp, #0x18
_0201DA88:
	cmp r0, #0x13

	arm_func_start switchD
switchD: ; 0x0201DA8C
	addls pc, pc, r0, lsl #2
	b _0201DB88
	arm_func_end switchD
_0201DA94: ; jump table
	b _0201DB90 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0201DA98
	b _0201DB88
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0201DA9C
	b _0201DB90
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0201DAA0
	b _0201DB90
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0201DAA4
	b _0201DB90
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0201DAA8
	b _0201DB90
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0201DAAC
	b _0201DB90
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0201DAB0
	b _0201DB90
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0201DAB4
	b _0201DB90
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0201DAB8
	b _0201DB90
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0201DABC
	b _0201DB90
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0201DAC0
	b _0201DB90
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0201DAC4
	b _0201DAE4
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0201DAC8
	b _0201DB90
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0201DACC
	b _0201DB88
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0201DAD0
	b _0201DB38
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x0201DAD4
	b _0201DB90
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x0201DAD8
	b _0201DB90
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x0201DADC
	b _0201DB90
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0201DAE0
	b _0201DB90
	arm_func_end caseD_13
_0201DAE4:
	ldr lr, [sp, #0x24]
	mov r1, sb
	ldrb r2, [lr, #1]
	ldrb r0, [lr, #2]
	ldrb r3, [lr, #3]
	ldrb ip, [lr, #4]
	orr r0, r2, r0, lsl #8
	orr r0, r0, r3, lsl #16
	orr r2, r0, ip, lsl #24
	add r0, lr, #5
	str r2, [sp, #0x10]
	bl FUN_0201c9ec
	mov r1, sl
	bl FUN_0201c968
	ldr r0, [r7]
	ldr r1, [sp, #0x10]
	mov r2, r5
	bl FUN_0201de1c
	cmp r0, #0
	beq _0201DB90
	b _0201DB9C
_0201DB38:
	ldr r0, [sp, #0x24]
	mov r1, r8
	add r0, r0, #1
	bl FUN_0201c9ec
	mov r1, fp
	bl FUN_0201c9ec
	add r1, sp, #8
	bl FUN_0201c968
	str r0, [sp, #0xc]
	ldr r0, [r7]
	mov r1, r8
	bl FUN_0201d83c
	cmp r0, #0
	bne _0201DB90
	ldr r3, [sp, #0x24]
	mov r0, r7
	mov r1, r6
	mov r2, r8
	bl FUN_0201d96c
	b _0201DB90
_0201DB88:
	bl FUN_0201ddcc
	b _0201DB9C
_0201DB90:
	mov r0, r4
	bl FUN_0201cbf8
	b _0201DA88
_0201DB9C:
	ldr r0, [sp, #0x24]
	add sp, sp, #0xa4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0201dba8
FUN_0201dba8: ; 0x0201DBA8
	push {r3, lr}
	ldr lr, [r0, #0x18]
	ldr ip, [r0, #4]
	add r3, lr, r1
	str ip, [lr, r1]
	ldr r1, [r0]
	str r1, [r3, #4]
	ldr r1, [r0, #8]
	str r1, [r3, #8]
	ldr r1, [r0]
	ldrb r1, [r1]
	cmp r1, #0x2a
	ldrne r0, [r0, #4]
	addne r0, r0, r2
	strne r0, [r3, #0xc]
	popne {r3, pc}
	add r1, r3, #0x10
	str r1, [r3, #0xc]
	ldr r0, [r0, #4]
	ldr r0, [r0]
	add r0, r0, r2
	str r0, [r3, #0x10]
	pop {r3, pc}
	arm_func_end FUN_0201dba8
_0201DC04:
	push {r4, r5, r6, lr}
	sub sp, sp, #0x28
	mov r6, r0
	ldr r0, [r6, #0x10]
	add r1, sp, #0x10
	bl FUN_0201cad4
	ldr r0, [sp, #0x14]
	cmp r0, #0
	bne _0201DC2C
	bl FUN_0201ddcc
_0201DC2C:
	add r4, sp, #0x10
	mov r0, r6
	mov r1, r4
	bl FUN_0201e4cc
	ldr r0, [r6]
	cmp r0, #0
	movne r0, #0
	strne r0, [r6, #0xc]
	bne _0201DC6C
	mov r0, r6
	mov r1, r4
	bl FUN_0201d6e8
	str r0, [r6, #0xc]
	cmp r0, #0
	bne _0201DC6C
	bl FUN_0201ddcc
_0201DC6C:
	add r5, sp, #0x10
	add r2, sp, #0
	mov r0, r6
	mov r1, r5
	bl FUN_0201d9cc
	mov r4, r0
	ldrb r1, [r4, #1]
	ldrb r0, [r4, #2]
	ldrb r2, [r4, #3]
	ldrb r3, [r4, #4]
	orr r0, r1, r0, lsl #8
	orr r0, r0, r2, lsl #16
	orr r2, r0, r3, lsl #24
	add r1, sp, #8
	add r0, r4, #5
	str r2, [sp, #4]
	bl FUN_0201c9ec
	add r1, sp, #0xc
	bl FUN_0201c968
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_0201ceb4
	ldr r1, [sp, #0xc]
	ldr r2, [sp]
	mov r0, r6
	bl FUN_0201dba8
	ldr r3, [sp, #0x10]
	ldr r2, [sp, #8]
	mov r0, r6
	mov r1, r5
	add r2, r3, r2
	bl FUN_0201e5b4
	add sp, sp, #0x28
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0201dcf8
FUN_0201dcf8: ; 0x0201DCF8
	push {r3, lr}
	ldr r1, [r0]
	cmp r1, #0
	ldrne r2, [r0, #8]
	cmpne r2, #0
	popeq {r3, pc}
	mov r0, r1
	mvn r1, #0
	blx r2
	pop {r3, pc}
	arm_func_end FUN_0201dcf8

	arm_func_start FUN_0201dd20
FUN_0201dd20: ; 0x0201DD20
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0201dd20

	arm_func_start FUN_0201dd34
FUN_0201dd34: ; 0x0201DD34
	ldr r0, _0201DD3C ; =0x0208EEC4
	bx lr
	.align 2, 0_0201DD3C: .word 0x0208EEC4
	arm_func_end FUN_0201dd34

	arm_func_start __call_static_initializers
__call_static_initializers: ; 0x0201DD40
	push {r4, lr}
	ldr r4, _0201DD6C ; =0x0208EB60
	b _0201DD54
	arm_func_end __call_static_initializers
_0201DD4C:
	blx r0
	add r4, r4, #4
_0201DD54:
	cmp r4, #0
	popeq {r4, pc}
	ldr r0, [r4]
	cmp r0, #0
	bne _0201DD4C
	pop {r4, pc}
	.align 2, 0_0201DD6C: .word 0x0208EB60

	arm_func_start FUN_0201dd70
FUN_0201dd70: ; 0x0201DD70
	push {r3, r4, r5, lr}
	ldr r4, _0201DDB0 ; =0x02099928
	ldr r2, [r4]
	cmp r2, #0
	popeq {r3, r4, r5, pc}
	mvn r5, #0
	arm_func_end FUN_0201dd70
_0201DD88:
	ldr r0, [r2]
	mov r1, r5
	str r0, [r4]
	ldr r0, [r2, #8]
	ldr r2, [r2, #4]
	blx r2
	ldr r2, [r4]
	cmp r2, #0
	bne _0201DD88
	pop {r3, r4, r5, pc}
	.align 2, 0_0201DDB0: .word 0x02099928

	arm_func_start thunk_FUN_02021040
thunk_FUN_02021040: ; 0x0201DDB4
	ldr ip, _0201DDBC ; =FUN_02021040
	bx ip
	.align 2, 0_0201DDBC: .word FUN_02021040
	arm_func_end thunk_FUN_02021040

	arm_func_start FUN_0201ddc0
FUN_0201ddc0: ; 0x0201DDC0
	ldr ip, _0201DDC8 ; =FUN_0201ddcc
	bx ip
	.align 2, 0_0201DDC8: .word FUN_0201ddcc
	arm_func_end FUN_0201ddc0

	arm_func_start FUN_0201ddcc
FUN_0201ddcc: ; 0x0201DDCC
	push {r3, lr}
	ldr r0, _0201DDE0 ; =0x0208EF4C
	ldr r0, [r0]
	blx r0
	pop {r3, pc}
	.align 2, 0_0201DDE0: .word 0x0208EF4C
	arm_func_end FUN_0201ddcc

	arm_func_start FUN_0201dde4
FUN_0201dde4: ; 0x0201DDE4
	push {r3, lr}
	ldr r0, _0201DDF8 ; =0x0208EF4C
	ldr r0, [r0, #4]
	blx r0
	pop {r3, pc}
	.align 2, 0_0201DDF8: .word 0x0208EF4C
	arm_func_end FUN_0201dde4

	arm_func_start FUN_0201ddfc
FUN_0201ddfc: ; 0x0201DDFC
	ldr r3, _0201DE18 ; =0x02099928
	ldr ip, [r3]
	str ip, [r2]
	str r1, [r2, #4]
	str r0, [r2, #8]
	str r2, [r3]
	bx lr
	.align 2, 0_0201DE18: .word 0x02099928
	arm_func_end FUN_0201ddfc

	arm_func_start FUN_0201de1c
FUN_0201de1c: ; 0x0201DE1C
	push {r3, lr}
	mov ip, #0
	mov r3, r1
	cmp r1, #0
	str ip, [r2]
	moveq r0, #1
	popeq {r3, pc}
	ldrb ip, [r1]
	cmp ip, #0x50
	bne _0201DE80
	ldrb ip, [r3, #1]!
	cmp ip, #0x56
	addeq r3, r3, #1
	ldrb ip, [r3]
	cmp ip, #0x4b
	addeq r3, r3, #1
	ldrb r3, [r3]
	cmp r3, #0x76
	bne _0201DE7C
	ldrb r3, [r0]
	cmp r3, #0x50
	cmpne r3, #0x2a
	moveq r0, #1
	popeq {r3, pc}
	arm_func_end FUN_0201de1c
_0201DE7C:
	mov r3, r1
_0201DE80:
	ldrb ip, [r0]
	cmp ip, #0x21
	beq _0201DE94
	cmp ip, #0x2a
	bne _0201DF84
_0201DE94:
	ldrb lr, [r0], #1
	ldrb ip, [r3], #1
	cmp lr, ip
	movne r0, #0
	popne {r3, pc}
_0201DEA8:
	ldrb lr, [r0]
	ldrb ip, [r3], #1
	cmp lr, ip
	bne _0201DEFC
	cmp lr, #0x21
	add r0, r0, #1
	bne _0201DEA8
	ldrb r1, [r0]
	mov lr, #0
	cmp r1, #0x21
	beq _0201DEF0
	mov r1, #0xa
_0201DED8:
	ldrb ip, [r0]
	ldrb r3, [r0, #1]!
	mla ip, lr, r1, ip
	cmp r3, #0x21
	sub lr, ip, #0x30
	bne _0201DED8
_0201DEF0:
	str lr, [r2]
	mov r0, #1
	pop {r3, pc}
_0201DEFC:
	ldrb r3, [r0], #1
	cmp r3, #0x21
	bne _0201DEFC
_0201DF08:
	ldrb r3, [r0], #1
	cmp r3, #0x21
	bne _0201DF08
	ldrb r3, [r0]
	cmp r3, #0
	moveq r0, #0
	popeq {r3, pc}
	add r3, r1, #1
	b _0201DEA8
_0201DF2C:
	ldrb r1, [r3, #1]!
	add r0, r0, #1
	cmp r1, #0x4b
	bne _0201DF4C
	ldrb r1, [r0]
	add r3, r3, #1
	cmp r1, #0x4b
	addeq r0, r0, #1
_0201DF4C:
	ldrb r2, [r0]
	cmp r2, #0x4b
	moveq r0, #0
	popeq {r3, pc}
	ldrb r1, [r3]
	cmp r1, #0x56
	bne _0201DF74
	cmp r2, #0x56
	addeq r0, r0, #1
	add r3, r3, #1
_0201DF74:
	ldrb r1, [r0]
	cmp r1, #0x56
	moveq r0, #0
	popeq {r3, pc}
_0201DF84:
	ldrb r2, [r0]
	cmp r2, #0x50
	cmpne r2, #0x52
	bne _0201DFA0
	ldrb r1, [r3]
	cmp r2, r1
	beq _0201DF2C
_0201DFA0:
	ldrb r1, [r3]
	cmp r2, r1
	bne _0201DFC8
_0201DFAC:
	cmp r2, #0
	moveq r0, #1
	popeq {r3, pc}
	ldrb r2, [r0, #1]!
	ldrb r1, [r3, #1]!
	cmp r2, r1
	beq _0201DFAC
_0201DFC8:
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_0201dfd0
FUN_0201dfd0: ; 0x0201DFD0
	push {r3, lr}
	ldr r0, _0201E000 ; =0x0208EF54
	ldrb r0, [r0]
	cmp r0, #0
	popeq {r3, pc}
	ldr r3, _0201E004 ; =0x0208EF88
	ldr r0, _0201E008 ; =0x0208EF94
	ldr r2, _0201E00C ; =FUN_0201e010
	add r1, sp, #0
	str r3, [sp]
	bl FUN_0201e5e4
	pop {r3, pc}
	.align 2, 0_0201E000: .word 0x0208EF54
_0201E004: .word 0x0208EF88
_0201E008: .word 0x0208EF94
_0201E00C: .word FUN_0201e010
	arm_func_end FUN_0201dfd0

	arm_func_start FUN_0201e010
FUN_0201e010: ; 0x0201E010
	bx lr
	arm_func_end FUN_0201e010

	arm_func_start FUN_0201e014
FUN_0201e014: ; 0x0201E014
	push {r3, r4, r5, r6, fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	movs r6, r0
	ldr r4, _0201E074 ; =0x0209992C
	moveq r6, #4
	arm_func_end FUN_0201e014
_0201E02C:
	mov r0, r6
	bl FUN_020211f8
	movs r5, r0
	bne _0201E054
	ldr r0, [r4]
	cmp r0, #0
	beq _0201E050
	blx r0
	b _0201E02C
_0201E050:
	bl FUN_0201dfd0
_0201E054:
	add sp, fp, #0x18
	mov r0, r5
	pop {r3, r4, r5, r6, fp, pc}
_0201E060:
	.byte 0x00, 0x00, 0x8B, 0xE2, 0x14, 0xFE, 0xFF, 0xEB
_0201E068:
	b _0201E068
_0201E06C:
	.byte 0x18, 0xD0, 0x8B, 0xE2
	.byte 0x78, 0x88, 0xBD, 0xE8
_0201E074: .word 0x0209992C

	arm_func_start FUN_0201e078
FUN_0201e078: ; 0x0201E078
	push {r3, lr}
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_02021210
	pop {r3, pc}
	arm_func_end FUN_0201e078

	arm_func_start FUN_0201e08c
FUN_0201e08c: ; 0x0201E08C
	push {fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	bl FUN_0201e014
	add sp, fp, #0x18
	pop {fp, pc}
	arm_func_end FUN_0201e08c
_0201E0A4:
	.byte 0x00, 0x00, 0x8B, 0xE2, 0x03, 0xFE, 0xFF, 0xEB
_0201E0AC:
	b _0201E0AC
_0201E0B0:
	.byte 0x18, 0xD0, 0x8B, 0xE2, 0x00, 0x88, 0xBD, 0xE8

	arm_func_start thunk_FUN_0201e078
thunk_FUN_0201e078: ; 0x0201E0B8
	ldr ip, _0201E0C0 ; =FUN_0201e078
	bx ip
	.align 2, 0_0201E0C0: .word FUN_0201e078
	arm_func_end thunk_FUN_0201e078

	arm_func_start FUN_0201e0c4
FUN_0201e0c4: ; 0x0201E0C4
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0201e0c4

	arm_func_start FUN_0201e0d8
FUN_0201e0d8: ; 0x0201E0D8
	ldr r0, _0201E0E0 ; =0x0208EF58
	bx lr
	.align 2, 0_0201E0E0: .word 0x0208EF58
	arm_func_end FUN_0201e0d8

	arm_func_start FUN_0201e0e4
FUN_0201e0e4: ; 0x0201E0E4
	push {r4, r5, r6, r7, fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	str sp, [fp, #0x14]
	cmp r6, r7
	addls sp, fp, #0x18
	popls {r4, r5, r6, r7, fp, pc}
	arm_func_end FUN_0201e0e4
_0201E110:
	sub r6, r6, r5
	mov r0, r6
	blx r4
	cmp r6, r7
	bhi _0201E110
	add sp, fp, #0x18
	pop {r4, r5, r6, r7, fp, pc}
_0201E12C:
	.byte 0x26, 0xFF, 0xFF, 0xEB
	.byte 0x00, 0x00, 0x8B, 0xE2, 0xEF, 0xFE, 0xFF, 0xEB, 0x18, 0xD0, 0x8B, 0xE2, 0xF0, 0x88, 0xBD, 0xE8

	arm_func_start FUN_0201e140
FUN_0201e140: ; 0x0201E140
	push {r4, r5, r6, r7, r8, sb, fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mla r0, r8, r7, r6
	mov r5, r3
	bl FUN_0201e08c
	movs sb, r0
	addeq sp, fp, #0x18
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, fp, pc}
	cmp r6, #0
	beq _0201E18C
	add r0, sb, r6
	str r8, [r0, #-4]
	cmp r6, #8
	strhs r7, [r0, #-8]
	arm_func_end FUN_0201e140
_0201E18C:
	cmp r5, #0
	beq _0201E1EC
	str sp, [fp, #0x14]
	cmp r8, #0
	add r4, sb, r6
	beq _0201E1EC
_0201E1A4:
	mov r0, r4
	blx r5
	add r4, r4, r7
	subs r8, r8, #1
	bne _0201E1A4
	b _0201E1EC
_0201E1BC:
	.byte 0x38, 0x30, 0x9B, 0xE5
	.byte 0x00, 0x00, 0x53, 0xE3, 0x03, 0x00, 0x00, 0x0A, 0x04, 0x10, 0xA0, 0xE1, 0x07, 0x20, 0xA0, 0xE1
	.byte 0x06, 0x00, 0x89, 0xE0, 0xC2, 0xFF, 0xFF, 0xEB

	arm_func_start LAB_0201e1d8
LAB_0201e1d8: ; 0x0201E1D8
	mov r0, sb
	bl thunk_FUN_0201e078
	bl FUN_0201e62c
	add r0, fp, #0
	bl FUN_0201dcf8
	arm_func_end LAB_0201e1d8
_0201E1EC:
	add r0, sb, r6
	add sp, fp, #0x18
	pop {r4, r5, r6, r7, r8, sb, fp, pc}

	arm_func_start FUN_0201e1f8
FUN_0201e1f8: ; 0x0201E1F8
	push {r3, r4, r5, r6, r7, r8, fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	movs r4, r3
	mov r7, r0
	mov r6, r1
	mov r5, r2
	addeq sp, fp, #0x18
	popeq {r3, r4, r5, r6, r7, r8, fp, pc}
	ldr r0, [fp, #0x38]
	cmp r0, #0
	beq _0201E280
	mov r8, r7
	str sp, [fp, #0x14]
	cmp r6, #0
	addeq sp, fp, #0x18
	popeq {r3, r4, r5, r6, r7, r8, fp, pc}
	arm_func_end FUN_0201e1f8
_0201E23C:
	mov r0, r8
	blx r4
	add r8, r8, r5
	subs r6, r6, #1
	bne _0201E23C
	add sp, fp, #0x18
	pop {r3, r4, r5, r6, r7, r8, fp, pc}
_0201E258:
	.byte 0x38, 0x30, 0x9B, 0xE5, 0x07, 0x00, 0xA0, 0xE1
	.byte 0x08, 0x10, 0xA0, 0xE1, 0x05, 0x20, 0xA0, 0xE1, 0x9D, 0xFF, 0xFF, 0xEB, 0xEE, 0x00, 0x00, 0xEB
	.byte 0x00, 0x00, 0x8B, 0xE2, 0x9F, 0xFE, 0xFF, 0xEB, 0x18, 0xD0, 0x8B, 0xE2, 0xF8, 0x89, 0xBD, 0xE8
_0201E280:
	cmp r6, #0
	addeq sp, fp, #0x18
	popeq {r3, r4, r5, r6, r7, r8, fp, pc}
_0201E28C:
	mov r0, r7
	blx r4
	add r7, r7, r5
	subs r6, r6, #1
	bne _0201E28C
	add sp, fp, #0x18
	pop {r3, r4, r5, r6, r7, r8, fp, pc}

	arm_func_start FUN_0201e2a8
FUN_0201e2a8: ; 0x0201E2A8
	push {r4, r5, r6, r7, fp, lr}
	sub sp, sp, #0x30
	mov fp, sp
	mov r7, r1
	movs r5, r3
	mov r6, r2
	mlane r4, r7, r6, r0
	strne sp, [fp, #0x2c]
	cmpne r7, #0
	addeq sp, fp, #0x30
	popeq {r4, r5, r6, r7, fp, pc}
	arm_func_end FUN_0201e2a8
_0201E2D4:
	sub r4, r4, r6
	mov r0, r4
	blx r5
	subs r7, r7, #1
	bne _0201E2D4
	add sp, fp, #0x30
	pop {r4, r5, r6, r7, fp, pc}
_0201E2F0:
	.byte 0x14, 0xD0, 0x8B, 0xE5, 0x01, 0x70, 0x57, 0xE2, 0x09, 0x00, 0x00, 0x0A
_0201E2FC:
	sub r4, r4, r6
	mov r0, r4
	blx r5
	subs r7, r7, #1
	bne _0201E2FC
	b _0201E324
_0201E314:
	.byte 0xAC, 0xFE, 0xFF, 0xEB, 0x00, 0x00, 0x8B, 0xE2, 0x75, 0xFE, 0xFF, 0xEB
	.byte 0x14, 0xD0, 0x9B, 0xE5
_0201E324:
	bl FUN_0201e62c
	add r0, fp, #0x18
	bl FUN_0201dcf8
	add sp, fp, #0x30
	pop {r4, r5, r6, r7, fp, pc}

	arm_func_start FUN_0201e338
FUN_0201e338: ; 0x0201E338
	push {r4, r5, r6, r7, fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	mov r7, r1
	movs r5, r3
	mov r6, r2
	mlane r4, r7, r6, r0
	strne sp, [fp, #0x14]
	cmpne r7, #0
	addeq sp, fp, #0x18
	popeq {r4, r5, r6, r7, fp, pc}
	arm_func_end FUN_0201e338
_0201E364:
	sub r4, r4, r6
	mov r0, r4
	blx r5
	subs r7, r7, #1
	bne _0201E364
	add sp, fp, #0x18
	pop {r4, r5, r6, r7, fp, pc}
_0201E380:
	.byte 0x91, 0xFE, 0xFF, 0xEB, 0x00, 0x00, 0x8B, 0xE2, 0x5A, 0xFE, 0xFF, 0xEB, 0x18, 0xD0, 0x8B, 0xE2
	.byte 0xF0, 0x88, 0xBD, 0xE8

	arm_func_start FUN_0201e394
FUN_0201e394: ; 0x0201E394
	push {r3, r4, r5, lr}
	movs r5, r0
	mov r4, r2
	mov ip, r1
	popeq {r3, r4, r5, pc}
	cmp r3, #0
	beq _0201E3BC
	ldr r1, [r5, #-4]
	mov r2, ip
	bl FUN_0201e2a8
	arm_func_end FUN_0201e394
_0201E3BC:
	sub r0, r5, r4
	bl thunk_FUN_0201e078
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0201e3c8
FUN_0201e3c8: ; 0x0201E3C8
	bx lr
	arm_func_end FUN_0201e3c8

	arm_func_start FUN_0201e3cc
FUN_0201e3cc: ; 0x0201E3CC
	push {r3, lr}
	cmp r0, r1
	beq _0201E3EC
	ldr r0, [r0, #4]
	ldr r1, [r1, #4]
	bl FUN_02023fe0
	cmp r0, #0
	bne _0201E3F4
	arm_func_end FUN_0201e3cc
_0201E3EC:
	mov r0, #1
	pop {r3, pc}
_0201E3F4:
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_0201e3fc
FUN_0201e3fc: ; 0x0201E3FC
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e3c8
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0201e3fc

	arm_func_start FUN_0201e410
FUN_0201e410: ; 0x0201E410
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e3c8
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0201e410

	arm_func_start FUN_0201e42c
FUN_0201e42c: ; 0x0201E42C
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e3c8
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0201e42c

	arm_func_start FUN_0201e440
FUN_0201e440: ; 0x0201E440
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e42c
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0201e440

	arm_func_start FUN_0201e454
FUN_0201e454: ; 0x0201E454
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e42c
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0201e454

	arm_func_start FUN_0201e470
FUN_0201e470: ; 0x0201E470
	push {r4, lr}
	ldrb r1, [r0, #0x6a]
	ldr ip, [r0, #0x60]
	mov r2, #0x10
	cmp r1, #0
	ldr r1, [r0, #0x18]
	moveq r2, #0
	add r1, r1, ip
	mov r4, #0xf
	sub lr, r1, r2
	mov r3, #1
	arm_func_end FUN_0201e470
_0201E49C:
	ldrh r1, [r0, #0x68]
	tst r1, r3, lsl r4
	ldrne r2, [lr, #-4]!
	addne r1, r0, r4, lsl #2
	strne r2, [r1, #0x1c]
	subs r4, r4, #1
	bpl _0201E49C
	ldr r1, [r0, #0x18]
	add r1, r1, ip
	str r1, [r0, #0x14]
	ldr r0, [r0, #0x54]
	pop {r4, pc}

	arm_func_start FUN_0201e4cc
FUN_0201e4cc: ; 0x0201E4CC
	push {r4, r5, r6, lr}
	ldr r1, [r1, #4]
	mov r6, r0
	ldrb r0, [r1]
	ands r4, r0, #0x40
	movne r2, #1
	moveq r2, #0
	strb r2, [r6, #0x6b]
	tst r0, #0x20
	movne r2, #1
	moveq r2, #0
	ands r5, r0, #0x80
	movne r0, #1
	moveq r0, #0
	strb r0, [r6, #0x6c]
	strb r2, [r6, #0x6a]
	ldrb r2, [r1, #1]
	add r0, r1, #2
	add r1, r6, #0x60
	lsl r2, r2, #4
	strh r2, [r6, #0x68]
	ldrh r2, [r6, #0x68]
	orr r2, r2, #0x4000
	strh r2, [r6, #0x68]
	bl FUN_0201c9ec
	cmp r4, #0
	beq _0201E540
	add r1, r6, #0x64
	bl FUN_0201c9ec
	arm_func_end FUN_0201e4cc
_0201E540:
	cmp r4, #0
	beq _0201E560
	cmp r5, #0
	ldrne r0, [r6, #0x38]
	strne r0, [r6, #0x18]
	ldreq r0, [r6, #0x48]
	streq r0, [r6, #0x18]
	pop {r4, r5, r6, pc}
_0201E560:
	ldr r0, [r6, #0x14]
	str r0, [r6, #0x18]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0201e56c
FUN_0201e56c: ; 0x0201E56C
	ldr r2, _0201E584 ; =FUN_02086768
	ldr r1, _0201E588 ; =FUN_02086768
	str r2, [r0, #0xc]
	str r1, [r0, #0x10]
	mov r0, #1
	bx lr
	.align 2, 0_0201E584: .word FUN_02086768
_0201E588: .word FUN_02086768
	arm_func_end FUN_0201e56c

	arm_func_start FUN_0201e58c
FUN_0201e58c: ; 0x0201E58C
	push {r3, r4, r5, lr}
	ldrb r5, [r0], #2
	add r4, sp, #0
	mov r1, r4
	bl FUN_0201c9ec
	tst r5, #0x40
	popeq {r3, r4, r5, pc}
	mov r1, r4
	bl FUN_0201c9ec
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0201e58c

	arm_func_start FUN_0201e5b4
FUN_0201e5b4: ; 0x0201E5B4
	ldr r4, [r0, #0x2c]
	ldr r5, [r0, #0x30]
	ldr r6, [r0, #0x34]
	ldr r7, [r0, #0x38]
	ldr r8, [r0, #0x3c]
	ldr sb, [r0, #0x40]
	ldr sl, [r0, #0x44]
	ldr fp, [r0, #0x48]
	ldr sp, [r0, #0x5c]
	ldr ip, [r0, #0x64]
	sub sp, sp, ip
	bx r2
	arm_func_end FUN_0201e5b4

	arm_func_start FUN_0201e5e4
FUN_0201e5e4: ; 0x0201E5E4
	mov ip, sp
	sub sp, sp, #0x70
	str r4, [sp, #0x2c]
	str r5, [sp, #0x30]
	str r6, [sp, #0x34]
	str r7, [sp, #0x38]
	str r8, [sp, #0x3c]
	str sb, [sp, #0x40]
	str sl, [sp, #0x44]
	str fp, [sp, #0x48]
	str ip, [sp, #0x14]
	str ip, [sp, #0x5c]
	str lr, [sp, #0x10]
	str r0, [sp]
	str r1, [sp, #4]
	str r2, [sp, #8]
	mov r0, sp
	b _0201DC04
	arm_func_end FUN_0201e5e4

	arm_func_start FUN_0201e62c
FUN_0201e62c: ; 0x0201E62C
	mov ip, sp
	sub sp, sp, #0x70
	str r4, [sp, #0x2c]
	str r5, [sp, #0x30]
	str r6, [sp, #0x34]
	str r7, [sp, #0x38]
	str r8, [sp, #0x3c]
	str sb, [sp, #0x40]
	str sl, [sp, #0x44]
	str fp, [sp, #0x48]
	str ip, [sp, #0x14]
	str ip, [sp, #0x5c]
	str lr, [sp, #0x10]
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	str ip, [sp, #8]
	mov r0, sp
	b _0201DC04
	arm_func_end FUN_0201e62c

	arm_func_start FUN_0201e678
FUN_0201e678: ; 0x0201E678
	push {r4, lr}
	eors ip, r1, r3
	eormi r3, r3, #0x80000000
	bmi _0201E9B8
	arm_func_end FUN_0201e678
_0201E688:
	subs ip, r0, r2
	sbcs lr, r1, r3
	bhs _0201E6A4
	adds r2, r2, ip
	adc r3, r3, lr
	subs r0, r0, ip
	sbc r1, r1, lr
_0201E6A4:
	mov lr, #0x80000000
	lsr ip, r1, #0x14
	orr r1, lr, r1, lsl #11
	orr r1, r1, r0, lsr #21
	lsl r0, r0, #0xb
	lsls r4, ip, #0x15
	cmnne r4, #0x200000
	beq _0201E7A0
	lsr r4, r3, #0x14
	orr r3, lr, r3, lsl #11
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls lr, r4, #0x15
	beq _0201E7E8
_0201E6DC:
	subs r4, ip, r4
	beq _0201E734
	cmp r4, #0x20
	ble _0201E718
	cmp r4, #0x38
	movge r4, #0x3f
	sub r4, r4, #0x20
	rsb lr, r4, #0x20
	orrs lr, r2, r3, lsl lr
	lsr r2, r3, r4
	orrne r2, r2, #1
	adds r0, r0, r2
	adcs r1, r1, #0
	blo _0201E75C
	b _0201E740
_0201E718:
	rsb lr, r4, #0x20
	lsls lr, r2, lr
	rsb lr, r4, #0x20
	lsr r2, r2, r4
	orr r2, r2, r3, lsl lr
	lsr r3, r3, r4
	orrne r2, r2, #1
_0201E734:
	adds r0, r0, r2
	adcs r1, r1, r3
	blo _0201E75C
_0201E740:
	add ip, ip, #1
	and r4, r0, #1
	rrxs r1, r1
	orr r0, r4, r0, rrx
	lsl lr, ip, #0x15
	cmn lr, #0x200000
	beq _0201E96C
_0201E75C:
	lsls r2, r0, #0x15
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	lsr r1, r1, #0xc
	orr r1, r1, ip, lsl #20
	tst r2, #0x80000000
	popeq {r4, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, lr}
	bxeq lr
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, lr}
	bx lr
_0201E7A0:
	cmp ip, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	bics ip, ip, #0x800
	beq _0201E80C
	orrs r4, r0, r1, lsl #1
	bne _0201E948
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r4, r4, #0x15
	beq _0201E934
	cmn r4, #0x200000
	bne _0201E934
	orrs r4, r2, r3, lsl #1
	beq _0201E934
	b _0201E948
_0201E7E8:
	cmp r4, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	bic ip, ip, #0x800
	bics r4, r4, #0x800
	beq _0201E878
	orrs r4, r2, r3, lsl #1
	bne _0201E948
	b _0201E934
_0201E80C:
	orrs r4, r0, r1, lsl #1
	beq _0201E84C
	mov ip, #1
	bic r1, r1, #0x80000000
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r4, r4, #0x15
	cmnne r4, #0x200000
	lsr r4, r4, #0x15
	orr r4, r4, lr, lsr #20
	beq _0201E7E8
	orr r3, r3, #0x80000000
	orr ip, ip, lr, lsr #20
	b _0201E6DC
_0201E84C:
	lsr ip, r3, #0x14
	lsl r1, r3, #0xb
	orr r1, r1, r2, lsr #21
	lsl r0, r2, #0xb
	lsls r4, ip, #0x15
	beq _0201E900
	cmn r4, #0x200000
	bne _0201E900
	orrs r4, r0, r1, lsl #1
	beq _0201E934
	b _0201E94C
_0201E878:
	orrs r4, r2, r3, lsl #1
	beq _0201E910
	mov r4, #1
	bic r3, r3, #0x80000000
	cmp r1, #0
	bpl _0201E89C
	orr ip, ip, lr, lsr #20
	orr r4, r4, lr, lsr #20
	b _0201E6DC
_0201E89C:
	adds r0, r0, r2
	adcs r1, r1, r3
	blo _0201E8BC
	add ip, ip, #1
	and r4, r0, #1
	rrxs r1, r1
	rrx r0, r0
	orr r0, r0, r4
_0201E8BC:
	cmp r1, #0
	subsge ip, ip, #1
	lsls r2, r0, #0x15
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	popeq {r4, lr}
	bxeq lr
	tst r2, #0x80000000
	popeq {r4, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, lr}
	bxeq lr
_0201E900:
	mov r1, r3
	mov r0, r2
	pop {r4, lr}
	bx lr
_0201E910:
	cmp r1, #0
	subsge ip, ip, #1
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	pop {r4, lr}
	bx lr
_0201E934:
	ldr r1, _0201E98C ; =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, lr}
	bx lr
_0201E948:
	mov r1, r3
_0201E94C:
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, lr}
	bx lr

	arm_func_start FUN_0201e95c
FUN_0201e95c: ; 0x0201E95C
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, lr}
	bx lr
	arm_func_end FUN_0201e95c
_0201E96C:
	cmp ip, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	ldr r1, _0201E98C ; =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, lr}
	bx lr
	.align 2, 0_0201E98C: .word 0x7FF00000

	arm_func_start FUN_0201e990
FUN_0201e990: ; 0x0201E990
	eor r1, r1, r3
	eor r3, r1, r3
	eor r1, r1, r3
	eor r0, r0, r2
	eor r2, r0, r2
	eor r0, r0, r2
	arm_func_end FUN_0201e990

	arm_func_start FUN_0201e9a8
FUN_0201e9a8: ; 0x0201E9A8
	push {r4, lr}
	eors ip, r1, r3
	eormi r3, r3, #0x80000000
	bmi _0201E688
	arm_func_end FUN_0201e9a8
_0201E9B8:
	subs ip, r0, r2
	sbcs lr, r1, r3
	bhs _0201E9D8
	eor lr, lr, #0x80000000
	adds r2, r2, ip
	adc r3, r3, lr
	subs r0, r0, ip
	sbc r1, r1, lr
_0201E9D8:
	mov lr, #0x80000000
	lsr ip, r1, #0x14
	orr r1, lr, r1, lsl #11
	orr r1, r1, r0, lsr #21
	lsl r0, r0, #0xb
	lsls r4, ip, #0x15
	cmnne r4, #0x200000
	beq _0201EBDC
	lsr r4, r3, #0x14
	orr r3, lr, r3, lsl #11
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls lr, r4, #0x15
	beq _0201EC24
_0201EA10:
	subs r4, ip, r4
	beq _0201EAB8
	cmp r4, #0x20
	ble _0201EA4C
	cmp r4, #0x38
	movge r4, #0x3f
	sub r4, r4, #0x20
	rsb lr, r4, #0x20
	orrs lr, r2, r3, lsl lr
	lsr r2, r3, r4
	orrne r2, r2, #1
	subs r0, r0, r2
	sbcs r1, r1, #0
	bmi _0201EA74
	b _0201EB64
_0201EA4C:
	rsb lr, r4, #0x20
	lsls lr, r2, lr
	rsb lr, r4, #0x20
	lsr r2, r2, r4
	orr r2, r2, r3, lsl lr
	lsr r3, r3, r4
	orrne r2, r2, #1
	subs r0, r0, r2
	sbcs r1, r1, r3
	bpl _0201EB64
_0201EA74:
	lsls r2, r0, #0x15
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	lsr r1, r1, #0xc
	orr r1, r1, ip, lsl #20
	tst r2, #0x80000000
	popeq {r4, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, lr}
	bxeq lr
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, lr}
	bx lr
_0201EAB8:
	subs r0, r0, r2
	sbc r1, r1, r3
	orrs lr, r1, r0
	beq _0201ED48
	lsl lr, ip, #0x14
	and lr, lr, #0x80000000
	bic ip, ip, #0x800
	cmp r1, #0
	bmi _0201EB40
	bne _0201EAF0
	sub ip, ip, #0x20
	movs r1, r0
	mov r0, #0
	bmi _0201EB0C
_0201EAF0:
	clz r4, r1
	lsls r1, r1, r4
	rsb r4, r4, #0x20
	orr r1, r1, r0, lsr r4
	rsb r4, r4, #0x20
	lsl r0, r0, r4
	sub ip, ip, r4
_0201EB0C:
	cmp ip, #0
	bgt _0201EB48
	rsb ip, ip, #0xc
	cmp ip, #0x20
	movge r0, r1
	movge r1, #0
	subge ip, ip, #0x20
	rsb r4, ip, #0x20
	lsr r0, r0, ip
	orr r0, r0, r1, lsl r4
	orr r1, lr, r1, lsr ip
	pop {r4, lr}
	bx lr
_0201EB40:
	cmp r1, #0
	subsge ip, ip, #1
_0201EB48:
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	pop {r4, lr}
	bx lr
_0201EB64:
	lsl lr, ip, #0x14
	and lr, lr, #0x80000000
	bic ip, ip, #0x800
	cmp r1, #0
	bne _0201EB88
	sub ip, ip, #0x20
	movs r1, r0
	mov r0, #0
	bmi _0201EBA4
_0201EB88:
	clz r4, r1
	lsls r1, r1, r4
	rsb r4, r4, #0x20
	orr r1, r1, r0, lsr r4
	rsb r4, r4, #0x20
	lsl r0, r0, r4
	sub ip, ip, r4
_0201EBA4:
	cmp ip, #0
	orrgt ip, ip, lr, lsr #20
	bgt _0201EA74
	rsb ip, ip, #0xc
	cmp ip, #0x20
	movge r0, r1
	movge r1, #0
	subge ip, ip, #0x20
	rsb r4, ip, #0x20
	lsr r0, r0, ip
	orr r0, r0, r1, lsl r4
	orr r1, lr, r1, lsr ip
	pop {r4, lr}
	bx lr
_0201EBDC:
	cmp ip, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	bics ip, ip, #0x800
	beq _0201EC48
	orrs r4, r0, r1, lsl #1
	bne _0201ED24
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r4, r4, #0x15
	beq _0201ED10
	cmn r4, #0x200000
	bne _0201ED10
	orrs r4, r2, r3, lsl #1
	beq _0201ED38
	b _0201ED24
_0201EC24:
	cmp r4, #0x800
	movge lr, #0x80000000
	movlt lr, #0
	bic ip, ip, #0x800
	bics r4, r4, #0x800
	beq _0201ECC0
	orrs r4, r2, r3, lsl #1
	bne _0201ED24
	b _0201ED10
_0201EC48:
	orrs r4, r0, r1, lsl #1
	beq _0201EC88
	mov ip, #1
	bic r1, r1, #0x80000000
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r4, r4, #0x15
	cmnne r4, #0x200000
	lsr r4, r4, #0x15
	orr r4, r4, lr, lsr #20
	beq _0201EC24
	orr r3, r3, #0x80000000
	orr ip, ip, lr, lsr #20
	b _0201EA10
_0201EC88:
	lsr ip, r3, #0x14
	lsl r1, r3, #0xb
	orr r1, r1, r2, lsr #21
	lsl r0, r2, #0xb
	lsls r4, ip, #0x15
	beq _0201ECB4
	cmn r4, #0x200000
	bne _0201ECDC
	orrs r4, r0, r1, lsl #1
	bne _0201ED28
	b _0201ED10
_0201ECB4:
	orrs r4, r0, r1, lsl #1
	beq _0201ED48
	b _0201ECDC
_0201ECC0:
	orrs r4, r2, r3, lsl #1
	beq _0201ECEC
	mov r4, #1
	bic r3, r3, #0x80000000
	orr ip, ip, lr, lsr #20
	orr r4, r4, lr, lsr #20
	b _0201EA10
_0201ECDC:
	mov r1, r3
	mov r0, r2
	pop {r4, lr}
	bx lr
_0201ECEC:
	cmp r1, #0
	subsge ip, ip, #1
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	pop {r4, lr}
	bx lr
_0201ED10:
	ldr r1, _0201ED58 ; =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, lr}
	bx lr
_0201ED24:
	mov r1, r3
_0201ED28:
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, lr}
	bx lr
_0201ED38:
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, lr}
	bx lr
_0201ED48:
	mov r1, #0
	mov r0, #0
	pop {r4, lr}
	bx lr
	.align 2, 0_0201ED58: .word 0x7FF00000

	arm_func_start FUN_0201ed5c
FUN_0201ed5c: ; 0x0201ED5C
	push {r4, r5, r6, r7, lr}
	eor lr, r1, r3
	and lr, lr, #0x80000000
	lsr ip, r1, #0x14
	lsl r1, r1, #0xb
	orr r1, r1, r0, lsr #21
	lsl r0, r0, #0xb
	lsls r6, ip, #0x15
	cmnne r6, #0x200000
	beq _0201EE64
	orr r1, r1, #0x80000000
	bic ip, ip, #0x800
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r5, r4, #0x15
	cmnne r5, #0x200000
	beq _0201EEAC
	orr r3, r3, #0x80000000
	bic r4, r4, #0x800
	arm_func_end FUN_0201ed5c
_0201EDB0:
	add ip, r4, ip
	umull r5, r4, r0, r2
	umull r7, r6, r0, r3
	adds r4, r7, r4
	adc r6, r6, #0
	umull r7, r0, r1, r2
	adds r4, r7, r4
	adcs r0, r0, r6
	umull r7, r2, r1, r3
	adc r1, r2, #0
	adds r0, r0, r7
	adc r1, r1, #0
	orrs r4, r4, r5
	orrne r0, r0, #1
	cmp r1, #0
	blt _0201EDFC
	sub ip, ip, #1
	adds r0, r0, r0
	adc r1, r1, r1
_0201EDFC:
	add ip, ip, #2
	subs ip, ip, #0x400
	bmi _0201EF98
	beq _0201EF98
	lsl r6, ip, #0x14
	cmn r6, #0x100000
	bmi _0201F098
	lsls r2, r0, #0x15
	lsr r0, r0, #0xb
	orr r0, r0, r1, lsl #21
	add r1, r1, r1
	orr r1, lr, r1, lsr #12
	orr r1, r1, ip, lsl #20
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	tst r2, #0x80000000
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_0201EE64:
	bics ip, ip, #0x800
	beq _0201EEC0
	orrs r6, r0, r1, lsl #1
	bne _0201F04C
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r5, r4, #0x15
	beq _0201EEA0
	cmn r5, #0x200000
	bne _0201F038
	orrs r5, r2, r3, lsl #1
	beq _0201F038
	b _0201F04C
_0201EEA0:
	orrs r5, r3, r2
	beq _0201F060
	b _0201F038
_0201EEAC:
	bics r4, r4, #0x800
	beq _0201EF54
	orrs r6, r2, r3, lsl #1
	bne _0201F04C
	b _0201F038
_0201EEC0:
	orrs r6, r0, r1, lsl #1
	beq _0201EF28
	mov ip, #1
	cmp r1, #0
	bne _0201EEE4
	sub ip, ip, #0x20
	movs r1, r0
	mov r0, #0
	bmi _0201EF00
_0201EEE4:
	clz r6, r1
	lsls r1, r1, r6
	rsb r6, r6, #0x20
	orr r1, r1, r0, lsr r6
	rsb r6, r6, #0x20
	lsl r0, r0, r6
	sub ip, ip, r6
_0201EF00:
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r5, r4, #0x15
	cmnne r5, #0x200000
	beq _0201EEAC
	orr r3, r3, #0x80000000
	bic r4, r4, #0x800
	b _0201EDB0
_0201EF28:
	lsr r4, r3, #0x14
	lsl r3, r3, #0xb
	orr r3, r3, r2, lsr #21
	lsl r2, r2, #0xb
	lsls r5, r4, #0x15
	beq _0201F0AC
	cmn r5, #0x200000
	bne _0201F0AC
	orrs r6, r2, r3, lsl #1
	beq _0201F060
	b _0201F04C
_0201EF54:
	orrs r5, r2, r3, lsl #1
	beq _0201F0AC
	mov r4, #1
	cmp r3, #0
	bne _0201EF78
	sub r4, r4, #0x20
	movs r3, r2
	mov r2, #0
	bmi _0201EDB0
_0201EF78:
	clz r6, r3
	lsls r3, r3, r6
	rsb r6, r6, #0x20
	orr r3, r3, r2, lsr r6
	rsb r6, r6, #0x20
	lsl r2, r2, r6
	sub r4, r4, r6
	b _0201EDB0
_0201EF98:
	cmn ip, #0x34
	beq _0201F030
	bmi _0201F088
	mov r2, r1
	mov r3, r0
	add r4, ip, #0x34
	cmp r4, #0x20
	movge r2, r3
	movge r3, #0
	subge r4, r4, #0x20
	rsb r5, r4, #0x20
	lsl r2, r2, r4
	orr r2, r2, r3, lsr r5
	lsls r3, r3, r4
	orrne r2, r2, #1
	rsb ip, ip, #0xc
	cmp ip, #0x20
	movge r0, r1
	movge r1, #0
	subge ip, ip, #0x20
	rsb r4, ip, #0x20
	lsr r0, r0, ip
	orr r0, r0, r1, lsl r4
	orr r1, lr, r1, lsr ip
	cmp r2, #0
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	tst r2, #0x80000000
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	lsls r2, r2, #1
	andseq r2, r0, #1
	popeq {r4, r5, r6, r7, lr}
	bxeq lr
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_0201F030:
	orr r0, r0, r1, lsl #1
	b _0201F070
_0201F038:
	ldr r1, _0201F0BC ; =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_0201F04C:
	mov r1, r3
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, r5, r6, r7, lr}
	bx lr
_0201F060:
	mvn r0, #0
	bic r1, r0, #0x80000000
	pop {r4, r5, r6, r7, lr}
	bx lr
_0201F070:
	movs r2, r0
	mov r1, lr
	mov r0, #0
	addne r0, r0, #1
	pop {r4, r5, r6, r7, lr}
	bx lr
_0201F088:
	mov r1, lr
	mov r0, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_0201F098:
	ldr r1, _0201F0BC ; =0x7FF00000
	orr r1, lr, r1
	mov r0, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
_0201F0AC:
	mov r1, lr
	mov r0, #0
	pop {r4, r5, r6, r7, lr}
	bx lr
	.align 2, 0_0201F0BC: .word 0x7FF00000

	arm_func_start FUN_0201f0c0
FUN_0201f0c0: ; 0x0201F0C0
	and r2, r1, #0x80000000
	lsr ip, r1, #0x14
	bics ip, ip, #0x800
	beq _0201F138
	lsl r3, ip, #0x15
	cmn r3, #0x200000
	bhs _0201F11C
	subs ip, ip, #0x380
	bls _0201F148
	cmp ip, #0xff
	bge _0201F1B8
	lsl r1, r1, #0xc
	orr r3, r2, r1, lsr #9
	orr r3, r3, r0, lsr #29
	lsls r1, r0, #3
	orr r0, r3, ip, lsl #23
	bxeq lr
	tst r1, #0x80000000
	bxeq lr
	lsls r1, r1, #1
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
	arm_func_end FUN_0201f0c0
_0201F11C:
	orrs r3, r0, r1, lsl #12
	bne _0201F130
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_0201F130:
	mvn r0, #0x80000000
	bx lr
_0201F138:
	orrs r3, r0, r1, lsl #12
	bne _0201F1B0
	mov r0, r2
	bx lr
_0201F148:
	cmn ip, #0x17
	beq _0201F19C
	bmi _0201F1B0
	lsl r1, r1, #0xb
	orr r1, r1, #0x80000000
	lsr r3, r1, #8
	orr r3, r3, r0, lsr #29
	rsb ip, ip, #1
	lsls r1, r0, #3
	orr r0, r2, r3, lsr ip
	rsb ip, ip, #0x20
	lsl r3, r3, ip
	orrne r3, r3, #1
	movs r1, r3
	bxeq lr
	tst r1, #0x80000000
	bxeq lr
	lsls r1, r1, #1
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_0201F19C:
	orr r0, r0, r1, lsl #12
	movs r1, r0
	mov r0, r2
	addne r0, r0, #1
	bx lr
_0201F1B0:
	mov r0, r2
	bx lr
_0201F1B8:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr

	arm_func_start FUN_0201f1c4
FUN_0201f1c4: ; 0x0201F1C4
	ands r2, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r0, #0
	mov r1, #0
	bxeq lr
	mov r3, #0x400
	add r3, r3, #0x1e
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
	movs r1, r0
	lsl r0, r1, #0x15
	add r1, r1, r1
	orr r1, r2, r1, lsr #12
	orr r1, r1, r3, lsl #20
	bx lr
	arm_func_end FUN_0201f1c4

	arm_func_start FUN_0201f204
FUN_0201f204: ; 0x0201F204
	cmp r0, #0
	mov r1, #0
	bxeq lr
	mov r3, #0x400
	add r3, r3, #0x1e
	bmi _0201F228
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
	arm_func_end FUN_0201f204
_0201F228:
	mov r1, r0
	lsl r0, r1, #0x15
	add r1, r1, r1
	lsr r1, r1, #0xc
	orr r1, r1, r3, lsl #20
	bx lr

	arm_func_start FUN_0201f240
FUN_0201f240: ; 0x0201F240
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _0201F2B4
	cmn ip, r3, lsl #1
	bhs _0201F2C8
	arm_func_end FUN_0201f240
_0201F254:
	orrs ip, r3, r1
	bmi _0201F284
	cmp r1, r3
	cmpeq r0, r2
	movhs r0, #1
	movlo r0, #0
	bx lr
_0201F270:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_0201F284:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #1
	mrs ip, apsr
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bxeq lr
	cmp r3, r1
	cmpeq r2, r0
	movhs r0, #1
	movlo r0, #0
	bx lr
_0201F2B4:
	bne _0201F270
	cmp r0, #0
	bhi _0201F270
	cmn ip, r3, lsl #1
	blo _0201F254
_0201F2C8:
	bne _0201F270
	cmp r2, #0
	bhi _0201F270
	b _0201F254

	arm_func_start FUN_0201f2d8
FUN_0201f2d8: ; 0x0201F2D8
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _0201F34C
	cmn ip, r3, lsl #1
	bhs _0201F360
	arm_func_end FUN_0201f2d8
_0201F2EC:
	orrs ip, r3, r1
	bmi _0201F31C
	cmp r1, r3
	cmpeq r0, r2
	movhi r0, #1
	movls r0, #0
	bx lr
_0201F308:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_0201F31C:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bxeq lr
	cmp r3, r1
	cmpeq r2, r0
	movhi r0, #1
	movls r0, #0
	bx lr
_0201F34C:
	bne _0201F308
	cmp r0, #0
	bhi _0201F308
	cmn ip, r3, lsl #1
	blo _0201F2EC
_0201F360:
	bne _0201F308
	cmp r2, #0
	bhi _0201F308
	b _0201F2EC

	arm_func_start FUN_0201f370
FUN_0201f370: ; 0x0201F370
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _0201F3F0
	cmn ip, r3, lsl #1
	bhs _0201F404
	arm_func_end FUN_0201f370
_0201F384:
	orrs ip, r3, r1
	bmi _0201F3B8
	cmp r1, r3
	cmpeq r0, r2
	movls r0, #1
	movhi r0, #0
	bx lr
_0201F3A0:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x40000000
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_0201F3B8:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #1
	bne _0201F3DC
	mrs ip, apsr
	bic ip, ip, #0x20000000
	orr ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bxeq lr
_0201F3DC:
	cmp r3, r1
	cmpeq r2, r0
	movls r0, #1
	movhi r0, #0
	bx lr
_0201F3F0:
	bne _0201F3A0
	cmp r0, #0
	bhi _0201F3A0
	cmn ip, r3, lsl #1
	blo _0201F384
_0201F404:
	bne _0201F3A0
	cmp r2, #0
	bhi _0201F3A0
	b _0201F384

	arm_func_start FUN_0201f414
FUN_0201f414: ; 0x0201F414
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _0201F48C
	cmn ip, r3, lsl #1
	bhs _0201F4A0
	arm_func_end FUN_0201f414
_0201F428:
	orrs ip, r3, r1
	bmi _0201F458
	cmp r1, r3
	cmpeq r0, r2
	movlo r0, #1
	movhs r0, #0
	bx lr
_0201F444:
	mov r0, #0
	mrs ip, apsr
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
_0201F458:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #0
	bne _0201F478
	mrs ip, apsr
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bxeq lr
_0201F478:
	cmp r3, r1
	cmpeq r2, r0
	movlo r0, #1
	movhs r0, #0
	bx lr
_0201F48C:
	bne _0201F444
	cmp r0, #0
	bhi _0201F444
	cmn ip, r3, lsl #1
	blo _0201F428
_0201F4A0:
	bne _0201F444
	cmp r2, #0
	bhi _0201F444
	b _0201F428

	arm_func_start FUN_0201f4b0
FUN_0201f4b0: ; 0x0201F4B0
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _0201F518
	cmn ip, r3, lsl #1
	bhs _0201F52C
	arm_func_end FUN_0201f4b0
_0201F4C4:
	orrs ip, r3, r1
	bmi _0201F4F4
	cmp r1, r3
	cmpeq r0, r2
	moveq r0, #1
	movne r0, #0
	bx lr
_0201F4E0:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_0201F4F4:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #1
	bxeq lr
	cmp r3, r1
	cmpeq r2, r0
	moveq r0, #1
	movne r0, #0
	bx lr
_0201F518:
	bne _0201F4E0
	cmp r0, #0
	bhi _0201F4E0
	cmn ip, r3, lsl #1
	blo _0201F4C4
_0201F52C:
	bne _0201F4E0
	cmp r2, #0
	bhi _0201F4E0
	b _0201F4C4

	arm_func_start FUN_0201f53c
FUN_0201f53c: ; 0x0201F53C
	mov ip, #0x200000
	cmn ip, r1, lsl #1
	bhs _0201F5A4
	cmn ip, r3, lsl #1
	bhs _0201F5B8
	arm_func_end FUN_0201f53c
_0201F550:
	orrs ip, r3, r1
	bmi _0201F580
	cmp r1, r3
	cmpeq r0, r2
	movne r0, #1
	moveq r0, #0
	bx lr
_0201F56C:
	mov r0, #1
	mrs ip, apsr
	bic ip, ip, #0x40000000
	msr apsr_nzcvq, ip
	bx lr
_0201F580:
	orr ip, r0, ip, lsl #1
	orrs ip, ip, r2
	moveq r0, #0
	bxeq lr
	cmp r3, r1
	cmpeq r2, r0
	movne r0, #1
	moveq r0, #0
	bx lr
_0201F5A4:
	bne _0201F56C
	cmp r0, #0
	bhi _0201F56C
	cmn ip, r3, lsl #1
	blo _0201F550
_0201F5B8:
	bne _0201F56C
	cmp r2, #0
	bhi _0201F56C
	b _0201F550

	arm_func_start FUN_0201f5c8
FUN_0201f5c8: ; 0x0201F5C8
	mov r3, #0xff000000
	cmp r3, r0, lsl #1
	cmphs r3, r1, lsl #1
	blo _0201F610
	cmp r0, #0
	bicmi r0, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r1, #0
	bicmi r1, r1, #0x80000000
	rsbmi r1, r1, #0
	cmp r0, r1
	movgt r0, #1
	movle r0, #0
	mrs ip, apsr
	bicle ip, ip, #0x20000000
	orrgt ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
	arm_func_end FUN_0201f5c8
_0201F610:
	mov r0, #0
	mrs ip, apsr
	bic ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr

	arm_func_start FUN_0201f624
FUN_0201f624: ; 0x0201F624
	mov r3, #0xff000000
	cmp r3, r0, lsl #1
	cmphs r3, r1, lsl #1
	blo _0201F66C
	cmp r0, #0
	bicmi r0, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r1, #0
	bicmi r1, r1, #0x80000000
	rsbmi r1, r1, #0
	cmp r0, r1
	movlt r0, #1
	movge r0, #0
	mrs ip, apsr
	orrge ip, ip, #0x20000000
	biclt ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr
	arm_func_end FUN_0201f624
_0201F66C:
	mov r0, #0
	mrs ip, apsr
	orr ip, ip, #0x20000000
	msr apsr_nzcvq, ip
	bx lr

	arm_func_start FUN_0201f680
FUN_0201f680: ; 0x0201F680
	and r2, r0, #0x80000000
	lsr ip, r0, #0x17
	lsl r3, r0, #9
	ands ip, ip, #0xff
	beq _0201F6B0
	cmp ip, #0xff
	beq _0201F6DC
	arm_func_end FUN_0201f680
_0201F69C:
	add ip, ip, #0x380
	lsl r0, r3, #0x14
	orr r1, r2, r3, lsr #12
	orr r1, r1, ip, lsl #20
	bx lr
_0201F6B0:
	cmp r3, #0
	bne _0201F6C4
	mov r1, r2
	mov r0, #0
	bx lr
_0201F6C4:
	lsr r3, r3, #1
	clz ip, r3
	lsls r3, r3, ip
	rsb ip, ip, #1
	add r3, r3, r3
	b _0201F69C
_0201F6DC:
	cmp r3, #0
	bhi _0201F6F4
	ldr r1, _0201F700 ; =0x7FF00000
	orr r1, r1, r2
	mov r0, #0
	bx lr
_0201F6F4:
	mvn r0, #0
	bic r1, r0, #0x80000000
	bx lr
	.align 2, 0_0201F700: .word 0x7FF00000

	arm_func_start FUN_0201f704
FUN_0201f704: ; 0x0201F704
	ands r2, r0, #0x80000000
	rsbmi r0, r0, #0
	cmp r0, #0
	bxeq lr
	clz r3, r0
	lsls r0, r0, r3
	rsb r3, r3, #0x9e
	ands r1, r0, #0xff
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bxeq lr
	tst r1, #0x80
	bxeq lr
	ands r3, r1, #0x7f
	andseq r3, r0, #1
	addne r0, r0, #1
	bx lr
	arm_func_end FUN_0201f704

	arm_func_start FUN_0201f74c
FUN_0201f74c: ; 0x0201F74C
	cmp r0, #0
	bxeq lr
	mov r3, #0x9e
	bmi _0201F768
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
	arm_func_end FUN_0201f74c
_0201F768:
	ands r2, r0, #0xff
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	bxeq lr
	tst r2, #0x80
	bxeq lr
	ands r1, r2, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_0201F794:
	.byte 0xF0, 0x58, 0x2D, 0xE9, 0x01, 0x40, 0xA0, 0xE1, 0x01, 0x40, 0x84, 0xE3
	.byte 0x03, 0x00, 0x00, 0xEA

	arm_func_start FUN_0201f7a4
FUN_0201f7a4: ; 0x0201F7A4
	push {r4, r5, r6, r7, fp, ip, lr}
	eor r4, r1, r3
	asr r4, r4, #1
	lsl r4, r4, #1
	arm_func_end FUN_0201f7a4

	arm_func_start LAB_0201f7b4
LAB_0201f7b4: ; 0x0201F7B4
	orrs r5, r3, r2
	bne _0201F7C4
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
	arm_func_end LAB_0201f7b4
_0201F7C4:
	lsr r5, r0, #0x1f
	add r5, r5, r1
	lsr r6, r2, #0x1f
	add r6, r6, r3
	orrs r6, r5, r6
	bne _0201F7F8
	mov r1, r2
	bl FUN_0201f9bc
	ands r4, r4, #1
	movne r0, r1
	asr r1, r0, #0x1f
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_0201F7F8:
	cmp r1, #0
	bge _0201F808
	rsbs r0, r0, #0
	rsc r1, r1, #0
_0201F808:
	cmp r3, #0
	bge _0201F818
	rsbs r2, r2, #0
	rsc r3, r3, #0
_0201F818:
	orrs r5, r1, r0
	beq _0201F93C
	mov r5, #0
	mov r6, #1
	cmp r3, #0
	bmi _0201F844
_0201F830:
	add r5, r5, #1
	adds r2, r2, r2
	adcs r3, r3, r3
	bpl _0201F830
	add r6, r6, r5
_0201F844:
	cmp r1, #0
	blt _0201F864
_0201F84C:
	cmp r6, #1
	beq _0201F864
	sub r6, r6, #1
	adds r0, r0, r0
	adcs r1, r1, r1
	bpl _0201F84C
_0201F864:
	mov r7, #0
	mov ip, #0
	mov fp, #0
	b _0201F88C
_0201F874:
	orr ip, ip, #1
	subs r6, r6, #1
	beq _0201F8E4
	adds r0, r0, r0
	adcs r1, r1, r1
	adcs r7, r7, r7
_0201F88C:
	subs r0, r0, r2
	sbcs r1, r1, r3
	sbcs r7, r7, #0
	adds ip, ip, ip
	adc fp, fp, fp
	cmp r7, #0
	bge _0201F874
_0201F8A8:
	subs r6, r6, #1
	beq _0201F8DC
	adds r0, r0, r0
	adcs r1, r1, r1
	adc r7, r7, r7
	adds r0, r0, r2
	adcs r1, r1, r3
	adc r7, r7, #0
	adds ip, ip, ip
	adc fp, fp, fp
	cmp r7, #0
	bge _0201F874
	b _0201F8A8
_0201F8DC:
	adds r0, r0, r2
	adc r1, r1, r3
_0201F8E4:
	ands r7, r4, #1
	moveq r0, ip
	moveq r1, fp
	beq _0201F91C
	subs r7, r5, #0x20
	lsrge r0, r1, r7
	bge _0201F940
	rsb r7, r5, #0x20
	lsr r0, r0, r5
	orr r0, r0, r1, lsl r7
	lsr r1, r1, r5
	b _0201F91C
_0201F914:
	.byte 0x31, 0x07, 0xA0, 0xE1, 0x00, 0x10, 0xA0, 0xE3
_0201F91C:
	cmp r4, #0
	blt _0201F92C
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_0201F92C:
	rsbs r0, r0, #0
	rsc r1, r1, #0
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_0201F93C:
	mov r0, #0
_0201F940:
	mov r1, #0
	cmp r4, #0
	blt _0201F92C
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr

	arm_func_start FUN_0201f954
FUN_0201f954: ; 0x0201F954
	push {r4, r5, r6, r7, fp, ip, lr}
	mov r4, #0
	b _0201F968
	arm_func_end FUN_0201f954

	arm_func_start FUN_0201f960
FUN_0201f960: ; 0x0201F960
	push {r4, r5, r6, r7, fp, ip, lr}
	mov r4, #1
	arm_func_end FUN_0201f960
_0201F968:
	orrs r5, r3, r2
	bne _0201F978
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr
_0201F978:
	orrs r5, r1, r3
	bne _0201F818
	mov r1, r2
	bl FUN_0201fbd0
	cmp r4, #0
	movne r0, r1
	mov r1, #0
	pop {r4, r5, r6, r7, fp, ip, lr}
	bx lr

	arm_func_start FUN_0201f99c
FUN_0201f99c: ; 0x0201F99C
	push {r4, r5, lr}
	umull r5, r4, r0, r2
	mla r4, r0, r3, r4
	mla r4, r2, r1, r4
	mov r1, r4
	mov r0, r5
	pop {r4, r5, lr}
	bx lr
	arm_func_end FUN_0201f99c

	arm_func_start FUN_0201f9bc
FUN_0201f9bc: ; 0x0201F9BC
	eor ip, r0, r1
	and ip, ip, #0x80000000
	cmp r0, #0
	rsblt r0, r0, #0
	addlt ip, ip, #1
	cmp r1, #0
	rsblt r1, r1, #0
	beq _0201FBB4
	cmp r0, r1
	movlo r1, r0
	movlo r0, #0
	blo _0201FBB4
	mov r2, #0x1c
	lsr r3, r0, #4
	cmp r1, r3, lsr #12
	suble r2, r2, #0x10
	lsrle r3, r3, #0x10
	cmp r1, r3, lsr #4
	suble r2, r2, #8
	lsrle r3, r3, #8
	cmp r1, r3
	suble r2, r2, #4
	lsrle r3, r3, #4
	lsl r0, r0, r2
	rsb r1, r1, #0
	adds r0, r0, r0
	add r2, r2, r2, lsl #1
	add pc, pc, r2, lsl #2
	mov r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	mov r1, r3
	arm_func_end FUN_0201f9bc
_0201FBB4:
	ands r3, ip, #0x80000000
	rsbne r0, r0, #0
	ands r3, ip, #1
	rsbne r1, r1, #0
	bx lr

	arm_func_start FUN_0201fbc8
FUN_0201fbc8: ; 0x0201FBC8
	cmp r1, #0
	bxeq lr
	arm_func_end FUN_0201fbc8

	arm_func_start FUN_0201fbd0
FUN_0201fbd0: ; 0x0201FBD0
	cmp r0, r1
	movlo r1, r0
	movlo r0, #0
	bxlo lr
	mov r2, #0x1c
	lsr r3, r0, #4
	cmp r1, r3, lsr #12
	suble r2, r2, #0x10
	lsrle r3, r3, #0x10
	cmp r1, r3, lsr #4
	suble r2, r2, #8
	lsrle r3, r3, #8
	cmp r1, r3
	suble r2, r2, #4
	lsrle r3, r3, #4
	lsl r0, r0, r2
	rsb r1, r1, #0
	adds r0, r0, r0
	add r2, r2, r2, lsl #1
	add pc, pc, r2, lsl #2
	arm_func_end FUN_0201fbd0

	arm_func_start FUN_0201fc20
FUN_0201fc20: ; 0x0201FC20
	mov r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	adcs r3, r1, r3, lsl #1
	sublo r3, r3, r1
	adcs r0, r0, r0
	mov r1, r3
	bx lr
	arm_func_end FUN_0201fc20

	arm_func_start FUN_0201fdac
FUN_0201fdac: ; 0x0201FDAC
	bic r1, r0, #0x80000000
	mov r2, #0x9e
	subs r2, r2, r1, lsr #23
	ble _0201FDD4
	lsl r1, r1, #8
	orr r1, r1, #0x80000000
	cmp r0, #0
	lsr r0, r1, r2
	rsbmi r0, r0, #0
	bx lr
	arm_func_end FUN_0201fdac
_0201FDD4:
	mvn r0, r0, asr #31
	add r0, r0, #0x80000000
	bx lr

	arm_func_start FUN_0201fde0
FUN_0201fde0: ; 0x0201FDE0
	tst r0, #0x80000000
	bne _0201FE04
	mov r1, #0x9e
	subs r1, r1, r0, lsr #23
	blt _0201FE18
	lsl r2, r0, #8
	orr r0, r2, #0x80000000
	lsr r0, r0, r1
	bx lr
	arm_func_end FUN_0201fde0
_0201FE04:
	mov r2, #0xff000000
	cmp r2, r0, lsl #1
	movhs r0, #0
	mvnlo r0, #0
	bx lr
_0201FE18:
	mvn r0, #0
	bx lr

	arm_func_start FUN_0201fe20
FUN_0201fe20: ; 0x0201FE20
	bic r3, r1, #0x80000000
	ldr r2, _0201FE68 ; =0x0000041E
	subs r2, r2, r3, lsr #20
	ble _0201FE5C
	cmp r2, #0x20
	bge _0201FE54
	lsl r3, r1, #0xb
	orr r3, r3, #0x80000000
	orr r3, r3, r0, lsr #21
	cmp r1, #0
	lsr r0, r3, r2
	rsbmi r0, r0, #0
	bx lr
	arm_func_end FUN_0201fe20
_0201FE54:
	mov r0, #0
	bx lr
_0201FE5C:
	mvn r0, r1, asr #31
	add r0, r0, #0x80000000
	bx lr
	.align 2, 0_0201FE68: .word 0x0000041E

	arm_func_start FUN_0201fe6c
FUN_0201fe6c: ; 0x0201FE6C
	tst r1, #0x80000000
	bne _0201FED0
	ldr r2, _0201FEF4 ; =0x0000043E
	subs r2, r2, r1, lsr #20
	blt _0201FEE8
	cmp r2, #0x40
	bge _0201FEC4
	lsl ip, r1, #0xb
	orr ip, ip, #0x80000000
	orr ip, ip, r0, lsr #21
	cmp r2, #0x20
	ble _0201FEAC
	sub r2, r2, #0x20
	mov r1, #0
	lsr r0, ip, r2
	bx lr
	arm_func_end FUN_0201fe6c
_0201FEAC:
	lsl r3, r0, #0xb
	lsr r1, ip, r2
	lsr r0, r3, r2
	rsb r2, r2, #0x20
	orr r0, r0, ip, lsl r2
	bx lr
_0201FEC4:
	mov r1, #0
	mov r0, #0
	bx lr
_0201FED0:
	cmn r1, #0x100000
	cmpeq r0, #0
	bhi _0201FEE8
	mov r1, #0
	mov r0, #0
	bx lr
_0201FEE8:
	mvn r1, #0
	mvn r0, #0
	bx lr
	.align 2, 0_0201FEF4: .word 0x0000043E

	arm_func_start FUN_0201fef8
FUN_0201fef8: ; 0x0201FEF8
	push {r4, r5, r6, lr}
	ldr r2, _02020088 ; =0x7FF00000
	cmp r1, r2
	bhs _02020044
	lsrs ip, r1, #0x14
	beq _0201FFF0
	bic r1, r1, r2
	orr r1, r1, #0x100000
	arm_func_end FUN_0201fef8
_0201FF18:
	asrs ip, ip, #1
	bhs _0201FF2C
	sub ip, ip, #1
	lsls r0, r0, #1
	adc r1, r1, r1
_0201FF2C:
	lsls r3, r0, #1
	adc r1, r1, r1
	mov r2, #0
	mov r4, #0
	mov lr, #0x200000
_0201FF40:
	add r6, r4, lr
	cmp r6, r1
	addle r4, r6, lr
	suble r1, r1, r6
	addle r2, r2, lr
	lsls r3, r3, #1
	adc r1, r1, r1
	lsrs lr, lr, #1
	bne _0201FF40
	mov r0, #0
	mov r5, #0
	cmp r1, r4
	cmpeq r3, #0x80000000
	blo _0201FF88
	subs r3, r3, #0x80000000
	sbc r1, r1, r4
	add r4, r4, #1
	mov r0, #0x80000000
_0201FF88:
	lsls r3, r3, #1
	adc r1, r1, r1
	mov lr, #0x40000000
_0201FF94:
	add r6, r5, lr
	cmp r4, r1
	cmpeq r6, r3
	bhi _0201FFB4
	add r5, r6, lr
	subs r3, r3, r6
	sbc r1, r1, r4
	add r0, r0, lr
_0201FFB4:
	lsls r3, r3, #1
	adc r1, r1, r1
	lsrs lr, lr, #1
	bne _0201FF94
	orrs r1, r1, r3
	biceq r0, r0, #1
	lsrs r1, r2, #1
	rrxs r0, r0
	adcs r0, r0, #0
	adc r1, r1, #0
	add r1, r1, #0x20000000
	sub r1, r1, #0x100000
	add r1, r1, ip, lsl #20
	pop {r4, r5, r6, lr}
	bx lr
_0201FFF0:
	cmp r1, #0
	bne _02020020
	cmp r0, #0
	popeq {r4, r5, r6, lr}
	bxeq lr
	mvn ip, #0x13
	clz r5, r0
	lsls r0, r0, r5
	sub ip, ip, r5
	lsr r1, r0, #0xb
	lsl r0, r0, #0x15
	b _0201FF18
_02020020:
	clz r2, r1
	lsls r1, r1, r2
	rsb r2, r2, #0x2b
	lsr r1, r1, #0xb
	orr r1, r1, r0, lsr r2
	rsb r2, r2, #0x20
	lsl r0, r0, r2
	rsb ip, r2, #1
	b _0201FF18
_02020044:
	tst r1, #0x80000000
	beq _02020060
	bics r3, r1, #0x80000000
	cmpeq r0, #0
	popeq {r4, r5, r6, lr}
	bxeq lr
	b _0202006C
_02020060:
	orrs r2, r0, r1, lsl #12
	popeq {r4, r5, r6, lr}
	bxeq lr
_0202006C:
	ldr r2, _0202008C ; =0x7FF80000
	orr r1, r1, r2
	ldr r3, _02020090 ; =0x02099E60
	mov r4, #0x21
	str r4, [r3]
	pop {r4, r5, r6, lr}
	bx lr
	.align 2, 0_02020088: .word 0x7FF00000
_0202008C: .word 0x7FF80000
_02020090: .word 0x02099E60

	arm_func_start FUN_02020094
FUN_02020094: ; 0x02020094
	eor r2, r0, r1
	and r2, r2, #0x80000000
	mov ip, #0xff
	ands r3, ip, r0, lsr #23
	lsl r0, r0, #8
	cmpne r3, #0xff
	beq _02020110
	orr r0, r0, #0x80000000
	ands ip, ip, r1, lsr #23
	lsl r1, r1, #8
	cmpne ip, #0xff
	beq _02020150
	orr r1, r1, #0x80000000
	arm_func_end FUN_02020094
_020200C8:
	add ip, r3, ip
	umull r1, r3, r0, r1
	movs r0, r3
	addpl r0, r0, r0
	subpl ip, ip, #1
	subs ip, ip, #0x7f
	bmi _020201DC
	cmp ip, #0xfe
	bge _02020248
	ands r3, r0, #0xff
	orr r0, r2, r0, lsr #8
	add r0, r0, ip, lsl #23
	tst r3, #0x80
	bxeq lr
	orrs r1, r1, r3, lsl #25
	andseq r3, r0, #1
	addne r0, r0, #1
	bx lr
_02020110:
	cmp r3, #0
	beq _02020164
	lsls r0, r0, #1
	bne _02020238
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _02020144
	cmp ip, #0xff
	blt _0202022C
	cmp r1, #0
	beq _0202022C
	b _02020238
_02020144:
	cmp r1, #0
	beq _02020240
	b _0202022C
_02020150:
	cmp ip, #0
	beq _020201C0
_02020158:
	lsls r1, r1, #1
	bne _02020238
	b _0202022C
_02020164:
	lsls r0, r0, #1
	beq _0202019C
	lsr r0, r0, #1
	clz r3, r0
	lsls r0, r0, r3
	rsb r3, r3, #1
	lsr ip, r1, #0x17
	lsl r1, r1, #8
	ands ip, ip, #0xff
	beq _020201C0
	cmp ip, #0xff
	beq _02020158
	orr r1, r1, #0x80000000
	b _020200C8
_0202019C:
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _0202026C
	cmp ip, #0xff
	blt _0202026C
	cmp r1, #0
	beq _02020240
	b _02020238
_020201C0:
	lsls r1, r1, #1
	beq _0202026C
	lsr r1, r1, #1
	clz ip, r1
	lsls r1, r1, ip
	rsb ip, ip, #1
	b _020200C8
_020201DC:
	cmn ip, #0x18
	beq _02020224
	bmi _02020264
	cmp r1, #0
	orrne r0, r0, #1
	mov r3, r0
	lsr r0, r0, #8
	rsb ip, ip, #0
	orr r0, r2, r0, lsr ip
	rsb ip, ip, #0x18
	lsls r1, r3, ip
	bxeq lr
	tst r1, #0x80000000
	bxeq lr
	lsls r1, r1, #1
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_02020224:
	lsl r0, r0, #1
	b _02020254
_0202022C:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_02020238:
	mvn r0, #0x80000000
	bx lr
_02020240:
	mvn r0, #0x80000000
	bx lr
_02020248:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_02020254:
	movs r1, r0
	mov r0, r2
	addne r0, r0, #1
	bx lr
_02020264:
	mov r0, r2
	bx lr
_0202026C:
	mov r0, r2
	bx lr

	arm_func_start FUN_02020274
FUN_02020274: ; 0x02020274
	eors r2, r0, r1
	eormi r1, r1, #0x80000000
	bmi _020204B0
	arm_func_end FUN_02020274
_02020280:
	subs ip, r0, r1
	sublo r0, r0, ip
	addlo r1, r1, ip
	mov r2, #0x80000000
	lsr r3, r0, #0x17
	orr r0, r2, r0, lsl #8
	ands ip, r3, #0xff
	cmpne ip, #0xff
	beq _02020314
	lsr ip, r1, #0x17
	orr r1, r2, r1, lsl #8
	ands r2, ip, #0xff
	beq _02020354
_020202B4:
	subs ip, r3, ip
	beq _020202CC
	rsb r2, ip, #0x20
	lsls r2, r1, r2
	lsr r1, r1, ip
	orrne r1, r1, #1
_020202CC:
	adds r0, r0, r1
	blo _020202EC
	and r1, r0, #1
	orr r0, r1, r0, rrx
	add r3, r3, #1
	and r2, r3, #0xff
	cmp r2, #0xff
	beq _0202045C
_020202EC:
	ands r1, r0, #0xff
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	tst r1, #0x80
	bxeq lr
	ands r1, r1, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_02020314:
	cmp r3, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	ands r3, r3, #0xff
	beq _02020378
	lsls r0, r0, #1
	bne _02020488
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _0202047C
	cmp ip, #0xff
	blt _0202047C
	cmp r1, #0
	beq _0202047C
	b _02020488
_02020354:
	cmp r3, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	and r3, r3, #0xff
	ands ip, ip, #0xff
	beq _020203D4
_0202036C:
	lsls r1, r1, #1
	bne _02020488
	b _0202047C
_02020378:
	lsls r0, r0, #1
	beq _020203B0
	mov r3, #1
	lsr r0, r0, #1
	lsr ip, r1, #0x17
	lsl r1, r1, #8
	ands ip, ip, #0xff
	beq _020203D4
	cmp ip, #0xff
	beq _0202036C
	orr r1, r1, #0x80000000
	orr r3, r3, r2, lsr #23
	orr ip, ip, r2, lsr #23
	b _020202B4
_020203B0:
	lsr r3, r1, #0x17
	lsl r0, r1, #9
	ands r3, r3, #0xff
	beq _0202043C
	cmp r3, #0xff
	blt _0202043C
	cmp r0, #0
	beq _0202047C
	b _02020474
_020203D4:
	lsls r1, r1, #1
	beq _02020444
	lsr r1, r1, #1
	mov ip, #1
	orr r3, r3, r2, lsr #23
	orr ip, ip, r2, lsr #23
	cmp r0, #0
	bmi _020202B4
	adds r0, r0, r1
	blo _02020408
	and r1, r0, #1
	orr r0, r1, r0, rrx
	add ip, ip, #1
_02020408:
	cmp r0, #0
	subge ip, ip, #1
	ands r1, r0, #0xff
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, ip, lsl #23
	bxeq lr
	tst r1, #0x80
	bxeq lr
	ands r1, r1, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_0202043C:
	mov r0, r1
	bx lr
_02020444:
	cmp r0, #0
	subsge r3, r3, #1
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bx lr
_0202045C:
	cmp r3, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_02020474:
	mvn r0, #0x80000000
	bx lr
_0202047C:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_02020488:
	mvn r0, #0x80000000
	bx lr

	arm_func_start FUN_02020490
FUN_02020490: ; 0x02020490
	mvn r0, #0x80000000
	bx lr
	arm_func_end FUN_02020490

	arm_func_start FUN_02020498
FUN_02020498: ; 0x02020498
	eor r0, r0, r1
	eor r1, r0, r1
	eor r0, r0, r1
	arm_func_end FUN_02020498

	arm_func_start FUN_020204a4
FUN_020204a4: ; 0x020204A4
	eors r2, r0, r1
	eormi r1, r1, #0x80000000
	bmi _02020280
	arm_func_end FUN_020204a4
_020204B0:
	subs ip, r0, r1
	eorlo ip, ip, #0x80000000
	sublo r0, r0, ip
	addlo r1, r1, ip
	mov r2, #0x80000000
	lsr r3, r0, #0x17
	orr r0, r2, r0, lsl #8
	ands ip, r3, #0xff
	cmpne ip, #0xff
	beq _020205CC
	lsr ip, r1, #0x17
	orr r1, r2, r1, lsl #8
	ands r2, ip, #0xff
	beq _0202060C
_020204E8:
	subs ip, r3, ip
	beq _02020530
	rsb r2, ip, #0x20
	lsls r2, r1, r2
	lsr r1, r1, ip
	orrne r1, r1, #1
	subs r0, r0, r1
	bpl _02020574
	ands r1, r0, #0xff
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	tst r1, #0x80
	bxeq lr
	ands r1, r1, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_02020530:
	subs r0, r0, r1
	beq _020206D8
	lsl r2, r3, #0x17
	and r2, r2, #0x80000000
	bic r3, r3, #0x100
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
	cmp r3, #0
	bgt _02020564
	rsb r3, r3, #9
	orr r0, r2, r0, lsr r3
	bx lr
_02020564:
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bx lr
_02020574:
	lsl r2, r3, #0x17
	and r2, r2, #0x80000000
	bic r3, r3, #0x100
	clz ip, r0
	lsls r0, r0, ip
	sub r3, r3, ip
	cmp r3, #0
	bgt _020205A0
	rsb r3, r3, #9
	orr r0, r2, r0, lsr r3
	bx lr
_020205A0:
	ands r1, r0, #0xff
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bxeq lr
	tst r1, #0x80
	bxeq lr
	ands r1, r1, #0x7f
	andseq r1, r0, #1
	addne r0, r0, #1
	bx lr
_020205CC:
	cmp r3, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	ands r3, r3, #0xff
	beq _02020634
	lsls r0, r0, #1
	bne _0202070C
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _02020700
	cmp ip, #0xff
	blt _02020700
	cmp r1, #0
	beq _02020714
	b _0202070C
_0202060C:
	cmp ip, #0x100
	movge r2, #0x80000000
	movlt r2, #0
	and r3, r3, #0xff
	ands ip, ip, #0xff
	beq _0202069C
_02020624:
	eor r2, r2, #0x80000000
	lsls r1, r1, #1
	bne _0202070C
	b _02020700
_02020634:
	lsls r0, r0, #1
	beq _0202066C
	lsr r0, r0, #1
	mov r3, #1
	lsr ip, r1, #0x17
	lsl r1, r1, #8
	ands ip, ip, #0xff
	beq _0202069C
	cmp ip, #0xff
	beq _02020624
	orr r1, r1, #0x80000000
	orr r3, r3, r2, lsr #23
	orr ip, ip, r2, lsr #23
	b _020204E8
_0202066C:
	lsr r3, r1, #0x17
	lsl r0, r1, #9
	ands r2, r3, #0xff
	beq _02020690
	cmp r2, #0xff
	blt _020206B8
	cmp r0, #0
	bne _020206F8
	b _02020700
_02020690:
	cmp r0, #0
	beq _020206D8
	b _020206B8
_0202069C:
	lsls r1, r1, #1
	beq _020206C0
	lsr r1, r1, #1
	mov ip, #1
	orr ip, ip, r2, lsr #23
	orr r3, r3, r2, lsr #23
	b _020204E8
_020206B8:
	mov r0, r1
	bx lr
_020206C0:
	cmp r0, #0
	subsge r3, r3, #1
	add r0, r0, r0
	orr r0, r2, r0, lsr #9
	orr r0, r0, r3, lsl #23
	bx lr
_020206D8:
	mov r0, #0
	bx lr

	arm_func_start FUN_020206e0
FUN_020206e0: ; 0x020206E0
	cmp r0, #0
	subsge r3, r3, #1
	add r0, r0, r0
	lsr r0, r0, #9
	orr r0, r0, r3, lsl #23
	bx lr
	arm_func_end FUN_020206e0
_020206F8:
	mvn r0, #0x80000000
	bx lr
_02020700:
	mov r0, #0xff000000
	orr r0, r2, r0, lsr #1
	bx lr
_0202070C:
	mvn r0, #0x80000000
	bx lr
_02020714:
	mvn r0, #0x80000000
	bx lr

	arm_func_start FUN_0202071c
FUN_0202071c: ; 0x0202071C
	eor r0, r0, r1
	eor r1, r0, r1
	eor r0, r0, r1
	arm_func_end FUN_0202071c

	arm_func_start FUN_02020728
FUN_02020728: ; 0x02020728
	stmdb sp!, {lr}
	mov ip, #0xff
	ands r3, ip, r0, lsr #23
	cmpne r3, #0xff
	beq _020208FC
	ands ip, ip, r1, lsr #23
	cmpne ip, #0xff
	beq _02020938
	orr r1, r1, #0x800000
	orr r0, r0, #0x800000
	bic r2, r0, #0xff000000
	bic lr, r1, #0xff000000
	arm_func_end FUN_02020728
_02020758:
	cmp r2, lr
	lsllo r2, r2, #1
	sublo r3, r3, #1
	teq r0, r1
	sub r0, pc, #0x94
	ldrb r1, [r0, lr, lsr #15]
	rsb lr, lr, #0
	asr r0, lr, #1
	mul r0, r1, r0
	add r0, r0, #0x80000000
	lsr r0, r0, #6
	mul r0, r1, r0
	lsr r0, r0, #0xe
	mul r1, lr, r0
	sub ip, r3, ip
	lsr r1, r1, #0xc
	mul r1, r0, r1
	lsl r0, r0, #0xe
	add r0, r0, r1, lsr #15
	umull r1, r0, r2, r0
	mov r3, r0
	orrmi r0, r0, #0x80000000
	adds ip, ip, #0x7e
	bmi _02020A00
	cmp ip, #0xfe
	bge _02020AB4
	add r0, r0, ip, lsl #23
	lsr ip, r1, #0x1c
	cmp ip, #7
	beq _020208DC
	add r0, r0, r1, lsr #31
	ldm sp!, {lr}
	bx lr
_020207DC:
	.byte 0xFF, 0xFF, 0xFE, 0xFD
	.byte 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0, 0xF0, 0xEF, 0xEE
	.byte 0xED, 0xEC, 0xEB, 0xEA, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE2, 0xE1
	.byte 0xE0, 0xDF, 0xDF, 0xDE, 0xDD, 0xDC, 0xDC, 0xDB, 0xDA, 0xD9, 0xD9, 0xD8, 0xD7, 0xD7, 0xD6, 0xD5
	.byte 0xD4, 0xD4, 0xD3, 0xD2, 0xD2, 0xD1, 0xD0, 0xD0, 0xCF, 0xCE, 0xCE, 0xCD, 0xCC, 0xCC, 0xCB, 0xCB
	.byte 0xCA, 0xC9, 0xC9, 0xC8, 0xC8, 0xC7, 0xC6, 0xC6, 0xC5, 0xC5, 0xC4, 0xC3, 0xC3, 0xC2, 0xC2, 0xC1
	.byte 0xC0, 0xC0, 0xBF, 0xBF, 0xBE, 0xBE, 0xBD, 0xBD, 0xBC, 0xBC, 0xBB, 0xBA, 0xBA, 0xB9, 0xB9, 0xB8
	.byte 0xB8, 0xB7, 0xB7, 0xB6, 0xB6, 0xB5, 0xB5, 0xB4, 0xB4, 0xB3, 0xB3, 0xB2, 0xB2, 0xB1, 0xB1, 0xB0
	.byte 0xB0, 0xAF, 0xAF, 0xAF, 0xAE, 0xAE, 0xAD, 0xAD, 0xAC, 0xAC, 0xAB, 0xAB, 0xAA, 0xAA, 0xAA, 0xA9
	.byte 0xA9, 0xA8, 0xA8, 0xA7, 0xA7, 0xA7, 0xA6, 0xA6, 0xA5, 0xA5, 0xA4, 0xA4, 0xA4, 0xA3, 0xA3, 0xA2
	.byte 0xA2, 0xA2, 0xA1, 0xA1, 0xA0, 0xA0, 0xA0, 0x9F, 0x9F, 0x9E, 0x9E, 0x9E, 0x9D, 0x9D, 0x9D, 0x9C
	.byte 0x9C, 0x9B, 0x9B, 0x9B, 0x9A, 0x9A, 0x9A, 0x99, 0x99, 0x99, 0x98, 0x98, 0x98, 0x97, 0x97, 0x96
	.byte 0x96, 0x96, 0x95, 0x95, 0x95, 0x94, 0x94, 0x94, 0x93, 0x93, 0x93, 0x92, 0x92, 0x92, 0x91, 0x91
	.byte 0x91, 0x91, 0x90, 0x90, 0x90, 0x8F, 0x8F, 0x8F, 0x8E, 0x8E, 0x8E, 0x8D, 0x8D, 0x8D, 0x8C, 0x8C
	.byte 0x8C, 0x8C, 0x8B, 0x8B, 0x8B, 0x8A, 0x8A, 0x8A, 0x8A, 0x89, 0x89, 0x89, 0x88, 0x88, 0x88, 0x88
	.byte 0x87, 0x87, 0x87, 0x86, 0x86, 0x86, 0x86, 0x85, 0x85, 0x85, 0x85, 0x84, 0x84, 0x84, 0x83, 0x83
	.byte 0x83, 0x83, 0x82, 0x82, 0x82, 0x82, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80
_020208DC:
	lsl r1, r3, #1
	add r1, r1, #1
	rsb lr, lr, #0
	mul r1, lr, r1
	cmp r1, r2, lsl #24
	addmi r0, r0, #1
	ldm sp!, {lr}
	bx lr
_020208FC:
	eor lr, r0, r1
	and lr, lr, #0x80000000
	cmp r3, #0
	beq _02020954
	lsls r0, r0, #9
	bne _02020A9C
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _02020A8C
	cmp ip, #0xff
	blt _02020A8C
	cmp r1, #0
	beq _02020AA8
	b _02020A84
_02020938:
	eor lr, r0, r1
	and lr, lr, #0x80000000
	cmp ip, #0
	beq _020209B8
_02020948:
	lsls r1, r1, #9
	bne _02020A84
	b _02020AD4
_02020954:
	lsls r2, r0, #9
	beq _02020988
	clz r3, r2
	lsls r2, r2, r3
	rsb r3, r3, #0
	lsr r2, r2, #8
	ands ip, ip, r1, lsr #23
	beq _020209E0
	cmp ip, #0xff
	beq _02020948
	orr r1, r1, #0x800000
	bic lr, r1, #0xff000000
	b _02020758
_02020988:
	lsr ip, r1, #0x17
	lsl r1, r1, #9
	ands ip, ip, #0xff
	beq _020209AC
	cmp ip, #0xff
	blt _02020AD4
	cmp r1, #0
	beq _02020AD4
	b _02020A84
_020209AC:
	cmp r1, #0
	beq _02020AA8
	b _02020AD4
_020209B8:
	lsls ip, r1, #9
	beq _02020A8C
	mov lr, ip
	clz ip, lr
	lsls lr, lr, ip
	rsb ip, ip, #0
	lsr lr, lr, #8
	orr r0, r0, #0x800000
	bic r2, r0, #0xff000000
	b _02020758
_020209E0:
	lsls ip, r1, #9
	beq _02020A8C
	mov lr, ip
	clz ip, lr
	lsls lr, lr, ip
	rsb ip, ip, #0
	lsr lr, lr, #8
	b _02020758
_02020A00:
	and r0, r0, #0x80000000
	cmn ip, #0x18
	beq _02020A74
	bmi _02020ACC
	add r1, ip, #0x17
	lsl r2, r2, r1
	rsb ip, ip, #0
	lsr r3, r3, ip
	orr r0, r0, r3
	rsb lr, lr, #0
	mul r1, lr, r3
	cmp r1, r2
	ldmeq sp!, {lr}
	bxeq lr
	add r1, r1, lr
	cmp r1, r2
	beq _02020A68
	addmi r0, r0, #1
	subpl r1, r1, lr
	add r1, lr, r1, lsl #1
	cmp r1, r2, lsl #1
	and r3, r0, #1
	addmi r0, r0, #1
	addeq r0, r0, r3
	ldm sp!, {lr}
	bx lr
_02020A68:
	add r0, r0, #1
	ldm sp!, {lr}
	bx lr
_02020A74:
	cmn r2, lr
	addne r0, r0, #1
	ldm sp!, {lr}
	bx lr
_02020A84:
	mov r0, r1
	b _02020A9C
_02020A8C:
	mov r0, #0xff000000
	orr r0, lr, r0, lsr #1
	ldm sp!, {lr}
	bx lr
_02020A9C:
	mvn r0, #0x80000000
	ldm sp!, {lr}
	bx lr
_02020AA8:
	mvn r0, #0x80000000
	ldm sp!, {lr}
	bx lr
_02020AB4:
	tst r0, #0x80000000
	mov r0, #0xff000000
	asrne r0, r0, #1
	lsreq r0, r0, #1
	ldm sp!, {lr}
	bx lr
_02020ACC:
	ldm sp!, {lr}
	bx lr
_02020AD4:
	mov r0, lr
	ldm sp!, {lr}
	bx lr

	arm_func_start FUN_02020ae0
FUN_02020ae0: ; 0x02020AE0
	eor r1, r1, r3
	eor r3, r1, r3
	eor r1, r1, r3
	eor r0, r0, r2
	eor r2, r0, r2
	eor r0, r0, r2
	arm_func_end FUN_02020ae0

	arm_func_start FUN_02020af8
FUN_02020af8: ; 0x02020AF8
	push {r4, r5, r6, lr}
	ldr lr, _02021038 ; =0x00000FFE
	eor r4, r1, r3
	ands ip, lr, r1, lsr #19
	cmpne ip, lr
	beq _02020EA4
	bic r1, r1, lr, lsl #20
	orr r1, r1, #0x100000
	add ip, ip, r4, lsr #31
	arm_func_end FUN_02020af8
_02020B1C:
	ands r4, lr, r3, lsr #19
	cmpne r4, lr
	beq _02020F3C
	bic r3, r3, lr, lsl #20
	orr r3, r3, #0x100000
_02020B30:
	sub ip, ip, r4
	cmp r1, r3
	cmpeq r0, r2
	bhs _02020B4C
	adds r0, r0, r0
	adc r1, r1, r1
	sub ip, ip, #2
_02020B4C:
	sub r4, pc, #0x24
	ldrb lr, [r4, r3, lsr #12]
	rsbs r2, r2, #0
	rsc r3, r3, #0
	mov r4, #0x20000000
	mla r5, lr, r3, r4
	lsl r6, r3, #0xa
	lsr r5, r5, #7
	mul lr, r5, lr
	orr r6, r6, r2, lsr #22
	lsr lr, lr, #0xd
	mul r5, lr, r6
	lsl r6, r1, #0xa
	orr r6, r6, r0, lsr #22
	lsr r5, r5, #0x10
	mul r5, lr, r5
	lsl lr, lr, #0xe
	add lr, lr, r5, lsr #16
	umull r5, r6, lr, r6
	umull r4, r5, r6, r2
	mla r5, r3, r6, r5
	lsr r4, r4, #0x1a
	orr r4, r4, r5, lsl #6
	add r4, r4, r0, lsl #2
	umull lr, r5, r4, lr
	mov r4, #0
	adds r5, r5, r6, lsl #24
	adc r4, r4, r6, lsr #8
	cmp ip, #0x800
	bge _02020D30
	add ip, ip, #0x7f0
	adds ip, ip, #0xc
	bmi _02020D48
	orr r1, r4, ip, lsl #31
	bic ip, ip, #1
	add r1, r1, ip, lsl #19
	tst lr, #0x80000000
	bne _02020C20
	rsbs r2, r2, #0
	lsl r4, r4, #1
	add r4, r4, r5, lsr #31
	mul lr, r2, r4
	mov r6, #0
	lsl r4, r5, #1
	orr r4, r4, #1
	umlal r6, lr, r4, r2
	rsc r3, r3, #0
	mla lr, r4, r3, lr
	cmp lr, r0, lsl #21
	bmi _02020C20
	mov r0, r5
	pop {r4, r5, r6, lr}
	bx lr
_02020C20:
	adds r0, r5, #1
	adc r1, r1, #0
	pop {r4, r5, r6, lr}
	bx lr
_02020C30:
	.byte 0xFF, 0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1
	.byte 0xF0, 0xF0, 0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE6, 0xE5, 0xE4
	.byte 0xE3, 0xE2, 0xE2, 0xE1, 0xE0, 0xDF, 0xDF, 0xDE, 0xDD, 0xDC, 0xDC, 0xDB, 0xDA, 0xD9, 0xD9, 0xD8
	.byte 0xD7, 0xD7, 0xD6, 0xD5, 0xD4, 0xD4, 0xD3, 0xD2, 0xD2, 0xD1, 0xD0, 0xD0, 0xCF, 0xCE, 0xCE, 0xCD
	.byte 0xCC, 0xCC, 0xCB, 0xCB, 0xCA, 0xC9, 0xC9, 0xC8, 0xC8, 0xC7, 0xC6, 0xC6, 0xC5, 0xC5, 0xC4, 0xC3
	.byte 0xC3, 0xC2, 0xC2, 0xC1, 0xC0, 0xC0, 0xBF, 0xBF, 0xBE, 0xBE, 0xBD, 0xBD, 0xBC, 0xBC, 0xBB, 0xBA
	.byte 0xBA, 0xB9, 0xB9, 0xB8, 0xB8, 0xB7, 0xB7, 0xB6, 0xB6, 0xB5, 0xB5, 0xB4, 0xB4, 0xB3, 0xB3, 0xB2
	.byte 0xB2, 0xB1, 0xB1, 0xB0, 0xB0, 0xAF, 0xAF, 0xAF, 0xAE, 0xAE, 0xAD, 0xAD, 0xAC, 0xAC, 0xAB, 0xAB
	.byte 0xAA, 0xAA, 0xAA, 0xA9, 0xA9, 0xA8, 0xA8, 0xA7, 0xA7, 0xA7, 0xA6, 0xA6, 0xA5, 0xA5, 0xA4, 0xA4
	.byte 0xA4, 0xA3, 0xA3, 0xA2, 0xA2, 0xA2, 0xA1, 0xA1, 0xA0, 0xA0, 0xA0, 0x9F, 0x9F, 0x9E, 0x9E, 0x9E
	.byte 0x9D, 0x9D, 0x9D, 0x9C, 0x9C, 0x9B, 0x9B, 0x9B, 0x9A, 0x9A, 0x9A, 0x99, 0x99, 0x99, 0x98, 0x98
	.byte 0x98, 0x97, 0x97, 0x96, 0x96, 0x96, 0x95, 0x95, 0x95, 0x94, 0x94, 0x94, 0x93, 0x93, 0x93, 0x92
	.byte 0x92, 0x92, 0x91, 0x91, 0x91, 0x91, 0x90, 0x90, 0x90, 0x8F, 0x8F, 0x8F, 0x8E, 0x8E, 0x8E, 0x8D
	.byte 0x8D, 0x8D, 0x8C, 0x8C, 0x8C, 0x8C, 0x8B, 0x8B, 0x8B, 0x8A, 0x8A, 0x8A, 0x8A, 0x89, 0x89, 0x89
	.byte 0x88, 0x88, 0x88, 0x88, 0x87, 0x87, 0x87, 0x86, 0x86, 0x86, 0x86, 0x85, 0x85, 0x85, 0x85, 0x84
	.byte 0x84, 0x84, 0x83, 0x83, 0x83, 0x83, 0x82, 0x82, 0x82, 0x82, 0x81, 0x81, 0x81, 0x81, 0x80, 0x80
_02020D30:
	lsls r1, ip, #0x1f
	orr r1, r1, #0x7f000000
	orr r1, r1, #0xf00000
	mov r0, #0
	pop {r4, r5, r6, lr}
	bx lr
_02020D48:
	mvn r6, ip, asr #1
	cmp r6, #0x34
	bgt _02020E94
	beq _02020E70
	cmp r6, #0x14
	bge _02020D90
	rsb r6, r6, #0x13
	lsl lr, r0, r6
	rsb r6, r6, #0x14
	lsr r0, r5, r6
	rsb r6, r6, #0x20
	orr r0, r0, r4, lsl r6
	rsb r6, r6, #0x20
	lsr r4, r4, r6
	orr r1, r4, ip, lsl #31
	mov ip, lr
	mov lr, #0
	b _02020DC0
_02020D90:
	rsb r6, r6, #0x33
	lsl lr, r1, r6
	lsl r1, ip, #0x1f
	rsb r6, r6, #0x20
	orr ip, lr, r0, lsr r6
	rsb r6, r6, #0x20
	lsl lr, r0, r6
	lsr r5, r5, #0x15
	orr r5, r5, r4, lsl #11
	rsb r6, r6, #0x1f
	lsr r0, r5, r6
	mov r4, #0
_02020DC0:
	rsbs r2, r2, #0
	mul r4, r2, r4
	mov r5, #0
	umlal r5, r4, r2, r0
	rsc r3, r3, #0
	mla r4, r0, r3, r4
	cmp r4, ip
	cmpeq r5, lr
	popeq {r4, r5, r6, lr}
	bxeq lr
	adds r5, r5, r2
	adc r4, r4, r3
	cmp r4, ip
	bmi _02020E64
	bne _02020E08
	cmp r5, lr
	beq _02020E54
	blo _02020E64
_02020E08:
	subs r5, r5, r2
	sbc r4, r4, r3
_02020E10:
	adds r5, r5, r5
	adc r4, r4, r4
	adds r5, r5, r2
	adc r4, r4, r3
	adds lr, lr, lr
	adc ip, ip, ip
	cmp r4, ip
	bmi _02020E54
	popne {r4, r5, r6, lr}
	bxne lr
	cmp r5, lr
	blo _02020E54
	popne {r4, r5, r6, lr}
	bxne lr
	tst r0, #1
	popeq {r4, r5, r6, lr}
	bxeq lr
_02020E54:
	adds r0, r0, #1
	adc r1, r1, #0
	pop {r4, r5, r6, lr}
	bx lr
_02020E64:
	adds r0, r0, #1
	adc r1, r1, #0
	b _02020E10
_02020E70:
	rsbs r2, r2, #0
	rsc r3, r3, #0
	cmp r1, r3
	cmpeq r0, r2
	lsl r1, ip, #0x1f
	mov r0, #0
	movne r0, #1
	pop {r4, r5, r6, lr}
	bx lr
_02020E94:
	lsl r1, ip, #0x1f
	mov r0, #0
	pop {r4, r5, r6, lr}
	bx lr
_02020EA4:
	orrs r5, r0, r1, lsl #1
	beq _02020FC8
	cmp ip, lr
	beq _02020F0C
	lsls r1, r1, #0xc
	beq _02020EE8
	clz r5, r1
	lsls r1, r1, r5
	sub ip, ip, r5
	add r5, ip, #0x1f
	lsr r1, r1, #0xb
	orr r1, r1, r0, lsr r5
	rsb r5, r5, #0x20
	lsl r0, r0, r5
	lsl ip, ip, #1
	orr ip, ip, r4, lsr #31
	b _02020B1C
_02020EE8:
	mvn ip, #0x13
	clz r5, r0
	lsls r0, r0, r5
	sub ip, ip, r5
	lsr r1, r0, #0xb
	lsl r0, r0, #0x15
	lsl ip, ip, #1
	orr ip, ip, r4, lsr #31
	b _02020B1C
_02020F0C:
	orrs r5, r0, r1, lsl #12
	bne _02020FF0
	bic r5, r3, #0x80000000
	cmp r5, lr, lsl #19
	bhs _02020F30
	and r5, r3, #0x80000000
	eor r1, r5, r1
	pop {r4, r5, r6, lr}
	bx lr
_02020F30:
	orrs r5, r2, r3, lsl #12
	bne _02021010
	b _02021028
_02020F3C:
	orrs r5, r2, r3, lsl #1
	beq _02020FB4
	cmp r4, lr
	beq _02020F9C
	lsls r3, r3, #0xc
	beq _02020F7C
	clz r5, r3
	lsls r3, r3, r5
	sub r4, r4, r5
	add r5, r4, #0x1f
	lsr r3, r3, #0xb
	orr r3, r3, r2, lsr r5
	rsb r5, r5, #0x20
	lsl r2, r2, r5
	lsl r4, r4, #1
	b _02020B30
_02020F7C:
	mvn r4, #0x13
	clz r5, r2
	lsls r2, r2, r5
	sub r4, r4, r5
	lsr r3, r2, #0xb
	lsl r2, r2, #0x15
	lsl r4, r4, #1
	b _02020B30
_02020F9C:
	orrs r5, r2, r3, lsl #12
	bne _02021010
	lsl r1, ip, #0x1f
	mov r0, #0
	pop {r4, r5, r6, lr}
	bx lr
_02020FB4:
	lsl r1, ip, #0x1f
	orr r1, r1, lr, lsl #19
	mov r0, #0
	pop {r4, r5, r6, lr}
	bx lr
_02020FC8:
	orrs r5, r2, r3, lsl #1
	beq _02021028
	bic r5, r3, #0x80000000
	cmp r5, lr, lsl #19
	cmpeq r2, #0
	bhi _02021010
	eor r1, r1, r3
	and r1, r1, #0x80000000
	pop {r4, r5, r6, lr}
	bx lr
_02020FF0:
	tst r1, #0x80000
	beq _02021028
	bic r5, r3, #0x80000000
	cmp r5, lr, lsl #19
	cmpeq r2, #0
	bhi _02021010
	pop {r4, r5, r6, lr}
	bx lr
_02021010:
	tst r3, #0x80000
	beq _02021028
	mov r1, r3
	mov r0, r2
	pop {r4, r5, r6, lr}
	bx lr
_02021028:
	orr r1, r1, #0x7f000000
	orr r1, r1, #0xf80000
	pop {r4, r5, r6, lr}
	bx lr
	.align 2, 0_02021038: .word 0x00000FFE

	arm_func_start _fp_init
_fp_init: ; 0x0202103C
	bx lr
	arm_func_end _fp_init

	arm_func_start FUN_02021040
FUN_02021040: ; 0x02021040
	push {r4, lr}
	mov r4, #1
	mov r0, r4
	bl FUN_02023d54
	ldr r1, _02021064 ; =0x02099930
	mov r0, r4
	str r4, [r1, #0xc]
	bl FUN_02021068
	pop {r4, pc}
	.align 2, 0_02021064: .word 0x02099930
	arm_func_end FUN_02021040

	arm_func_start FUN_02021068
FUN_02021068: ; 0x02021068
	push {r3, r4, r5, lr}
	ldr r4, _020210A8 ; =0x02099930
	mov r5, r0
	ldr r0, [r4, #0xc]
	cmp r0, #0
	bne _0202109C
	bl FUN_0201dd70
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _0202109C
	blx r0
	mov r0, #0
	str r0, [r4, #4]
	arm_func_end FUN_02021068
_0202109C:
	mov r0, r5
	bl FUN_020210ac
	pop {r3, r4, r5, pc}
	.align 2, 0_020210A8: .word 0x02099930

	arm_func_start FUN_020210ac
FUN_020210ac: ; 0x020210AC
	push {r4, r5, r6, lr}
	ldr r6, _020211B0 ; =0x02099A88
	mov r0, r6
	bl FUN_020024b0
	cmp r0, #0
	bne _020210E8
	ldr r0, _020211B4 ; =LAB_020939a4
	ldr r1, _020211B8 ; =0x02099A40
	ldr r2, [r0, #4]
	ldr r0, _020211BC ; =0x02099A64
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1]
	str r2, [r0]
	b _02021134
	arm_func_end FUN_020210ac
_020210E8:
	ldr r4, _020211B4 ; =LAB_020939a4
	ldr r5, _020211B8 ; =0x02099A40
	ldr r0, [r4, #4]
	ldr r1, [r5]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	ldreq r0, _020211BC ; =0x02099A64
	ldreq r1, [r0]
	addeq r1, r1, #1
	streq r1, [r0]
	beq _02021134
	mov r0, r6
	bl FUN_02002408
	ldr r1, [r4, #4]
	ldr r0, _020211BC ; =0x02099A64
	ldr r2, [r1, #0x6c]
	mov r1, #1
	str r2, [r5]
	str r1, [r0]
_02021134:
	ldr r4, _020211C0 ; =0x02099930
	ldr r0, [r4, #8]
	cmp r0, #0
	ble _02021168
	ldr r5, _020211C4 ; =0x02099940
_02021148:
	ldr r0, [r4, #8]
	sub r1, r0, #1
	ldr r0, [r5, r1, lsl #2]
	str r1, [r4, #8]
	blx r0
	ldr r0, [r4, #8]
	cmp r0, #0
	bgt _02021148
_02021168:
	ldr r0, _020211BC ; =0x02099A64
	ldr r1, [r0]
	subs r1, r1, #1
	str r1, [r0]
	bne _02021184
	ldr r0, _020211B0 ; =0x02099A88
	bl FUN_02002458
_02021184:
	ldr r4, _020211C0 ; =0x02099930
	ldr r0, [r4]
	cmp r0, #0
	beq _020211A0
	blx r0
	mov r0, #0
	str r0, [r4]
_020211A0:
	mov r0, #0
	bl FUN_020215f0
	bl thunk_FUN_0201c8c8
	pop {r4, r5, r6, pc}
	.align 2, 0_020211B0: .word 0x02099A88
_020211B4: .word LAB_020939a4
_020211B8: .word 0x02099A40
_020211BC: .word 0x02099A64
_020211C0: .word 0x02099930
_020211C4: .word 0x02099940

	arm_func_start FUN_020211c8
FUN_020211c8: ; 0x020211C8
	mov r2, r0
	mov r0, #0
	ldr ip, _020211DC ; =FUN_02002c2c
	sub r1, r0, #1
	bx ip
	.align 2, 0_020211DC: .word FUN_02002c2c
	arm_func_end FUN_020211c8

	arm_func_start FUN_020211e0
FUN_020211e0: ; 0x020211E0
	mov r2, r0
	mov r0, #0
	ldr ip, _020211F4 ; =FUN_02002d34
	sub r1, r0, #1
	bx ip
	.align 2, 0_020211F4: .word FUN_02002d34
	arm_func_end FUN_020211e0

	arm_func_start FUN_020211f8
FUN_020211f8: ; 0x020211F8
	push {r3, lr}
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_020211c8
	pop {r3, pc}
	arm_func_end FUN_020211f8

	arm_func_start FUN_02021210
FUN_02021210: ; 0x02021210
	push {r3, lr}
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_020211e0
	pop {r3, pc}
	arm_func_end FUN_02021210

	arm_func_start FUN_02021224
FUN_02021224: ; 0x02021224
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r0, _02021284 ; =0x0208F04C
	mov r4, #0
	mov r5, #1
	mov r8, r0
	mvn sb, #0
	mov r7, r4
	mov r6, #0x4c
	arm_func_end FUN_02021224
_02021244:
	ldr r1, [r0, #4]
	lsl r1, r1, #0x16
	lsrs r1, r1, #0x1d
	beq _02021260
	bl FUN_020215f0
	cmp r0, #0
	movne r4, sb
_02021260:
	cmp r5, #3
	mullt r0, r5, r6
	addlt r0, r8, r0
	movge r0, r7
	addlt r5, r5, #1
	cmp r0, #0
	bne _02021244
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02021284: .word 0x0208F04C

	arm_func_start FUN_02021288
FUN_02021288: ; 0x02021288
	cmp r0, #0
	rsblt r0, r0, #0
	bx lr
	arm_func_end FUN_02021288

	arm_func_start FUN_02021294
FUN_02021294: ; 0x02021294
	cmp r0, #0
	rsblt r0, r0, #0
	bx lr
	arm_func_end FUN_02021294

	arm_func_start FUN_020212a0
FUN_020212a0: ; 0x020212A0
	bx lr
	arm_func_end FUN_020212a0

	arm_func_start FUN_020212a4
FUN_020212a4: ; 0x020212A4
	ldr r2, [r0, #0x18]
	ldr r1, [r0, #0x2c]
	ldr ip, [r0, #0x1c]
	ldr r3, [r0, #0x20]
	and r1, r2, r1
	sub r1, r3, r1
	str ip, [r0, #0x24]
	str r1, [r0, #0x28]
	str r2, [r0, #0x34]
	bx lr
	arm_func_end FUN_020212a4

	arm_func_start FUN_020212cc
FUN_020212cc: ; 0x020212CC
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r2, [r5, #0x24]
	ldr r0, [r5, #0x1c]
	mov r4, r1
	subs r2, r2, r0
	beq _02021340
	ldr r1, [r5, #4]
	str r2, [r5, #0x28]
	lsl r1, r1, #0x13
	lsrs r1, r1, #0x1f
	bne _02021304
	add r1, r5, #0x28
	bl FUN_020212a0
	arm_func_end FUN_020212cc
_02021304:
	ldr r0, [r5]
	ldr r1, [r5, #0x1c]
	ldr r3, [r5, #0x48]
	ldr ip, [r5, #0x40]
	add r2, r5, #0x28
	blx ip
	cmp r4, #0
	ldrne r1, [r5, #0x28]
	strne r1, [r4]
	cmp r0, #0
	popne {r3, r4, r5, pc}
	ldr r1, [r5, #0x18]
	ldr r0, [r5, #0x28]
	add r0, r1, r0
	str r0, [r5, #0x18]
_02021340:
	mov r0, r5
	bl FUN_020212a4
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02021350
FUN_02021350: ; 0x02021350
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sb, r3
	mov sl, r0
	str r1, [sp]
	mov r1, #0
	mov r0, sb
	mov r5, r2
	mov r4, r1
	bl FUN_02024654
	cmp r0, #0
	bne _0202138C
	mov r0, sb
	mvn r1, #0
	bl FUN_02024654
	arm_func_end FUN_02021350
_0202138C:
	ldr r0, [sp]
	muls r5, r0, r5
	beq _020213B4
	ldrb r0, [sb, #0xd]
	cmp r0, #0
	bne _020213B4
	ldr r1, [sb, #4]
	lsl r0, r1, #0x16
	lsrs r0, r0, #0x1d
	bne _020213C0
_020213B4:
	add sp, sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020213C0:
	lsl r0, r1, #0x13
	lsrs r0, r0, #0x1f
	lslne r0, r1, #0x19
	lsrne r0, r0, #0x1e
	cmpne r0, #2
	ldr r1, [sb, #8]
	cmpne r0, #1
	mov r8, #1
	lsl r0, r1, #0x1d
	movne r8, #0
	lsrs r0, r0, #0x1d
	bne _02021418
	ldr r0, [sb, #4]
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1d
	tst r0, #2
	beq _02021418
	bic r0, r1, #7
	orr r1, r0, #1
	mov r0, sb
	str r1, [sb, #8]
	bl FUN_020212a4
_02021418:
	ldr r0, [sb, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r0, #1
	movne r1, #1
	movne r0, #0
	addne sp, sp, #8
	strbne r1, [sb, #0xd]
	strne r0, [sb, #0x28]
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r5, #0
	mov r6, #0
	beq _02021568
	ldr r0, [sb, #0x1c]
	ldr r2, [sb, #0x24]
	cmp r2, r0
	bne _02021464
	cmp r8, #0
	beq _02021568
_02021464:
	ldr r1, [sb, #0x20]
	sub r0, r2, r0
	sub r0, r1, r0
	str r0, [sb, #0x28]
	mov fp, #0
_02021478:
	ldr r2, [sb, #0x28]
	mov r7, r4
	str r2, [sp, #4]
	cmp r2, r5
	strhi r5, [sp, #4]
	ldr r0, [sb, #4]
	movhi r2, r5
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1e
	cmp r0, #1
	bne _020214C8
	cmp r2, #0
	beq _020214C8
	mov r0, sl
	mov r1, #0xa
	bl FUN_02021980
	movs r7, r0
	addne r0, r7, #1
	subne r2, r0, sl
	strne r2, [sp, #4]
_020214C8:
	ldr r2, [sp, #4]
	cmp r2, #0
	beq _02021508
	ldr r0, [sb, #0x24]
	mov r1, sl
	bl FUN_020218d4
	ldr r0, [sp, #4]
	ldr r1, [sb, #0x24]
	ldr r2, [sb, #0x28]
	add r1, r1, r0
	str r1, [sb, #0x24]
	ldr r1, [sp, #4]
	add sl, sl, r0
	sub r1, r2, r1
	str r1, [sb, #0x28]
	sub r5, r5, r0
_02021508:
	ldr r0, [sb, #0x28]
	cmp r0, #0
	beq _0202152C
	cmp r7, #0
	bne _0202152C
	ldr r0, [sb, #4]
	lsl r0, r0, #0x19
	lsrs r0, r0, #0x1e
	bne _02021550
_0202152C:
	mov r0, sb
	mov r1, fp
	bl FUN_020212cc
	cmp r0, #0
	movne r0, #1
	movne r5, fp
	strbne r0, [sb, #0xd]
	strne fp, [sb, #0x28]
	bne _02021568
_02021550:
	ldr r0, [sp, #4]
	cmp r5, #0
	add r6, r6, r0
	beq _02021568
	cmp r8, #0
	bne _02021478
_02021568:
	cmp r5, #0
	beq _020215C8
	cmp r8, #0
	bne _020215C8
	ldr r7, [sb, #0x1c]
	ldr r8, [sb, #0x20]
	add r2, sl, r5
	add r1, sp, #4
	mov r0, sb
	str sl, [sb, #0x1c]
	str r5, [sb, #0x20]
	str r2, [sb, #0x24]
	bl FUN_020212cc
	cmp r0, #0
	movne r0, #1
	strne r4, [sb, #0x28]
	strbne r0, [sb, #0xd]
	ldreq r0, [sp, #4]
	addeq r6, r6, r0
	mov r0, sb
	str r7, [sb, #0x1c]
	str r8, [sb, #0x20]
	bl FUN_020212a4
	str r4, [sb, #0x28]
_020215C8:
	ldr r0, [sb, #4]
	ldr r1, [sp]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x1e
	cmp r0, #2
	mov r0, r6
	strne r4, [sb, #0x28]
	bl FUN_0201fbc8
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_020215f0
FUN_020215f0: ; 0x020215F0
	push {r3, r4, r5, lr}
	movs r4, r0
	bne _02021604
	bl FUN_02021224
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020215f0
_02021604:
	ldrb r0, [r4, #0xd]
	cmp r0, #0
	bne _02021620
	ldr r0, [r4, #4]
	lsl r1, r0, #0x16
	lsrs r1, r1, #0x1d
	bne _02021628
_02021620:
	mvn r0, #0
	pop {r3, r4, r5, pc}
_02021628:
	lsl r0, r0, #0x1b
	lsr r0, r0, #0x1d
	cmp r0, #1
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [r4, #8]
	lsl r1, r0, #0x1d
	lsr r1, r1, #0x1d
	cmp r1, #3
	bichs r0, r0, #7
	orrhs r0, r0, #2
	strhs r0, [r4, #8]
	ldr r0, [r4, #8]
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r0, #2
	moveq r0, #0
	streq r0, [r4, #0x28]
	ldr r0, [r4, #8]
	lsl r1, r0, #0x1d
	lsr r1, r1, #0x1d
	cmp r1, #1
	bicne r0, r0, #7
	strne r0, [r4, #8]
	movne r0, #0
	popne {r3, r4, r5, pc}
	mov r5, #0
	mov r0, r4
	mov r1, r5
	bl FUN_020212cc
	cmp r0, #0
	movne r0, #1
	strbne r0, [r4, #0xd]
	strne r5, [r4, #0x28]
	subne r0, r0, #2
	popne {r3, r4, r5, pc}
	ldr r1, [r4, #8]
	mov r0, r5
	bic r1, r1, #7
	str r1, [r4, #8]
	str r5, [r4, #0x18]
	str r5, [r4, #0x28]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_020216d4
FUN_020216d4: ; 0x020216D4
	lsr r3, r0, #1
	ldr r2, _0202175C ; =0x55555555
	orr r3, r3, r1, lsl #31
	and r3, r3, r2
	subs ip, r0, r3
	and r2, r2, r1, lsr #1
	ldr r0, _02021760 ; =0x33333333
	sbc r3, r1, r2
	lsr r1, ip, #2
	orr r1, r1, r3, lsl #30
	and r2, ip, r0
	and r1, r1, r0
	adds r2, r2, r1
	and r1, r3, r0
	and r0, r0, r3, lsr #2
	adc r1, r1, r0
	lsr r0, r2, #4
	orr r0, r0, r1, lsl #28
	adds r2, r2, r0
	ldr r0, _02021764 ; =0x0F0F0F0F
	adc r1, r1, r1, lsr #4
	and r3, r2, r0
	and r2, r1, r0
	lsr r0, r3, #8
	orr r0, r0, r2, lsl #24
	adds r1, r3, r0
	adc r2, r2, r2, lsr #8
	lsr r0, r1, #0x10
	orr r0, r0, r2, lsl #16
	adds r1, r1, r0
	adc r0, r2, r2, lsr #16
	adds r0, r1, r0
	and r0, r0, #0xff
	bx lr
	.align 2, 0_0202175C: .word 0x55555555
_02021760: .word 0x33333333
_02021764: .word 0x0F0F0F0F
	arm_func_end FUN_020216d4

	arm_func_start FUN_02021768
FUN_02021768: ; 0x02021768
	push {r0, r1, r2, r3}
	ldr r0, [sp, #4]
	tst r0, #0x80000000
	movne r0, #1
	moveq r0, #0
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02021768

	arm_func_start FUN_02021784
FUN_02021784: ; 0x02021784
	push {r0, r1, r2, r3}
	ldr r2, [sp, #4]
	ldr r0, _020217EC ; =0x7FF00000
	ands r1, r2, r0
	beq _020217C0
	cmp r1, r0
	bne _020217E0
	ldr r0, _020217F0 ; =0x000FFFFF
	tst r2, r0
	ldreq r0, [sp]
	add sp, sp, #0x10
	cmpeq r0, #0
	movne r0, #1
	moveq r0, #2
	bx lr
	arm_func_end FUN_02021784
_020217C0:
	ldr r0, _020217F0 ; =0x000FFFFF
	tst r2, r0
	ldreq r0, [sp]
	add sp, sp, #0x10
	cmpeq r0, #0
	movne r0, #5
	moveq r0, #3
	bx lr
_020217E0:
	mov r0, #4
	add sp, sp, #0x10
	bx lr
	.align 2, 0_020217EC: .word 0x7FF00000
_020217F0: .word 0x000FFFFF

	arm_func_start FUN_020217f4
FUN_020217f4: ; 0x020217F4
	cmp r1, #0
	moveq r0, #0
	bxeq lr
	cmp r2, #0
	mvneq r0, #0
	bxeq lr
	cmp r0, #0
	ldrbne r2, [r1]
	strhne r2, [r0]
	ldrb r0, [r1]
	cmp r0, #0
	moveq r0, #0
	movne r0, #1
	bx lr
	arm_func_end FUN_020217f4

	arm_func_start FUN_0202182c
FUN_0202182c: ; 0x0202182C
	cmp r0, #0
	moveq r0, #0
	strbne r1, [r0]
	movne r0, #1
	bx lr
	arm_func_end FUN_0202182c

	arm_func_start FUN_02021840
FUN_02021840: ; 0x02021840
	push {r3, lr}
	ldr r2, _02021858 ; =0x0208F188
	ldr r2, [r2, #8]
	ldr r2, [r2, #4]
	blx r2
	pop {r3, pc}
	.align 2, 0_02021858: .word 0x0208F188
	arm_func_end FUN_02021840

	arm_func_start FUN_0202185c
FUN_0202185c: ; 0x0202185C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r4, r0
	mov sb, r1
	cmpne sb, #0
	mov r8, r2
	mov r7, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r6, sp, #0
	arm_func_end FUN_0202185c
_02021880:
	ldrh r1, [sb]
	cmp r1, #0
	moveq r0, #0
	strbeq r0, [r4, r7]
	beq _020218CC
	mov r0, r6
	add sb, sb, #2
	bl FUN_02021840
	mov r5, r0
	add r0, r7, r5
	cmp r0, r8
	bhi _020218CC
	mov r1, r6
	mov r2, r5
	add r0, r4, r7
	bl _strncpy
	add r7, r7, r5
	cmp r7, r8
	bls _02021880
_020218CC:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_020218d4
FUN_020218d4: ; 0x020218D4
	mov ip, r0
	cmp r2, #0
	bxeq lr
	arm_func_end FUN_020218d4
_020218E0:
	ldrb r3, [r1], #1
	subs r2, r2, #1
	strb r3, [ip], #1
	bne _020218E0
	bx lr

	arm_func_start FUN_020218f4
FUN_020218f4: ; 0x020218F4
	cmp r1, r0
	blo _0202191C
	mov ip, r0
	cmp r2, #0
	bxeq lr
	arm_func_end FUN_020218f4
_02021908:
	ldrb r3, [r1], #1
	subs r2, r2, #1
	strb r3, [ip], #1
	bne _02021908
	bx lr
_0202191C:
	cmp r2, #0
	add r3, r1, r2
	add ip, r0, r2
	bxeq lr
_0202192C:
	ldrb r1, [r3, #-1]!
	subs r2, r2, #1
	strb r1, [ip, #-1]!
	bne _0202192C
	bx lr

	arm_func_start FUN_02021940
FUN_02021940: ; 0x02021940
	push {r4, lr}
	mov r4, r0
	bl FUN_020219ec
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02021940

	arm_func_start FUN_02021954
FUN_02021954: ; 0x02021954
	cmp r2, #0
	and r3, r1, #0xff
	beq _02021978
	arm_func_end FUN_02021954
_02021960:
	ldrb r1, [r0], #1
	cmp r1, r3
	subeq r0, r0, #1
	bxeq lr
	subs r2, r2, #1
	bne _02021960
_02021978:
	mov r0, #0
	bx lr

	arm_func_start FUN_02021980
FUN_02021980: ; 0x02021980
	cmp r2, #0
	and r3, r1, #0xff
	add r0, r0, r2
	beq _020219A4
	arm_func_end FUN_02021980
_02021990:
	ldrb r1, [r0, #-1]!
	cmp r1, r3
	bxeq lr
	subs r2, r2, #1
	bne _02021990
_020219A4:
	mov r0, #0
	bx lr

	arm_func_start FUN_020219ac
FUN_020219ac: ; 0x020219AC
	cmp r2, #0
	beq _020219E4
	arm_func_end FUN_020219ac
_020219B4:
	ldrb ip, [r0], #1
	ldrb r3, [r1], #1
	cmp ip, r3
	beq _020219DC
	ldrb r2, [r0, #-1]
	ldrb r0, [r1, #-1]
	cmp r2, r0
	mvnlo r0, #0
	movhs r0, #1
	bx lr
_020219DC:
	subs r2, r2, #1
	bne _020219B4
_020219E4:
	mov r0, #0
	bx lr

	arm_func_start FUN_020219ec
FUN_020219ec: ; 0x020219EC
	cmp r2, #0x20
	and r3, r1, #0xff
	blo _02021A7C
	rsb r1, r0, #0
	ands ip, r1, #3
	beq _02021A18
	sub r2, r2, ip
	and r1, r3, #0xff
	arm_func_end FUN_020219ec
_02021A0C:
	strb r1, [r0], #1
	subs ip, ip, #1
	bne _02021A0C
_02021A18:
	cmp r3, #0
	lslne r1, r3, #0x10
	orrne r1, r1, r3, lsl #24
	orrne r1, r1, r3, lsl #8
	orrne r3, r3, r1
	lsrs r1, r2, #5
	beq _02021A60
_02021A34:
	str r3, [r0]
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r3, [r0, #0xc]
	str r3, [r0, #0x10]
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	str r3, [r0, #0x1c]
	add r0, r0, #0x20
	subs r1, r1, #1
	bne _02021A34
_02021A60:
	and r1, r2, #0x1f
	lsrs r1, r1, #2
	beq _02021A78
_02021A6C:
	str r3, [r0], #4
	subs r1, r1, #1
	bne _02021A6C
_02021A78:
	and r2, r2, #3
_02021A7C:
	cmp r2, #0
	bxeq lr
	and r1, r3, #0xff
_02021A88:
	strb r1, [r0], #1
	subs r2, r2, #1
	bne _02021A88
	bx lr

	arm_func_start FUN_02021a98
FUN_02021a98: ; 0x02021A98
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	ldrb lr, [r0, #1]
	mov r5, #0
	mov r6, #1
	mov r4, r2
	strb r6, [sp]
	strb r5, [sp, #1]
	strb r5, [sp, #2]
	strb r5, [sp, #3]
	strb r5, [sp, #4]
	str r5, [sp, #8]
	str r5, [sp, #0xc]
	cmp lr, #0x25
	add ip, r0, #1
	bne _02021AF4
	add r0, sp, #0
	strb lr, [sp, #5]
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	add sp, sp, #0x10
	add r0, ip, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02021a98
_02021AF4:
	mov r0, #2
	mov r3, r0
_02021AFC:
	mov r7, r6
	cmp lr, #0x2b
	bgt _02021B2C
	bge _02021B54
	cmp lr, #0x23
	bgt _02021B84
	cmp lr, #0x20
	blt _02021B84
	beq _02021B5C
	cmp lr, #0x23
	beq _02021B6C
	b _02021B84
_02021B2C:
	cmp lr, #0x30
	bgt _02021B84
	cmp lr, #0x2d
	blt _02021B84
	beq _02021B4C
	cmp lr, #0x30
	beq _02021B74
	b _02021B84
_02021B4C:
	strb r5, [sp]
	b _02021B88
_02021B54:
	strb r6, [sp, #1]
	b _02021B88
_02021B5C:
	ldrb r2, [sp, #1]
	cmp r2, #1
	strbne r3, [sp, #1]
	b _02021B88
_02021B6C:
	strb r6, [sp, #3]
	b _02021B88
_02021B74:
	ldrb r2, [sp]
	cmp r2, #0
	strbne r0, [sp]
	b _02021B88
_02021B84:
	mov r7, r5
_02021B88:
	cmp r7, #0
	ldrbne lr, [ip, #1]!
	bne _02021AFC
	cmp lr, #0x2a
	mov r0, #0
	mov r3, #0xff
	bne _02021BD0
	ldr r2, [r1]
	ldrb lr, [ip, #1]!
	add r2, r2, #4
	str r2, [r1]
	ldr r2, [r2, #-4]
	cmp r2, #0
	str r2, [sp, #8]
	rsblt r2, r2, #0
	strblt r0, [sp]
	strlt r2, [sp, #8]
	b _02021C0C
_02021BD0:
	ldr r6, _02021F9C ; =0x0208C038
	mov r2, #0xa
	b _02021BF0
_02021BDC:
	ldr r5, [sp, #8]
	sub r7, lr, #0x30
	mla r7, r5, r2, r7
	ldrb lr, [ip, #1]!
	str r7, [sp, #8]
_02021BF0:
	cmp lr, #0x80
	movhs r5, r0
	lsllo r5, lr, #1
	ldrhlo r5, [r6, r5]
	andlo r5, r5, #8
	cmp r5, #0
	bne _02021BDC
_02021C0C:
	ldr r2, [sp, #8]
	ldr r0, _02021FA0 ; =0x000001FD
	cmp r2, r0
	mov r2, #1
	mov r0, #0
	ble _02021C40
	add r0, sp, #0
	strb r3, [sp, #5]
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	add sp, sp, #0x10
	add r0, ip, #1
	pop {r3, r4, r5, r6, r7, pc}
_02021C40:
	cmp lr, #0x2e
	bne _02021CB8
	ldrb lr, [ip, #1]!
	strb r2, [sp, #2]
	cmp lr, #0x2a
	bne _02021C7C
	ldr r5, [r1]
	ldrb lr, [ip, #1]!
	add r5, r5, #4
	str r5, [r1]
	ldr r1, [r5, #-4]
	cmp r1, #0
	str r1, [sp, #0xc]
	strblt r0, [sp, #2]
	b _02021CB8
_02021C7C:
	ldr r6, _02021F9C ; =0x0208C038
	mov r1, #0xa
	b _02021C9C
_02021C88:
	ldr r5, [sp, #0xc]
	sub lr, lr, #0x30
	mla r7, r5, r1, lr
	ldrb lr, [ip, #1]!
	str r7, [sp, #0xc]
_02021C9C:
	cmp lr, #0x80
	movhs r5, r0
	lsllo r5, lr, #1
	ldrhlo r5, [r6, r5]
	andlo r5, r5, #8
	cmp r5, #0
	bne _02021C88
_02021CB8:
	cmp lr, #0x6c
	mov r0, #1
	bgt _02021CF0
	cmp lr, #0x68
	blt _02021CE4
	beq _02021D0C
	cmp lr, #0x6a
	beq _02021D50
	cmp lr, #0x6c
	beq _02021D24
	b _02021D68
_02021CE4:
	cmp lr, #0x4c
	beq _02021D44
	b _02021D68
_02021CF0:
	cmp lr, #0x74
	bgt _02021D00
	beq _02021D58
	b _02021D68
_02021D00:
	cmp lr, #0x7a
	beq _02021D60
	b _02021D68
_02021D0C:
	ldrb r1, [ip, #1]
	mov r5, #2
	strb r5, [sp, #4]
	cmp r1, #0x68
	strbeq r0, [sp, #4]
	b _02021D3C
_02021D24:
	ldrb r1, [ip, #1]
	mov r5, #3
	strb r5, [sp, #4]
	cmp r1, #0x6c
	moveq r1, #4
	strbeq r1, [sp, #4]
_02021D3C:
	ldrbeq lr, [ip, #1]!
	b _02021D6C
_02021D44:
	mov r1, #9
_02021D48:
	strb r1, [sp, #4]
	b _02021D6C
_02021D50:
	mov r1, #6
	b _02021D48
_02021D58:
	mov r1, #8
	b _02021D48
_02021D60:
	mov r1, #7
	b _02021D48
_02021D68:
	mov r0, #0
_02021D6C:
	cmp r0, #0
	ldrbne lr, [ip, #1]!
	strb lr, [sp, #5]
	cmp lr, #0x61
	bgt _02021DC0
	bge _02021E88
	cmp lr, #0x47
	bgt _02021DB4
	subs r0, lr, #0x41

	arm_func_start switchD
switchD: ; 0x02021D90
	addpl pc, pc, r0, lsl #2
	b _02021F80
	arm_func_end switchD
_02021D98: ; jump table
	b _02021E88 ; case 0

	arm_func_start caseD_42
caseD_42: ; 0x02021D9C
	b _02021F80
	arm_func_end caseD_42

	arm_func_start caseD_43
caseD_43: ; 0x02021DA0
	b _02021F80
	arm_func_end caseD_43

	arm_func_start caseD_44
caseD_44: ; 0x02021DA4
	b _02021F80
	arm_func_end caseD_44

	arm_func_start caseD_45
caseD_45: ; 0x02021DA8
	b _02021ECC
	arm_func_end caseD_45

	arm_func_start caseD_46
caseD_46: ; 0x02021DAC
	b _02021E64
	arm_func_end caseD_46

	arm_func_start caseD_47
caseD_47: ; 0x02021DB0
	b _02021EC0
	arm_func_end caseD_47
_02021DB4:
	cmp lr, #0x58
	beq _02021E34
	b _02021F80
_02021DC0:
	cmp lr, #0x63
	bgt _02021DD0
	beq _02021F24
	b _02021F80
_02021DD0:
	sub r0, lr, #0x64
	cmp r0, #0x14

	arm_func_start switchD
switchD: ; 0x02021DD8
	addls pc, pc, r0, lsl #2
	b _02021F80
	arm_func_end switchD
_02021DE0: ; jump table
	b _02021E34 ; case 0

	arm_func_start caseD_65
caseD_65: ; 0x02021DE4
	b _02021ECC
	arm_func_end caseD_65

	arm_func_start caseD_66
caseD_66: ; 0x02021DE8
	b _02021E64
	arm_func_end caseD_66

	arm_func_start caseD_67
caseD_67: ; 0x02021DEC
	b _02021EC0
	arm_func_end caseD_67

	arm_func_start caseD_68
caseD_68: ; 0x02021DF0
	b _02021F80
	arm_func_end caseD_68

	arm_func_start caseD_69
caseD_69: ; 0x02021DF4
	b _02021E34
	arm_func_end caseD_69

	arm_func_start caseD_6a
caseD_6a: ; 0x02021DF8
	b _02021F80
	arm_func_end caseD_6a

	arm_func_start caseD_6b
caseD_6b: ; 0x02021DFC
	b _02021F80
	arm_func_end caseD_6b

	arm_func_start caseD_6c
caseD_6c: ; 0x02021E00
	b _02021F80
	arm_func_end caseD_6c

	arm_func_start caseD_6d
caseD_6d: ; 0x02021E04
	b _02021F80
	arm_func_end caseD_6d

	arm_func_start caseD_6e
caseD_6e: ; 0x02021E08
	b _02021F70
	arm_func_end caseD_6e

	arm_func_start caseD_6f
caseD_6f: ; 0x02021E0C
	b _02021E34
	arm_func_end caseD_6f

	arm_func_start caseD_70
caseD_70: ; 0x02021E10
	b _02021F04
	arm_func_end caseD_70

	arm_func_start caseD_71
caseD_71: ; 0x02021E14
	b _02021F80
	arm_func_end caseD_71

	arm_func_start caseD_72
caseD_72: ; 0x02021E18
	b _02021F80
	arm_func_end caseD_72

	arm_func_start caseD_73
caseD_73: ; 0x02021E1C
	b _02021F50
	arm_func_end caseD_73

	arm_func_start caseD_74
caseD_74: ; 0x02021E20
	b _02021F80
	arm_func_end caseD_74

	arm_func_start caseD_75
caseD_75: ; 0x02021E24
	b _02021E34
	arm_func_end caseD_75

	arm_func_start caseD_76
caseD_76: ; 0x02021E28
	b _02021F80
	arm_func_end caseD_76

	arm_func_start caseD_77
caseD_77: ; 0x02021E2C
	b _02021F80
	arm_func_end caseD_77

	arm_func_start caseD_78
caseD_78: ; 0x02021E30
	b _02021E34
	arm_func_end caseD_78
_02021E34:
	ldrb r0, [sp, #4]
	cmp r0, #9
	strbeq r3, [sp, #5]
	beq _02021F84
	ldrb r0, [sp, #2]
	cmp r0, #0
	streq r2, [sp, #0xc]
	beq _02021F84
	ldrb r0, [sp]
	cmp r0, #2
	strbeq r2, [sp]
	b _02021F84
_02021E64:
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	strbeq r3, [sp, #5]
	beq _02021F84
	b _02021EF0
_02021E88:
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #0xd
	streq r0, [sp, #0xc]
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	beq _02021EBC
	cmp r0, #1
	bne _02021F84
_02021EBC:
	b _02021F80
_02021EC0:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	streq r2, [sp, #0xc]
_02021ECC:
	ldrb r0, [sp, #4]
	cmp r0, #2
	cmpne r0, #1
	cmpne r0, #6
	cmpne r0, #7
	cmpne r0, #8
	cmpne r0, #4
	strbeq r3, [sp, #5]
	beq _02021F84
_02021EF0:
	ldrb r0, [sp, #2]
	cmp r0, #0
	moveq r0, #6
	streq r0, [sp, #0xc]
	b _02021F84
_02021F04:
	mov r3, #0x78
	mov r1, #3
	mov r0, #8
	strb r3, [sp, #5]
	strb r2, [sp, #3]
	strb r1, [sp, #4]
	str r0, [sp, #0xc]
	b _02021F84
_02021F24:
	ldrb r1, [sp, #4]
	cmp r1, #3
	moveq r0, #5
	strbeq r0, [sp, #4]
	beq _02021F84
	ldrb r0, [sp, #2]
	cmp r0, #0
	bne _02021F4C
	cmp r1, #0
	beq _02021F84
_02021F4C:
	b _02021F80
_02021F50:
	ldrb r0, [sp, #4]
	cmp r0, #3
	moveq r0, #5
	strbeq r0, [sp, #4]
	beq _02021F84
	cmp r0, #0
	strbne r3, [sp, #5]
	b _02021F84
_02021F70:
	ldrb r0, [sp, #4]
	cmp r0, #9
	strbeq r3, [sp, #5]
	b _02021F84
_02021F80:
	strb r3, [sp, #5]
_02021F84:
	add r0, sp, #0
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	add r0, ip, #1
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02021F9C: .word 0x0208C038
_02021FA0: .word 0x000001FD

	arm_func_start FUN_02021fa4
FUN_02021fa4: ; 0x02021FA4
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	movs sl, r0
	mov r0, #0
	mov r5, r1
	str r0, [sp, #0xc]
	ldr r7, [sp, #0x4c]
	mov r6, r0
	strb r0, [r5, #-1]!
	ldrb r0, [sp, #0x43]
	str r1, [sp]
	ldrb r8, [sp, #0x45]
	str r0, [sp, #4]
	ldr r0, [sp, #0x48]
	ldrb fp, [sp, #0x41]
	str r0, [sp, #8]
	cmpeq r7, #0
	bne _02022018
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _02022004
	cmp r8, #0x6f
	beq _02022018
	arm_func_end FUN_02021fa4
_02022004:
	add sp, sp, #0x10
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022018:
	cmp r8, #0x69
	bgt _02022040
	bge _02022074
	cmp r8, #0x58
	bgt _02022034
	beq _020220A4
	b _020220AC
_02022034:
	cmp r8, #0x64
	beq _02022074
	b _020220AC
_02022040:
	cmp r8, #0x6f
	bgt _02022054
	moveq r4, #8
	moveq fp, #0
	b _020220AC
_02022054:
	cmp r8, #0x78
	bgt _020220AC
	cmp r8, #0x75
	blt _020220AC
	beq _0202209C
	cmp r8, #0x78
	beq _020220A4
	b _020220AC
_02022074:
	cmp sl, #0
	mov r4, #0xa
	bge _020220AC
	asr r0, sl, #0x1f
	cmp r0, #0x80000000
	mov r0, #1
	cmpeq sl, #0
	rsbne sl, sl, #0
	str r0, [sp, #0xc]
	b _020220AC
_0202209C:
	mov r4, #0xa
	b _020220A8
_020220A4:
	mov r4, #0x10
_020220A8:
	mov fp, #0
_020220AC:
	mov r0, sl
	mov r1, r4
	bl FUN_0201fbc8
	mov sb, r1
	mov r0, sl
	mov r1, r4
	bl FUN_0201fbc8
	cmp sb, #0xa
	mov sl, r0
	addlt sb, sb, #0x30
	blt _020220E4
	cmp r8, #0x78
	addeq sb, sb, #0x57
	addne sb, sb, #0x37
_020220E4:
	cmp sl, #0
	strb sb, [r5, #-1]!
	add r6, r6, #1
	bne _020220AC
	cmp r4, #8
	bne _02022118
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrbne r0, [r5]
	cmpne r0, #0x30
	movne r0, #0x30
	strbne r0, [r5, #-1]!
	addne r6, r6, #1
_02022118:
	ldrb r0, [sp, #0x40]
	cmp r0, #2
	bne _0202214C
	ldr r0, [sp, #0xc]
	ldr r7, [sp, #8]
	cmp r0, #0
	cmpeq fp, #0
	subne r7, r7, #1
	cmp r4, #0x10
	bne _0202214C
	ldr r0, [sp, #4]
	cmp r0, #0
	subne r7, r7, #2
_0202214C:
	ldr r0, [sp]
	sub r1, r0, r5
	ldr r0, _020221F0 ; =0x000001FD
	add r1, r7, r1
	cmp r1, r0
	addgt sp, sp, #0x10
	movgt r0, #0
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	cmp r6, r7
	bge _02022190
	mov r0, #0x30
_02022180:
	add r6, r6, #1
	cmp r6, r7
	strb r0, [r5, #-1]!
	blt _02022180
_02022190:
	cmp r4, #0x10
	bne _020221AC
	ldr r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x30
	strbne r8, [r5, #-1]
	strbne r0, [r5, #-2]!
_020221AC:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r5, #-1]!
	bne _020221DC
	cmp fp, #1
	moveq r0, #0x2b
	strbeq r0, [r5, #-1]!
	beq _020221DC
	cmp fp, #2
	moveq r0, #0x20
	strbeq r0, [r5, #-1]!
_020221DC:
	mov r0, r5
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_020221F0: .word 0x000001FD

	arm_func_start FUN_020221f4
FUN_020221f4: ; 0x020221F4
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	mov sb, r1
	mov r1, #0
	mov sl, r0
	mov r7, r2
	mov r0, r1
	strb r0, [r7, #-1]!
	ldr r0, [sp, #0x58]
	cmp sb, #0
	str r0, [sp, #0x10]
	ldrb r0, [sp, #0x4f]
	cmpeq sl, #0
	str r2, [sp]
	str r0, [sp, #4]
	ldr r0, [sp, #0x54]
	str r1, [sp, #0x14]
	str r0, [sp, #8]
	ldrb r0, [sp, #0x4d]
	mov r8, r1
	ldrb fp, [sp, #0x51]
	str r0, [sp, #0xc]
	ldreq r0, [sp, #0x10]
	cmpeq r0, #0
	bne _02022284
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _02022270
	cmp fp, #0x6f
	beq _02022284
	arm_func_end FUN_020221f4
_02022270:
	add sp, sp, #0x18
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022284:
	cmp fp, #0x69
	bgt _020222AC
	bge _020222E4
	cmp fp, #0x58
	bgt _020222A0
	beq _02022328
	b _02022334
_020222A0:
	cmp fp, #0x64
	beq _020222E4
	b _02022334
_020222AC:
	cmp fp, #0x6f
	bgt _020222C4
	moveq r5, #0
	streq r5, [sp, #0xc]
	moveq r6, #8
	b _02022334
_020222C4:
	cmp fp, #0x78
	bgt _02022334
	cmp fp, #0x75
	blt _02022334
	beq _02022318
	cmp fp, #0x78
	beq _02022328
	b _02022334
_020222E4:
	subs r0, sl, #0
	sbcs r0, sb, #0
	mov r6, #0xa
	mov r5, #0
	bge _02022334
	cmp sb, #0x80000000
	cmpeq sl, r5
	beq _0202230C
	rsbs sl, sl, #0
	rsc sb, sb, #0
_0202230C:
	mov r0, #1
	str r0, [sp, #0x14]
	b _02022334
_02022318:
	mov r5, #0
	str r5, [sp, #0xc]
	mov r6, #0xa
	b _02022334
_02022328:
	mov r5, #0
	str r5, [sp, #0xc]
	mov r6, #0x10
_02022334:
	mov r0, sl
	mov r1, sb
	mov r2, r6
	mov r3, r5
	bl FUN_0201f960
	mov r4, r0
	mov r0, sl
	mov r1, sb
	mov r2, r6
	mov r3, r5
	bl FUN_0201f954
	mov sl, r0
	cmp r4, #0xa
	mov sb, r1
	addlt r0, r4, #0x30
	blt _02022380
	add r0, r4, #0x57
	cmp fp, #0x78
	addne r0, r4, #0x37
_02022380:
	strb r0, [r7, #-1]!
	cmp sb, #0
	cmpeq sl, #0
	add r8, r8, #1
	bne _02022334
	cmp r5, #0
	cmpeq r6, #8
	bne _020223BC
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrbne r0, [r7]
	cmpne r0, #0x30
	movne r0, #0x30
	strbne r0, [r7, #-1]!
	addne r8, r8, #1
_020223BC:
	ldrb r0, [sp, #0x4c]
	cmp r0, #2
	bne _0202240C
	ldr r0, [sp, #8]
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	cmp r0, #0
	ldreq r0, [sp, #0xc]
	cmpeq r0, #0
	ldrne r0, [sp, #0x10]
	subne r0, r0, #1
	strne r0, [sp, #0x10]
	cmp r5, #0
	cmpeq r6, #0x10
	bne _0202240C
	ldr r0, [sp, #4]
	cmp r0, #0
	ldrne r0, [sp, #0x10]
	subne r0, r0, #2
	strne r0, [sp, #0x10]
_0202240C:
	ldr r0, [sp]
	ldr r1, _020224C4 ; =0x000001FD
	sub r2, r0, r7
	ldr r0, [sp, #0x10]
	add r0, r0, r2
	cmp r0, r1
	addgt sp, sp, #0x18
	movgt r0, #0
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	ldr r0, [sp, #0x10]
	cmp r8, r0
	bge _0202245C
	mov r1, #0x30
_02022448:
	ldr r0, [sp, #0x10]
	add r8, r8, #1
	cmp r8, r0
	strb r1, [r7, #-1]!
	blt _02022448
_0202245C:
	cmp r5, #0
	cmpeq r6, #0x10
	bne _0202247C
	ldr r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x30
	strbne fp, [r7, #-1]
	strbne r0, [r7, #-2]!
_0202247C:
	ldr r0, [sp, #0x14]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r7, #-1]!
	bne _020224B0
	ldr r0, [sp, #0xc]
	cmp r0, #1
	moveq r0, #0x2b
	strbeq r0, [r7, #-1]!
	beq _020224B0
	cmp r0, #2
	moveq r0, #0x20
	strbeq r0, [r7, #-1]!
_020224B0:
	mov r0, r7
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_020224C4: .word 0x000001FD

	arm_func_start FUN_020224c8
FUN_020224c8: ; 0x020224C8
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x4c
	ldr r6, [sp, #0x88]
	ldr r0, _0202294C ; =0x000001FD
	ldrb r5, [sp, #0x81]
	cmp r6, r0
	ldr r0, [sp, #0x70]
	ldrb fp, [sp, #0x7f]
	str r0, [sp, #8]
	ldr r0, [sp, #0x74]
	ldrb r4, [sp, #0x7d]
	str r0, [sp, #0xc]
	mov r7, #0
	mov r8, r2
	addgt sp, sp, #0x4c
	movgt r0, r7
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	ldr r1, [sp, #8]
	mov sb, #0x20
	ldr r2, [sp, #0xc]
	add r0, sp, #0x10
	add r3, sp, #0x14
	strb r7, [sp, #0x10]
	strh sb, [sp, #0x12]
	bl FUN_02024fbc
	ldrb r0, [sp, #0x19]
	cmp r0, #0x30
	beq _02022558
	cmp r0, #0x49
	beq _02022560
	cmp r0, #0x4e
	beq _02022664
	b _02022768
	arm_func_end FUN_020224c8
_02022558:
	strh r7, [sp, #0x16]
	b _02022768
_02022560:
	ldrb r0, [sp, #0x14]
	cmp r0, #0
	beq _020225F0
	cmp r5, #0x41
	sub r0, r8, #5
	bne _020225B4
	ldr r3, _02022950 ; =0x0208F350
	add sp, sp, #0x4c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020225B4:
	ldr r3, _02022954 ; =0x0208F358
	add sp, sp, #0x4c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020225F0:
	cmp r5, #0x41
	sub r0, r8, #4
	bne _02022630
	ldr r3, _02022958 ; =0x0208F360
	add sp, sp, #0x4c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022630:
	ldr r3, _0202295C ; =0x0208F364
	add sp, sp, #0x4c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022664:
	ldrb r0, [sp, #0x14]
	cmp r0, #0
	beq _020226F4
	cmp r5, #0x41
	sub r0, r8, #5
	bne _020226B8
	ldr r3, _02022960 ; =0x0208F368
	add sp, sp, #0x4c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020226B8:
	ldr r3, _02022964 ; =0x0208F370
	add sp, sp, #0x4c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020226F4:
	cmp r5, #0x41
	sub r0, r8, #4
	bne _02022734
	ldr r3, _02022968 ; =0x0208F378
	add sp, sp, #0x4c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022734:
	ldr r3, _0202296C ; =0x0208F37C
	add sp, sp, #0x4c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022768:
	mov r3, #0
	mov r1, #1
	mov r0, #0x64
	add r7, sp, #0x70
	strb r1, [sp, #0x3c]
	strb r1, [sp, #0x3d]
	strb r3, [sp, #0x3e]
	strb r3, [sp, #0x3f]
	strb r3, [sp, #0x40]
	str r3, [sp, #0x44]
	str r1, [sp, #0x48]
	strb r0, [sp, #0x41]
_02022798:
	rsb r1, r3, #7
	ldrb r2, [r7, r3]
	ldrb r0, [r7, r1]
	strb r0, [r7, r3]
	add r3, r3, #1
	strb r2, [r7, r1]
	cmp r3, #4
	blt _02022798
	ldrb r1, [sp, #0x71]
	ldrb r2, [sp, #0x70]
	ldr r0, _02022970 ; =0x000007FF
	lsl r1, r1, #0x11
	orr r1, r1, r2, lsl #25
	ands r1, r0, r1, lsr #21
	rsbne r0, r0, #0x400
	addne sb, r1, r0
	add r0, sp, #0x3c
	sub r7, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm r7, {r0, r1, r2, r3}
	moveq sb, #0
	mov r0, sb
	mov r1, r8
	ldm r7, {r2, r3}
	bl FUN_02021fa4
	cmp r5, #0x61
	sub r7, r0, #1
	moveq r0, #0x70
	movne r0, #0x50
	strb r0, [r7]
	lsl r0, r6, #2
	mov sb, r6
	cmp r6, #1
	add sl, r0, #0xb
	add lr, sp, #0x70
	blt _020228B4
	mov r0, #0x30
_0202282C:
	cmp sl, #0x40
	bge _0202289C
	ldrb r1, [lr, sl, asr #3]
	and r2, sl, #7
	rsb r3, r2, #7
	asr r2, r1, r3
	sub r1, sl, #4
	and r8, r2, #0xff
	bic r1, r1, #7
	bic r2, sl, #7
	add ip, lr, sl, asr #3
	cmp r2, r1
	ldrbne r1, [ip, #-1]
	lslne r1, r1, #8
	asrne r1, r1, r3
	andne r1, r1, #0xff
	orrne r8, r8, r1
	and r1, r8, #0xf
	cmp r1, #0xa
	addlo r1, r1, #0x30
	andlo r8, r1, #0xff
	blo _020228A0
	cmp r5, #0x61
	addeq r1, r1, #0x57
	andeq r8, r1, #0xff
	addne r1, r1, #0x37
	andne r8, r1, #0xff
	b _020228A0
_0202289C:
	mov r8, r0
_020228A0:
	sub sb, sb, #1
	cmp sb, #1
	strb r8, [r7, #-1]!
	sub sl, sl, #4
	bge _0202282C
_020228B4:
	cmp r6, #0
	cmpeq fp, #0
	movne r0, #0x2e
	strbne r0, [r7, #-1]!
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl FUN_02028198
	mov r2, r0
	mov r0, #0
	mov r3, r1
	mov r1, r0
	bl FUN_0201f53c
	movne r0, #0x31
	moveq r0, #0x30
	strb r0, [r7, #-1]!
	mov r0, #0x78
	cmp r5, #0x61
	movne r0, #0x58
	strb r0, [r7, #-1]!
	mov r0, #0x30
	strb r0, [r7, #-1]!
	ldrb r0, [sp, #0x14]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r7, #-1]!
	bne _02022938
	cmp r4, #1
	moveq r0, #0x2b
	strbeq r0, [r7, #-1]!
	beq _02022938
	cmp r4, #2
	moveq r0, #0x20
	strbeq r0, [r7, #-1]!
_02022938:
	mov r0, r7
	add sp, sp, #0x4c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_0202294C: .word 0x000001FD
_02022950: .word 0x0208F350
_02022954: .word 0x0208F358
_02022958: .word 0x0208F360
_0202295C: .word 0x0208F364
_02022960: .word 0x0208F368
_02022964: .word 0x0208F370
_02022968: .word 0x0208F378
_0202296C: .word 0x0208F37C
_02022970: .word 0x000007FF

	arm_func_start FUN_02022974
FUN_02022974: ; 0x02022974
	push {r3, r4, r5, lr}
	cmp r1, #0
	mov r2, #1
	bge _0202299C
	arm_func_end FUN_02022974
_02022984:
	mov r1, #0x30
	mov r3, #0
	strb r2, [r0, #4]
	strb r1, [r0, #5]
	strh r3, [r0, #2]
	pop {r3, r4, r5, pc}
_0202299C:
	ldrb r4, [r0, #4]
	cmp r1, r4
	popge {r3, r4, r5, pc}
	add lr, r0, #5
	add r3, lr, r1
	add r3, r3, #1
	ldrb ip, [r3, #-1]!
	sub ip, ip, #0x30
	and ip, ip, #0xff
	cmp ip, #5
	bne _020229F8
	add r4, lr, r4
_020229CC:
	sub r4, r4, #1
	cmp r4, r3
	bls _020229E4
	ldrb ip, [r4]
	cmp ip, #0x30
	beq _020229CC
_020229E4:
	cmp r4, r3
	ldrbeq ip, [r3, #-1]
	andeq r5, ip, #1
	movne r5, #1
	b _02022A00
_020229F8:
	movhi r5, r2
	movls r5, #0
_02022A00:
	cmp r1, #0
	beq _02022A54
	mov ip, #0
_02022A0C:
	ldrb lr, [r3, #-1]!
	sub lr, lr, #0x30
	add lr, lr, r5
	and r4, lr, #0xff
	mov r5, r2
	cmp r4, #9
	movls r5, ip
	cmp r5, #0
	bne _02022A38
	cmp r4, #0
	bne _02022A40
_02022A38:
	sub r1, r1, #1
	b _02022A4C
_02022A40:
	add ip, r4, #0x30
	strb ip, [r3]
	b _02022A54
_02022A4C:
	cmp r1, #0
	bne _02022A0C
_02022A54:
	cmp r5, #0
	beq _02022A78
	ldrsh r3, [r0, #2]
	mov r1, #0x31
	strb r2, [r0, #4]
	add r3, r3, #1
	strb r1, [r0, #5]
	strh r3, [r0, #2]
	pop {r3, r4, r5, pc}
_02022A78:
	cmp r1, #0
	beq _02022984
	strb r1, [r0, #4]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02022a88
FUN_02022a88: ; 0x02022A88
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	ldr r7, [sp, #0x68]
	ldr r3, _0202316C ; =0x000001FD
	ldrb r6, [sp, #0x61]
	ldrb r5, [sp, #0x5f]
	ldrb r4, [sp, #0x5d]
	cmp r7, r3
	mov r8, r0
	mov ip, #0
	mov fp, r1
	mov sb, r2
	addgt sp, sp, #0x2c
	movgt r0, ip
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	mov sl, #0x20
	add r0, sp, #0
	add r3, sp, #4
	mov r1, r8
	mov r2, fp
	strb ip, [sp]
	strh sl, [sp, #2]
	bl FUN_02024fbc
	ldrb r0, [sp, #8]
	add r1, sp, #9
	add r1, r1, r0
	mov r0, #0
	b _02022B1C
	arm_func_end FUN_02022a88
_02022B04:
	ldrb r3, [sp, #8]
	ldrsh r2, [sp, #6]
	sub r3, r3, #1
	add r2, r2, #1
	strb r3, [sp, #8]
	strh r2, [sp, #6]
_02022B1C:
	ldrb r2, [sp, #8]
	cmp r2, #1
	bls _02022B34
	ldrb r2, [r1, #-1]!
	cmp r2, #0x30
	beq _02022B04
_02022B34:
	ldrb r1, [sp, #9]
	mov sl, #0x30
	cmp r1, #0x30
	beq _02022B58
	cmp r1, #0x49
	beq _02022B60
	cmp r1, #0x4e
	beq _02022CA0
	b _02022DD4
_02022B58:
	strh r0, [sp, #6]
	b _02022DD4
_02022B60:
	mov r2, #0
	mov r0, r8
	mov r1, fp
	mov r3, r2
	bl FUN_0201f414
	bhs _02022C14
	cmp r6, #0x80
	movhs r1, #0
	ldrlo r1, _02023170 ; =0x0208C038
	lsllo r2, r6, #1
	ldrhlo r1, [r1, r2]
	sub r0, sb, #5
	andlo r1, r1, #0x200
	cmp r1, #0
	beq _02022BD8
	ldr r3, _02023174 ; =0x0208F350
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022BD8:
	ldr r3, _02023178 ; =0x0208F358
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022C14:
	cmp r6, #0x80
	movhs r1, #0
	ldrlo r1, _02023170 ; =0x0208C038
	lsllo r2, r6, #1
	ldrhlo r1, [r1, r2]
	sub r0, sb, #4
	andlo r1, r1, #0x200
	cmp r1, #0
	beq _02022C6C
	ldr r3, _0202317C ; =0x0208F360
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022C6C:
	ldr r3, _02023180 ; =0x0208F364
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022CA0:
	ldrb r0, [sp, #4]
	cmp r0, #0
	beq _02022D48
	cmp r6, #0x80
	movhs r1, #0
	ldrlo r1, _02023170 ; =0x0208C038
	lsllo r2, r6, #1
	ldrhlo r1, [r1, r2]
	sub r0, sb, #5
	andlo r1, r1, #0x200
	cmp r1, #0
	beq _02022D0C
	ldr r3, _02023184 ; =0x0208F368
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022D0C:
	ldr r3, _02023188 ; =0x0208F370
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	ldrb r1, [r3, #4]
	strb r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022D48:
	cmp r6, #0x80
	movhs r1, #0
	ldrlo r1, _02023170 ; =0x0208C038
	lsllo r2, r6, #1
	ldrhlo r1, [r1, r2]
	sub r0, sb, #4
	andlo r1, r1, #0x200
	cmp r1, #0
	beq _02022DA0
	ldr r3, _0202318C ; =0x0208F378
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022DA0:
	ldr r3, _02023190 ; =0x0208F37C
	add sp, sp, #0x2c
	ldrb r2, [r3]
	ldrb r1, [r3, #1]
	strb r2, [r0]
	strb r1, [r0, #1]
	ldrb r2, [r3, #2]
	ldrb r1, [r3, #3]
	strb r2, [r0, #2]
	strb r1, [r0, #3]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02022DD4:
	ldrb r1, [sp, #8]
	ldrsh r2, [sp, #6]
	sub r8, sb, #1
	sub r1, r1, #1
	lsl r1, r1, #0x10
	add r1, r2, r1, asr #16
	strh r1, [sp, #6]
	strb r0, [r8]
	cmp r6, #0x65
	bgt _02022E28
	bge _02022EB0
	cmp r6, #0x47
	bgt _02023158
	cmp r6, #0x45
	blt _02023158
	beq _02022EB0
	cmp r6, #0x46
	beq _02022FEC
	cmp r6, #0x47
	beq _02022E40
	b _02023158
_02022E28:
	cmp r6, #0x66
	bgt _02022E38
	beq _02022FEC
	b _02023158
_02022E38:
	cmp r6, #0x67
	bne _02023158
_02022E40:
	ldrb r0, [sp, #8]
	cmp r0, r7
	ble _02022E58
	add r0, sp, #4
	mov r1, r7
	bl FUN_02022974
_02022E58:
	ldrsh r0, [sp, #6]
	cmn r0, #4
	blt _02022E6C
	cmp r0, r7
	blt _02022E8C
_02022E6C:
	cmp r5, #0
	ldrbeq r0, [sp, #8]
	subne r7, r7, #1
	subeq r7, r0, #1
	cmp r6, #0x67
	moveq r6, #0x65
	movne r6, #0x45
	b _02022EB0
_02022E8C:
	cmp r5, #0
	addne r0, r0, #1
	subne r7, r7, r0
	bne _02022FEC
	ldrb r1, [sp, #8]
	add r0, r0, #1
	subs r7, r1, r0
	movmi r7, #0
	b _02022FEC
_02022EB0:
	ldrb r0, [sp, #8]
	add r1, r7, #1
	cmp r0, r1
	ble _02022EC8
	add r0, sp, #4
	bl FUN_02022974
_02022EC8:
	ldrsh lr, [sp, #6]
	mov fp, #0x2b
	mov sl, #0
	cmp lr, #0
	rsblt lr, lr, #0
	movlt fp, #0x2d
	ldr r3, _02023194 ; =0x66666667
	mov r0, #0xa
	b _02022F1C
_02022EEC:
	lsr r1, lr, #0x1f
	smull r2, ip, r3, lr
	add ip, r1, ip, asr #2
	smull r1, r2, r0, ip
	sub ip, lr, r1
	add r1, ip, #0x30
	strb r1, [r8, #-1]!
	mov r2, lr
	smull r1, lr, r3, r2
	lsr r1, r2, #0x1f
	add lr, r1, lr, asr #2
	add sl, sl, #1
_02022F1C:
	cmp lr, #0
	bne _02022EEC
	cmp sl, #2
	blt _02022EEC
	strb fp, [r8, #-1]
	strb r6, [r8, #-2]!
	sub r1, sb, r8
	ldr r0, _0202316C ; =0x000001FD
	add r1, r7, r1
	cmp r1, r0
	mov r0, #0x30
	addgt sp, sp, #0x2c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	ldrb r2, [sp, #8]
	add r1, r7, #1
	cmp r2, r1
	bge _02022F88
	add r1, r7, #2
	sub r1, r1, r2
	subs r1, r1, #1
	beq _02022F88
_02022F7C:
	strb r0, [r8, #-1]!
	subs r1, r1, #1
	bne _02022F7C
_02022F88:
	ldrb r1, [sp, #8]
	add r0, sp, #9
	add r2, r0, r1
	subs r1, r1, #1
	beq _02022FAC
_02022F9C:
	ldrb r0, [r2, #-1]!
	subs r1, r1, #1
	strb r0, [r8, #-1]!
	bne _02022F9C
_02022FAC:
	cmp r7, #0
	cmpeq r5, #0
	movne r0, #0x2e
	strbne r0, [r8, #-1]!
	ldrb r0, [sp, #9]
	strb r0, [r8, #-1]!
	ldrb r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r8, #-1]!
	bne _02023158
	cmp r4, #1
	moveq r0, #0x2b
	strbeq r0, [r8, #-1]!
	beq _02023158
	b _0202314C
_02022FEC:
	ldrsh r3, [sp, #6]
	ldrb r2, [sp, #8]
	sub r0, r2, r3
	subs r1, r0, #1
	movmi r1, #0
	cmp r1, r7
	ble _0202302C
	sub r1, r1, r7
	add r0, sp, #4
	sub r1, r2, r1
	bl FUN_02022974
	ldrsh r3, [sp, #6]
	ldrb r2, [sp, #8]
	sub r0, r2, r3
	subs r1, r0, #1
	movmi r1, #0
_0202302C:
	adds r0, r3, #1
	movmi r0, #0
	ldr r3, _0202316C ; =0x000001FD
	add r6, r0, r1
	cmp r6, r3
	addgt sp, sp, #0x2c
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addgt sp, sp, #0x10
	bxgt lr
	add r3, sp, #9
	sub r6, r7, r1
	add r2, r3, r2
	cmp r6, #0
	mov r3, #0
	ble _0202307C
_0202306C:
	add r3, r3, #1
	cmp r3, r6
	strb sl, [r8, #-1]!
	blt _0202306C
_0202307C:
	mov r3, #0x30
	mov sb, #0
	b _02023094
_02023088:
	ldrb r6, [r2, #-1]!
	add sb, sb, #1
	strb r6, [r8, #-1]!
_02023094:
	cmp sb, r1
	bge _020230A8
	ldrb r6, [sp, #8]
	cmp sb, r6
	blt _02023088
_020230A8:
	cmp sb, r1
	bge _020230C0
_020230B0:
	add sb, sb, #1
	cmp sb, r1
	strb r3, [r8, #-1]!
	blt _020230B0
_020230C0:
	cmp r7, #0
	cmpeq r5, #0
	movne r1, #0x2e
	strbne r1, [r8, #-1]!
	cmp r0, #0
	beq _02023124
	ldrb r1, [sp, #8]
	mov r5, #0
	sub r1, r0, r1
	cmp r1, #0
	ble _02023104
_020230EC:
	strb r3, [r8, #-1]!
	ldrb r1, [sp, #8]
	add r5, r5, #1
	sub r1, r0, r1
	cmp r5, r1
	blt _020230EC
_02023104:
	cmp r5, r0
	bge _02023128
_0202310C:
	ldrb r1, [r2, #-1]!
	add r5, r5, #1
	cmp r5, r0
	strb r1, [r8, #-1]!
	blt _0202310C
	b _02023128
_02023124:
	strb r3, [r8, #-1]!
_02023128:
	ldrb r0, [sp, #4]
	cmp r0, #0
	movne r0, #0x2d
	strbne r0, [r8, #-1]!
	bne _02023158
	cmp r4, #1
	moveq r0, #0x2b
	strbeq r0, [r8, #-1]!
	beq _02023158
_0202314C:
	cmp r4, #2
	moveq r0, #0x20
	strbeq r0, [r8, #-1]!
_02023158:
	mov r0, r8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_0202316C: .word 0x000001FD
_02023170: .word 0x0208C038
_02023174: .word 0x0208F350
_02023178: .word 0x0208F358
_0202317C: .word 0x0208F360
_02023180: .word 0x0208F364
_02023184: .word 0x0208F368
_02023188: .word 0x0208F370
_0202318C: .word 0x0208F378
_02023190: .word 0x0208F37C
_02023194: .word 0x66666667

	arm_func_start FUN_02023198
FUN_02023198: ; 0x02023198
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x22c
	mov r3, #0x20
	mov fp, r2
	strb r3, [sp, #0x19]
	ldrb r2, [fp]
	mov sb, r0
	ldr r0, [sp, #0x260]
	mov r8, r1
	cmp r2, #0
	str r0, [sp, #0x260]
	mov r4, #0
	beq _02023A28
	arm_func_end FUN_02023198
_020231D0:
	mov r0, fp
	mov r1, #0x25
	bl FUN_02024128
	str r0, [sp, #0xc]
	cmp r0, #0
	bne _02023224
	mov r0, fp
	bl _strlen
	movs r2, r0
	add r4, r4, r2
	beq _02023A28
	mov r0, r8
	mov r1, fp
	blx sb
	cmp r0, #0
	bne _02023A28
	add sp, sp, #0x22c
	mvn r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02023224:
	subs r2, r0, fp
	add r4, r4, r2
	beq _02023254
	mov r0, r8
	mov r1, fp
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_02023254:
	ldr r0, [sp, #0xc]
	add r1, sp, #0x25c
	add r2, sp, #0x1c
	bl FUN_02021a98
	ldrb r1, [sp, #0x21]
	mov fp, r0
	cmp r1, #0x61
	bgt _020232C0
	bge _020235B8
	cmp r1, #0x47
	bgt _020232B4
	subs r0, r1, #0x41

	arm_func_start switchD
switchD: ; 0x02023284
	addpl pc, pc, r0, lsl #2
	arm_func_end switchD

	arm_func_start caseD_7
caseD_7: ; 0x02023288
	b _020232A8
	arm_func_end caseD_7
_0202328C: ; jump table
	b _020235B8 ; case 0

	arm_func_start caseD_42
caseD_42: ; 0x02023290
	b _02023820
	arm_func_end caseD_42

	arm_func_start caseD_43
caseD_43: ; 0x02023294
	b _02023820
	arm_func_end caseD_43

	arm_func_start caseD_44
caseD_44: ; 0x02023298
	b _02023820
	arm_func_end caseD_44

	arm_func_start caseD_45
caseD_45: ; 0x0202329C
	b _02023560
	arm_func_end caseD_45

	arm_func_start caseD_46
caseD_46: ; 0x020232A0
	b _02023560
	arm_func_end caseD_46

	arm_func_start caseD_47
caseD_47: ; 0x020232A4
	b _02023560
	arm_func_end caseD_47
_020232A8:
	cmp r1, #0x25
	beq _0202380C
	b _02023820
_020232B4:
	cmp r1, #0x58
	beq _02023454
	b _02023820
_020232C0:
	cmp r1, #0x75
	bgt _02023328
	subs r0, r1, #0x64

	arm_func_start switchD
switchD: ; 0x020232CC
	addpl pc, pc, r0, lsl #2
	arm_func_end switchD

	arm_func_start caseD_12
caseD_12: ; 0x020232D0
	b _0202331C
	arm_func_end caseD_12
_020232D4: ; jump table
	b _02023338 ; case 0

	arm_func_start caseD_65
caseD_65: ; 0x020232D8
	b _02023560
	arm_func_end caseD_65

	arm_func_start caseD_66
caseD_66: ; 0x020232DC
	b _02023560
	arm_func_end caseD_66

	arm_func_start caseD_67
caseD_67: ; 0x020232E0
	b _02023560
	arm_func_end caseD_67

	arm_func_start caseD_68
caseD_68: ; 0x020232E4
	b _02023820
	arm_func_end caseD_68

	arm_func_start caseD_69
caseD_69: ; 0x020232E8
	b _02023338
	arm_func_end caseD_69

	arm_func_start caseD_6a
caseD_6a: ; 0x020232EC
	b _02023820
	arm_func_end caseD_6a

	arm_func_start caseD_6b
caseD_6b: ; 0x020232F0
	b _02023820
	arm_func_end caseD_6b

	arm_func_start caseD_6c
caseD_6c: ; 0x020232F4
	b _02023820
	arm_func_end caseD_6c

	arm_func_start caseD_6d
caseD_6d: ; 0x020232F8
	b _02023820
	arm_func_end caseD_6d

	arm_func_start caseD_6e
caseD_6e: ; 0x020232FC
	b _02023744
	arm_func_end caseD_6e

	arm_func_start caseD_6f
caseD_6f: ; 0x02023300
	b _02023454
	arm_func_end caseD_6f

	arm_func_start caseD_70
caseD_70: ; 0x02023304
	b _02023820
	arm_func_end caseD_70

	arm_func_start caseD_71
caseD_71: ; 0x02023308
	b _02023820
	arm_func_end caseD_71

	arm_func_start caseD_72
caseD_72: ; 0x0202330C
	b _02023820
	arm_func_end caseD_72

	arm_func_start caseD_73
caseD_73: ; 0x02023310
	b _02023610
	arm_func_end caseD_73

	arm_func_start caseD_74
caseD_74: ; 0x02023314
	b _02023820
	arm_func_end caseD_74

	arm_func_start caseD_75
caseD_75: ; 0x02023318
	b _02023454
	arm_func_end caseD_75
_0202331C:
	cmp r1, #0x63
	beq _020237EC
	b _02023820
_02023328:
	cmp r1, #0x78
	bgt _02023820
	beq _02023454
	b _02023820
_02023338:
	ldrb r0, [sp, #0x20]
	cmp r0, #3
	ldreq r1, [sp, #0x25c]
	addeq r1, r1, #4
	streq r1, [sp, #0x25c]
	ldreq sl, [r1, #-4]
	beq _020233C4
	cmp r0, #4
	bne _0202337C
_0202335C:
	ldr r1, [sp, #0x25c]
	add r1, r1, #8
	str r1, [sp, #0x25c]
	ldr r2, [r1, #-8]
	ldr r1, [r1, #-4]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	b _020233C4
_0202337C:
	cmp r0, #6
	bne _02023388
	b _0202335C
_02023388:
	cmp r0, #7
	ldreq r1, [sp, #0x25c]
	addeq r1, r1, #4
	streq r1, [sp, #0x25c]
	ldreq sl, [r1, #-4]
	beq _020233C4
	cmp r0, #8
	ldreq r1, [sp, #0x25c]
	addeq r1, r1, #4
	streq r1, [sp, #0x25c]
	ldreq sl, [r1, #-4]
	ldrne r1, [sp, #0x25c]
	addne r1, r1, #4
	strne r1, [sp, #0x25c]
	ldrne sl, [r1, #-4]
_020233C4:
	cmp r0, #2
	lsleq r1, sl, #0x10
	asreq sl, r1, #0x10
	cmp r0, #1
	lsleq r1, sl, #0x18
	asreq sl, r1, #0x18
	cmp r0, #4
	beq _020233EC
	cmp r0, #6
	bne _0202341C
_020233EC:
	add r0, sp, #0x1c
	sub r5, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	ldr r3, [r5]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	add r2, sp, #0x22c
	bl FUN_020221f4
	movs r7, r0
	beq _02023820
	b _02023444
_0202341C:
	add r0, sp, #0x1c
	sub r5, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	mov r0, sl
	add r1, sp, #0x22c
	ldm r5, {r2, r3}
	bl FUN_02021fa4
	movs r7, r0
	beq _02023820
_02023444:
	add r0, sp, #0x200
	add r0, r0, #0x2b
	sub r6, r0, r7
	b _0202386C
_02023454:
	ldrb r0, [sp, #0x20]
	cmp r0, #3
	ldreq r1, [sp, #0x25c]
	addeq r1, r1, #4
	streq r1, [sp, #0x25c]
	ldreq sl, [r1, #-4]
	beq _020234E0
	cmp r0, #4
	bne _02023498
_02023478:
	ldr r1, [sp, #0x25c]
	add r1, r1, #8
	str r1, [sp, #0x25c]
	ldr r2, [r1, #-8]
	ldr r1, [r1, #-4]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	b _020234E0
_02023498:
	cmp r0, #6
	bne _020234A4
	b _02023478
_020234A4:
	cmp r0, #7
	ldreq r1, [sp, #0x25c]
	addeq r1, r1, #4
	streq r1, [sp, #0x25c]
	ldreq sl, [r1, #-4]
	beq _020234E0
	cmp r0, #8
	ldreq r1, [sp, #0x25c]
	addeq r1, r1, #4
	streq r1, [sp, #0x25c]
	ldreq sl, [r1, #-4]
	ldrne r1, [sp, #0x25c]
	addne r1, r1, #4
	strne r1, [sp, #0x25c]
	ldrne sl, [r1, #-4]
_020234E0:
	cmp r0, #2
	lsleq r1, sl, #0x10
	lsreq sl, r1, #0x10
	cmp r0, #1
	andeq sl, sl, #0xff
	cmp r0, #4
	beq _02023504
	cmp r0, #6
	bne _02023534
_02023504:
	add r0, sp, #0x1c
	sub r5, sp, #4
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	ldr r3, [r5]
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	add r2, sp, #0x22c
	bl FUN_020221f4
	movs r7, r0
	beq _02023820
	b _0202355C
_02023534:
	add r0, sp, #0x1c
	sub r5, sp, #8
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	mov r0, sl
	add r1, sp, #0x22c
	ldm r5, {r2, r3}
	bl FUN_02021fa4
	movs r7, r0
	beq _02023820
_0202355C:
	b _02023444
_02023560:
	ldrb r0, [sp, #0x20]
	sub r5, sp, #4
	cmp r0, #9
	ldreq r0, [sp, #0x25c]
	addeq r0, r0, #8
	streq r0, [sp, #0x25c]
	ldrne r0, [sp, #0x25c]
	addne r0, r0, #8
	strne r0, [sp, #0x25c]
	ldr r6, [r0, #-8]
	ldr r7, [r0, #-4]
	add r0, sp, #0x1c
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	ldr r3, [r5]
	mov r0, r6
	mov r1, r7
	add r2, sp, #0x22c
	bl FUN_02022a88
	movs r7, r0
	beq _02023820
	b _02023444
_020235B8:
	ldrb r0, [sp, #0x20]
	sub r5, sp, #4
	cmp r0, #9
	ldreq r0, [sp, #0x25c]
	addeq r0, r0, #8
	streq r0, [sp, #0x25c]
	ldrne r0, [sp, #0x25c]
	addne r0, r0, #8
	strne r0, [sp, #0x25c]
	ldr r6, [r0, #-8]
	ldr r7, [r0, #-4]
	add r0, sp, #0x1c
	ldm r0, {r0, r1, r2, r3}
	stm r5, {r0, r1, r2, r3}
	ldr r3, [r5]
	mov r0, r6
	mov r1, r7
	add r2, sp, #0x22c
	bl FUN_020224c8
	movs r7, r0
	beq _02023820
	b _02023444
_02023610:
	ldrb r0, [sp, #0x20]
	cmp r0, #5
	bne _0202368C
	ldr r0, [sp, #0x260]
	ldr r1, [sp, #0x25c]
	cmp r0, #0
	add r0, r1, #4
	str r0, [sp, #0x25c]
	ldr r1, [r0, #-4]
	beq _02023668
	cmp r1, #0
	bne _02023668
	mov r0, #0
	mvn r4, #0
	mov r1, r0
	mov r2, r4
	bl FUN_02023d28
	add sp, sp, #0x22c
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02023668:
	cmp r1, #0
	add r7, sp, #0x2c
	ldreq r1, _02023A3C ; =0x0208F380
	mov r2, #0x200
	mov r0, r7
	bl FUN_0202185c
	cmp r0, #0
	blt _02023820
	b _0202369C
_0202368C:
	ldr r0, [sp, #0x25c]
	add r0, r0, #4
	str r0, [sp, #0x25c]
	ldr r7, [r0, #-4]
_0202369C:
	ldr r0, [sp, #0x260]
	cmp r0, #0
	beq _020236D8
	cmp r7, #0
	bne _020236D8
	mov r0, #0
	mvn r4, #0
	mov r1, r0
	mov r2, r4
	bl FUN_02023d28
	add sp, sp, #0x22c
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020236D8:
	ldrb r0, [sp, #0x1f]
	cmp r7, #0
	ldreq r7, _02023A40 ; =0x0208F384
	cmp r0, #0
	beq _02023708
	ldrb r0, [sp, #0x1e]
	ldrb r6, [r7], #1
	cmp r0, #0
	ldrne r0, [sp, #0x28]
	cmpne r6, r0
	movgt r6, r0
	b _0202386C
_02023708:
	ldrb r0, [sp, #0x1e]
	cmp r0, #0
	beq _02023734
	ldr r6, [sp, #0x28]
	mov r0, r7
	mov r2, r6
	mov r1, #0
	bl FUN_02021954
	cmp r0, #0
	subne r6, r0, r7
	b _0202386C
_02023734:
	mov r0, r7
	bl _strlen
	mov r6, r0
	b _0202386C
_02023744:
	ldr r0, [sp, #0x260]
	ldr r1, [sp, #0x25c]
	cmp r0, #0
	add r0, r1, #4
	str r0, [sp, #0x25c]
	ldr r1, [r0, #-4]
	beq _02023788
	mov r0, #0
	mvn r4, #0
	mov r1, r0
	mov r2, r4
	bl FUN_02023d28
	add sp, sp, #0x22c
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02023788:
	ldrb r0, [sp, #0x20]
	cmp r0, #8

	arm_func_start switchD
switchD: ; 0x02023790
	addls pc, pc, r0, lsl #2
	b _02023A1C
	arm_func_end switchD
_02023798: ; jump table
	b _020237BC ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0202379C
	b _02023A1C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020237A0
	b _020237C4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020237A4
	b _020237CC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020237A8
	b _020237E8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020237AC
	b _02023A1C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020237B0
	b _020237D0
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x020237B4
	b _020237E0
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x020237B8
	b _020237E4
	arm_func_end caseD_8
_020237BC:
	str r4, [r1]
	b _02023A1C
_020237C4:
	strh r4, [r1]
	b _02023A1C
_020237CC:
	b _020237BC
_020237D0:
	str r4, [r1]
	asr r0, r4, #0x1f
	str r0, [r1, #4]
	b _02023A1C
_020237E0:
	b _020237BC
_020237E4:
	b _020237BC
_020237E8:
	b _020237D0
_020237EC:
	ldr r0, [sp, #0x25c]
	add r7, sp, #0x2c
	add r0, r0, #4
	str r0, [sp, #0x25c]
	ldr r0, [r0, #-4]
	mov r6, #1
	strb r0, [sp, #0x2c]
	b _0202386C
_0202380C:
	mov r0, #0x25
	strb r0, [sp, #0x2c]
	add r7, sp, #0x2c
	mov r6, #1
	b _0202386C
_02023820:
	ldr r0, [sp, #0xc]
	bl _strlen
	movs r2, r0
	add r4, r4, r2
	beq _02023858
	ldr r1, [sp, #0xc]
	mov r0, r8
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_02023858:
	add sp, sp, #0x22c
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_0202386C:
	ldrb r0, [sp, #0x1c]
	mov r5, r6
	cmp r0, #0
	beq _0202398C
	mov r3, #0x30
	cmp r0, #2
	movne r3, #0x20
	strb r3, [sp, #0x19]
	ldrb r0, [r7]
	cmp r0, #0x2b
	cmpne r0, #0x2d
	beq _020238A4
	cmp r0, #0x20
	bne _020238E0
_020238A4:
	and r0, r3, #0xff
	cmp r0, #0x30
	bne _020238E0
	mov r0, r8
	mov r1, r7
	mov r2, #1
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	add r7, r7, #1
	sub r6, r6, #1
_020238E0:
	ldrb r0, [sp, #0x1c]
	cmp r0, #2
	bne _02023948
	ldrb r0, [sp, #0x21]
	cmp r0, #0x61
	beq _02023900
	cmp r0, #0x41
	bne _02023948
_02023900:
	cmp r6, #2
	addlt sp, sp, #0x22c
	mvnlt r0, #0
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addlt sp, sp, #0x10
	bxlt lr
	mov r0, r8
	mov r1, r7
	mov r2, #2
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	sub r6, r6, #2
	add r7, r7, #2
_02023948:
	ldr r0, [sp, #0x24]
	cmp r5, r0
	bge _0202398C
_02023954:
	mov r0, r8
	add r1, sp, #0x19
	mov r2, #1
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r0, [sp, #0x24]
	add r5, r5, #1
	cmp r5, r0
	blt _02023954
_0202398C:
	cmp r6, #0
	beq _020239BC
	mov r0, r8
	mov r1, r7
	mov r2, r6
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
_020239BC:
	ldrb r0, [sp, #0x1c]
	cmp r0, #0
	bne _02023A18
	ldr r0, [sp, #0x24]
	cmp r5, r0
	bge _02023A18
	mov r6, #0x20
	add r7, sp, #0x18
_020239DC:
	mov r0, r8
	mov r1, r7
	mov r2, #1
	strb r6, [sp, #0x18]
	blx sb
	cmp r0, #0
	addeq sp, sp, #0x22c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r0, [sp, #0x24]
	add r5, r5, #1
	cmp r5, r0
	blt _020239DC
_02023A18:
	add r4, r4, r5
_02023A1C:
	ldrb r0, [fp]
	cmp r0, #0
	bne _020231D0
_02023A28:
	mov r0, r4
	add sp, sp, #0x22c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02023A3C: .word 0x0208F380
_02023A40: .word 0x0208F384

	arm_func_start FUN_02023a44
FUN_02023a44: ; 0x02023A44
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, r1
	mov r3, r5
	mov r1, #1
	mov r4, r2
	bl FUN_02021350
	cmp r4, r0
	movne r5, #0
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02023a44

	arm_func_start FUN_02023a70
FUN_02023a70: ; 0x02023A70
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r3, [r4, #8]
	mov r5, r2
	ldr r2, [r4, #4]
	add r0, r3, r5
	cmp r0, r2
	ldr r0, [r4]
	subhi r5, r2, r3
	mov r2, r5
	add r0, r0, r3
	bl FUN_020218d4
	ldr r1, [r4, #8]
	mov r0, #1
	add r1, r1, r5
	str r1, [r4, #8]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02023a70

	arm_func_start FUN_02023ab4
FUN_02023ab4: ; 0x02023AB4
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mvn r4, #0
	ldr r0, _02023BC4 ; =0x0208F098
	mov r1, r4
	bl FUN_02024654
	cmp r0, #0
	addge sp, sp, #4
	movge r0, r4
	popge {r3, r4, r5, r6, lr}
	addge sp, sp, #0x10
	bxge lr
	ldr r6, _02023BC8 ; =0x02099AD0
	mov r0, r6
	bl FUN_020024b0
	cmp r0, #0
	bne _02023B20
	ldr r0, _02023BCC ; =LAB_020939a4
	ldr r1, _02023BD0 ; =0x02099A40
	ldr r2, [r0, #4]
	ldr r0, _02023BD4 ; =0x02099A64
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1, #0xc]
	str r2, [r0, #0xc]
	b _02023B6C
	arm_func_end FUN_02023ab4
_02023B20:
	ldr r4, _02023BCC ; =LAB_020939a4
	ldr r5, _02023BD0 ; =0x02099A40
	ldr r0, [r4, #4]
	ldr r1, [r5, #0xc]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	ldreq r0, _02023BD4 ; =0x02099A64
	ldreq r1, [r0, #0xc]
	addeq r1, r1, #1
	streq r1, [r0, #0xc]
	beq _02023B6C
	mov r0, r6
	bl FUN_02002408
	ldr r1, [r4, #4]
	ldr r0, _02023BD4 ; =0x02099A64
	ldr r2, [r1, #0x6c]
	mov r1, #1
	str r2, [r5, #0xc]
	str r1, [r0, #0xc]
_02023B6C:
	mov r1, #0
	str r1, [sp]
	add r0, sp, #0x18
	bic r3, r0, #3
	ldr r2, [sp, #0x18]
	ldr r0, _02023BD8 ; =FUN_02023a44
	ldr r1, _02023BC4 ; =0x0208F098
	add r3, r3, #4
	bl FUN_02023198
	ldr r1, _02023BD4 ; =0x02099A64
	mov r4, r0
	ldr r0, [r1, #0xc]
	subs r0, r0, #1
	str r0, [r1, #0xc]
	bne _02023BB0
	ldr r0, _02023BC8 ; =0x02099AD0
	bl FUN_02002458
_02023BB0:
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02023BC4: .word 0x0208F098
_02023BC8: .word 0x02099AD0
_02023BCC: .word LAB_020939a4
_02023BD0: .word 0x02099A40
_02023BD4: .word 0x02099A64
_02023BD8: .word FUN_02023a44

	arm_func_start FUN_02023bdc
FUN_02023bdc: ; 0x02023BDC
	push {r4, r5, r6, lr}
	sub sp, sp, #0x10
	mov r6, r0
	mov r5, r1
	mov r4, #0
	ldr r0, _02023C3C ; =FUN_02023a70
	add r1, sp, #4
	str r6, [sp, #4]
	str r5, [sp, #8]
	str r4, [sp, #0xc]
	str r4, [sp]
	bl FUN_02023198
	cmp r6, #0
	addeq sp, sp, #0x10
	popeq {r4, r5, r6, pc}
	cmp r0, r5
	addlo sp, sp, #0x10
	strblo r4, [r6, r0]
	poplo {r4, r5, r6, pc}
	cmp r5, #0
	addne r1, r6, r5
	strbne r4, [r1, #-1]
	add sp, sp, #0x10
	pop {r4, r5, r6, pc}
	.align 2, 0_02023C3C: .word FUN_02023a70
	arm_func_end FUN_02023bdc

	arm_func_start FUN_02023c40
FUN_02023c40: ; 0x02023C40
	push {r0, r1, r2, r3}
	push {r3, lr}
	add r1, sp, #0xc
	bic r1, r1, #3
	add r3, r1, #4
	ldr r2, [sp, #0xc]
	mvn r1, #0
	bl FUN_02023bdc
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02023c40

	arm_func_start FUN_02023c6c
FUN_02023c6c: ; 0x02023C6C
	ldr r2, _02023C94 ; =0x0208F388
	ldr r0, _02023C98 ; =0x41C64E6D
	ldr r3, [r2]
	ldr r1, _02023C9C ; =0x00007FFF
	mul r0, r3, r0
	add r0, r0, #0x39
	add r0, r0, #0x3000
	str r0, [r2]
	and r0, r1, r0, lsr #16
	bx lr
	.align 2, 0_02023C94: .word 0x0208F388
_02023C98: .word 0x41C64E6D
_02023C9C: .word 0x00007FFF
	arm_func_end FUN_02023c6c

	arm_func_start FUN_02023ca0
FUN_02023ca0: ; 0x02023CA0
	ldr r1, _02023CAC ; =0x0208F388
	str r0, [r1]
	bx lr
	.align 2, 0_02023CAC: .word 0x0208F388
	arm_func_end FUN_02023ca0

	arm_func_start FUN_02023cb0
FUN_02023cb0: ; 0x02023CB0
	cmp r2, #0
	beq _02023CCC
	cmp r2, #1
	beq _02023CF4
	cmp r2, #2
	beq _02023D18
	b _02023D20
	arm_func_end FUN_02023cb0
_02023CCC:
	ldr r1, [r0]
	ldrb r2, [r1]
	cmp r2, #0
	moveq r1, #1
	streq r1, [r0, #4]
	subeq r0, r1, #2
	addne r1, r1, #1
	strne r1, [r0]
	movne r0, r2
	bx lr
_02023CF4:
	ldr r2, [r0, #4]
	cmp r2, #0
	ldreq r2, [r0]
	subeq r2, r2, #1
	streq r2, [r0]
	movne r2, #0
	strne r2, [r0, #4]
	mov r0, r1
	bx lr
_02023D18:
	ldr r0, [r0, #4]
	bx lr
_02023D20:
	mov r0, #0
	bx lr

	arm_func_start FUN_02023d28
FUN_02023d28: ; 0x02023D28
	push {r3, lr}
	ldr r3, _02023D4C ; =0x02099E64
	ldr r3, [r3]
	cmp r3, #0
	beq _02023D44
	blx r3
	pop {r3, pc}
	arm_func_end FUN_02023d28
_02023D44:
	bl FUN_02023d50
	pop {r3, pc}
	.align 2, 0_02023D4C: .word 0x02099E64

	arm_func_start FUN_02023d50
FUN_02023d50: ; 0x02023D50
	bx lr
	arm_func_end FUN_02023d50

	arm_func_start FUN_02023d54
FUN_02023d54: ; 0x02023D54
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	cmp r5, #1
	blt _02023D6C
	cmp r5, #7
	ble _02023D74
	arm_func_end FUN_02023d54
_02023D6C:
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02023D74:
	ldr r7, _02023E68 ; =0x02099B30
	mov r0, r7
	bl FUN_020024b0
	cmp r0, #0
	bne _02023DAC
	ldr r0, _02023E6C ; =LAB_020939a4
	ldr r1, _02023E70 ; =0x02099A40
	ldr r2, [r0, #4]
	ldr r0, _02023E74 ; =0x02099A64
	ldr r3, [r2, #0x6c]
	mov r2, #1
	str r3, [r1, #0x1c]
	str r2, [r0, #0x1c]
	b _02023DF8
_02023DAC:
	ldr r4, _02023E6C ; =LAB_020939a4
	ldr r6, _02023E70 ; =0x02099A40
	ldr r0, [r4, #4]
	ldr r1, [r6, #0x1c]
	ldr r0, [r0, #0x6c]
	cmp r1, r0
	ldreq r0, _02023E74 ; =0x02099A64
	ldreq r1, [r0, #0x1c]
	addeq r1, r1, #1
	streq r1, [r0, #0x1c]
	beq _02023DF8
	mov r0, r7
	bl FUN_02002408
	ldr r1, [r4, #4]
	ldr r0, _02023E74 ; =0x02099A64
	ldr r2, [r1, #0x6c]
	mov r1, #1
	str r2, [r6, #0x1c]
	str r1, [r0, #0x1c]
_02023DF8:
	ldr r1, _02023E78 ; =0x02099E68
	sub r2, r5, #1
	ldr r4, [r1, r2, lsl #2]
	cmp r4, #1
	movne r0, #0
	strne r0, [r1, r2, lsl #2]
	ldr r0, _02023E74 ; =0x02099A64
	ldr r1, [r0, #0x1c]
	subs r1, r1, #1
	str r1, [r0, #0x1c]
	bne _02023E2C
	ldr r0, _02023E68 ; =0x02099B30
	bl FUN_02002458
_02023E2C:
	cmp r4, #1
	beq _02023E40
	cmp r4, #0
	cmpeq r5, #1
	bne _02023E48
_02023E40:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02023E48:
	cmp r4, #0
	bne _02023E58
	mov r0, #0
	bl FUN_02021068
_02023E58:
	mov r0, r5
	blx r4
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02023E68: .word 0x02099B30
_02023E6C: .word LAB_020939a4
_02023E70: .word 0x02099A40
_02023E74: .word 0x02099A64
_02023E78: .word 0x02099E68

	arm_func_start _strlen
_strlen: ; 0x02023E7C
	mvn r2, #0
	arm_func_end _strlen
_02023E80:
	ldrb r1, [r0], #1
	add r2, r2, #1
	cmp r1, #0
	bne _02023E80
	mov r0, r2
	bx lr

	arm_func_start FUN_02023e98
FUN_02023e98: ; 0x02023E98
	push {r3, r4, r5, lr}
	and r4, r1, #3
	and r3, r0, #3
	mov r2, r0
	cmp r3, r4
	bne _02023F34
	cmp r4, #0
	beq _02023EF0
	ldrb r3, [r1]
	strb r3, [r0]
	tst r3, #0xff
	popeq {r3, r4, r5, pc}
	rsbs r4, r4, #3
	beq _02023EE8
	arm_func_end FUN_02023e98
_02023ED0:
	ldrb r3, [r1, #1]!
	tst r3, #0xff
	strb r3, [r2, #1]!
	popeq {r3, r4, r5, pc}
	subs r4, r4, #1
	bne _02023ED0
_02023EE8:
	add r2, r2, #1
	add r1, r1, #1
_02023EF0:
	ldr r5, [r1]
	ldr r3, _02023F58 ; =0xFEFEFEFF
	mvn r4, r5
	add lr, r5, r3
	ldr ip, _02023F5C ; =0x80808080
	and r4, lr, r4
	tst r4, ip
	bne _02023F34
	sub r2, r2, #4
_02023F14:
	str r5, [r2, #4]!
	ldr r5, [r1, #4]!
	add r4, r5, r3
	mvn lr, r5
	and lr, r4, lr
	tst lr, ip
	beq _02023F14
	add r2, r2, #4
_02023F34:
	ldrb r3, [r1]
	strb r3, [r2]
	tst r3, #0xff
	popeq {r3, r4, r5, pc}
_02023F44:
	ldrb r3, [r1, #1]!
	tst r3, #0xff
	strb r3, [r2, #1]!
	bne _02023F44
	pop {r3, r4, r5, pc}
	.align 2, 0_02023F58: .word 0xFEFEFEFF
_02023F5C: .word 0x80808080

	arm_func_start _strncpy
_strncpy: ; 0x02023F60
	push {r3, lr}
	mov lr, r0
	cmp r2, #0
	popeq {r3, pc}
	arm_func_end _strncpy
_02023F70:
	ldrb r3, [r1], #1
	mov ip, lr
	strb r3, [lr], #1
	ldrb r3, [ip]
	cmp r3, #0
	bne _02023FA4
	subs r2, r2, #1
	popeq {r3, pc}
	mov r1, #0
_02023F94:
	strb r1, [lr], #1
	subs r2, r2, #1
	bne _02023F94
	pop {r3, pc}
_02023FA4:
	subs r2, r2, #1
	bne _02023F70
	pop {r3, pc}

	arm_func_start FUN_02023fb0
FUN_02023fb0: ; 0x02023FB0
	mov r3, r0
	arm_func_end FUN_02023fb0
_02023FB4:
	ldrb r2, [r3], #1
	cmp r2, #0
	bne _02023FB4
	sub r3, r3, #1
_02023FC4:
	ldrb r2, [r1], #1
	mov ip, r3
	strb r2, [r3], #1
	ldrb r2, [ip]
	cmp r2, #0
	bne _02023FC4
	bx lr

	arm_func_start FUN_02023fe0
FUN_02023fe0: ; 0x02023FE0
	push {r4, lr}
	ldrb r2, [r0]
	ldrb r3, [r1]
	subs r3, r2, r3
	movne r0, r3
	popne {r4, pc}
	and r4, r0, #3
	and r3, r1, #3
	cmp r3, r4
	bne _020240BC
	cmp r4, #0
	beq _02024054
	cmp r2, #0
	moveq r0, #0
	popeq {r4, pc}
	rsbs r4, r4, #3
	beq _0202404C
	arm_func_end FUN_02023fe0
_02024024:
	ldrb r3, [r0, #1]!
	ldrb r2, [r1, #1]!
	subs r2, r3, r2
	movne r0, r2
	popne {r4, pc}
	cmp r3, #0
	moveq r0, #0
	popeq {r4, pc}
	subs r4, r4, #1
	bne _02024024
_0202404C:
	add r0, r0, #1
	add r1, r1, #1
_02024054:
	ldr r2, [r0]
	ldr r3, _020240EC ; =0xFEFEFEFF
	mvn r4, r2
	add lr, r2, r3
	ldr ip, _020240F0 ; =0x80808080
	and r4, lr, r4
	tst r4, ip
	ldr r4, [r1]
	bne _020240A8
	cmp r2, r4
	bne _0202409C
_02024080:
	ldr r2, [r0, #4]!
	ldr r4, [r1, #4]!
	add lr, r2, r3
	tst lr, ip
	bne _020240A8
	cmp r2, r4
	beq _02024080
_0202409C:
	sub r0, r0, #1
	sub r1, r1, #1
	b _020240BC
_020240A8:
	ldrb r2, [r0]
	ldrb r3, [r1]
	subs r3, r2, r3
	movne r0, r3
	popne {r4, pc}
_020240BC:
	cmp r2, #0
	moveq r0, #0
	popeq {r4, pc}
_020240C8:
	ldrb r3, [r0, #1]!
	ldrb r2, [r1, #1]!
	subs r2, r3, r2
	movne r0, r2
	popne {r4, pc}
	cmp r3, #0
	bne _020240C8
	mov r0, #0
	pop {r4, pc}
	.align 2, 0_020240EC: .word 0xFEFEFEFF
_020240F0: .word 0x80808080

	arm_func_start FUN_020240f4
FUN_020240f4: ; 0x020240F4
	cmp r2, #0
	beq _02024120
	arm_func_end FUN_020240f4
_020240FC:
	ldrb ip, [r1], #1
	ldrb r3, [r0], #1
	cmp r3, ip
	subne r0, r3, ip
	bxne lr
	cmp r3, #0
	beq _02024120
	subs r2, r2, #1
	bne _020240FC
_02024120:
	mov r0, #0
	bx lr

	arm_func_start FUN_02024128
FUN_02024128: ; 0x02024128
	ldrb r2, [r0], #1
	and r1, r1, #0xff
	cmp r2, #0
	beq _02024150
	arm_func_end FUN_02024128
_02024138:
	cmp r2, r1
	subeq r0, r0, #1
	bxeq lr
	ldrb r2, [r0], #1
	cmp r2, #0
	bne _02024138
_02024150:
	cmp r1, #0
	movne r0, #0
	subeq r0, r0, #1
	bx lr

	arm_func_start FUN_02024160
FUN_02024160: ; 0x02024160
	ldrb r2, [r0]
	and r1, r1, #0xff
	add r3, r0, #1
	cmp r2, #0
	mov r0, #0
	beq _0202418C
	arm_func_end FUN_02024160
_02024178:
	cmp r2, r1
	subeq r0, r3, #1
	ldrb r2, [r3], #1
	cmp r2, #0
	bne _02024178
_0202418C:
	cmp r0, #0
	moveq r0, #0
	cmpeq r1, #0
	subeq r0, r3, #1
	bx lr

	arm_func_start FUN_020241a0
FUN_020241a0: ; 0x020241A0
	push {r4, lr}
	cmp r1, #0
	ldrbne r2, [r1]
	cmpne r2, #0
	popeq {r4, pc}
	ldrb r3, [r0]
	add r4, r0, #1
	cmp r3, #0
	beq _02024204
	arm_func_end FUN_020241a0
_020241C4:
	cmp r3, r2
	bne _020241F8
	mov lr, r4
	add ip, r1, #1
_020241D4:
	ldrb r3, [ip], #1
	ldrb r0, [lr], #1
	cmp r0, r3
	bne _020241EC
	cmp r0, #0
	bne _020241D4
_020241EC:
	cmp r3, #0
	subeq r0, r4, #1
	popeq {r4, pc}
_020241F8:
	ldrb r3, [r4], #1
	cmp r3, #0
	bne _020241C4
_02024204:
	mov r0, #0
	pop {r4, pc}

	arm_func_start FUN_0202420c
FUN_0202420c: ; 0x0202420C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r4, [sp, #0x38]
	movs sb, r0
	ldr r0, [sp, #0x34]
	str r4, [sp, #0x38]
	mov r4, #0
	str r0, [sp, #0x34]
	ldr r0, [sp, #0x38]
	str r1, [sp]
	str r4, [r0]
	mov r0, r4
	str r0, [sp, #4]
	ldr r0, [sp, #0x34]
	mov r1, r4
	str r1, [r0]
	ldr r0, [sp, #0x30]
	str r4, [sp, #8]
	mov r8, r2
	mov r7, r3
	mov r5, r4
	mov sl, r4
	str r0, [sp, #0x30]
	mov r4, #1
	bmi _0202428C
	cmp sb, #1
	beq _0202428C
	cmp sb, #0x24
	bgt _0202428C
	ldr r0, [sp]
	cmp r0, #1
	bge _02024294
	arm_func_end FUN_0202420c
_0202428C:
	mov r4, #0x40
	b _020242B0
_02024294:
	ldr r1, [sp, #8]
	mov r0, r7
	mov r3, r1
	mov r2, r1
	add r5, r3, #1
	blx r8
	mov r6, r0
_020242B0:
	cmp sb, #0
	beq _020242C8
	mov r1, sb
	mvn r0, #0
	bl FUN_0201fbc8
	str r0, [sp, #4]
_020242C8:
	mvn fp, #0
	b _02024518
_020242D0:
	cmp r4, #8
	bgt _02024308
	cmp r4, #0

	arm_func_start switchD
switchD: ; 0x020242DC
	addge pc, pc, r4, lsl #2
	b _02024518
	arm_func_end switchD
_020242E4: ; jump table
	b _02024518 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020242E8
	b _02024314
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020242EC
	b _020243B0
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020242F0
	b _02024518
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020242F4
	b _020243D8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020242F8
	b _02024518
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020242FC
	b _02024518
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02024300
	b _02024518
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02024304
	b _02024400
	arm_func_end caseD_8
_02024308:
	cmp r4, #0x10
	beq _02024400
	b _02024518
_02024314:
	cmp r6, #0x80
	movhs r0, #0
	ldrlo r0, _02024574 ; =0x0208C038
	lsllo r1, r6, #1
	ldrhlo r0, [r0, r1]
	andlo r0, r0, #0x100
	cmp r0, #0
	beq _02024358
	mov r1, #0
	mov r0, r7
	mov r2, r1
	blx r8
	mov r6, r0
	ldr r0, [sp, #8]
	add r0, r0, #1
	str r0, [sp, #8]
	b _02024518
_02024358:
	cmp r6, #0x2b
	bne _0202437C
	mov r1, #0
	mov r0, r7
	mov r2, r1
	add r5, r5, #1
	blx r8
	mov r6, r0
	b _020243A8
_0202437C:
	cmp r6, #0x2d
	bne _020243A8
	mov r1, #0
	mov r0, r7
	mov r2, r1
	add r5, r5, #1
	blx r8
	mov r6, r0
	ldr r0, [sp, #0x34]
	mov r1, #1
	str r1, [r0]
_020243A8:
	mov r4, #2
	b _02024518
_020243B0:
	cmp sb, #0
	beq _020243C0
	cmp sb, #0x10
	bne _020243D0
_020243C0:
	cmp r6, #0x30
	bne _020243D0
	mov r4, #4
	b _02024500
_020243D0:
	mov r4, #8
	b _02024518
_020243D8:
	cmp r6, #0x58
	cmpne r6, #0x78
	bne _020243F0

	arm_func_start LAB_020243e4
LAB_020243e4: ; 0x020243E4
	mov sb, #0x10
	mov r4, #8
	b _02024500
	arm_func_end LAB_020243e4
_020243F0:
	cmp sb, #0
	moveq sb, #8
	mov r4, #0x10
	b _02024518
_02024400:
	ldr r0, [sp, #4]
	cmp sb, #0
	moveq sb, #0xa
	cmp r0, #0
	bne _02024424
	mov r0, fp
	mov r1, sb
	bl FUN_0201fbc8
	str r0, [sp, #4]
_02024424:
	cmp r6, #0x80
	movhs r0, #0
	ldrlo r0, _02024574 ; =0x0208C038
	lsllo r1, r6, #1
	ldrhlo r0, [r0, r1]
	andlo r0, r0, #8
	cmp r0, #0
	beq _02024464
	sub r6, r6, #0x30
	cmp r6, sb
	blt _020244C8
	cmp r4, #0x10
	moveq r4, #0x20
	movne r4, #0x40
	add r6, r6, #0x30
	b _02024518
_02024464:
	cmp r6, #0x80
	movhs r0, #0
	ldrlo r0, _02024574 ; =0x0208C038
	lsllo r1, r6, #1
	ldrhlo r0, [r0, r1]
	andlo r0, r0, #1
	cmp r0, #0
	beq _020244A0
	cmp r6, #0x80
	movhs r0, r6
	ldrlo r0, _02024578 ; =0x0208BFB8
	ldrblo r0, [r0, r6]
	sub r0, r0, #0x37
	cmp r0, sb
	blt _020244B0
_020244A0:
	cmp r4, #0x10
	moveq r4, #0x20
	movne r4, #0x40
	b _02024518
_020244B0:
	cmp r6, #0
	blt _020244C4
	cmp r6, #0x80
	ldrlt r0, _02024578 ; =0x0208BFB8
	ldrblt r6, [r0, r6]
_020244C4:
	sub r6, r6, #0x37
_020244C8:
	ldr r0, [sp, #4]
	mov r4, #0x10
	cmp sl, r0
	ldrhi r0, [sp, #0x38]
	movhi r1, #1
	strhi r1, [r0]
	mul r0, sl, sb
	mov sl, r0
	sub r0, fp, r0
	cmp r6, r0
	ldrhi r0, [sp, #0x38]
	movhi r1, #1
	strhi r1, [r0]
	add sl, sl, r6
_02024500:
	mov r1, #0
	mov r0, r7
	mov r2, r1
	add r5, r5, #1
	blx r8
	mov r6, r0
_02024518:
	ldr r0, [sp]
	cmp r5, r0
	bgt _02024534
	cmp r6, fp
	beq _02024534
	tst r4, #0x60
	beq _020242D0
_02024534:
	tst r4, #0x34
	ldreq r0, [sp, #0x30]
	moveq sl, #0
	streq sl, [r0]
	ldrne r0, [sp, #8]
	subne r1, r5, #1
	addne r1, r1, r0
	ldrne r0, [sp, #0x30]
	mov r2, #1
	strne r1, [r0]
	mov r0, r7
	mov r1, r6
	blx r8
	mov r0, sl
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02024574: .word 0x0208C038
_02024578: .word 0x0208BFB8

	arm_func_start FUN_0202457c
FUN_0202457c: ; 0x0202457C
	push {r3, r4, r5, lr}
	sub sp, sp, #0x20
	mov r5, r0
	mov lr, #0
	mov r0, r2
	mov r4, r1
	add r2, sp, #0x1c
	str r5, [sp, #0xc]
	str lr, [sp, #0x10]
	str r2, [sp]
	add r1, sp, #0x18
	str r1, [sp, #4]
	add ip, sp, #0x14
	ldr r2, _02024638 ; =FUN_02023cb0
	add r3, sp, #0xc
	sub r1, lr, #0x80000001
	str ip, [sp, #8]
	bl FUN_0202420c
	cmp r4, #0
	ldrne r1, [sp, #0x1c]
	addne r1, r5, r1
	strne r1, [r4]
	ldr r1, [sp, #0x14]
	cmp r1, #0
	bne _02024604
	ldr r1, [sp, #0x18]
	cmp r1, #0
	bne _020245F4
	cmn r0, #0x80000001
	bhi _02024604
	arm_func_end FUN_0202457c
_020245F4:
	cmp r1, #0
	beq _02024628
	cmp r0, #0x80000000
	bls _02024628
_02024604:
	ldr r0, [sp, #0x18]
	ldr r1, _0202463C ; =0x02099E60
	mov r2, #0x22
	cmp r0, #0
	movne r0, #0x80000000
	str r2, [r1]
	add sp, sp, #0x20
	mvneq r0, #0x80000000
	pop {r3, r4, r5, pc}
_02024628:
	cmp r1, #0
	rsbne r0, r0, #0
	add sp, sp, #0x20
	pop {r3, r4, r5, pc}
	.align 2, 0_02024638: .word FUN_02023cb0
_0202463C: .word 0x02099E60

	arm_func_start FUN_02024640
FUN_02024640: ; 0x02024640
	ldr ip, _02024650 ; =FUN_0202457c
	mov r1, #0
	mov r2, #0xa
	bx ip
	.align 2, 0_02024650: .word FUN_0202457c
	arm_func_end FUN_02024640

	arm_func_start FUN_02024654
FUN_02024654: ; 0x02024654
	cmp r0, #0
	beq _0202466C
	ldr r3, [r0, #4]
	lsl r2, r3, #0x16
	lsrs r2, r2, #0x1d
	bne _02024674
	arm_func_end FUN_02024654
_0202466C:
	mov r0, #0
	bx lr
_02024674:
	lsl r2, r3, #0x14
	lsrs r2, r2, #0x1e
	beq _02024694
	cmp r2, #1
	beq _020246B8
	cmp r2, #2
	moveq r1, #1
	b _020246BC
_02024694:
	cmp r1, #0
	bicgt r2, r3, #0xc00
	orrgt r2, r2, #0x800
	strgt r2, [r0, #4]
	bgt _020246BC
	biclt r2, r3, #0xc00
	orrlt r2, r2, #0x400
	strlt r2, [r0, #4]
	b _020246BC
_020246B8:
	mvn r1, #0
_020246BC:
	mov r0, r1
	bx lr

	arm_func_start FUN_020246c4
FUN_020246c4: ; 0x020246C4
	mvn r2, #0
	arm_func_end FUN_020246c4
_020246C8:
	ldrh r1, [r0], #2
	add r2, r2, #1
	cmp r1, #0
	bne _020246C8
	mov r0, r2
	bx lr

	arm_func_start FUN_020246e0
FUN_020246e0: ; 0x020246E0
	add r3, r0, #5
	ldrb r2, [r3, r1]
	add ip, r3, r1
	cmp r2, #5
	movhi r0, #1
	bxhi lr
	mvnlo r0, #0
	bxlo lr
	ldrb r2, [r0, #4]
	add ip, ip, #1
	add r3, r3, r2
	cmp ip, r3
	bhs _02024730
	arm_func_end FUN_020246e0
_02024714:
	ldrb r2, [ip]
	cmp r2, #0
	movne r0, #1
	bxne lr
	add ip, ip, #1
	cmp ip, r3
	blo _02024714
_02024730:
	sub r1, r1, #1
	add r0, r0, r1
	ldrb r0, [r0, #5]
	tst r0, #1
	movne r0, #1
	mvneq r0, #0
	bx lr

	arm_func_start FUN_0202474c
FUN_0202474c: ; 0x0202474C
	add r3, r0, #5
	add r1, r3, r1
	sub ip, r1, #1
	mov r1, #0
	arm_func_end FUN_0202474c
_0202475C:
	ldrb r2, [ip]
	cmp r2, #9
	addlo r0, r2, #1
	strblo r0, [ip]
	bxlo lr
	cmp ip, r3
	bne _02024790
	mov r1, #1
	strb r1, [ip]
	ldrsh r1, [r0, #2]
	add r1, r1, #1
	strh r1, [r0, #2]
	bx lr
_02024790:
	strb r1, [ip], #-1
	b _0202475C
_02024798:
	.byte 0x1E, 0xFF, 0x2F, 0xE1

	arm_func_start FUN_0202479c
FUN_0202479c: ; 0x0202479C
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	cmp r4, #0
	pople {r3, r4, r5, pc}
	ldrb r2, [r5, #4]
	cmp r4, r2
	popge {r3, r4, r5, pc}
	bl FUN_020246e0
	strb r4, [r5, #4]
	cmp r0, #0
	poplt {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_0202474c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202479c

	arm_func_start FUN_020247dc
FUN_020247dc: ; 0x020247DC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, r2
	mov r7, r0
	mov r0, #0
	mov r6, r1
	cmp r5, #0
	strb r0, [r7]
	strb r0, [r7, #4]
	cmpeq r6, #0
	beq _02024860
	mov sb, #0xa
	mov r8, r0
	arm_func_end FUN_020247dc
_0202480C:
	ldrb r1, [r7, #4]
	mov r0, r6
	mov r2, sb
	add ip, r1, #1
	mov r4, r1
	mov r1, r5
	mov r3, r8
	strb ip, [r7, #4]
	bl FUN_0201f960
	add r1, r7, r4
	strb r0, [r1, #5]
	mov r0, r6
	mov r1, r5
	mov r2, sb
	mov r3, r8
	bl FUN_0201f954
	mov r5, r1
	mov r6, r0
	cmp r5, #0
	cmpeq r6, #0
	bne _0202480C
_02024860:
	ldrb r0, [r7, #4]
	add r2, r7, #5
	add r0, r2, r0
	sub r3, r0, #1
	cmp r2, r3
	bhs _02024890
_02024878:
	ldrb r1, [r2]
	ldrb r0, [r3]
	strb r1, [r3], #-1
	strb r0, [r2], #1
	cmp r2, r3
	blo _02024878
_02024890:
	ldrb r0, [r7, #4]
	sub r0, r0, #1
	strh r0, [r7, #2]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_020248a0
FUN_020248a0: ; 0x020248A0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x40
	ldrb r6, [r1, #4]
	ldrb r5, [r2, #4]
	mov r4, #0
	add r3, sp, #0
	add r5, r6, r5
	sub r5, r5, #1
	add r3, r3, r5
	add r6, r3, #1
	mov r7, r6
	strb r4, [r0]
	cmp r5, #0
	ble _02024968
	add lr, r1, #5
	add fp, r2, #5
	arm_func_end FUN_020248a0
_020248E0:
	ldrb r3, [r2, #4]
	sub sl, r3, #1
	sub r3, r5, sl
	subs sb, r3, #1
	ldrb r3, [r1, #4]
	movmi sb, #0
	submi sl, r5, #1
	add r8, sl, #1
	sub r3, r3, sb
	cmp r8, r3
	movgt r8, r3
	add sl, fp, sl
	add sb, lr, sb
	cmp r8, #0
	ble _02024934
_0202491C:
	ldrb ip, [sb], #1
	ldrb r3, [sl], #-1
	sub r8, r8, #1
	cmp r8, #0
	mla r4, ip, r3, r4
	bgt _0202491C
_02024934:
	ldr r3, _02024A1C ; =0xCCCCCCCD
	sub r5, r5, #1
	umull r8, sb, r4, r3
	lsr sb, sb, #3
	cmp r5, #0
	mov sl, #0xa
	umull r8, sb, sl, sb
	sub sb, r4, r8
	strb sb, [r6, #-1]!
	mov r8, r4
	umull r3, r4, r8, r3
	lsr r4, r4, #3
	bgt _020248E0
_02024968:
	ldrsh r3, [r1, #2]
	ldrsh r1, [r2, #2]
	cmp r4, #0
	add r1, r3, r1
	strh r1, [r0, #2]
	strbne r4, [r6, #-1]!
	ldrshne r1, [r0, #2]
	mov r3, #0
	addne r1, r1, #1
	strhne r1, [r0, #2]
	b _020249A4
_02024994:
	ldrb r2, [r6], #1
	add r1, r0, r3
	add r3, r3, #1
	strb r2, [r1, #5]
_020249A4:
	cmp r3, #0x20
	bge _020249B4
	cmp r6, r7
	blo _02024994
_020249B4:
	cmp r6, r7
	addhs sp, sp, #0x40
	strb r3, [r0, #4]
	pophs {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r1, [r6]
	cmp r1, #5
	addlo sp, sp, #0x40
	poplo {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bne _02024A0C
	add r2, r6, #1
	cmp r2, r7
	bhs _020249FC
_020249E4:
	ldrb r1, [r2]
	cmp r1, #0
	bne _02024A0C
	add r2, r2, #1
	cmp r2, r7
	blo _020249E4
_020249FC:
	ldrb r1, [r6, #-1]
	tst r1, #1
	addeq sp, sp, #0x40
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02024A0C:
	ldrb r1, [r0, #4]
	bl FUN_0202474c
	add sp, sp, #0x40
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02024A1C: .word 0xCCCCCCCD

	arm_func_start FUN_02024a20
FUN_02024a20: ; 0x02024A20
	push {r3, lr}
	mov ip, #0
	strh r2, [r0, #2]
	strb ip, [r0]
	b _02024A48
	arm_func_end FUN_02024a20
_02024A34:
	ldrb r3, [r1], #1
	add r2, r0, ip
	add ip, ip, #1
	sub r3, r3, #0x30
	strb r3, [r2, #5]
_02024A48:
	cmp ip, #0x20
	bge _02024A5C
	ldrb r2, [r1]
	cmp r2, #0
	bne _02024A34
_02024A5C:
	ldrb r2, [r1]
	strb ip, [r0, #4]
	cmp r2, #0
	popeq {r3, pc}
	cmp r2, #5
	poplo {r3, pc}
	bhi _02024AB0
	ldrb r2, [r1, #1]
	add r1, r1, #1
	cmp r2, #0
	beq _02024A9C
_02024A88:
	cmp r2, #0x30
	bne _02024AB0
	ldrb r2, [r1, #1]!
	cmp r2, #0
	bne _02024A88
_02024A9C:
	sub r1, ip, #1
	add r1, r0, r1
	ldrb r1, [r1, #5]
	tst r1, #1
	popeq {r3, pc}
_02024AB0:
	ldrb r1, [r0, #4]
	bl FUN_0202474c
	pop {r3, pc}

	arm_func_start FUN_02024abc
FUN_02024abc: ; 0x02024ABC
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x4c
	mov r4, r1
	mvn r2, #0x34
	mov r5, r0
	cmp r4, r2
	bgt _02024AEC
	bge _02024BB8
	sub r0, r2, #0xb
	cmp r4, r0
	beq _02024BA0
	b _02024D48
	arm_func_end FUN_02024abc
_02024AEC:
	add r1, r4, #0x20
	cmp r1, #0x28

	arm_func_start switchD
switchD: ; 0x02024AF4
	addls pc, pc, r1, lsl #2
	b _02024D48
	arm_func_end switchD
_02024AFC: ; jump table
	b LAB_02024bcc ; case 0

	arm_func_start caseD_ffffffe1
caseD_ffffffe1: ; 0x02024B00
	b _02024D48
	arm_func_end caseD_ffffffe1

	arm_func_start caseD_ffffffe2
caseD_ffffffe2: ; 0x02024B04
	b _02024D48
	arm_func_end caseD_ffffffe2

	arm_func_start caseD_ffffffe3
caseD_ffffffe3: ; 0x02024B08
	b _02024D48
	arm_func_end caseD_ffffffe3

	arm_func_start caseD_ffffffe4
caseD_ffffffe4: ; 0x02024B0C
	b _02024D48
	arm_func_end caseD_ffffffe4

	arm_func_start caseD_ffffffe5
caseD_ffffffe5: ; 0x02024B10
	b _02024D48
	arm_func_end caseD_ffffffe5

	arm_func_start caseD_ffffffe6
caseD_ffffffe6: ; 0x02024B14
	b _02024D48
	arm_func_end caseD_ffffffe6

	arm_func_start caseD_ffffffe7
caseD_ffffffe7: ; 0x02024B18
	b _02024D48
	arm_func_end caseD_ffffffe7

	arm_func_start caseD_ffffffe8
caseD_ffffffe8: ; 0x02024B1C
	b _02024D48
	arm_func_end caseD_ffffffe8

	arm_func_start caseD_ffffffe9
caseD_ffffffe9: ; 0x02024B20
	b _02024D48
	arm_func_end caseD_ffffffe9

	arm_func_start caseD_ffffffea
caseD_ffffffea: ; 0x02024B24
	b _02024D48
	arm_func_end caseD_ffffffea

	arm_func_start caseD_ffffffeb
caseD_ffffffeb: ; 0x02024B28
	b _02024D48
	arm_func_end caseD_ffffffeb

	arm_func_start caseD_ffffffec
caseD_ffffffec: ; 0x02024B2C
	b _02024D48
	arm_func_end caseD_ffffffec

	arm_func_start caseD_ffffffed
caseD_ffffffed: ; 0x02024B30
	b _02024D48
	arm_func_end caseD_ffffffed

	arm_func_start caseD_ffffffee
caseD_ffffffee: ; 0x02024B34
	b _02024D48
	arm_func_end caseD_ffffffee

	arm_func_start caseD_ffffffef
caseD_ffffffef: ; 0x02024B38
	b _02024D48
	arm_func_end caseD_ffffffef

	arm_func_start caseD_fffffff0
caseD_fffffff0: ; 0x02024B3C
	b _02024BE0
	arm_func_end caseD_fffffff0

	arm_func_start caseD_fffffff1
caseD_fffffff1: ; 0x02024B40
	b _02024D48
	arm_func_end caseD_fffffff1

	arm_func_start caseD_fffffff2
caseD_fffffff2: ; 0x02024B44
	b _02024D48
	arm_func_end caseD_fffffff2

	arm_func_start caseD_fffffff3
caseD_fffffff3: ; 0x02024B48
	b _02024D48
	arm_func_end caseD_fffffff3

	arm_func_start caseD_fffffff4
caseD_fffffff4: ; 0x02024B4C
	b _02024D48
	arm_func_end caseD_fffffff4

	arm_func_start caseD_fffffff5
caseD_fffffff5: ; 0x02024B50
	b _02024D48
	arm_func_end caseD_fffffff5

	arm_func_start caseD_fffffff6
caseD_fffffff6: ; 0x02024B54
	b _02024D48
	arm_func_end caseD_fffffff6

	arm_func_start caseD_fffffff7
caseD_fffffff7: ; 0x02024B58
	b _02024D48
	arm_func_end caseD_fffffff7

	arm_func_start caseD_fffffff8
caseD_fffffff8: ; 0x02024B5C
	b _02024BF4
	arm_func_end caseD_fffffff8

	arm_func_start caseD_fffffff9
caseD_fffffff9: ; 0x02024B60
	b _02024C08
	arm_func_end caseD_fffffff9

	arm_func_start caseD_fffffffa
caseD_fffffffa: ; 0x02024B64
	b _02024C1C
	arm_func_end caseD_fffffffa

	arm_func_start caseD_fffffffb
caseD_fffffffb: ; 0x02024B68
	b _02024C30
	arm_func_end caseD_fffffffb

	arm_func_start caseD_fffffffc
caseD_fffffffc: ; 0x02024B6C
	b _02024C44
	arm_func_end caseD_fffffffc

	arm_func_start caseD_fffffffd
caseD_fffffffd: ; 0x02024B70
	b _02024C58
	arm_func_end caseD_fffffffd

	arm_func_start caseD_fffffffe
caseD_fffffffe: ; 0x02024B74
	b _02024C6C
	arm_func_end caseD_fffffffe

	arm_func_start caseD_ffffffff
caseD_ffffffff: ; 0x02024B78
	b _02024C80
	arm_func_end caseD_ffffffff

	arm_func_start caseD_0
caseD_0: ; 0x02024B7C
	b _02024C94
	arm_func_end caseD_0

	arm_func_start caseD_1
caseD_1: ; 0x02024B80
	b _02024CA8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02024B84
	b _02024CBC
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02024B88
	b _02024CD0
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02024B8C
	b _02024CE4
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02024B90
	b _02024CF8
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02024B94
	b _02024D0C
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02024B98
	b _02024D20
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02024B9C
	b _02024D34
	arm_func_end caseD_8
_02024BA0:
	ldr r1, _02024DE8 ; =0x0208F38C
	mov r0, r5
	mvn r2, #0x13
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024BB8:
	ldr r1, _02024DEC ; =0x0208F3BC
	add r2, r2, #0x25
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
LAB_02024bcc:
	ldr r1, _02024DF0 ; =0x0208F3E4
	add r2, r2, #0x2b
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024BE0:
	ldr r1, _02024DF4 ; =0x0208F3FC
	add r2, r2, #0x30
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024BF4:
	ldr r1, _02024DF8 ; =0x0208F40C
	add r2, r2, #0x32
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024C08:
	ldr r1, _02024DFC ; =0x0208F414
	add r2, r2, #0x32
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024C1C:
	ldr r1, _02024E00 ; =0x0208F41C
	add r2, r2, #0x33
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024C30:
	ldr r1, _02024E04 ; =0x0208F424
	add r2, r2, #0x33
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024C44:
	ldr r1, _02024E08 ; =0x0208F42C
	add r2, r2, #0x33
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024C58:
	ldr r1, _02024E0C ; =0x0208F430
	add r2, r2, #0x34
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024C6C:
	ldr r1, _02024E10 ; =0x0208F434
	add r2, r2, #0x34
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024C80:
	ldr r1, _02024E14 ; =0x0208F438
	add r2, r2, #0x34
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024C94:
	ldr r1, _02024E18 ; =0x0208F43C
	mov r2, #0
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024CA8:
	ldr r1, _02024E1C ; =0x0208F440
	mov r2, #0
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024CBC:
	ldr r1, _02024E20 ; =0x0208F444
	mov r2, #0
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024CD0:
	ldr r1, _02024E24 ; =0x0208F448
	mov r2, #0
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024CE4:
	ldr r1, _02024E28 ; =0x0208F44C
	mov r2, #1
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024CF8:
	ldr r1, _02024E2C ; =0x0208F450
	mov r2, #1
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024D0C:
	ldr r1, _02024E30 ; =0x0208F454
	mov r2, #1
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024D20:
	ldr r1, _02024E34 ; =0x0208F458
	mov r2, #2
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024D34:
	ldr r1, _02024E38 ; =0x0208F45C
	mov r2, #2
	bl FUN_02024a20
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
_02024D48:
	and r0, r4, #0x80000000
	add r1, r4, r0, lsr #31
	add r6, sp, #0x26
	mov r0, r6
	asr r1, r1, #1
	bl FUN_02024abc
	mov r0, r5
	mov r1, r6
	mov r2, r6
	bl FUN_020248a0
	tst r4, #1
	addeq sp, sp, #0x4c
	popeq {r3, r4, r5, r6, pc}
	add r3, sp, #0
	mov ip, r5
	mov r2, #9
_02024D88:
	ldrh r1, [ip]
	ldrh r0, [ip, #2]
	add ip, ip, #4
	subs r2, r2, #1
	strh r0, [r3, #2]
	strh r1, [r3], #4
	bne _02024D88
	ldrh r0, [ip]
	cmp r4, #0
	strh r0, [r3]
	add r0, sp, #0x26
	ble _02024DC4
	ldr r1, _02024E1C ; =0x0208F440
	mov r2, #0
	b _02024DCC
_02024DC4:
	ldr r1, _02024E14 ; =0x0208F438
	mvn r2, #0
_02024DCC:
	bl FUN_02024a20
	add r1, sp, #0
	add r2, sp, #0x26
	mov r0, r5
	bl FUN_020248a0
	add sp, sp, #0x4c
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02024DE8: .word 0x0208F38C
_02024DEC: .word 0x0208F3BC
_02024DF0: .word 0x0208F3E4
_02024DF4: .word 0x0208F3FC
_02024DF8: .word 0x0208F40C
_02024DFC: .word 0x0208F414
_02024E00: .word 0x0208F41C
_02024E04: .word 0x0208F424
_02024E08: .word 0x0208F42C
_02024E0C: .word 0x0208F430
_02024E10: .word 0x0208F434
_02024E14: .word 0x0208F438
_02024E18: .word 0x0208F43C
_02024E1C: .word 0x0208F440
_02024E20: .word 0x0208F444
_02024E24: .word 0x0208F448
_02024E28: .word 0x0208F44C
_02024E2C: .word 0x0208F450
_02024E30: .word 0x0208F454
_02024E34: .word 0x0208F458
_02024E38: .word 0x0208F45C

	arm_func_start FUN_02024e3c
FUN_02024e3c: ; 0x02024E3C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x58
	mov r8, r1
	mov r6, r2
	mov r7, r0
	mov r0, r8
	mov r1, r6
	bl FUN_02021768
	mov r4, #0
	cmp r0, #0
	mov r5, #1
	moveq r5, #0
	mov r0, r4
	mov r1, r4
	mov r2, r8
	mov r3, r6
	and r5, r5, #0xff
	bl FUN_0201f4b0
	bne _02024EA4
	mov r0, #1
	add sp, sp, #0x58
	strb r5, [r7]
	strh r4, [r7, #2]
	strb r0, [r7, #4]
	strb r4, [r7, #5]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02024e3c
_02024EA4:
	mov r0, r8
	mov r1, r6
	bl FUN_02021784
	cmp r0, #2
	bgt _02024EEC
	mov r2, #1
	mov r0, r8
	mov r1, r6
	strb r5, [r7]
	strh r4, [r7, #2]
	strb r2, [r7, #4]
	bl FUN_02021784
	cmp r0, #1
	moveq r0, #0x4e
	movne r0, #0x49
	add sp, sp, #0x58
	strb r0, [r7, #5]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02024EEC:
	cmp r5, #0
	beq _02024F10
	mov r0, r4
	mov r1, r4
	mov r2, r8
	mov r3, r6
	bl FUN_0201e9a8
	mov r8, r0
	mov r6, r1
_02024F10:
	add r2, sp, #8
	mov r0, r8
	mov r1, r6
	bl FUN_0202837c
	mov r4, r0
	mov r6, r1
	orr r8, r4, #0
	rsbs r2, r8, #0
	orr r3, r6, #0x100000
	rsc r1, r3, #0
	mov r0, #0
	and r3, r3, r1
	sub r1, r0, #1
	and r8, r8, r2
	mov r2, r1
	adds r0, r8, r1
	adc r1, r3, r2
	str r4, [sp]
	str r6, [sp, #4]
	bl FUN_020216d4
	ldr r1, [sp, #8]
	rsb sb, r0, #0x35
	add r8, sp, #0xc
	sub r1, r1, sb
	mov r0, r8
	bl FUN_02024abc
	mov r0, r4
	mov r1, r6
	mov r2, sb
	bl FUN_0202843c
	bl FUN_0201fe6c
	mov r2, r1
	add r4, sp, #0x32
	mov r1, r0
	mov r0, r4
	bl FUN_020247dc
	mov r1, r4
	mov r2, r8
	mov r0, r7
	bl FUN_020248a0
	strb r5, [r7]
	add sp, sp, #0x58
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02024fbc
FUN_02024fbc: ; 0x02024FBC
	push {r3, r4, r5, lr}
	mov r4, r3
	ldrsh r5, [r0, #2]
	mov r0, r4
	bl FUN_02024e3c
	ldrb r0, [r4, #5]
	cmp r0, #9
	pophi {r3, r4, r5, pc}
	cmp r5, #0x20
	movgt r5, #0x20
	mov r0, r4
	mov r1, r5
	bl FUN_0202479c
	ldrb r0, [r4, #4]
	cmp r0, r5
	bge _02025020
	mov r1, #0
	arm_func_end FUN_02024fbc
_02025000:
	ldrb r2, [r4, #4]
	add r0, r4, r0
	add r2, r2, #1
	strb r2, [r4, #4]
	strb r1, [r0, #5]
	ldrb r0, [r4, #4]
	cmp r0, r5
	blt _02025000
_02025020:
	ldrsh r2, [r4, #2]
	sub r0, r0, #1
	ldrb r1, [r4, #4]
	lsl r0, r0, #0x10
	sub r0, r2, r0, asr #16
	strh r0, [r4, #2]
	cmp r1, #0
	mov r2, #0
	pople {r3, r4, r5, pc}
_02025044:
	add r1, r4, r2
	ldrb r0, [r1, #5]
	add r2, r2, #1
	add r0, r0, #0x30
	strb r0, [r1, #5]
	ldrb r0, [r4, #4]
	cmp r2, r0
	blt _02025044
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02025068
FUN_02025068: ; 0x02025068
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, r2
	add r2, sp, #0
	bl FUN_0202837c
	ldr r2, [sp]
	add r2, r2, r4
	str r2, [sp]
	bl FUN_0202843c
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_02025068

	arm_func_start FUN_02025094
FUN_02025094: ; 0x02025094
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	ldr r8, [sp, #0x54]
	mov r2, #0
	mov r6, r2
	cmp r8, #0x100000
	ldr r1, [sp, #0x50]
	bge _0202514C
	bic r0, r8, #0x80000000
	orrs r0, r0, r1
	bne _020250E8
	ldr r1, _02025754 ; =0x02099E84
	mov r0, r2
	ldm r1, {r2, r3}
	ldr r1, _02025758 ; =0xC3500000
	bl FUN_02020af8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02025094
_020250E8:
	cmp r8, #0
	bge _0202512C
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	ldr r4, _0202575C ; =0x02099E60
	mov r5, #0x21
	mov r2, r0
	mov r3, r1
	str r5, [r4]
	bl FUN_0201e9a8
	ldr r3, _02025754 ; =0x02099E84
	ldm r3, {r2, r3}
	bl FUN_02020af8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_0202512C:
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	ldr r3, _02025760 ; =0x43500000
	sub r6, r2, #0x36
	bl FUN_0201ed5c
	mov r8, r1
	str r0, [sp, #0x50]
	str r8, [sp, #0x54]
_0202514C:
	ldr r3, _02025764 ; =0x7FF00000
	cmp r8, r3
	blt _0202517C
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	mov r2, r0
	mov r3, r1
	bl FUN_0201e678
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_0202517C:
	ldr r4, _02025768 ; =0xFFFFFC01
	ldr r0, _0202576C ; =0x00095F64
	add r1, r4, r8, asr #20
	and r8, r8, r4, lsr #12
	add r0, r8, r0
	and r5, r0, #0x100000
	sub r0, r3, #0x40000000
	add r6, r6, r1
	eor r0, r5, r0
	orr r1, r8, r0
	ldr r0, [sp, #0x50]
	mov r2, #0
	sub r3, r3, #0x40000000
	str r1, [sp, #0x54]
	add r6, r6, r5, asr #20
	bl FUN_0201e9a8
	add r2, r8, #2
	and r2, r2, r4, lsr #12
	mov r5, r0
	mov sb, r1
	cmp r2, #3
	bge _02025378
	ldr r4, _02025754 ; =0x02099E84
	ldm r4, {r2, r3}
	bl FUN_0201f4b0
	bne _02025264
	cmp r6, #0
	addeq sp, sp, #0x2c
	ldmeq r4, {r0, r1}
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	mov r0, r6
	bl FUN_0201f1c4
	mov r5, r0
	mov r6, r1
	mov r0, #0
	ldr r1, _02025770 ; =0x3FE62E42
	mov r2, r5
	mov r3, r6
	sub r0, r0, #0x1200000
	bl FUN_0201ed5c
	mov r4, r0
	mov r7, r1
	ldr r0, _02025774 ; =0x35793C76
	ldr r1, _02025778 ; =0x3DEA39EF
	mov r2, r5
	mov r3, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r7
	bl FUN_0201e678
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025264:
	ldr r0, _0202577C ; =0x55555555
	mov r2, r5
	mov r3, sb
	sub r1, r0, #0x15800000
	bl FUN_0201ed5c
	mov r2, r0
	ldr r7, _02025780 ; =0x3FE00000
	mov r3, r1
	mov r0, #0
	mov r1, r7
	bl FUN_0201e9a8
	mov r4, r0
	mov r8, r1
	mov r0, r5
	mov r1, sb
	mov r2, r5
	mov r3, sb
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r8
	bl FUN_0201ed5c
	mov r4, r0
	mov r8, r1
	cmp r6, #0
	bne _020252F4
	mov r0, r5
	mov r1, sb
	mov r2, r4
	mov r3, r8
	bl FUN_0201e9a8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020252F4:
	mov r0, r6
	bl FUN_0201f1c4
	mov r6, r0
	mov sl, r1
	ldr r1, _02025770 ; =0x3FE62E42
	mov r2, r6
	mov r3, sl
	sub r0, r7, #0x41000000
	bl FUN_0201ed5c
	mov r2, r6
	mov r6, r0
	mov r7, r1
	ldr r0, _02025774 ; =0x35793C76
	ldr r1, _02025778 ; =0x3DEA39EF
	mov r3, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r8
	bl FUN_0201e9a8
	mov r2, r5
	mov r3, sb
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r7
	bl FUN_0201e9a8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025378:
	mov r0, #0
	mov r1, #0x40000000
	mov r2, r5
	mov r3, sb
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_02020af8
	str r0, [sp, #0x18]
	str r1, [sp, #0x14]
	mov r0, r6
	bl FUN_0201f1c4
	str r0, [sp, #0x1c]
	mov fp, r1
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x14]
	mov r2, r0
	mov r3, r1
	bl FUN_0201ed5c
	ldr r3, _02025784 ; =0xFFF9EB86
	mov r2, r0
	add r7, r8, r3
	mov r3, r1
	str r0, [sp, #0x20]
	str r1, [sp, #0xc]
	bl FUN_0201ed5c
	mov r4, r0
	mov sl, r1
	ldr r0, _02025788 ; =0xD078C69F
	ldr r1, _0202578C ; =0x3FC39A09
	mov r2, r4
	mov r3, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025790 ; =0x1D8E78AF
	ldr r1, _02025794 ; =0x3FCC71C5
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025798 ; =0x9997FA04
	ldr r1, _0202579C ; =0x3FD99999
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201ed5c
	str r0, [sp, #0x24]
	str r1, [sp, #4]
	ldr r0, _020257A0 ; =0xDF3E5244
	ldr r1, _020257A4 ; =0x3FC2F112
	mov r2, r4
	mov r3, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _020257A8 ; =0x96CB03DE
	ldr r1, _020257AC ; =0x3FC74664
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _020257B0 ; =0x94229359
	ldr r1, _020257B4 ; =0x3FD24924
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _020257B8 ; =0x55555593
	ldr r1, _020257BC ; =0x3FE55555
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0xc]
	bl FUN_0201ed5c
	ldr r4, _020257C0 ; =0x0006B851
	ldr r2, [sp, #0x24]
	sub r4, r4, r8
	ldr r3, [sp, #4]
	orr r7, r7, r4
	bl FUN_0201e678
	cmp r7, #0
	mov r4, r0
	mov r7, r1
	ble _02025658
	mov r1, #0x40000000
	mov r0, #0
	mov r2, r5
	mov r3, sb
	sub r1, r1, #0x200000
	bl FUN_0201ed5c
	mov r2, r5
	mov r3, sb
	bl FUN_0201ed5c
	cmp r6, #0
	mov r6, r0
	mov r8, r1
	bne _0202559C
	mov r2, r4
	mov r3, r7
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x14]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r8
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201e9a8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_0202559C:
	mov r0, #0
	ldr r1, _02025770 ; =0x3FE62E42
	ldr r2, [sp, #0x1c]
	mov r3, fp
	sub r0, r0, #0x1200000
	bl FUN_0201ed5c
	mov r3, r7
	str r0, [sp, #0x28]
	mov r7, r1
	mov r2, r4
	mov r0, r6
	mov r1, r8
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x14]
	bl FUN_0201ed5c
	mov r4, r0
	mov sl, r1
	ldr r2, [sp, #0x1c]
	ldr r0, _02025774 ; =0x35793C76
	ldr r1, _02025778 ; =0x3DEA39EF
	mov r3, fp
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r8
	bl FUN_0201e9a8
	mov r2, r5
	mov r3, sb
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x28]
	mov r1, r7
	bl FUN_0201e9a8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025658:
	cmp r6, #0
	bne _020256AC
	mov r0, r5
	mov r1, sb
	mov r2, r4
	mov r3, r7
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x14]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201e9a8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020256AC:
	mov r0, #0
	ldr r1, _02025770 ; =0x3FE62E42
	ldr r2, [sp, #0x1c]
	mov r3, fp
	sub r0, r0, #0x1200000
	bl FUN_0201ed5c
	mov r6, r0
	mov r8, r1
	mov r2, r4
	mov r3, r7
	mov r0, r5
	mov r1, sb
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x14]
	bl FUN_0201ed5c
	mov r4, r0
	mov r7, r1
	ldr r2, [sp, #0x1c]
	ldr r0, _02025774 ; =0x35793C76
	ldr r1, _02025778 ; =0x3DEA39EF
	mov r3, fp
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r7
	bl FUN_0201e9a8
	mov r2, r5
	mov r3, sb
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r8
	bl FUN_0201e9a8
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02025754: .word 0x02099E84
_02025758: .word 0xC3500000
_0202575C: .word 0x02099E60
_02025760: .word 0x43500000
_02025764: .word 0x7FF00000
_02025768: .word 0xFFFFFC01
_0202576C: .word 0x00095F64
_02025770: .word 0x3FE62E42
_02025774: .word 0x35793C76
_02025778: .word 0x3DEA39EF
_0202577C: .word 0x55555555
_02025780: .word 0x3FE00000
_02025784: .word 0xFFF9EB86
_02025788: .word 0xD078C69F
_0202578C: .word 0x3FC39A09
_02025790: .word 0x1D8E78AF
_02025794: .word 0x3FCC71C5
_02025798: .word 0x9997FA04
_0202579C: .word 0x3FD99999
_020257A0: .word 0xDF3E5244
_020257A4: .word 0x3FC2F112
_020257A8: .word 0x96CB03DE
_020257AC: .word 0x3FC74664
_020257B0: .word 0x94229359
_020257B4: .word 0x3FD24924
_020257B8: .word 0x55555593
_020257BC: .word 0x3FE55555
_020257C0: .word 0x0006B851

	arm_func_start FUN_020257c4
FUN_020257c4: ; 0x020257C4
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x78
	ldr r8, [sp, #0xac]
	ldr r6, [sp, #0xa4]
	ldr r0, [sp, #0xa8]
	bic sb, r8, #0x80000000
	orrs r1, sb, r0
	ldr r7, [sp, #0xa0]
	bic r4, r6, #0x80000000
	addeq sp, sp, #0x78
	moveq r0, #0
	ldreq r1, _02025D60 ; =0x3FF00000
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r1, _02025D64 ; =0x7FF00000
	cmp r4, r1
	bgt _02025834
	bne _0202581C
	cmp r7, #0
	bne _02025834
	arm_func_end FUN_020257c4
_0202581C:
	ldr r1, _02025D64 ; =0x7FF00000
	cmp sb, r1
	bgt _02025834
	bne _02025858
	cmp r0, #0
	beq _02025858
_02025834:
	ldr r0, [sp, #0xa0]
	ldr r1, [sp, #0xa4]
	ldr r2, [sp, #0xa8]
	ldr r3, [sp, #0xac]
	bl FUN_0201e678
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025858:
	cmp r6, #0
	mov r5, #0
	bge _020258B8
	ldr r1, _02025D68 ; =0x43400000
	cmp sb, r1
	movge r5, #2
	bge _020258B8
	sub r1, r1, #0x3500000
	cmp sb, r1
	blt _020258B8
	ldr r1, _02025D6C ; =0xFFFFFC01
	add r1, r1, sb, asr #20
	cmp r1, #0x14
	ble _020258A0
	rsb r2, r1, #0x34
	lsr r1, r0, r2
	cmp r0, r1, lsl r2
	b _020258B0
_020258A0:
	cmp r0, #0
	rsbeq r2, r1, #0x14
	asreq r1, sb, r2
	cmpeq sb, r1, lsl r2
_020258B0:
	andeq r1, r1, #1
	rsbeq r5, r1, #2
_020258B8:
	cmp r0, #0
	bne _02025A14
	ldr r1, _02025D64 ; =0x7FF00000
	cmp sb, r1
	bne _0202596C
	add r0, r4, #0x100000
	add r0, r0, #0xc0000000
	orrs r0, r0, r7
	bne _02025900
	ldr r0, [sp, #0xa8]
	ldr r1, [sp, #0xac]
	mov r2, r0
	mov r3, r1
	bl FUN_0201e9a8
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025900:
	sub r0, r1, #0x40000000
	cmp r4, r0
	blt _02025930
	cmp r8, #0
	ldrge r0, [sp, #0xa8]
	ldrge r1, [sp, #0xac]
	movlt r0, #0
	add sp, sp, #0x78
	movlt r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025930:
	cmp r8, #0
	mov r0, #0
	addge sp, sp, #0x78
	movge r1, r0
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addge sp, sp, #0x10
	bxge lr
	ldr r2, [sp, #0xa8]
	ldr r3, [sp, #0xac]
	mov r1, r0
	bl FUN_0201e9a8
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_0202596C:
	sub r0, r1, #0x40000000
	cmp sb, r0
	bne _020259B8
	cmp r8, #0
	ldrge r0, [sp, #0xa0]
	ldrge r1, [sp, #0xa4]
	addge sp, sp, #0x78
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addge sp, sp, #0x10
	bxge lr
	ldr r2, [sp, #0xa0]
	ldr r3, [sp, #0xa4]
	sub r1, r1, #0x40000000
	mov r0, #0
	bl FUN_02020af8
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020259B8:
	cmp r8, #0x40000000
	bne _020259E4
	ldr r0, [sp, #0xa0]
	ldr r1, [sp, #0xa4]
	mov r2, r0
	mov r3, r1
	bl FUN_0201ed5c
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020259E4:
	ldr r0, _02025D70 ; =0x3FE00000
	cmp r8, r0
	bne _02025A14
	cmp r6, #0
	blt _02025A14
	ldr r0, [sp, #0xa0]
	ldr r1, [sp, #0xa4]
	bl FUN_0201fef8
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025A14:
	ldr r0, [sp, #0xa0]
	ldr r1, [sp, #0xa4]
	bl FUN_02028198
	str r0, [sp, #0x68]
	str r1, [sp, #0x6c]
	cmp r7, #0
	bne _02025B14
	ldr r0, _02025D64 ; =0x7FF00000
	cmp r4, r0
	cmpne r4, #0
	beq _02025A4C
	sub r0, r0, #0x40000000
	cmp r4, r0
	bne _02025B14
_02025A4C:
	ldr r2, [sp, #0x68]
	ldr r3, [sp, #0x6c]
	str r2, [sp, #0x70]
	str r3, [sp, #0x74]
	cmp r8, #0
	bge _02025A78
	ldr r1, _02025D60 ; =0x3FF00000
	mov r0, #0
	bl FUN_02020af8
	str r0, [sp, #0x70]
	str r1, [sp, #0x74]
_02025A78:
	cmp r6, #0
	bge _02025AFC
	add r0, r4, #0x100000
	add r0, r0, #0xc0000000
	orrs r0, r0, r5
	bne _02025AD8
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	mov r2, r0
	mov r3, r1
	bl FUN_0201e9a8
	mov r4, r0
	mov r5, r1
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	mov r2, r0
	mov r3, r1
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r5
	bl FUN_02020af8
	b _02025AF4
_02025AD8:
	cmp r5, #1
	bne _02025AFC
	mov r0, #0
	ldr r2, [sp, #0x70]
	ldr r3, [sp, #0x74]
	mov r1, r0
	bl FUN_0201e9a8
_02025AF4:
	str r0, [sp, #0x70]
	str r1, [sp, #0x74]
_02025AFC:
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025B14:
	asr r0, r6, #0x1f
	add r7, r0, #1
	orrs r0, r7, r5
	bne _02025B4C
	ldr r0, _02025D74 ; =0x0208F130
	ldr r1, _02025D78 ; =0x02099E60
	ldr r0, [r0]
	mov r2, #0x21
	str r2, [r1]
	bl FUN_0201f680
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025B4C:
	ldr r3, _02025D7C ; =0x41E00000
	cmp sb, r3
	ble _02025E44
	add r0, r3, #0x2100000
	cmp sb, r0
	ble _02025BBC
	ldr r1, _02025D80 ; =0x3FEFFFFF
	cmp r4, r1
	bgt _02025B90
	add r1, r1, #0x40000001
	mov r0, #0
	cmp r8, #0
	add sp, sp, #0x78
	movge r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025B90:
	add r0, r1, #1
	cmp r4, r0
	blt _02025BBC
	add r1, r1, #0x40000001
	mov r0, #0
	cmp r8, #0
	add sp, sp, #0x78
	movle r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025BBC:
	ldr r3, _02025D80 ; =0x3FEFFFFF
	cmp r4, r3
	bge _02025BE8
	add r1, r3, #0x40000001
	mov r0, #0
	cmp r8, #0
	add sp, sp, #0x78
	movge r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025BE8:
	add r0, r3, #1
	cmp r4, r0
	ble _02025C14
	add r1, r3, #0x40000001
	mov r0, #0
	cmp r8, #0
	add sp, sp, #0x78
	movle r1, r0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02025C14:
	ldr r0, [sp, #0xa0]
	ldr r1, [sp, #0xa4]
	mov r2, #0
	add r3, r3, #1
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	str r0, [sp, #0x48]
	str r1, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r6, r0
	ldr r4, _02025D84 ; =0x3FD00000
	mov r8, r1
	ldr r2, [sp, #0x48]
	ldr r3, [sp, #0x4c]
	mov r0, #0
	mov r1, r4
	bl FUN_0201ed5c
	mov r2, r0
	ldr r0, _02025D88 ; =0x55555555
	mov r3, r1
	sub r1, r0, #0x15800000
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x48]
	ldr r1, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	add r1, r4, #0x100000
	mov r0, #0
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r8
	bl FUN_0201ed5c
	mov r6, r0
	ldr sb, _02025D8C ; =0x3FF71547
	mov sl, r1
	ldr r2, [sp, #0x48]
	ldr r3, [sp, #0x4c]
	mov r0, #0x60000000
	mov r1, sb
	bl FUN_0201ed5c
	mov r8, r0
	mov r4, r1
	ldr r0, _02025D90 ; =0xF85DDF44
	ldr r1, _02025D94 ; =0x3E54AE0B
	ldr r2, [sp, #0x48]
	ldr r3, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r2, r6
	mov r6, r0
	mov r3, sl
	mov sl, r1
	ldr r0, _02025D98 ; =0x652B82FE
	mov r1, sb
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, sl
	bl FUN_0201e9a8
	mov r6, r0
	mov sb, r1
	mov r0, r8
	mov r1, r4
	mov r2, r6
	mov r3, sb
	bl FUN_0201e678
	mov r0, #0
	mov r2, r8
	mov r3, r4
	str r1, [sp, #0x54]
	str r0, [sp, #0x50]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, sb
	b _02026384
	.align 2, 0_02025D60: .word 0x3FF00000
_02025D64: .word 0x7FF00000
_02025D68: .word 0x43400000
_02025D6C: .word 0xFFFFFC01
_02025D70: .word 0x3FE00000
_02025D74: .word 0x0208F130
_02025D78: .word 0x02099E60
_02025D7C: .word 0x41E00000
_02025D80: .word 0x3FEFFFFF
_02025D84: .word 0x3FD00000
_02025D88: .word 0x55555555
_02025D8C: .word 0x3FF71547
_02025D90: .word 0xF85DDF44
_02025D94: .word 0x3E54AE0B
_02025D98: .word 0x652B82FE
_02025D9C: .word 0x0003988E
_02025DA0: .word 0x000BB67A
_02025DA4: .word 0x0208C148
_02025DA8: .word 0x4A454EEF
_02025DAC: .word 0x3FCA7E28
_02025DB0: .word 0x93C9DB65
_02025DB4: .word 0x3FCD864A
_02025DB8: .word 0xA91D4101
_02025DBC: .word 0x3FD17460
_02025DC0: .word 0x518F264D
_02025DC4: .word 0x3FD55555
_02025DC8: .word 0xDB6FABFF
_02025DCC: .word 0x3FDB6DB6
_02025DD0: .word 0x33333303
_02025DD4: .word 0x3FE33333
_02025DD8: .word 0x3FEEC709
_02025DDC: .word 0x145B01F5
_02025DE0: .word 0xBE3E2FE0
_02025DE4: .word 0xDC3A03FD
_02025DE8: .word 0x0208C158
_02025DEC: .word 0x0208C138
_02025DF0: .word 0x40900000
_02025DF4: .word 0x8800759C
_02025DF8: .word 0x7E37E43C
_02025DFC: .word 0x3C971547
_02025E00: .word 0x3F6F3400
_02025E04: .word 0xC2F8F359
_02025E08: .word 0x01A56E1F
_02025E0C: .word 0x3FE62E43
_02025E10: .word 0xFEFA39EF
_02025E14: .word 0x0CA86C39
_02025E18: .word 0xBE205C61
_02025E1C: .word 0x72BEA4D0
_02025E20: .word 0x3E663769
_02025E24: .word 0xC5D26BF1
_02025E28: .word 0xBEBBBD41
_02025E2C: .word 0xAF25DE2C
_02025E30: .word 0x3F11566A
_02025E34: .word 0x16BEBD93
_02025E38: .word 0xBF66C16C
_02025E3C: .word 0x5555553E
_02025E40: .word 0x3FC55555
_02025E44:
	cmp r4, #0x100000
	mov r6, #0
	bge _02025E74
	ldr r0, [sp, #0x68]
	ldr r1, [sp, #0x6c]
	mov r2, r6
	add r3, r3, #0x1600000
	bl FUN_0201ed5c
	mov r4, r1
	str r0, [sp, #0x68]
	str r4, [sp, #0x6c]
	sub r6, r6, #0x35
_02025E74:
	ldr r0, _02025D6C ; =0xFFFFFC01
	ldr r1, _02025D9C ; =0x0003988E
	and r2, r4, r0, lsr #12
	add r3, r0, r4, asr #20
	orr sb, r2, #0xff00000
	cmp r2, r1
	add r6, r6, r3
	orr sb, sb, #0x30000000
	movle r8, #0
	ble _02025EB4
	ldr r0, _02025DA0 ; =0x000BB67A
	cmp r2, r0
	movlt r8, #1
	addge r6, r6, #1
	subge sb, sb, #0x100000
	movge r8, #0
_02025EB4:
	ldr sl, _02025DA4 ; =0x0208C148
	ldr r0, [sp, #0x68]
	add r1, sl, r8, lsl #3
	ldm r1, {r2, r3}
	mov r1, sb
	str sb, [sp, #0x6c]
	bl FUN_0201e9a8
	add r2, sl, r8, lsl #3
	mov fp, r0
	ldr r3, [r2, #4]
	mov r4, r1
	ldr r0, [sp, #0x68]
	ldr r2, [sl, r8, lsl #3]
	mov r1, sb
	bl FUN_0201e678
	mov r3, r1
	mov r2, r0
	ldr r1, _02025D60 ; =0x3FF00000
	mov r0, #0
	bl FUN_02020af8
	str r0, [sp, #0x20]
	str r1, [sp, #0x1c]
	ldr r2, [sp, #0x20]
	ldr r3, [sp, #0x1c]
	mov r0, fp
	mov r1, r4
	bl FUN_0201ed5c
	asr r2, sb, #1
	orr r2, r2, #0x20000000
	add r3, r2, #0x80000
	mov r2, #0
	mov sb, r1
	add r1, r3, r8, lsl #18
	str r0, [sp, #0x24]
	mov r0, r2
	add r3, sl, r8, lsl #3
	str r2, [sp, #0x40]
	str r2, [sp, #0x38]
	str sb, [sp, #0x44]
	str r1, [sp, #0x3c]
	ldm r3, {r2, r3}
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x68]
	ldr r1, [sp, #0x6c]
	bl FUN_0201e9a8
	str r0, [sp, #0x28]
	mov sl, r1
	ldr r0, [sp, #0x40]
	ldr r2, [sp, #0x38]
	ldr r3, [sp, #0x3c]
	mov r1, sb
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, fp
	mov r1, r4
	bl FUN_0201e9a8
	mov r4, r0
	mov r3, sl
	mov sl, r1
	ldr r2, [sp, #0x28]
	ldr r0, [sp, #0x40]
	mov r1, sb
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x1c]
	bl FUN_0201ed5c
	str r0, [sp, #0x2c]
	ldr r0, [sp, #0x24]
	str r1, [sp, #0x14]
	mov r1, sb
	mov r2, r0
	mov r3, sb
	bl FUN_0201ed5c
	mov r4, r0
	mov sl, r1
	mov r2, r4
	mov r3, sl
	bl FUN_0201ed5c
	str r0, [sp, #0x30]
	mov fp, r1
	ldr r0, _02025DA8 ; =0x4A454EEF
	ldr r1, _02025DAC ; =0x3FCA7E28
	mov r2, r4
	mov r3, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025DB0 ; =0x93C9DB65
	ldr r1, _02025DB4 ; =0x3FCD864A
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025DB8 ; =0xA91D4101
	ldr r1, _02025DBC ; =0x3FD17460
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025DC0 ; =0x518F264D
	ldr r1, _02025DC4 ; =0x3FD55555
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025DC8 ; =0xDB6FABFF
	ldr r1, _02025DCC ; =0x3FDB6DB6
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025DD0 ; =0x33333303
	ldr r1, _02025DD4 ; =0x3FE33333
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x30]
	mov r1, fp
	bl FUN_0201ed5c
	mov r4, r0
	mov sl, r1
	ldr r0, [sp, #0x40]
	ldr r2, [sp, #0x24]
	mov r1, sb
	mov r3, sb
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x2c]
	ldr r1, [sp, #0x14]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201e678
	mov r4, r0
	ldr r0, [sp, #0x40]
	mov sl, r1
	mov r1, sb
	mov r2, r0
	mov r3, r1
	bl FUN_0201ed5c
	str r1, [sp, #0xc]
	mov fp, r0
	ldr r1, _02025D60 ; =0x3FF00000
	ldr r3, [sp, #0xc]
	mov r0, #0
	add r1, r1, #0x180000
	mov r2, fp
	bl FUN_0201e678
	mov r2, r4
	mov r3, sl
	bl FUN_0201e678
	ldr r0, _02025D60 ; =0x3FF00000
	str r1, [sp, #0x3c]
	add r3, r0, #0x180000
	mov r0, #0
	mov r2, r0
	str r0, [sp, #0x38]
	bl FUN_0201e9a8
	ldr r3, [sp, #0xc]
	mov r2, fp
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201e9a8
	str r0, [sp, #0x34]
	str r1, [sp, #4]
	ldr r0, [sp, #0x40]
	ldr r2, [sp, #0x38]
	ldr r3, [sp, #0x3c]
	mov r1, sb
	bl FUN_0201ed5c
	mov r4, r0
	mov sl, r1
	ldr r0, [sp, #0x2c]
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x38]
	ldr r3, [sp, #0x3c]
	bl FUN_0201ed5c
	mov r3, sb
	mov fp, r0
	mov sb, r1
	ldr r2, [sp, #0x24]
	ldr r0, [sp, #0x34]
	ldr r1, [sp, #4]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, fp
	mov r1, sb
	bl FUN_0201e678
	mov sb, r0
	mov fp, r1
	mov r0, r4
	mov r1, sl
	mov r2, sb
	mov r3, fp
	bl FUN_0201e678
	mov r0, #0
	mov r2, r4
	mov r3, sl
	str r1, [sp, #0x64]
	str r0, [sp, #0x60]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, sb
	mov r1, fp
	bl FUN_0201e9a8
	mov sb, r1
	mov fp, r0
	ldr r2, [sp, #0x60]
	ldr r1, _02025DD8 ; =0x3FEEC709
	ldr r3, [sp, #0x64]
	mov r0, #0xe0000000
	bl FUN_0201ed5c
	mov r4, r0
	mov sl, r1
	ldr r0, _02025DDC ; =0x145B01F5
	ldr r1, _02025DE0 ; =0xBE3E2FE0
	ldr r2, [sp, #0x60]
	ldr r3, [sp, #0x64]
	bl FUN_0201ed5c
	mov r2, fp
	mov r3, sb
	mov fp, r0
	mov sb, r1
	ldr r1, _02025DD8 ; =0x3FEEC709
	ldr r0, _02025DE4 ; =0xDC3A03FD
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, fp
	mov r1, sb
	bl FUN_0201e678
	mov r2, r0
	ldr r0, _02025DE8 ; =0x0208C158
	mov r3, r1
	add r1, r0, r8, lsl #3
	ldm r1, {r0, r1}
	bl FUN_0201e678
	mov sb, r0
	mov r0, r6
	mov r6, r1
	bl FUN_0201f1c4
	str r0, [sp, #0x48]
	str r1, [sp, #0x4c]
	mov r0, r4
	mov r1, sl
	mov r2, sb
	mov r3, r6
	bl FUN_0201e678
	ldr fp, _02025DEC ; =0x0208C138
	add r2, fp, r8, lsl #3
	ldr r3, [r2, #4]
	ldr r2, [fp, r8, lsl #3]
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x48]
	ldr r1, [sp, #0x4c]
	bl FUN_0201e678
	mov r0, #0
	ldr r2, [sp, #0x48]
	ldr r3, [sp, #0x4c]
	str r1, [sp, #0x54]
	str r0, [sp, #0x50]
	bl FUN_0201e9a8
	add r3, fp, r8, lsl #3
	ldm r3, {r2, r3}
	bl FUN_0201e9a8
	mov r2, r4
	mov r3, sl
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, sb
	mov r1, r6
_02026384:
	bl FUN_0201e9a8
	mov r4, r0
	mov r6, r1
	sub r0, r5, #1
	orrs r0, r7, r0
	ldr r1, [sp, #0xac]
	ldr r7, _02025D60 ; =0x3FF00000
	mov r2, #0
	ldr r0, [sp, #0xa8]
	mov r3, r1
	mov r8, #0
	subeq r7, r7, #0x80000000
	str r1, [sp, #0x5c]
	str r2, [sp, #0x58]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	bl FUN_0201ed5c
	mov r5, r0
	mov sb, r1
	ldr r0, [sp, #0xa8]
	ldr r1, [sp, #0xac]
	mov r2, r4
	mov r3, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201e678
	mov r5, r0
	mov sb, r1
	ldr r0, [sp, #0x58]
	ldr r1, [sp, #0x5c]
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x54]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	str r2, [sp, #0x60]
	str r3, [sp, #0x64]
	bl FUN_0201e678
	mov r4, r1
	ldr r2, _02025DF0 ; =0x40900000
	str r0, [sp, #0x70]
	str r4, [sp, #0x74]
	cmp r4, r2
	blt _0202652C
	add r1, r4, #0xf700000
	add r1, r1, #0xb0000000
	orrs r0, r1, r0
	beq _020264A4
	ldr r5, _02025DF4 ; =0x8800759C
	ldr r4, _02025DF8 ; =0x7E37E43C
	mov r0, r5
	mov r1, r4
	mov r2, r8
	mov r3, r7
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020264A4:
	ldr r0, _02025D98 ; =0x652B82FE
	ldr r1, _02025DFC ; =0x3C971547
	mov r2, r5
	mov r3, sb
	bl FUN_0201e678
	mov r6, r0
	mov sl, r1
	ldr r0, [sp, #0x70]
	ldr r2, [sp, #0x60]
	ldr r3, [sp, #0x64]
	mov r1, r4
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, sl
	bl FUN_0201f2d8
	bls _020265F0
	ldr r5, _02025DF4 ; =0x8800759C
	ldr r4, _02025DF8 ; =0x7E37E43C
	mov r0, r5
	mov r1, r4
	mov r2, r8
	mov r3, r7
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_0202652C:
	bic r3, r4, #0x80000000
	add r2, r2, #0xcc00
	cmp r3, r2
	blt _020265F0
	ldr r2, _02025E00 ; =0x3F6F3400
	add r2, r4, r2
	orrs r2, r2, r0
	beq _0202658C
	ldr r5, _02025E04 ; =0xC2F8F359
	ldr r4, _02025E08 ; =0x01A56E1F
	mov r0, r5
	mov r1, r4
	mov r2, r8
	mov r3, r7
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_0202658C:
	ldr r2, [sp, #0x60]
	ldr r3, [sp, #0x64]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201f370
	bhi _020265F0
	ldr r5, _02025E04 ; =0xC2F8F359
	ldr r4, _02025E08 ; =0x01A56E1F
	mov r0, r5
	mov r1, r4
	mov r2, r8
	mov r3, r7
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_020265F0:
	ldr r0, _02025D6C ; =0xFFFFFC01
	bic r3, r4, #0x80000000
	ldr r1, _02025D70 ; =0x3FE00000
	add r2, r0, r3, asr #20
	cmp r3, r1
	mov r6, #0
	ble _0202666C
	mov r1, #0x100000
	add r2, r2, #1
	add r2, r4, r1, asr r2
	bic r3, r2, #0x80000000
	add r0, r0, r3, asr #20
	sub r3, r1, #1
	mvn r3, r3, asr r0
	sub r1, r1, #1
	and r1, r2, r1
	and r2, r2, r3
	str r2, [sp, #0x4c]
	str r6, [sp, #0x48]
	orr r1, r1, #0x100000
	rsb r0, r0, #0x14
	asr r6, r1, r0
	cmp r4, #0
	ldr r0, [sp, #0x60]
	ldr r1, [sp, #0x64]
	ldr r2, [sp, #0x48]
	ldr r3, [sp, #0x4c]
	rsblt r6, r6, #0
	bl FUN_0201e9a8
	str r0, [sp, #0x60]
	str r1, [sp, #0x64]
_0202666C:
	ldr r2, [sp, #0x60]
	ldr r3, [sp, #0x64]
	mov r0, r5
	mov r1, sb
	bl FUN_0201e678
	mov r0, #0
	mov r3, r1
	ldr fp, _02025E0C ; =0x3FE62E43
	mov r2, r0
	mov r1, fp
	str r3, [sp, #0x4c]
	str r2, [sp, #0x48]
	bl FUN_0201ed5c
	mov r4, r0
	mov sl, r1
	ldr r0, [sp, #0x48]
	ldr r1, [sp, #0x4c]
	ldr r2, [sp, #0x60]
	ldr r3, [sp, #0x64]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, _02025E10 ; =0xFEFA39EF
	sub r1, fp, #1
	bl FUN_0201ed5c
	mov r5, r0
	mov sb, r1
	ldr r0, _02025E14 ; =0x0CA86C39
	ldr r1, _02025E18 ; =0xBE205C61
	ldr r2, [sp, #0x48]
	ldr r3, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201e678
	mov r5, r0
	mov sb, r1
	mov r0, r4
	mov r1, sl
	mov r2, r5
	mov r3, sb
	bl FUN_0201e678
	mov r2, r4
	mov r3, sl
	str r0, [sp, #0x70]
	str r1, [sp, #0x74]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201e9a8
	mov r5, r0
	mov sb, r1
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	mov r2, r0
	mov r3, r1
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025E1C ; =0x72BEA4D0
	ldr r1, _02025E20 ; =0x3E663769
	str r2, [sp, #0x48]
	str r3, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025E24 ; =0xC5D26BF1
	ldr r1, _02025E28 ; =0xBEBBBD41
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x48]
	ldr r1, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025E2C ; =0xAF25DE2C
	ldr r1, _02025E30 ; =0x3F11566A
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x48]
	ldr r1, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025E34 ; =0x16BEBD93
	ldr r1, _02025E38 ; =0xBF66C16C
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x48]
	ldr r1, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02025E3C ; =0x5555553E
	ldr r1, _02025E40 ; =0x3FC55555
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x48]
	ldr r1, [sp, #0x4c]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	str r2, [sp, #0x50]
	str r3, [sp, #0x54]
	bl FUN_0201ed5c
	mov r4, r0
	mov sl, r1
	mov fp, #0x40000000
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	mov r2, #0
	mov r3, fp
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_02020af8
	mov r4, r0
	mov sl, r1
	ldr r0, [sp, #0x70]
	ldr r1, [sp, #0x74]
	mov r2, r5
	mov r3, sb
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, sl
	bl FUN_0201e9a8
	ldr r2, [sp, #0x70]
	ldr r3, [sp, #0x74]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, #0
	sub r1, fp, #0x100000
	bl FUN_0201e9a8
	add r3, r1, r6, lsl #20
	asr r2, r3, #0x14
	str r0, [sp, #0x70]
	cmp r2, #0
	str r1, [sp, #0x74]
	addgt r0, sp, #0x70
	strgt r3, [r0, #4]
	bgt _02026928
	mov r2, r6
	bl FUN_02025068
	str r0, [sp, #0x70]
	str r1, [sp, #0x74]
_02026928:
	ldr r2, [sp, #0x70]
	ldr r3, [sp, #0x74]
	mov r0, r8
	mov r1, r7
	bl FUN_0201ed5c
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr

	arm_func_start FUN_0202694c
FUN_0202694c: ; 0x0202694C
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x70
	ldr r7, [sp, #0x9c]
	ldr r4, _02026FE4 ; =0x3FE921FB
	bic r6, r7, #0x80000000
	mov sl, r2
	cmp r6, r4
	ldr r8, _02026FE8 ; =0x3DD0B461
	mov r5, #0
	bgt _020269A0
	ldr r2, [sp, #0x98]
	ldr r3, [sp, #0x9c]
	mov r0, r5
	stm sl, {r2, r3}
	add sp, sp, #0x70
	str r0, [sl, #8]
	str r0, [sl, #0xc]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_0202694c
_020269A0:
	ldr r0, _02026FEC ; =0x4002D97C
	cmp r6, r0
	bge _02026B64
	cmp r7, #0
	ble _02026A7C
	ldr r0, [sp, #0x98]
	ldr r1, [sp, #0x9c]
	ldr r2, _02026FF0 ; =0x54400000
	add r3, r4, #0x100000
	bl FUN_0201e9a8
	add r2, r4, #0x100000
	str r0, [sp, #0x50]
	str r1, [sp, #0x54]
	cmp r6, r2
	beq _02026A14
	ldr r4, _02026FF4 ; =0x1A626331
	mov r3, r8
	mov r2, r4
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	stm sl, {r2, r3}
	bl FUN_0201e9a8
	mov r2, r4
	mov r3, r8
	bl FUN_0201e9a8
	b _02026A60
_02026A14:
	ldr r2, _02026FF8 ; =0x1A600000
	ldr r3, _02026FE8 ; =0x3DD0B461
	bl FUN_0201e9a8
	ldr r5, _02026FFC ; =0x2E037073
	ldr r4, _02027000 ; =0x3BA3198A
	mov r2, r5
	mov r3, r4
	str r0, [sp, #0x50]
	str r1, [sp, #0x54]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	stm sl, {r2, r3}
	bl FUN_0201e9a8
	mov r2, r5
	mov r3, r4
	bl FUN_0201e9a8
_02026A60:
	add sp, sp, #0x70
	str r0, [sl, #8]
	str r1, [sl, #0xc]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02026A7C:
	ldr r2, [sp, #0x98]
	ldr r3, [sp, #0x9c]
	ldr r0, _02026FF0 ; =0x54400000
	add r1, r4, #0x100000
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	add r4, r4, #0x100000
	str r2, [sp, #0x50]
	str r3, [sp, #0x54]
	cmp r6, r4
	beq _02026AEC
	ldr r4, _02026FF4 ; =0x1A626331
	mov r1, r8
	mov r0, r4
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	stm sl, {r2, r3}
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r8
	bl FUN_0201e678
	b _02026B48
_02026AEC:
	ldr r2, _02026FF8 ; =0x1A600000
	ldr r3, _02026FE8 ; =0x3DD0B461
	bl FUN_0201e678
	mov r2, r0
	ldr r5, _02026FFC ; =0x2E037073
	mov r3, r1
	ldr r4, _02027000 ; =0x3BA3198A
	mov r0, r5
	mov r1, r4
	str r2, [sp, #0x50]
	str r3, [sp, #0x54]
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	stm sl, {r2, r3}
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201e678
_02026B48:
	add sp, sp, #0x70
	str r0, [sl, #8]
	str r1, [sl, #0xc]
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02026B64:
	add r0, r4, #0x1500000
	cmp r6, r0
	bgt _02026E58
	ldr r0, [sp, #0x98]
	ldr r1, [sp, #0x9c]
	bl FUN_02028198
	str r1, [sp, #0x24]
	mov sb, r0
	ldr r0, _02027004 ; =0x6DC9C883
	ldr r1, _02027008 ; =0x3FE45F30
	ldr r3, [sp, #0x24]
	mov r2, sb
	bl FUN_0201ed5c
	mov r3, r1
	mov r2, r0
	ldr r1, _0202700C ; =0x3FE00000
	mov r0, r5
	bl FUN_0201e678
	bl FUN_0201fe20
	mov r5, r0
	bl FUN_0201f1c4
	mov fp, r0
	mov r8, r1
	ldr r0, _02026FF0 ; =0x54400000
	add r1, r4, #0x100000
	mov r2, fp
	mov r3, r8
	bl FUN_0201ed5c
	mov r3, r1
	mov r2, r0
	ldr r1, [sp, #0x24]
	mov r0, sb
	bl FUN_0201e9a8
	mov r4, r0
	mov sb, r1
	ldr r0, _02026FF4 ; =0x1A626331
	ldr r1, _02026FE8 ; =0x3DD0B461
	mov r2, fp
	mov r3, r8
	bl FUN_0201ed5c
	str r0, [sp, #0x28]
	str r1, [sp, #0xc]
	cmp r5, #0x20
	bge _02026C2C
	ldr r0, _02027010 ; =0x0208C168
	sub r1, r5, #1
	ldr r0, [r0, r1, lsl #2]
	cmp r6, r0
	beq _02026C2C
	b _02026DBC
_02026C2C:
	ldr r2, [sp, #0x28]
	ldr r3, [sp, #0xc]
	mov r0, r4
	mov r1, sb
	bl FUN_0201e9a8
	str r0, [sl]
	ldr r0, _02027014 ; =0x000007FF
	str r1, [sl, #4]
	and r0, r0, r1, asr #20
	rsb r0, r0, r6, asr #20
	cmp r0, #0x10
	ble _02026DD4
	ldr r0, _02026FF8 ; =0x1A600000
	ldr r1, _02026FE8 ; =0x3DD0B461
	mov r2, fp
	mov r3, r8
	str r4, [sp, #0x30]
	str sb, [sp, #0x34]
	bl FUN_0201ed5c
	str r0, [sp, #0x40]
	str r1, [sp, #0x1c]
	ldr r2, [sp, #0x40]
	ldr r3, [sp, #0x1c]
	mov r0, r4
	mov r1, sb
	bl FUN_0201e9a8
	mov sb, r1
	str r0, [sp, #0x44]
	mov r4, r0
	ldr r0, _02026FFC ; =0x2E037073
	ldr r1, _02027000 ; =0x3BA3198A
	mov r2, fp
	mov r3, r8
	bl FUN_0201ed5c
	str r0, [sp, #0x48]
	str r1, [sp, #0x14]
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	ldr r2, [sp, #0x44]
	mov r3, sb
	bl FUN_0201e9a8
	ldr r2, [sp, #0x40]
	ldr r3, [sp, #0x1c]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x48]
	ldr r1, [sp, #0x14]
	bl FUN_0201e9a8
	str r0, [sp, #0x28]
	str r1, [sp, #0xc]
	ldr r0, [sp, #0x44]
	ldr r2, [sp, #0x28]
	ldr r3, [sp, #0xc]
	mov r1, sb
	bl FUN_0201e9a8
	str r0, [sl]
	ldr r0, _02027014 ; =0x000007FF
	str r1, [sl, #4]
	and r0, r0, r1, asr #20
	rsb r0, r0, r6, asr #20
	cmp r0, #0x31
	ble _02026DD4
	ldr r1, _02027000 ; =0x3BA3198A
	mov r2, fp
	mov r3, r8
	mov r0, #0x2e000000
	str sb, [sp, #0x3c]
	bl FUN_0201ed5c
	str r0, [sp, #0x4c]
	mov r6, r1
	ldr r0, [sp, #0x44]
	ldr r2, [sp, #0x4c]
	mov r1, sb
	mov r3, r6
	bl FUN_0201e9a8
	mov r4, r0
	mov sb, r1
	ldr r0, _02027018 ; =0x252049C1
	ldr r1, _0202701C ; =0x397B839A
	mov r2, fp
	mov r3, r8
	bl FUN_0201ed5c
	mov fp, r0
	mov r8, r1
	ldr r0, [sp, #0x44]
	ldr r1, [sp, #0x3c]
	mov r2, r4
	mov r3, sb
	bl FUN_0201e9a8
	ldr r2, [sp, #0x4c]
	mov r3, r6
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, fp
	mov r1, r8
	bl FUN_0201e9a8
	str r0, [sp, #0x28]
	str r1, [sp, #0xc]
_02026DBC:
	ldr r2, [sp, #0x28]
	ldr r3, [sp, #0xc]
	mov r0, r4
	mov r1, sb
	bl FUN_0201e9a8
	stm sl, {r0, r1}
_02026DD4:
	mov r0, r4
	mov r1, sb
	ldm sl, {r2, r3}
	mov r4, #0
	bl FUN_0201e9a8
	ldr r2, [sp, #0x28]
	ldr r3, [sp, #0xc]
	bl FUN_0201e9a8
	cmp r7, #0
	str r0, [sl, #8]
	addge sp, sp, #0x70
	str r1, [sl, #0xc]
	movge r0, r5
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addge sp, sp, #0x10
	bxge lr
	ldm sl, {r2, r3}
	mov r0, r4
	mov r1, r4
	bl FUN_0201e9a8
	stm sl, {r0, r1}
	ldr r2, [sl, #8]
	ldr r3, [sl, #0xc]
	mov r0, r4
	mov r1, r4
	bl FUN_0201e9a8
	str r0, [sl, #8]
	add sp, sp, #0x70
	str r1, [sl, #0xc]
	rsb r0, r5, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02026E58:
	ldr r1, _02027020 ; =0x7FF00000
	cmp r6, r1
	blt _02026E98
	ldr r0, [sp, #0x98]
	ldr r1, [sp, #0x9c]
	mov r2, r0
	mov r3, r1
	bl FUN_0201e9a8
	str r0, [sl, #8]
	str r1, [sl, #0xc]
	stm sl, {r0, r1}
	add sp, sp, #0x70
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02026E98:
	ldr r0, _02027024 ; =0xFFFFFBEA
	ldr r2, [sp, #0x98]
	add r8, r0, r6, asr #20
	sub r0, r6, r8, lsl #20
	str r2, [sp, #0x50]
	str r0, [sp, #0x54]
	mov r6, r5
	sub sb, r1, #0x3e800000
	add r4, sp, #0x58
_02026EBC:
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	bl FUN_0201fe20
	bl FUN_0201f1c4
	str r0, [r4, r6, lsl #3]
	add r0, r4, r6, lsl #3
	str r1, [r0, #4]
	mov r3, r1
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x54]
	ldr r2, [r4, r6, lsl #3]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, sb
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	add r6, r6, #1
	str r2, [sp, #0x50]
	str r3, [sp, #0x54]
	cmp r6, #2
	blt _02026EBC
	mov r0, r5
	mov r1, r5
	str r2, [sp, #0x68]
	str r3, [sp, #0x6c]
	mov r6, #0
	mov r4, #3
	bl FUN_0201f4b0
	bne _02026F60
	add r5, sp, #0x58
_02026F40:
	sub r4, r4, #1
	add r0, r5, r4, lsl #3
	ldr r2, [r0, #-8]
	ldr r3, [r0, #-4]
	mov r0, r6
	mov r1, r6
	bl FUN_0201f4b0
	beq _02026F40
_02026F60:
	mov r0, #2
	str r0, [sp]
	ldr r5, _02027028 ; =0x0208C1E8
	mov r3, r4
	add r0, sp, #0x58
	mov r1, sl
	mov r2, r8
	str r5, [sp, #4]
	mov r4, #0
	bl FUN_02027344
	cmp r7, #0
	mov r5, r0
	addge sp, sp, #0x70
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addge sp, sp, #0x10
	bxge lr
	ldm sl, {r2, r3}
	mov r0, r4
	mov r1, r4
	bl FUN_0201e9a8
	stm sl, {r0, r1}
	ldr r2, [sl, #8]
	ldr r3, [sl, #0xc]
	mov r0, r4
	mov r1, r4
	bl FUN_0201e9a8
	str r0, [sl, #8]
	str r1, [sl, #0xc]
	rsb r0, r5, #0
	add sp, sp, #0x70
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02026FE4: .word 0x3FE921FB
_02026FE8: .word 0x3DD0B461
_02026FEC: .word 0x4002D97C
_02026FF0: .word 0x54400000
_02026FF4: .word 0x1A626331
_02026FF8: .word 0x1A600000
_02026FFC: .word 0x2E037073
_02027000: .word 0x3BA3198A
_02027004: .word 0x6DC9C883
_02027008: .word 0x3FE45F30
_0202700C: .word 0x3FE00000
_02027010: .word 0x0208C168
_02027014: .word 0x000007FF
_02027018: .word 0x252049C1
_0202701C: .word 0x397B839A
_02027020: .word 0x7FF00000
_02027024: .word 0xFFFFFBEA
_02027028: .word 0x0208C1E8

	arm_func_start FUN_0202702c
FUN_0202702c: ; 0x0202702C
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r0, [sp, #0x34]
	mov sl, r2
	bic r8, r0, #0x80000000
	mov sb, r3
	cmp r8, #0x3e400000
	mov fp, #0
	bge _0202707C
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	bl FUN_0201fe20
	cmp r0, #0
	addeq sp, sp, #0xc
	moveq r0, fp
	ldreq r1, _02027304 ; =0x3FF00000
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	arm_func_end FUN_0202702c
_0202707C:
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	mov r2, r0
	mov r3, r1
	bl FUN_0201ed5c
	mov r4, r0
	mov r6, r1
	ldr r0, _02027308 ; =0xBE8838D4
	ldr r1, _0202730C ; =0xBDA8FAE9
	mov r2, r4
	mov r3, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02027310 ; =0xBDB4B1C4
	ldr r1, _02027314 ; =0x3E21EE9E
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02027318 ; =0x809C52AD
	ldr r1, _0202731C ; =0xBE927E4F
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02027320 ; =0x19CB1590
	ldr r1, _02027324 ; =0x3EFA01A0
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02027328 ; =0x16C15177
	ldr r1, _0202732C ; =0xBF56C16C
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02027330 ; =0x5555554C
	ldr r1, _02027334 ; =0x3FA55555
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r6
	bl FUN_0201ed5c
	mov r5, r0
	ldr r0, _02027338 ; =0x3FD33333
	mov r7, r1
	cmp r8, r0
	ldr r1, _0202733C ; =0x3FE00000
	bge _02027224
	mov r0, #0
	mov r2, r4
	mov r3, r6
	bl FUN_0201ed5c
	mov fp, r0
	mov r8, r1
	mov r0, r4
	mov r1, r6
	mov r2, r5
	mov r3, r7
	bl FUN_0201ed5c
	mov r4, r0
	mov r5, r1
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	mov r2, sl
	mov r3, sb
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r5
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, fp
	mov r1, r8
	bl FUN_0201e9a8
	mov r3, r1
	ldr r1, _0202733C ; =0x3FE00000
	mov r2, r0
	mov r0, #0
	add r1, r1, #0x100000
	bl FUN_0201e9a8
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02027224:
	ldr r0, _02027340 ; =0x3FE90000
	mov r2, r4
	cmp r8, r0
	subgt ip, r0, #0x170000
	strgt fp, [sp, #4]
	strgt ip, [sp, #8]
	suble r0, r8, #0x200000
	strle r0, [sp, #8]
	strle fp, [sp, #4]
	mov r0, fp
	mov r3, r6
	bl FUN_0201ed5c
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	bl FUN_0201e9a8
	mov r8, r1
	ldr r1, _0202733C ; =0x3FE00000
	str r0, [sp]
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	mov r0, fp
	add r1, r1, #0x100000
	bl FUN_0201e9a8
	mov r2, r5
	mov r3, r7
	mov r5, r0
	mov r7, r1
	mov r0, r4
	mov r1, r6
	bl FUN_0201ed5c
	mov r4, r0
	mov r6, r1
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	mov r2, sl
	mov r3, sb
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r6
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp]
	mov r1, r8
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r7
	bl FUN_0201e9a8
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02027304: .word 0x3FF00000
_02027308: .word 0xBE8838D4
_0202730C: .word 0xBDA8FAE9
_02027310: .word 0xBDB4B1C4
_02027314: .word 0x3E21EE9E
_02027318: .word 0x809C52AD
_0202731C: .word 0xBE927E4F
_02027320: .word 0x19CB1590
_02027324: .word 0x3EFA01A0
_02027328: .word 0x16C15177
_0202732C: .word 0xBF56C16C
_02027330: .word 0x5555554C
_02027334: .word 0x3FA55555
_02027338: .word 0x3FD33333
_0202733C: .word 0x3FE00000
_02027340: .word 0x3FE90000

	arm_func_start FUN_02027344
FUN_02027344: ; 0x02027344
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x264
	ldr r6, _02027ED4 ; =0x2AAAAAAB
	sub r7, r2, #3
	smull r5, r4, r6, r7
	str r4, [sp, #0xc]
	mov sb, r0
	lsr r4, r7, #0x1f
	ldr r0, [sp, #0xc]
	ldr r7, [sp, #0x288]
	adds r0, r4, r0, asr #2
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x28c]
	ldr r6, _02027ED8 ; =0x0208C2F0
	str r0, [sp, #0x28c]
	ldr r0, [r6, r7, lsl #2]
	str r1, [sp]
	str r0, [sp, #0x24]
	movmi r0, #0
	strmi r0, [sp, #0xc]
	ldr r0, [sp, #0xc]
	sub r5, r3, #1
	add r1, r0, #1
	mov r0, #0x18
	mul r0, r1, r0
	sub r0, r2, r0
	str r0, [sp, #0x18]
	ldr r0, [sp, #0xc]
	mov r6, #0
	sub r7, r0, r5
	ldr r0, [sp, #0x24]
	adds r8, r5, r0
	bmi _02027410
	cmp r8, #0
	blt _02027410
	mov sl, r6
	add r4, sp, #0x174
	arm_func_end FUN_02027344
_020273D8:
	cmp r7, #0
	movlt r0, sl
	movlt r1, sl
	blt _020273F4
	ldr r0, [sp, #0x28c]
	ldr r0, [r0, r7, lsl #2]
	bl FUN_0201f1c4
_020273F4:
	str r0, [r4, r6, lsl #3]
	add r0, r4, r6, lsl #3
	str r1, [r0, #4]
	add r6, r6, #1
	cmp r6, r8
	add r7, r7, #1
	ble _020273D8
_02027410:
	ldr r0, [sp, #0x24]
	mov sl, #0
	cmp r0, #0
	blt _0202749C
	add fp, sp, #0x174
_02027424:
	mov r7, #0
	mov r4, r7
	mov r8, r7
	cmp r5, #0
	blt _02027480
	add r6, r5, sl
_0202743C:
	add r0, sb, r7, lsl #3
	ldr r1, [r0, #4]
	sub r2, r6, r7
	add r3, fp, r2, lsl #3
	ldr r0, [sb, r7, lsl #3]
	ldm r3, {r2, r3}
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r8
	bl FUN_0201e678
	add r7, r7, #1
	mov r4, r0
	mov r8, r1
	cmp r7, r5
	ble _0202743C
_02027480:
	add r0, sp, #0x34
	add r0, r0, sl, lsl #3
	stm r0, {r4, r8}
	ldr r0, [sp, #0x24]
	add sl, sl, #1
	cmp sl, r0
	ble _02027424
_0202749C:
	ldr r0, [sp, #0x24]
	str r0, [sp, #4]
	ldr r0, [sp, #0x18]
	rsb r0, r0, #0x18
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	rsb r0, r0, #0x17
	str r0, [sp, #0x10]
_020274BC:
	ldr r6, [sp, #4]
	add r1, sp, #0x34
	mov r0, r6
	add r2, r1, r0, lsl #3
	cmp r0, #0
	ldm r2, {r4, r8}
	mov r7, #0
	cmpgt r0, #0
	ble _02027578
	ldr r0, _02027EDC ; =0x3E700000
	sub r0, r0, #0xfd000000
	str r0, [sp, #0x28]
_020274EC:
	ldr r1, _02027EDC ; =0x3E700000
	mov r0, #0
	mov r2, r4
	mov r3, r8
	bl FUN_0201ed5c
	bl FUN_0201fe20
	bl FUN_0201f1c4
	mov sl, r0
	mov fp, r1
	ldr r1, [sp, #0x28]
	mov r0, #0
	mov r2, sl
	mov r3, fp
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r8
	bl FUN_0201e9a8
	bl FUN_0201fe20
	add r2, sp, #0x214
	str r0, [r2, r7, lsl #2]
	add r2, sp, #0x34
	add r3, r2, r6, lsl #3
	ldr r2, [r3, #-8]
	ldr r3, [r3, #-4]
	mov r1, fp
	mov r0, sl
	bl FUN_0201e678
	sub r6, r6, #1
	mov r4, r0
	mov r8, r1
	add r7, r7, #1
	cmp r6, #0
	bgt _020274EC
_02027578:
	ldr r2, [sp, #0x18]
	mov r0, r4
	mov r1, r8
	bl FUN_02025068
	mov r6, r0
	mov r7, r1
	mov sl, #0
	mov r4, #0x3fc00000
	mov r0, sl
	mov r1, r4
	mov r2, r6
	mov r3, r7
	bl FUN_0201ed5c
	bl FUN_020281b8
	mov r2, r0
	mov r3, r1
	mov r0, sl
	add r1, r4, #0x600000
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r7
	bl FUN_0201e9a8
	mov r6, r0
	mov r7, r1
	bl FUN_0201fe20
	str r0, [sp, #0x20]
	bl FUN_0201f1c4
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r7
	bl FUN_0201e9a8
	ldr r2, [sp, #0x18]
	mov r6, r0
	cmp r2, #0
	mov r7, r1
	ble _0202764C
	ldr r0, [sp, #4]
	add r1, sp, #0x214
	add r1, r1, r0, lsl #2
	ldr r3, [r1, #-4]
	ldr r0, [sp, #0x14]
	asr r2, r3, r0
	sub r2, r3, r2, lsl r0
	str r2, [r1, #-4]
	ldr r1, [sp, #0x20]
	add r0, r1, r3, asr r0
	str r0, [sp, #0x20]
	ldr r0, [sp, #0x10]
	asr sl, r2, r0
	b _0202767C
_0202764C:
	cmp r2, #0
	bne _0202766C
	ldr r0, [sp, #4]
	add r1, sp, #0x214
	add r0, r1, r0, lsl #2
	ldr r0, [r0, #-4]
	asr sl, r0, #0x17
	b _0202767C
_0202766C:
	add r3, r4, #0x200000
	mov r2, sl
	bl FUN_0201f240
	movhs sl, #2
_0202767C:
	cmp sl, #0
	ble _02027790
	ldr r0, [sp, #4]
	mov r4, #0
	cmp r0, #0
	ldr r0, [sp, #0x20]
	mov r2, r4
	add r0, r0, #1
	str r0, [sp, #0x20]
	ble _020276E8
	mov r0, #1
	add r1, sp, #0x214
	mvn r8, #0xff000000
_020276B0:
	cmp r4, #0
	ldr r3, [r1, r2, lsl #2]
	bne _020276D0
	cmp r3, #0
	rsbne r3, r3, #0x1000000
	strne r3, [r1, r2, lsl #2]
	movne r4, r0
	b _020276D8
_020276D0:
	sub r3, r8, r3
	str r3, [r1, r2, lsl #2]
_020276D8:
	ldr r3, [sp, #4]
	add r2, r2, #1
	cmp r2, r3
	blt _020276B0
_020276E8:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ble _02027730
	cmp r0, #1
	beq _02027708
	cmp r0, #2
	beq _02027714
	b _02027730
_02027708:
	add r2, sp, #0x214
	ldr r1, _02027EE0 ; =0x007FFFFF
	b _0202771C
_02027714:
	ldr r1, _02027EE4 ; =0x003FFFFF
	add r2, sp, #0x214
_0202771C:
	ldr r0, [sp, #4]
	add r2, r2, r0, lsl #2
	ldr r0, [r2, #-4]
	and r0, r0, r1
	str r0, [r2, #-4]
_02027730:
	cmp sl, #2
	bne _02027790
	mov r8, #0
	ldr fp, _02027EE8 ; =0x3FF00000
	mov r0, r8
	mov r1, fp
	mov r2, r6
	mov r3, r7
	bl FUN_0201e9a8
	cmp r4, #0
	mov r6, r0
	mov r7, r1
	beq _02027790
	ldr r2, [sp, #0x18]
	mov r0, r8
	mov r1, fp
	bl FUN_02025068
	mov r2, r0
	mov r3, r1
	mov r0, r6
	mov r1, r7
	bl FUN_0201e9a8
	mov r6, r0
	mov r7, r1
_02027790:
	mov r4, #0
	mov r0, r4
	mov r1, r4
	mov r2, r6
	mov r3, r7
	bl FUN_0201f4b0
	bne _0202790C
	ldr r0, [sp, #4]
	sub r2, r0, #1
	ldr r0, [sp, #0x24]
	cmp r2, r0
	blt _020277DC
	add r1, sp, #0x214
_020277C4:
	ldr r0, [r1, r2, lsl #2]
	sub r2, r2, #1
	orr r4, r4, r0
	ldr r0, [sp, #0x24]
	cmp r2, r0
	bge _020277C4
_020277DC:
	cmp r4, #0
	bne _0202790C
	ldr r0, [sp, #0x24]
	add r2, sp, #0x214
	sub r0, r0, #1
	ldr r1, [r2, r0, lsl #2]
	mov r0, #1
	str r0, [sp, #0x1c]
	cmp r1, #0
	bne _02027824
_02027804:
	ldr r0, [sp, #0x1c]
	ldr r1, [sp, #0x24]
	add r0, r0, #1
	str r0, [sp, #0x1c]
	sub r0, r1, r0
	ldr r0, [r2, r0, lsl #2]
	cmp r0, #0
	beq _02027804
_02027824:
	ldr r0, [sp, #4]
	add sl, r0, #1
	mov r1, r0
	ldr r0, [sp, #0x1c]
	add r0, r1, r0
	str r0, [sp, #8]
	cmp sl, r0
	bgt _020278F8
	ldr r1, [sp, #0x28c]
	ldr r0, [sp, #0xc]
	add fp, sp, #0x174
	add r0, r1, r0, lsl #2
	str r0, [sp, #0x2c]
	add r0, fp, r5, lsl #3
	str r0, [sp, #0x30]
_02027860:
	ldr r0, [sp, #0x2c]
	ldr r0, [r0, sl, lsl #2]
	bl FUN_0201f1c4
	mov r6, #0
	ldr r2, [sp, #0x30]
	cmp r5, #0
	str r0, [r2, sl, lsl #3]
	mov r0, r2
	add r0, r0, sl, lsl #3
	str r1, [r0, #4]
	mov r7, r6
	mov r8, r6
	blt _020278DC
	add r4, r5, sl
_02027898:
	add r0, sb, r6, lsl #3
	ldr r1, [r0, #4]
	sub r2, r4, r6
	add r3, fp, r2, lsl #3
	ldr r0, [sb, r6, lsl #3]
	ldm r3, {r2, r3}
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, r8
	bl FUN_0201e678
	add r6, r6, #1
	mov r7, r0
	mov r8, r1
	cmp r6, r5
	ble _02027898
_020278DC:
	add r0, sp, #0x34
	add r0, r0, sl, lsl #3
	stm r0, {r7, r8}
	ldr r0, [sp, #8]
	add sl, sl, #1
	cmp sl, r0
	ble _02027860
_020278F8:
	ldr r1, [sp, #4]
	ldr r0, [sp, #0x1c]
	add r0, r1, r0
	str r0, [sp, #4]
	b _020274BC
_0202790C:
	mov r4, #0
	mov r0, r4
	mov r1, r4
	mov r2, r6
	mov r3, r7
	bl FUN_0201f4b0
	bne _02027978
	ldr r0, [sp, #4]
	add r2, sp, #0x214
	sub r0, r0, #1
	ldr r1, [r2, r0, lsl #2]
	str r0, [sp, #4]
	ldr r0, [sp, #0x18]
	cmp r1, #0
	sub r0, r0, #0x18
	str r0, [sp, #0x18]
	bne _02027A48
_02027950:
	ldr r0, [sp, #4]
	sub r0, r0, #1
	ldr r1, [r2, r0, lsl #2]
	str r0, [sp, #4]
	ldr r0, [sp, #0x18]
	cmp r1, #0
	sub r0, r0, #0x18
	str r0, [sp, #0x18]
	beq _02027950
	b _02027A48
_02027978:
	ldr r2, [sp, #0x18]
	mov r0, r6
	mov r1, r7
	rsb r2, r2, #0
	bl FUN_02025068
	ldr r6, _02027EEC ; =0x41700000
	mov r2, r4
	mov r3, r6
	mov r7, r0
	mov r8, r1
	bl FUN_0201f240
	blo _02027A30
	mov r0, r4
	mov r2, r7
	mov r3, r8
	sub r1, r6, #0x3000000
	bl FUN_0201ed5c
	bl FUN_0201fe20
	bl FUN_0201f1c4
	mov r5, r0
	mov r0, r4
	mov r4, r1
	mov r1, r6
	mov r2, r5
	mov r3, r4
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, r8
	bl FUN_0201e9a8
	bl FUN_0201fe20
	ldr r2, [sp, #0x18]
	mov r1, r4
	add r2, r2, #0x18
	str r2, [sp, #0x18]
	ldr r2, [sp, #4]
	add r4, sp, #0x214
	str r0, [r4, r2, lsl #2]
	add r2, r2, #1
	mov r0, r5
	str r2, [sp, #4]
	bl FUN_0201fe20
	ldr r1, [sp, #4]
	str r0, [r4, r1, lsl #2]
	b _02027A48
_02027A30:
	mov r0, r7
	mov r1, r8
	bl FUN_0201fe20
	ldr r1, [sp, #4]
	add r2, sp, #0x214
	str r0, [r2, r1, lsl #2]
_02027A48:
	ldr r4, _02027EE8 ; =0x3FF00000
	ldr r2, [sp, #0x18]
	mov r1, r4
	mov r0, #0
	bl FUN_02025068
	ldr r6, [sp, #4]
	mov r7, r0
	mov r8, r1
	movs r0, r6
	bmi _02027ACC
	sub r4, r4, #0x1800000
	add sb, sp, #0x214
	add r5, sp, #0x34
	mov fp, #0
_02027A80:
	ldr r0, [sb, r6, lsl #2]
	bl FUN_0201f1c4
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, r8
	bl FUN_0201ed5c
	str r0, [r5, r6, lsl #3]
	add r0, r5, r6, lsl #3
	str r1, [r0, #4]
	mov r0, r7
	mov r1, r8
	mov r2, fp
	mov r3, r4
	bl FUN_0201ed5c
	mov r7, r0
	mov r8, r1
	subs r6, r6, #1
	bpl _02027A80
_02027ACC:
	ldr fp, [sp, #4]
	movs r0, fp
	bmi _02027B60
	ldr r5, _02027EF0 ; =0x0208C300
_02027ADC:
	ldr r0, [sp, #4]
	mov r8, #0
	sub r6, r0, fp
	add r0, sp, #0x34
	mov sb, r8
	mov r7, r8
	add r4, r0, fp, lsl #3
	b _02027B38
_02027AFC:
	add r0, r5, r7, lsl #3
	ldr r1, [r0, #4]
	ldr r0, [r5, r7, lsl #3]
	add r2, r4, r7, lsl #3
	ldr r3, [r2, #4]
	ldr r2, [r4, r7, lsl #3]
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r8
	mov r1, sb
	bl FUN_0201e678
	mov r8, r0
	mov sb, r1
	add r7, r7, #1
_02027B38:
	ldr r0, [sp, #0x24]
	cmp r7, r0
	bgt _02027B4C
	cmp r7, r6
	ble _02027AFC
_02027B4C:
	add r0, sp, #0xd4
	add r0, r0, r6, lsl #3
	stm r0, {r8, sb}
	subs fp, fp, #1
	bpl _02027ADC
_02027B60:
	ldr r0, [sp, #0x288]
	add r4, sp, #0xd4
	cmp r0, #3

	arm_func_start switchD
switchD: ; 0x02027B6C
	addls pc, pc, r0, lsl #2
	b _02027EC4
	arm_func_end switchD
_02027B74: ; jump table
	b LAB_02027b84 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02027B78
	b _02027BF8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02027B7C
	b _02027BF8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02027B80
	b _02027CEC
	arm_func_end caseD_3
LAB_02027b84:
	ldr r0, [sp, #4]
	mov r2, #0
	mov r3, r2
	cmp r0, #0
	blt _02027BD0
_02027B98:
	ldr r0, [sp, #4]
	mov r1, r3
	add r5, r4, r0, lsl #3
	mov r0, r2
	ldr r2, [sp, #4]
	ldr r3, [r5, #4]
	ldr r2, [r4, r2, lsl #3]
	bl FUN_0201e678
	mov r2, r0
	ldr r0, [sp, #4]
	mov r3, r1
	subs r0, r0, #1
	str r0, [sp, #4]
	bpl _02027B98
_02027BD0:
	cmp sl, #0
	beq _02027BEC
	mov r0, #0
	mov r1, r0
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
_02027BEC:
	ldr r0, [sp]
	stm r0, {r2, r3}
	b _02027EC4
_02027BF8:
	ldr r7, [sp, #4]
	mov r5, #0
	mov r6, r5
	movs r0, r7
	bmi _02027C30
_02027C0C:
	add r0, r4, r7, lsl #3
	ldm r0, {r2, r3}
	mov r0, r5
	mov r1, r6
	bl FUN_0201e678
	mov r5, r0
	mov r6, r1
	subs r7, r7, #1
	bpl _02027C0C
_02027C30:
	cmp sl, #0
	moveq r0, r5
	moveq r1, r6
	beq _02027C54
	mov r0, #0
	mov r1, r0
	mov r2, r5
	mov r3, r6
	bl FUN_0201e9a8
_02027C54:
	ldr r2, [sp]
	mov r3, r6
	str r0, [r2]
	mov r0, r2
	str r1, [r0, #4]
	mov r2, r5
	ldr r0, [sp, #0xd4]
	ldr r1, [sp, #0xd8]
	add r5, sp, #0xd4
	bl FUN_0201e9a8
	mov r2, r0
	ldr r0, [sp, #4]
	mov r3, r1
	cmp r0, #1
	mov r6, #1
	blt _02027CC0
_02027C94:
	add r4, r5, r6, lsl #3
	mov r0, r2
	mov r1, r3
	ldm r4, {r2, r3}
	bl FUN_0201e678
	mov r2, r0
	ldr r0, [sp, #4]
	add r6, r6, #1
	mov r3, r1
	cmp r6, r0
	ble _02027C94
_02027CC0:
	cmp sl, #0
	beq _02027CDC
	mov r0, #0
	mov r1, r0
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
_02027CDC:
	ldr r0, [sp]
	str r2, [r0, #8]
	str r3, [r0, #0xc]
	b _02027EC4
_02027CEC:
	ldr r5, [sp, #4]
	mov r0, r5
	cmp r0, #0
	ble _02027D5C
_02027CFC:
	add r3, r4, r5, lsl #3
	ldr r0, [r3, #-8]
	ldr r1, [r3, #-4]
	ldm r3, {r2, r3}
	bl FUN_0201e678
	mov r6, r0
	add r8, r4, r5, lsl #3
	mov r7, r1
	ldr r0, [r8, #-8]
	ldr r1, [r8, #-4]
	mov r2, r6
	mov r3, r7
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldm r8, {r0, r1}
	bl FUN_0201e678
	stm r8, {r0, r1}
	mov r0, r8
	str r6, [r0, #-8]
	sub r5, r5, #1
	str r7, [r0, #-4]
	cmp r5, #0
	bgt _02027CFC
_02027D5C:
	ldr r6, [sp, #4]
	add r5, sp, #0xd4
	mov r0, r6
	cmp r0, #1
	ble _02027DD0
_02027D70:
	add r3, r5, r6, lsl #3
	ldr r0, [r3, #-8]
	ldr r1, [r3, #-4]
	ldm r3, {r2, r3}
	bl FUN_0201e678
	mov r4, r0
	add r8, r5, r6, lsl #3
	mov r7, r1
	ldr r0, [r8, #-8]
	ldr r1, [r8, #-4]
	mov r2, r4
	mov r3, r7
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldm r8, {r0, r1}
	bl FUN_0201e678
	stm r8, {r0, r1}
	mov r0, r8
	str r4, [r0, #-8]
	sub r6, r6, #1
	str r7, [r0, #-4]
	cmp r6, #1
	bgt _02027D70
_02027DD0:
	ldr r0, [sp, #4]
	mov r6, #0
	mov r7, r6
	cmp r0, #2
	add r5, sp, #0xd4
	mov r4, r6
	blt _02027E24
_02027DEC:
	ldr r0, [sp, #4]
	add r1, r5, r0, lsl #3
	ldm r1, {r2, r3}
	mov r0, r6
	mov r1, r7
	bl FUN_0201e678
	ldr r2, [sp, #4]
	mov r6, r0
	sub r2, r2, #1
	mov r0, r2
	str r2, [sp, #4]
	mov r7, r1
	cmp r0, #2
	bge _02027DEC
_02027E24:
	cmp sl, #0
	bne _02027E58
	ldr r4, [sp, #0xd4]
	ldr r5, [sp, #0xd8]
	ldr r0, [sp]
	ldr r2, [sp, #0xdc]
	stm r0, {r4, r5}
	ldr r3, [sp, #0xe0]
	str r2, [r0, #8]
	str r3, [r0, #0xc]
	str r6, [r0, #0x10]
	str r7, [r0, #0x14]
	b _02027EC4
_02027E58:
	ldr r2, [sp, #0xd4]
	ldr r3, [sp, #0xd8]
	mov r0, r4
	mov r1, r4
	bl FUN_0201e9a8
	ldr r2, [sp]
	ldr r3, [sp, #0xe0]
	str r0, [r2]
	mov r0, r2
	str r1, [r0, #4]
	ldr r2, [sp, #0xdc]
	mov r0, r4
	mov r1, r4
	bl FUN_0201e9a8
	ldr r2, [sp]
	mov r3, r7
	str r0, [r2, #8]
	mov r0, r2
	str r1, [r0, #0xc]
	mov r0, r4
	mov r1, r4
	mov r2, r6
	bl FUN_0201e9a8
	ldr r2, [sp]
	str r0, [r2, #0x10]
	mov r0, r2
	str r1, [r0, #0x14]
_02027EC4:
	ldr r0, [sp, #0x20]
	and r0, r0, #7
	add sp, sp, #0x264
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02027ED4: .word 0x2AAAAAAB
_02027ED8: .word 0x0208C2F0
_02027EDC: .word 0x3E700000
_02027EE0: .word 0x007FFFFF
_02027EE4: .word 0x003FFFFF
_02027EE8: .word 0x3FF00000
_02027EEC: .word 0x41700000
_02027EF0: .word 0x0208C300

	arm_func_start FUN_02027ef4
FUN_02027ef4: ; 0x02027EF4
	push {r0, r1, r2, r3}
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r0, [sp, #0x34]
	mov sl, r2
	bic r0, r0, #0x80000000
	mov sb, r3
	cmp r0, #0x3e400000
	bge _02027F40
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	bl FUN_0201fe20
	cmp r0, #0
	ldreq r0, [sp, #0x30]
	ldreq r1, [sp, #0x34]
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	addeq sp, sp, #0x10
	bxeq lr
	arm_func_end FUN_02027ef4
_02027F40:
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	mov r2, r0
	mov r3, r1
	bl FUN_0201ed5c
	ldr r2, [sp, #0x30]
	ldr r3, [sp, #0x34]
	mov r5, r0
	mov r6, r1
	bl FUN_0201ed5c
	mov r4, r0
	mov r7, r1
	ldr r0, _0202813C ; =0x5ACFD57C
	ldr r1, _02028140 ; =0x3DE5D93A
	mov r2, r5
	mov r3, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02028144 ; =0x8A2B9CEB
	ldr r1, _02028148 ; =0xBE5AE5E6
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _0202814C ; =0x57B1FE7D
	ldr r1, _02028150 ; =0x3EC71DE3
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02028154 ; =0x19C161D5
	ldr r1, _02028158 ; =0xBF2A01A0
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r6
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _0202815C ; =0x1110F8A6
	ldr r1, _02028160 ; =0x3F811111
	bl FUN_0201e678
	mov fp, r0
	mov r8, r1
	ldr r0, [sp, #0x40]
	cmp r0, #0
	bne _02028084
	mov r0, r5
	mov r1, r6
	mov r2, fp
	mov r3, r8
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, _02028164 ; =0x55555549
	ldr r1, _02028168 ; =0xBFC55555
	bl FUN_0201e678
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r7
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	bl FUN_0201e678
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
_02028084:
	ldr r1, _0202816C ; =0x3FE00000
	mov r2, sl
	mov r3, sb
	mov r0, #0
	bl FUN_0201ed5c
	str r0, [sp, #8]
	str r1, [sp, #4]
	mov r2, fp
	mov r3, r8
	mov r0, r4
	mov r1, r7
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r6
	bl FUN_0201ed5c
	mov r2, sl
	mov r3, sb
	bl FUN_0201e9a8
	mov r2, r4
	mov r4, r0
	mov r5, r1
	ldr r0, _02028164 ; =0x55555549
	ldr r1, _02028168 ; =0xBFC55555
	mov r3, r7
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r5
	bl FUN_0201e9a8
	mov r2, r0
	mov r3, r1
	ldr r0, [sp, #0x30]
	ldr r1, [sp, #0x34]
	bl FUN_0201e9a8
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_0202813C: .word 0x5ACFD57C
_02028140: .word 0x3DE5D93A
_02028144: .word 0x8A2B9CEB
_02028148: .word 0xBE5AE5E6
_0202814C: .word 0x57B1FE7D
_02028150: .word 0x3EC71DE3
_02028154: .word 0x19C161D5
_02028158: .word 0xBF2A01A0
_0202815C: .word 0x1110F8A6
_02028160: .word 0x3F811111
_02028164: .word 0x55555549
_02028168: .word 0xBFC55555
_0202816C: .word 0x3FE00000

	arm_func_start FUN_02028170
FUN_02028170: ; 0x02028170
	push {r0, r1, r2, r3}
	ldr r1, [sp, #4]
	ldr r0, [sp, #0xc]
	bic r1, r1, #0x80000000
	and r0, r0, #0x80000000
	orr r1, r1, r0
	ldr r0, [sp]
	str r1, [sp, #4]
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02028170

	arm_func_start FUN_02028198
FUN_02028198: ; 0x02028198
	push {r0, r1, r2, r3}
	add r2, sp, #0
	ldr r1, [r2, #4]
	ldr r0, [sp]
	bic r1, r1, #0x80000000
	str r1, [r2, #4]
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02028198

	arm_func_start FUN_020281b8
FUN_020281b8: ; 0x020281B8
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r0, _02028368 ; =0x000007FF
	ldr r6, [sp, #0x24]
	rsb r1, r0, #0x400
	and r2, r0, r6, asr #20
	add r7, r2, r1
	cmp r7, #0x14
	ldr r8, [sp, #0x20]
	bge _02028294
	cmp r7, #0
	bge _02028234
	ldr r2, [sp, #0x20]
	ldr r3, [sp, #0x24]
	ldr r0, _0202836C ; =0x8800759C
	ldr r1, _02028370 ; =0x7E37E43C
	bl FUN_0201e678
	mov r4, #0
	mov r2, r4
	mov r3, r4
	bl FUN_0201f2d8
	bls _0202834C
	cmp r6, #0
	movge r8, r4
	movge r6, r4
	bge _0202834C
	bic r0, r6, #0x80000000
	orrs r0, r0, r8
	movne r8, r4
	ldrne r6, _02028374 ; =0xBFF00000
	b _0202834C
	arm_func_end FUN_020281b8
_02028234:
	ldr r4, _02028378 ; =0x000FFFFF
	and r0, r6, r4, asr r7
	orrs r0, r8, r0
	ldreq r0, [sp, #0x20]
	ldreq r1, [sp, #0x24]
	popeq {r3, r4, r5, r6, r7, r8, sb, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r2, [sp, #0x20]
	ldr r3, [sp, #0x24]
	ldr r0, _0202836C ; =0x8800759C
	ldr r1, _02028370 ; =0x7E37E43C
	bl FUN_0201e678
	mov r2, #0
	mov r3, r2
	bl FUN_0201f2d8
	bls _0202834C
	cmp r6, #0
	movlt r0, #0x100000
	addlt r6, r6, r0, asr r7
	mvn r0, r4, asr r7
	and r6, r6, r0
	mov r8, #0
	b _0202834C
_02028294:
	cmp r7, #0x33
	ble _020282D4
	cmp r7, #0x400
	ldrne r0, [sp, #0x20]
	ldrne r1, [sp, #0x24]
	popne {r3, r4, r5, r6, r7, r8, sb, lr}
	addne sp, sp, #0x10
	bxne lr
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	mov r2, r0
	mov r3, r1
	bl FUN_0201e678
	pop {r3, r4, r5, r6, r7, r8, sb, lr}
	add sp, sp, #0x10
	bx lr
_020282D4:
	sub r5, r0, #0x800
	sub r4, r7, #0x14
	tst r8, r5, lsr r4
	mov sb, r8
	ldreq r0, [sp, #0x20]
	ldreq r1, [sp, #0x24]
	popeq {r3, r4, r5, r6, r7, r8, sb, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r2, [sp, #0x20]
	ldr r3, [sp, #0x24]
	ldr r0, _0202836C ; =0x8800759C
	ldr r1, _02028370 ; =0x7E37E43C
	bl FUN_0201e678
	mov r2, #0
	mov r3, r2
	bl FUN_0201f2d8
	bls _0202834C
	cmp r6, #0
	bge _02028344
	cmp r7, #0x14
	addeq r6, r6, #1
	beq _02028344
	rsb r0, r7, #0x34
	mov r1, #1
	add r8, r8, r1, lsl r0
	cmp r8, sb
	addlo r6, r6, #1
_02028344:
	mvn r0, r5, lsr r4
	and r8, r8, r0
_0202834C:
	mov r0, r8
	mov r1, r6
	str r6, [sp, #0x24]
	str r8, [sp, #0x20]
	pop {r3, r4, r5, r6, r7, r8, sb, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02028368: .word 0x000007FF
_0202836C: .word 0x8800759C
_02028370: .word 0x7E37E43C
_02028374: .word 0xBFF00000
_02028378: .word 0x000FFFFF

	arm_func_start FUN_0202837c
FUN_0202837c: ; 0x0202837C
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	ldr r1, [sp, #0x14]
	ldr r0, _0202842C ; =0x7FF00000
	bic r3, r1, #0x80000000
	mov r4, r2
	mov r5, #0
	str r5, [r4]
	cmp r3, r0
	ldr r0, [sp, #0x10]
	bge _020283B0
	orrs r0, r3, r0
	bne _020283C4
	arm_func_end FUN_0202837c
_020283B0:
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
_020283C4:
	cmp r3, #0x100000
	bge _020283F4
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	ldr r3, _02028430 ; =0x43500000
	mov r2, r5
	bl FUN_0201ed5c
	sub r2, r5, #0x36
	str r0, [sp, #0x10]
	str r1, [sp, #0x14]
	str r2, [r4]
	bic r3, r1, #0x80000000
_020283F4:
	ldr r2, _02028434 ; =0x800FFFFF
	ldr r0, _02028438 ; =0xFFFFFC02
	and r1, r1, r2
	orr r1, r1, #0xfe00000
	orr r1, r1, #0x30000000
	ldr r2, [r4]
	add r0, r0, r3, asr #20
	add r2, r2, r0
	ldr r0, [sp, #0x10]
	str r2, [r4]
	str r1, [sp, #0x14]
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_0202842C: .word 0x7FF00000
_02028430: .word 0x43500000
_02028434: .word 0x800FFFFF
_02028438: .word 0xFFFFFC02

	arm_func_start FUN_0202843c
FUN_0202843c: ; 0x0202843C
	push {r0, r1, r2, r3}
	push {r4, r5, r6, lr}
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	mov r4, r2
	bl FUN_02021784
	cmp r0, #2
	ble _02028478
	mov r6, #0
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	mov r0, r6
	mov r1, r6
	bl FUN_0201f4b0
	bne _0202848C
	arm_func_end FUN_0202843c
_02028478:
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
_0202848C:
	ldr r3, [sp, #0x14]
	ldr r5, _02028670 ; =0x7FF00000
	ldr r1, [sp, #0x10]
	and r0, r3, r5
	asrs ip, r0, #0x14
	bne _02028514
	bic r0, r3, #0x80000000
	orrs r0, r1, r0
	ldreq r0, [sp, #0x10]
	ldreq r1, [sp, #0x14]
	popeq {r4, r5, r6, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	ldr r3, _02028674 ; =0x43500000
	mov r2, r6
	bl FUN_0201ed5c
	mov r3, r1
	and r5, r3, r5
	ldr r1, _02028678 ; =0xFFFF3CB0
	mov r2, r0
	asr r0, r5, #0x14
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	cmp r4, r1
	sub ip, r0, #0x36
	bge _02028514
	ldr r0, _0202867C ; =0xC2F8F359
	ldr r1, _02028680 ; =0x01A56E1F
	bl FUN_0201ed5c
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
_02028514:
	ldr r0, _02028684 ; =0x000007FF
	cmp ip, r0
	bne _02028540
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x14]
	mov r2, r0
	mov r3, r1
	bl FUN_0201e678
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
_02028540:
	add r2, ip, r4
	sub r0, r0, #1
	cmp r2, r0
	ble _0202858C
	ldr r5, _02028688 ; =0x8800759C
	ldr r4, _0202868C ; =0x7E37E43C
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	mov r0, r5
	mov r1, r4
	bl FUN_02028170
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
_0202858C:
	cmp r2, #0
	ble _020285B4
	ldr r1, _02028690 ; =0x800FFFFF
	ldr r0, [sp, #0x10]
	and r1, r3, r1
	orr r1, r1, r2, lsl #20
	str r1, [sp, #0x14]
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
_020285B4:
	cmn r2, #0x36
	bgt _02028640
	ldr r0, _02028694 ; =0x0000C350
	cmp r4, r0
	ble _02028604
	ldr r5, _02028688 ; =0x8800759C
	ldr r4, _0202868C ; =0x7E37E43C
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	mov r0, r5
	mov r1, r4
	bl FUN_02028170
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
_02028604:
	ldr r5, _0202867C ; =0xC2F8F359
	ldr r4, _02028680 ; =0x01A56E1F
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	mov r0, r5
	mov r1, r4
	bl FUN_02028170
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
_02028640:
	ldr r0, _02028690 ; =0x800FFFFF
	add r1, r2, #0x36
	and r0, r3, r0
	orr r3, r0, r1, lsl #20
	ldr r2, [sp, #0x10]
	ldr r1, _02028698 ; =0x3C900000
	mov r0, #0
	str r3, [sp, #0x14]
	bl FUN_0201ed5c
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02028670: .word 0x7FF00000
_02028674: .word 0x43500000
_02028678: .word 0xFFFF3CB0
_0202867C: .word 0xC2F8F359
_02028680: .word 0x01A56E1F
_02028684: .word 0x000007FF
_02028688: .word 0x8800759C
_0202868C: .word 0x7E37E43C
_02028690: .word 0x800FFFFF
_02028694: .word 0x0000C350
_02028698: .word 0x3C900000

	arm_func_start FUN_0202869c
FUN_0202869c: ; 0x0202869C
	push {r0, r1, r2, r3}
	push {r3, r4, lr}
	sub sp, sp, #0x14
	ldr r1, [sp, #0x24]
	ldr r0, _0202880C ; =0x3FE921FB
	bic r1, r1, #0x80000000
	cmp r1, r0
	mov r4, #0
	bgt _020286E8
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	mov r2, r4
	mov r3, r4
	str r4, [sp]
	bl FUN_02027ef4
	add sp, sp, #0x14
	pop {r3, r4, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_0202869c
_020286E8:
	ldr r0, _02028810 ; =0x7FF00000
	cmp r1, r0
	blt _02028718
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	mov r2, r0
	mov r3, r1
	bl FUN_0201e9a8
	add sp, sp, #0x14
	pop {r3, r4, lr}
	add sp, sp, #0x10
	bx lr
_02028718:
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	add r2, sp, #4
	bl FUN_0202694c
	ands r0, r0, #3
	beq _02028744
	cmp r0, #1
	beq _02028770
	cmp r0, #2
	beq _02028794
	b _020287D4
_02028744:
	mov r0, #1
	str r0, [sp]
	ldr r0, [sp, #4]
	ldr r1, [sp, #8]
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #0x10]
	bl FUN_02027ef4
	add sp, sp, #0x14
	pop {r3, r4, lr}
	add sp, sp, #0x10
	bx lr
_02028770:
	ldr r0, [sp, #4]
	ldr r1, [sp, #8]
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #0x10]
	bl FUN_0202702c
	add sp, sp, #0x14
	pop {r3, r4, lr}
	add sp, sp, #0x10
	bx lr
_02028794:
	mov r0, #1
	str r0, [sp]
	ldr r0, [sp, #4]
	ldr r1, [sp, #8]
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #0x10]
	bl FUN_02027ef4
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r4
	bl FUN_0201e9a8
	add sp, sp, #0x14
	pop {r3, r4, lr}
	add sp, sp, #0x10
	bx lr
_020287D4:
	ldr r0, [sp, #4]
	ldr r1, [sp, #8]
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #0x10]
	bl FUN_0202702c
	mov r2, r0
	mov r3, r1
	mov r0, r4
	mov r1, r4
	bl FUN_0201e9a8
	add sp, sp, #0x14
	pop {r3, r4, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_0202880C: .word 0x3FE921FB
_02028810: .word 0x7FF00000

	arm_func_start thunk_FUN_02025094
thunk_FUN_02025094: ; 0x02028814
	ldr ip, _0202881C ; =FUN_02025094
	bx ip
	.align 2, 0_0202881C: .word FUN_02025094
	arm_func_end thunk_FUN_02025094

	arm_func_start thunk_FUN_020257c4
thunk_FUN_020257c4: ; 0x02028820
	ldr ip, _02028828 ; =FUN_020257c4
	bx ip
	.align 2, 0_02028828: .word FUN_020257c4
	arm_func_end thunk_FUN_020257c4

	arm_func_start FUN_0202882c
FUN_0202882c: ; 0x0202882C
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	mov r4, r1
	str r4, [r5]
	add r1, sp, #0x20
	mov r0, #0x10
	str r4, [sp]
	str r1, [sp, #4]
	bl FUN_0201e014
	cmp r0, #0
	beq _02028878
	mov r2, #1
	str r2, [r0, #4]
	ldr r1, _020288A0 ; =0x0208F484
	str r2, [r0, #8]
	str r1, [r0]
	str r4, [r0, #0xc]
	arm_func_end FUN_0202882c
_02028878:
	str r0, [r5, #4]
	mov r1, #0
	add r0, sp, #0
	str r1, [sp]
	bl FUN_0202891c
	mov r0, r5
	add sp, sp, #8
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_020288A0: .word 0x0208F484

	arm_func_start LAB_020288a4
LAB_020288a4: ; 0x020288A4
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	ldr r1, _020288C8 ; =0x0208F468
	bl FUN_0201e3cc
	cmp r0, #0
	addne r0, r4, #0xc
	moveq r0, #0
	pop {r4, pc}
	.align 2, 0_020288C8: .word 0x0208F468
	arm_func_end LAB_020288a4

	arm_func_start LAB_020288cc
LAB_020288cc: ; 0x020288CC
	ldr r0, [r0, #0xc]
	ldr ip, _020288D8 ; =thunk_FUN_0201e078
	bx ip
	.align 2, 0_020288D8: .word thunk_FUN_0201e078
	arm_func_end LAB_020288cc

	arm_func_start FUN_020288dc
FUN_020288dc: ; 0x020288DC
	push {r3, r4, fp, lr}
	sub sp, sp, #0x18
	mov fp, sp
	mov r4, r0
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _020288FC
	bl FUN_02028f44
	arm_func_end FUN_020288dc
_020288FC:
	add sp, fp, #0x18
	mov r0, r4
	pop {r3, r4, fp, pc}
_02028908:
	.byte 0x00, 0x00, 0x8B, 0xE2, 0xEA, 0xD3, 0xFF, 0xEB
_02028910:
	b _02028910
_02028914:
	.byte 0x18, 0xD0, 0x8B, 0xE2, 0x18, 0x88, 0xBD, 0xE8

	arm_func_start FUN_0202891c
FUN_0202891c: ; 0x0202891C
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _02028934
	bl thunk_FUN_0201e078
	arm_func_end FUN_0202891c
_02028934:
	mov r0, r4
	pop {r4, pc}

	arm_func_start FUN_0202893c
FUN_0202893c: ; 0x0202893C
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0202893c

	arm_func_start LAB_02028950
LAB_02028950: ; 0x02028950
	bx lr
	arm_func_end LAB_02028950

	arm_func_start LAB_02028954
LAB_02028954: ; 0x02028954
	ldr r0, [r0, #4]
	bx lr
	arm_func_end LAB_02028954

	arm_func_start FUN_0202895c
FUN_0202895c: ; 0x0202895C
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	beq _0202897C
	ldr r0, [r4, #8]
	bl FUN_0201e078
	arm_func_end FUN_0202895c
_0202897C:
	mov r0, r4
	pop {r4, pc}

	arm_func_start FUN_02028984
FUN_02028984: ; 0x02028984
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	ldr r4, [r3]
	mov sl, r0
	lsl r0, r4, #0x1f
	lsrs r0, r0, #0x1f
	ldrbeq r0, [r3]
	addeq r4, r3, #1
	mov sb, r1
	lsleq r0, r0, #0x18
	lsreq r5, r0, #0x19
	ldrne r5, [r3, #4]
	ldr r0, [sp, #0x40]
	ldrne r4, [r3, #8]
	mov r8, r2
	cmp r0, r5
	bls _02028A30
	ldr fp, _02028A84 ; =0x0208F610
	ldr r1, _02028A88 ; =0x0208F5CC
	add r7, sp, #0x10
	mov r0, fp
	str r1, [sp, #0x10]
	add r6, sp, #0x14
	bl _strlen
	add r0, r0, #1
	rsb r0, r0, r0, lsl #1
	bl FUN_0201e08c
	mov r1, #0
	sub r2, sp, #4
	strb r1, [r2]
	mov r1, r0
	ldr r2, [r2]
	mov r0, r6
	bl FUN_0202882c
	ldr r0, [r6]
	mov r1, fp
	bl FUN_02023e98
	ldr r3, _02028A8C ; =0x0208F5A4
	ldr r0, _02028A90 ; =0x0208F62C
	ldr r2, _02028A94 ; =FUN_02028f0c
	mov r1, r7
	str r3, [sp, #0x10]
	bl FUN_0201e5e4
	arm_func_end FUN_02028984
_02028A30:
	ldr r2, [sp, #0x40]
	ldr r0, [sp, #0x44]
	sub r1, r5, r2
	cmp r1, r0
	addlo r0, sp, #0xc
	str r1, [sp, #0xc]
	add r4, r4, r2
	addhs r0, sp, #0x44
	ldr r0, [r0]
	ldrb r5, [sp, #9]
	str r0, [sp, #0x44]
	add r0, r4, r0
	str r0, [sp]
	mov r0, sl
	mov r1, sb
	mov r2, r8
	mov r3, r4
	strb r5, [sp, #4]
	bl FUN_02028a98
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02028A84: .word 0x0208F610
_02028A88: .word 0x0208F5CC
_02028A8C: .word 0x0208F5A4
_02028A90: .word 0x0208F62C
_02028A94: .word FUN_02028f0c

	arm_func_start FUN_02028a98
FUN_02028a98: ; 0x02028A98
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x48
	mov r5, r0
	ldr r0, [r5]
	mov r4, r1
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	movne r0, #1
	strne r0, [sp, #4]
	moveq r0, #0
	streq r0, [sp, #4]
	ldr r0, [sp, #4]
	str r3, [sp]
	cmp r0, #0
	ldmne r5, {r0, r7}
	lsrne r0, r0, #1
	ldr fp, [sp, #0x80]
	ldrne r6, [r5, #8]
	strne r0, [sp, #0x18]
	bne _02028B04
	ldrb r1, [r5]
	mov r0, #0xb
	str r0, [sp, #0x18]
	lsl r0, r1, #0x18
	add r6, r5, #1
	lsr r7, r0, #0x19
	arm_func_end FUN_02028a98
_02028B04:
	cmp r4, r7
	bls _02028B74
	ldr sl, _02028E0C ; =0x0208F610
	ldr r1, _02028E10 ; =0x0208F5CC
	add sb, sp, #0x3c
	mov r0, sl
	str r1, [sp, #0x3c]
	add r8, sp, #0x40
	bl _strlen
	add r0, r0, #1
	rsb r0, r0, r0, lsl #1
	bl FUN_0201e08c
	mov r1, #0
	sub r2, sp, #4
	strb r1, [r2]
	mov r1, r0
	ldr r2, [r2]
	mov r0, r8
	bl FUN_0202882c
	ldr r0, [r8]
	mov r1, sl
	bl FUN_02023e98
	ldr r3, _02028E14 ; =0x0208F5A4
	ldr r0, _02028E18 ; =0x0208F62C
	ldr r2, _02028E1C ; =FUN_02028f0c
	mov r1, sb
	str r3, [sp, #0x3c]
	bl FUN_0201e5e4
_02028B74:
	ldr r0, [sp, #0x78]
	sub r1, r7, r4
	cmp r1, r0
	ldr r0, [sp]
	str r1, [sp, #0x20]
	addlo r1, sp, #0x20
	addhs r1, sp, #0x78
	sub sb, fp, r0
	mvn r0, #0x80000001
	cmp sb, r0
	ldr r8, [r1]
	bhi _02028BB4
	sub r1, r7, r8
	sub r0, r0, sb
	cmp r1, r0
	bls _02028C20
_02028BB4:
	ldr r1, _02028E10 ; =0x0208F5CC
	ldr r0, _02028E20 ; =0x0208F664
	str r1, [sp, #0x30]
	add r1, sp, #0x34
	add sl, sp, #0x30
	str r1, [sp, #0x10]
	bl _strlen
	add r0, r0, #1
	rsb r0, r0, r0, lsl #1
	bl FUN_0201e08c
	mov r2, #0
	sub r3, sp, #4
	mov r1, r0
	strb r2, [r3]
	ldr r0, [sp, #0x10]
	ldr r2, [r3]
	bl FUN_0202882c
	ldr r0, [sp, #0x10]
	ldr r1, _02028E20 ; =0x0208F664
	ldr r0, [r0]
	bl FUN_02023e98
	ldr r1, _02028E24 ; =0x0208F5B8
	ldr r0, _02028E28 ; =0x0208F5D8
	ldr r2, _02028E2C ; =FUN_02028ed4
	str r1, [sp, #0x30]
	mov r1, sl
	bl FUN_0201e5e4
_02028C20:
	sub r0, r7, r8
	add sl, sb, r0
	ldr r0, [sp, #0x18]
	add r1, r4, r8
	cmp sl, r0
	sub r0, r7, r1
	str r0, [sp, #0x14]
	blo _02028D18
	ldr r0, [sp, #0x18]
	add r1, sl, #1
	add r0, r0, #0xf
	bic r7, r0, #0xf
	cmp r7, r1
	bhs _02028C6C
_02028C58:
	lsl r0, r7, #1
	add r0, r0, #0xf
	bic r7, r0, #0xf
	cmp r7, r1
	blo _02028C58
_02028C6C:
	mov r0, r7
	bl FUN_0201e014
	str r0, [sp, #0xc]
	cmp r4, #0
	beq _02028C8C
	mov r1, r6
	mov r2, r4
	bl FUN_020218d4
_02028C8C:
	ldr r0, [sp, #0xc]
	ldr r1, [sp]
	add r0, r0, r4
	sub r2, fp, r1
	str r0, [sp, #8]
	bl FUN_020218f4
	ldr r0, [sp, #0x14]
	cmp r0, #0
	beq _02028CC8
	mov r2, r0
	ldr r0, [sp, #8]
	add r1, r6, r4
	add r0, r0, sb
	add r1, r1, r8
	bl FUN_020218d4
_02028CC8:
	ldr r1, _02028E30 ; =0x0208F534
	ldr r0, [sp, #4]
	ldrb r1, [r1, #1]
	cmp r0, #0
	ldr r0, [sp, #0xc]
	strb r1, [r0, sl]
	ldreq r0, [r5]
	biceq r0, r0, #1
	orreq r0, r0, #1
	streq r0, [r5]
	beq _02028CFC
	mov r0, r6
	bl FUN_0201e078
_02028CFC:
	ldr r0, [sp, #0xc]
	ldr r1, [r5]
	str r0, [r5, #8]
	and r0, r1, #1
	orr r0, r0, r7, lsl #1
	stm r5, {r0, sl}
	b _02028DF8
_02028D18:
	mov r1, #0
	add r0, sp, #0x24
	mov r3, r1
_02028D24:
	str r3, [r0, r1, lsl #2]
	add r1, r1, #1
	cmp r1, #3
	blo _02028D24
	ldr r0, [sp, #0x14]
	cmp r0, #0
	beq _02028D8C
	add r0, r6, r4
	add r0, r0, sb
	cmp r0, fp
	bhs _02028D8C
	add r0, r6, r7
	cmp fp, r0
	bhi _02028D8C
	add r7, sp, #0x24
	ldr r1, [sp]
	mov r0, r7
	mov r2, fp
	bl FUN_02028e34
	ldr r0, [sp, #0x24]
	lsl r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	addeq r0, r7, #1
	streq r0, [sp]
	ldrne r0, [r7, #8]
	strne r0, [sp]
_02028D8C:
	ldr r0, [sp, #0x14]
	cmp r0, #0
	beq _02028DAC
	add r1, r6, r4
	mov r2, r0
	add r0, r1, sb
	add r1, r1, r8
	bl FUN_020218f4
_02028DAC:
	ldr r1, [sp]
	mov r2, sb
	add r0, r6, r4
	bl FUN_020218f4
	ldr r0, [sp, #4]
	ldr r1, _02028E30 ; =0x0208F534
	cmp r0, #0
	ldrb r0, [r1]
	strb r0, [r6, sl]
	strne sl, [r5, #4]
	bne _02028DF0
	ldrb r1, [r5]
	and r0, sl, #0xff
	lsl r0, r0, #0x19
	bic r1, r1, #0xfe
	orr r0, r1, r0, lsr #24
	strb r0, [r5]
_02028DF0:
	add r0, sp, #0x24
	bl FUN_0202895c
_02028DF8:
	mov r0, r5
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02028E0C: .word 0x0208F610
_02028E10: .word 0x0208F5CC
_02028E14: .word 0x0208F5A4
_02028E18: .word 0x0208F62C
_02028E1C: .word FUN_02028f0c
_02028E20: .word 0x0208F664
_02028E24: .word 0x0208F5B8
_02028E28: .word 0x0208F5D8
_02028E2C: .word FUN_02028ed4
_02028E30: .word 0x0208F534

	arm_func_start FUN_02028e34
FUN_02028e34: ; 0x02028E34
	push {r3, lr}
	sub sp, sp, #8
	ldr ip, [r0]
	mov r3, r1
	lsl r1, ip, #0x1f
	lsrs r1, r1, #0x1f
	ldrbeq r1, [r0]
	lsleq r1, r1, #0x18
	lsreq ip, r1, #0x19
	ldrne ip, [r0, #4]
	mov r1, #0
	str r2, [sp]
	mov r2, ip
	str r1, [sp, #4]
	bl FUN_02028e78
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_02028e34

	arm_func_start FUN_02028e78
FUN_02028e78: ; 0x02028E78
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr lr, [sp, #0x10]
	ldrb ip, [sp, #8]
	str lr, [sp]
	strb ip, [sp, #4]
	bl FUN_02028a98
	add sp, sp, #0xc
	ldm sp!, {pc}
	arm_func_end FUN_02028e78

	arm_func_start FUN_02028e9c
FUN_02028e9c: ; 0x02028E9C
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020288dc
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02028e9c

	arm_func_start FUN_02028eb4
FUN_02028eb4: ; 0x02028EB4
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020288dc
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02028eb4

	arm_func_start FUN_02028ed4
FUN_02028ed4: ; 0x02028ED4
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020288dc
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02028ed4

	arm_func_start FUN_02028eec
FUN_02028eec: ; 0x02028EEC
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020288dc
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02028eec

	arm_func_start FUN_02028f0c
FUN_02028f0c: ; 0x02028F0C
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020288dc
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02028f0c

	arm_func_start FUN_02028f24
FUN_02028f24: ; 0x02028F24
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020288dc
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02028f24

	arm_func_start FUN_02028f44
FUN_02028f44: ; 0x02028F44
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #4]
	subs r1, r1, #1
	str r1, [r4, #4]
	popne {r4, pc}
	ldr r1, [r0]
	ldr r1, [r1, #0xc]
	blx r1
	mov r0, r4
	bl FUN_02028f74
	pop {r4, pc}
	arm_func_end FUN_02028f44

	arm_func_start FUN_02028f74
FUN_02028f74: ; 0x02028F74
	push {r3, lr}
	ldr r1, [r0, #8]
	subs r1, r1, #1
	str r1, [r0, #8]
	popne {r3, pc}
	cmp r0, #0
	popeq {r3, pc}
	ldr r1, [r0]
	ldr r1, [r1, #4]
	blx r1
	pop {r3, pc}
	arm_func_end FUN_02028f74
_02028FA0:
	.byte 0x1E, 0xFF, 0x2F, 0xE1, 0x1E, 0xFF, 0x2F, 0xE1, 0x1E, 0xFF, 0x2F, 0xE1

	arm_func_start FUN_02028fac
FUN_02028fac: ; 0x02028FAC
	push {r4, lr}
	ldr r4, _02029064 ; =0x02099E8C
	ldr r0, [r4, #0x80]
	add r0, r0, #1
	str r0, [r4, #0x80]
	ldr r0, [r4, #0xa4]
	cmp r0, #0
	beq _02028FD0
	bl FUN_02051c10
	arm_func_end FUN_02028fac
_02028FD0:
	ldr r0, [r4, #0x40]
	cmp r0, #0
	beq _02028FE8
	ldr r0, [r4, #0x80]
	cmp r0, #2
	bge _02028FF4
_02028FE8:
	ldr r0, [r4, #0xb0]
	cmp r0, #0
	beq _02029014
_02028FF4:
	ldrh r2, [r4, #0x7c]
	ldr r1, _02029068 ; =0x0400006C
	mov r0, #0
	strh r2, [r1]
	ldrh r2, [r4, #0x7e]
	add r1, r1, #0x1000
	strh r2, [r1]
	str r0, [r4, #0xb0]
_02029014:
	ldr r0, [r4, #0x40]
	cmp r0, #0
	beq _0202903C
	ldr r0, [r4, #0x80]
	cmp r0, #2
	blt _0202903C
	bl FUN_020F5258
	mov r0, #0
	str r0, [r4, #0x80]
	str r0, [r4, #0x40]
_0202903C:
	ldr r0, _0202906C ; =0x0209AEC0
	bl FUN_02047a10
	ldr r0, _02029070 ; =0x0209C2C4
	bl FUN_0202f794
	ldr r0, _02029074 ; =0x027E0000
	add r0, r0, #0x3000
	ldr r1, [r0, #0xff8]
	orr r1, r1, #1
	str r1, [r0, #0xff8]
	pop {r4, pc}
	.align 2, 0_02029064: .word 0x02099E8C
_02029068: .word 0x0400006C
_0202906C: .word 0x0209AEC0
_02029070: .word 0x0209C2C4
_02029074: .word 0x027E0000

	arm_func_start FUN_02029078
FUN_02029078: ; 0x02029078
	push {r3, r4, r5, lr}
	bl FUN_0212A9C0
	mov r5, #0
	mov r0, r5
	mov r1, #0x2d000
	mov r2, #0x20
	bl FUN_02002ad4
	mov r1, r0
	mov r0, r5
	add r2, r1, #0x2d000
	bl FUN_02002e74
	mov r4, r0
	mov r0, r5
	mov r1, r4
	bl FUN_02002d9c
	ldr r0, _020290C0 ; =0x02099E8C
	str r4, [r0, #0xc0]
	pop {r3, r4, r5, pc}
	.align 2, 0_020290C0: .word 0x02099E8C
	arm_func_end FUN_02029078

	arm_func_start FUN_020290c4
FUN_020290c4: ; 0x020290C4
	push {r4, lr}
	bl FUN_02002748
	bl FUN_02003328
	bl FUN_020035b8
	bl FUN_020017ec
	mvn r0, #0
	bl FUN_0200fd94
	bl FUN_0200adc4
	mov r4, #0
	ldr r1, _02029130 ; =0x00000082
	mov r0, r4
	bl FUN_0200e580
	bl FUN_02029078
	bl FUN_02009c28
	mov r1, #2
	ldr r0, _02029134 ; =0x0208EC7C
	str r1, [r0]
	bl FUN_020042a4
	bl FUN_0200445c
	mov r0, r4
	ldr r3, _02029138 ; =0x04001000
	ldr r1, _0202913C ; =0x00000010
	ldr r2, [r3]
	bic r2, r2, #0x10000
	str r2, [r3]
	bl FUN_0200e580
	pop {r4, pc}
	.align 2, 0_02029130: .word 0x00000082
_02029134: .word 0x0208EC7C
_02029138: .word 0x04001000
_0202913C: .word 0x00000010
	arm_func_end FUN_020290c4

	arm_func_start FUN_02029140
FUN_02029140: ; 0x02029140
	push {r4, r5, r6, lr}
	mov r5, #0
	mov r0, r5
	bl FUN_02002914
	ldr r4, _0202920C ; =0x02099E8C
	str r0, [r4, #0x94]
	mov r0, r5
	bl FUN_02002900
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x94]
	add r1, r1, #0x4800
	add r1, r1, #0x240000
	str r1, [r4, #0xb4]
	cmp r1, r0
	strls r0, [r4, #0x30]
	bls _02029184
	bl FUN_02004160
	arm_func_end FUN_02029140
_02029184:
	ldr r4, _0202920C ; =0x02099E8C
	mov r6, #0
	ldr r1, [r4, #0x94]
	ldr r2, [r4, #0x30]
	mov r0, r6
	sub r2, r2, r1
	str r2, [r4, #0xbc]
	bl FUN_0200787c
	ldr r0, [r4, #0x94]
	ldr r1, [r4, #0xbc]
	bl FUN_020026d0
	ldr r5, _02029210 ; =0x0209A250
	ldr r2, [r4, #0x94]
	ldr r3, [r4, #0x30]
	mov r0, r5
	mov r1, r6
	bl FUN_0202dc54
	ldr r1, [r4, #0x30]
	mov r0, r6
	add r1, r1, #0x1f
	bic r1, r1, #0x1f
	bl FUN_02002ac0
	mov r1, r6
	mov r0, r5
	bl FUN_0202e1ac
	ldr r0, _02029214 ; =0x0209C2C4
	mov r1, #0x40
	str r0, [r5]
	mov r2, r5
	bl FUN_0202edec
	mov r1, r5
	ldr r0, _02029218 ; =0x0209A8A0
	bl FUN_0202e4ac
	pop {r4, r5, r6, pc}
	.align 2, 0_0202920C: .word 0x02099E8C
_02029210: .word 0x0209A250
_02029214: .word 0x0209C2C4
_02029218: .word 0x0209A8A0

	arm_func_start FUN_0202921c
FUN_0202921c: ; 0x0202921C
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _02029290 ; =0x000001FF
	bl FUN_02006918
	mov r7, #0
	mov r0, r7
	mov r1, #0x6800000
	mov r2, #0xa4000
	bl FUN_0200787c
	bl FUN_02006db0
	mov r6, #0xc0
	mov r5, #0x400
	mov r0, r6
	mov r2, r5
	mov r1, #0x7000000
	bl FUN_0200787c
	mov r0, r7
	mov r4, #0x5000000
	mov r1, r4
	mov r2, r5
	bl FUN_0200787c
	mov r0, r6
	sub r1, r5, #0xf9000000
	mov r2, r5
	bl FUN_0200787c
	mov r0, r7
	add r1, r4, #0x400
	mov r2, r5
	bl FUN_0200787c
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02029290: .word 0x000001FF
	arm_func_end FUN_0202921c

	arm_func_start FUN_02029294
FUN_02029294: ; 0x02029294
	push {r3, r4, r5, lr}
	ldr r5, _020292E0 ; =0x04000208
	mov r4, #1
	ldrh r0, [r5]
	ldr r1, _020292E4 ; =FUN_02028fac
	mov r2, #0
	mov r0, r4
	strh r2, [r5]
	bl FUN_02000e30
	mov r0, r4
	bl FUN_02000ffc
	mov r0, #0x40000
	bl FUN_02000ffc
	ldrh r0, [r5]
	mov r0, r4
	strh r4, [r5]
	bl FUN_02004414
	bl FUN_02003e40
	pop {r3, r4, r5, pc}
	.align 2, 0_020292E0: .word 0x04000208
_020292E4: .word FUN_02028fac
	arm_func_end FUN_02029294

	arm_func_start thunk_FUN_0202ede8
thunk_FUN_0202ede8: ; 0x020292E8
	ldr ip, _020292F0 ; =FUN_0202ede8
	bx ip
	.align 2, 0_020292F0: .word FUN_0202ede8
	arm_func_end thunk_FUN_0202ede8

	arm_func_start FUN_020292f4
FUN_020292f4: ; 0x020292F4
	push {r3, lr}
	bl FUN_020864b4
	bl FUN_0212AA14
	pop {r3, pc}
	arm_func_end FUN_020292f4

	arm_func_start FUN_02029304
FUN_02029304: ; 0x02029304
	push {r3, r4, r5, lr}
	mov r0, #0x48
	ldr r4, _02029558 ; =0x02099E8C
	bl FUN_0201e014
	cmp r0, #0
	ldrne r1, _0202955C ; =0x0209057C
	strne r1, [r0]
	str r0, [r4, #0x8c]
	mov r0, #0x3c
	bl FUN_0201e014
	str r0, [r4, #0xa4]
	mov r0, #0x2c
	bl FUN_0201e014
	cmp r0, #0
	beq _02029344
	bl FUN_020FD4A8
	arm_func_end FUN_02029304
_02029344:
	str r0, [r4, #0x58]
	ldr r0, _02029560 ; =0x000005E4
	bl FUN_0201e014
	str r0, [r4, #0x98]
	mov r0, #0x94
	bl FUN_0201e014
	movs r5, r0
	beq _02029370
	ldr r1, _02029564 ; =0x0208F6E0
	str r1, [r5]
	bl FUN_02059fcc
_02029370:
	mov r0, #0x38
	str r5, [r4, #0x60]
	bl FUN_0201e014
	cmp r0, #0
	beq _02029388
	bl FUN_0205d104
_02029388:
	str r0, [r4, #0x24]
	mov r0, #0x1c
	bl FUN_0201e014
	movs r5, r0
	beq _020293B0
	bl FUN_02052144
	ldr r1, _02029568 ; =0x0209095C
	mov r0, r5
	str r1, [r5]
	bl FUN_0205b518
_020293B0:
	mov r0, #0x3c
	str r5, [r4, #0x84]
	bl FUN_0201e014
	movs r5, r0
	beq _020293D8
	bl FUN_02052144
	ldr r1, _0202956C ; =0x02090BF8
	mov r0, r5
	str r1, [r5]
	bl FUN_0205e5d8
_020293D8:
	str r5, [r4, #0x5c]
	mov r1, #0
	mov r0, #0x2c
	str r1, [r4, #0x88]
	bl FUN_0201e014
	movs r5, r0
	beq _020293F8
	bl FUN_020585bc
_020293F8:
	mov r0, #0x48
	str r5, [r4, #0xac]
	bl FUN_0201e014
	movs r5, r0
	beq _0202941C
	ldr r1, _02029570 ; =0x02119E9C
	add r0, r5, #4
	str r1, [r5]
	bl FUN_020585bc
_0202941C:
	mov r0, #0x350
	str r5, [r4, #0xcc]
	bl FUN_0201e014
	cmp r0, #0
	beq _02029434
	bl FUN_02052618
_02029434:
	str r0, [r4, #0x2c]
	ldr r0, _02029574 ; =0x00001920
	bl FUN_0201e014
	cmp r0, #0
	beq _0202944C
	bl FUN_02054f28
_0202944C:
	str r0, [r4, #0x4c]
	mov r0, #0xb0
	bl FUN_0201e014
	cmp r0, #0
	beq _02029464
	bl FUN_02056760
_02029464:
	str r0, [r4, #0x34]
	ldr r0, _02029578 ; =0x00000F3C
	bl FUN_0201e014
	cmp r0, #0
	ldrne r1, _0202957C ; =0x0208F6A0
	strne r1, [r0]
	str r0, [r4, #0x28]
	ldr r0, _02029580 ; =0x00000424
	bl FUN_0201e014
	cmp r0, #0
	beq _02029494
	bl FUN_0210E014
_02029494:
	str r0, [r4, #0x48]
	mov r0, #0x138
	bl FUN_0201e014
	cmp r0, #0
	beq _020294AC
	bl FUN_020F82B0
_020294AC:
	str r0, [r4, #0xc8]
	ldr r0, [r4, #0x8c]
	bl FUN_02051144
	mov r5, #0x100
	mov r2, #0x80
	ldr r0, [r4, #0xa4]
	mov r1, r5
	mov r3, r2
	bl FUN_02051690
	ldr r0, [r4, #0x58]
	mov r1, r5
	bl FUN_020FC9F4
	ldr r0, [r4, #0x98]
	bl FUN_020F7374
	mov r5, #8
	ldr r0, [r4, #0x60]
	mov r1, r5
	bl FUN_0205a1bc
	ldr r0, [r4, #0x5c]
	mov r1, #0x20
	bl FUN_0205ecd0
	ldr r0, [r4, #0x24]
	mov r1, r5
	bl FUN_0205d180
	ldr r0, [r4, #0x84]
	mov r1, #0x10
	bl FUN_0205bca4
	ldr r0, [r4, #0xac]
	mov r1, #0xc0
	mov r2, #0xa0
	bl FUN_021122D0
	mov r1, #0x60
	ldr r0, [r4, #0xcc]
	mov r2, r1
	bl FUN_0211652C
	ldr r0, [r4, #0x4c]
	bl FUN_02054f60
	ldr r0, [r4, #0x34]
	bl FUN_02056828
	mov r0, #0
	str r0, [r4, #0xb8]
	str r0, [r4, #0x64]
	pop {r3, r4, r5, pc}
	.align 2, 0_02029558: .word 0x02099E8C
_0202955C: .word 0x0209057C
_02029560: .word 0x000005E4
_02029564: .word 0x0208F6E0
_02029568: .word 0x0209095C
_0202956C: .word 0x02090BF8
_02029570: .word 0x02119E9C
_02029574: .word 0x00001920
_02029578: .word 0x00000F3C
_0202957C: .word 0x0208F6A0
_02029580: .word 0x00000424

	arm_func_start FUN_02029584
FUN_02029584: ; 0x02029584
	push {r3, lr}
	bl FUN_0206741c
	bl FUN_02064250
	bl FUN_0200487c
	ldr r1, _020295A8 ; =0x04000304
	ldrh r0, [r1]
	bic r0, r0, #0x8000
	strh r0, [r1]
	pop {r3, pc}
	.align 2, 0_020295A8: .word 0x04000304
	arm_func_end FUN_02029584

	arm_func_start FUN_020295ac
FUN_020295ac: ; 0x020295AC
	push {r4, lr}
	sub sp, sp, #8
	bl FUN_02015ef0
	add r4, sp, #0
	mov r0, r4
	bl FUN_02015f64
	cmp r0, #0
	bne _020295D8
	bl FUN_02004160
	add sp, sp, #8
	pop {r4, pc}
	arm_func_end FUN_020295ac
_020295D8:
	mov r0, r4
	bl FUN_02015ff8
	add sp, sp, #8
	pop {r4, pc}

	arm_func_start FUN_020295e8
FUN_020295e8: ; 0x020295E8
	push {r4, lr}
	ldr r4, _02029604 ; =0x0209BA20
	mov r0, r4
	bl FUN_0206f1e0
	mov r0, r4
	bl FUN_0206f244
	pop {r4, pc}
	.align 2, 0_02029604: .word 0x0209BA20
	arm_func_end FUN_020295e8

	arm_func_start FUN_02029608
FUN_02029608: ; 0x02029608
	push {r4, lr}
	sub sp, sp, #0x10
	ldr r4, _020296FC ; =0x0209BA20
	mov r0, r4
	bl FUN_020715b4
	mov r0, r4
	bl FUN_0206f77c
	ldr r3, _02029700 ; =0x0209A250
	ldr r1, _02029704 ; =0x02099E8C
	ldr r0, [r3]
	mov r4, #0
	str r4, [r1, #0xa8]
	cmp r0, #0
	ldr r1, _02029708 ; =0x0208F768
	beq _02029660
	str r4, [sp]
	str r4, [sp, #4]
	ldr r2, _0202970C ; =0x02099F34
	str r4, [sp, #8]
	mov r4, #1
	str r4, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_02029608
_02029660:
	ldr ip, _02029704 ; =0x02099E8C
	mov r4, #0
	str r4, [ip, #0x6c]
	str r4, [ip, #0xa0]
	str r4, [ip, #0x70]
	str r4, [ip, #0x9c]
	ldr r0, _02029710 ; =0x02099EF8
	ldr r1, _02029714 ; =0x0208F784
	mov r2, r4
	mov r3, r4
	str r4, [ip, #0x74]
	bl FUN_02085bbc
	ldr r0, _02029718 ; =0x02099F2C
	ldr r1, _0202971C ; =0x0208F798
	mov r2, r4
	mov r3, r4
	bl FUN_02085bbc
	ldr r0, _02029720 ; =0x02099EFC
	ldr r1, _02029724 ; =0x0208F7AC
	mov r2, r4
	mov r3, r4
	bl FUN_02085bbc
	ldr r0, _02029728 ; =0x02099F28
	ldr r1, _0202972C ; =0x0208F7C0
	mov r2, r4
	mov r3, r4
	bl FUN_02085bbc
	ldr r0, _02029730 ; =0x02099F00
	ldr r1, _02029734 ; =0x0208F7D4
	mov r2, r4
	mov r3, r4
	bl FUN_02085bbc
	ldr r0, _02029738 ; =0x02099F04
	ldr r1, _0202973C ; =0x0208F7E8
	mov r2, r4
	mov r3, r4
	bl FUN_02085bbc
	add sp, sp, #0x10
	pop {r4, pc}
	.align 2, 0_020296FC: .word 0x0209BA20
_02029700: .word 0x0209A250
_02029704: .word 0x02099E8C
_02029708: .word 0x0208F768
_0202970C: .word 0x02099F34
_02029710: .word 0x02099EF8
_02029714: .word 0x0208F784
_02029718: .word 0x02099F2C
_0202971C: .word 0x0208F798
_02029720: .word 0x02099EFC
_02029724: .word 0x0208F7AC
_02029728: .word 0x02099F28
_0202972C: .word 0x0208F7C0
_02029730: .word 0x02099F00
_02029734: .word 0x0208F7D4
_02029738: .word 0x02099F04
_0202973C: .word 0x0208F7E8

	arm_func_start FUN_02029740
FUN_02029740: ; 0x02029740
	push {r3, r4, r5, r6, r7, lr}
	ldr r7, _020299D0 ; =0x020A0640
	mov r4, #0
	ldr r2, _020299D4 ; =0x0000124C
	mov r0, r7
	mov r1, r4
	bl MemWrite
	ldr r6, _020299D8 ; =0x020A0B00
	mov r5, #1
	mov r0, r6
	mov r1, r5
	bl FUN_02074784
	mov r0, r6
	sub r1, r5, #2
	bl FUN_0207478c
	ldr r0, _020299DC ; =0x020A1140
	mov r1, #0x7f
	strh r1, [r0, #0x94]
	strh r1, [r0, #0x96]
	strb r4, [r7, #0xb92]
	ldr r0, _020299E0 ; =0x02099E8C
	strb r4, [r7, #0xb93]
	strh r4, [r0, #0x18]
	strb r4, [r0, #2]
	strb r4, [r0, #0xc]
	strb r4, [r0, #3]
	strb r4, [r0, #9]
	strh r5, [r0, #0x16]
	mov r2, r4
	ldr r0, _020299E4 ; =0x02099EE0
	b _020297C8
	arm_func_end FUN_02029740
_020297BC:
	lsl r1, r4, #1
	strh r2, [r0, r1]
	add r4, r4, #1
_020297C8:
	cmp r4, #2
	blt _020297BC
	ldr r5, _020299E0 ; =0x02099E8C
	mov r4, #0
	str r4, [r5, #0x68]
	strb r4, [r5, #5]
	strb r4, [r5, #4]
	strb r4, [r5]
	strb r4, [r5, #0xb]
	strb r4, [r5, #0xa]
	mov r7, #0x10
	strb r4, [r5, #0xf]
	ldr r0, _020299E8 ; =0x0209A050
	mov r1, r4
	mov r2, r7
	strb r4, [r5, #6]
	bl MemWrite
	ldr r0, _020299EC ; =0x0209A060
	mov r1, r4
	mov r2, r7
	bl MemWrite
	mov r6, #8
	ldr r0, _020299F0 ; =0x02099F80
	mov r1, r4
	mov r2, r6
	bl MemWrite
	ldr r0, _020299F4 ; =0x02099F88
	mov r2, r6
	mov r1, r4
	bl MemWrite
	mov r2, r7
	ldr r0, _020299F8 ; =0x0209A080
	mov r1, r4
	bl MemWrite
	strb r4, [r5, #0xe]
	strb r4, [r5, #0x10]
	strb r4, [r5, #0x11]
	ldr r0, _020299FC ; =0x02099F5C
	mov r1, r4
	mov r6, #6
	mov r2, r6
	bl MemWrite
	ldr r0, _02029A00 ; =0x02099F62
	mov r1, r4
	mov r2, r6
	bl MemWrite
	mov r2, r6
	ldr r0, _02029A04 ; =0x02099F68
	mov r1, r4
	bl MemWrite
	ldr r0, _02029A08 ; =0x02099EA6
	mov r1, r4
	mov r6, #3
	mov r2, r6
	bl MemWrite
	ldr r0, _02029A0C ; =0x02099EA9
	mov r1, r4
	mov r2, r6
	bl MemWrite
	ldr r0, _02029A10 ; =0x02099F6E
	mov r1, r4
	mov r2, #7
	bl MemWrite
	mov r2, r6
	ldr r0, _02029A14 ; =0x02099EAC
	mov r1, r4
	bl MemWrite
	strb r4, [r5, #0xd]
	ldr r0, _02029A18 ; =0x0209A090
	mov r1, r4
	strh r4, [r5, #0x14]
	mov r2, #0x19
	bl MemWrite
	strb r4, [r5, #1]
	strb r4, [r5, #7]
	ldr r0, _02029A1C ; =0x0209A454
	strb r4, [r5, #8]
	str r4, [r0]
	str r4, [r0, #8]
	strb r4, [r0, #0xc]
	str r4, [r0, #4]
	strb r4, [r0, #0x1e]
	strb r4, [r0, #0x1f]
	strb r4, [r0, #0x20]
	strb r4, [r0, #0x1d]
	str r4, [r0, #0x24]
	strb r4, [r0, #0x28]
	strh r4, [r0, #0x2c]
	strb r4, [r0, #0x34]
	strb r4, [r0, #0x35]
	strb r4, [r0, #0x36]
	strb r4, [r0, #0x37]
	strb r4, [r0, #0x38]
	strb r4, [r0, #0x29]
	strb r4, [r0, #0x2a]
	mov r1, #1
	strb r1, [r0, #0x2e]
	strb r1, [r0, #0x2f]
	strb r4, [r0, #0x30]
	strb r4, [r0, #0x31]
	strb r4, [r0, #0x32]
	strb r4, [r0, #0x33]
	strb r4, [r0, #0x39]
	strb r4, [r0, #0x3a]
	strh r4, [r0, #0x3e]
	strh r4, [r0, #0x3c]
	strb r4, [r0, #0x40]
	strb r4, [r0, #0x60]
	strb r4, [r0, #0x80]
	strb r4, [r0, #0x81]
	strb r4, [r0, #0x82]
	ldrb r1, [r0, #0x83]
	bic r1, r1, #7
	and r1, r1, #0xff
	bic r1, r1, #0x38
	and r1, r1, #0xff
	bic r1, r1, #0x40
	strb r1, [r0, #0x83]
	str r4, [r0, #0x84]
	strb r4, [r0, #0x88]
	bl FUN_020EF850
	bl FUN_020F129C
	ldr r0, _02029A20 ; =0x0209A5D0
	bl FUN_020617d8
	str r0, [r5, #0x3c]
	mov r0, r4
	bl FUN_020F069C
	mov r0, r4
	bl FUN_020EFA04
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020299D0: .word 0x020A0640
_020299D4: .word 0x0000124C
_020299D8: .word 0x020A0B00
_020299DC: .word 0x020A1140
_020299E0: .word 0x02099E8C
_020299E4: .word 0x02099EE0
_020299E8: .word 0x0209A050
_020299EC: .word 0x0209A060
_020299F0: .word 0x02099F80
_020299F4: .word 0x02099F88
_020299F8: .word 0x0209A080
_020299FC: .word 0x02099F5C
_02029A00: .word 0x02099F62
_02029A04: .word 0x02099F68
_02029A08: .word 0x02099EA6
_02029A0C: .word 0x02099EA9
_02029A10: .word 0x02099F6E
_02029A14: .word 0x02099EAC
_02029A18: .word 0x0209A090
_02029A1C: .word 0x0209A454
_02029A20: .word 0x0209A5D0

	arm_func_start FUN_02029a24
FUN_02029a24: ; 0x02029A24
	push {r4, lr}
	sub sp, sp, #0x30
	ldr r0, _02029B24 ; =0x0208F800
	add r1, sp, #0
	bl FUN_020F3054
	ldr r0, _02029B28 ; =0x0208F81C
	add r1, sp, #0xc
	bl FUN_020F3054
	ldr r0, _02029B2C ; =0x0208F838
	add r1, sp, #0x18
	bl FUN_020F3054
	ldr r0, _02029B30 ; =0x0208F854
	add r1, sp, #0x24
	bl FUN_020F3054
	mov r0, #0x24
	bl FUN_0201e014
	cmp r0, #0
	beq _02029A70
	bl FUN_02042188
	arm_func_end FUN_02029a24
_02029A70:
	ldr r4, _02029B34 ; =0x02099E8C
	mov r2, #0
	ldr r1, [sp]
	mov r3, r2
	str r0, [r4, #0x44]
	bl FUN_02043330
	mov r0, #0x24
	bl FUN_0201e014
	cmp r0, #0
	beq _02029A9C
	bl FUN_02042188
_02029A9C:
	ldr r4, _02029B34 ; =0x02099E8C
	mov r2, #0
	ldr r1, [sp, #0xc]
	mov r3, r2
	str r0, [r4, #0x90]
	bl FUN_02043330
	mov r0, #0x24
	bl FUN_0201e014
	cmp r0, #0
	beq _02029AC8
	bl FUN_02042188
_02029AC8:
	ldr r4, _02029B34 ; =0x02099E8C
	mov r2, #0
	ldr r1, [sp, #0x18]
	mov r3, r2
	str r0, [r4, #0xc4]
	bl FUN_02043330
	mov r0, #0x24
	bl FUN_0201e014
	cmp r0, #0
	beq _02029AF4
	bl FUN_0206b9c4
_02029AF4:
	ldr r4, _02029B34 ; =0x02099E8C
	mov r2, #0
	ldr r1, [sp, #0x24]
	mov r3, r2
	str r0, [r4, #0x50]
	bl FUN_02043330
	ldr r0, _02029B38 ; =0x02099F78
	ldr r1, _02029B3C ; =0x0208F870
	bl FUN_020418b0
	strh r0, [r4, #0x12]
	add sp, sp, #0x30
	pop {r4, pc}
	.align 2, 0_02029B24: .word 0x0208F800
_02029B28: .word 0x0208F81C
_02029B2C: .word 0x0208F838
_02029B30: .word 0x0208F854
_02029B34: .word 0x02099E8C
_02029B38: .word 0x02099F78
_02029B3C: .word 0x0208F870

	arm_func_start FUN_02029b40
FUN_02029b40: ; 0x02029B40
	push {r3, r4, r5, lr}
	ldr r5, _02029BC8 ; =0x0209AC44
	ldr r1, _02029BCC ; =0x0209A250
	mov r0, r5
	bl FUN_0202b448
	mov r2, #0
	mov r0, r5
	mov r3, r2
	mov r1, #2
	bl FUN_0202b838
	mov r0, r5
	bl FUN_0202b7b4
	cmp r0, #0
	bne _02029B94
	mov r4, #0x14
	arm_func_end FUN_02029b40
_02029B7C:
	mov r0, r4
	bl FUN_02001eb0
	mov r0, r5
	bl FUN_0202b7b4
	cmp r0, #0
	beq _02029B7C
_02029B94:
	ldr r5, _02029BC8 ; =0x0209AC44
	mov r0, r5
	bl FUN_0202b7f0
	cmp r0, #0
	popne {r3, r4, r5, pc}
	mov r4, #0x14
_02029BAC:
	mov r0, r4
	bl FUN_02001eb0
	mov r0, r5
	bl FUN_0202b7f0
	cmp r0, #0
	beq _02029BAC
	pop {r3, r4, r5, pc}
	.align 2, 0_02029BC8: .word 0x0209AC44
_02029BCC: .word 0x0209A250

	arm_func_start FUN_02029bd0
FUN_02029bd0: ; 0x02029BD0
	ldr r0, _02029BDC ; =0x0209AEC0
	ldr ip, _02029BE0 ; =LAB_0204643c
	bx ip
	.align 2, 0_02029BDC: .word 0x0209AEC0
_02029BE0: .word LAB_0204643c
	arm_func_end FUN_02029bd0

	arm_func_start FUN_02029be4
FUN_02029be4: ; 0x02029BE4
	ldr r0, _02029BF0 ; =0x0209AEC0
	ldr ip, _02029BF4 ; =thunk_FUN_020465fc
	bx ip
	.align 2, 0_02029BF0: .word 0x0209AEC0
_02029BF4: .word thunk_FUN_020465fc
	arm_func_end FUN_02029be4

	arm_func_start FUN_02029bf8
FUN_02029bf8: ; 0x02029BF8
	push {r3, lr}
	bl FUN_0202921c
	bl FUN_02029294
	pop {r3, pc}
	arm_func_end FUN_02029bf8

	arm_func_start NitroMain
NitroMain: ; 0x02029C08
	push {r3, lr}
	bl FUN_020290c4
	bl FUN_02029140
	bl FUN_0202921c
	bl FUN_020295ac
	bl FUN_02029584
	bl FUN_02029294
	bl thunk_FUN_0202ede8
	bl FUN_020292f4
	mov r0, #0
	ldr r1, _02029C60 ; =0x0000007E
	bl FUN_0200e580
	bl FUN_02029304
	bl FUN_020295e8
	bl FUN_02029608
	bl FUN_02029a24
	bl FUN_02029b40
	bl FUN_02029bd0
	bl FUN_02029740
	bl FUN_0202afd0
	bl FUN_02029be4
	pop {r3, pc}
	.align 2, 0_02029C60: .word 0x0000007E
	arm_func_end NitroMain

	arm_func_start FUN_02029c64
FUN_02029c64: ; 0x02029C64
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02029c64
_02029C78:
	.byte 0x1E, 0xFF, 0x2F, 0xE1

	arm_func_start FUN_02029c7c
FUN_02029c7c: ; 0x02029C7C
	push {r4, lr}
	ldr r1, _02029CA0 ; =0x0208F6E0
	mov r4, r0
	str r1, [r4]
	bl FUN_0205a504
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02029CA0: .word 0x0208F6E0
	arm_func_end FUN_02029c7c

	arm_func_start LAB_02029ca4
LAB_02029ca4: ; 0x02029CA4
	push {r4, lr}
	ldr r1, _02029CC0 ; =0x0208F6E0
	mov r4, r0
	str r1, [r4]
	bl FUN_0205a504
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02029CC0: .word 0x0208F6E0
	arm_func_end LAB_02029ca4
_02029CC4:
	.byte 0x10, 0x40, 0x2D, 0xE9, 0x00, 0x40, 0xA0, 0xE1, 0xE9, 0xD0, 0xFF, 0xEB
	.byte 0x04, 0x00, 0xA0, 0xE1, 0x10, 0x80, 0xBD, 0xE8

	arm_func_start FUN_02029cd8
FUN_02029cd8: ; 0x02029CD8
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02029cd8

	arm_func_start FUN_02029cec
FUN_02029cec: ; 0x02029CEC
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02029cec

	arm_func_start FUN_02029d00
FUN_02029d00: ; 0x02029D00
	bx lr
	arm_func_end FUN_02029d00

	arm_func_start FUN_02029d04
FUN_02029d04: ; 0x02029D04
	bx lr
	arm_func_end FUN_02029d04

	arm_func_start FUN_02029d08
FUN_02029d08: ; 0x02029D08
	bx lr
	arm_func_end FUN_02029d08

	arm_func_start FUN_02029d0c
FUN_02029d0c: ; 0x02029D0C
	bx lr
	arm_func_end FUN_02029d0c

	arm_func_start FUN_02029d10
FUN_02029d10: ; 0x02029D10
	bx lr
	arm_func_end FUN_02029d10

	arm_func_start FUN_02029d14
FUN_02029d14: ; 0x02029D14
	bx lr
	arm_func_end FUN_02029d14

	arm_func_start FUN_02029d18
FUN_02029d18: ; 0x02029D18
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x324
	add r0, r0, #0x1c00
	bl FUN_0203000c
	add r0, r4, #0x90
	bl FUN_02047ad4
	mov r0, r4
	bl FUN_02041b00
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02029d18

	arm_func_start FUN_02029d44
FUN_02029d44: ; 0x02029D44
	ldr r1, _02029D50 ; =0x020B5AE0
	str r0, [r1, #4]
	bx lr
	.align 2, 0_02029D50: .word 0x020B5AE0
	arm_func_end FUN_02029d44

	arm_func_start FUN_02029d54
FUN_02029d54: ; 0x02029D54
	ldr r0, _02029D60 ; =0x020B5AE0
	ldr r0, [r0, #8]
	bx lr
	.align 2, 0_02029D60: .word 0x020B5AE0
	arm_func_end FUN_02029d54

	arm_func_start FUN_02029d64
FUN_02029d64: ; 0x02029D64
	ldr r1, _02029D94 ; =0x0208F898
	ldr r2, [r1]
	cmp r2, #0
	beq _02029D8C
	arm_func_end FUN_02029d64
_02029D74:
	cmp r0, r2
	moveq r0, r1
	bxeq lr
	ldr r2, [r1, #0xc]!
	cmp r2, #0
	bne _02029D74
_02029D8C:
	mov r0, #0
	bx lr
	.align 2, 0_02029D94: .word 0x0208F898

	arm_func_start FUN_02029d98
FUN_02029d98: ; 0x02029D98
	push {r3, lr}
	ldr r1, [r0]
	cmp r1, #8
	arm_func_end FUN_02029d98

	arm_func_start switchD
switchD: ; 0x02029DA4
	addls pc, pc, r1, lsl #2
	arm_func_end switchD

	arm_func_start caseD_9
caseD_9: ; 0x02029DA8
	pop {r3, pc}
	arm_func_end caseD_9
_02029DAC: ; jump table
	pop {r3, pc} ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02029DB0
	b _02029DE0
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02029DB4
	b _02029DD8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02029DB8
	b _02029DD0
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02029DBC
	b _02029DE8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02029DC0
	b _02029DF0
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02029DC4
	b _02029DF8
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02029DC8
	b _02029E00
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02029DCC
	b _02029E08
	arm_func_end caseD_8
_02029DD0:
	bl FUN_0202a288
	pop {r3, pc}
_02029DD8:
	bl FUN_0202a1a0
	pop {r3, pc}
_02029DE0:
	bl FUN_0202a020
	pop {r3, pc}
_02029DE8:
	bl FUN_02029fa4
	pop {r3, pc}
_02029DF0:
	bl FUN_02029f50
	pop {r3, pc}
_02029DF8:
	bl FUN_02029ee4
	pop {r3, pc}
_02029E00:
	bl FUN_02029ea4
	pop {r3, pc}
_02029E08:
	bl FUN_02029e10
	pop {r3, pc}

	arm_func_start FUN_02029e10
FUN_02029e10: ; 0x02029E10
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	bl FUN_020F3E40
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _02029E84 ; =0x00000714
	bl FUN_0201e014
	movs r4, r0
	beq _02029E7C
	bl FUN_02041ac8
	ldr r1, _02029E88 ; =0x020E6508
	ldr r0, _02029E8C ; =0x020E6698
	str r1, [r4]
	str r0, [r4, #0x4a4]
	add r0, r4, #0xa4
	ldr r1, _02029E90 ; =0x020E6B64
	str r4, [r0, #0x404]
	str r1, [r4, #0x644]
	add r0, r4, #0x244
	ldr r1, _02029E94 ; =0x020E6C98
	str r4, [r0, #0x408]
	str r1, [r4, #0x68c]
	add r0, r4, #0x28c
	str r4, [r0, #0x404]
	mov r0, #0
	str r0, [r4, #0x710]
	arm_func_end FUN_02029e10
_02029E7C:
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02029E84: .word 0x00000714
_02029E88: .word 0x020E6508
_02029E8C: .word 0x020E6698
_02029E90: .word 0x020E6B64
_02029E94: .word 0x020E6C98

	arm_func_start FUN_02029e98
FUN_02029e98: ; 0x02029E98
	bx lr
	arm_func_end FUN_02029e98

	arm_func_start FUN_02029e9c
FUN_02029e9c: ; 0x02029E9C
	bx lr
	arm_func_end FUN_02029e9c

	arm_func_start FUN_02029ea0
FUN_02029ea0: ; 0x02029EA0
	bx lr
	arm_func_end FUN_02029ea0

	arm_func_start FUN_02029ea4
FUN_02029ea4: ; 0x02029EA4
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	bl FUN_020F3E40
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, #0x90
	bl FUN_0201e014
	movs r4, r0
	beq _02029ED8
	bl FUN_02041ac8
	ldr r0, _02029EE0 ; =0x020E6578
	str r0, [r4]
	arm_func_end FUN_02029ea4
_02029ED8:
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02029EE0: .word 0x020E6578

	arm_func_start FUN_02029ee4
FUN_02029ee4: ; 0x02029EE4
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	bl FUN_020F3E40
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _02029F38 ; =0x000004AC
	bl FUN_0201e014
	movs r4, r0
	beq _02029F30
	bl FUN_02041ac8
	ldr r1, _02029F3C ; =0x020BDDC0
	ldr r0, _02029F40 ; =0x020BDE30
	str r1, [r4]
	str r0, [r4, #0x90]
	ldr r0, _02029F44 ; =0x020BDF64
	str r4, [r4, #0x288]
	str r0, [r4, #0x298]
	str r4, [r4, #0x29c]
	arm_func_end FUN_02029ee4
_02029F30:
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02029F38: .word 0x000004AC
_02029F3C: .word 0x020BDDC0
_02029F40: .word 0x020BDE30
_02029F44: .word 0x020BDF64

	arm_func_start FUN_02029f48
FUN_02029f48: ; 0x02029F48
	bx lr
	arm_func_end FUN_02029f48

	arm_func_start FUN_02029f4c
FUN_02029f4c: ; 0x02029F4C
	bx lr
	arm_func_end FUN_02029f4c

	arm_func_start FUN_02029f50
FUN_02029f50: ; 0x02029F50
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	bl FUN_020F3E40
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, #0xa8
	bl FUN_0201e014
	movs r4, r0
	beq _02029F90
	bl FUN_02041ac8
	ldr r1, _02029F98 ; =0x020BD340
	ldr r0, _02029F9C ; =0x020BD3B0
	str r1, [r4]
	str r0, [r4, #0x90]
	str r4, [r4, #0x94]
	arm_func_end FUN_02029f50
_02029F90:
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02029F98: .word 0x020BD340
_02029F9C: .word 0x020BD3B0

	arm_func_start FUN_02029fa0
FUN_02029fa0: ; 0x02029FA0
	bx lr
	arm_func_end FUN_02029fa0

	arm_func_start FUN_02029fa4
FUN_02029fa4: ; 0x02029FA4
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	bl FUN_020F3E40
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, #0x154
	bl FUN_0201e014
	movs r4, r0
	beq _02029FFC
	bl FUN_02041ac8
	ldr r1, _0202A004 ; =0x020BD8E0
	ldr r0, _0202A008 ; =0x020BD9F4
	str r1, [r4]
	str r0, [r4, #0x90]
	ldr r0, _0202A00C ; =0x020BD950
	str r4, [r4, #0x94]
	str r0, [r4, #0xd0]
	ldr r0, _0202A010 ; =0x020BDAD4
	str r4, [r4, #0xd4]
	str r0, [r4, #0x118]
	str r4, [r4, #0x11c]
	arm_func_end FUN_02029fa4
_02029FFC:
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_0202A004: .word 0x020BD8E0
_0202A008: .word 0x020BD9F4
_0202A00C: .word 0x020BD950
_0202A010: .word 0x020BDAD4

	arm_func_start FUN_0202a014
FUN_0202a014: ; 0x0202A014
	bx lr
	arm_func_end FUN_0202a014

	arm_func_start FUN_0202a018
FUN_0202a018: ; 0x0202A018
	bx lr
	arm_func_end FUN_0202a018

	arm_func_start FUN_0202a01c
FUN_0202a01c: ; 0x0202A01C
	bx lr
	arm_func_end FUN_0202a01c

	arm_func_start FUN_0202a020
FUN_0202a020: ; 0x0202A020
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	bl FUN_020F3E40
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, _0202A14C ; =0x00003078
	bl FUN_0201e014
	movs r4, r0
	beq _0202A144
	bl FUN_02041ac8
	add r0, r4, #0x15c
	ldr r1, _0202A150 ; =0x020D9574
	add r0, r0, #0x1800
	str r1, [r4]
	bl FUN_0206c0d8
	add r0, r4, #0x184
	add r2, r4, #0x234
	add r8, r4, #0x278
	add sb, r4, #0x1bc
	add r1, r4, #0x204
	add lr, r4, #0x2cc
	add r6, r4, #0x360
	add r7, r4, #0x3e0
	add ip, r0, #0x1800
	add r3, r2, #0x1800
	add r0, r8, #0x1800
	add r2, sb, #0x2000
	add r1, r1, #0x2000
	add r8, lr, #0x2000
	add lr, r6, #0x2000
	add r6, r7, #0x2000
	add r7, r4, #0x1000
	ldr sl, _0202A154 ; =0x020D9998
	ldr sb, _0202A158 ; =0x020D9734
	str sl, [r7, #0x984]
	str r4, [ip, #4]
	str sb, [r7, #0xa34]
	str r4, [r3, #4]
	ldr sb, _0202A15C ; =0x020DA084
	add r3, r4, #0x2000
	str sb, [r7, #0xa78]
	add r7, r4, #0x5f0
	str r4, [r0, #4]
	ldr sb, _0202A160 ; =0x020D94C8
	add r0, r7, #0x2000
	str sb, [r3, #0x1bc]
	ldr r7, _0202A164 ; =0x020DBCBC
	str r4, [r2, #8]
	str r7, [r3, #0x204]
	ldr r2, _0202A168 ; =0x020DBE2C
	str r4, [r1, #4]
	str r2, [r3, #0x2cc]
	ldr r1, _0202A16C ; =0x020D93E4
	str r4, [r8, #4]
	str r1, [r3, #0x360]
	ldr r1, _0202A170 ; =0x0211F2D0
	str r4, [lr, #4]
	str r1, [r3, #0x3e0]
	ldr r2, _0202A174 ; =0x020DB1B4
	str r4, [r6, #4]
	mov r1, r4
	str r2, [r3, #0x3e0]
	bl FUN_020CC0B4
	add r0, r4, #0x14
	ldr r2, _0202A178 ; =0x020D9220
	add r1, r4, #0x3000
	str r2, [r1, #0x14]
	add r0, r0, #0x3000
	str r4, [r0, #4]
	mov r0, #0
	str r0, [r1, #0x70]
	str r0, [r1, #0x74]
	arm_func_end FUN_0202a020
_0202A144:
	str r4, [r5, #4]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0202A14C: .word 0x00003078
_0202A150: .word 0x020D9574
_0202A154: .word 0x020D9998
_0202A158: .word 0x020D9734
_0202A15C: .word 0x020DA084
_0202A160: .word 0x020D94C8
_0202A164: .word 0x020DBCBC
_0202A168: .word 0x020DBE2C
_0202A16C: .word 0x020D93E4
_0202A170: .word 0x0211F2D0
_0202A174: .word 0x020DB1B4
_0202A178: .word 0x020D9220

	arm_func_start FUN_0202a17c
FUN_0202a17c: ; 0x0202A17C
	bx lr
	arm_func_end FUN_0202a17c

	arm_func_start FUN_0202a180
FUN_0202a180: ; 0x0202A180
	bx lr
	arm_func_end FUN_0202a180

	arm_func_start FUN_0202a184
FUN_0202a184: ; 0x0202A184
	bx lr
	arm_func_end FUN_0202a184

	arm_func_start FUN_0202a188
FUN_0202a188: ; 0x0202A188
	bx lr
	arm_func_end FUN_0202a188

	arm_func_start FUN_0202a18c
FUN_0202a18c: ; 0x0202A18C
	bx lr
	arm_func_end FUN_0202a18c

	arm_func_start FUN_0202a190
FUN_0202a190: ; 0x0202A190
	bx lr
	arm_func_end FUN_0202a190

	arm_func_start FUN_0202a194
FUN_0202a194: ; 0x0202A194
	bx lr
	arm_func_end FUN_0202a194

	arm_func_start FUN_0202a198
FUN_0202a198: ; 0x0202A198
	bx lr
	arm_func_end FUN_0202a198

	arm_func_start FUN_0202a19c
FUN_0202a19c: ; 0x0202A19C
	bx lr
	arm_func_end FUN_0202a19c

	arm_func_start FUN_0202a1a0
FUN_0202a1a0: ; 0x0202A1A0
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	bl FUN_020F3E40
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _0202A250 ; =0x00001228
	bl FUN_0201e014
	movs r4, r0
	beq _0202A248
	bl FUN_02041ac8
	ldr r1, _0202A254 ; =0x020E8400
	ldr r0, _0202A258 ; =0x020E871C
	str r1, [r4]
	str r0, [r4, #0x90]
	str r4, [r4, #0x94]
	str r0, [r4, #0x78c]
	add r0, r4, #0x38c
	ldr r1, _0202A25C ; =0x020E8C0C
	str r4, [r0, #0x404]
	ldr r0, _0202A260 ; =0x020E8AE4
	str r1, [r4, #0x78c]
	str r0, [r4, #0xe88]
	add r0, r4, #0x288
	ldr r1, _0202A264 ; =0x020E8B80
	str r4, [r0, #0xc04]
	str r1, [r4, #0xe90]
	ldr r0, _0202A268 ; =0x020E8A58
	str r4, [r4, #0xe94]
	str r0, [r4, #0xe98]
	add r0, r4, #0x298
	ldr r1, _0202A26C ; =0x020E8F10
	str r4, [r0, #0xc04]
	str r1, [r4, #0xea4]
	add r0, r4, #0x2a4
	str r4, [r0, #0xc04]
	add r1, r4, #0x1000
	mov r2, #0
	str r2, [r1, #0x1f8]
	add r0, r4, #0x1200
	str r2, [r1, #0x1fc]
	bl FUN_0206c0d8
	arm_func_end FUN_0202a1a0
_0202A248:
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_0202A250: .word 0x00001228
_0202A254: .word 0x020E8400
_0202A258: .word 0x020E871C
_0202A25C: .word 0x020E8C0C
_0202A260: .word 0x020E8AE4
_0202A264: .word 0x020E8B80
_0202A268: .word 0x020E8A58
_0202A26C: .word 0x020E8F10

	arm_func_start FUN_0202a270
FUN_0202a270: ; 0x0202A270
	bx lr
	arm_func_end FUN_0202a270

	arm_func_start FUN_0202a274
FUN_0202a274: ; 0x0202A274
	bx lr
	arm_func_end FUN_0202a274

	arm_func_start FUN_0202a278
FUN_0202a278: ; 0x0202A278
	bx lr
	arm_func_end FUN_0202a278

	arm_func_start FUN_0202a27c
FUN_0202a27c: ; 0x0202A27C
	bx lr
	arm_func_end FUN_0202a27c

	arm_func_start FUN_0202a280
FUN_0202a280: ; 0x0202A280
	bx lr
	arm_func_end FUN_0202a280

	arm_func_start FUN_0202a284
FUN_0202a284: ; 0x0202A284
	bx lr
	arm_func_end FUN_0202a284

	arm_func_start FUN_0202a288
FUN_0202a288: ; 0x0202A288
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	bl FUN_020F3E40
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, #0xf70
	bl FUN_0201e014
	movs r4, r0
	beq _0202A334
	bl FUN_02041ac8
	ldr r1, _0202A33C ; =0x020D5540
	ldr r0, _0202A340 ; =0x020D56C8
	str r1, [r4]
	str r0, [r4, #0x90]
	mov r1, r4
	add r0, r4, #0x104
	str r4, [r4, #0x94]
	bl FUN_020BFF3C
	ldr r1, _0202A344 ; =0x020D55B0
	ldr r0, _0202A348 ; =0x020D563C
	str r1, [r4, #0x280]
	str r4, [r4, #0x284]
	str r0, [r4, #0x28c]
	ldr r1, _0202A34C ; =0x0208F90C
	str r4, [r4, #0x290]
	add r0, r4, #0x2a0
	str r1, [r4, #0x29c]
	bl FUN_020D17C8
	ldr r1, _0202A350 ; =0x020D5C9C
	add r6, r4, #0xd40
	ldr r0, _0202A354 ; =0x020D5D10
	str r1, [r4, #0x29c]
	str r0, [r4, #0x2a0]
	ldr r0, _0202A358 ; =0x020D5E48
	str r4, [r4, #0x2ac]
	str r0, [r4, #0xd40]
	add r0, r6, #8
	bl FUN_0206c0d8
	str r4, [r6, #4]
	mov r0, #0
	str r0, [r4, #0xf68]
	str r0, [r4, #0xf6c]
	arm_func_end FUN_0202a288
_0202A334:
	str r4, [r5, #4]
	pop {r4, r5, r6, pc}
	.align 2, 0_0202A33C: .word 0x020D5540
_0202A340: .word 0x020D56C8
_0202A344: .word 0x020D55B0
_0202A348: .word 0x020D563C
_0202A34C: .word 0x0208F90C
_0202A350: .word 0x020D5C9C
_0202A354: .word 0x020D5D10
_0202A358: .word 0x020D5E48

	arm_func_start FUN_0202a35c
FUN_0202a35c: ; 0x0202A35C
	bx lr
	arm_func_end FUN_0202a35c

	arm_func_start FUN_0202a360
FUN_0202a360: ; 0x0202A360
	bx lr
	arm_func_end FUN_0202a360

	arm_func_start FUN_0202a364
FUN_0202a364: ; 0x0202A364
	bx lr
	arm_func_end FUN_0202a364

	arm_func_start FUN_0202a368
FUN_0202a368: ; 0x0202A368
	bx lr
	arm_func_end FUN_0202a368

	arm_func_start FUN_0202a36c
FUN_0202a36c: ; 0x0202A36C
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_020D182C
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0202a36c

	arm_func_start FUN_0202a384
FUN_0202a384: ; 0x0202A384
	push {r4, lr}
	mov r4, r0
	add r0, r4, #8
	bl FUN_0206c110
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0202a384

	arm_func_start FUN_0202a39c
FUN_0202a39c: ; 0x0202A39C
	push {r4, r5, r6, lr}
	ldr r4, _0202A4D0 ; =0x020B5AE0
	ldr r0, [r4, #4]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	bl FUN_020F1670
	cmp r0, #0
	popne {r4, r5, r6, pc}
	ldr r0, [r4, #0x30]
	cmp r0, #0
	beq _0202A3DC
	ldr r1, [r0]
	ldr r1, [r1, #0x2c]
	blx r1
	mov r0, #0
	str r0, [r4, #0x30]
	arm_func_end FUN_0202a39c
_0202A3DC:
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _0202A468
	bl FUN_02029d64
	movs r5, r0
	beq _0202A46C
	ldr r0, [r5, #4]
	cmp r0, #0
	beq _0202A40C
	ldr r1, [r0]
	ldr r1, [r1, #4]
	blx r1
_0202A40C:
	mov r6, #0
	str r6, [r5, #4]
	ldr r1, [r5, #8]
	mov r0, r6
	bl FUN_0200e5d4
	ldr r0, [r4, #8]
	cmp r0, #2
	ldr r0, [r4, #4]
	moveq r6, #1
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	cmp r6, #0
	beq _0202A450
	cmp r0, #0
	bne _0202A450
	b _0202A468
_0202A450:
	cmp r6, #0
	bne _0202A46C
	cmp r0, #0
	beq _0202A46C
	bl FUN_020F2E2C
	b _0202A46C
_0202A468:
	bl FUN_020F2DAC
_0202A46C:
	ldr r0, [r4, #4]
	bl FUN_02029d64
	movs r5, r0
	beq _0202A4A0
	ldr r1, [r5, #4]
	cmp r1, #0
	bne _0202A490
	bl FUN_02029d98
	b _0202A498
_0202A490:
	ldr r0, [r5, #8]
	bl FUN_020F3E40
_0202A498:
	ldr r0, [r5, #4]
	str r0, [r4, #0x30]
_0202A4A0:
	ldr r1, [r4, #8]
	mov r0, #0
	str r1, [r4, #0xc]
	ldr r1, [r4, #4]
	stmib r4, {r0, r1}
	ldr r0, [r4, #0x30]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	ldr r1, [r0]
	ldr r1, [r1, #8]
	blx r1
	pop {r4, r5, r6, pc}
	.align 2, 0_0202A4D0: .word 0x020B5AE0

	arm_func_start FUN_0202a4d4
FUN_0202a4d4: ; 0x0202A4D4
	push {r3, lr}
	ldr r2, _0202A610 ; =0x0208F898
	mov r1, #0
	b _0202A4EC
	arm_func_end FUN_0202a4d4
_0202A4E4:
	str r1, [r2, #4]
	add r2, r2, #0xc
_0202A4EC:
	ldr r0, [r2]
	cmp r0, #0
	bne _0202A4E4
	ldr r2, _0202A614 ; =0x020B5AE0
	mov ip, #0
	str ip, [r2, #0xc]
	ldr r0, _0202A618 ; =0x02099EC8
	str ip, [r2, #8]
	ldr r0, [r0]
	cmp r0, #0
	bne _0202A600
	ldr r0, _0202A61C ; =0x02FFFC20
	ldr r1, _0202A620 ; =0x020A0640
	ldr r3, [r0]
	cmp r3, #0
	strb ip, [r1, #0x8a]
	moveq r0, #4
	streq r0, [r2, #4]
	beq _0202A608
	cmp r3, #0x16
	cmpne r3, #0x15
	bne _0202A564
	ldr r1, _0202A624 ; =0x0209A454
	mov r3, #1
	strb r3, [r1, #0x80]
	mov r2, #6
	ldr r0, _0202A614 ; =0x020B5AE0
	strb r2, [r1, #0x82]
	str r3, [r0, #4]
	b _0202A608
_0202A564:
	cmp r3, #0x17
	blo _0202A5A4
	cmp r3, #0x19
	bhi _0202A5A4
	ldr r0, _0202A624 ; =0x0209A454
	sub r3, r3, #0x16
	strb ip, [r0, #0x80]
	ldrb ip, [r0, #0x83]
	and r3, r3, #0xff
	and r3, r3, #7
	bic ip, ip, #7
	orr r3, ip, r3
	strb r3, [r0, #0x83]
	mov r0, #1
	strb r0, [r1, #0x8a]
	b _0202A604
_0202A5A4:
	cmp r3, #0x1a
	blo _0202A5EC
	cmp r3, #0x1c
	bhi _0202A5EC
	ldr r1, _0202A624 ; =0x0209A454
	mov r0, #0
	strb r0, [r1, #0x80]
	ldrb r2, [r1, #0x83]
	sub r0, r3, #0x19
	and r0, r0, #0xff
	bic r2, r2, #0x38
	lsl r0, r0, #0x1d
	orr r2, r2, r0, lsr #26
	ldr r0, _0202A614 ; =0x020B5AE0
	strb r2, [r1, #0x83]
_0202A5E0:
	mov r1, #1
	str r1, [r0, #4]
	b _0202A608
_0202A5EC:
	ldr r1, _0202A624 ; =0x0209A454
	mov r2, #0
	ldr r0, _0202A614 ; =0x020B5AE0
	strb r2, [r1, #0x80]
	b _0202A5E0
_0202A600:
	mov r0, #5
_0202A604:
	str r0, [r2, #4]
_0202A608:
	bl FUN_0202a39c
	pop {r3, pc}
	.align 2, 0_0202A610: .word 0x0208F898
_0202A614: .word 0x020B5AE0
_0202A618: .word 0x02099EC8
_0202A61C: .word 0x02FFFC20
_0202A620: .word 0x020A0640
_0202A624: .word 0x0209A454

	arm_func_start FUN_0202a628
FUN_0202a628: ; 0x0202A628
	push {r4, lr}
	ldr r0, _0202A664 ; =0x0209AEC0
	bl thunk_FUN_020465fc
	ldr r0, _0202A668 ; =0x0209A8A0
	bl FUN_0202e978
	ldr r0, _0202A66C ; =0x0209AC44
	bl FUN_0202b768
	mov r0, #0x14
	bl FUN_02001eb0
	mov r4, #0
	mov r0, r4
	bl FUN_02074fb8
	mov r0, r4
	bl FUN_020779b8
	pop {r4, pc}
	.align 2, 0_0202A664: .word 0x0209AEC0
_0202A668: .word 0x0209A8A0
_0202A66C: .word 0x0209AC44
	arm_func_end FUN_0202a628

	arm_func_start LAB_0202a670
LAB_0202a670: ; 0x0202A670
	push {r3, lr}
	mov r0, #0x14
	bl FUN_02001eb0
	ldr r0, _0202A690 ; =0x0209AC44
	bl FUN_0202b714
	ldr r0, _0202A694 ; =0x0209A8A0
	bl FUN_0202e9c8
	pop {r3, pc}
	.align 2, 0_0202A690: .word 0x0209AC44
_0202A694: .word 0x0209A8A0
	arm_func_end LAB_0202a670

	arm_func_start FUN_0202a698
FUN_0202a698: ; 0x0202A698
	push {r3, lr}
	ldr r0, _0202A6D0 ; =FUN_0202a628
	ldr r1, _0202A6D4 ; =0x020B5AE0
	mov r2, #0
	str r0, [r1, #0x34]
	ldr r0, _0202A6D8 ; =LAB_0202a670
	str r2, [r1, #0x38]
	str r0, [r1, #0x44]
	ldr r0, _0202A6DC ; =0x020B5B14
	str r2, [r1, #0x48]
	bl FUN_02017524
	ldr r0, _0202A6E0 ; =0x020B5B24
	bl FUN_02017564
	pop {r3, pc}
	.align 2, 0_0202A6D0: .word FUN_0202a628
_0202A6D4: .word 0x020B5AE0
_0202A6D8: .word LAB_0202a670
_0202A6DC: .word 0x020B5B14
_0202A6E0: .word 0x020B5B24
	arm_func_end FUN_0202a698

	arm_func_start FUN_0202a6e4
FUN_0202a6e4: ; 0x0202A6E4
	push {r3, r4, r5, lr}
	ldr r0, _0202A794 ; =0x0209A0F8
	ldr r0, [r0]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _0202A798 ; =0x0209A5D0
	bl FUN_02061bc4
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r5, #0
	bl FUN_020F06AC
	cmp r0, #0
	ldreq r0, _0202A79C ; =0x020A0640
	ldrbeq r0, [r0, #0xae]
	cmpeq r0, #0
	movne r5, #1
	bne _0202A744
	ldr r4, _0202A7A0 ; =0x0209AEC0
	mov r0, r4
	bl FUN_020466e4
	cmp r0, #0
	beq _0202A744
	mov r0, r4
	bl FUN_020465fc
	arm_func_end FUN_0202a6e4
_0202A744:
	cmp r5, #0
	beq _0202A780
	bl FUN_020173a4
	cmp r0, #1
	popne {r3, r4, r5, pc}
	bl FUN_02003e40
	bl FUN_0200445c
	ldr r1, _0202A7A4 ; =0x04001000
	ldr r0, [r1]
	bic r0, r0, #0x10000
	str r0, [r1]
	bl FUN_02003e40
	mov r0, #0
	bl FUN_02017368
	pop {r3, r4, r5, pc}
_0202A780:
	mov r1, #0
	mov r2, r1
	mov r0, #0xc
	bl FUN_02016e7c
	pop {r3, r4, r5, pc}
	.align 2, 0_0202A794: .word 0x0209A0F8
_0202A798: .word 0x0209A5D0
_0202A79C: .word 0x020A0640
_0202A7A0: .word 0x0209AEC0
_0202A7A4: .word 0x04001000

	arm_func_start FUN_0202a7a8
FUN_0202a7a8: ; 0x0202A7A8
	push {r3, r4, r5, lr}
	ldr r0, _0202A844 ; =0x02099F24
	ldr r0, [r0]
	bl FUN_020F7374
	ldr r5, _0202A848 ; =0x02099F78
	ldr r1, _0202A84C ; =0x0208F978
	mov r0, r5
	bl FUN_020418b0
	ldr r4, _0202A850 ; =0x0208F6F0
	ldr r1, _0202A854 ; =0x0208F988
	str r0, [r4]
	mov r0, r5
	bl FUN_020418b0
	str r0, [r4, #4]
	ldr r1, _0202A858 ; =0x0208F99C
	mov r0, r5
	bl FUN_020418b0
	str r0, [r4, #0xc]
	ldr r1, _0202A85C ; =0x0208F9B0
	mov r0, r5
	bl FUN_020418b0
	str r0, [r4, #0x10]
	ldr r1, _0202A860 ; =0x0208F9C4
	mov r0, r5
	bl FUN_020418b0
	str r0, [r4, #0x28]
	mov r0, r5
	ldr r1, _0202A864 ; =0x0208F9D4
	bl FUN_020418b0
	str r0, [r4, #0x2c]
	mov r0, r5
	ldr r1, _0202A868 ; =0x0208F9E8
	bl FUN_020418b0
	str r0, [r4, #0x30]
	mov r0, r5
	ldr r1, _0202A86C ; =0x0208F9FC
	bl FUN_020418b0
	str r0, [r4, #0x34]
	pop {r3, r4, r5, pc}
	.align 2, 0_0202A844: .word 0x02099F24
_0202A848: .word 0x02099F78
_0202A84C: .word 0x0208F978
_0202A850: .word 0x0208F6F0
_0202A854: .word 0x0208F988
_0202A858: .word 0x0208F99C
_0202A85C: .word 0x0208F9B0
_0202A860: .word 0x0208F9C4
_0202A864: .word 0x0208F9D4
_0202A868: .word 0x0208F9E8
_0202A86C: .word 0x0208F9FC
	arm_func_end FUN_0202a7a8

	arm_func_start FUN_0202a870
FUN_0202a870: ; 0x0202A870
	push {r4, lr}
	mov r4, #0
	ldr lr, _0202A8DC ; =0x0209A0F0
	ldr ip, _0202A8E0 ; =0x0209A0E8
	ldr r3, _0202A8E4 ; =0x0209A0F4
	ldr r0, _0202A8E8 ; =0x020B5B58
	mov r1, r4
	mov r2, #0x20
	strh r4, [lr]
	strh r4, [ip]
	strh r4, [r3]
	bl MemWrite
	ldr r1, _0202A8EC ; =0x04000130
	ldr r0, _0202A8F0 ; =0x02FFFFA8
	ldrh r1, [r1]
	ldrh r0, [r0]
	bl FUN_020160e8
	ldr r0, _0202A8F4 ; =0x020B5B00
	bl FUN_020161d0
	ldr r3, _0202A8F8 ; =0x020B5AE0
	ldr r0, _0202A8FC ; =0x020B5B40
	strb r4, [r3]
	mov r1, r4
	mov r2, #0x18
	str r4, [r3, #0x10]
	bl MemWrite
	pop {r4, pc}
	.align 2, 0_0202A8DC: .word 0x0209A0F0
_0202A8E0: .word 0x0209A0E8
_0202A8E4: .word 0x0209A0F4
_0202A8E8: .word 0x020B5B58
_0202A8EC: .word 0x04000130
_0202A8F0: .word 0x02FFFFA8
_0202A8F4: .word 0x020B5B00
_0202A8F8: .word 0x020B5AE0
_0202A8FC: .word 0x020B5B40
	arm_func_end FUN_0202a870

	arm_func_start FUN_0202a900
FUN_0202a900: ; 0x0202A900
	push {r3, r4, r5, r6, r7, lr}
	ldr r2, _0202A9FC ; =0x02FFFFA8
	ldrh r0, [r2]
	and r0, r0, #0x8000
	asrs r0, r0, #0xf
	movne ip, #0
	bne _0202A95C
	ldr r0, _0202AA00 ; =0x04000130
	ldrh r1, [r0]
	ldrh r0, [r2]
	orr r0, r1, r0
	eor r0, r0, r2, lsr #12
	and r0, r0, r2, lsr #12
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	and r1, r2, #0x40
	and r2, r2, #0x20
	mvn r1, r1, lsl #1
	mvn r2, r2, asr #1
	and r0, r1, r0, lsr #16
	and r0, r2, r0
	lsl r0, r0, #0x10
	lsr ip, r0, #0x10
	arm_func_end FUN_0202a900
_0202A95C:
	ldr r0, _0202AA04 ; =0x0209A0E8
	mov r1, #1
	ldrh r3, [r0]
	ldr lr, _0202AA08 ; =0x0209A0F4
	mov r2, #0
	ldr r0, _0202AA0C ; =0x020B5B58
	strh r2, [lr]
	mov r5, r1
	mov r7, #0xe
_0202A980:
	tst ip, r1
	beq _0202A9CC
	tst r3, r1
	beq _0202A9B8
	lsl r6, r2, #1
	ldrh r4, [r0, r6]
	cmp r4, #0x10
	ldrhhi r4, [lr]
	strhhi r7, [r0, r6]
	orrhi r4, r4, r1
	strhhi r4, [lr]
	addls r4, r4, #1
	strhls r4, [r0, r6]
	b _0202A9CC
_0202A9B8:
	ldrh r6, [lr]
	lsl r4, r2, #1
	strh r5, [r0, r4]
	orr r4, r6, r1
	strh r4, [lr]
_0202A9CC:
	lsl r1, r1, #0x11
	add r2, r2, #1
	cmp r2, #0x10
	lsr r1, r1, #0x10
	blt _0202A980
	eor r2, ip, r3
	ldr r0, _0202AA04 ; =0x0209A0E8
	ldr r1, _0202AA10 ; =0x0209A0F0
	and r2, ip, r2
	strh r2, [r1]
	strh ip, [r0]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0202A9FC: .word 0x02FFFFA8
_0202AA00: .word 0x04000130
_0202AA04: .word 0x0209A0E8
_0202AA08: .word 0x0209A0F4
_0202AA0C: .word 0x020B5B58
_0202AA10: .word 0x0209A0F0

	arm_func_start FUN_0202aa14
FUN_0202aa14: ; 0x0202AA14
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _0202AB70 ; =0x020B5AE0
	ldr r5, _0202AB74 ; =0x020B5B40
	ldr r0, [r4, #0x10]
	add r6, r5, r0, lsl #3
	bl FUN_020160e8
	mov r0, r6
	bl FUN_020161d0
	ldrb r0, [r4]
	cmp r0, #0
	bne _0202AA60
	ldr r0, [r4, #0x10]
	add r1, r5, r0, lsl #3
	ldrh r0, [r1, #4]
	cmp r0, #1
	moveq r0, #0
	strheq r0, [r1, #4]
	movne r0, #1
	strbne r0, [r4]
	arm_func_end FUN_0202aa14
_0202AA60:
	ldr r0, _0202AB78 ; =0x02FFFFA8
	ldrh r0, [r0]
	and r0, r0, #0x8000
	asrs r0, r0, #0xf
	beq _0202AA8C
	ldr r0, _0202AB70 ; =0x020B5AE0
	ldr r1, _0202AB74 ; =0x020B5B40
	ldr r0, [r0, #0x10]
	mov r2, #0
	add r0, r1, r0, lsl #3
	strh r2, [r0, #4]
_0202AA8C:
	ldr r5, _0202AB70 ; =0x020B5AE0
	ldr lr, _0202AB7C ; =0x55555556
	ldr r7, [r5, #0x10]
	mov r4, #3
	add r2, r7, #2
	smull r0, r1, lr, r2
	add r1, r1, r2, lsr #31
	smull r0, r1, r4, r1
	sub r1, r2, r0
	ldr r2, _0202AB74 ; =0x020B5B40
	lsl r3, r1, #3
	add r1, r2, r1, lsl #3
	ldrh r0, [r1, #4]
	cmp r0, #1
	bne _0202AB24
	add r0, r2, r7, lsl #3
	ldrh r6, [r0, #4]
	cmp r6, #1
	bne _0202AAF8
_0202AAD8:
	ldrh r1, [r0]
	strh r1, [r5, #0x20]
	ldrh r1, [r0, #2]
	strh r1, [r5, #0x22]
	ldrh r1, [r0, #4]
	strh r1, [r5, #0x24]
	ldrh r0, [r0, #6]
	b _0202AB40
_0202AAF8:
	add r6, r7, #1
	smull ip, r7, lr, r6
	add r7, r7, r6, lsr #31
	smull ip, lr, r4, r7
	sub r7, r6, ip
	add r4, r2, r7, lsl #3
	ldrh r4, [r4, #4]
	cmp r4, #1
	bne _0202AB20
	b _0202AB24
_0202AB20:
	b _0202AAD8
_0202AB24:
	ldrh r0, [r2, r3]
	strh r0, [r5, #0x20]
	ldrh r0, [r1, #2]
	strh r0, [r5, #0x22]
	ldrh r0, [r1, #4]
	strh r0, [r5, #0x24]
	ldrh r0, [r1, #6]
_0202AB40:
	strh r0, [r5, #0x26]
	ldr r3, _0202AB70 ; =0x020B5AE0
	ldr r1, _0202AB7C ; =0x55555556
	ldr r0, [r3, #0x10]
	mov r2, #3
	add r5, r0, #1
	smull r0, r4, r1, r5
	add r4, r4, r5, lsr #31
	smull r0, r1, r2, r4
	sub r4, r5, r0
	str r4, [r3, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0202AB70: .word 0x020B5AE0
_0202AB74: .word 0x020B5B40
_0202AB78: .word 0x02FFFFA8
_0202AB7C: .word 0x55555556

	arm_func_start FUN_0202ab80
FUN_0202ab80: ; 0x0202AB80
	push {r3, r4, r5, r6, r7, lr}
	mov r7, #0
	ldr r6, _0202AC10 ; =0x020B5B08
	ldr r5, _0202AC14 ; =0x0209A0F0
	ldr r4, _0202AC18 ; =0x0209A0E8
	b _0202ABC4
	arm_func_end FUN_0202ab80
_0202AB98:
	ldr r0, [r6, r7, lsl #2]
	cmp r0, #0
	beq _0202ABC0
	ldr r3, [r0]
	ldrh r1, [r5]
	ldrh r2, [r4]
	ldr r3, [r3, #0x14]
	blx r3
	cmp r0, #0
	bne _0202ABCC
_0202ABC0:
	add r7, r7, #1
_0202ABC4:
	cmp r7, #3
	blt _0202AB98
_0202ABCC:
	mov r6, #0
	ldr r4, _0202AC1C ; =0x020B5B00
	ldr r5, _0202AC10 ; =0x020B5B08
	b _0202AC04
_0202ABDC:
	ldr r0, [r5, r6, lsl #2]
	cmp r0, #0
	beq _0202AC00
	ldr r2, [r0]
	mov r1, r4
	ldr r2, [r2, #0x18]
	blx r2
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
_0202AC00:
	add r6, r6, #1
_0202AC04:
	cmp r6, #3
	blt _0202ABDC
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0202AC10: .word 0x020B5B08
_0202AC14: .word 0x0209A0F0
_0202AC18: .word 0x0209A0E8
_0202AC1C: .word 0x020B5B00

	arm_func_start FUN_0202ac20
FUN_0202ac20: ; 0x0202AC20
	push {r3, lr}
	ldr r0, _0202AC44 ; =0x020B5AE0
	ldr r0, [r0, #0x30]
	cmp r0, #0
	popeq {r3, pc}
	ldr r1, [r0]
	ldr r1, [r1, #0x10]
	blx r1
	pop {r3, pc}
	.align 2, 0_0202AC44: .word 0x020B5AE0
	arm_func_end FUN_0202ac20

	arm_func_start FUN_0202ac48
FUN_0202ac48: ; 0x0202AC48
	push {r3, lr}
	ldr r0, _0202AC6C ; =0x020B5AE0
	ldr r0, [r0, #0x30]
	cmp r0, #0
	popeq {r3, pc}
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	pop {r3, pc}
	.align 2, 0_0202AC6C: .word 0x020B5AE0
	arm_func_end FUN_0202ac48

	arm_func_start FUN_0202ac70
FUN_0202ac70: ; 0x0202AC70
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r7, #0
	ldr r6, _0202ACE8 ; =0x020B5B08
	strb r7, [sp]
	strb r7, [sp, #1]
	add r4, sp, #0
	mov r5, r7
	arm_func_end FUN_0202ac70
_0202AC90:
	ldr r0, [r6, r7, lsl #2]
	cmp r0, #0
	beq _0202ACD0
	mov r8, r5
_0202ACA0:
	ldrb r0, [r4, r8]
	cmp r0, #0
	bne _0202ACC4
	ldr r0, [r6, r7, lsl #2]
	mov r1, r8
	ldr r2, [r0]
	ldr r2, [r2, #0x1c]
	blx r2
	strb r0, [r4, r8]
_0202ACC4:
	add r8, r8, #1
	cmp r8, #2
	blt _0202ACA0
_0202ACD0:
	add r7, r7, #1
	cmp r7, #3
	blt _0202AC90
	bl FUN_0202ac48
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0202ACE8: .word 0x020B5B08

	arm_func_start FUN_0202acec
FUN_0202acec: ; 0x0202ACEC
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r7, #0
	ldr r6, _0202AD60 ; =0x020B5B08
	strb r7, [sp]
	strb r7, [sp, #1]
	add r4, sp, #0
	mov r5, r7
	arm_func_end FUN_0202acec
_0202AD0C:
	ldr r0, [r6, r7, lsl #2]
	cmp r0, #0
	beq _0202AD4C
	mov r8, r5
_0202AD1C:
	ldrb r0, [r4, r8]
	cmp r0, #0
	bne _0202AD40
	ldr r0, [r6, r7, lsl #2]
	mov r1, r8
	ldr r2, [r0]
	ldr r2, [r2, #0x24]
	blx r2
	strb r0, [r4, r8]
_0202AD40:
	add r8, r8, #1
	cmp r8, #2
	blt _0202AD1C
_0202AD4C:
	add r7, r7, #1
	cmp r7, #3
	blt _0202AD0C
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0202AD60: .word 0x020B5B08

	arm_func_start FUN_0202ad64
FUN_0202ad64: ; 0x0202AD64
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r4, _0202AE18 ; =0x02099F24
	ldr r1, _0202AE1C ; =0x0209A110
	ldr r0, [r4]
	ldr r1, [r1]
	bl FUN_02059fac
	bl FUN_02067170
	ldr sb, _0202AE20 ; =0x02099F58
	ldr r0, [sb]
	bl FUN_0211680C
	ldr r0, _0202AE24 ; =0x02099EB0
	ldr r0, [r0]
	bl FUN_0205d420
	ldr r0, [sb]
	bl FUN_02116820
	ldr r8, _0202AE28 ; =0x02099EE8
	ldr r0, [r8]
	bl FUN_0205f130
	ldr r7, _0202AE2C ; =0x02099EEC
	mov r1, #0
	ldr r0, [r7]
	bl FUN_0205a73c
	ldr r6, _0202AE30 ; =0x02099F10
	ldr r0, [r6]
	bl FUN_0205c060
	ldr r5, _0202AE34 ; =0x02099F38
	ldr r0, [r5]
	bl FUN_02112714
	bl FUN_02067170
	ldr r0, [r4]
	bl FUN_020F7908
	ldr r0, [r8]
	bl FUN_0205f140
	ldr r0, [r7]
	mov r1, #1
	bl FUN_0205a73c
	ldr r0, [r5]
	bl FUN_02112704
	ldr r0, [r6]
	bl FUN_0205c150
	ldr r0, [sb]
	bl FUN_021167F8
	ldr r0, [r4]
	bl FUN_020F792C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0202AE18: .word 0x02099F24
_0202AE1C: .word 0x0209A110
_0202AE20: .word 0x02099F58
_0202AE24: .word 0x02099EB0
_0202AE28: .word 0x02099EE8
_0202AE2C: .word 0x02099EEC
_0202AE30: .word 0x02099F10
_0202AE34: .word 0x02099F38
	arm_func_end FUN_0202ad64

	arm_func_start FUN_0202ae38
FUN_0202ae38: ; 0x0202AE38
	push {r4, r5, r6, lr}
	ldr r1, _0202AF68 ; =0x0209A110
	mov r4, #0
	ldr r0, _0202AF6C ; =0x0209A0F8
	mov r6, #1
	str r4, [r1]
	str r6, [r0]
	bl FUN_0202a7a8
	bl FUN_020F3F00
	bl FUN_0202a870
	ldr r5, _0202AF70 ; =0x0209A144
	ldr r1, _0202AF74 ; =0x0209A0DC
	ldr r0, _0202AF78 ; =0x0208FA10
	strb r4, [r1]
	mov r1, r5
	bl FUN_020F3054
	ldr r5, [r5]
	mov r1, r4
	mov r0, r5
	mov r2, r4
	bl FUN_020F1138
	mov r0, r5
	mov r1, r6
	mov r2, r4
	bl FUN_020F1138
	bl FUN_0206edc0
	ldr r0, _0202AF7C ; =0x020B5B08
	mov r1, r4
	arm_func_end FUN_0202ae38
_0202AEA8:
	str r1, [r0, r4, lsl #2]
	add r4, r4, #1
	cmp r4, #3
	blt _0202AEA8
	ldr r0, _0202AF80 ; =0x0209A3E0
	ldr r4, _0202AF84 ; =0x020B5AE0
	str r0, [r4, #0x28]
	bl FUN_020FE23C
	ldr r0, _0202AF88 ; =0x020AF81C
	str r0, [r4, #0x2c]
	bl FUN_02043c80
	ldr r0, _0202AF8C ; =0x02FFFC20
	ldr r0, [r0]
	cmp r0, #0x11
	bne _0202AF38
	ldr r4, _0202AF90 ; =0x00008003
	mov r5, #0x10
	mov r0, r4
	mov r1, r5
	bl FUN_020F1214
	bl FUN_02003e40
	bl FUN_0200449c
	ldr r1, _0202AF94 ; =0x04001000
	ldr r0, [r1]
	orr r0, r0, #0x10000
	str r0, [r1]
_0202AF10:
	mov r0, r4
	mov r1, r5
	bl FUN_020F1214
	bl FUN_02003e40
	subs r5, r5, #1
	bpl _0202AF10
	mov r0, r4
	mvn r1, #0xf
	bl FUN_020F1214
	bl FUN_02003e40
_0202AF38:
	ldr r4, _0202AF98 ; =0x0209A250
	mov r1, #1
	mov r0, r4
	bl FUN_0202e1ac
	bl FUN_0202a4d4
	mov r0, r4
	mov r1, #0
	bl FUN_0202e1ac
	ldr r0, _0202AF9C ; =0x0209BA20
	bl FUN_0206f29c
	bl FUN_0202a698
	pop {r4, r5, r6, pc}
	.align 2, 0_0202AF68: .word 0x0209A110
_0202AF6C: .word 0x0209A0F8
_0202AF70: .word 0x0209A144
_0202AF74: .word 0x0209A0DC
_0202AF78: .word 0x0208FA10
_0202AF7C: .word 0x020B5B08
_0202AF80: .word 0x0209A3E0
_0202AF84: .word 0x020B5AE0
_0202AF88: .word 0x020AF81C
_0202AF8C: .word 0x02FFFC20
_0202AF90: .word 0x00008003
_0202AF94: .word 0x04001000
_0202AF98: .word 0x0209A250
_0202AF9C: .word 0x0209BA20

	arm_func_start FUN_0202afa0
FUN_0202afa0: ; 0x0202AFA0
	ldr r1, _0202AFC0 ; =0x0209A110
	ldr r0, _0202AFC4 ; =0x020A0640
	ldr r2, [r1]
	ldr r1, [r0, #0x4dc]
	ldr r0, _0202AFC8 ; =0x020A0B00
	ldr ip, _0202AFCC ; =FUN_02074764
	add r1, r2, r1
	bx ip
	.align 2, 0_0202AFC0: .word 0x0209A110
_0202AFC4: .word 0x020A0640
_0202AFC8: .word 0x020A0B00
_0202AFCC: .word FUN_02074764
	arm_func_end FUN_0202afa0

	arm_func_start FUN_0202afd0
FUN_0202afd0: ; 0x0202AFD0
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	bl FUN_0202ae38
	ldr r0, _0202B190 ; =0x02FFFC3C
	ldr r4, [r0]
	bl FUN_02003e40
	bl FUN_0200449c
	ldr r3, _0202B194 ; =0x04001000
	ldr r0, _0202B198 ; =0x0209A250
	ldr r2, [r3]
	mov r1, #1
	orr r2, r2, #0x10000
	str r2, [r3]
	bl FUN_0202e1ac
	ldr r1, _0202B19C ; =0x02099ECC
	mov r2, #0
	ldr r0, _0202B1A0 ; =0x0209A124
	str r2, [r1]
	str r2, [r0]
	arm_func_end FUN_0202afd0
_0202B01C:
	ldr r0, _0202B1A4 ; =0x02118490
	mov r6, #1
	str r6, [r0]
	ldr r5, _0202B1A8 ; =0x02FFFFA8
	str r6, [r0, #4]
	ldrh r0, [r5]
	and r0, r0, #0x8000
	asrs r0, r0, #0xf
	beq _0202B04C
	bl FUN_0202a6e4
	ldr r4, [r5, #-0x36c]
	b _0202B080
_0202B04C:
	bl FUN_020173a4
	cmp r0, #0
	bne _0202B080
	mov r0, r6
	bl FUN_02017368
	bl FUN_02003e40
	bl FUN_0200449c
	ldr r1, _0202B194 ; =0x04001000
	ldr r0, [r1]
	orr r0, r0, #0x10000
	str r0, [r1]
	bl FUN_020F129C
	bl FUN_02003e40
_0202B080:
	ldr r5, _0202B1AC ; =0x02099F18
	ldr r0, [r5]
	bl FUN_02051434
	bl FUN_0202ac20
	bl FUN_0202a900
	bl FUN_0202aa14
	bl FUN_0202ab80
	ldr r0, _0202B1A0 ; =0x0209A124
	mov r1, #0
	str r1, [r0]
	bl FUN_0206f014
	bl FUN_0202ac70
	bl FUN_0202ad64
	ldr r0, _0202B1B0 ; =0x02099F30
	mov r1, #1
	ldr r0, [r0]
	str r1, [r0, #0x38]
	ldr r0, [r5]
	bl FUN_02051448
	ldr r0, _0202B1B4 ; =0x0209A0E8
	ldrh r0, [r0]
	tst r0, #0x100
	beq _0202B100
	ldr r0, _0202B1B8 ; =0x0209A0F0
	ldrh r0, [r0]
	tst r0, #0x200
	beq _0202B100
	ldr r0, _0202B198 ; =0x0209A250
	add r1, sp, #8
	add r2, sp, #4
	add r3, sp, #0
	bl FUN_0202e38c
_0202B100:
	ldr r0, _0202B1A0 ; =0x0209A124
	ldr r2, _0202B19C ; =0x02099ECC
	ldr r0, [r0]
	mov r1, #1
	str r1, [r2]
	cmp r0, #0
	beq _0202B120
	bl FUN_020F2604
_0202B120:
	ldr r5, _0202B19C ; =0x02099ECC
_0202B124:
	bl FUN_02003e40
	ldr r0, [r5]
	cmp r0, #0
	beq _0202B13C
	bl FUN_0202aa14
	b _0202B124
_0202B13C:
	ldr r1, _0202B190 ; =0x02FFFC3C
	ldr r0, _0202B1BC ; =0x0209A110
	ldr r2, [r1]
	sub r1, r2, r4
	mov r4, r2
	str r1, [r0]
	bl FUN_0202acec
	ldr r5, _0202B1C0 ; =0x020B5AE0
	ldr r0, [r5, #0x30]
	ldr r1, [r0]
	ldr r1, [r1, #0x30]
	blx r1
	ldr r0, [r5, #0x30]
	ldr r1, [r0]
	ldr r1, [r1, #0x34]
	blx r1
	ldr r0, _0202B1C4 ; =0x0209AC44
	bl FUN_0202b768
	bl FUN_0202afa0
	bl FUN_0202a39c
	b _0202B01C
	.align 2, 0_0202B190: .word 0x02FFFC3C
_0202B194: .word 0x04001000
_0202B198: .word 0x0209A250
_0202B19C: .word 0x02099ECC
_0202B1A0: .word 0x0209A124
_0202B1A4: .word 0x02118490
_0202B1A8: .word 0x02FFFFA8
_0202B1AC: .word 0x02099F18
_0202B1B0: .word 0x02099F30
_0202B1B4: .word 0x0209A0E8
_0202B1B8: .word 0x0209A0F0
_0202B1BC: .word 0x0209A110
_0202B1C0: .word 0x020B5AE0
_0202B1C4: .word 0x0209AC44

	arm_func_start FUN_0202b1c8
FUN_0202b1c8: ; 0x0202B1C8
	mvn r0, #0
	bx lr
	arm_func_end FUN_0202b1c8

	arm_func_start FUN_0202b1d0
FUN_0202b1d0: ; 0x0202B1D0
	mvn r0, #0
	bx lr
	arm_func_end FUN_0202b1d0

	arm_func_start FUN_0202b1d8
FUN_0202b1d8: ; 0x0202B1D8
	mvn r0, #0
	bx lr
	arm_func_end FUN_0202b1d8

	arm_func_start FUN_0202b1e0
FUN_0202b1e0: ; 0x0202B1E0
	mov r0, #0
	bx lr
	arm_func_end FUN_0202b1e0

	arm_func_start FUN_0202b1e8
FUN_0202b1e8: ; 0x0202B1E8
	mov r0, #0
	bx lr
	arm_func_end FUN_0202b1e8

	arm_func_start FUN_0202b1f0
FUN_0202b1f0: ; 0x0202B1F0
	mov r0, #0
	bx lr
	arm_func_end FUN_0202b1f0

	arm_func_start FUN_0202b1f8
FUN_0202b1f8: ; 0x0202B1F8
	mov r0, #1
	bx lr
	arm_func_end FUN_0202b1f8

	arm_func_start FUN_0202b200
FUN_0202b200: ; 0x0202B200
	bx lr
	arm_func_end FUN_0202b200

	arm_func_start FUN_0202b204
FUN_0202b204: ; 0x0202B204
	bx lr
	arm_func_end FUN_0202b204

	arm_func_start FUN_0202b208
FUN_0202b208: ; 0x0202B208
	mov r0, #0
	bx lr
	arm_func_end FUN_0202b208

	arm_func_start FUN_0202b210
FUN_0202b210: ; 0x0202B210
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0202b210

	arm_func_start thunk_EXT_FUN_020f1800
thunk_EXT_FUN_020f1800: ; 0x0202B224
	ldr ip, _0202B22C ; =FUN_020F1800
	bx ip
	.align 2, 0_0202B22C: .word FUN_020F1800
	arm_func_end thunk_EXT_FUN_020f1800

	arm_func_start thunk_EXT_FUN_020f1660
thunk_EXT_FUN_020f1660: ; 0x0202B230
	ldr ip, _0202B238 ; =FUN_020F1660
	bx ip
	.align 2, 0_0202B238: .word FUN_020F1660
	arm_func_end thunk_EXT_FUN_020f1660

	arm_func_start FUN_0202b23c
FUN_0202b23c: ; 0x0202B23C
	ldr ip, _0202B248 ; =FUN_020F15C8
	mov r0, #8
	bx ip
	.align 2, 0_0202B248: .word FUN_020F15C8
	arm_func_end FUN_0202b23c

	arm_func_start FUN_0202b24c
FUN_0202b24c: ; 0x0202B24C
	ldr ip, _0202B258 ; =FUN_020F1528
	mov r0, #6
	bx ip
	.align 2, 0_0202B258: .word FUN_020F1528
	arm_func_end FUN_0202b24c

	arm_func_start FUN_0202b25c
FUN_0202b25c: ; 0x0202B25C
	ldr ip, _0202B268 ; =FUN_020F147C
	mov r0, #6
	bx ip
	.align 2, 0_0202B268: .word FUN_020F147C
	arm_func_end FUN_0202b25c

	arm_func_start thunk_EXT_FUN_020f13c4
thunk_EXT_FUN_020f13c4: ; 0x0202B26C
	ldr ip, _0202B274 ; =FUN_020F13C4
	bx ip
	.align 2, 0_0202B274: .word FUN_020F13C4
	arm_func_end thunk_EXT_FUN_020f13c4

	arm_func_start thunk_EXT_FUN_020f1310
thunk_EXT_FUN_020f1310: ; 0x0202B278
	ldr ip, _0202B280 ; =FUN_020F1310
	bx ip
	.align 2, 0_0202B280: .word FUN_020F1310
	arm_func_end thunk_EXT_FUN_020f1310

	arm_func_start FUN_0202b284
FUN_0202b284: ; 0x0202B284
	ldr ip, _0202B290 ; =FUN_020F16C8
	mov r0, #1
	bx ip
	.align 2, 0_0202B290: .word FUN_020F16C8
	arm_func_end FUN_0202b284

	arm_func_start FUN_0202b294
FUN_0202b294: ; 0x0202B294
	ldr ip, _0202B2A0 ; =FUN_020F12B4
	mov r0, #1
	bx ip
	.align 2, 0_0202B2A0: .word FUN_020F12B4
	arm_func_end FUN_0202b294

	arm_func_start FUN_0202b2a4
FUN_0202b2a4: ; 0x0202B2A4
	bx lr
	arm_func_end FUN_0202b2a4

	arm_func_start FUN_0202b2a8
FUN_0202b2a8: ; 0x0202B2A8
	bx lr
	arm_func_end FUN_0202b2a8

	arm_func_start FUN_0202b2ac
FUN_0202b2ac: ; 0x0202B2AC
	bx lr
	arm_func_end FUN_0202b2ac

	arm_func_start thunk_EXT_FUN_020f17f0
thunk_EXT_FUN_020f17f0: ; 0x0202B2B0
	ldr ip, _0202B2B8 ; =FUN_020F17F0
	bx ip
	.align 2, 0_0202B2B8: .word FUN_020F17F0
	arm_func_end thunk_EXT_FUN_020f17f0

	arm_func_start thunk_EXT_FUN_020f1650
thunk_EXT_FUN_020f1650: ; 0x0202B2BC
	ldr ip, _0202B2C4 ; =FUN_020F1650
	bx ip
	.align 2, 0_0202B2C4: .word FUN_020F1650
	arm_func_end thunk_EXT_FUN_020f1650

	arm_func_start FUN_0202b2c8
FUN_0202b2c8: ; 0x0202B2C8
	ldr ip, _0202B2D4 ; =FUN_020F15B4
	mov r0, #8
	bx ip
	.align 2, 0_0202B2D4: .word FUN_020F15B4
	arm_func_end FUN_0202b2c8

	arm_func_start FUN_0202b2d8
FUN_0202b2d8: ; 0x0202B2D8
	ldr ip, _0202B2E4 ; =FUN_020F1514
	mov r0, #6
	bx ip
	.align 2, 0_0202B2E4: .word FUN_020F1514
	arm_func_end FUN_0202b2d8

	arm_func_start FUN_0202b2e8
FUN_0202b2e8: ; 0x0202B2E8
	ldr ip, _0202B2F4 ; =FUN_020F1468
	mov r0, #6
	bx ip
	.align 2, 0_0202B2F4: .word FUN_020F1468
	arm_func_end FUN_0202b2e8

	arm_func_start thunk_EXT_FUN_020f13b4
thunk_EXT_FUN_020f13b4: ; 0x0202B2F8
	ldr ip, _0202B300 ; =FUN_020F13B4
	bx ip
	.align 2, 0_0202B300: .word FUN_020F13B4
	arm_func_end thunk_EXT_FUN_020f13b4

	arm_func_start thunk_EXT_FUN_020f1300
thunk_EXT_FUN_020f1300: ; 0x0202B304
	ldr ip, _0202B30C ; =FUN_020F1300
	bx ip
	.align 2, 0_0202B30C: .word FUN_020F1300
	arm_func_end thunk_EXT_FUN_020f1300

	arm_func_start FUN_0202b310
FUN_0202b310: ; 0x0202B310
	ldr ip, _0202B31C ; =FUN_020F16C8
	mov r0, #0
	bx ip
	.align 2, 0_0202B31C: .word FUN_020F16C8
	arm_func_end FUN_0202b310

	arm_func_start FUN_0202b320
FUN_0202b320: ; 0x0202B320
	ldr ip, _0202B32C ; =FUN_020F12B4
	mov r0, #0
	bx ip
	.align 2, 0_0202B32C: .word FUN_020F12B4
	arm_func_end FUN_0202b320

	arm_func_start FUN_0202b330
FUN_0202b330: ; 0x0202B330
	push {r4, r5, r6, lr}
	mov r4, r1
	ldr r1, [r4]
	mov r5, r0
	mov r6, r2
	cmp r1, #0
	bne _0202B37C
	cmp r3, #2
	bne _0202B370
	ldr r0, _0202B3D0 ; =0x020B5B78
	ldr r0, [r0]
	cmp r0, #1
	blt _0202B370
	ldr r0, _0202B3D4 ; =0x0209A250
	ldr r1, _0202B3D8 ; =0x00000102
	b _0202B378
	arm_func_end FUN_0202b330
_0202B370:
	ldr r0, _0202B3D4 ; =0x0209A250
	mov r1, #2
_0202B378:
	bl FUN_0202e19c
_0202B37C:
	cmp r6, #0
	beq _0202B3AC
	ldr r0, _0202B3D0 ; =0x020B5B78
	ldr r3, [sp, #0x10]
	ldr r1, [r0, #4]
	mov r0, r4
	mov r2, r5
	bl FUN_020863fc
	cmp r0, #0
	movge r0, #1
	movlt r0, #0
	pop {r4, r5, r6, pc}
_0202B3AC:
	ldr r1, _0202B3D0 ; =0x020B5B78
	mov r0, r4
	ldr r1, [r1, #4]
	mov r2, r5
	bl FUN_02086284
	cmp r0, #0
	movge r0, #1
	movlt r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_0202B3D0: .word 0x020B5B78
_0202B3D4: .word 0x0209A250
_0202B3D8: .word 0x00000102

	arm_func_start FUN_0202b3dc
FUN_0202b3dc: ; 0x0202B3DC
	bx lr
	arm_func_end FUN_0202b3dc

	arm_func_start FUN_0202b3e0
FUN_0202b3e0: ; 0x0202B3E0
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	arm_func_end FUN_0202b3e0
_0202B3EC:
	mov r0, r5
	mov r1, r4
	bl FUN_0202d08c
	add r4, r4, #1
	cmp r4, #2
	blt _0202B3EC
	mov r4, #0
_0202B408:
	mov r0, r5
	mov r1, r4
	bl FUN_0202cf00
	add r4, r4, #1
	cmp r4, #2
	blt _0202B408
	mov r4, #0
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_0202d774
	mov r0, r5
	mov r1, r4
	bl FUN_0202d578
	mov r0, r5
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202b448
FUN_0202b448: ; 0x0202B448
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x40
	mov r4, r0
	str r1, [r4]
	bl FUN_0200bb68
	ldr r8, _0202B704 ; =0x0000FFFF
	mov sb, #0
	mov r0, r8
	mov r1, sb
	bl FUN_0200b91c
	mov r7, #4
	mov r6, #1
	ldr r0, [r4]
	add r1, r8, #0x10
	mov r2, r7
	mov r3, r6
	bl FUN_0202de58
	add r5, sp, #0
	mov sl, r0
	mov r0, r5
	bl FUN_02074aa8
	add r0, sl, #0xf
	bic r1, r0, #0xf
	mov r0, r5
	mov r2, #0x10000
	bl FUN_02074c24
	mov r0, r5
	mov r1, sb
	mov r2, r7
	bl FUN_02074c58
	mov r0, r5
	mov r1, #5
	bl FUN_02074c8c
	mov sl, #0xf
	mov r0, r5
	mov r1, sb
	mov r2, sl
	bl FUN_02074cbc
	mov r0, r5
	bl FUN_02074d04
	mov r0, r7
	mov r1, r7
	bl FUN_02076ecc
	add r0, r4, #4
	bl FUN_0207c2ec
	add r0, r4, #4
	mov r1, #6
	bl FUN_0207c348
	add r0, r4, #4
	mov r1, #0x14
	bl FUN_0207c368
	mov r1, r6
	add r0, r4, #4
	bl FUN_0207c388
	mov r2, sl
	add r0, r4, #4
	mov r1, #8
	bl FUN_0207c3b8
	mov r5, #0x1000
	add r0, r4, #4
	mov r1, r5
	bl FUN_0207c3f0
	mov r1, r5
	add r0, r4, #4
	bl FUN_0207c430
	add r0, r4, #4
	bl FUN_0207c5c0
	mov r1, #0x7f
	add r0, r4, #0x200
	strh r1, [r0, #0x58]
	strh r1, [r0, #0x5a]
	strh r1, [r0, #0x5c]
	mov r1, #0x3e8
	strh r1, [r0, #0x5e]
	strh r1, [r0, #0x60]
	add r0, r4, #0x58
	mov r1, sb
	mov r2, #0x64
	bl MemWrite
	sub r2, r8, #0x10000
	mov r5, sb
	mov r0, #0x14
	arm_func_end FUN_0202b448
_0202B590:
	mla r1, sb, r0, r4
	add sb, sb, #1
	strh r2, [r1, #0x5c]
	cmp sb, #5
	blt _0202B590
	mov r6, #0
	mov r1, r6
	add r0, r4, #0xbc
	mov r2, #4
	bl MemWrite
	mov r1, r6
	add r0, r4, #0xc0
	mov r2, #0x18
	bl MemWrite
	mvn r2, #0
	mov r0, #0xc
_0202B5D0:
	mla r1, r6, r0, r4
	add r6, r6, #1
	strh r2, [r1, #0xc0]
	cmp r6, #2
	blt _0202B5D0
	mov r6, #0
	mov r1, r6
	add r0, r4, #0xd8
	mov r2, #0x30
	bl MemWrite
	mov r7, #0x38
	mov r1, r6
	mov r2, r7
	add r0, r4, #0x108
	bl MemWrite
	mov r1, r6
	mov r2, r7
	add r0, r4, #0x140
	bl MemWrite
	mov r1, r6
	add r0, r4, #0x178
	mov r2, r7
	bl MemWrite
	add r0, r4, #0x1b0
	mov r1, r6
	mov r2, r7
	bl MemWrite
	add r0, r4, #0x1e8
	mov r1, r6
	mov r2, r7
	bl MemWrite
	mov r2, r7
	add r0, r4, #0x220
	mov r1, r6
	bl MemWrite
	mvn r2, #0
	mov r0, #0x1c
_0202B664:
	mla r3, r6, r0, r4
	add r1, r3, #0x100
	strh r2, [r1, #0x18]
	strh r2, [r1, #0x50]
	strh r2, [r1, #0x88]
	strh r2, [r1, #0xc0]
	add r6, r6, #1
	strh r2, [r1, #0xf8]
	add r1, r3, #0x200
	strh r2, [r1, #0x30]
	cmp r6, #2
	blt _0202B664
	mov r3, #0
	mvn r2, #0
	mov r0, #0xc
_0202B6A0:
	mla r1, r3, r0, r4
	add r3, r3, #1
	strb r2, [r1, #0xc3]
	cmp r3, #2
	blt _0202B6A0
	ldr r0, [r4]
	mov r2, #4
	ldr r1, _0202B708 ; =0x00064010
	mov r3, #1
	strb r2, [r4, #0x5f]
	bl FUN_0202de58
	mov r1, #5
	str r0, [r4, #0x58]
	str r0, [r4, #0x6c]
	mov r0, #2
	strb r1, [r4, #0x73]
	bl FUN_02086750
	ldr r1, _0202B70C ; =0x0208FACC
	mov r0, r5
	bl FUN_02085e4c
	ldr r1, _0202B710 ; =0x020B5B78
	str r0, [r1, #4]
	str r5, [r4, #0x264]
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0202B704: .word 0x0000FFFF
_0202B708: .word 0x00064010
_0202B70C: .word 0x0208FACC
_0202B710: .word 0x020B5B78

	arm_func_start FUN_0202b714
FUN_0202b714: ; 0x0202B714
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r5, r0
	mov r0, r4
	bl FUN_0207504c
	ldrh r0, [r5, #0xfe]
	tst r0, #4
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x100]
	mov r1, r4
	bl FUN_0207d1c4
	ldrh r1, [r5, #0xfe]
	ldr r0, _0202B754 ; =0x0000FFFB
	and r0, r1, r0
	strh r0, [r5, #0xfe]
	pop {r3, r4, r5, pc}
	.align 2, 0_0202B754: .word 0x0000FFFB
	arm_func_end FUN_0202b714

	arm_func_start FUN_0202b758
FUN_0202b758: ; 0x0202B758
	ldr ip, _0202B764 ; =LAB_02074f18
	mov r0, #1
	bx ip
	.align 2, 0_0202B764: .word LAB_02074f18
	arm_func_end FUN_0202b758

	arm_func_start FUN_0202b768
FUN_0202b768: ; 0x0202B768
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_0202c5e8
	mov r0, r5
	bl FUN_0202d228
	mov r0, r5
	bl FUN_0202d7ec
	mov r4, #0
	arm_func_end FUN_0202b768
_0202B788:
	add r1, r5, r4, lsl #1
	ldrb r0, [r1, #0xbd]
	cmp r0, #0
	beq _0202B7A4
	ldrsb r1, [r1, #0xbc]
	mov r0, r5
	bl FUN_0202cc34
_0202B7A4:
	add r4, r4, #1
	cmp r4, #2
	blt _0202B788
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202b7b4
FUN_0202b7b4: ; 0x0202B7B4
	push {r4, lr}
	mov r4, r0
	bl FUN_0202d228
	mov r2, #0
	mov r0, #0xc
	arm_func_end FUN_0202b7b4
_0202B7C8:
	mla r1, r2, r0, r4
	ldrh r1, [r1, #0xc4]
	tst r1, #0x11
	movne r0, #0
	popne {r4, pc}
	add r2, r2, #1
	cmp r2, #2
	blt _0202B7C8
	mov r0, #1
	pop {r4, pc}

	arm_func_start FUN_0202b7f0
FUN_0202b7f0: ; 0x0202B7F0
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	arm_func_end FUN_0202b7f0
_0202B7FC:
	add r1, r5, r4, lsl #1
	ldrb r0, [r1, #0xbd]
	cmp r0, #0
	beq _0202B824
	ldrsb r1, [r1, #0xbc]
	mov r0, r5
	bl FUN_0202cc34
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
_0202B824:
	add r4, r4, #1
	cmp r4, #2
	blt _0202B7FC
	mov r0, #1
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202b838
FUN_0202b838: ; 0x0202B838
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x20
	mov r4, r0
	ldr r5, [r4, #0x264]
	mov sb, r1
	mov r8, r2
	mov r6, r3
	cmp r5, sb
	mov r7, #0
	beq _0202B864
	bl FUN_0202bad8
	arm_func_end FUN_0202b838
_0202B864:
	str sb, [r4, #0x264]
	cmp sb, #0xb

	arm_func_start switchD
switchD: ; 0x0202B86C
	addls pc, pc, sb, lsl #2
	b _0202BAA0
	arm_func_end switchD
_0202B874: ; jump table
	b _0202BAA0 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0202B878
	b _0202BAA0
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0202B87C
	b _0202B8A4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0202B880
	b _0202B8C8
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0202B884
	b _0202B904
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0202B888
	b _0202B928
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0202B88C
	b _0202B980
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0202B890
	b _0202B95C
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0202B894
	b _0202B9D4
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0202B898
	b _0202BA60
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0202B89C
	b _0202BAA0
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0202B8A0
	b _0202BAA0
	arm_func_end caseD_b
_0202B8A4:
	ldr r2, _0202BAAC ; =0x0208FAD8
	mov r0, r4
	mov r1, r7
	bl FUN_0202cdd4
	cmp r0, #0
	bne _0202BAA0
	add sp, sp, #0x20
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202B8C8:
	ldr r0, _0202BAB0 ; =0x0209BA20
	bl FUN_020731a4
	cmp r0, #0
	mov r1, #0
	beq _0202B8E4
	ldr r2, _0202BAB4 ; =0x0208FAE0
	b _0202B8E8
_0202B8E4:
	ldr r2, _0202BAB8 ; =0x0208FAE8
_0202B8E8:
	mov r0, r4
	bl FUN_0202cdd4
	cmp r0, #0
	bne _0202BAA0
	add sp, sp, #0x20
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202B904:
	ldr r2, _0202BABC ; =0x0208FAF0
	mov r0, r4
	mov r1, #2
	bl FUN_0202cdd4
	cmp r0, #0
	bne _0202BAA0
	add sp, sp, #0x20
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202B928:
	mov r0, r4
	mov r1, r7
	mov r2, #6
	bl FUN_0202bea4
	ldr r2, _0202BAC0 ; =0x0208FAF8
	mov r0, r4
	mov r1, #2
	bl FUN_0202cdd4
	cmp r0, #0
	bne _0202BAA0
	add sp, sp, #0x20
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202B95C:
	ldr r2, _0202BAC4 ; =0x0208FB00
	mov r0, r4
	mov r1, #1
	bl FUN_0202cdd4
	cmp r0, #0
	bne _0202BAA0
	add sp, sp, #0x20
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202B980:
	ldr r2, _0202BAC8 ; =0x0208FB08
	mov r0, r4
	mov r1, #1
	bl FUN_0202cdd4
	cmp r5, #5
	bne _0202BAA0
	mov r8, #0
	add r6, r4, #0x1e8
	mov r5, #0x1c
_0202B9A4:
	mov r0, r4
	mov r1, r8
	mov r2, r7
	mov r3, r7
	bl FUN_0202c364
	mla r1, r8, r5, r6
	mov r0, r4
	bl FUN_0202be18
	add r8, r8, #1
	cmp r8, #2
	blt _0202B9A4
	b _0202BAA0
_0202B9D4:
	cmp r8, #0
	beq _0202BA08
	add r5, sp, #0
	ldr r1, _0202BACC ; =0x0208FB10
	mov r0, r5
	mov r2, r8
	bl FUN_02023c40
	mov r0, r4
	mov r2, r5
	mov r1, #0
	mov r3, #1
	bl FUN_0202bec0
	b _0202BA18
_0202BA08:
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_0202bea4
_0202BA18:
	cmp r6, #0
	beq _0202BA4C
	add r5, sp, #0
	ldr r1, _0202BAD0 ; =0x0208FB18
	mov r0, r5
	mov r2, r6
	bl FUN_02023c40
	mov r1, #1
	mov r0, r4
	mov r2, r5
	mov r3, r1
	bl FUN_0202bec0
	b _0202BAA0
_0202BA4C:
	mov r0, r4
	mov r1, #1
	mov r2, #0
	bl FUN_0202bea4
	b _0202BAA0
_0202BA60:
	mov r6, #4
	mov r0, r4
	mov r1, r6
	bl FUN_0202db98
	ldr r2, _0202BAD4 ; =0x0208FB20
	mov r0, r4
	mov r1, #1
	bl FUN_0202cdd4
	mov r5, r0
	mov r0, r4
	mov r1, r6
	bl FUN_0202db98
	cmp r5, #0
	addeq sp, sp, #0x20
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
_0202BAA0:
	mov r0, #1
	add sp, sp, #0x20
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0202BAAC: .word 0x0208FAD8
_0202BAB0: .word 0x0209BA20
_0202BAB4: .word 0x0208FAE0
_0202BAB8: .word 0x0208FAE8
_0202BABC: .word 0x0208FAF0
_0202BAC0: .word 0x0208FAF8
_0202BAC4: .word 0x0208FB00
_0202BAC8: .word 0x0208FB08
_0202BACC: .word 0x0208FB10
_0202BAD0: .word 0x0208FB18
_0202BAD4: .word 0x0208FB20

	arm_func_start FUN_0202bad8
FUN_0202bad8: ; 0x0202BAD8
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x264]
	cmp r1, #0xb
	arm_func_end FUN_0202bad8

	arm_func_start switchD
switchD: ; 0x0202BAE8
	addls pc, pc, r1, lsl #2
	b _0202BB4C
	arm_func_end switchD
_0202BAF0: ; jump table
	b _0202BB4C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0202BAF4
	b _0202BB4C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0202BAF8
	b _0202BB4C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0202BAFC
	b _0202BB4C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0202BB00
	b _0202BB20
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0202BB04
	b _0202BB24
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0202BB08
	b _0202BB30
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0202BB0C
	b _0202BB28
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0202BB10
	b _0202BB4C
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0202BB14
	b _0202BB34
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0202BB18
	b _0202BB38
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0202BB1C
	b _0202BB4C
	arm_func_end caseD_b
_0202BB20:
	b _0202BB44
_0202BB24:
	b _0202BB20
_0202BB28:
	mov r1, #1
	b _0202BB48
_0202BB30:
	b _0202BB38
_0202BB34:
	b _0202BB28
_0202BB38:
	mov r1, #1
	bl FUN_0202cf00
	mov r0, r4
_0202BB44:
	mov r1, #2
_0202BB48:
	bl FUN_0202cf00
_0202BB4C:
	mov r0, #0
	str r0, [r4, #0x264]
	pop {r4, pc}

	arm_func_start FUN_0202bb58
FUN_0202bb58: ; 0x0202BB58
	add r2, r0, #0x200
	strh r1, [r2, #0x5a]
	ldrh r1, [r2, #0x5e]
	ldr ip, _0202BB6C ; =FUN_0202bbac
	bx ip
	.align 2, 0_0202BB6C: .word FUN_0202bbac
	arm_func_end FUN_0202bb58

	arm_func_start FUN_0202bb70
FUN_0202bb70: ; 0x0202BB70
	add r2, r0, #0x200
	strh r1, [r2, #0x5e]
	ldrh r1, [r2, #0x5e]
	ldr ip, _0202BB84 ; =FUN_0202bbac
	bx ip
	.align 2, 0_0202BB84: .word FUN_0202bbac
	arm_func_end FUN_0202bb70

	arm_func_start FUN_0202bb88
FUN_0202bb88: ; 0x0202BB88
	add r0, r0, #0x200
	ldrh r0, [r0, #0x5a]
	bx lr
	arm_func_end FUN_0202bb88

	arm_func_start FUN_0202bb94
FUN_0202bb94: ; 0x0202BB94
	add r0, r0, #0x200
	strh r1, [r0, #0x5c]
	bx lr
	arm_func_end FUN_0202bb94

	arm_func_start FUN_0202bba0
FUN_0202bba0: ; 0x0202BBA0
	add r0, r0, #0x200
	ldrh r0, [r0, #0x5c]
	bx lr
	arm_func_end FUN_0202bba0

	arm_func_start FUN_0202bbac
FUN_0202bbac: ; 0x0202BBAC
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	add r2, r5, #0x200
	ldrh r3, [r2, #0x5a]
	ldrh r4, [r2, #0x58]
	ldr r2, _0202BC44 ; =0x10624DD3
	mul r1, r3, r1
	mul r1, r4, r1
	asr r3, r1, #7
	smull r1, r4, r2, r3
	lsr r1, r3, #0x1f
	add r4, r1, r4, asr #6
	lsl r1, r4, #0x18
	asr r1, r1, #0x18
	mov r2, #0x3e8
	bl FUN_0202bc48
	mov r4, #0
	mov r6, #0x14
	mov r7, #0xc
	arm_func_end FUN_0202bbac
_0202BBF8:
	mla r1, r4, r7, r5
	ldrh r0, [r1, #0xc6]
	tst r0, #2
	beq _0202BC1C
	ldrsb r2, [r1, #0xc3]
	add r1, r5, #0x44
	mla r0, r2, r6, r5
	ldr r0, [r0, #0x64]
	bl FUN_020762e4
_0202BC1C:
	add r4, r4, #1
	cmp r4, #2
	blt _0202BBF8
	ldrh r0, [r5, #0xfe]
	tst r0, #2
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r5, #0x100]
	add r1, r5, #0x44
	bl FUN_0207d3e4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0202BC44: .word 0x10624DD3

	arm_func_start FUN_0202bc48
FUN_0202bc48: ; 0x0202BC48
	cmp r1, #0
	moveq r2, #0
	lsl r2, r2, #0x10
	lsr r2, r2, #0x10
	add r1, r1, r2, lsl #16
	mov r2, #4
	str r1, [r0, #0x50]
	str r2, [r0, #0x44]
	bx lr
	arm_func_end FUN_0202bc48

	arm_func_start FUN_0202bc6c
FUN_0202bc6c: ; 0x0202BC6C
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r5, r0
	mov r1, r4
	bl FUN_0202c470
	mov r0, r5
	mov r1, r4
	bl FUN_0202cff8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202bc6c

	arm_func_start FUN_0202bc90
FUN_0202bc90: ; 0x0202BC90
	ldrsh r0, [r2, #0x10]
	add r0, r0, #1
	strh r0, [r1, #4]
	ldrsh r0, [r2, #0x14]
	strh r0, [r1, #6]
	ldr r0, [r2, #0x18]
	str r0, [r1, #8]
	bx lr
	arm_func_end FUN_0202bc90

	arm_func_start FUN_0202bcb0
FUN_0202bcb0: ; 0x0202BCB0
	push {r3, r4, r5, lr}
	mov r5, #0
	mov r3, r5
	mov r2, #0x14
	arm_func_end FUN_0202bcb0
_0202BCC0:
	add lr, r0, r5, lsl #1
	ldrb ip, [lr, #0xbd]
	lsl r4, r5, #1
	cmp ip, #0
	strheq r3, [r1, r4]
	beq _0202BCEC
	ldrsb lr, [lr, #0xbc]
	mla ip, lr, r2, r0
	ldrsh ip, [ip, #0x5c]
	add ip, ip, #1
	strh ip, [r1, r4]
_0202BCEC:
	add r5, r5, #1
	cmp r5, #2
	blt _0202BCC0
	add r2, r0, #0x200
	ldrsh r2, [r2, #0x32]
	cmp r2, #0
	beq _0202BD14
	add r2, r0, #0x220
	bl FUN_0202bc90
	pop {r3, r4, r5, pc}
_0202BD14:
	add r2, r0, #0x100
	ldrsh r3, [r2, #0x8a]
	cmp r3, #0
	beq _0202BD30
	add r2, r0, #0x178
	bl FUN_0202bc90
	pop {r3, r4, r5, pc}
_0202BD30:
	ldrsh r2, [r2, #0x52]
	cmp r2, #0
	beq _0202BD48
	add r2, r0, #0x140
	bl FUN_0202bc90
	pop {r3, r4, r5, pc}
_0202BD48:
	add r2, r0, #0x1e8
	bl FUN_0202bc90
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202bd54
FUN_0202bd54: ; 0x0202BD54
	push {r3, r4, r5, r6, r7, lr}
	ldr r7, _0202BE10 ; =0x020B5B78
	mov r6, r0
	mov r5, r1
	mov r4, #0
	arm_func_end FUN_0202bd54
_0202BD68:
	lsl r0, r4, #1
	ldrsh r1, [r5, r0]
	cmp r1, #0
	ble _0202BDA4
	ldr r0, [r7, #4]
	sub r1, r1, #1
	bl FUN_020860e8
	cmp r0, #0
	beq _0202BDA4
	lsl r0, r4, #1
	ldrsh r2, [r5, r0]
	mov r0, r6
	mov r1, r4
	sub r2, r2, #1
	bl FUN_0202cd48
_0202BDA4:
	add r4, r4, #1
	cmp r4, #2
	blt _0202BD68
	ldrsh r2, [r5, #4]
	ldr r1, _0202BE14 ; =0x0208FB28
	add r0, r6, #0x1e8
	bl FUN_02015184
	ldrsh r1, [r5, #4]
	ldr r0, _0202BE10 ; =0x020B5B78
	ldr r0, [r0, #4]
	sub r1, r1, #1
	bl FUN_020860e8
	cmp r0, #0
	ldrshne r1, [r5, #4]
	addne r0, r6, #0x100
	addeq r0, r6, #0x100
	subne r1, r1, #1
	mvneq r1, #0
	strh r1, [r0, #0xf8]
	add r0, r6, #0x100
	mov r1, #1
	strh r1, [r0, #0xfa]
	ldrsh r1, [r5, #6]
	strh r1, [r0, #0xfc]
	ldr r0, [r5, #8]
	str r0, [r6, #0x200]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0202BE10: .word 0x020B5B78
_0202BE14: .word 0x0208FB28

	arm_func_start FUN_0202be18
FUN_0202be18: ; 0x0202BE18
	push {r3, r4, r5, lr}
	mov r5, r1
	mov r4, #0x1c
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl MemWrite
	sub r0, r4, #0x1d
	strh r0, [r5, #0x10]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202be18

	arm_func_start FUN_0202be40
FUN_0202be40: ; 0x0202BE40
	push {r4, r5, r6, lr}
	sub sp, sp, #0x80
	mov r6, r1
	mov r5, r2
	mov r0, r6
	mov r1, r5
	bl _strcpy
	ldrsh r0, [r6, #0x12]
	cmp r0, #1
	addne sp, sp, #0x80
	popne {r4, r5, r6, pc}
	add r4, sp, #0
	ldr r1, _0202BE9C ; =0x0208FB30
	mov r0, r4
	mov r2, r5
	bl FUN_02015184
	ldr r0, _0202BEA0 ; =0x020B5B78
	mov r1, r4
	ldr r0, [r0, #4]
	bl FUN_02086640
	strh r0, [r6, #0x10]
	add sp, sp, #0x80
	pop {r4, r5, r6, pc}
	.align 2, 0_0202BE9C: .word 0x0208FB30
_0202BEA0: .word 0x020B5B78
	arm_func_end FUN_0202be40

	arm_func_start FUN_0202bea4
FUN_0202bea4: ; 0x0202BEA4
	push {r3, lr}
	ldr ip, _0202BEBC ; =0x0208FA48
	mov r3, #0
	ldr r2, [ip, r2, lsl #2]
	bl FUN_0202bec0
	pop {r3, pc}
	.align 2, 0_0202BEBC: .word 0x0208FA48
	arm_func_end FUN_0202bea4

	arm_func_start FUN_0202bec0
FUN_0202bec0: ; 0x0202BEC0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r2
	mov sb, r0
	mov r8, r1
	mov r0, r7
	mov r1, #0x2e
	mov r6, r3
	mov r4, #1
	bl FUN_02024160
	movs r5, r0
	beq _0202BF14
	ldr r1, _0202BFB0 ; =0x0208FB38
	bl _strcmp
	cmp r0, #0
	beq _0202BF10
	ldr r1, _0202BFB4 ; =0x0208FB40
	mov r0, r5
	bl _strcmp
	cmp r0, #0
	bne _0202BF14
	arm_func_end FUN_0202bec0
_0202BF10:
	mov r4, #2
_0202BF14:
	mov r0, #0x1c
	mul r5, r8, r0
	add r0, sb, r5
	add r3, r0, #0x100
	add r1, sb, #0x108
	mov r0, sb
	mov r2, r7
	add r1, r1, r5
	strh r4, [r3, #0x1a]
	bl FUN_0202be40
	cmp r4, #1
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, sb, r5
	add r0, r0, #0x100
	ldrsh r1, [r0, #0x52]
	cmp r1, #1
	beq _0202BF6C
	ldrsh r2, [r0, #0x18]
	mov r0, sb
	mov r1, r8
	bl FUN_0202d020
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202BF6C:
	mov r0, #0xc
	mla r0, r8, r0, sb
	add r4, sb, #0x118
	ldrsh r1, [r0, #0xc0]
	ldrsh r0, [r4, r5]
	cmp r1, r0
	cmpne r6, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, sb
	mov r1, r8
	mov r2, r6
	bl FUN_0202c44c
	ldrsh r2, [r4, r5]
	mov r0, sb
	mov r1, r8
	bl FUN_0202d020
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0202BFB0: .word 0x0208FB38
_0202BFB4: .word 0x0208FB40

	arm_func_start FUN_0202bfb8
FUN_0202bfb8: ; 0x0202BFB8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r2
	mov sb, r0
	mov r8, r1
	mov r0, r7
	mov r1, #0x2e
	mov r6, r3
	mov r4, #1
	bl FUN_02024160
	movs r5, r0
	beq _0202C00C
	ldr r1, _0202C0A8 ; =0x0208FB48
	bl _strcmp
	cmp r0, #0
	beq _0202C008
	ldr r1, _0202C0AC ; =0x0208FB50
	mov r0, r5
	bl _strcmp
	cmp r0, #0
	bne _0202C00C
	arm_func_end FUN_0202bfb8
_0202C008:
	mov r4, #2
_0202C00C:
	mov r0, #0x1c
	mul r5, r8, r0
	add r0, sb, r5
	add r3, r0, #0x100
	add r1, sb, #0x1e8
	mov r0, sb
	mov r2, r7
	add r1, r1, r5
	strh r4, [r3, #0xfa]
	bl FUN_0202be40
	cmp r4, #1
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, sb, r5
	add r0, r0, #0x100
	ldrsh r1, [r0, #0x52]
	cmp r1, #1
	beq _0202C064
	ldrsh r2, [r0, #0xf8]
	mov r0, sb
	mov r1, r8
	bl FUN_0202d020
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202C064:
	mov r0, #0xc
	mla r0, r8, r0, sb
	add r4, sb, #0x1f8
	ldrsh r1, [r0, #0xc0]
	ldrsh r0, [r4, r5]
	cmp r1, r0
	cmpne r6, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, sb
	mov r1, r8
	mov r2, r6
	bl FUN_0202c44c
	ldrsh r2, [r4, r5]
	mov r0, sb
	mov r1, r8
	bl FUN_0202d020
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0202C0A8: .word 0x0208FB48
_0202C0AC: .word 0x0208FB50

	arm_func_start FUN_0202c0b0
FUN_0202c0b0: ; 0x0202C0B0
	push {r3, r4, r5, lr}
	cmp r3, #0
	bge _0202C104
	mov ip, #0x1c
	mul r5, r1, ip
	add lr, r0, r5
	add ip, lr, #0x100
	ldrsh r4, [ip, #0x8a]
	cmp r4, #0
	beq _0202C104
	add r3, lr, #0x200
	mov r4, #1
	add r0, r0, #0x220
	ldr r1, [sp, #0x10]
	strh r4, [r3, #0x32]
	str r1, [lr, #0x238]
	ldr r1, _0202C17C ; =0x0208FB58
	add r0, r0, r5
	strh r2, [r3, #0x30]
	bl FUN_02015184
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202c0b0
_0202C104:
	mov ip, #0x1c
	mul ip, r1, ip
	add r4, r0, ip
	add r1, r4, #0x100
	ldrsh r1, [r1, #0x50]
	cmp r2, r1
	bne _0202C130
	add r1, r0, #0x200
	ldrh r1, [r1, #0x5e]
	bl FUN_0202bbac
	pop {r3, r4, r5, pc}
_0202C130:
	cmp r3, #0
	bge _0202C148
	ldr r1, [r4, #0x158]
	mov r3, #0
	cmp r1, #0
	movgt r3, r1
_0202C148:
	add r4, r0, ip
	str r3, [r4, #0x158]
	add r0, r0, #0x178
	add r3, r4, #0x100
	mov lr, #1
	ldr r1, [sp, #0x10]
	strh lr, [r3, #0x8a]
	str r1, [r4, #0x190]
	ldr r1, _0202C180 ; =0x0208FB60
	add r0, r0, ip
	strh r2, [r3, #0x88]
	bl FUN_02015184
	pop {r3, r4, r5, pc}
	.align 2, 0_0202C17C: .word 0x0208FB58
_0202C180: .word 0x0208FB60

	arm_func_start FUN_0202c184
FUN_0202c184: ; 0x0202C184
	push {r3, lr}
	ldr lr, [sp, #8]
	ldr ip, _0202C1A0 ; =0x0208FA48
	str lr, [sp]
	ldr r2, [ip, r2, lsl #2]
	bl FUN_0202c1a4
	pop {r3, pc}
	.align 2, 0_0202C1A0: .word 0x0208FA48
	arm_func_end FUN_0202c184

	arm_func_start FUN_0202c1a4
FUN_0202c1a4: ; 0x0202C1A4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, r2
	ldrsb r2, [r5]
	mov r7, r0
	mov r6, r1
	mov r4, r3
	cmp r2, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r5
	mov r1, #0x2e
	mov r8, #1
	bl FUN_02024160
	movs sb, r0
	beq _0202C204
	ldr r1, _0202C308 ; =0x0208FB68
	bl _strcmp
	cmp r0, #0
	beq _0202C200
	ldr r1, _0202C30C ; =0x0208FB70
	mov r0, sb
	bl _strcmp
	cmp r0, #0
	bne _0202C204
	arm_func_end FUN_0202c1a4
_0202C200:
	mov r8, #2
_0202C204:
	cmp r8, #1
	bne _0202C23C
	ldr r0, _0202C310 ; =0x020B5B78
	mov r1, r5
	ldr r0, [r0, #4]
	bl FUN_02086640
	ldr r5, [sp, #0x20]
	mov r2, r0
	mov r0, r7
	mov r1, r6
	mov r3, r4
	str r5, [sp]
	bl FUN_0202c0b0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202C23C:
	cmp r4, #0
	bge _0202C288
	mov r0, #0x1c
	mul r1, r6, r0
	add r3, r7, r1
	add r0, r3, #0x100
	ldrsh r0, [r0, #0x8a]
	cmp r0, #0
	beq _0202C288
	add r0, r3, #0x200
	add r4, r7, #0x220
	strh r8, [r0, #0x32]
	ldr r6, [sp, #0x20]
	mov r0, r7
	mov r2, r5
	add r1, r4, r1
	str r6, [r3, #0x238]
	bl FUN_0202be40
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202C288:
	mov r0, #0x1c
	mul sb, r6, r0
	add r0, r7, #0x140
	mov r1, r5
	add r0, r0, sb
	bl _strcmp
	cmp r0, #0
	bne _0202C2BC
	add r0, r7, #0x200
	ldrh r1, [r0, #0x5e]
	mov r0, r7
	bl FUN_0202bbac
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202C2BC:
	cmp r4, #0
	bge _0202C2D8
	add r0, r7, sb
	ldr r0, [r0, #0x158]
	mov r4, #0
	cmp r0, #0
	movgt r4, r0
_0202C2D8:
	add r6, r7, sb
	add r1, r7, #0x178
	str r4, [r6, #0x158]
	add r0, r6, #0x100
	ldr r3, [sp, #0x20]
	strh r8, [r0, #0x8a]
	mov r0, r7
	mov r2, r5
	add r1, r1, sb
	str r3, [r6, #0x190]
	bl FUN_0202be40
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0202C308: .word 0x0208FB68
_0202C30C: .word 0x0208FB70
_0202C310: .word 0x020B5B78

	arm_func_start FUN_0202c314
FUN_0202c314: ; 0x0202C314
	push {r3, r4, r5, lr}
	mov ip, #0x1c
	mul r4, r1, ip
	add ip, r0, r4
	add ip, ip, #0x100
	ldrsh lr, [ip, #0x1a]
	mov r5, r2
	cmp lr, #1
	bne _0202C34C
	str r3, [sp]
	ldrsh r2, [ip, #0x18]
	mov r3, r5
	bl FUN_0202c0b0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202c314
_0202C34C:
	add r2, r0, #0x108
	str r3, [sp]
	mov r3, r5
	add r2, r2, r4
	bl FUN_0202c1a4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202c364
FUN_0202c364: ; 0x0202C364
	push {r3, r4, r5, lr}
	mov ip, #0x1c
	mul r4, r1, ip
	add ip, r0, r4
	add ip, ip, #0x100
	ldrsh lr, [ip, #0xfa]
	mov r5, r2
	cmp lr, #1
	bne _0202C39C
	str r3, [sp]
	ldrsh r2, [ip, #0xf8]
	mov r3, r5
	bl FUN_0202c0b0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202c364
_0202C39C:
	add r2, r0, #0x1e8
	str r3, [sp]
	mov r3, r5
	add r2, r2, r4
	bl FUN_0202c1a4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202c3b4
FUN_0202c3b4: ; 0x0202C3B4
	ldr ip, _0202C3C4 ; =FUN_0202c314
	mov r3, r2
	mov r2, #0
	bx ip
	.align 2, 0_0202C3C4: .word FUN_0202c314
	arm_func_end FUN_0202c3b4

	arm_func_start FUN_0202c3c8
FUN_0202c3c8: ; 0x0202C3C8
	push {r3, lr}
	ldr ip, _0202C3DC ; =0x0208FA48
	ldr r2, [ip, r2, lsl #2]
	bl FUN_0202c3e0
	pop {r3, pc}
	.align 2, 0_0202C3DC: .word 0x0208FA48
	arm_func_end FUN_0202c3c8

	arm_func_start FUN_0202c3e0
FUN_0202c3e0: ; 0x0202C3E0
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x44
	mov r5, r2
	mov r7, r0
	mov r6, r1
	mov r0, r5
	mov r1, #0x2e
	mov r4, r3
	bl FUN_02024160
	cmp r0, #0
	add r0, sp, #4
	bne _0202C420
	ldr r1, _0202C448 ; =0x0208FB78
	mov r2, r5
	bl FUN_02015184
	b _0202C428
	arm_func_end FUN_0202c3e0
_0202C420:
	mov r1, r5
	bl _strcpy
_0202C428:
	add r2, sp, #4
	mov r0, r7
	mov r1, r6
	mov r3, #0
	str r4, [sp]
	bl FUN_0202c1a4
	add sp, sp, #0x44
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0202C448: .word 0x0208FB78

	arm_func_start FUN_0202c44c
FUN_0202c44c: ; 0x0202C44C
	mov r3, #0x1c
	mla ip, r1, r3, r0
	str r2, [ip, #0x158]
	sub r1, r3, #0x1d
	add r0, ip, #0x100
	strh r1, [r0, #0x8a]
	mov r0, #0
	str r0, [ip, #0x190]
	bx lr
	arm_func_end FUN_0202c44c

	arm_func_start FUN_0202c470
FUN_0202c470: ; 0x0202C470
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, #0
	arm_func_end FUN_0202c470
_0202C480:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_0202c44c
	add r4, r4, #1
	cmp r4, #2
	blt _0202C480
	pop {r4, r5, r6, pc}

	arm_func_start thunk_FUN_0202c470
thunk_FUN_0202c470: ; 0x0202C4A0
	ldr ip, _0202C4A8 ; =FUN_0202c470
	bx ip
	.align 2, 0_0202C4A8: .word FUN_0202c470
	arm_func_end thunk_FUN_0202c470

	arm_func_start FUN_0202c4ac
FUN_0202c4ac: ; 0x0202C4AC
	push {r3, r4, r5, r6, r7, lr}
	mov r3, #0x1c
	mul r3, r1, r3
	add r1, r0, #0x1b0
	add r4, r0, r3
	add ip, r1, r3
	add r7, r4, #0x178
	mov r6, #8
	arm_func_end FUN_0202c4ac
_0202C4CC:
	ldrb r5, [ip]
	ldrb r4, [ip, #1]
	add ip, ip, #2
	subs r6, r6, #1
	strb r4, [r7, #1]
	strb r5, [r7], #2
	bne _0202C4CC
	add r7, r0, r3
	add ip, r7, #0x100
	ldrsh r6, [ip, #0xc0]
	add r5, r0, #0x18c
	add r4, r0, #0x190
	strh r6, [ip, #0x88]
	ldrsh r6, [ip, #0xc2]
	mov lr, #1
	add r1, r1, r3
	strh r6, [ip, #0x8a]
	ldrsh ip, [ip, #0xc4]
	strh ip, [r5, r3]
	ldr ip, [r7, #0x1c8]
	str ip, [r4, r3]
	strh lr, [r5, r3]
	str r2, [r4, r3]
	bl FUN_0202be18
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0202c530
FUN_0202c530: ; 0x0202C530
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, #0
	arm_func_end FUN_0202c530
_0202C540:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_0202c4ac
	add r4, r4, #1
	cmp r4, #2
	blt _0202C540
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0202c560
FUN_0202c560: ; 0x0202C560
	push {r3, lr}
	mov r2, #0x1c
	mla r2, r1, r2, r0
	add r2, r2, #0x100
	ldrsh r2, [r2, #0x52]
	cmp r2, #1
	beq _0202C588
	cmp r2, #2
	beq _0202C590
	b _0202C59C
	arm_func_end FUN_0202c560
_0202C588:
	bl FUN_0202d184
	pop {r3, pc}
_0202C590:
	mov r1, #0
	bl FUN_0202d6c4
	pop {r3, pc}
_0202C59C:
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_0202c5a4
FUN_0202c5a4: ; 0x0202C5A4
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, #0x1c
	mul r2, r4, r1
	mov r5, r0
	add r0, r5, #0x140
	add r1, r5, #0x108
	add r0, r0, r2
	add r1, r1, r2
	bl _strcmp
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_0202c560
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202c5a4

	arm_func_start FUN_0202c5e8
FUN_0202c5e8: ; 0x0202C5E8
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	mov r6, #0
	arm_func_end FUN_0202c5e8
_0202C5F4:
	mov r0, #0x1c
	mul r1, r6, r0
	add r5, r4, r1
	add r0, r5, #0x100
	ldrsh r2, [r0, #0x8a]
	cmp r2, #0
	beq _0202C8D4
	ldrsh r0, [r0, #0x50]
	cmp r0, #0
	blt _0202C6A4
	mov r0, #0xc
	mla r0, r6, r0, r4
	ldrsb r2, [r0, #0xc3]
	mov r0, #0x14
	mla r0, r2, r0, r4
	ldrb r0, [r0, #0x5e]
	cmp r0, #1
	bne _0202C648
	mov r0, #1
	bl FUN_02001eb0
	b _0202C8D4
_0202C648:
	add ip, r5, #0x140
	add r7, r5, #0x1b0
	mov r3, #8
_0202C654:
	ldrb r2, [ip]
	ldrb r0, [ip, #1]
	add ip, ip, #2
	subs r3, r3, #1
	strb r0, [r7, #1]
	strb r2, [r7], #2
	mov r2, #0
	bne _0202C654
	add r0, r5, #0x100
	ldrsh r7, [r0, #0x50]
	mvn r3, #0
	strh r7, [r0, #0xc0]
	ldrsh r7, [r0, #0x52]
	strh r7, [r0, #0xc2]
	ldrsh r7, [r0, #0x54]
	strh r7, [r0, #0xc4]
	ldr r7, [r5, #0x158]
	str r7, [r5, #0x1c8]
	strh r3, [r0, #0x50]
	strb r2, [r5, #0x140]
_0202C6A4:
	add r0, r5, #0x100
	ldrsh r0, [r0, #0x52]
	cmp r0, #1
	bne _0202C6F0
	mov r2, #0xc
	mla r2, r6, r2, r4
	ldrh r2, [r2, #0xc6]
	tst r2, #2
	beq _0202C6E4
	ldr r2, [r5, #0x158]
	cmp r2, #0
	blt _0202C8D4
	mov r0, r4
	mov r1, r6
	bl FUN_0202d1ec
	b _0202C8D4
_0202C6E4:
	tst r2, #4
	bne _0202C8D4
	b _0202C728
_0202C6F0:
	cmp r0, #2
	bne _0202C728
	ldrh r2, [r4, #0xfe]
	tst r2, #2
	beq _0202C720
	ldr r2, [r5, #0x158]
	cmp r2, #0
	blt _0202C8D4
	mov r0, r4
	mov r1, #0
	bl FUN_0202d774
	b _0202C8D4
_0202C720:
	tst r2, #4
	bne _0202C8D4
_0202C728:
	add r2, r5, #0x100
	ldrsh r3, [r2, #0x8a]
	cmn r3, #1
	beq _0202C7CC
	cmp r3, #1
	beq _0202C74C
	cmp r3, #2
	beq _0202C794
	b _0202C7E0
_0202C74C:
	mov r0, #0x1c
	mla r7, r6, r0, r4
	add r0, r7, #0x100
	ldrsh r2, [r0, #0x88]
	mov r0, r4
	mov r1, r6
	bl FUN_0202d020
	add r0, r7, #0x100
	ldrsh r0, [r0, #0x8c]
	ldr r2, [r5, #0x190]
	mov r1, r6
	cmp r0, #0
	mov r0, r4
	beq _0202C78C
	bl FUN_0202d148
	b _0202C7F0
_0202C78C:
	bl FUN_0202d10c
	b _0202C7F0
_0202C794:
	ldrsh r0, [r2, #0x8c]
	cmp r0, #0
	beq _0202C7B4
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_0202d5d4
	b _0202C7F0
_0202C7B4:
	add r2, r4, #0x178
	mov r0, r4
	add r2, r2, r1
	mov r1, #0
	bl FUN_0202d594
	b _0202C7F0
_0202C7CC:
	mov r1, #0x1c
	mla r1, r6, r1, r4
	add r1, r1, #0x100
	strh r0, [r1, #0x8a]
	b _0202C7F0
_0202C7E0:
	add r2, r4, #0x178
	mov r0, r4
	add r1, r2, r1
	bl FUN_0202be18
_0202C7F0:
	mov r0, #0x1c
	mul r7, r6, r0
	add r5, r4, r7
	add ip, r5, #0x178
	add r3, r5, #0x140
	mov r2, #8
_0202C808:
	ldrb r1, [ip]
	ldrb r0, [ip, #1]
	add ip, ip, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _0202C808
	add r2, r5, #0x100
	ldrsh r3, [r2, #0x88]
	add r1, r4, #0x178
	mov r0, r4
	strh r3, [r2, #0x50]
	ldrsh r3, [r2, #0x8a]
	add r1, r1, r7
	strh r3, [r2, #0x52]
	ldrsh r3, [r2, #0x8c]
	strh r3, [r2, #0x54]
	ldr r2, [r5, #0x190]
	str r2, [r5, #0x158]
	bl FUN_0202be18
	add r0, r5, #0x200
	ldrsh r0, [r0, #0x32]
	cmp r0, #0
	beq _0202C8D4
	add r2, r4, r7
	mvn r0, #0
	str r0, [r2, #0x158]
	add ip, r2, #0x220
	add r5, r2, #0x178
	mov r3, #8
_0202C880:
	ldrb r1, [ip]
	ldrb r0, [ip, #1]
	add ip, ip, #2
	subs r3, r3, #1
	strb r0, [r5, #1]
	strb r1, [r5], #2
	bne _0202C880
	add r3, r2, #0x200
	ldrsh r0, [r3, #0x30]
	add r5, r2, #0x100
	add r1, r4, #0x220
	strh r0, [r5, #0x88]
	ldrsh ip, [r3, #0x32]
	mov r0, r4
	add r1, r1, r7
	strh ip, [r5, #0x8a]
	ldrsh r3, [r3, #0x34]
	strh r3, [r5, #0x8c]
	ldr r3, [r2, #0x238]
	str r3, [r2, #0x190]
	bl FUN_0202be18
_0202C8D4:
	add r6, r6, #1
	cmp r6, #2
	blt _0202C5F4
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0202c8e4
FUN_0202c8e4: ; 0x0202C8E4
	push {r4, lr}
	mov r2, #0x14
	mov r4, #0
	mov r3, r2
	arm_func_end FUN_0202c8e4
_0202C8F4:
	cmp r1, #4
	cmpne r1, #5
	beq _0202C92C
	mla lr, r4, r3, r0
	ldrb ip, [lr, #0x5f]
	cmp ip, #4
	cmpne ip, #5
	beq _0202C944
	ldrb ip, [lr, #0x5e]
	cmp ip, #0
	bne _0202C944
	lsl r0, r4, #0x18
	asr r0, r0, #0x18
	pop {r4, pc}
_0202C92C:
	mla ip, r4, r2, r0
	ldrb ip, [ip, #0x5f]
	cmp r1, ip
	lsleq r0, r4, #0x18
	asreq r0, r0, #0x18
	popeq {r4, pc}
_0202C944:
	add r4, r4, #1
	cmp r4, #5
	blt _0202C8F4
	mvn r0, #0
	pop {r4, pc}

	arm_func_start FUN_0202c958
FUN_0202c958: ; 0x0202C958
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov sl, r0
	mov sb, r1
	mov r8, r2
	bl FUN_0202c8e4
	movs r6, r0
	addmi sp, sp, #4
	popmi {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, #0x14
	mul r7, r6, r0
	add r5, sl, #0x5e
	ldrb r0, [r5, r7]
	cmp r0, #0
	beq _0202C9B4
	cmp r0, #1
	beq _0202C9A4
	cmp r0, #2
	bne _0202C9F4
	arm_func_end FUN_0202c958
_0202C9A4:
	add r0, sl, r7
	ldrsh r0, [r0, #0x5c]
	cmp r8, r0
	beq _0202C9F4
_0202C9B4:
	add r0, sl, r7
	add r1, sl, #0x58
	mov r4, #0
	strh r8, [r0, #0x5c]
	mov r0, r8
	mov r2, r4
	mov r3, sb
	add r1, r1, r7
	str r4, [sp]
	bl FUN_0202b330
	cmp r0, #0
	addle sp, sp, #4
	suble r0, r4, #1
	pople {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, #2
	strb r0, [r5, r7]
_0202C9F4:
	add r2, sl, r7
	mov r0, sl
	mov r1, r6
	strb sb, [r2, #0x5f]
	bl FUN_0202cc34
	mov r0, r6
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0202ca14
FUN_0202ca14: ; 0x0202CA14
	push {r3, r4, r5, r6, r7, lr}
	mov r2, #0x14
	mul r6, r1, r2
	mov r7, r0
	add r5, r7, #0x5e
	ldrb r0, [r5, r6]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r0, #3
	bne _0202CAD4
	add r1, r7, r6
	ldrb r0, [r1, #0x5f]
	cmp r0, #5
	arm_func_end FUN_0202ca14

	arm_func_start switchD
switchD: ; 0x0202CA48
	addls pc, pc, r0, lsl #2
	b _0202CAD4
	arm_func_end switchD
_0202CA50: ; jump table
	b _0202CAD4 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0202CA54
	b _0202CA68
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0202CA58
	b _0202CA7C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0202CA5C
	b _0202CAB8
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0202CA60
	b _0202CA68
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0202CA64
	b _0202CAB8
	arm_func_end caseD_5
_0202CA68:
	ldr r0, [r1, #0x64]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_02075d04
	b _0202CAD4
_0202CA7C:
	add r4, r7, #0x64
	ldr r0, [r4, r6]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_02077a24
	add r0, r7, r6
	ldr r0, [r0, #0x68]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_02075d04
	ldr r0, [r4, r6]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_02077188
	b _0202CAD4
_0202CAB8:
	ldr r0, [r1, #0x68]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bl FUN_02075d04
	add r0, r7, r6
	ldr r0, [r0, #0x64]
	bl FUN_020760fc
_0202CAD4:
	add r1, r7, #0x5f
	ldrb r0, [r1, r6]
	cmp r0, #4
	cmpne r0, #5
	beq _0202CB48
	ldrb r0, [r5, r6]
	cmp r0, #1
	bne _0202CB14
	ldr r0, [r7]
	add r1, r7, r6
	ldr r0, [r0]
	ldr r1, [r1, #0x58]
	cmp r0, #0
	beq _0202CB14
	mov r2, #0
	bl FUN_0202f678
_0202CB14:
	add r5, r7, #0x58
	ldr r0, [r7]
	ldr r1, [r5, r6]
	bl FUN_0202e1c0
	mov r4, #0x14
	mov r2, r4
	add r0, r5, r6
	mov r1, #0
	bl MemWrite
	sub r1, r4, #0x15
	add r0, r7, r6
	strh r1, [r0, #0x5c]
	pop {r3, r4, r5, r6, r7, pc}
_0202CB48:
	mov r0, #2
	strb r0, [r5, r6]
	ldrb r0, [r1, r6]
	cmp r0, #4
	moveq r0, #0
	streq r0, [r7, #0x6c]
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0202cb64
FUN_0202cb64: ; 0x0202CB64
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov sb, r0
	mov r8, r1
	mov r7, r2
	bl FUN_0202c8e4
	movs r5, r0
	addmi sp, sp, #4
	popmi {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, #0x14
	mul r6, r5, r0
	add r4, sb, #0x5e
	ldrb r0, [r4, r6]
	cmp r0, #0
	beq _0202CBDC
	cmp r0, #1
	beq _0202CBB0
	cmp r0, #2
	bne _0202CC20
	arm_func_end FUN_0202cb64
_0202CBB0:
	add r1, sb, r6
	ldrsh r0, [r1, #0x5c]
	cmp r7, r0
	beq _0202CC20
	ldr r0, [sb]
	ldr r1, [r1, #0x58]
	ldr r0, [r0]
	cmp r0, #0
	beq _0202CBDC
	mov r2, #0
	bl FUN_0202f678
_0202CBDC:
	add lr, sb, r6
	add r1, sb, #0x58
	mov sl, #1
	add ip, sb, #0x60
	mov r0, r7
	strh r7, [lr, #0x5c]
	add r7, ip, r6
	mov r2, sl
	mov r3, r8
	add r1, r1, r6
	str r7, [sp]
	bl FUN_0202b330
	cmp r0, #0
	addle sp, sp, #4
	suble r0, sl, #2
	pople {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	strb sl, [r4, r6]
_0202CC20:
	add r1, sb, r6
	mov r0, r5
	strb r8, [r1, #0x5f]
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0202cc34
FUN_0202cc34: ; 0x0202CC34
	push {r4, r5, r6, r7, r8, lr}
	mov r2, #0x14
	mul r6, r1, r2
	mov r7, r0
	add r4, r7, #0x5e
	ldrb r0, [r4, r6]
	cmp r0, #1
	beq _0202CC68
	cmp r0, #2
	beq _0202CC9C
	cmp r0, #3
	beq _0202CC8C
	b _0202CC94
	arm_func_end FUN_0202cc34
_0202CC68:
	add r0, r7, r6
	ldrsb r0, [r0, #0x60]
	bl FUN_02086480
	cmp r0, #0
	movne r0, #0
	popne {r4, r5, r6, r7, r8, pc}
	mov r0, #2
	strb r0, [r4, r6]
	b _0202CC9C
_0202CC8C:
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
_0202CC94:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_0202CC9C:
	add r2, r7, r6
	ldrb r0, [r2, #0x5f]
	cmp r0, #5

	arm_func_start switchD
switchD: ; 0x0202CCA8
	addls pc, pc, r0, lsl #2
	b _0202CD38
	arm_func_end switchD
_0202CCB0: ; jump table
	b _0202CD38 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0202CCB4
	b _0202CCC8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0202CCB8
	b _0202CCE4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0202CCBC
	b _0202CCFC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0202CCC0
	b _0202CCC8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0202CCC4
	b _0202CCFC
	arm_func_end caseD_5
_0202CCC8:
	mov r1, #0
	ldr r0, [r2, #0x58]
	mov r2, r1
	bl FUN_020758c4
	add r1, r7, r6
	str r0, [r1, #0x64]
	b _0202CD38
_0202CCE4:
	add r8, r7, #0x58
	ldr r5, [r8, r6]
	ldr r0, [r5]
	add r0, r5, r0
	bl FUN_02076fc8
	b _0202CD10
_0202CCFC:
	add r8, r7, #0x58
	ldr r5, [r8, r6]
	ldr r0, [r5]
	add r0, r5, r0
	bl FUN_02075fe8
_0202CD10:
	add r1, r7, r6
	str r0, [r1, #0x64]
	ldr r3, [r8, r6]
	ldr r0, [r5, #8]
	mov r1, #0
	mov r2, r1
	add r0, r3, r0
	bl FUN_020758c4
	add r1, r7, r6
	str r0, [r1, #0x68]
_0202CD38:
	mov r0, #3
	strb r0, [r4, r6]
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0202cd48
FUN_0202cd48: ; 0x0202CD48
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r6, r0
	cmp r5, #2
	ldr r0, _0202CDD0 ; =0x020B5B78
	movge r5, #1
	mov r4, r2
	str r5, [r0]
	add r2, r6, r5, lsl #1
	ldrsb r1, [r2, #0xbc]
	mov r0, #0x14
	mla r0, r1, r0, r6
	ldrsh r0, [r0, #0x5c]
	cmp r4, r0
	beq _0202CDC0
	ldrb r0, [r2, #0xbd]
	cmp r0, #0
	beq _0202CD98
	mov r0, r6
	bl FUN_0202ca14
	arm_func_end FUN_0202cd48
_0202CD98:
	mov r0, r6
	mov r2, r4
	mov r1, #2
	bl FUN_0202c958
	add r1, r6, r5, lsl #1
	strb r0, [r1, #0xbc]
	ldrsb r0, [r1, #0xbc]
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
_0202CDC0:
	add r1, r6, r5, lsl #1
	mov r0, #1
	strb r0, [r1, #0xbd]
	pop {r4, r5, r6, pc}
	.align 2, 0_0202CDD0: .word 0x020B5B78

	arm_func_start FUN_0202cdd4
FUN_0202cdd4: ; 0x0202CDD4
	push {r4, r5, r6, lr}
	sub sp, sp, #0x80
	mov r5, r1
	add r4, sp, #0
	mov r6, r0
	ldr r1, _0202CE1C ; =0x0208FB80
	mov r0, r4
	bl FUN_02015184
	ldr r0, _0202CE20 ; =0x020B5B78
	mov r1, r4
	ldr r0, [r0, #4]
	bl FUN_02086640
	mov r2, r0
	mov r0, r6
	mov r1, r5
	bl FUN_0202cd48
	add sp, sp, #0x80
	pop {r4, r5, r6, pc}
	.align 2, 0_0202CE1C: .word 0x0208FB80
_0202CE20: .word 0x020B5B78
	arm_func_end FUN_0202cdd4

	arm_func_start FUN_0202ce24
FUN_0202ce24: ; 0x0202CE24
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r6, r0
	cmp r5, #2
	ldr r0, _0202CEAC ; =0x020B5B78
	movge r5, #1
	mov r4, r2
	str r5, [r0]
	add r2, r6, r5, lsl #1
	ldrsb r1, [r2, #0xbc]
	mov r0, #0x14
	mla r0, r1, r0, r6
	ldrsh r0, [r0, #0x5c]
	cmp r4, r0
	beq _0202CE9C
	ldrb r0, [r2, #0xbd]
	cmp r0, #0
	beq _0202CE74
	mov r0, r6
	bl FUN_0202ca14
	arm_func_end FUN_0202ce24
_0202CE74:
	mov r0, r6
	mov r2, r4
	mov r1, #2
	bl FUN_0202cb64
	add r1, r6, r5, lsl #1
	strb r0, [r1, #0xbc]
	ldrsb r0, [r1, #0xbc]
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
_0202CE9C:
	add r1, r6, r5, lsl #1
	mov r0, #1
	strb r0, [r1, #0xbd]
	pop {r4, r5, r6, pc}
	.align 2, 0_0202CEAC: .word 0x020B5B78

	arm_func_start FUN_0202ceb0
FUN_0202ceb0: ; 0x0202CEB0
	push {r4, r5, r6, lr}
	sub sp, sp, #0x80
	mov r5, r1
	add r4, sp, #0
	mov r6, r0
	ldr r1, _0202CEF8 ; =0x0208FB88
	mov r0, r4
	bl FUN_02015184
	ldr r0, _0202CEFC ; =0x020B5B78
	mov r1, r4
	ldr r0, [r0, #4]
	bl FUN_02086640
	mov r2, r0
	mov r0, r6
	mov r1, r5
	bl FUN_0202ce24
	add sp, sp, #0x80
	pop {r4, r5, r6, pc}
	.align 2, 0_0202CEF8: .word 0x0208FB88
_0202CEFC: .word 0x020B5B78
	arm_func_end FUN_0202ceb0

	arm_func_start FUN_0202cf00
FUN_0202cf00: ; 0x0202CF00
	push {r3, r4, r5, lr}
	mov r4, r1
	cmp r4, #2
	mov r5, r0
	movge r4, #1
	add r1, r5, r4, lsl #1
	ldrb r0, [r1, #0xbd]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldrsb r1, [r1, #0xbc]
	mov r0, r5
	bl FUN_0202ca14
	add r0, r5, r4, lsl #1
	mov r1, #0
	strb r1, [r0, #0xbd]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202cf00

	arm_func_start FUN_0202cf40
FUN_0202cf40: ; 0x0202CF40
	asr r2, r1, #0xe
	cmp r2, #2
	movge r2, #1
	add r2, r0, r2, lsl #1
	ldrsb r3, [r2, #0xbc]
	mov r2, #0x14
	lsl r1, r1, #0x12
	mla r0, r3, r2, r0
	ldr r0, [r0, #0x64]
	add r0, r0, r1, lsr #2
	bx lr
	arm_func_end FUN_0202cf40

	arm_func_start FUN_0202cf6c
FUN_0202cf6c: ; 0x0202CF6C
	push {r4, r5, r6, lr}
	mov r4, r0
	add r2, r4, #0x200
	ldrh ip, [r2, #0x5c]
	ldrh r3, [r2, #0x60]
	mov r5, #0
	ldrh lr, [r2, #0x58]
	mul r2, ip, r3
	mul r2, lr, r2
	asr r3, r2, #7
	ldr ip, _0202CFD4 ; =0x10624DD3
	lsr r2, r3, #0x1f
	smull r3, lr, ip, r3
	add lr, r2, lr, asr #6
	lsl r3, lr, #0x18
	mov r6, r1
	mov r2, r5
	asr r1, r3, #0x18
	bl FUN_0202bc48
	mov r0, r4
	mov r1, r6
	bl FUN_0202cf40
	mov r1, r5
	add r2, r4, #0x44
	bl FUN_020772e8
	pop {r4, r5, r6, pc}
	.align 2, 0_0202CFD4: .word 0x10624DD3
	arm_func_end FUN_0202cf6c

	arm_func_start FUN_0202cfd8
FUN_0202cfd8: ; 0x0202CFD8
	push {r4, lr}
	mov r4, r2
	bl FUN_0202cf40
	lsl r1, r4, #0x10
	lsr r2, r1, #0x10
	mov r1, #0
	bl FUN_0207787c
	pop {r4, pc}
	arm_func_end FUN_0202cfd8

	arm_func_start FUN_0202cff8
FUN_0202cff8: ; 0x0202CFF8
	lsl r0, r1, #0x10
	ldr ip, _0202D008 ; =FUN_020779b8
	lsr r0, r0, #0x10
	bx ip
	.align 2, 0_0202D008: .word FUN_020779b8
	arm_func_end FUN_0202cff8

	arm_func_start FUN_0202d00c
FUN_0202d00c: ; 0x0202D00C
	push {r3, lr}
	bl FUN_0202cf40
	mov r1, #0
	bl FUN_02077220
	pop {r3, pc}
	arm_func_end FUN_0202d00c

	arm_func_start FUN_0202d020
FUN_0202d020: ; 0x0202D020
	mov r3, #0xc
	mul ip, r1, r3
	add r3, r0, #0xc0
	ldrsh r1, [r3, ip]
	cmp r2, r1
	bxeq lr
	strh r2, [r3, ip]
	add r1, r0, #0xc4
	ldrh r0, [r1, ip]
	cmp r2, #0
	orr r0, r0, #0xc
	strh r0, [r1, ip]
	ldrhge r0, [r1, ip]
	orrge r0, r0, #0x10
	strhge r0, [r1, ip]
	bx lr
	arm_func_end FUN_0202d020

	arm_func_start FUN_0202d060
FUN_0202d060: ; 0x0202D060
	mov r2, #0xc
	mla r2, r1, r2, r0
	ldrh r0, [r2, #0xc4]
	tst r0, #0x10
	movne r0, #0
	bxne lr
	ldrh r0, [r2, #0xc6]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0202d060

	arm_func_start FUN_0202d08c
FUN_0202d08c: ; 0x0202D08C
	push {r3, r4, r5, r6, r7, lr}
	mov r2, #0xc
	mul r5, r1, r2
	mov r6, r0
	add r4, r6, #0xc6
	ldrh r0, [r4, r5]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r6, r5
	ldrsb r1, [r0, #0xc3]
	mov r0, #0x14
	mla r0, r1, r0, r6
	ldr r7, [r0, #0x64]
	mov r0, r7
	bl FUN_02076138
	cmp r0, #0
	ble _0202D0DC
	mov r0, r7
	mov r1, #0
	bl FUN_02076238
	arm_func_end FUN_0202d08c
_0202D0DC:
	add r7, r6, #0xc3
	ldrsb r1, [r7, r5]
	mov r0, r6
	bl FUN_0202ca14
	mvn r0, #0
	strb r0, [r7, r5]
	ldrh r1, [r4, r5]
	ldr r0, _0202D108 ; =0x0000FFFC
	and r0, r1, r0
	strh r0, [r4, r5]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0202D108: .word 0x0000FFFC

	arm_func_start FUN_0202d10c
FUN_0202d10c: ; 0x0202D10C
	push {r3, lr}
	mov r3, #0xc
	mul lr, r1, r3
	add ip, r0, #0xc4
	ldrh r3, [ip, lr]
	ldr r1, _0202D144 ; =0x0000FFFB
	add r0, r0, lr
	and r1, r3, r1
	strh r1, [ip, lr]
	ldrh r1, [ip, lr]
	orr r1, r1, #2
	strh r1, [ip, lr]
	str r2, [r0, #0xc8]
	pop {r3, pc}
	.align 2, 0_0202D144: .word 0x0000FFFB
	arm_func_end FUN_0202d10c

	arm_func_start FUN_0202d148
FUN_0202d148: ; 0x0202D148
	push {r3, lr}
	mov r3, #0xc
	mul lr, r1, r3
	add ip, r0, #0xc4
	ldrh r3, [ip, lr]
	ldr r1, _0202D180 ; =0x0000FFFB
	add r0, r0, lr
	and r1, r3, r1
	strh r1, [ip, lr]
	ldrh r1, [ip, lr]
	orr r1, r1, #0x82
	strh r1, [ip, lr]
	str r2, [r0, #0xc8]
	pop {r3, pc}
	.align 2, 0_0202D180: .word 0x0000FFFB
	arm_func_end FUN_0202d148

	arm_func_start FUN_0202d184
FUN_0202d184: ; 0x0202D184
	push {r3, r4, r5, lr}
	mov r2, #0xc
	mul r5, r1, r2
	add r4, r0, #0xc6
	ldrh r1, [r4, r5]
	tst r1, #4
	movne r0, #0
	popne {r3, r4, r5, pc}
	tst r1, #2
	beq _0202D1D0
	add r1, r0, r5
	ldrsb r2, [r1, #0xc3]
	mov r1, #0x14
	mla r0, r2, r1, r0
	ldr r0, [r0, #0x64]
	bl FUN_02076138
	cmp r0, #0
	movgt r0, #1
	popgt {r3, r4, r5, pc}
	arm_func_end FUN_0202d184
_0202D1D0:
	ldrh r2, [r4, r5]
	ldr r1, _0202D1E8 ; =0x0000FFFD
	mov r0, #0
	and r1, r2, r1
	strh r1, [r4, r5]
	pop {r3, r4, r5, pc}
	.align 2, 0_0202D1E8: .word 0x0000FFFD

	arm_func_start FUN_0202d1ec
FUN_0202d1ec: ; 0x0202D1EC
	push {r3, lr}
	mov r3, #0xc
	mul lr, r1, r3
	add ip, r0, #0xc4
	ldrh r3, [ip, lr]
	ldr r1, _0202D224 ; =0x0000FF7D
	add r0, r0, lr
	and r1, r3, r1
	strh r1, [ip, lr]
	ldrh r1, [ip, lr]
	orr r1, r1, #4
	strh r1, [ip, lr]
	str r2, [r0, #0xc8]
	pop {r3, pc}
	.align 2, 0_0202D224: .word 0x0000FF7D
	arm_func_end FUN_0202d1ec

	arm_func_start FUN_0202d228
FUN_0202d228: ; 0x0202D228
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov sl, r0
	add r0, sl, #0x200
	str r0, [sp, #0xc]
	ldr r0, _0202D4BC ; =0x0000FFEF
	mov r7, #0
	add r4, r0, #0xc
	add r5, r0, #0xe
	add r0, r0, #0xf
	str r0, [sp, #4]
	ldr r0, _0202D4BC ; =0x0000FFEF
	mov fp, r4
	add r0, r0, #8
	str r0, [sp]
	ldr r0, _0202D4BC ; =0x0000FFEF
	add r0, r0, #0xf
	str r0, [sp, #8]
	ldr r0, _0202D4BC ; =0x0000FFEF
	sub r0, r0, #0x72
	str r0, [sp, #0x10]
	arm_func_end FUN_0202d228
_0202D27C:
	mov r0, #0xc
	mla sb, r7, r0, sl
	ldrsb r2, [sb, #0xc3]
	mov r0, #0x14
	ldrh r1, [sb, #0xc4]
	mla r0, r2, r0, sl
	tst r1, #4
	ldr r6, [r0, #0x64]
	beq _0202D2E8
	mov r0, r6
	bl FUN_02076138
	cmp r0, #0
	ble _0202D2D4
	ldr r1, [sb, #0xc8]
	mov r0, r6
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_02076238
	ldrh r0, [sb, #0xc6]
	orr r0, r0, #4
	and r0, r0, r5
	strh r0, [sb, #0xc6]
_0202D2D4:
	mov r0, #0
	str r0, [sb, #0xc8]
	ldrh r0, [sb, #0xc4]
	and r0, r0, r4
	strh r0, [sb, #0xc4]
_0202D2E8:
	ldrh r0, [sb, #0xc6]
	tst r0, #4
	beq _0202D314
	mov r0, r6
	bl FUN_02076138
	cmp r0, #0
	addgt sp, sp, #0x14
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r0, [sb, #0xc6]
	and r0, r0, fp
	strh r0, [sb, #0xc6]
_0202D314:
	ldrh r0, [sb, #0xc4]
	tst r0, #8
	beq _0202D358
	ldrh r0, [sb, #0xc6]
	tst r0, #1
	beq _0202D338
	mov r0, sl
	mov r1, r7
	bl FUN_0202d08c
_0202D338:
	ldrh r1, [sb, #0xc6]
	ldr r0, [sp, #4]
	and r0, r1, r0
	strh r0, [sb, #0xc6]
	ldrh r1, [sb, #0xc4]
	ldr r0, [sp]
	and r0, r1, r0
	strh r0, [sb, #0xc4]
_0202D358:
	ldrh r1, [sb, #0xc4]
	tst r1, #0x10
	beq _0202D3B8
	ldr r0, _0202D4BC ; =0x0000FFEF
	cmp r7, #0
	and r0, r1, r0
	strh r0, [sb, #0xc4]
	mov r0, sl
	bne _0202D384
	mov r1, #5
	b _0202D388
_0202D384:
	mov r1, #3
_0202D388:
	ldrsh r2, [sb, #0xc0]
	bl FUN_0202cb64
	strb r0, [sb, #0xc3]
	ldrsb r0, [sb, #0xc3]
	cmp r0, #0
	blt _0202D4A8
	ldrh r0, [sb, #0xc6]
	orr r0, r0, #0x10
	strh r0, [sb, #0xc6]
	ldrh r0, [sb, #0xc4]
	orr r0, r0, #1
	strh r0, [sb, #0xc4]
_0202D3B8:
	ldrh r0, [sb, #0xc4]
	tst r0, #1
	beq _0202D404
	mov r0, sl
	ldrsb r1, [sb, #0xc3]
	bl FUN_0202cc34
	cmp r0, #0
	beq _0202D4A8
	ldrsb r2, [sb, #0xc3]
	mov r0, #0x14
	ldrh r1, [sb, #0xc4]
	mla r0, r2, r0, sl
	ldr r6, [r0, #0x64]
	ldr r0, [sp, #8]
	and r0, r1, r0
	strh r0, [sb, #0xc4]
	ldrh r0, [sb, #0xc6]
	orr r0, r0, #1
	strh r0, [sb, #0xc6]
_0202D404:
	ldrh r1, [sb, #0xc4]
	tst r1, #2
	beq _0202D4A8
	ldrh r0, [sb, #0xc6]
	tst r0, #1
	beq _0202D498
	tst r0, #2
	bne _0202D484
	tst r1, #0x80
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0xc]
	ldrh r3, [r1, #0x58]
	ldrh ip, [r2, #0x5e]
	ldrh r1, [r1, #0x5a]
	mov r8, #1
	ldr r2, [sb, #0xc8]
	mul ip, r1, ip
	mul r1, r3, ip
	asr r3, r1, #7
	ldr r1, _0202D4C0 ; =0x10624DD3
	movne r8, #0
	smull lr, ip, r1, r3
	lsr r1, r3, #0x1f
	add ip, r1, ip, asr #6
	lsl r1, ip, #0x18
	mov r0, sl
	asr r1, r1, #0x18
	bl FUN_0202bc48
	mov r0, r6
	mov r2, r8
	add r1, sl, #0x44
	bl FUN_02076150
_0202D484:
	mov r0, #0
	str r0, [sb, #0xc8]
	ldrh r0, [sb, #0xc6]
	orr r0, r0, #2
	strh r0, [sb, #0xc6]
_0202D498:
	ldrh r1, [sb, #0xc4]
	ldr r0, [sp, #0x10]
	and r0, r1, r0
	strh r0, [sb, #0xc4]
_0202D4A8:
	add r7, r7, #1
	cmp r7, #2
	blt _0202D27C
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0202D4BC: .word 0x0000FFEF
_0202D4C0: .word 0x10624DD3

	arm_func_start FUN_0202d4c4
FUN_0202d4c4: ; 0x0202D4C4
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x28
	mov r7, r1
	add r4, sp, #8
	mov r8, r0
	ldr r1, _0202D574 ; =0x0208FB90
	mov r6, r2
	mov r0, r4
	mov r5, r3
	bl _strcpy
	mov r0, r4
	mov r1, r6
	bl FUN_02014ee8
	add r0, sp, #0
	mov r1, r4
	bl FUN_0200dc64
	cmp r0, #0
	addeq sp, sp, #0x28
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, #0x30
	mul r4, r7, r0
	add r0, r8, #0xd8
	mov r1, r6
	add r0, r0, r4
	bl _strcmp
	cmp r0, #0
	beq _0202D540
	mov r0, r8
	mov r1, r7
	bl FUN_0202d578
	arm_func_end FUN_0202d4c4
_0202D540:
	add r0, r8, #0xd8
	mov r1, r6
	add r0, r0, r4
	bl _strcpy
	add r0, r8, r4
	strb r5, [r0, #0xf9]
	add r2, r8, #0xfc
	ldrh r1, [r2, r4]
	mov r0, #1
	orr r1, r1, #1
	strh r1, [r2, r4]
	add sp, sp, #0x28
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0202D574: .word 0x0208FB90

	arm_func_start FUN_0202d578
FUN_0202d578: ; 0x0202D578
	mov r2, #0x30
	mul r2, r1, r2
	add r1, r0, #0xfc
	ldrh r0, [r1, r2]
	orr r0, r0, #0xc
	strh r0, [r1, r2]
	bx lr
	arm_func_end FUN_0202d578

	arm_func_start FUN_0202d594
FUN_0202d594: ; 0x0202D594
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	cmp r2, #0
	beq _0202D5B8
	mov r3, #0
	bl FUN_0202d4c4
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	arm_func_end FUN_0202d594
_0202D5B8:
	mov r0, #0x30
	mul r1, r4, r0
	add r2, r5, #0xfc
	ldrh r0, [r2, r1]
	orr r0, r0, #2
	strh r0, [r2, r1]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202d5d4
FUN_0202d5d4: ; 0x0202D5D4
	push {r4, r5, r6, r7, r8, lr}
	ldr r6, _0202D6B8 ; =0x0209A8A0
	mov r8, r0
	mov r0, r6
	mov r7, r2
	mov r4, r1
	bl FUN_0202ec30
	mov r5, r0
	mov r0, #0x30
	cmp r7, #0
	mul r7, r4, r0
	ble _0202D690
	add r4, r8, #0x100
	ldr r0, [r4, r7]
	mov r1, #0x3e8
	bl FUN_0207d690
	ldr r1, _0202D6BC ; =0x00022140
	mov r2, #0xe8000000
	cmp r0, r1
	ldr r1, [r6, #0x1a0]
	ldr r0, [r6, #0x198]
	mov r3, #3
	add r6, r1, r0
	umull r0, r1, r6, r2
	bge _0202D65C
	mla r1, r6, r3, r1
	asr r3, r6, #0x1f
	mla r1, r3, r2, r1
	mov r2, r5
	mov r3, #0
	bl FUN_0201f954
	mov r1, r0
	ldr r0, [r4, r7]
	b _0202D69C
	arm_func_end FUN_0202d5d4
_0202D65C:
	mla r1, r6, r3, r1
	asr r3, r6, #0x1f
	mla r1, r3, r2, r1
	mov r2, r5
	mov r3, #0
	bl FUN_0201f954
	ldr r5, _0202D6C0 ; =0x88888889
	lsr r2, r0, #0x1f
	smull r3, r1, r5, r0
	add r1, r0, r1
	ldr r0, [r4, r7]
	add r1, r2, r1, asr #4
	b _0202D69C
_0202D690:
	add r0, r8, r7
	ldr r0, [r0, #0x100]
	mov r1, #0
_0202D69C:
	bl FUN_0207d4c0
	add r2, r8, #0xfc
	ldrh r1, [r2, r7]
	mov r0, #1
	orr r1, r1, #0x82
	strh r1, [r2, r7]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0202D6B8: .word 0x0209A8A0
_0202D6BC: .word 0x00022140
_0202D6C0: .word 0x88888889

	arm_func_start FUN_0202d6c4
FUN_0202d6c4: ; 0x0202D6C4
	push {r3, r4, r5, lr}
	mov r2, #0x30
	mul r4, r1, r2
	add r2, r0, r4
	ldrh r1, [r2, #0xfc]
	tst r1, #4
	movne r0, #0
	popne {r3, r4, r5, pc}
	add r5, r0, #0xfe
	ldrh r0, [r5, r4]
	tst r0, #2
	beq _0202D708
	ldr r0, [r2, #0x100]
	bl FUN_0207cf94
	cmp r0, #0
	movgt r0, #1
	popgt {r3, r4, r5, pc}
	arm_func_end FUN_0202d6c4
_0202D708:
	ldrh r2, [r5, r4]
	ldr r1, _0202D720 ; =0x0000FFFD
	mov r0, #0
	and r1, r2, r1
	strh r1, [r5, r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_0202D720: .word 0x0000FFFD

	arm_func_start FUN_0202d724
FUN_0202d724: ; 0x0202D724
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	mov r6, #0
	add r5, r8, #0xd8
	mov r4, #0x30
	arm_func_end FUN_0202d724
_0202D73C:
	mla r0, r6, r4, r5
	mov r1, r7
	bl _strcmp
	cmp r0, #0
	bne _0202D760
	mov r0, r8
	mov r1, r6
	bl FUN_0202d6c4
	pop {r4, r5, r6, r7, r8, pc}
_0202D760:
	add r6, r6, #1
	cmp r6, #1
	blt _0202D73C
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0202d774
FUN_0202d774: ; 0x0202D774
	mov r3, #0x30
	mul r3, r1, r3
	add r1, r0, r3
	str r2, [r1, #0x104]
	add r1, r0, #0xfc
	ldrh r0, [r1, r3]
	orr r0, r0, #4
	strh r0, [r1, r3]
	bx lr
	arm_func_end FUN_0202d774

	arm_func_start FUN_0202d798
FUN_0202d798: ; 0x0202D798
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	mov r8, r1
	mov r7, r2
	mov r6, #0
	add r5, sb, #0xd8
	mov r4, #0x30
	arm_func_end FUN_0202d798
_0202D7B4:
	mla r0, r6, r4, r5
	mov r1, r8
	bl _strcmp
	cmp r0, #0
	bne _0202D7DC
	mov r0, sb
	mov r1, r6
	mov r2, r7
	bl FUN_0202d774
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0202D7DC:
	add r6, r6, #1
	cmp r6, #1
	blt _0202D7B4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0202d7ec
FUN_0202d7ec: ; 0x0202D7EC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x5c
	mov r6, r0
	ldr r0, _0202DB88 ; =0x0000FFFB
	mov sb, #0
	add r0, r0, #2
	str r0, [sp]
	ldr r0, _0202DB88 ; =0x0000FFFB
	add fp, r6, #0xd8
	sub r0, r0, #0x1d
	str r0, [sp, #8]
	ldr r0, _0202DB88 ; =0x0000FFFB
	add r7, sp, #0x1c
	sub r0, r0, #4
	str r0, [sp, #4]
	ldr r0, _0202DB88 ; =0x0000FFFB
	sub r0, r0, #4
	str r0, [sp, #0xc]
	ldr r0, _0202DB88 ; =0x0000FFFB
	add r0, r0, #3
	str r0, [sp, #0x10]
	add r0, r6, #0x200
	str r0, [sp, #0x14]
	ldr r0, _0202DB88 ; =0x0000FFFB
	sub r0, r0, #0x7e
	str r0, [sp, #0x18]
	arm_func_end FUN_0202d7ec
_0202D854:
	mov r0, #0x30
	mul r4, sb, r0
	add sl, r6, r4
	ldrsb r1, [sl, #0xf8]
	ldr r8, [sl, #0x100]
	cmp r1, #0
	beq _0202D894
	ldr r0, _0202DB8C ; =0x0209A110
	ldr r0, [r0]
	lsl r0, r0, #0x18
	sub r0, r1, r0, asr #24
	strb r0, [sl, #0xf8]
	ldrsb r0, [sl, #0xf8]
	cmp r0, #0
	movlt r0, #0
	strblt r0, [sl, #0xf8]
_0202D894:
	ldrh r1, [sl, #0xfc]
	tst r1, #4
	beq _0202D8F0
	ldr r0, _0202DB88 ; =0x0000FFFB
	and r0, r1, r0
	strh r0, [sl, #0xfc]
	mov r0, r8
	bl FUN_0207cf94
	cmp r0, #0
	ble _0202D8D0
	mov r0, r8
	ldr r1, [sl, #0x104]
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_0207d1c4
_0202D8D0:
	add r2, r6, r4
	ldrh r0, [r2, #0xfe]
	orr r1, r0, #4
	ldr r0, [sp]
	and r0, r1, r0
	strh r0, [r2, #0xfe]
	mov r0, #0
	str r0, [r2, #0x104]
_0202D8F0:
	ldrh r0, [sl, #0xfe]
	tst r0, #4
	beq _0202D92C
	mov r0, r8
	bl FUN_0207cf94
	cmp r0, #0
	addgt sp, sp, #0x5c
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r2, r6, r4
	ldrh r1, [r2, #0xfe]
	ldr r0, _0202DB88 ; =0x0000FFFB
	and r0, r1, r0
	strh r0, [r2, #0xfe]
	mov r0, #0
	strb r0, [r2, #0xf8]
_0202D92C:
	ldrh r0, [sl, #0xfc]
	tst r0, #8
	beq _0202D984
	ldrh r0, [sl, #0xfe]
	tst r0, #4
	bne _0202D984
	tst r0, #1
	beq _0202D960
	mov r0, r8
	bl FUN_0207ce1c
	ldrh r0, [sl, #0xfe]
	orr r0, r0, #8
	strh r0, [sl, #0xfe]
_0202D960:
	add r0, r6, r4
	ldrh r2, [r0, #0xfe]
	ldr r1, [sp, #8]
	and r1, r2, r1
	strh r1, [r0, #0xfe]
	ldrh r2, [r0, #0xfc]
	ldr r1, [sp, #4]
	and r1, r2, r1
	strh r1, [r0, #0xfc]
_0202D984:
	ldrh r0, [sl, #0xfe]
	tst r0, #8
	beq _0202D9C0
	mov r0, r8
	bl FUN_0207c990
	cmp r0, #0
	addgt sp, sp, #0x5c
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r2, r6, r4
	ldrh r1, [r2, #0xfe]
	ldr r0, [sp, #0xc]
	and r0, r1, r0
	strh r0, [r2, #0xfe]
	mov r0, #0
	strb r0, [r2, #0xf8]
_0202D9C0:
	ldrh r0, [sl, #0xfc]
	tst r0, #1
	beq _0202DA58
	add r5, r6, r4
	ldrh r1, [r5, #0xfc]
	ldr r0, [sp, #0x10]
	and r0, r1, r0
	strh r0, [r5, #0xfc]
	ldrh r0, [r5, #0xfe]
	tst r0, #1
	bne _0202DA4C
	ldr r1, _0202DB90 ; =0x0208FBA0
	mov r0, r7
	bl _strcpy
	mov r0, r7
	add r1, fp, r4
	bl FUN_02014ee8
	mov r8, r5
	ldrsb r0, [r8, #0xf9]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	lsl r0, r0, #0x18
	asr r0, r0, #0x18
	bl FUN_0207c97c
	mov r0, #0
	strb r0, [r8, #0xf9]
	mov r0, r7
	mov r1, #0x2000
	mov r2, #1
	bl FUN_0207ca24
	cmp r0, #0
	blt _0202DB74
	str r0, [r5, #0x100]
	mov r8, r0
_0202DA4C:
	ldrh r0, [sl, #0xfe]
	orr r0, r0, #1
	strh r0, [sl, #0xfe]
_0202DA58:
	ldrh r0, [sl, #0xfc]
	tst r0, #2
	beq _0202DB4C
	ldrsb r0, [sl, #0xf8]
	cmp r0, #0
	bne _0202DB4C
	ldrh r0, [sl, #0xfe]
	tst r0, #1
	beq _0202DB3C
	mov r0, r8
	bl FUN_0207c990
	cmp r0, #0
	addle sp, sp, #0x5c
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r0, [sl, #0xfe]
	tst r0, #0x20
	addeq r1, r6, #0xfe
	ldrheq r0, [r1, r4]
	addeq sp, sp, #0x5c
	orreq r0, r0, #0x20
	strheq r0, [r1, r4]
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r6
	mov r1, sb
	bl FUN_0202d6c4
	cmp r0, #0
	bne _0202DB30
	ldr r2, [sp, #0x14]
	ldr r1, [sp, #0x14]
	ldrh r5, [r2, #0x5a]
	ldrh r3, [r2, #0x5e]
	add r4, r6, r4
	ldrh r1, [r1, #0x58]
	mul r3, r5, r3
	mul r3, r1, r3
	asr ip, r3, #7
	ldr r3, _0202DB94 ; =0x10624DD3
	ldr r2, [r4, #0x104]
	smull r5, r1, r3, ip
	lsr r3, ip, #0x1f
	add r1, r3, r1, asr #6
	lsl r1, r1, #0x18
	mov r0, r6
	asr r1, r1, #0x18
	bl FUN_0202bc48
	ldrh r0, [r4, #0xfc]
	add r1, r6, #0x44
	tst r0, #0x80
	mov r0, r8
	bne _0202DB28
	mov r2, #1
	b _0202DB2C
_0202DB28:
	mov r2, #0
_0202DB2C:
	bl FUN_0207cfe4
_0202DB30:
	ldrh r0, [sl, #0xfe]
	orr r0, r0, #2
	strh r0, [sl, #0xfe]
_0202DB3C:
	ldrh r1, [sl, #0xfc]
	ldr r0, [sp, #0x18]
	and r0, r1, r0
	strh r0, [sl, #0xfc]
_0202DB4C:
	ldrh r0, [sl, #0xfe]
	tst r0, #2
	beq _0202DB74
	mov r0, r8
	bl FUN_0207cf94
	cmp r0, #0
	bne _0202DB74
	mov r0, r6
	mov r1, sb
	bl FUN_0202d578
_0202DB74:
	add sb, sb, #1
	cmp sb, #1
	blt _0202D854
	add sp, sp, #0x5c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0202DB88: .word 0x0000FFFB
_0202DB8C: .word 0x0209A110
_0202DB90: .word 0x0208FBA0
_0202DB94: .word 0x10624DD3

	arm_func_start FUN_0202db98
FUN_0202db98: ; 0x0202DB98
	push {r4, lr}
	ldrh r3, [r0, #0xfc]
	ldrh r2, [r0, #0xfe]
	mov r4, r1
	orr r1, r3, r2
	tst r1, #3
	popeq {r4, pc}
	ldr r0, [r0, #0x100]
	bl FUN_0207cf94
	cmp r0, #0
	popeq {r4, pc}
	mov r0, r4
	bl FUN_02001eb0
	pop {r4, pc}
	arm_func_end FUN_0202db98

	arm_func_start FUN_0202dbd0
FUN_0202dbd0: ; 0x0202DBD0
	mov r2, #0x30
	mla r2, r1, r2, r0
	ldrh r0, [r2, #0xfc]
	ldrh r1, [r2, #0xfe]
	tst r0, #0xc
	orr r0, r1, r0, lsl #16
	movne r0, #0
	tst r1, #0xc
	movne r0, #0
	bx lr
	arm_func_end FUN_0202dbd0

	arm_func_start FUN_0202dbf8
FUN_0202dbf8: ; 0x0202DBF8
	mov r3, #0
	mov r2, r3
	arm_func_end FUN_0202dbf8
_0202DC00:
	add r1, r0, r3, lsl #2
	str r2, [r1, #0x24]
	add r3, r3, #1
	str r2, [r1, #0x38]
	cmp r3, #5
	blt _0202DC00
	bx lr

	arm_func_start FUN_0202dc1c
FUN_0202dc1c: ; 0x0202DC1C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	arm_func_end FUN_0202dc1c
_0202DC28:
	add r0, r5, r4, lsl #2
	ldr r2, [r0, #0x24]
	cmp r2, #0
	beq _0202DC40
	ldmib r5, {r0, r1}
	bl FUN_02002d34
_0202DC40:
	add r4, r4, #1
	cmp r4, #5
	blt _0202DC28
	mov r0, r5
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202dc54
FUN_0202dc54: ; 0x0202DC54
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov r0, r1
	str r1, [sl, #4]
	mov r1, r2
	mov r2, r3
	bl FUN_02002e74
	str r0, [sl, #8]
	add r0, sl, #0xc
	bl FUN_020023e4
	mov r7, #1
	arm_func_end FUN_0202dc54
_0202DC80:
	mov r8, #0
	ldr r5, _0202DD9C ; =0x0208C348
	mov r6, r8
	mov fp, r8
	mov r4, #0x14
_0202DC94:
	cmp r7, #1
	bne _0202DCA4
	cmp r8, #1
	beq _0202DD70
_0202DCA4:
	cmp r7, #2
	bne _0202DCB4
	cmp r8, #1
	bne _0202DD70
_0202DCB4:
	add r0, sl, r8, lsl #2
	str r6, [r0, #0x24]
	str r6, [r0, #0x38]
	ldmib sl, {r0, r1}
	bl FUN_02002f14
	cmp r0, #0
	beq _0202DD7C
	ldr r1, [r5, r8, lsl #2]
	mov sb, r0
	lsl r1, r1, #0xa
	cmp r7, #2
	movne sb, r1
	cmp sb, #0
	beq _0202DD68
	cmp r7, #1
	bne _0202DCFC
	cmp sb, r1
	bhi _0202DD0C
_0202DCFC:
	cmp r7, #2
	bne _0202DD1C
	cmp sb, r0
	bls _0202DD1C
_0202DD0C:
	cmp r7, #1
	bne _0202DD1C
	bl FUN_02004160
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0202DD1C:
	ldmib sl, {r0, r1}
	mov r2, sb
	bl FUN_02002c2c
	add r1, sl, r8, lsl #2
	str r0, [r1, #0x24]
	cmp r0, #0
	bne _0202DD40
	bl FUN_02004160
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0202DD40:
	str sb, [r1, #0x38]
	ldr r1, [r1, #0x24]
	mov r0, fp
	mov r2, sb
	bl FUN_0200787c
	add r0, sl, r8, lsl #2
	ldr r1, [r0, #0x24]
	sub r0, sb, #0x10
	str r0, [r1, #4]
	strh r4, [r1, #2]
_0202DD68:
	cmp r7, #2
	beq _0202DD7C
_0202DD70:
	add r8, r8, #1
	cmp r8, #5
	blt _0202DC94
_0202DD7C:
	add r7, r7, #1
	cmp r7, #2
	ble _0202DC80
	mvn r1, #0
	mov r0, #1
	str r1, [sl, #0x4c]
	str r0, [sl, #0x50]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0202DD9C: .word 0x0208C348

	arm_func_start FUN_0202dda0
FUN_0202dda0: ; 0x0202DDA0
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r0, [r4, #0xc]
	ldr r1, [r0, #4]
	ldr r2, [r0, #0xc]
	add r1, r0, r1
	add r1, r1, #0x10
	cmp r2, r1
	popne {r3, r4, r5, pc}
	ldrb r1, [r4]
	cmp r1, #0
	ldrbeq r1, [r0]
	cmpeq r1, #0
	sub r1, r0, r4
	beq _0202DDF0
	sub r1, r1, #0x10
	str r1, [r4, #4]
	str r0, [r4, #0xc]
	str r4, [r0, #8]
	b _0202DE18
	arm_func_end FUN_0202dda0
_0202DDF0:
	sub r2, r1, #0x10
	str r2, [r4, #4]
	ldr r1, [r0, #4]
	add r1, r1, #0x10
	add r1, r2, r1
	str r1, [r4, #4]
	ldr r0, [r0, #0xc]
	str r0, [r4, #0xc]
	cmp r0, #0
	strne r4, [r0, #8]
_0202DE18:
	mov r5, #0x10
	mov r0, r4
	mov r1, r5
	bl FUN_020026d0
	ldr r0, [r4, #0xc]
	cmp r0, #0
	beq _0202DE3C
	mov r1, r5
	bl FUN_020026d0
_0202DE3C:
	bl FUN_020026f4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202de44
FUN_0202de44: ; 0x0202DE44
	ldr ip, _0202DE54 ; =FUN_0202de58
	mov r2, #0
	mov r3, #1
	bx ip
	.align 2, 0_0202DE54: .word FUN_0202de58
	arm_func_end FUN_0202de44

	arm_func_start FUN_0202de58
FUN_0202de58: ; 0x0202DE58
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr r7, _0202E198 ; =0x0208C340
	mov sl, r0
	ldrb fp, [r7]
	ldrb r6, [r7, #1]
	ldrb r5, [r7, #2]
	ldrb r4, [r7, #3]
	ldrb ip, [r7, #4]
	add r0, sl, #0xc
	mov sb, r1
	mov r8, r2
	mov r7, r3
	strb fp, [sp]
	strb r6, [sp, #1]
	strb r5, [sp, #2]
	strb r4, [sp, #3]
	strb ip, [sp, #4]
	bl FUN_02002408
	bl FUN_02003da8
	ldr r2, [sl, #0x4c]
	add r1, sb, #3
	mov fp, r0
	cmp r2, #0
	mvnge r0, #0
	bic sb, r1, #3
	strge r0, [sl, #0x4c]
	bge _0202DF10
	cmp r8, #4
	bgt _0202DED8
	beq _0202DF04
	b _0202DF0C
	arm_func_end FUN_0202de58
_0202DED8:
	cmp r8, #0x13
	bgt _0202DF0C
	cmp r8, #0xd
	blt _0202DF0C
	cmpne r8, #0xe
	beq _0202DEF8
	cmp r8, #0x13
	bne _0202DF0C
_0202DEF8:
	mov r2, #3
	mov r7, #1
	b _0202DF10
_0202DF04:
	mov r2, #2
	b _0202DF10
_0202DF0C:
	ldr r2, [sl, #0x50]
_0202DF10:
	cmp r8, #4
	moveq r2, #2
	tst r2, #0x100
	bicne r2, r2, #0x100
	add r0, sl, r2, lsl #2
	ldr r5, [r0, #0x24]
	movne r7, #0
	cmp r2, #2
	mov r6, r5
	mov r4, #0
	beq _0202DF44
	cmp sb, #0x32000
	movge r7, r4
_0202DF44:
	cmp r7, #0
	beq _0202DFD4
	cmp r5, #0
	beq _0202E028
_0202DF54:
	ldrb r0, [r5]
	cmp r0, #0
	bne _0202DFC4
	ldr r0, [r5, #4]
	cmp r0, sb
	blo _0202DFC4
	ldrb r1, [r6]
	cmp r1, #0
	movne r6, r5
	ldr r1, [r6, #4]
	cmp r1, sb
	movlo r6, r5
	cmp r0, sb, lsl #1
	bhs _0202DF98
	ldr r1, [r6, #4]
	cmp r1, r0
	movhi r6, r5
_0202DF98:
	ldr r1, [r6, #4]
	cmp r1, sb
	beq _0202E028
	ldr r1, [r5, #0xc]
	cmp r1, #0
	addne r0, r5, r0
	addne r0, r0, #0x10
	cmpne r1, r0
	beq _0202DFC4
	mov r0, r5
	bl FUN_0202dda0
_0202DFC4:
	ldr r5, [r5, #0xc]
	cmp r5, #0
	bne _0202DF54
	b _0202E028
_0202DFD4:
	ldr r0, [r5, #0xc]
	cmp r0, #0
	beq _0202DFF0
_0202DFE0:
	mov r5, r0
	ldr r0, [r0, #0xc]
	cmp r0, #0
	bne _0202DFE0
_0202DFF0:
	ldr r1, [r5, #8]
	cmp r1, #0
	beq _0202E024
_0202DFFC:
	ldr r0, [r5, #4]
	cmp r0, sb
	blo _0202E014
	ldrb r0, [r5]
	cmp r0, #0
	beq _0202E024
_0202E014:
	mov r5, r1
	ldr r1, [r1, #8]
	cmp r1, #0
	bne _0202DFFC
_0202E024:
	mov r6, r5
_0202E028:
	ldrb r1, [r6]
	mov r0, #0
	cmp r1, #0
	bne _0202E044
	ldr r2, [r6, #4]
	cmp r2, sb
	bhs _0202E088
_0202E044:
	cmp r4, #5
	bge _0202E06C
	add r0, sp, #0
	ldrb r0, [r0, r4]
	mov r7, #1
	add r4, r4, #1
	add r0, sl, r0, lsl #2
	ldr r5, [r0, #0x24]
	mov r6, r5
	b _0202DF44
_0202E06C:
	mov r0, fp
	bl FUN_02003dbc
	add r0, sl, #0xc
	bl FUN_02002458
	add sp, sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0202E088:
	cmp r7, #1
	add r1, sb, #0x40
	bne _0202E0E4
	cmp r2, r1
	bls _0202E134
	add r1, r6, #0x10
	strb r0, [r1, sb]
	ldr r0, [r6, #4]
	add r1, r1, sb
	sub r0, r0, sb
	sub r0, r0, #0x10
	str r0, [r1, #4]
	ldrh r0, [r6, #2]
	strh r0, [r1, #2]
	str r6, [r1, #8]
	ldr r0, [r6, #0xc]
	str r0, [r1, #0xc]
	str r1, [r6, #0xc]
	ldr r0, [r1, #0xc]
	cmp r0, #0
	strne r1, [r0, #8]
	str sb, [r6, #4]
	b _0202E134
_0202E0E4:
	cmp r2, r1
	bls _0202E134
	ldr r1, [r5, #4]
	add r2, r6, #0x10
	sub r1, r1, sb
	add r1, r2, r1
	strb r0, [r1, #-0x10]
	sub r6, r1, #0x10
	str sb, [r6, #4]
	str r5, [r6, #8]
	ldr r0, [r5, #0xc]
	str r0, [r6, #0xc]
	str r6, [r5, #0xc]
	ldr r0, [r6, #0xc]
	cmp r0, #0
	strne r6, [r0, #8]
	ldr r1, [r5, #4]
	add r0, sb, #0x10
	sub r0, r1, r0
	str r0, [r5, #4]
_0202E134:
	mov r0, #1
	strb r0, [r6]
	mov r4, #0x10
	mov r0, r6
	mov r1, r4
	strh r8, [r6, #2]
	bl FUN_020026d0
	ldr r0, [r6, #8]
	cmp r0, #0
	beq _0202E164
	mov r1, r4
	bl FUN_020026d0
_0202E164:
	ldr r0, [r6, #0xc]
	cmp r0, #0
	beq _0202E178
	mov r1, #0x10
	bl FUN_020026d0
_0202E178:
	bl FUN_020026f4
	mov r0, fp
	bl FUN_02003dbc
	add r0, sl, #0xc
	bl FUN_02002458
	add r0, r6, #0x10
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0202E198: .word 0x0208C340

	arm_func_start FUN_0202e19c
FUN_0202e19c: ; 0x0202E19C
	ldr r2, [r0, #0x4c]
	str r1, [r0, #0x4c]
	mov r0, r2
	bx lr
	arm_func_end FUN_0202e19c

	arm_func_start FUN_0202e1ac
FUN_0202e1ac: ; 0x0202E1AC
	ldr r2, [r0, #0x50]
	cmp r1, #0
	strge r1, [r0, #0x50]
	mov r0, r2
	bx lr
	arm_func_end FUN_0202e1ac

	arm_func_start FUN_0202e1c0
FUN_0202e1c0: ; 0x0202E1C0
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r1
	mov r7, r0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r2, #0
	mov r3, r2
	arm_func_end FUN_0202e1c0
_0202E1D8:
	add r0, r7, r3, lsl #2
	ldr r1, [r0, #0x24]
	cmp r6, r1
	blo _0202E1FC
	ldr r0, [r0, #0x38]
	add r0, r1, r0
	cmp r6, r0
	movlo r2, r1
	blo _0202E208
_0202E1FC:
	add r3, r3, #1
	cmp r3, #5
	blt _0202E1D8
_0202E208:
	cmp r2, #0
	bne _0202E218
	bl FUN_02004160
	pop {r3, r4, r5, r6, r7, pc}
_0202E218:
	add r0, r7, #0xc
	bl FUN_02002408
	bl FUN_02003da8
	sub r5, r6, #0x10
	ldrb r1, [r5]
	mov r4, r0
	cmp r1, #0
	bne _0202E248
	bl FUN_02003dbc
	add r0, r7, #0xc
	bl FUN_02002458
	pop {r3, r4, r5, r6, r7, pc}
_0202E248:
	ldr r2, [r5, #0xc]
	cmp r2, #0
	ldrne r1, [r5, #4]
	addne r1, r6, r1
	cmpne r2, r1
	beq _0202E270
	bl FUN_02003dbc
	add r0, r7, #0xc
	bl FUN_02002458
	pop {r3, r4, r5, r6, r7, pc}
_0202E270:
	mov r0, #0
	strb r0, [r5]
	ldr r2, [r5, #8]
	cmp r2, #0
	beq _0202E2C4
	ldrb r0, [r2]
	cmp r0, #0
	bne _0202E2C4
	ldr r0, [r5, #4]
	ldr r1, [r2, #4]
	add r0, r0, #0x10
	add r0, r1, r0
	str r0, [r2, #4]
	ldr r1, [r5, #0xc]
	ldr r0, [r5, #8]
	str r1, [r0, #0xc]
	ldr r1, [r5, #0xc]
	cmp r1, #0
	ldrne r0, [r5, #8]
	strne r0, [r1, #8]
	ldr r5, [r5, #8]
_0202E2C4:
	mov r6, #0x10
	mov r0, r5
	mov r1, r6
	bl FUN_020026d0
	ldr r0, [r5, #8]
	cmp r0, #0
	beq _0202E2E8
	mov r1, r6
	bl FUN_020026d0
_0202E2E8:
	ldr r0, [r5, #0xc]
	cmp r0, #0
	beq _0202E2FC
	mov r1, #0x10
	bl FUN_020026d0
_0202E2FC:
	ldr r1, [r5, #0xc]
	cmp r1, #0
	beq _0202E33C
	ldrb r0, [r1]
	cmp r0, #0
	bne _0202E33C
	ldr r0, [r1, #4]
	ldr r1, [r5, #4]
	add r0, r0, #0x10
	add r0, r1, r0
	str r0, [r5, #4]
	ldr r0, [r5, #0xc]
	ldr r0, [r0, #0xc]
	str r0, [r5, #0xc]
	cmp r0, #0
	strne r5, [r0, #8]
_0202E33C:
	mov r6, #0x10
	mov r0, r5
	mov r1, r6
	bl FUN_020026d0
	ldr r0, [r5, #8]
	cmp r0, #0
	beq _0202E360
	mov r1, r6
	bl FUN_020026d0
_0202E360:
	ldr r0, [r5, #0xc]
	cmp r0, #0
	beq _0202E374
	mov r1, #0x10
	bl FUN_020026d0
_0202E374:
	bl FUN_020026f4
	mov r0, r4
	bl FUN_02003dbc
	add r0, r7, #0xc
	bl FUN_02002458
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0202e38c
FUN_0202e38c: ; 0x0202E38C
	push {r4, r5, r6, r7, r8, lr}
	movs r7, r1
	mov r8, r0
	movne r0, #0
	mov r6, r2
	strne r0, [r7]
	cmp r6, #0
	movne r0, #0
	mov r5, r3
	strne r0, [r6]
	cmp r5, #0
	mvnne r0, #0
	strne r0, [r5]
	ldmib r8, {r0, r1}
	bl FUN_02002f14
	mov r4, #0
	mov r0, r4
	bl FUN_02002914
	mov r0, r4
	bl FUN_02002900
	mov r0, r4
	arm_func_end FUN_0202e38c
_0202E3E0:
	add r1, r8, r4, lsl #2
	ldr ip, [r1, #0x24]
	cmp ip, #0
	beq _0202E464
	mov r2, r0
	mov r1, r0
	mov lr, r0
	beq _0202E42C
_0202E400:
	ldrb r3, [ip]
	cmp r3, #0
	ldr r3, [ip, #4]
	addne lr, lr, r3
	bne _0202E420
	cmp r3, r2
	add r1, r1, r3
	movhi r2, r3
_0202E420:
	ldr ip, [ip, #0xc]
	cmp ip, #0
	bne _0202E400
_0202E42C:
	cmp r7, #0
	ldrne r3, [r7]
	addne r3, r3, lr
	strne r3, [r7]
	cmp r6, #0
	ldrne r3, [r6]
	addne r1, r3, r1
	strne r1, [r6]
	cmp r5, #0
	beq _0202E464
	ldr r1, [r5]
	cmp r1, #0
	cmpge r1, r2
	strlt r2, [r5]
_0202E464:
	add r4, r4, #1
	cmp r4, #5
	blt _0202E3E0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0202e474
FUN_0202e474: ; 0x0202E474
	mov r1, #0
	str r1, [r0, #0x18c]
	bx lr
	arm_func_end FUN_0202e474

	arm_func_start FUN_0202e480
FUN_0202e480: ; 0x0202E480
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x18c]
	cmp r1, #0
	beq _0202E4A4
	orr r2, r1, #0x20
	mov r1, #1
	str r2, [r4, #0x18c]
	bl FUN_0202eb00
	arm_func_end FUN_0202e480
_0202E4A4:
	mov r0, r4
	pop {r4, pc}

	arm_func_start FUN_0202e4ac
FUN_0202e4ac: ; 0x0202E4AC
	push {r3, lr}
	cmp r1, #0
	popeq {r3, pc}
	ldr r0, _0202E4C8 ; =0x020B5B80
	str r1, [r0]
	bl FUN_02003328
	pop {r3, pc}
	.align 2, 0_0202E4C8: .word 0x020B5B80
	arm_func_end FUN_0202e4ac

	arm_func_start FUN_0202e4cc
FUN_0202e4cc: ; 0x0202E4CC
	ldr r0, _0202E4E8 ; =0x020B5B80
	ldr ip, [sp]
	str r1, [r0, #8]
	str r2, [r0, #0xc]
	str r3, [r0, #0x10]
	str ip, [r0, #0x14]
	bx lr
	.align 2, 0_0202E4E8: .word 0x020B5B80
	arm_func_end FUN_0202e4cc

	arm_func_start FUN_0202e4ec
FUN_0202e4ec: ; 0x0202E4EC
	ldr r0, _0202E51C ; =0x020B5B80
	ldrsb r1, [r0, #6]
	cmp r1, #0
	moveq r1, #1
	strbeq r1, [r0, #6]
	ldrsbeq r1, [r0, #4]
	eoreq r1, r1, #1
	strbeq r1, [r0, #4]
	ldr r0, _0202E51C ; =0x020B5B80
	ldrsb r0, [r0, #4]
	eor r0, r0, #1
	bx lr
	.align 2, 0_0202E51C: .word 0x020B5B80
	arm_func_end FUN_0202e4ec

	arm_func_start FUN_0202e520
FUN_0202e520: ; 0x0202E520
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x4c
	ldrb r4, [sp, #0x68]
	mov r8, r0
	mov r5, r1
	mov sb, r2
	mov r7, r3
	cmp r4, #0
	mov r4, #0
	beq _0202E560
	ldr r1, _0202E75C ; =0x0000007E
	mov r0, r4
	bl FUN_0200e5d4
	ldr r1, _0202E760 ; =0x0000007F
	mov r0, r4
	bl FUN_0200e580
	arm_func_end FUN_0202e520
_0202E560:
	str r4, [r8, #0x98]
	str r4, [r8, #0x94]
	str r4, [r8, #0x90]
	cmp r5, #0
	beq _0202E5AC
	add r6, sp, #0xc
	ldr r1, _0202E764 ; =0x0208FBC8
	mov r0, r6
	mov r2, r5
	bl FUN_02015184
	mov r0, r8
	bl FUN_0200dbf0
	mov r0, r8
	mov r1, r6
	bl FUN_0200dfc8
	cmp r0, #0
	addeq sp, sp, #0x4c
	moveq r0, r4
	popeq {r4, r5, r6, r7, r8, sb, pc}
_0202E5AC:
	cmp sb, #0
	beq _0202E5B8
	bl FUN_02004160
_0202E5B8:
	cmp r5, #0
	beq _0202E5D0
	mov r0, r8
	mov r1, #6
	bl FUN_0212AFB0
	str r0, [r8, #0x90]
_0202E5D0:
	ldr r0, [r8, #0x90]
	cmp r0, #0
	addeq sp, sp, #0x4c
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, pc}
	str r0, [r8, #0x98]
	cmp r7, #0
	str r4, [r8, #0x18c]
	orrne r0, r4, #0x200
	strne r0, [r8, #0x18c]
	ldr r0, [r8, #0x98]
	str r4, [r8, #0x194]
	str r4, [r8, #0x198]
	str r4, [r8, #0x19c]
	str r4, [r8, #0x1a0]
	bl FUN_0212B0C4
	ldr r3, _0202E768 ; =0x020B5B80
	str r0, [r8, #0x1a4]
	mov r7, #1
	add r6, sp, #0xc
	strb r7, [r3, #4]
	ldr r1, _0202E76C ; =0x0208FBE0
	mov r0, r6
	mov r2, r5
	strb r7, [r3, #6]
	bl FUN_02015184
	ldr r0, [r8, #0x18c]
	tst r0, #0x200
	bne _0202E668
	ldr r0, _0202E770 ; =0x0209AC44
	mov r1, r4
	mov r2, r6
	mov r3, r4
	bl FUN_0202d4c4
	cmp r0, #0
	ldrne r0, [r8, #0x18c]
	orrne r0, r0, #0x100
	strne r0, [r8, #0x18c]
_0202E668:
	add r0, r8, #0x9c
	bl FUN_02003604
	bl FUN_02003410
	mov r5, r0
	ldr r0, [r8, #0x98]
	mov r7, r1
	bl FUN_0212B0AC
	mov r4, #0
	mov r2, r0
	ldr r1, _0202E774 ; =0x00000F42
	mov r0, #0x40000000
	mov r3, r4
	bl FUN_0201f954
	ldr ip, _0202E778 ; =0x000082EA
	mov r6, r4
	umull sb, lr, r0, ip
	mla lr, r1, ip, lr
	lsr r0, sb, #6
	mov r2, #0x3e8
	mov r3, r6
	lsr r1, lr, #6
	orr r0, r0, lr, lsl #26
	bl FUN_0201f954
	adds r1, r5, #5
	ldr r5, _0202E77C ; =FUN_0202ecd8
	mov r3, r0
	stmib sp, {r5, r6}
	adc r2, r7, #0
	add r0, r8, #0x9c
	str r4, [sp]
	bl FUN_020037a8
_0202E6E4:
	mov r0, r8
	bl FUN_0202ea50
	add r6, r6, #1
	cmp r6, #6
	blt _0202E6E4
	mov r4, #0x400
	mov r0, r4
	bl thunk_FUN_0202ecf0
	str r0, [r8, #0x188]
	str r4, [sp]
	mov r0, #0x1b
	str r0, [sp, #4]
	ldr r3, [r8, #0x188]
	ldr r1, _0202E780 ; =FUN_0202ec08
	mov r2, r8
	add r0, r8, #0xc8
	add r3, r3, #0x400
	bl FUN_02001948
	ldr r0, [r8, #0x18c]
	tst r0, #0x200
	bne _0202E744
	ldr r0, _0202E770 ; =0x0209AC44
	mov r1, #0
	bl thunk_FUN_0202c470
_0202E744:
	ldr r1, [r8, #0x18c]
	mov r0, #1
	orr r1, r1, #1
	str r1, [r8, #0x18c]
	add sp, sp, #0x4c
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0202E75C: .word 0x0000007E
_0202E760: .word 0x0000007F
_0202E764: .word 0x0208FBC8
_0202E768: .word 0x020B5B80
_0202E76C: .word 0x0208FBE0
_0202E770: .word 0x0209AC44
_0202E774: .word 0x00000F42
_0202E778: .word 0x000082EA
_0202E77C: .word FUN_0202ecd8
_0202E780: .word FUN_0202ec08

	arm_func_start FUN_0202e784
FUN_0202e784: ; 0x0202E784
	ldr r0, [r0, #0x18c]
	bx lr
	arm_func_end FUN_0202e784

	arm_func_start FUN_0202e78c
FUN_0202e78c: ; 0x0202E78C
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r2, [r5, #0x18c]
	mov r4, #0
	tst r2, #1
	mov r1, #1
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x98]
	cmp r0, #0
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	tst r2, #4
	movne r0, r4
	popne {r3, r4, r5, pc}
	tst r2, #0x20
	beq _0202E7E0
	tst r2, #0x8000
	movne r0, r1
	moveq r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202e78c
_0202E7E0:
	tst r2, #0x10
	movne r0, r1
	popne {r3, r4, r5, pc}
	tst r2, #2
	ldreq r0, _0202E950 ; =0x020B5B80
	strbeq r1, [r0, #5]
	ldr r0, [r5, #0x18c]
	tst r0, #0x100
	beq _0202E868
	tst r0, #8
	bne _0202E82C
	mov r1, #0
	ldr r0, _0202E954 ; =0x0209AC44
	mov r2, r1
	bl FUN_0202d594
	ldr r0, [r5, #0x18c]
	orr r0, r0, #8
	orr r0, r0, #0x400
	str r0, [r5, #0x18c]
_0202E82C:
	ldr r0, _0202E954 ; =0x0209AC44
	mov r1, r4
	bl FUN_0202d6c4
	cmp r0, #0
	ldr r0, [r5, #0x18c]
	bne _0202E860
	tst r0, #0x400
	ldrne r1, _0202E950 ; =0x020B5B80
	movne r0, #1
	strbne r4, [r1, #5]
	popne {r3, r4, r5, pc}
	bic r0, r0, #0x108
	b _0202E864
_0202E860:
	bic r0, r0, #0x400
_0202E864:
	str r0, [r5, #0x18c]
_0202E868:
	ldr r1, [r5, #0x18c]
	ldr r0, _0202E950 ; =0x020B5B80
	orr r1, r1, #2
	str r1, [r5, #0x18c]
	ldrsb r1, [r0, #5]
	ldr r2, [r5, #0x198]
	adds r1, r2, r1
	str r1, [r5, #0x198]
	strb r4, [r0, #5]
	beq _0202E924
	b _0202E8C8
_0202E894:
	ldr r0, [r5, #0x90]
	bl FUN_0212B148
	ldr r0, [r5, #0x94]
	bl FUN_0212B148
	ldr r2, [r5, #0x1a0]
	ldr r1, [r5, #0x194]
	ldr r0, [r5, #0x198]
	add r2, r2, #1
	sub r1, r1, #1
	sub r0, r0, #1
	str r2, [r5, #0x1a0]
	str r1, [r5, #0x194]
	str r0, [r5, #0x198]
_0202E8C8:
	ldr r0, [r5, #0x198]
	cmp r0, #1
	ble _0202E8E0
	ldr r0, [r5, #0x194]
	cmp r0, #1
	bgt _0202E894
_0202E8E0:
	ldr r0, [r5, #0x194]
	cmp r0, #0
	beq _0202E924
	ldr r0, [r5, #0x90]
	ldr r1, [r5, #0x94]
	bl FUN_0202ec4c
	cmp r0, #0
	beq _0202E924
	ldr r2, [r5, #0x1a0]
	ldr r1, [r5, #0x194]
	ldr r0, [r5, #0x198]
	add r2, r2, #1
	sub r1, r1, #1
	sub r0, r0, #1
	str r2, [r5, #0x1a0]
	str r1, [r5, #0x194]
	str r0, [r5, #0x198]
_0202E924:
	add r0, r5, #0xc8
	bl FUN_02001ce0
	ldr r1, [r5, #0x1a0]
	ldr r0, [r5, #0x1a4]
	cmp r1, r0
	ldrge r1, [r5, #0x18c]
	movge r0, #0
	orrge r1, r1, #4
	strge r1, [r5, #0x18c]
	movlt r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0_0202E950: .word 0x020B5B80
_0202E954: .word 0x0209AC44

	arm_func_start FUN_0202e958
FUN_0202e958: ; 0x0202E958
	push {r3, lr}
	ldr r1, [r0, #0x18c]
	tst r1, #2
	popeq {r3, pc}
	orr r1, r1, #0x20
	str r1, [r0, #0x18c]
	bl FUN_0202e978
	pop {r3, pc}
	arm_func_end FUN_0202e958

	arm_func_start FUN_0202e978
FUN_0202e978: ; 0x0202E978
	push {r3, lr}
	ldr r1, [r0, #0x18c]
	tst r1, #2
	popeq {r3, pc}
	orr r3, r1, #0x10
	ldr r1, _0202E9C0 ; =0x020B5B80
	str r3, [r0, #0x18c]
	ldrsb r1, [r1, #5]
	ldr r2, [r0, #0x198]
	tst r3, #8
	add r1, r2, r1
	str r1, [r0, #0x198]
	popeq {r3, pc}
	ldr r0, _0202E9C4 ; =0x0209AC44
	mov r1, #0
	mov r2, #0x12c
	bl FUN_0202d774
	pop {r3, pc}
	.align 2, 0_0202E9C0: .word 0x020B5B80
_0202E9C4: .word 0x0209AC44
	arm_func_end FUN_0202e978

	arm_func_start FUN_0202e9c8
FUN_0202e9c8: ; 0x0202E9C8
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x18c]
	tst r0, #0x10
	popeq {r3, r4, r5, pc}
	bic r1, r0, #0x10
	ldr r0, _0202EA48 ; =0x020B5B80
	str r1, [r5, #0x18c]
	mov r4, #0
	strb r4, [r0, #5]
	tst r1, #8
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x98]
	bl FUN_0212B0AC
	mov r2, r0
	mov r0, #0xe8000000
	mov r1, #3
	mov r3, #0
	bl FUN_0201f954
	mov r3, r0
	ldr r2, [r5, #0x1a0]
	ldr r1, [r5, #0x198]
	ldr r0, _0202EA4C ; =0x0209AC44
	add r1, r2, r1
	add r1, r1, #1
	umull r2, r3, r1, r3
	mov r1, r4
	bl FUN_0202d5d4
	ldr r0, [r5, #0x18c]
	orr r0, r0, #0x400
	str r0, [r5, #0x18c]
	pop {r3, r4, r5, pc}
	.align 2, 0_0202EA48: .word 0x020B5B80
_0202EA4C: .word 0x0209AC44
	arm_func_end FUN_0202e9c8

	arm_func_start FUN_0202ea50
FUN_0202ea50: ; 0x0202EA50
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x194]
	cmp r0, #6
	movge r0, #0
	popge {r4, pc}
	ldr r0, [r4, #0x18c]
	tst r0, #0x20
	movne r0, #0
	popne {r4, pc}
	orr r0, r0, #0x8000
	str r0, [r4, #0x18c]
	bl FUN_02003410
	ldr r0, [r4, #0x90]
	cmp r0, #0
	beq _0202EABC
	ldr r1, [r4, #0x18c]
	tst r1, #0x1000
	bne _0202EABC
	bl FUN_0212B0DC
	cmp r0, #0
	ldreq r0, [r4, #0x18c]
	orreq r0, r0, #0x1000
	streq r0, [r4, #0x18c]
	beq _0202EABC
	ldr r0, [r4, #0x90]
	bl FUN_0212B100
	arm_func_end FUN_0202ea50
_0202EABC:
	bl FUN_02003410
	ldr r0, [r4, #0x18c]
	bic r0, r0, #0x8000
	str r0, [r4, #0x18c]
	tst r0, #0x1000
	beq _0202EAE0
	tst r0, #0x2000
	movne r0, #0
	popne {r4, pc}
_0202EAE0:
	ldr r1, [r4, #0x19c]
	ldr r0, [r4, #0x194]
	add r1, r1, #1
	add r0, r0, #1
	str r1, [r4, #0x19c]
	str r0, [r4, #0x194]
	mov r0, #1
	pop {r4, pc}

	arm_func_start FUN_0202eb00
FUN_0202eb00: ; 0x0202EB00
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, [r5, #0x18c]
	mov r4, r1
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	tst r0, #0x8000
	beq _0202EB38
	mov r6, #0x32
	arm_func_end FUN_0202eb00
_0202EB24:
	mov r0, r6
	bl FUN_02001eb0
	ldr r0, [r5, #0x18c]
	tst r0, #0x8000
	bne _0202EB24
_0202EB38:
	tst r0, #0x20
	bne _0202EB70
	ldr r0, [r5, #0x194]
	mov r6, #0
	cmp r0, #0
	ble _0202EB70
_0202EB50:
	ldr r0, [r5, #0x90]
	bl FUN_0212B148
	ldr r0, [r5, #0x94]
	bl FUN_0212B148
	ldr r0, [r5, #0x194]
	add r6, r6, #1
	cmp r6, r0
	blt _0202EB50
_0202EB70:
	ldr r0, [r5, #0x18c]
	tst r0, #8
	beq _0202EB88
	ldr r0, _0202EBF8 ; =0x0209AC44
	mov r1, #0
	bl FUN_0202d578
_0202EB88:
	add r0, r5, #0x9c
	bl FUN_02003818
	ldr r6, _0202EBFC ; =0x020B5B80
	ldr r0, [r6, #0x20]
	bl thunk_FUN_0202ed14
	ldr r0, [r6, #0x24]
	bl thunk_FUN_0202ed14
	ldr r0, [r5, #0x90]
	cmp r0, #0
	beq _0202EBBC
	bl FUN_0212B08C
	mov r0, r5
	bl FUN_0200de0c
_0202EBBC:
	add r0, r5, #0xc8
	bl FUN_02001b44
	ldr r0, [r5, #0x188]
	bl thunk_FUN_0202ed14
	mov r6, #0
	str r6, [r5, #0x18c]
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	ldr r1, _0202EC00 ; =0x0000007F
	mov r0, r6
	bl FUN_0200e5d4
	ldr r1, _0202EC04 ; =0x0000007E
	mov r0, r6
	bl FUN_0200e580
	pop {r4, r5, r6, pc}
	.align 2, 0_0202EBF8: .word 0x0209AC44
_0202EBFC: .word 0x020B5B80
_0202EC00: .word 0x0000007F
_0202EC04: .word 0x0000007E

	arm_func_start FUN_0202ec08
FUN_0202ec08: ; 0x0202EC08
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	arm_func_end FUN_0202ec08
_0202EC14:
	mov r0, r5
	bl FUN_0202ea50
	cmp r0, #0
	bne _0202EC14
	mov r0, r4
	bl FUN_02001c28
	b _0202EC14

	arm_func_start FUN_0202ec30
FUN_0202ec30: ; 0x0202EC30
	push {r3, lr}
	ldr r0, [r0, #0x98]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_0212B0AC
	pop {r3, pc}
	arm_func_end FUN_0202ec30

	arm_func_start FUN_0202ec4c
FUN_0202ec4c: ; 0x0202EC4C
	push {r4, lr}
	ldr r2, _0202ECCC ; =0x020B5B80
	mov r4, r1
	ldrsb r1, [r2, #6]
	cmp r1, #0
	moveq r0, #0
	popeq {r4, pc}
	cmp r0, #0
	ldrsbne r2, [r2, #4]
	ldrne r1, _0202ECD0 ; =0x020B5B88
	ldrne r1, [r1, r2, lsl #2]
	cmpne r1, #0
	beq _0202EC8C
	mov r2, #0x100
	mov r3, #0
	bl FUN_0212B124
	arm_func_end FUN_0202ec4c
_0202EC8C:
	cmp r4, #0
	ldrne r0, _0202ECCC ; =0x020B5B80
	ldrne r1, _0202ECD4 ; =0x020B5B90
	ldrsbne r0, [r0, #4]
	ldrne r1, [r1, r0, lsl #2]
	cmpne r1, #0
	beq _0202ECB8
	mov r0, r4
	mov r2, #0x100
	mov r3, #0
	bl FUN_0212B124
_0202ECB8:
	ldr r0, _0202ECCC ; =0x020B5B80
	mov r1, #0
	strb r1, [r0, #6]
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_0202ECCC: .word 0x020B5B80
_0202ECD0: .word 0x020B5B88
_0202ECD4: .word 0x020B5B90

	arm_func_start FUN_0202ecd8
FUN_0202ecd8: ; 0x0202ECD8
	ldr r0, _0202ECEC ; =0x020B5B80
	ldrsb r1, [r0, #5]
	add r1, r1, #1
	strb r1, [r0, #5]
	bx lr
	.align 2, 0_0202ECEC: .word 0x020B5B80
	arm_func_end FUN_0202ecd8

	arm_func_start FUN_0202ecf0
FUN_0202ecf0: ; 0x0202ECF0
	ldr r2, _0202ED0C ; =0x020B5B80
	mov r1, r0
	ldr r0, [r2]
	ldr ip, _0202ED10 ; =FUN_0202de58
	mov r2, #5
	mov r3, #0
	bx ip
	.align 2, 0_0202ED0C: .word 0x020B5B80
_0202ED10: .word FUN_0202de58
	arm_func_end FUN_0202ecf0

	arm_func_start FUN_0202ed14
FUN_0202ed14: ; 0x0202ED14
	ldr r2, _0202ED28 ; =0x020B5B80
	mov r1, r0
	ldr r0, [r2]
	ldr ip, _0202ED2C ; =FUN_0202e1c0
	bx ip
	.align 2, 0_0202ED28: .word 0x020B5B80
_0202ED2C: .word FUN_0202e1c0
	arm_func_end FUN_0202ed14

	arm_func_start thunk_FUN_0202ecf0
thunk_FUN_0202ecf0: ; 0x0202ED30
	ldr ip, _0202ED38 ; =FUN_0202ecf0
	bx ip
	.align 2, 0_0202ED38: .word FUN_0202ecf0
	arm_func_end thunk_FUN_0202ecf0

	arm_func_start thunk_FUN_0202ed14
thunk_FUN_0202ed14: ; 0x0202ED3C
	ldr ip, _0202ED44 ; =FUN_0202ed14
	bx ip
	.align 2, 0_0202ED44: .word FUN_0202ed14
	arm_func_end thunk_FUN_0202ed14

	arm_func_start FUN_0202ed48
FUN_0202ed48: ; 0x0202ED48
	ldr r2, _0202ED6C ; =0x0208FBF0
	mov r1, #0
	str r2, [r0]
	str r1, [r0, #0x20]
	str r1, [r0, #0x944]
	str r1, [r0, #0x940]
	str r1, [r0, #0x948]
	str r1, [r0, #0x93c]
	bx lr
	.align 2, 0_0202ED6C: .word 0x0208FBF0
	arm_func_end FUN_0202ed48

	arm_func_start FUN_0202ed70
FUN_0202ed70: ; 0x0202ED70
	push {r4, lr}
	mov r4, r0
	ldr r2, _0202EDA0 ; =0x0208FBF0
	ldr r0, _0202EDA4 ; =0x0208FBF8
	mov r1, #3
	str r2, [r4]
	bl FUN_0200d158
	bl FUN_0200fa24
	add r0, r4, #0x70
	bl FUN_02001b44
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0202EDA0: .word 0x0208FBF0
_0202EDA4: .word 0x0208FBF8
	arm_func_end FUN_0202ed70

	arm_func_start FUN_0202eda8
FUN_0202eda8: ; 0x0202EDA8
	push {r4, lr}
	mov r4, r0
	ldr r2, _0202EDE0 ; =0x0208FBF0
	ldr r0, _0202EDE4 ; =0x0208FBFC
	mov r1, #3
	str r2, [r4]
	bl FUN_0200d158
	bl FUN_0200fa24
	add r0, r4, #0x70
	bl FUN_02001b44
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0202EDE0: .word 0x0208FBF0
_0202EDE4: .word 0x0208FBFC
	arm_func_end FUN_0202eda8

	arm_func_start FUN_0202ede8
FUN_0202ede8: ; 0x0202EDE8
	bx lr
	arm_func_end FUN_0202ede8

	arm_func_start FUN_0202edec
FUN_0202edec: ; 0x0202EDEC
	push {r3, lr}
	ldr r3, [r0, #0x20]
	cmp r3, #0
	popne {r3, pc}
	cmp r2, #0
	popeq {r3, pc}
	str r2, [r0, #4]
	bl FUN_0202ee10
	pop {r3, pc}
	arm_func_end FUN_0202edec

	arm_func_start FUN_0202ee10
FUN_0202ee10: ; 0x0202EE10
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r4, r0
	ldr r2, [r4, #0x20]
	cmp r2, #0
	addne sp, sp, #8
	popne {r4, r5, r6, pc}
	mov r5, #0x68
	mul r2, r1, r5
	str r1, [r4, #0x20]
	mov r1, r2
	bl FUN_0202ef74
	ldr r1, [r4, #0x20]
	mov r6, #0
	mul r2, r1, r5
	mov r1, r6
	str r0, [r4, #0x24]
	bl MemWrite
	add r0, r4, #8
	bl FUN_020023e4
	mov r0, #0x800
	str r0, [sp]
	mov r0, #0x1e
	str r0, [sp, #4]
	ldr r1, _0202EED8 ; =FUN_0202f7a4
	add r0, r4, #0x70
	mov r2, r4
	add r3, r4, #0x930
	bl FUN_02001948
	mov r0, r6
	mov r1, r6
	bl FUN_0200fd44
	movs r5, r0
	addeq sp, sp, #8
	str r6, [r4, #0x93c]
	popeq {r4, r5, r6, pc}
	cmp r5, #0xc000
	addhi sp, sp, #8
	pophi {r4, r5, r6, pc}
	mov r0, r4
	mov r1, r5
	bl FUN_0202ef74
	cmp r0, #0
	addeq sp, sp, #8
	str r0, [r4, #0x93c]
	popeq {r4, r5, r6, pc}
	mov r1, r5
	bl FUN_0200fd44
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_0202EED8: .word FUN_0202f7a4
	arm_func_end FUN_0202ee10

	arm_func_start FUN_0202eedc
FUN_0202eedc: ; 0x0202EEDC
	ldr r3, [r0, #0x20]
	mov ip, #1
	cmp r3, #1
	ble _0202EF10
	ldr r2, [r0, #0x24]
	mov r0, #0x68
	arm_func_end FUN_0202eedc
_0202EEF4:
	mla r1, ip, r0, r2
	ldr r1, [r1, #0x54]
	cmp r1, #0
	beq _0202EF10
	add ip, ip, #1
	cmp ip, r3
	blt _0202EEF4
_0202EF10:
	cmp ip, r3
	moveq ip, #0
	mov r0, ip
	bx lr

	arm_func_start FUN_0202ef20
FUN_0202ef20: ; 0x0202EF20
	push {r4, lr}
	ldr lr, [r0, #0x20]
	mov r4, #1
	cmp lr, #1
	ble _0202EF64
	ldr ip, [r0, #0x24]
	mov r0, #0x68
	arm_func_end FUN_0202ef20
_0202EF3C:
	mla r3, r4, r0, ip
	ldr r2, [r3, #0x54]
	cmp r2, #0
	beq _0202EF58
	ldr r2, [r3, #0x48]
	cmp r2, r1
	beq _0202EF64
_0202EF58:
	add r4, r4, #1
	cmp r4, lr
	blt _0202EF3C
_0202EF64:
	cmp r4, lr
	moveq r4, #0
	mov r0, r4
	pop {r4, pc}

	arm_func_start FUN_0202ef74
FUN_0202ef74: ; 0x0202EF74
	ldr r0, [r0, #4]
	ldr ip, _0202EF88 ; =FUN_0202de58
	mov r2, #0xf
	mov r3, #1
	bx ip
	.align 2, 0_0202EF88: .word FUN_0202de58
	arm_func_end FUN_0202ef74

	arm_func_start FUN_0202ef8c
FUN_0202ef8c: ; 0x0202EF8C
	ldr r0, [r0, #4]
	ldr ip, _0202EF98 ; =FUN_0202e1c0
	bx ip
	.align 2, 0_0202EF98: .word FUN_0202e1c0
	arm_func_end FUN_0202ef8c

	arm_func_start FUN_0202ef9c
FUN_0202ef9c: ; 0x0202EF9C
	push {r3, r4, r5, lr}
	sub sp, sp, #0x48
	add r5, sp, #0
	mov r4, r1
	mov r0, r5
	bl FUN_0200dbf0
	mov r0, r5
	mov r1, r4
	bl FUN_0200dfc8
	cmp r0, #0
	addeq sp, sp, #0x48
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl thunk_FUN_0200de20
	mov r4, r0
	mov r0, r5
	bl FUN_0200de0c
	mov r0, r4
	add sp, sp, #0x48
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202ef9c

	arm_func_start FUN_0202eff0
FUN_0202eff0: ; 0x0202EFF0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xb4
	mov sl, r0
	add r0, sp, #0x54
	str r2, [sp]
	mov r6, r1
	mov r7, r3
	ldr r5, [r2]
	bl _strcpy
	add r4, sp, #4
	mov r0, r4
	bl FUN_0200dbf0
	mov r0, r4
	mov r1, r6
	bl FUN_0200dfc8
	cmp r0, #0
	addeq sp, sp, #0xb4
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #0xd8]
	mov r0, r4
	mov r2, #0
	bl FUN_0200ded0
	mov r0, r4
	bl thunk_FUN_0200de20
	ldr sb, [sp, #0xdc]
	ldr r1, [sp, #0xd8]
	cmp sb, #0
	moveq sb, r0
	add r2, r1, sb
	streq r0, [sp, #0xdc]
	cmp r2, r0
	subgt sb, r0, r1
	mov fp, #0
	add r0, sp, #0x4c
	mov r1, fp
	mov r2, #4
	strgt sb, [sp, #0xdc]
	bl MemWrite
	add r0, sp, #0x4c
	add r0, r0, #8
	bl GetStrLen
	sub r1, r0, #1
	add r0, sp, #0x4c
	add r0, r0, r1
	ldrsb r0, [r0, #8]
	mov r8, #0
	add r4, sp, #4
	cmp r0, #0x5f
	moveq r0, #1
	streq r0, [sp, #0xe0]
	ldr r0, [sp, #0xe0]
	cmp r0, #0
	beq _0202F130
	add r2, sp, #4
	add r3, sp, #0xdc
	mov r0, sl
	add r1, sp, #0x4c
	bl FUN_0202fa88
	cmp r0, #0
	beq _0202F130
	cmp r7, #0
	ldr r1, _0202F290 ; =0x00000101
	beq _0202F0F8
	mov r0, r7
	b _0202F0FC
	arm_func_end FUN_0202eff0
_0202F0F8:
	ldr r0, [sl, #4]
_0202F0FC:
	bl FUN_0202e19c
	mov r6, r0
	mov r0, sl
	mov r1, sb
	bl FUN_0202ef74
	mov fp, r0
	cmp r7, #0
	beq _0202F124
	mov r0, r7
	b _0202F128
_0202F124:
	ldr r0, [sl, #4]
_0202F128:
	mov r1, r6
	bl FUN_0202e19c
_0202F130:
	add r0, sp, #0x4c
	str r8, [r0, #4]
	cmp r5, #0
	bne _0202F18C
	cmp r7, #0
	strne r7, [r0, #4]
	ldreq r1, [sl, #4]
	ldrb r3, [sp, #0xe4]
	streq r1, [r0, #4]
	add r0, sp, #0x4c
	ldr r0, [r0, #4]
	ldr r1, [sp, #0xdc]
	mov r2, #1
	bl FUN_0202de58
	movs r5, r0
	bne _0202F18C
_0202F170:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _0202F170
	add sp, sp, #0xb4
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0202F18C:
	cmp fp, #0
	moveq fp, r5
	add r0, sp, #0x4c
	mov r7, sb
	mov r8, fp
	str r5, [r0, #0x48]
	cmp sb, #0
	ble _0202F22C
_0202F1AC:
	mov r6, r7
	cmp r7, #0x2000
	movge r6, #0x2000
	mov r0, r4
	mov r1, r8
	mov r2, r6
	sub r7, r7, r6
	bl FUN_0200df50
	cmp r0, #0
	bge _0202F220
	add r4, sp, #4
_0202F1D8:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _0202F1D8
	add r0, sp, #0x4c
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _0202F200
	mov r1, r5
	bl FUN_0202e1c0
_0202F200:
	cmp fp, r5
	beq _0202F214
	mov r0, sl
	mov r1, fp
	bl FUN_0202ef8c
_0202F214:
	add sp, sp, #0xb4
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0202F220:
	cmp r7, #0
	add r8, r8, r6
	bgt _0202F1AC
_0202F22C:
	mov r0, fp
	mov r1, sb
	bl FUN_020026d0
_0202F238:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _0202F238
	cmp sb, #0x400
	ble _0202F258
	mov r0, #1
	bl FUN_02001eb0
_0202F258:
	cmp fp, r5
	beq _0202F27C
	mov r0, sl
	mov r1, fp
	add r2, sp, #0x4c
	bl FUN_0202fbe8
	mov r0, sl
	mov r1, fp
	bl FUN_0202ef8c
_0202F27C:
	ldr r0, [sp]
	str r5, [r0]
	ldr r0, [sp, #0xdc]
	add sp, sp, #0xb4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0202F290: .word 0x00000101

	arm_func_start FUN_0202f294
FUN_0202f294: ; 0x0202F294
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x48
	mov sl, r0
	add r0, sl, #8
	mov r4, r1
	mov sb, r2
	mov fp, r3
	ldr r8, [sp, #0x70]
	add r7, sp, #0
	bl FUN_02002408
	mov r0, sl
	bl FUN_0202eedc
	cmp r0, #0
	bne _0202F2E0
	add r0, sl, #8
	bl FUN_02002458
	add sp, sp, #0x48
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0202f294
_0202F2E0:
	ldr r2, [sl, #0x24]
	mov r1, #0x68
	mla r5, r0, r1, r2
	mov r1, r4
	add r0, r5, #8
	bl _strcpy
	mov r0, #1
	str r0, [r5, #0x54]
	add r0, sl, #8
	bl FUN_02002458
	ldr r6, [sb]
	mov r0, #2
	str r0, [r5, #0x54]
	mov r0, r7
	bl FUN_0200dbf0
	mov r1, r4
	add r0, r5, #0x58
	bl FUN_0200dc64
	cmp r0, #0
	beq _0202F340
	add r1, r5, #0x58
	mov r0, r7
	ldm r1, {r1, r2}
	bl FUN_0200dd30
_0202F340:
	cmp r0, #0
	add r4, sp, #0
	bne _0202F378
	add r0, sl, #8
	bl FUN_02002408
	mov r0, r5
	mov r1, #0
	mov r2, #0x68
	bl MemWrite
	add r0, sl, #8
	bl FUN_02002458
	add sp, sp, #0x48
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0202F378:
	mov r0, r4
	mov r1, r8
	mov r2, #0
	bl FUN_0200ded0
	mov r0, r4
	bl thunk_FUN_0200de20
	ldr r7, [sp, #0x74]
	mov r2, #4
	cmp r7, #0
	moveq r7, r0
	add r1, r8, r7
	streq r0, [sp, #0x74]
	cmp r1, r0
	subgt r7, r0, r8
	mov r0, r5
	mov r1, #0
	strgt r7, [sp, #0x74]
	bl MemWrite
	add r0, r5, #8
	bl GetStrLen
	sub r0, r0, #1
	add r0, r5, r0
	ldrsb r0, [r0, #8]
	add r4, sp, #0
	cmp r0, #0x5f
	moveq r0, #1
	streq r0, [sp, #0x78]
	ldr r0, [sp, #0x78]
	cmp r0, #0
	beq _0202F404
	add r2, sp, #0
	add r3, sp, #0x74
	mov r0, sl
	mov r1, r5
	bl FUN_0202fa88
_0202F404:
	mov r0, #3
	str r0, [r5, #0x54]
	mov r0, #0
	str r0, [r5, #4]
	cmp r6, #0
	bne _0202F488
	cmp fp, #0
	strne fp, [r5, #4]
	ldreq r0, [sl, #4]
	ldrb r3, [sp, #0x7c]
	streq r0, [r5, #4]
	ldr r0, [r5, #4]
	ldr r1, [sp, #0x74]
	mov r2, #1
	bl FUN_0202de58
	movs r6, r0
	bne _0202F488
	add r4, sp, #0
_0202F44C:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _0202F44C
	add r0, sl, #8
	bl FUN_02002408
	mov r0, r5
	mov r1, #0
	mov r2, #0x68
	bl MemWrite
	add r0, sl, #8
	bl FUN_02002458
	add sp, sp, #0x48
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0202F488:
	str r6, [r5, #0x48]
	str r7, [r5, #0x50]
	str r8, [r5, #0x4c]
	str r6, [sb]
_0202F498:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _0202F498
	add r0, sl, #8
	bl FUN_02002408
	ldr r0, [sl, #0x940]
	cmp r0, #0
	streq r5, [sl, #0x944]
	streq r5, [sl, #0x940]
	beq _0202F4D8
	ldr r0, [sl, #0x944]
	cmp r0, #0
	strne r5, [r0, #0x64]
	ldrne r0, [sl, #0x944]
	strne r0, [r5, #0x60]
_0202F4D8:
	add r0, sl, #8
	str r5, [sl, #0x944]
	bl FUN_02002458
	mov r0, sl
	bl FUN_0202f794
	mov r0, #1
	bl FUN_02001eb0
	ldr r0, [sp, #0x74]
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0202f500
FUN_0202f500: ; 0x0202F500
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x48
	add r4, sp, #0
	mov r0, r4
	mov r7, r1
	mov r6, r2
	bl FUN_0200dbf0
	mov r0, r4
	ldm r7, {r1, r2}
	bl FUN_0200dd30
	cmp r0, #0
	beq _0202F55C
	ldr r1, [sp, #0x60]
	mov r0, r4
	mov r2, #0
	bl FUN_0200ded0
	ldr r1, [r6]
	ldr r2, [sp, #0x64]
	mov r0, r4
	bl FUN_0200defc
	mov r5, r0
	mov r0, r4
	bl FUN_0200de0c
	arm_func_end FUN_0202f500
_0202F55C:
	mov r0, r5
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0202f568
FUN_0202f568: ; 0x0202F568
	ldr ip, _0202F578 ; =FUN_0200dc64
	mov r0, r1
	mov r1, r2
	bx ip
	.align 2, 0_0202F578: .word FUN_0200dc64
	arm_func_end FUN_0202f568

	arm_func_start FUN_0202f57c
FUN_0202f57c: ; 0x0202F57C
	push {r4, lr}
	mov r4, r0
	bl FUN_0202ef20
	mov r1, r0
	mov r0, r4
	bl FUN_0202f598
	pop {r4, pc}
	arm_func_end FUN_0202f57c

	arm_func_start FUN_0202f598
FUN_0202f598: ; 0x0202F598
	push {r4, r5, r6, lr}
	mov r6, r0
	cmp r1, #0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r2, [r6, #0x24]
	mov r0, #0x68
	mla r4, r1, r0, r2
	ldr r1, [r4, #0x54]
	cmp r1, #0xa
	arm_func_end FUN_0202f598

	arm_func_start switchD
switchD: ; 0x0202F5C0
	addls pc, pc, r1, lsl #2
	b _0202F604
	arm_func_end switchD
_0202F5C8: ; jump table
	b _0202F604 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0202F5CC
	b _0202F604
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0202F5D0
	b _0202F604
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0202F5D4
	b _0202F604
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0202F5D8
	b _0202F604
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0202F5DC
	b _0202F604
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0202F5E0
	b _0202F604
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0202F5E4
	b _0202F5F4
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0202F5E8
	b _0202F5FC
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0202F5EC
	b _0202F5FC
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0202F5F0
	b _0202F5FC
	arm_func_end caseD_a
_0202F5F4:
	mov r5, #0
	b _0202F60C
_0202F5FC:
	sub r5, r0, #0x69
	b _0202F60C
_0202F604:
	mov r0, #1
	pop {r4, r5, r6, pc}
_0202F60C:
	add r0, r6, #8
	bl FUN_02002408
	mov r0, r4
	mov r1, #0
	mov r2, #0x68
	bl MemWrite
	add r0, r6, #8
	bl FUN_02002458
	mov r0, r5
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0202f634
FUN_0202f634: ; 0x0202F634
	ldr ip, [r0, #0x20]
	mov r2, #1
	cmp ip, #1
	ble _0202F670
	ldr r3, [r0, #0x24]
	mov r0, #0x68
	arm_func_end FUN_0202f634
_0202F64C:
	mla r1, r2, r0, r3
	ldr r1, [r1, #0x54]
	cmp r1, #4
	cmpne r1, #6
	moveq r0, #1
	bxeq lr
	add r2, r2, #1
	cmp r2, ip
	blt _0202F64C
_0202F670:
	mov r0, #0
	bx lr

	arm_func_start FUN_0202f678
FUN_0202f678: ; 0x0202F678
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	bl FUN_0202ef20
	mov r1, r0
	mov r0, r5
	mov r2, r4
	bl FUN_0202f69c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0202f678

	arm_func_start FUN_0202f69c
FUN_0202f69c: ; 0x0202F69C
	push {r3, r4, r5, r6, r7, lr}
	movs r5, r1
	mov r7, r0
	mov r6, r2
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r7, #8
	bl FUN_02002408
	ldr r1, [r7, #0x24]
	mov r0, #0x68
	mla r4, r5, r0, r1
	ldr r0, [r4, #0x54]
	mov r5, #1
	cmp r0, #0xa
	arm_func_end FUN_0202f69c

	arm_func_start switchD
switchD: ; 0x0202F6D4
	addls pc, pc, r0, lsl #2
	b _0202F75C
	arm_func_end switchD
_0202F6DC: ; jump table
	b _0202F75C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0202F6E0
	b _0202F75C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0202F6E4
	b _0202F75C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0202F6E8
	b _0202F72C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0202F6EC
	b _0202F708
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0202F6F0
	b _0202F72C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0202F6F4
	b _0202F708
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0202F6F8
	b _0202F75C
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0202F6FC
	b _0202F784
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0202F700
	b _0202F784
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0202F704
	b _0202F75C
	arm_func_end caseD_a
_0202F708:
	cmp r0, #6
	moveq r5, #0
	beq _0202F71C
	add r0, r7, #0x28
	bl FUN_0200dc1c
_0202F71C:
	cmp r6, #0
	movne r0, #9
	strne r0, [r4, #0x54]
	b _0202F784
_0202F72C:
	mov r0, #8
	str r0, [r4, #0x54]
	cmp r6, #0
	beq _0202F784
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _0202F750
	ldr r1, [r4, #0x48]
	bl FUN_0202e1c0
_0202F750:
	mov r0, #0
	str r0, [r4, #0x48]
	b _0202F784
_0202F75C:
	cmp r6, #0
	ldrne r0, [r4, #4]
	cmpne r0, #0
	beq _0202F774
	ldr r1, [r4, #0x48]
	bl FUN_0202e1c0
_0202F774:
	mov r0, r4
	mov r1, #0
	mov r2, #0x68
	bl MemWrite
_0202F784:
	add r0, r7, #8
	bl FUN_02002458
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0202f794
FUN_0202f794: ; 0x0202F794
	ldr ip, _0202F7A0 ; =FUN_02001ce0
	add r0, r0, #0x70
	bx ip
	.align 2, 0_0202F7A0: .word FUN_02001ce0
	arm_func_end FUN_0202f794

	arm_func_start FUN_0202f7a4
FUN_0202f7a4: ; 0x0202F7A4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov fp, #0
	arm_func_end FUN_0202f7a4
_0202F7B0:
	add r0, sl, #8
	bl FUN_02002408
	ldr r0, [sl, #0x940]
	cmp r0, #0
	add r0, sl, #8
	bne _0202F7D8
	bl FUN_02002458
	mov r0, #0
	bl FUN_02001c28
	b _0202F7B0
_0202F7D8:
	bl FUN_02002458
	ldr r5, [sl, #0x940]
	add r0, sl, #0x28
	bl FUN_0200dbf0
	add r1, r5, #0x58
	add r0, sl, #0x28
	ldm r1, {r1, r2}
	bl FUN_0200dd30
	ldr r1, [r5, #0x4c]
	add r0, sl, #0x28
	mov r2, fp
	bl FUN_0200ded0
	ldr r0, [r5, #0x54]
	mov r6, #0xa
	cmp r0, #3
	bne _0202F920
	mov r0, #4
	str r0, [r5, #0x54]
	ldr r0, [r5]
	mov r6, #7
	tst r0, #0xf0
	ldr r0, [sl, #0x938]
	beq _0202F874
	add r0, sl, r0, lsl #2
	ldr r1, [r0, #0x930]
	cmp r1, #0
	beq _0202F858
	mov r0, sl
	bl FUN_0202ef8c
	ldr r0, [sl, #0x938]
	add r0, sl, r0, lsl #2
	str fp, [r0, #0x930]
_0202F858:
	ldr r1, [r5, #0x50]
	mov r0, sl
	bl FUN_0202ef74
	ldr r1, [sl, #0x938]
	add r1, sl, r1, lsl #2
	str r0, [r1, #0x930]
	b _0202F880
_0202F874:
	ldr r1, [r5, #0x48]
	add r0, sl, r0, lsl #2
	str r1, [r0, #0x930]
_0202F880:
	ldr r0, [sl, #0x938]
	ldr r8, [r5, #0x50]
	add r0, sl, r0, lsl #2
	cmp r8, #0
	ldr sb, [r0, #0x930]
	ble _0202F8F0
	mov r4, #0x2000
_0202F89C:
	mov r7, r8
	cmp r8, #0x2000
	movge r7, r4
	ldr r0, [r5, #0x54]
	sub r8, r8, r7
	cmp r0, #8
	cmpne r0, #9
	beq _0202F8F0
	cmp sb, #0
	moveq r6, #0xa
	beq _0202F8F0
	mov r1, sb
	mov r2, r7
	add r0, sl, #0x28
	bl FUN_0200df50
	cmp r0, #0
	movlt r6, #0xa
	blt _0202F8F0
	cmp r8, #0
	add sb, sb, r7
	bgt _0202F89C
_0202F8F0:
	add r0, sl, #0x28
	bl FUN_0200da40
	ldr r0, [sl, #0x3c]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	bne _0202F920
	ldr r0, [r5, #0x54]
	cmp r0, #8
	cmpeq r0, #9
	movne r6, #0xa
_0202F920:
	ldr r0, [r5, #0x54]
	cmp r0, #4
	bne _0202F940
	ldr r1, [r5, #0x50]
	add r0, sl, #0x930
	bl FUN_020026d0
	mov r0, #5
	str r0, [r5, #0x54]
_0202F940:
	add r0, sl, #0x28
	bl FUN_0200de0c
	cmp r0, #0
	beq _0202F940
	add r0, sl, #8
	bl FUN_02002408
	ldr r0, [r5, #0x64]
	str r0, [sl, #0x940]
	str fp, [r5, #0x64]
	ldr r0, [r5, #0x54]
	cmp r0, #5
	bne _0202FA10
	cmp r6, #0xa
	bne _0202F9C0
	ldr r0, [r5]
	tst r0, #0xf0
	ldrne r0, [sl, #0x938]
	addne r0, sl, r0, lsl #2
	ldrne r1, [r0, #0x930]
	cmpne r1, #0
	beq _0202F9A8
	mov r0, sl
	bl FUN_0202ef8c
	ldr r0, [sl, #0x938]
	add r0, sl, r0, lsl #2
	str fp, [r0, #0x930]
_0202F9A8:
	ldr r0, [r5, #4]
	cmp r0, #0
	beq _0202F9BC
	ldr r1, [r5, #0x48]
	bl FUN_0202e1c0
_0202F9BC:
	str r6, [r5, #0x54]
_0202F9C0:
	cmp r6, #7
	bne _0202FA7C
	ldr r0, [r5]
	tst r0, #0xf0
	ldreq r0, [sl, #0x938]
	addeq r0, sl, r0, lsl #2
	streq fp, [r0, #0x930]
	streq r6, [r5, #0x54]
	beq _0202FA7C
	mov r0, #6
	str r0, [r5, #0x54]
	ldr r1, [sl, #0x938]
	mov r0, sl
	eor r2, r1, #1
	mov r1, r5
	str r5, [sl, #0x948]
	str r2, [sl, #0x938]
	bl FUN_0202fb58
	str fp, [sl, #0x948]
	b _0202FA7C
_0202FA10:
	sub r0, r0, #8
	cmp r0, #1
	bhi _0202FA7C
	ldr r0, [r5]
	tst r0, #0xf0
	ldrne r0, [sl, #0x938]
	addne r0, sl, r0, lsl #2
	ldrne r1, [r0, #0x930]
	cmpne r1, #0
	beq _0202FA4C
	mov r0, sl
	bl FUN_0202ef8c
	ldr r0, [sl, #0x938]
	add r0, sl, r0, lsl #2
	str fp, [r0, #0x930]
_0202FA4C:
	ldr r0, [r5, #0x54]
	cmp r0, #9
	bne _0202FA6C
	ldr r0, [r5, #4]
	cmp r0, #0
	beq _0202FA6C
	ldr r1, [r5, #0x48]
	bl FUN_0202e1c0
_0202FA6C:
	mov r0, r5
	mov r1, #0
	mov r2, #0x68
	bl MemWrite
_0202FA7C:
	add r0, sl, #8
	bl FUN_02002458
	b _0202F7B0

	arm_func_start FUN_0202fa88
FUN_0202fa88: ; 0x0202FA88
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r1
	add r0, r7, #8
	mov r1, #0x25
	mov r6, r2
	mov r5, r3
	bl FUN_02024128
	cmp r0, #0
	bne _0202FAF0
	mov r4, #4
	mov r0, r6
	mov r1, r7
	mov r2, r4
	bl FUN_0200defc
	cmp r0, #0
	bge _0202FAE0
	arm_func_end FUN_0202fa88
_0202FAC8:
	mov r0, r6
	bl FUN_0200de0c
	cmp r0, #0
	beq _0202FAC8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0202FAE0:
	mov r0, r6
	sub r1, r4, #8
	mov r2, #1
	bl FUN_0200ded0
_0202FAF0:
	ldr r1, [r7]
	and r0, r1, #0xf0
	cmp r0, #0x20
	bgt _0202FB10
	bge _0202FB44
	cmp r0, #0x10
	beq _0202FB44
	b _0202FB28
_0202FB10:
	cmp r0, #0x30
	bgt _0202FB20
	beq _0202FB44
	b _0202FB28
_0202FB20:
	cmp r0, #0x80
	beq _0202FB44
_0202FB28:
	mov r4, #0
	mov r0, r7
	mov r1, r4
	mov r2, #4
	bl MemWrite
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
_0202FB44:
	cmp r5, #0
	lsrne r0, r1, #8
	strne r0, [r5]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0202fb58
FUN_0202fb58: ; 0x0202FB58
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r2, [r5, #0x938]
	mov r4, r1
	eor r1, r2, #1
	add r1, r5, r1, lsl #2
	ldr r1, [r1, #0x930]
	mov r2, r4
	bl FUN_0202fbe8
	ldr r1, [r5, #0x938]
	mov r0, r5
	eor r1, r1, #1
	add r1, r5, r1, lsl #2
	ldr r1, [r1, #0x930]
	bl FUN_0202ef8c
	ldr r0, [r5, #0x938]
	mov r1, #0
	eor r0, r0, #1
	add r0, r5, r0, lsl #2
	str r1, [r0, #0x930]
	ldr r0, [r4, #0x54]
	cmp r0, #9
	bne _0202FBDC
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _0202FBC8
	ldr r1, [r4, #0x48]
	bl FUN_0202e1c0
	arm_func_end FUN_0202fb58
_0202FBC8:
	mov r0, r4
	mov r1, #0
	mov r2, #0x68
	bl MemWrite
	pop {r3, r4, r5, pc}
_0202FBDC:
	mov r0, #7
	str r0, [r4, #0x54]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202fbe8
FUN_0202fbe8: ; 0x0202FBE8
	push {r3, r4, r5, lr}
	mov r5, r1
	ldr r0, [r5]
	ldr r4, [r2, #0x48]
	and r0, r0, #0xf0
	cmp r0, #0x20
	bgt _0202FC14
	bge _0202FC2C
	cmp r0, #0x10
	beq _0202FC1C
	b _0202FC38
	arm_func_end FUN_0202fbe8
_0202FC14:
	cmp r0, #0x30
	b _0202FC38
_0202FC1C:
	mov r0, r5
	mov r1, r4
	bl LzPkbDecompression
	b _0202FC38
_0202FC2C:
	mov r0, r5
	mov r1, r4
	bl UnkPkbDecompression
_0202FC38:
	ldr r1, [r5]
	mov r0, r4
	lsr r1, r1, #8
	bl FUN_020026d0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0202fc4c
FUN_0202fc4c: ; 0x0202FC4C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r1
	mov r6, r3
	ldr r1, _0202FD30 ; =0x0208FC00
	mov r0, r6
	mov r7, r2
	bl FUN_02023fe0
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r8
	mov r1, r8
	bl FUN_02053914
	mov r0, r8
	mov r1, #0x2f
	bl FUN_02024160
	cmp r0, #0
	addne r8, r0, #1
	mov r0, r8
	mov r1, #0x2f
	bl FUN_02024160
	cmp r0, #0
	addne r8, r0, #1
	ldr r0, [r6, #0x20]
	add r4, r6, #0x20
	sub r0, r0, #0x20
	lsr sb, r0, #4
	cmp sb, #0
	mov r5, #0
	ble _0202FCE8
	arm_func_end FUN_0202fc4c
_0202FCC4:
	ldr r0, [r4, r5, lsl #4]
	mov r1, r8
	add r0, r6, r0
	bl FUN_02023fe0
	cmp r0, #0
	beq _0202FCE8
	add r5, r5, #1
	cmp r5, sb
	blt _0202FCC4
_0202FCE8:
	cmp r5, sb
	movge r0, #0
	popge {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r6, #0x10]
	ldr r1, _0202FD34 ; =0x0208FC04
	add r6, r6, r0
	mov r0, r6
	bl FUN_02023fe0
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r4, r5, lsl #4
	ldr r2, [r6, #0xc]
	ldr r1, [r0, #8]
	ldr r0, [r0, #4]
	mla r1, r2, r1, r6
	str r1, [r7]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0202FD30: .word 0x0208FC00
_0202FD34: .word 0x0208FC04

	arm_func_start FUN_0202fd38
FUN_0202fd38: ; 0x0202FD38
	mov r1, #0
	str r1, [r0]
	bx lr
	arm_func_end FUN_0202fd38

	arm_func_start FUN_0202fd44
FUN_0202fd44: ; 0x0202FD44
	bx lr
	arm_func_end FUN_0202fd44

	arm_func_start SsdLocateStrings
SsdLocateStrings: ; 0x0202FD48
	push {r4, lr}
	mov r4, r0
	cmp r1, #0
	str r1, [r4]
	moveq r0, #0
	popeq {r4, pc}
	cmp r2, #0
	beq _0202FD74
	mov r0, r1
	mov r1, r2
	bl _strcmp
	arm_func_end SsdLocateStrings
_0202FD74:
	ldr lr, [r4]
	mov r0, #0x10000
	ldr r1, [lr, #4]
	rsb r0, r0, #0
	and r0, r1, r0
	cmp r0, #0x20000
	bne _0202FE80
	add r0, lr, #0x20
	sub r3, r0, #0x10
	mov ip, #0
	stmib r4, {r3, ip}
	ldrsh r0, [lr, #0xc]
	cmp r0, #0
	ble _0202FDD8
_0202FDAC:
	ldrsh r1, [r3, #2]
	ldr r2, [r4, #8]
	ldr r0, [r4]
	add r1, r2, r1
	str r1, [r4, #8]
	ldrsh r1, [r3, #2]
	ldrsh r0, [r0, #0xc]
	add ip, ip, #1
	add r3, r3, r1
	cmp ip, r0
	blt _0202FDAC
_0202FDD8:
	ldr r2, [r4, #4]
	ldr r1, [r4, #8]
	mov r3, #0
	add r0, r2, r1
	ldr r1, [r2, r1]
	add r0, r0, #4
	str r1, [r4, #0xc]
	str r0, [r4, #0x14]
	ldrb ip, [r0, #3]
	mov r1, r3
	str ip, [r4, #0x10]
	b _0202FE6C
_0202FE08:
	ldrsh lr, [r2]
	ldrsh ip, [r0]
	cmp lr, ip
	bne _0202FE60
_0202FE18:
	ldrb ip, [r0, #2]
	add lr, r0, #4
	add r1, r1, #1
	add ip, r2, ip, lsl #2
	str lr, [ip, #8]
	ldr ip, [r4, #0xc]
	cmp r1, ip
	bge _0202FE60
	ldrb ip, [r0, #3]
	ldr lr, [r4, #0x10]
	add r0, r0, ip
	ldrb ip, [r0, #3]
	add ip, lr, ip
	str ip, [r4, #0x10]
	ldrsh lr, [r2]
	ldrsh ip, [r0]
	cmp lr, ip
	beq _0202FE18
_0202FE60:
	ldrsh ip, [r2, #2]
	add r3, r3, #1
	add r2, r2, ip
_0202FE6C:
	ldr ip, [r4]
	ldrsh ip, [ip, #0xc]
	cmp r3, ip
	blt _0202FE08
	b _0202FF2C
_0202FE80:
	cmp r0, #0x30000
	bne _0202FF2C
	add r0, lr, #0x20
	str r0, [r4, #4]
	ldr r2, [lr, #0x10]
	mov r1, #0
	str r2, [r4, #8]
	ldrsh ip, [lr, #0xe]
	add r2, r0, r2
	mov r3, r1
	str ip, [r4, #0xc]
	ldr ip, [lr, #0x14]
	str ip, [r4, #0x10]
	str r2, [r4, #0x14]
	b _0202FF10
_0202FEBC:
	ldrsh lr, [r0]
	ldrsh ip, [r2]
	cmp lr, ip
	bne _0202FF04
_0202FECC:
	ldrb ip, [r2, #2]
	add lr, r2, #4
	add r3, r3, #1
	add ip, r0, ip, lsl #2
	str lr, [ip, #8]
	ldrb lr, [r2, #3]
	ldr ip, [r4, #0xc]
	cmp r3, ip
	add r2, r2, lr
	bge _0202FF04
	ldrsh lr, [r0]
	ldrsh ip, [r2]
	cmp lr, ip
	beq _0202FECC
_0202FF04:
	ldrsh ip, [r0, #2]
	add r1, r1, #1
	add r0, r0, ip
_0202FF10:
	ldr ip, [r4]
	ldrsh ip, [ip, #0xc]
	cmp r1, ip
	bge _0202FF2C
	ldr ip, [r4, #0xc]
	cmp r3, ip
	blt _0202FEBC
_0202FF2C:
	mov r0, #1
	pop {r4, pc}

	arm_func_start SsdGetInstructionPtr
SsdGetInstructionPtr: ; 0x0202FF34
	cmp r1, #0
	ldreq r0, [r0, #4]
	bxeq lr
	ldrsh ip, [r1, #2]
	ldm r0, {r2, r3}
	add r0, r1, ip
	ldr r1, [r2, #0x10]
	sub r2, r0, r3
	cmp r2, r1
	movhs r0, #0
	bx lr
	arm_func_end SsdGetInstructionPtr

	arm_func_start FUN_0202ff60
FUN_0202ff60: ; 0x0202FF60
	ldr r2, [r0]
	ldr r0, [r0, #4]
	ldrsh ip, [r2, #0xc]
	mov r3, #0
	cmp ip, #0
	ble _0202FF98
	arm_func_end FUN_0202ff60
_0202FF78:
	ldrsh r2, [r0, #4]
	cmp r2, r1
	beq _0202FF98
	ldrsh r2, [r0, #2]
	add r3, r3, #1
	cmp r3, ip
	add r0, r0, r2
	blt _0202FF78
_0202FF98:
	cmp r3, ip
	moveq r0, #0
	bx lr

	arm_func_start FUN_0202ffa4
FUN_0202ffa4: ; 0x0202FFA4
	push {r4, r5, r6, lr}
	mov r6, r0
	add r0, r6, #0x348
	mov r5, #0
	mov r4, #0x1c
	mov r1, r5
	mov r2, r4
	add r0, r0, #0x1000
	bl MemWrite
	add r0, r6, #0x32c
	mov r1, r5
	mov r2, r4
	add r0, r0, #0x1000
	bl MemWrite
	add r0, r6, #0x3d0
	mov r1, r5
	add r0, r0, #0x1000
	mov r2, #0x10
	bl MemWrite
	add r0, r6, #0x870
	mov r1, r5
	add r0, r0, #0x2000
	mov r2, #0x900
	bl MemWrite
	mov r0, r6
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0202ffa4

	arm_func_start FUN_0203000c
FUN_0203000c: ; 0x0203000C
	bx lr
	arm_func_end FUN_0203000c

	arm_func_start FUN_02030010
FUN_02030010: ; 0x02030010
	add r3, r0, #0x4000
	ldr r3, [r3, #0x280]
	add r0, r0, #0x4200
	strh r1, [r0, #0x5c]
	cmp r3, #0
	ldrhne r1, [r0, #0x5c]
	strh r2, [r0, #0x5e]
	orrne r1, r1, #0x4000
	strhne r1, [r0, #0x5c]
	mov r0, #0
	bx lr
	arm_func_end FUN_02030010

	arm_func_start FUN_0203003c
FUN_0203003c: ; 0x0203003C
	push {r3, r4, r5, lr}
	add r3, r0, #0x4000
	mov r2, #0
	str r2, [r3, #0x27c]
	str r2, [r3, #0x280]
	ldrh r2, [r1, #4]
	cmp r2, #1
	bne _020300C8
	ldrh r4, [r1]
	add r2, r0, #0x4200
	strh r4, [r2, #0x60]
	ldrh r4, [r1, #2]
	strh r4, [r2, #0x62]
	ldrh r4, [r1, #4]
	strh r4, [r2, #0x64]
	ldrh r4, [r1, #6]
	strh r4, [r2, #0x66]
	ldrh r1, [r1, #6]
	cmp r1, #0
	ldreq r1, [r3, #0x278]
	cmpeq r1, #0
	bne _020300BC
	ldrh lr, [r2, #0x60]
	ldrh ip, [r2, #0x62]
	ldrh r5, [r2, #0x64]
	ldrh r4, [r2, #0x66]
	mov r1, #1
	strh lr, [r2, #0x68]
	strh ip, [r2, #0x6a]
	strh r5, [r2, #0x6c]
	strh r4, [r2, #0x6e]
	str r1, [r3, #0x27c]
	arm_func_end FUN_0203003c
_020300BC:
	add r0, r0, #0x4000
	mov r1, #1
	b _02030108
_020300C8:
	ldr r1, [r3, #0x278]
	cmp r1, #0
	beq _02030100
	add r1, r0, #0x4200
	ldrh r5, [r1, #0x60]
	ldrh r4, [r1, #0x62]
	ldrh lr, [r1, #0x64]
	ldrh ip, [r1, #0x66]
	mov r2, #1
	strh r5, [r1, #0x70]
	strh r4, [r1, #0x72]
	strh lr, [r1, #0x74]
	strh ip, [r1, #0x76]
	str r2, [r3, #0x280]
_02030100:
	add r0, r0, #0x4000
	mov r1, #0
_02030108:
	str r1, [r0, #0x278]
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02030114
FUN_02030114: ; 0x02030114
	push {r3, r4, r5, lr}
	ldr r4, [sp, #0x10]
	ldr lr, [sp, #0x14]
	cmp r1, #4
	mov ip, #0
	arm_func_end FUN_02030114

	arm_func_start switchD
switchD: ; 0x02030128
	addls pc, pc, r1, lsl #2
	b _02030258
	arm_func_end switchD
_02030130: ; jump table
	b LAB_02030144 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02030134
	b _02030170
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02030138
	b _0203018C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203013C
	b _020301B8
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02030140
	b _02030204
	arm_func_end caseD_4
LAB_02030144:
	add r1, r0, #0x4000
	ldr r1, [r1, #0x278]
	cmp r1, #0
	beq _02030258
	add r0, r0, #0x4200
	ldrh r1, [r0, #0x60]
	cmp r1, r2
	ldrhge r0, [r0, #0x62]
	cmpge r0, r3
	blt _02030258
	b _0203024C
_02030170:
	add r0, r0, #0x4200
	ldrh r1, [r0, #0x68]
	cmp r1, r2
	ldrhge r0, [r0, #0x6a]
	cmpge r0, r3
	blt _02030258
	b _0203024C
_0203018C:
	add r1, r0, #0x4000
	ldr r1, [r1, #0x278]
	cmp r1, #0
	bne _02030258
	add r0, r0, #0x4200
	ldrh r1, [r0, #0x70]
	cmp r1, r2
	ldrhge r0, [r0, #0x72]
	cmpge r0, r3
	blt _02030258
	b _0203024C
_020301B8:
	add r1, r0, #0x4000
	ldr r1, [r1, #0x278]
	cmp r1, #0
	beq _02030258
	add r0, r0, #0x4200
	ldrh r5, [r0, #0x68]
	cmp r5, r2
	ldrhge r1, [r0, #0x6a]
	cmpge r1, r3
	blt _02030258
	cmp r5, r4
	cmple r1, lr
	bgt _02030258
	ldrh r1, [r0, #0x60]
	cmp r1, r2
	ldrhge r0, [r0, #0x62]
	cmpge r0, r3
	blt _02030258
	b _0203024C
_02030204:
	add r1, r0, #0x4000
	ldr r1, [r1, #0x278]
	cmp r1, #0
	bne _02030258
	add r0, r0, #0x4200
	ldrh r5, [r0, #0x68]
	cmp r5, r2
	ldrhge r1, [r0, #0x6a]
	cmpge r1, r3
	blt _02030258
	cmp r5, r4
	cmple r1, lr
	bgt _02030258
	ldrh r1, [r0, #0x70]
	cmp r1, r2
	ldrhge r0, [r0, #0x72]
	cmpge r0, r3
	blt _02030258
_0203024C:
	cmp r1, r4
	cmple r0, lr
	movle ip, #1
_02030258:
	mov r0, ip
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02030260
FUN_02030260: ; 0x02030260
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x28
	ldr r5, _0203039C ; =0x0208FCB8
	add r4, sp, #0xc
	mov r8, r0
	mov r6, r4
	ldm r5!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldm r5, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	mov r7, #0
	ldr r2, _020303A0 ; =0x0000131C
	mov r1, r7
	add r0, r8, #0x10
	bl MemWrite
	add r0, r8, #0x348
	mov r4, #0x1c
	add r0, r0, #0x1000
	mov r1, r7
	mov r2, r4
	bl MemWrite
	add r0, r8, #0x32c
	mov r2, r4
	add r0, r0, #0x1000
	mov r1, r7
	bl MemWrite
	add r0, r8, #0x3d0
	add r0, r0, #0x1000
	mov r1, r7
	mov r2, #0x10
	bl MemWrite
	add r0, r8, #0x870
	add r0, r0, #0x2000
	mov r1, r7
	mov r2, #0x900
	bl MemWrite
	add r0, r8, #0xf0
	add r0, r0, #0x2000
	mov r1, r7
	mov r2, #0x780
	bl MemWrite
	mov r5, r7
	mov r4, #5
	ldr sl, _020303A4 ; =0x0209A200
	ldr sb, _020303A8 ; =0x02099F38
	b _02030344
	arm_func_end FUN_02030260
_02030318:
	ldr r3, [r6, r7, lsl #2]
	ldr r2, [sl]
	ldr r0, [sb]
	mov r1, r4
	str r5, [sp]
	str r5, [sp, #4]
	str r5, [sp, #8]
	bl FUN_02058684
	add r1, r8, r7, lsl #2
	str r0, [r1, #0x14]
	add r7, r7, #1
_02030344:
	cmp r7, #7
	blt _02030318
	add r0, r8, #0x3f0
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x30
	bl MemWrite
	ldr r0, _020303A8 ; =0x02099F38
	mov r1, #8
	ldr r0, [r0]
	mov r2, #1
	bl FUN_02112724
	add r1, r8, #0x1000
	ldr r2, _020303AC ; =0x02099F58
	str r0, [r1, #0x3e4]
	ldr r0, [r2]
	mov r1, #0x20
	bl FUN_021169B0
	add r1, r8, #0x1000
	str r0, [r1, #0x3ec]
	add sp, sp, #0x28
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0203039C: .word 0x0208FCB8
_020303A0: .word 0x0000131C
_020303A4: .word 0x0209A200
_020303A8: .word 0x02099F38
_020303AC: .word 0x02099F58

	arm_func_start LAB_020303b0
LAB_020303b0: ; 0x020303B0
	ldr ip, _020303B8 ; =FUN_020326e8
	bx ip
	.align 2, 0_020303B8: .word FUN_020326e8
	arm_func_end LAB_020303b0

	arm_func_start FUN_020303bc
FUN_020303bc: ; 0x020303BC
	push {r4, lr}
	mov r4, r0
	bl FUN_02031a2c
	mov r0, r4
	bl FUN_02032d34
	mov r0, r4
	bl FUN_020362e0
	ldr r0, _02030434 ; =0x02099F44
	ldr r0, [r0]
	cmp r0, #0
	beq _020303F0
	mov r0, r4
	bl FUN_0214BD84
	arm_func_end FUN_020303bc
_020303F0:
	mov r0, r4
	bl FUN_02036934
	mov r0, r4
	bl FUN_02037170
	mov r0, r4
	bl FUN_020375c4
	mov r0, r4
	bl FUN_020359c0
	mov r0, r4
	bl FUN_02038600
	mov r0, r4
	bl FUN_020397b4
	mov r0, r4
	bl FUN_02039f08
	mov r0, r4
	bl FUN_0203ad60
	pop {r4, pc}
	.align 2, 0_02030434: .word 0x02099F44

	arm_func_start FUN_02030438
FUN_02030438: ; 0x02030438
	push {r4, lr}
	mov r4, #0
	mov r2, #0x48
	arm_func_end FUN_02030438
_02030444:
	mla r3, r4, r2, r0
	add r3, r3, #0x2000
	ldr ip, [r3, #0x870]
	add lr, r1, r4, lsl #4
	str ip, [r1, r4, lsl #4]
	ldr ip, [r3, #0x874]
	add r4, r4, #1
	str ip, [lr, #4]
	ldr ip, [r3, #0x898]
	cmp r4, #0x20
	str ip, [lr, #8]
	ldr r3, [r3, #0x89c]
	str r3, [lr, #0xc]
	blt _02030444
	pop {r4, pc}

	arm_func_start FUN_02030480
FUN_02030480: ; 0x02030480
	push {r3, r4, r5, lr}
	add r2, r0, #0x870
	mov r4, #0
	add r5, r2, #0x2000
	mov r3, r4
	arm_func_end FUN_02030480
_02030494:
	ldr r2, [r1, r4, lsl #4]
	add lr, r1, r4, lsl #4
	str r2, [r5]
	ldr ip, [lr, #4]
	add r4, r4, #1
	str ip, [r5, #4]
	ldr r2, [lr, #8]
	cmp ip, #0
	str r2, [r5, #0x28]
	ldr r2, [lr, #0xc]
	str r2, [r5, #0x2c]
	strh r3, [r5, #0xa]
	ldrhne r2, [r5, #0xa]
	orrne r2, r2, #1
	strhne r2, [r5, #0xa]
	cmp r4, #0x20
	add r5, r5, #0x48
	blt _02030494
	bl FUN_02037c58
	pop {r3, r4, r5, pc}

	arm_func_start FUN_020304e4
FUN_020304e4: ; 0x020304E4
	push {r4, r5, r6, lr}
	mov r4, r0
	mov r0, r1
	mov r6, r2
	str r1, [r4]
	mov r5, #1
	bl FUN_02041fec
	str r0, [r4, #4]
	bl FUN_02029d54
	cmp r0, #2
	beq _0203052C
	cmp r0, #3
	beq _02030524
	cmp r0, #0x6b
	beq _02030530
	b _02030538
	arm_func_end FUN_020304e4
_02030524:
	mov r0, #0x84
	b _0203053C
_0203052C:
	b _02030530
_02030530:
	mov r0, #0x36
	b _0203053C
_02030538:
	mov r0, #0x83
_0203053C:
	str r0, [r4, #8]
	str r5, [r4, #0xc]
	mov r0, r4
	mov r1, r6
	bl FUN_02032e30
	ldr r0, _02030580 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _02030570
	mov r1, #1
	mov r0, r4
	mov r2, r1
	bl FUN_0203ba04
_02030570:
	add r0, r4, #0x4000
	mov r1, #0
	strb r1, [r0, #0x254]
	pop {r4, r5, r6, pc}
	.align 2, 0_02030580: .word 0x02099EF0

	arm_func_start FUN_02030584
FUN_02030584: ; 0x02030584
	push {r4, lr}
	mov r4, r0
	bl FUN_02031a2c
	mov r0, r4
	bl FUN_02032f3c
	mov r0, r4
	bl FUN_020362e0
	ldr r0, _0203062C ; =0x02099F44
	ldr r0, [r0]
	cmp r0, #0
	beq _020305B8
	mov r0, r4
	bl FUN_0214BD84
	arm_func_end FUN_02030584
_020305B8:
	mov r0, r4
	bl FUN_02036934
	mov r0, r4
	bl FUN_02037170
	mov r0, r4
	bl FUN_020375c4
	mov r0, r4
	bl FUN_020359c0
	mov r0, r4
	bl FUN_02038600
	mov r0, r4
	bl FUN_020397b4
	mov r0, r4
	bl FUN_02039f08
	mov r0, r4
	bl FUN_0203ad60
	ldr r0, _02030630 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _0203061C
	bl FUN_02029d54
	cmp r0, #2
	bne _0203061C
	mov r0, r4
	bl FUN_0203b888
_0203061C:
	ldr r0, _02030634 ; =0x02099EB8
	ldr r0, [r0]
	bl FUN_02052928
	pop {r4, pc}
	.align 2, 0_0203062C: .word 0x02099F44
_02030630: .word 0x02099EF0
_02030634: .word 0x02099EB8

	arm_func_start FUN_02030638
FUN_02030638: ; 0x02030638
	push {r4, lr}
	ldr r1, _02030730 ; =0x0209A110
	mov r4, r0
	ldr r2, [r1]
	add r1, r4, #0x1000
	str r2, [r1, #0x3e0]
	bl FUN_02031b1c
	mov r0, r4
	bl FUN_0203ab80
	add r1, r4, #0x4200
	add r0, r4, #0x4000
	ldrh r2, [r1, #0x5c]
	ldr r1, _02030734 ; =0x000003F3
	ldr r3, [r0, #0x280]
	and r1, r2, r1
	mov r0, r4
	orr r1, r3, r1
	bl FUN_02033148
	mov r0, r4
	bl FUN_02035a3c
	mov r0, r4
	bl FUN_02036348
	ldr r0, _02030738 ; =0x02099F44
	ldr r0, [r0]
	cmp r0, #0
	beq _020306A8
	mov r0, r4
	bl FUN_0214BDD0
	arm_func_end FUN_02030638
_020306A8:
	mov r0, r4
	bl FUN_02036998
	mov r0, r4
	bl FUN_020371cc
	mov r0, r4
	bl FUN_02038670
	mov r0, r4
	bl FUN_02039868
	mov r0, r4
	bl FUN_0203a058
	mov r0, r4
	bl FUN_0203a51c
	mov r0, r4
	bl FUN_0203de60
	ldr r0, _0203073C ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _0203071C
	bl FUN_0213AEFC
	cmp r0, #0
	beq _0203071C
	bl FUN_02029d54
	cmp r0, #2
	bne _0203071C
	bl FUN_020F2AA4
	cmp r0, #0
	bne _0203071C
	mov r0, r4
	bl FUN_0203addc
_0203071C:
	mov r0, r4
	bl FUN_020379cc
	mov r0, r4
	bl FUN_02038bac
	pop {r4, pc}
	.align 2, 0_02030730: .word 0x0209A110
_02030734: .word 0x000003F3
_02030738: .word 0x02099F44
_0203073C: .word 0x02099EF0

	arm_func_start FUN_02030740
FUN_02030740: ; 0x02030740
	push {r3, r4, r5, r6, r7, lr}
	cmp r0, #0
	mov r6, #0
	bls _02030788
	asr r7, r3, #0x1f
	arm_func_end FUN_02030740
_02030754:
	sub ip, r1, r2
	umull r4, lr, ip, r3
	mla lr, ip, r7, lr
	asr ip, ip, #0x1f
	adds r5, r4, #0x800
	mla lr, ip, r3, lr
	adc r4, lr, #0
	lsr r5, r5, #0xc
	orr r5, r5, r4, lsl #20
	add r6, r6, #1
	cmp r6, r0
	add r2, r2, r5
	blo _02030754
_02030788:
	mov r0, r2
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02030790
FUN_02030790: ; 0x02030790
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x40
	mov sb, r0
	ldr r0, [sb]
	mov r8, r1
	mov r7, r2
	ldr sl, _02030F40 ; =0x020A9C40
	ldr r4, _02030F44 ; =0x0209A454
	mov r6, #1
	mov r5, #0
	bl FUN_02041fec
	add r1, sb, #0x1000
	str r0, [r1, #0x3e8]
	cmp r8, #0x24
	arm_func_end FUN_02030790

	arm_func_start switchD
switchD: ; 0x020307C8
	addls pc, pc, r8, lsl #2
	b _02030F38
	arm_func_end switchD
_020307D0: ; jump table
	b _02030F38 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020307D4
	b _02030864
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020307D8
	b _020308A0
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020307DC
	b _020308B8
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020307E0
	b _020308E8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020307E4
	b _02030900
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020307E8
	b _02030930
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x020307EC
	b _02030960
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x020307F0
	b _020309DC
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x020307F4
	b _02030A4C
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x020307F8
	b _02030A7C
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x020307FC
	b _02030BD8
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x02030800
	b _02030A64
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x02030804
	b _02030C3C
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x02030808
	b _02030C0C
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0203080C
	b _02030C54
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x02030810
	b _02030AF4
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x02030814
	b _02030B30
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x02030818
	b _02030B68
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0203081C
	b _02030BA0
	arm_func_end caseD_13

	arm_func_start caseD_14
caseD_14: ; 0x02030820
	b _02030F38
	arm_func_end caseD_14

	arm_func_start caseD_15
caseD_15: ; 0x02030824
	b _02030A14
	arm_func_end caseD_15

	arm_func_start caseD_16
caseD_16: ; 0x02030828
	b _02030880
	arm_func_end caseD_16

	arm_func_start caseD_17
caseD_17: ; 0x0203082C
	b _02030F38
	arm_func_end caseD_17

	arm_func_start caseD_18
caseD_18: ; 0x02030830
	b _02030CC4
	arm_func_end caseD_18

	arm_func_start caseD_19
caseD_19: ; 0x02030834
	b _02030CF4
	arm_func_end caseD_19

	arm_func_start caseD_1a
caseD_1a: ; 0x02030838
	b _02030D50
	arm_func_end caseD_1a

	arm_func_start caseD_1b
caseD_1b: ; 0x0203083C
	b _02030D80
	arm_func_end caseD_1b

	arm_func_start caseD_1c
caseD_1c: ; 0x02030840
	b _020309C4
	arm_func_end caseD_1c

	arm_func_start caseD_1d
caseD_1d: ; 0x02030844
	b _02030DB0
	arm_func_end caseD_1d

	arm_func_start caseD_1e
caseD_1e: ; 0x02030848
	b _02030DFC
	arm_func_end caseD_1e

	arm_func_start caseD_1f
caseD_1f: ; 0x0203084C
	b _02030E28
	arm_func_end caseD_1f

	arm_func_start caseD_20
caseD_20: ; 0x02030850
	b _02030E40
	arm_func_end caseD_20

	arm_func_start caseD_21
caseD_21: ; 0x02030854
	b _02030AB8
	arm_func_end caseD_21

	arm_func_start caseD_22
caseD_22: ; 0x02030858
	b _02030E98
	arm_func_end caseD_22

	arm_func_start caseD_23
caseD_23: ; 0x0203085C
	b _02030ED8
	arm_func_end caseD_23

	arm_func_start caseD_24
caseD_24: ; 0x02030860
	b _02030F10
	arm_func_end caseD_24
_02030864:
	str r6, [r4, #0x24]
	ldr r0, [sb]
	mov r1, r5
	mov r2, #0x60
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030880:
	mov r0, #5
	str r0, [r4, #0x24]
	ldr r0, [sb]
	mov r1, r5
	mov r2, #0x60
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020308A0:
	ldr r0, [sb]
	mov r1, r5
	mov r2, #0x85
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020308B8:
	ldr r5, [sb]
	mov r4, #0x86
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020308E8:
	ldr r0, [sb]
	mov r1, r5
	mov r2, #0x88
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030900:
	ldr r5, [sb]
	mov r4, #0x89
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030930:
	ldr r5, [sb]
	mov r4, #0x61
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030960:
	cmp r7, #0
	bne _02030974
	ldr r0, _02030F48 ; =0x02099ED8
	mov r1, r5
	b _0203097C
_02030974:
	ldr r0, _02030F48 ; =0x02099ED8
	mov r1, r6
_0203097C:
	ldr r0, [r0]
	bl FUN_020CD104
	ldr r0, _02030F48 ; =0x02099ED8
	mov r1, r7
	ldr r0, [r0]
	bl FUN_020CD0EC
	ldr r5, [sb]
	mov r4, #0x8a
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, #1
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020309C4:
	ldr r0, [sb]
	mov r1, r5
	mov r2, #0x8f
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020309DC:
	mov r1, r5
	str r1, [r4, #8]
	strb r1, [r4, #0xc]
	mov r0, #2
	str r0, [r4, #4]
	strb r1, [r4, #0x1e]
	strb r1, [r4, #0x1f]
	strb r1, [r4, #0x20]
	strb r1, [r4, #0x1d]
	ldr r0, [sb]
	mov r2, #0x5f
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030A14:
	mov r1, r5
	str r1, [r4, #8]
	strb r1, [r4, #0xc]
	mov r0, #3
	str r0, [r4, #4]
	strb r1, [r4, #0x1e]
	strb r1, [r4, #0x1f]
	strb r1, [r4, #0x20]
	strb r1, [r4, #0x1d]
	ldr r0, [sb]
	mov r2, #0x5f
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030A4C:
	ldr r0, [sb]
	mov r1, r5
	mov r2, #0x64
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030A64:
	ldr r0, [sb]
	mov r1, r5
	mov r2, #0x65
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030A7C:
	ldr r0, _02030F40 ; =0x020A9C40
	mov r1, r7
	bl FUN_020460f0
	ldr r5, [sb]
	mov r4, #0x66
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030AB8:
	ldr r0, _02030F40 ; =0x020A9C40
	mov r1, r7
	bl FUN_020460f0
	ldr r5, [sb]
	mov r4, #0x7b
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030AF4:
	ldr r0, _02030F40 ; =0x020A9C40
	orr r1, r7, #0x80000000
	bl FUN_020460f0
	ldr r5, [sb]
	mov r4, #0x66
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030B30:
	ldr r0, _02030F40 ; =0x020A9C40
	mov r1, r7
	bl FUN_020460f0
	ldr r4, [sb]
	mov r1, r5
	mov r0, r4
	mov r2, #0x6c
	bl FUN_02041ef0
	mov r0, r4
	mov r1, r6
	mov r2, #0x5d
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030B68:
	ldr r0, _02030F40 ; =0x020A9C40
	mov r1, r7
	bl FUN_020460f0
	ldr r4, [sb]
	mov r1, r5
	mov r0, r4
	mov r2, #0x6b
	bl FUN_02041ef0
	mov r0, r4
	mov r2, r5
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030BA0:
	ldr r0, _02030F40 ; =0x020A9C40
	mov r1, r7
	bl FUN_020460f0
	ldr r4, [sb]
	mov r1, r5
	mov r0, r4
	mov r2, #0x6e
	bl FUN_02041ef0
	mov r0, r4
	mov r1, r6
	mov r2, #0x5d
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030BD8:
	strb r7, [r4, #0x3a]
	ldr r5, [sb]
	mov r4, #0x8b
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030C0C:
	ldr r5, [sb]
	mov r4, #0x8c
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030C3C:
	ldr r0, [sb]
	mov r1, r5
	mov r2, #0x68
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030C54:
	ldr r3, _02030F4C ; =0x0208FCF8
	add r5, sp, #0
	mov r2, #5
_02030C60:
	ldrb r0, [r3, #1]
	ldrb r1, [r3], #2
	subs r2, r2, #1
	strb r0, [r5, #1]
	strb r1, [r5], #2
	bne _02030C60
	mvn r5, #0
	add r1, sp, #0
	mov r0, sl
	mov r2, r5
	bl FUN_02045938
	mov r1, #0
	strh r7, [sl]
	str r1, [r4]
	ldr r0, [sb]
	mov r2, #0x5e
	bl FUN_02041eac
	ldr r0, _02030F50 ; =0x020AF81C
	mov r1, r5
	mov r2, r5
	bl FUN_02044e40
	add r0, sb, #0x1000
	add sp, sp, #0x40
	str r5, [r0, #0x3e8]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030CC4:
	ldr r5, [sb]
	mov r4, #0x87
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030CF4:
	bl FUN_020F081C
	strb r6, [r4, #0x2e]
	strb r6, [r4, #0x2f]
	mov r1, r5
	strb r1, [r4, #0x30]
	strb r1, [r4, #0x31]
	strb r1, [r4, #0x32]
	strb r1, [r4, #0x33]
	strb r0, [r4, #0x28]
	strb r1, [r4, #0x29]
	strb r6, [r4, #0x2a]
	strb r1, [r4, #0x2b]
	ldr r5, [sb]
	mov r4, #0x5a
	mov r0, r5
	mov r2, r4
	bl FUN_02041ef0
	mov r0, r5
	mov r1, r6
	mov r2, r4
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030D50:
	ldr r5, [sb]
	mov r4, #0x72
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030D80:
	ldr r5, [sb]
	mov r4, #0x73
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030DB0:
	ldr r5, [sb]
	mov r4, #0x61
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041eac
	mov r0, r5
	mov r1, r6
	mov r2, r4
	bl FUN_02041eac
	sub r4, r6, #2
	ldr r0, _02030F50 ; =0x020AF81C
	mov r1, r4
	mov r2, r4
	bl FUN_02044e40
	add r0, sb, #0x1000
	add sp, sp, #0x40
	str r4, [r0, #0x3e8]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030DFC:
	ldr r4, [sb]
	mov r1, r5
	mov r0, r4
	mov r2, #0x3d
	bl FUN_02041eac
	mov r0, r4
	mov r2, r5
	mov r1, r6
	bl FUN_02041eac
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030E28:
	ldr r0, [sb]
	mov r1, r6
	mov r2, #0x83
	bl FUN_02041eac
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030E40:
	ldr r7, [sb]
	mov r1, r5
	mov r0, r7
	bl FUN_02041f2c
	mov r0, r7
	mov r1, r6
	bl FUN_02041f2c
	sub r6, r6, #2
	ldr r0, _02030F50 ; =0x020AF81C
	mov r1, r6
	mov r2, r6
	bl FUN_02044e40
	add r0, sb, #0x1000
	str r6, [r0, #0x3e8]
	strb r5, [r4, #0x34]
	strh r5, [r4, #0x2c]
	strb r5, [r4, #0x35]
	strb r5, [r4, #0x36]
	strb r5, [r4, #0x37]
	add sp, sp, #0x40
	strb r5, [r4, #0x38]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030E98:
	ldr r0, _02030F48 ; =0x02099ED8
	mov r1, r7
	ldr r0, [r0]
	bl FUN_020CD0EC
	ldr r5, [sb]
	mov r4, #0x8e
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030ED8:
	mov r1, r5
	str r1, [r4, #8]
	strb r1, [r4, #0xc]
	mov r0, #4
	str r0, [r4, #4]
	strb r1, [r4, #0x1e]
	strb r6, [r4, #0x1f]
	strb r1, [r4, #0x20]
	strb r1, [r4, #0x1d]
	ldr r0, [sb]
	mov r2, #0x5f
	bl FUN_02041ef0
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02030F10:
	ldr r5, [sb]
	mov r4, #0x79
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02041ef0
	mov r0, r5
	mov r2, r4
	mov r1, r6
	bl FUN_02041ef0
_02030F38:
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02030F40: .word 0x020A9C40
_02030F44: .word 0x0209A454
_02030F48: .word 0x02099ED8
_02030F4C: .word 0x0208FCF8
_02030F50: .word 0x020AF81C

	arm_func_start FUN_02030f54
FUN_02030f54: ; 0x02030F54
	push {r4, lr}
	mov r4, r0
	bl FUN_020F1670
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	add r0, r4, #0x1000
	ldr r0, [r0, #0x3e8]
	cmp r0, #0
	movlt r0, #1
	poplt {r4, pc}
	ldr r0, [r4]
	bl FUN_02041fec
	add r1, r4, #0x1000
	ldr r1, [r1, #0x3e8]
	cmp r1, r0
	moveq r0, #1
	movne r0, #0
	pop {r4, pc}
	arm_func_end FUN_02030f54

	arm_func_start FUN_02030fa0
FUN_02030fa0: ; 0x02030FA0
	push {r4, lr}
	bl FUN_02029d54
	cmp r0, #2
	popne {r4, pc}
	ldr r4, _02030FD8 ; =0x020AF81C
	mov r0, r4
	bl FUN_0204457c
	ldr r3, _02030FDC ; =0x020B581C
	mov r2, #0
	mov r0, r4
	mov r1, #0x3d
	str r2, [r3, #0x220]
	bl FUN_02044e40
	pop {r4, pc}
	.align 2, 0_02030FD8: .word 0x020AF81C
_02030FDC: .word 0x020B581C
	arm_func_end FUN_02030fa0

	arm_func_start FUN_02030fe0
FUN_02030fe0: ; 0x02030FE0
	push {r4, r5, r6, lr}
	mov r6, r0
	cmp r1, #0
	beq _02031004
	cmp r1, #1
	beq _0203100C
	cmp r1, #2
	ldreq r5, [r6, #0xc]
	b _02031010
	arm_func_end FUN_02030fe0
_02031004:
	ldr r5, [r6, #4]
	b _02031010
_0203100C:
	ldr r5, [r6, #8]
_02031010:
	mov r4, #0
	ldr r0, _02031044 ; =0x020AF81C
	mov r1, r4
	bl FUN_0204451c
	ldr r0, [r6]
	mov r1, r4
	mov r2, r5
	bl FUN_02041eac
	ldr r0, [r6]
	ldr r1, [r0]
	ldr r1, [r1, #0x34]
	blx r1
	pop {r4, r5, r6, pc}
	.align 2, 0_02031044: .word 0x020AF81C

	arm_func_start FUN_02031048
FUN_02031048: ; 0x02031048
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020F1670
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r5]
	bl FUN_02041fec
	mov r4, r0
	ldr r0, [r5]
	bl FUN_0204201c
	cmp r4, r0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02031048

	arm_func_start FUN_02031084
FUN_02031084: ; 0x02031084
	push {r3, r4, r5, lr}
	mov r5, r1
	mov r4, r2
	cmp r5, #0x20
	bgt _020310C4
	bge _02031118
	cmp r5, #0x12
	bgt _0203114C
	cmp r5, #0x10
	blt _0203114C
	beq _020310E0
	cmp r5, #0x11
	beq _0203110C
	cmp r5, #0x12
	beq _02031110
	b _0203114C
	arm_func_end FUN_02031084
_020310C4:
	cmp r5, #0x21
	bgt _020310D4
	beq _02031144
	b _0203114C
_020310D4:
	cmp r5, #0x22
	beq _02031148
	b _0203114C
_020310E0:
	ldr r0, _020311B4 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _020310FC
	bl FUN_021434F8
	cmp r0, #0
	bne _02031104
_020310FC:
	bl FUN_020F1320
	b _0203114C
_02031104:
	bl FUN_020F1300
	b _0203114C
_0203110C:
	b _02031104
_02031110:
	bl FUN_020F1310
	b _0203114C
_02031118:
	ldr r0, _020311B4 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _02031134
	bl FUN_021434F8
	cmp r0, #0
	bne _0203113C
_02031134:
	bl FUN_020F13D4
	b _0203114C
_0203113C:
	bl FUN_020F13B4
	b _0203114C
_02031144:
	b _0203113C
_02031148:
	bl FUN_020F13C4
_0203114C:
	ands r0, r5, #0xf
	beq _02031168
	cmp r0, #1
	beq _0203119C
	cmp r0, #2
	beq _020311A8
	pop {r3, r4, r5, pc}
_02031168:
	ldr r0, _020311B4 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _02031184
	bl FUN_021434F8
	cmp r0, #0
	bne _02031190
_02031184:
	mov r0, r4
	bl FUN_020F1490
	pop {r3, r4, r5, pc}
_02031190:
	mov r0, r4
	bl FUN_020F1468
	pop {r3, r4, r5, pc}
_0203119C:
	mov r0, r4
	bl FUN_020F1468
	pop {r3, r4, r5, pc}
_020311A8:
	mov r0, r4
	bl FUN_020F147C
	pop {r3, r4, r5, pc}
	.align 2, 0_020311B4: .word 0x02099EF0

	arm_func_start FUN_020311b8
FUN_020311b8: ; 0x020311B8
	push {r4, lr}
	mov r4, r2
	cmp r1, #0x12
	bgt _0203120C
	bge _02031270
	cmp r1, #0x10
	bgt _02031200
	bge _02031230
	cmp r1, #2
	popgt {r4, pc}
	cmp r1, #0
	poplt {r4, pc}
	beq _02031230
	cmp r1, #1
	beq _02031264
	cmp r1, #2
	beq _02031270
	pop {r4, pc}
	arm_func_end FUN_020311b8
_02031200:
	cmp r1, #0x11
	beq _02031264
	pop {r4, pc}
_0203120C:
	cmp r1, #0x21
	bgt _02031224
	bge _020312B0
	cmp r1, #0x20
	beq _0203127C
	pop {r4, pc}
_02031224:
	cmp r1, #0x22
	beq _020312BC
	pop {r4, pc}
_02031230:
	ldr r0, _020312C8 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _0203124C
	bl FUN_021434F8
	cmp r0, #0
	bne _02031258
_0203124C:
	mov r0, r4
	bl FUN_020F153C
	pop {r4, pc}
_02031258:
	mov r0, r4
	bl FUN_020F1514
	pop {r4, pc}
_02031264:
	mov r0, r4
	bl FUN_020F1514
	pop {r4, pc}
_02031270:
	mov r0, r4
	bl FUN_020F1528
	pop {r4, pc}
_0203127C:
	ldr r0, _020312C8 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _02031298
	bl FUN_021434F8
	cmp r0, #0
	bne _020312A4
_02031298:
	mov r0, r4
	bl FUN_020F15DC
	pop {r4, pc}
_020312A4:
	mov r0, r4
	bl FUN_020F15B4
	pop {r4, pc}
_020312B0:
	mov r0, r4
	bl FUN_020F15B4
	pop {r4, pc}
_020312BC:
	mov r0, r4
	bl FUN_020F15C8
	pop {r4, pc}
	.align 2, 0_020312C8: .word 0x02099EF0

	arm_func_start thunk_EXT_FUN_020f1670
thunk_EXT_FUN_020f1670: ; 0x020312CC
	ldr ip, _020312D4 ; =FUN_020F1670
	bx ip
	.align 2, 0_020312D4: .word FUN_020F1670
	arm_func_end thunk_EXT_FUN_020f1670

	arm_func_start FUN_020312d8
FUN_020312d8: ; 0x020312D8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x54
	mov sl, r0
	mov sb, r1
	mov r5, #0x30
	mla r0, sb, r5, sl
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	mov r8, r2
	mov r7, r3
	cmp r1, #0
	beq _02031354
	ldr r4, _02031534 ; =0x02099F38
	ldr r0, [r4]
	bl FUN_020591e8
	mla r0, sb, r5, sl
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [r4]
	bl FUN_02058ee0
	mla r0, sb, r5, sl
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, sl, #0x3f0
	add r0, r0, #0x1000
	mla r0, sb, r5, r0
	mov r2, r5
	mov r1, #0
	bl MemWrite
	arm_func_end FUN_020312d8
_02031354:
	ldr r5, _02031534 ; =0x02099F38
	add r1, sl, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x3e4]
	add r2, sb, #1
	mov r3, #0xa
	bl FUN_02113F7C
	add r1, sl, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x3e4]
	add r2, sb, #1
	mov r3, #0xc8
	bl FUN_021139BC
	add r0, sl, #0x1000
	ldr r1, [r0, #0x3e4]
	ldr r0, [r5]
	add r2, sb, #1
	mov r3, #0x1f
	bl FUN_02113A80
	ldr r0, [r5]
	add r1, sl, #0x1000
	ldr r1, [r1, #0x3e4]
	add r2, sb, #1
	ldr r3, _02031538 ; =0x00007FFF
	bl FUN_02113B00
	mov r6, #0
	str r6, [sp]
	ldr r0, [r5]
	add r1, sl, #0x1000
	ldr r1, [r1, #0x3e4]
	add r2, sb, #1
	mov r3, r6
	bl FUN_02114150
	ldrb r0, [r8, #3]
	ldrb r4, [r8, #2]
	ldrb r3, [r8]
	ldrb r2, [r8, #1]
	ldr r1, _0203153C ; =0x6D62765F
	lsl r2, r2, #0x10
	orr r2, r2, r3, lsl #24
	orr r2, r2, r4, lsl #8
	orr r2, r0, r2
	cmp r2, r1
	beq _02031418
	ldr r0, _02031540 ; =0x7463765F
	mov r4, #0x30
	cmp r2, r0
	beq _0203145C
	b _02031498
_02031418:
	add r4, sp, #0x14
	ldr r1, _02031544 ; =0x0208FD04
	mov r0, r4
	mov r2, r8
	bl FUN_02015184
	ldr r1, _02031548 ; =0x0209A200
	ldr r0, [r5]
	ldr r2, [r1, #0x1c]
	mov r1, #1
	stm sp, {r1, r6}
	mov r3, r4
	mov r1, #5
	str r6, [sp, #8]
	bl FUN_02058684
	mov r1, #0x30
	mla r1, sb, r1, sl
	b _020314D8
_0203145C:
	add fp, sp, #0x14
	ldr r1, _0203154C ; =0x0208FD0C
	mov r0, fp
	mov r2, r8
	bl FUN_02015184
	ldr r1, _02031548 ; =0x0209A200
	ldr r0, [r5]
	ldr r2, [r1, #0x20]
	mov r1, #1
	stm sp, {r1, r6}
	mov r3, fp
	mov r1, #5
	str r6, [sp, #8]
	bl FUN_02058684
	b _020314D4
_02031498:
	add fp, sp, #0x14
	ldr r1, _02031550 ; =0x0208FD14
	mov r0, fp
	mov r2, r8
	bl FUN_02015184
	ldr r0, [r5]
	mov r2, fp
	str r6, [sp]
	str r6, [sp, #4]
	str r6, [sp, #8]
	str r6, [sp, #0xc]
	mov r1, #5
	mov r3, #1
	str r6, [sp, #0x10]
	bl FUN_02058800
_020314D4:
	mla r1, sb, r4, sl
_020314D8:
	add r1, r1, #0x1000
	str r0, [r1, #0x3f0]
	mov r0, #0x30
	mul r4, sb, r0
	add r0, sl, r4
	add r0, r0, #0x1000
	mov r1, #1
	strb r1, [r0, #0x3f6]
	mov r3, #0
	strb r3, [r0, #0x3f4]
	strb r7, [r0, #0x3f5]
	str r3, [r0, #0x400]
	str r3, [r0, #0x404]
	add r1, sl, #0xf7
	ldr r2, [sp, #0x78]
	str r3, [r0, #0x3fc]
	str r2, [r0, #0x3f8]
	add r1, r1, #0x1300
	ldrsb r0, [r1, r4]
	orr r0, r0, #1
	strb r0, [r1, r4]
	add sp, sp, #0x54
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02031534: .word 0x02099F38
_02031538: .word 0x00007FFF
_0203153C: .word 0x6D62765F
_02031540: .word 0x7463765F
_02031544: .word 0x0208FD04
_02031548: .word 0x0209A200
_0203154C: .word 0x0208FD0C
_02031550: .word 0x0208FD14

	arm_func_start FUN_02031554
FUN_02031554: ; 0x02031554
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, #0x30
	mla r0, r6, r5, r7
	add r0, r0, #0x1000
	ldr r0, [r0, #0x3f0]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r4, _020315EC ; =0x02099F38
	add r1, r7, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3e4]
	add r2, r6, #1
	mov r3, #2
	bl FUN_02113F7C
	mla r0, r6, r5, r7
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [r4]
	bl FUN_020591e8
	mla r0, r6, r5, r7
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [r4]
	bl FUN_02058ee0
	mla r0, r6, r5, r7
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, r7, #0x3f0
	add r0, r0, #0x1000
	mla r0, r6, r5, r0
	mov r2, r5
	mov r1, #0
	bl MemWrite
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020315EC: .word 0x02099F38
	arm_func_end FUN_02031554

	arm_func_start FUN_020315f0
FUN_020315f0: ; 0x020315F0
	push {r3, lr}
	mov lr, r1
	mov r1, #0x30
	mla r1, lr, r1, r0
	add r1, r1, #0x1000
	ldr r1, [r1, #0x3f0]
	mov ip, r2
	cmp r1, #0
	popeq {r3, pc}
	and r1, r3, #0xff
	ldr r2, _0203163C ; =0x02099F38
	str r1, [sp]
	add r1, r0, #0x1000
	ldr r0, [r2]
	ldr r1, [r1, #0x3e4]
	add r2, lr, #1
	and r3, ip, #0xff
	bl FUN_02114150
	pop {r3, pc}
	.align 2, 0_0203163C: .word 0x02099F38
	arm_func_end FUN_020315f0

	arm_func_start FUN_02031640
FUN_02031640: ; 0x02031640
	push {r4, r5, r6, r7, r8, lr}
	mov r4, #0x30
	mul r7, r1, r4
	mov r8, r0
	add r0, r8, r7
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	cmp r1, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r1, [sp, #0x1c]
	lsl r3, r3, #0xc
	cmp r1, #0
	ldrne r1, [r0, #0x400]
	ldrne r0, [r0, #0x404]
	lsl r2, r2, #0xc
	addne r3, r3, r0
	ldr r6, [sp, #0x18]
	addne r2, r2, r1
	add r0, r8, r7
	cmp r6, #0
	addeq r0, r0, #0x1000
	streq r2, [r0, #0x400]
	streq r3, [r0, #0x404]
	popeq {r4, r5, r6, r7, r8, pc}
	add ip, r0, #0x1000
	add r0, r8, #8
	add r1, r8, #0xc
	add r4, r1, #0x1400
	str r6, [ip, #0x3fc]
	add r5, r0, #0x1400
	str r2, [r5, r7]
	str r3, [r4, r7]
	ldr r2, [r5, r7]
	ldr r0, [ip, #0x400]
	mov r1, r6
	sub r0, r2, r0
	str r0, [r5, r7]
	ldr r2, [r4, r7]
	ldr r0, [ip, #0x404]
	sub r0, r2, r0
	str r0, [r4, r7]
	ldr r0, [r5, r7]
	bl FUN_0201f9bc
	str r0, [r5, r7]
	ldr r0, [r4, r7]
	mov r1, r6
	bl FUN_0201f9bc
	add r1, r8, #0xf7
	add r1, r1, #0x1300
	str r0, [r4, r7]
	ldrsb r0, [r1, r7]
	orr r0, r0, #0x10
	strb r0, [r1, r7]
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02031640

	arm_func_start FUN_02031718
FUN_02031718: ; 0x02031718
	push {r4, r5, lr}
	sub sp, sp, #0x1c
	cmp r2, #0
	mov r5, r0
	mov r4, r1
	addeq sp, sp, #0x1c
	popeq {r4, r5, pc}
	mov r1, r2
	mov r2, r3
	bl FUN_0214AABC
	cmp r0, #0
	addeq sp, sp, #0x1c
	popeq {r4, r5, pc}
	ldrh r1, [r0, #0xa]
	tst r1, #1
	addeq sp, sp, #0x1c
	popeq {r4, r5, pc}
	ldr r2, _020317EC ; =0x02099ED8
	ldr r1, [r0, #4]
	ldr r0, [r2]
	bl FUN_020552cc
	cmp r0, #0
	addeq sp, sp, #0x1c
	popeq {r4, r5, pc}
	ldr lr, [r0, #0x84]
	ldr r2, [sp, #0x28]
	str lr, [sp, #0x10]
	ldr ip, [r0, #0x88]
	add lr, lr, r2
	str ip, [sp, #0x14]
	ldr r3, [r0, #0x8c]
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x30]
	add ip, ip, r1
	add r3, r3, r0
	add r0, sp, #0x10
	add r1, sp, #0xc
	add r2, sp, #8
	str lr, [sp, #0x10]
	str ip, [sp, #0x14]
	str r3, [sp, #0x18]
	bl FUN_020677a8
	ldr r1, [sp, #0x34]
	mov r0, #0
	str r1, [sp]
	str r0, [sp, #4]
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #8]
	mov r0, r5
	mov r1, r4
	bl FUN_02031640
	add sp, sp, #0x1c
	pop {r4, r5, pc}
	.align 2, 0_020317EC: .word 0x02099ED8
	arm_func_end FUN_02031718

	arm_func_start FUN_020317f0
FUN_020317f0: ; 0x020317F0
	push {r3, lr}
	mov ip, r1
	mov r1, #0x30
	mla r1, ip, r1, r0
	add r1, r1, #0x1000
	ldr r1, [r1, #0x3f0]
	cmp r1, #0
	popeq {r3, pc}
	lsl r1, r3, #0x10
	asr r1, r1, #0x10
	ldr lr, _02031840 ; =0x02099F38
	str r1, [sp]
	add r1, r0, #0x1000
	lsl r3, r2, #0x10
	ldr r0, [lr]
	ldr r1, [r1, #0x3e4]
	add r2, ip, #1
	asr r3, r3, #0x10
	bl FUN_02113C60
	pop {r3, pc}
	.align 2, 0_02031840: .word 0x02099F38
	arm_func_end FUN_020317f0

	arm_func_start FUN_02031844
FUN_02031844: ; 0x02031844
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r1
	mov r6, #0x30
	mla r0, r4, r6, r5
	add ip, r0, #0x1000
	ldr r0, [ip, #0x3f0]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	ldr r1, [sp, #0x10]
	rsb r0, r2, r2, lsl #5
	str r0, [ip, #0x414]
	cmp r1, #0
	bne _020318A4
	ldr r2, [ip, #0x414]
	ldr r0, _020318E4 ; =0x02099F38
	asr r3, r2, #0xc
	add r1, r5, #0x1000
	ldr r0, [r0]
	ldr r1, [r1, #0x3e4]
	add r2, r4, #1
	and r3, r3, #0xff
	bl FUN_02113A80
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02031844
_020318A4:
	str r1, [ip, #0x410]
	rsb lr, r3, r3, lsl #5
	sub r0, r3, r2
	str lr, [ip, #0x41c]
	bl FUN_0201f9bc
	mul r3, r4, r6
	add r2, r5, r3
	add r1, r5, #0xf7
	rsb r4, r0, r0, lsl #5
	add r0, r2, #0x1000
	str r4, [r0, #0x418]
	add r1, r1, #0x1300
	ldrsb r0, [r1, r3]
	orr r0, r0, #0x40
	strb r0, [r1, r3]
	pop {r4, r5, r6, pc}
	.align 2, 0_020318E4: .word 0x02099F38

	arm_func_start FUN_020318e8
FUN_020318e8: ; 0x020318E8
	push {r3, lr}
	mov lr, r1
	mov r1, #0x30
	mla r1, lr, r1, r0
	add r1, r1, #0x1000
	ldr r1, [r1, #0x3f0]
	cmp r1, #0
	popeq {r3, pc}
	ldr ip, _0203192C ; =0x02099F38
	add r1, r0, #0x1000
	lsl r3, r2, #0x10
	ldr r0, [ip]
	ldr r1, [r1, #0x3e4]
	add r2, lr, #1
	lsr r3, r3, #0x10
	bl FUN_021139BC
	pop {r3, pc}
	.align 2, 0_0203192C: .word 0x02099F38
	arm_func_end FUN_020318e8

	arm_func_start FUN_02031930
FUN_02031930: ; 0x02031930
	mov r3, #0x30
	mla r0, r1, r3, r0
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	cmp r1, #0
	strbne r2, [r0, #0x3f4]
	bx lr
	arm_func_end FUN_02031930

	arm_func_start FUN_0203194c
FUN_0203194c: ; 0x0203194C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r5, r0
	mov r4, r1
	mov r0, #0x30
	mla r0, r4, r0, r5
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	cmp r1, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, pc}
	mov r1, #0
	str r1, [r0, #0x400]
	str r1, [r0, #0x404]
	mov r3, #0x64
	ldr r6, _02031A04 ; =0x02099F38
	str r3, [sp]
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x3e4]
	add r2, r4, #1
	bl FUN_02113C60
	mov r0, #1
	str r0, [sp]
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x3e4]
	add r2, r4, #1
	mov r3, #8
	bl FUN_02113EC0
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x3e4]
	add r2, r4, #1
	mov r3, #0x12c
	bl FUN_021139BC
	add r1, r5, #0x1000
	add r2, r4, #1
	mov r0, #0xc0
	str r0, [sp]
	ldr r0, [r6]
	ldr r1, [r1, #0x3e4]
	mov r3, #0x100
	bl FUN_02113D08
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02031A04: .word 0x02099F38
	arm_func_end FUN_0203194c

	arm_func_start FUN_02031a08
FUN_02031a08: ; 0x02031A08
	mov r2, #0x30
	mla r2, r1, r2, r0
	add r0, r2, #0x1000
	ldr r0, [r0, #0x3f0]
	cmp r0, #0
	addne r0, r2, #0x1300
	ldrsbne r0, [r0, #0xf7]
	moveq r0, #0
	bx lr
	arm_func_end FUN_02031a08

	arm_func_start FUN_02031a2c
FUN_02031a2c: ; 0x02031A2C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, #0
	add r0, sl, #0x3f0
	mov r6, #0x30
	add r7, r0, #0x1000
	add r4, sl, #0x1000
	mov r8, #2
	mov fp, sb
	ldr r5, _02031ADC ; =0x02099F38
	b _02031AD0
	arm_func_end FUN_02031a2c
_02031A58:
	mla r0, sb, r6, sl
	add r0, r0, #0x1000
	ldr r0, [r0, #0x3f0]
	cmp r0, #0
	beq _02031ACC
	ldr r0, [r5]
	ldr r1, [r4, #0x3e4]
	add r2, sb, #1
	mov r3, r8
	bl FUN_02113F7C
	mla r0, sb, r6, sl
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [r5]
	bl FUN_020591e8
	mla r0, sb, r6, sl
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [r5]
	bl FUN_02058ee0
	mla r0, sb, r6, sl
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [r5]
	bl FUN_02058ee0
	mla r0, sb, r6, r7
	mov r1, fp
	mov r2, r6
	bl MemWrite
_02031ACC:
	add sb, sb, #1
_02031AD0:
	cmp sb, #8
	blt _02031A58
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02031ADC: .word 0x02099F38

	arm_func_start FUN_02031ae0
FUN_02031ae0: ; 0x02031AE0
	push {r3, lr}
	mov r3, #0x30
	mla r3, r2, r3, r0
	add r2, r3, #0x1000
	ldr ip, [r2, #0x3f0]
	mov r2, r1
	add r1, r0, #0x1000
	ldr r3, _02031B18 ; =0x02099F38
	ldr r1, [r1, #0x3e4]
	ldr r0, [r3]
	add r2, r2, #1
	and r3, ip, #0xff
	bl FUN_02113890
	pop {r3, pc}
	.align 2, 0_02031B18: .word 0x02099F38
	arm_func_end FUN_02031ae0

	arm_func_start FUN_02031b1c
FUN_02031b1c: ; 0x02031B1C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov fp, #0
	mov r6, r0
	ldr sl, _02031E64 ; =0x02099F38
	mov r4, #0x30
	mov r5, fp
	b _02031E58
	arm_func_end FUN_02031b1c
_02031B38:
	mla r2, r5, r4, r6
	add r0, r2, #0x1000
	ldr r1, [r0, #0x3f0]
	cmp r1, #0
	beq _02031E54
	add r0, r2, #0x1300
	ldrsb r0, [r0, #0xf6]
	cmp r0, #3

	arm_func_start switchD
switchD: ; 0x02031B58
	addls pc, pc, r0, lsl #2
	b _02031E54
	arm_func_end switchD
_02031B60: ; jump table
	b _02031E54 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02031B64
	b _02031B70
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02031B68
	b _02031BCC
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02031B6C
	b _02031C5C
	arm_func_end caseD_3
_02031B70:
	ldr r0, [sl]
	bl FUN_02058e30
	cmp r0, #0
	bne _02031E54
	mla r0, r5, r4, r6
	add r0, r0, #0x1000
	ldr r3, [r0, #0x3f8]
	ldr r1, [r0, #0x3f0]
	ldr r0, [sl]
	mov r2, #0
	bl FUN_02059038
	ldr r0, [sl]
	add r1, r6, #0x1000
	ldr r1, [r1, #0x3e4]
	add r2, r5, #1
	mov r3, #2
	bl FUN_02113F7C
	add r0, r6, #0xf6
	add r2, r0, #0x1300
	mul r1, r5, r4
	ldrsb r0, [r2, r1]
	add r0, r0, #1
	strb r0, [r2, r1]
_02031BCC:
	mla r0, r5, r4, r6
	add r0, r0, #0x1000
	ldr r1, [r0, #0x3f0]
	ldr r0, [sl]
	bl FUN_02059328
	cmp r0, #0
	beq _02031E54
	mla r0, r5, r4, r6
	add r0, r0, #0x1000
	ldr r3, [r0, #0x3f0]
	add r1, r6, #0x1000
	ldr r0, [sl]
	ldr r1, [r1, #0x3e4]
	add r2, r5, #1
	and r3, r3, #0xff
	bl FUN_021137DC
	mla r1, r5, r4, r6
	str fp, [sp]
	add r1, r1, #0x1300
	ldrsb r3, [r1, #0xf5]
	add r1, r6, #0x1000
	ldr r0, [sl]
	ldr r1, [r1, #0x3e4]
	add r2, r5, #1
	bl FUN_0211401C
	add r0, r6, #0xf7
	add r1, r6, #0xf6
	mul r2, r5, r4
	add r3, r0, #0x1300
	ldrsb r0, [r3, r2]
	add r1, r1, #0x1300
	orr r0, r0, #2
	strb r0, [r3, r2]
	ldrsb r0, [r1, r2]
	add r0, r0, #1
	strb r0, [r1, r2]
_02031C5C:
	mla r0, r5, r4, r6
	add r0, r0, #0x1300
	ldrsb r0, [r0, #0xf4]
	mov r3, #2
	cmp r0, #0
	beq _02031C94
	mov r0, #1
	str r0, [sp]
	add r1, r6, #0x1000
	ldr r0, [sl]
	ldr r1, [r1, #0x3e4]
	add r2, r5, #1
	bl FUN_02113EC0
	b _02031CA8
_02031C94:
	add r1, r6, #0x1000
	ldr r0, [sl]
	ldr r1, [r1, #0x3e4]
	add r2, r5, #1
	bl FUN_02113F7C
_02031CA8:
	mul ip, r5, r4
	add r0, r6, ip
	add r1, r0, #0x1300
	ldrsb r1, [r1, #0xf7]
	tst r1, #0x40
	beq _02031D74
	add r1, r6, #0x14
	add r3, r6, #0x410
	add sb, r1, #0x1400
	add r1, r0, #0x1000
	mov r2, #0
	add r3, r3, #0x1000
	add r0, r6, #0x1000
	b _02031D04
_02031CE0:
	ldr r8, [sb, ip]
	ldr r7, [r1, #0x418]
	add r7, r8, r7
	str r7, [sb, ip]
	ldr r7, [r3, ip]
	subs r7, r7, #1
	str r7, [r3, ip]
	beq _02031D10
	add r2, r2, #1
_02031D04:
	ldr r7, [r0, #0x3e0]
	cmp r2, r7
	blo _02031CE0
_02031D10:
	mov r2, #0x30
	mul r0, r5, r2
	add r1, r6, r0
	add r3, r1, #0x1000
	ldr r1, [r3, #0x410]
	ldr r7, _02031E64 ; =0x02099F38
	cmp r1, #0
	bne _02031D4C
	add r1, r6, #0xf7
	add r8, r1, #0x1300
	ldrsb r1, [r8, r0]
	bic r1, r1, #0x40
	strb r1, [r8, r0]
	ldr r0, [r3, #0x41c]
	str r0, [r3, #0x414]
_02031D4C:
	mla r0, r5, r2, r6
	add r0, r0, #0x1000
	ldr r0, [r0, #0x414]
	add r1, r6, #0x1000
	asr r3, r0, #0xc
	ldr r0, [r7]
	ldr r1, [r1, #0x3e4]
	add r2, r5, #1
	and r3, r3, #0xff
	bl FUN_02113A80
_02031D74:
	mul r1, r5, r4
	add r3, r6, r1
	add r0, r3, #0x1300
	ldrsb r0, [r0, #0xf7]
	tst r0, #0x10
	beq _02031E1C
	add r7, r6, #4
	add r8, r6, #0x3fc
	add ip, r3, #0x1000
	mov r2, #0
	add r0, r6, #0x1400
	add sb, r7, #0x1400
	add lr, r8, #0x1000
	add r3, r6, #0x1000
	b _02031DE4
_02031DB0:
	ldr r8, [r0, r1]
	ldr r7, [ip, #0x408]
	add r7, r8, r7
	str r7, [r0, r1]
	ldr r8, [sb, r1]
	ldr r7, [ip, #0x40c]
	add r7, r8, r7
	str r7, [sb, r1]
	ldr r7, [lr, r1]
	subs r7, r7, #1
	str r7, [lr, r1]
	beq _02031DF0
	add r2, r2, #1
_02031DE4:
	ldr r7, [r3, #0x3e0]
	cmp r2, r7
	blo _02031DB0
_02031DF0:
	mov r0, #0x30
	mul r0, r5, r0
	add r1, r6, r0
	add r1, r1, #0x1000
	ldr r1, [r1, #0x3fc]
	cmp r1, #0
	addeq r1, r6, #0xf7
	addeq r2, r1, #0x1300
	ldrsbeq r1, [r2, r0]
	biceq r1, r1, #0x10
	strbeq r1, [r2, r0]
_02031E1C:
	mla r0, r5, r4, r6
	add r0, r0, #0x1000
	ldr r1, [r0, #0x404]
	ldr r2, [r0, #0x400]
	lsl r0, r1, #4
	asr r0, r0, #0x10
	str r0, [sp]
	lsl r3, r2, #4
	add r1, r6, #0x1000
	ldr r0, [sl]
	ldr r1, [r1, #0x3e4]
	add r2, r5, #1
	asr r3, r3, #0x10
	bl FUN_02113B78
_02031E54:
	add r5, r5, #1
_02031E58:
	cmp r5, #8
	blt _02031B38
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02031E64: .word 0x02099F38

	arm_func_start FUN_02031e68
FUN_02031e68: ; 0x02031E68
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x28
	mov r5, r0
	ldr r0, [r5, #0x10]
	mov r6, #0
	mov r4, r1
	strb r6, [r5, #0x34]
	tst r0, #1
	bne _02031EA4
	orr r0, r0, #1
	str r0, [r5, #0x10]
	strb r6, [r5, #0x3f]
	strb r6, [r5, #0x3e]
	strb r6, [r5, #0x12e]
	strb r6, [r5, #0x20a]
	arm_func_end FUN_02031e68
_02031EA4:
	ldr r0, [sp, #0x48]
	cmp r2, #0
	strbne r2, [r5, #0x3c]
	cmp r3, #0
	strbne r3, [r5, #0x3d]
	cmp r0, #0
	strbne r0, [r5, #0x40]
	ldr r0, [sp, #0x4c]
	ldr r1, [sp, #0x58]
	cmp r0, #0
	strbne r0, [r5, #0x41]
	ldr r0, [sp, #0x50]
	cmp r0, #0
	strbne r0, [r5, #0x42]
	ldr r0, [sp, #0x54]
	cmp r0, #0
	strbne r0, [r5, #0x43]
	cmp r1, #0
	addne r0, r5, #0x1300
	strhne r1, [r0, #0x1a]
	ldr r1, [sp, #0x5c]
	cmp r1, #0
	addne r0, r5, #0x1300
	strhne r1, [r0, #0x1c]
	ldr r1, [sp, #0x60]
	cmp r1, #0
	addne r0, r5, #0x1000
	strne r1, [r0, #0x104]
	cmp r4, #0
	addeq sp, sp, #0x28
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r6, _02032034 ; =0x02099F38
	ldrsh r1, [r5, #0x3a]
	mov r8, #0
	ldr r0, [r6]
	add r2, sp, #0x20
	add r3, sp, #0x24
	str r8, [sp, #0x20]
	bl FUN_0205935c
	ldrsh r1, [r5, #0x3a]
	ldr sb, [sp, #0x20]
	ldr r0, [r6]
	bl FUN_02111438
	stm sp, {r0, r8}
	mov r7, #1
	str r7, [sp, #8]
	str r7, [sp, #0xc]
	str r8, [sp, #0x10]
	str r8, [sp, #0x14]
	str r7, [sp, #0x18]
	ldr r0, _02032038 ; =0x02099ED0
	str r8, [sp, #0x1c]
	ldr r0, [r0]
	mov r1, r4
	mov r2, sb
	mov r3, #0x40
	bl FUN_020425fc
	ldr r1, [sp, #0x24]
	mov r0, sb
	bl FUN_020026d0
	ldrsh r1, [r5, #0x3a]
	ldr r3, [sp, #0x24]
	ldr r0, [r6]
	mov r2, sb
	str r8, [sp]
	str r8, [sp, #4]
	str r8, [sp, #8]
	bl FUN_02059288
	str r8, [sp]
	ldrsh r1, [r5, #0x36]
	ldr r0, [r6]
	mov r3, r8
	mov r2, r7
	bl FUN_0211401C
	ldrsb r0, [r5, #0x3d]
	ldr r3, _0203203C ; =0x0208C364
	ldr r1, [r5, #0x48]
	sub r0, r0, #1
	add r0, r3, r0, lsl #2
	ldrsh r0, [r0, #2]
	ldr ip, [r5, #0x44]
	mov r2, r7
	add r0, r0, r1, asr #12
	add r0, r0, #7
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
	ldrsb r4, [r5, #0x3d]
	ldrsh r1, [r5, #0x36]
	ldr r0, [r6]
	sub r4, r4, #1
	lsl r4, r4, #2
	ldrsh r3, [r3, r4]
	add r3, r3, ip, asr #12
	add r3, r3, #0xa
	lsl r3, r3, #0x10
	asr r3, r3, #0x10
	bl FUN_02113B78
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02032034: .word 0x02099F38
_02032038: .word 0x02099ED0
_0203203C: .word 0x0208C364

	arm_func_start FUN_02032040
FUN_02032040: ; 0x02032040
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	mov sl, r0
	mov fp, r2
	mov r8, r3
	cmp sb, #1
	ldr r7, [sp, #0x2c]
	beq _0203206C
	cmp sb, #2
	beq _02032078
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02032040
_0203206C:
	add r4, sl, #0x60
	mov r6, #6
	b _02032080
_02032078:
	add r4, sl, #0x13c
	mov r6, #0xa
_02032080:
	cmp r7, #0
	ldrsb r5, [r4, #0xd1]
	beq _020320C0
	mov r2, #0
	strb r7, [r4, #0xcf]
	strb r2, [r4, #0xcd]
	ldrsb r1, [r4, #0xcf]
	sub r0, r2, #1
	cmp r1, r0
	moveq r1, #1
	strbeq r1, [r4, #0xcd]
	ldrsbeq r0, [sl, #0x3d]
	moveq fp, r2
	cmpeq r0, sb
	subeq r0, r1, #2
	strbeq r0, [sl, #0x3c]
_020320C0:
	ldr r0, [sp, #0x30]
	cmp r0, #0
	strbne r0, [r4, #0xd0]
	cmp fp, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #0x60
	mla r0, r5, r0, r4
	mov r1, fp
	bl _strcmp
	cmp r0, #0
	bne _020321C0
	cmp r8, #0
	beq _020321C0
	mov r0, #0x60
	mla r0, r5, r0, r4
	mov r1, r8
	add r0, r0, #0x20
	bl _strcmp
	cmp r0, #0
	bne _020321C0
	cmp r7, #0
	beq _02032224
	mov r0, #0
	strb r7, [r4, #0xcf]
	strb r0, [r4, #0xcd]
	ldrsb r1, [r4, #0xcf]
	sub r0, r0, #1
	cmp r1, r0
	beq _02032148
	cmp r1, #1
	beq _02032164
	cmp r1, #2
	beq _020321A8
	b _02032224
_02032148:
	mov r1, #1
	strb r1, [r4, #0xcd]
	ldrsb r0, [sl, #0x3d]
	cmp r0, sb
	subeq r0, r1, #2
	strbeq r0, [sl, #0x3c]
	b _02032224
_02032164:
	ldrsb r0, [r4, #0xd2]
	cmp r0, #0
	bne _02032224
	ldr sb, _020322B0 ; =0x02099F38
	ldr r7, _020322B4 ; =0x00007FFF
_02032178:
	ldrsh r1, [sl, #0x36]
	ldr r0, [sb]
	mov r3, r7
	add r2, r6, r5, lsl #1
	bl FUN_02113B00
	add r2, r6, #1
	ldrsh r1, [sl, #0x36]
	ldr r0, [sb]
	mov r3, r7
	add r2, r2, r5, lsl #1
	bl FUN_02113B00
	b _02032224
_020321A8:
	ldrsb r0, [r4, #0xd2]
	cmp r0, #0
	bne _02032224
	ldr sb, _020322B0 ; =0x02099F38
	ldr r7, _020322B8 ; =0x0000318C
	b _02032178
_020321C0:
	eor r1, r5, #1
	mov r6, #0x60
	mla r0, r1, r6, r4
	mov r1, fp
	bl _strcmp
	cmp r0, #0
	bne _0203220C
	cmp r8, #0
	beq _0203220C
	eor r0, r5, #1
	mla r2, r0, r6, r4
	mov r1, r8
	add r0, r2, #0x20
	bl _strcmp
	cmp r0, #0
	eoreq r0, r5, #1
	addeq r0, r0, #1
	strbeq r0, [r4, #0xd2]
	beq _02032224
_0203220C:
	eor r1, r5, #1
	mla r0, r1, r6, r4
	mov r1, fp
	bl _strcpy
	sub r0, r6, #0x61
	strb r0, [r4, #0xd2]
_02032224:
	ldrb r0, [sp, #0x34]
	mov r6, #0x60
	strb r0, [r4, #0xcc]
	ldrsb r0, [r4, #0xd2]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r8, #0
	eor r0, r5, #1
	bne _02032280
	mla r3, r0, r6, r4
	mov r8, #0
	mov r7, #0x20
	mov r1, r8
	mov r2, r7
	add r0, r3, #0x20
	bl MemWrite
	eor r0, r5, #1
	mla r3, r0, r6, r4
	mov r1, r8
	mov r2, r7
	add r0, r3, #0x40
	bl MemWrite
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02032280:
	mla r2, r0, r6, r4
	mov r1, r8
	add r0, r2, #0x20
	bl _strcpy
	ldr r1, [sp, #0x28]
	cmp r1, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	eor r0, r5, #1
	mla r2, r0, r6, r4
	add r0, r2, #0x40
	bl _strcpy
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020322B0: .word 0x02099F38
_020322B4: .word 0x00007FFF
_020322B8: .word 0x0000318C

	arm_func_start FUN_020322bc
FUN_020322bc: ; 0x020322BC
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xc
	mov r4, r0
	ldr r0, [r4, #0x10]
	ldr r3, [r4, #0x2c]
	orr r2, r0, #0x100
	add r0, r4, #0x1000
	mov r1, #2
	mov r7, #0
	strb r1, [r0, #0x324]
	str r3, [r0, #0x320]
	ldr r5, _02032380 ; =0x02099F38
	str r2, [r4, #0x10]
	mov r6, #0xe
	strb r7, [r0, #0x325]
	ldrsh r1, [r4, #0x36]
	ldr r0, [r5]
	mov r2, r6
	and r3, r3, #0xff
	bl FUN_021137DC
	str r7, [sp]
	ldrsh r1, [r4, #0x36]
	ldr r0, [r5]
	mov r2, r6
	mov r3, r7
	bl FUN_0211401C
	mov r3, #0x64
	str r3, [sp]
	ldrsh r1, [r4, #0x36]
	ldr r0, [r5]
	mov r2, r6
	bl FUN_02114150
	add r0, sp, #4
	str r0, [sp]
	ldrsh r1, [r4, #0x36]
	ldr r0, [r5]
	mov r2, r6
	add r3, sp, #8
	bl FUN_02114480
	ldr r1, [sp, #8]
	add r0, r4, #0x1300
	strh r1, [r0, #0x26]
	ldrsb r1, [r0, #0x24]
	ldr r0, [sp, #4]
	bl FUN_0201f9bc
	add r1, r4, #0x1300
	strh r0, [r1, #0x28]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_02032380: .word 0x02099F38
	arm_func_end FUN_020322bc

	arm_func_start FUN_02032384
FUN_02032384: ; 0x02032384
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	mov r7, r0
	mov r6, r1
	mov r8, #0x30
	mla r0, r6, r8, r7
	add r0, r0, #0x1000
	ldr r4, _02032478 ; =0x02099F38
	ldr r1, [r0, #0x3f0]
	ldr r0, [r4]
	mov r5, r2
	bl FUN_02058e30
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r3, r4, r5, r6, r7, r8, pc}
	mla r0, r6, r8, r7
	ldr r1, [r7, #0x10]
	add r0, r0, #0x1000
	orr r1, r1, #0x100
	str r1, [r7, #0x10]
	ldr r3, [r0, #0x3f0]
	add r0, r7, #0x1000
	mov r8, #0
	mov r6, #0xe
	str r3, [r0, #0x320]
	ldrsh r1, [r7, #0x36]
	strb r8, [r0, #0x325]
	strb r5, [r0, #0x324]
	ldr r0, [r4]
	mov r2, r6
	and r3, r3, #0xff
	bl FUN_021137DC
	str r8, [sp]
	ldrsh r1, [r7, #0x36]
	ldr r0, [r4]
	mov r2, r6
	mov r3, r8
	bl FUN_0211401C
	mov r3, #0x64
	str r3, [sp]
	ldrsh r1, [r7, #0x36]
	ldr r0, [r4]
	mov r2, r6
	bl FUN_02114150
	add r0, sp, #4
	str r0, [sp]
	ldrsh r1, [r7, #0x36]
	ldr r0, [r4]
	mov r2, r6
	add r3, sp, #8
	bl FUN_02114480
	ldr r1, [sp, #8]
	add r0, r7, #0x1300
	strh r1, [r0, #0x26]
	ldrsb r1, [r0, #0x24]
	ldr r0, [sp, #4]
	bl FUN_0201f9bc
	add r1, r7, #0x1300
	strh r0, [r1, #0x28]
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02032478: .word 0x02099F38
	arm_func_end FUN_02032384

	arm_func_start FUN_0203247c
FUN_0203247c: ; 0x0203247C
	add r0, r0, #0x1300
	ldrsb r0, [r0, #0x25]
	bx lr
	arm_func_end FUN_0203247c

	arm_func_start FUN_02032488
FUN_02032488: ; 0x02032488
	ldr r1, [r0, #0x10]
	orr r1, r1, #0x200
	str r1, [r0, #0x10]
	bx lr
	arm_func_end FUN_02032488

	arm_func_start FUN_02032498
FUN_02032498: ; 0x02032498
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r4, r0
	add ip, r4, #0x1300
	ldrsh r5, [ip, #0x1c]
	mov r6, r3
	str r5, [sp]
	ldrsh r3, [ip, #0x1a]
	add ip, r4, #0x108
	mov r5, r2
	mov r2, r1
	add r1, ip, #0x1000
	bl FUN_0203257c
	add r1, r4, #0xb8
	mov r0, r5
	add r1, r1, #0x400
	mov r2, #0x40
	bl _memcpy
	mov r0, r6
	add r1, r4, #0x218
	mov r2, #0x2a0
	bl _memcpy
	add r0, r4, #0x1000
	mov r6, #2
	ldr r5, _02032578 ; =0x02099F38
	ldr r1, [r0, #0xfc]
	ldr r0, [r5]
	mov r2, r6
	bl FUN_02114370
	ldrsh r1, [r4, #0x36]
	ldr r0, [r5]
	mov r3, r6
	mov r2, #3
	bl FUN_02113F7C
	ldrsb r0, [r4, #0x3f]
	cmp r0, #0
	movne r0, #0
	strbne r0, [r4, #0x3f]
	ldr r0, [r4, #0x10]
	tst r0, #1
	bne _02032558
	mov r1, #0
	orr r0, r1, #1
	str r0, [r4, #0x10]
	strb r1, [r4, #0x3f]
	strb r1, [r4, #0x3e]
	strb r1, [r4, #0x12e]
	strb r1, [r4, #0x20a]
	arm_func_end FUN_02032498
_02032558:
	ldr r1, [r4, #0x10]
	add r0, r4, #0x1000
	orr r1, r1, #2
	mov r2, #1
	strb r2, [r0, #0x30d]
	str r1, [r4, #0x10]
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02032578: .word 0x02099F38

	arm_func_start FUN_0203257c
FUN_0203257c: ; 0x0203257C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x200
	add r5, sp, #0
	mov sl, r1
	mov r0, r5
	mov r1, r2
	mov sb, r3
	ldr r8, [sp, #0x228]
	bl _strcpy
	ldrsb r0, [sp]
	mov r7, #0
	mov r6, r7
	cmp r0, #0
	beq _02032660
	mov fp, #0xc
	mov r4, r7
	arm_func_end FUN_0203257c
_020325BC:
	cmp r0, #0
	beq _0203263C
	cmp r0, #0xa
	beq _020325D8
	cmp r0, #0xc
	beq _020325EC
	b _020325F8
_020325D8:
	add r6, r6, #1
	mov r7, #0
	cmp r6, r8
	blt _0203263C
	strb fp, [r5]
_020325EC:
	mov r7, #0
	mov r6, r7
	b _0203263C
_020325F8:
	ldr r0, _0203266C ; =0x02099F50
	mov r1, r5
	ldr r0, [r0]
	bl FUN_02042b0c
	add r1, r7, r0
	cmp r1, sb
	blt _02032630
	add r6, r6, #1
	cmp r6, r8
	movge r1, #0xc
	movlt r1, #0xa
	mov r7, r4
	movge r6, r4
	strb r1, [sl], #1
_02032630:
	cmp r0, #0
	addne r0, r0, #1
	addne r7, r7, r0
_0203263C:
	ldrsb r0, [r5]
	tst r0, #0x80
	addne r5, r5, #1
	strbne r0, [sl], #1
	ldrsb r0, [r5]
	strb r0, [sl], #1
	ldrsb r0, [r5, #1]!
	cmp r0, #0
	bne _020325BC
_02032660:
	strb r0, [sl]
	add sp, sp, #0x200
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203266C: .word 0x02099F50

	arm_func_start FUN_02032670
FUN_02032670: ; 0x02032670
	add r2, r0, #0x1300
	ldrsb r2, [r2, #0xe]
	add r0, r0, #0x1000
	orr r1, r2, r1
	strb r1, [r0, #0x30e]
	bx lr
	arm_func_end FUN_02032670

	arm_func_start FUN_02032688
FUN_02032688: ; 0x02032688
	add r2, r0, #0x1300
	ldrsb r2, [r2, #0xe]
	mvn r1, r1
	lsl r1, r1, #0x18
	and r1, r2, r1, asr #24
	add r0, r0, #0x1000
	strb r1, [r0, #0x30e]
	bx lr
	arm_func_end FUN_02032688

	arm_func_start FUN_020326a8
FUN_020326a8: ; 0x020326A8
	add r0, r0, #0x1000
	str r1, [r0, #0x104]
	bx lr
	arm_func_end FUN_020326a8

	arm_func_start FUN_020326b4
FUN_020326b4: ; 0x020326B4
	cmp r1, #0
	ldr r1, [r0, #0x10]
	orrne r1, r1, #1
	biceq r1, r1, #1
	str r1, [r0, #0x10]
	bx lr
	arm_func_end FUN_020326b4

	arm_func_start FUN_020326cc
FUN_020326cc: ; 0x020326CC
	cmp r1, #4
	mov r1, #1
	strb r1, [r0, #0x3f]
	strbne r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_020326cc

	arm_func_start FUN_020326e0
FUN_020326e0: ; 0x020326E0
	ldr r0, [r0, #0x10]
	bx lr
	arm_func_end FUN_020326e0

	arm_func_start FUN_020326e8
FUN_020326e8: ; 0x020326E8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov r5, #0
	mov sl, r0
	mov sb, r5
	ldr r4, _02032D28 ; =0x02099F38
	b _02032720
	arm_func_end FUN_020326e8
_02032704:
	add r0, sl, sb, lsl #2
	ldr r1, [r0, #0x14]
	ldr r0, [r4]
	mov r2, r5
	mov r3, r5
	bl FUN_02059038
	add sb, sb, #1
_02032720:
	cmp sb, #7
	blt _02032704
	mov sb, #0
	mov r1, sb
	add r0, sl, #0x34
	mov r2, #0x1e4
	bl MemWrite
	ldr r2, _02032D2C ; =0x00001108
	mov r1, sb
	add r0, sl, #0x218
	bl MemWrite
	ldr r4, _02032D28 ; =0x02099F38
	mov r6, #1
	ldr r0, [r4]
	mov r1, #0xf
	mov r2, r6
	bl FUN_02112724
	strh r0, [sl, #0x36]
	mov r1, #3
	ldr r0, [r4]
	mov r2, r1
	bl FUN_02059630
	add r1, sl, #0x1000
	strh r0, [r1, #0xfa]
	ldrsh r1, [r1, #0xfa]
	ldr r0, [r4]
	mov r2, sb
	mov r3, sb
	bl FUN_02059038
	ldr r0, [r4]
	mov r2, r6
	mov r1, #0x10
	bl FUN_02112724
	add r2, sl, #0x1000
	strh r0, [r2, #0xf8]
	ldrsh r1, [r2, #0xf8]
	ldrsh r2, [r2, #0xfa]
	ldr r0, [r4]
	and r2, r2, #0xff
	bl FUN_02112950
	add r1, sl, #0x1000
	ldrsh r1, [r1, #0xf8]
	ldr r0, [r4]
	mov r2, #0x36
	bl FUN_02112B98
	add r6, sl, #0x1000
	b _02032800
_020327DC:
	lsl r0, sb, #0x13
	asr r0, r0, #0x10
	str r0, [sp]
	ldrsh r1, [r6, #0xf8]
	ldr r0, [r4]
	mov r3, r5
	add r2, sb, #1
	bl FUN_02113D88
	add sb, sb, #1
_02032800:
	cmp sb, #8
	blt _020327DC
	add r0, sl, #0x1000
	ldr r4, _02032D28 ; =0x02099F38
	mov r6, #0x40
	ldrsh r1, [r0, #0xf8]
	ldr r0, [r4]
	mov r2, r6
	mov r3, #8
	bl FUN_02113100
	add r0, sl, #0x1000
	ldr r5, _02032D30 ; =0x00007FFF
	ldrsh r1, [r0, #0xf8]
	ldr r0, [r4]
	mov r2, r5
	bl FUN_02112E5C
	add r0, sl, #0x1000
	ldrsh r1, [r0, #0xf8]
	ldr r0, [r4]
	mov r2, #0x32
	mov r3, #0x64
	bl FUN_02113528
	ldr r0, [r4]
	mov r8, #3
	mov r1, r8
	mov r7, #1
	mov r2, r7
	bl FUN_02059630
	strh r0, [sl, #0x3a]
	ldrsh r1, [sl, #0x3a]
	ldr r0, [r4]
	mov sb, #0
	mov r2, sb
	mov r3, sb
	bl FUN_02059038
	ldr r0, [r4]
	ldrsh r1, [sl, #0x36]
	mov r2, r7
	ldrsh r3, [sl, #0x3a]
	and r3, r3, #0xff
	bl FUN_021137DC
	str sb, [sp]
	ldr r0, [r4]
	ldrsh r1, [sl, #0x36]
	mov r2, r7
	mov r3, sb
	bl FUN_02113D88
	mov r3, r6
	mov r6, #0x10
	str r6, [sp]
	ldr r0, [r4]
	ldrsh r1, [sl, #0x36]
	mov r2, r7
	bl FUN_02113D08
	ldr r0, [r4]
	ldrsh r1, [sl, #0x36]
	mov r2, r7
	mov r3, #0x34
	bl FUN_021139BC
	mov r3, r5
	ldr r0, [r4]
	ldrsh r1, [sl, #0x36]
	mov r2, r7
	bl FUN_02113B00
	ldr r3, [sl, #0x14]
	mov r5, #2
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r5
	and r3, r3, #0xff
	bl FUN_021137DC
	str sb, [sp]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r5
	mov r3, sb
	bl FUN_0211401C
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r5
	mov r3, #0x35
	bl FUN_021139BC
	ldr r3, [sl, #0x18]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r8
	and r3, r3, #0xff
	bl FUN_021137DC
	str sb, [sp]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r8
	mov r3, sb
	bl FUN_0211401C
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r8
	mov r3, #0x36
	bl FUN_021139BC
	mov fp, #4
	ldr r0, [r4]
	mov r1, fp
	mov r2, r7
	bl FUN_02112724
	strh r0, [sl, #0x38]
	ldr r3, [sl, #0x1c]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r7
	and r3, r3, #0xff
	bl FUN_021137DC
	str sb, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r7
	mov r3, sb
	bl FUN_0211401C
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r7
	mov r3, #0x38
	bl FUN_021139BC
	add r0, sp, #4
	str r0, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	add r3, sp, #8
	mov r2, r7
	bl FUN_02114480
	ldr r1, [sl, #0x1c]
	ldr r0, [r4]
	and r3, r1, #0xff
	ldrsh r1, [sl, #0x38]
	mov r2, r5
	bl FUN_021137DC
	str sb, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r5
	mov r3, sb
	bl FUN_0211401C
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r5
	mov r3, #0x38
	bl FUN_021139BC
	str r7, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r3, r6
	mov r2, r5
	bl FUN_02113EC0
	str sb, [sp]
	ldr r3, [sp, #8]
	ldrsh r1, [sl, #0x38]
	lsl r3, r3, #0x10
	ldr r0, [r4]
	mov r2, r5
	asr r3, r3, #0x10
	bl FUN_02113B78
	ldr r3, [sl, #0x1c]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r8
	and r3, r3, #0xff
	bl FUN_021137DC
	str sb, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r8
	mov r3, sb
	bl FUN_0211401C
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r8
	mov r3, #0x38
	bl FUN_021139BC
	str r7, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r8
	mov r3, #0x20
	bl FUN_02113EC0
	ldr r0, [sp, #4]
	mov r2, r8
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r3, sb
	bl FUN_02113B78
	ldr r3, [sl, #0x1c]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, fp
	and r3, r3, #0xff
	bl FUN_021137DC
	str sb, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, fp
	mov r3, sb
	bl FUN_0211401C
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r3, #0x38
	mov r2, fp
	bl FUN_021139BC
	str r7, [sp]
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, fp
	mov r3, #0x30
	bl FUN_02113EC0
	ldr r0, [sp, #4]
	mov r2, fp
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
	ldr r3, [sp, #8]
	ldrsh r1, [sl, #0x38]
	lsl r3, r3, #0x10
	ldr r0, [r4]
	asr r3, r3, #0x10
	bl FUN_02113B78
	mov r7, r5
	mov r6, sb
	mov r8, #0x39
	mov r5, #0x3a
	b _02032C00
_02032B9C:
	ldrsh r1, [sl, #0x36]
	lsl r2, sb, #1
	ldr r0, [r4]
	mov r3, r8
	add r2, r2, #6
	bl FUN_021139BC
	lsl r2, sb, #1
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	add r2, r2, #6
	mov r3, r7
	bl FUN_02113F7C
	ldr r0, [r4]
	ldrsh r1, [sl, #0x36]
	lsl r2, sb, #1
	add r2, r2, #7
	mov r3, r5
	bl FUN_021139BC
	ldr r0, [r4]
	ldrsh r1, [sl, #0x36]
	lsl r2, sb, #1
	add r2, r2, #7
	mov r3, r7
	bl FUN_02113F7C
	add sb, sb, #1
_02032C00:
	cmp sb, #4
	blt _02032B9C
	ldr r4, _02032D28 ; =0x02099F38
	ldr r3, [sl, #0x2c]
	mov r5, #0xe
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r5
	and r3, r3, #0xff
	bl FUN_021137DC
	str r6, [sp]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r5
	mov r3, r6
	bl FUN_0211401C
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r5
	mov r3, #0x33
	bl FUN_021139BC
	ldr r0, [r4]
	mov r1, #0x80
	mov r2, #1
	bl FUN_02112724
	add r1, sl, #0x1000
	str r0, [r1, #0xfc]
	mov r5, #3
	ldr r0, [r4]
	mov r1, #5
	mov r2, r5
	bl FUN_02059630
	mov r1, r0
	add r0, sl, #0x1000
	str r1, [r0, #0x100]
	ldr r0, [r4]
	mov r2, r6
	mov r3, r6
	bl FUN_02059038
	add r1, sl, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0xfc]
	mov r2, #0x37
	bl FUN_02112B98
	mov r1, #0xa
	add r0, sl, #0x1000
	str r1, [r0, #0x104]
	add r0, sl, #0x1300
	mov r1, #0x32
	strh r1, [r0, #0x14]
	mov r1, #0xf0
	strh r1, [r0, #0x1a]
	strh r5, [r0, #0x1c]
	mov r5, #2
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r5
	bl FUN_02114370
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r5
	bl FUN_02114370
	add r1, sl, #0x1000
	ldrsh r1, [r1, #0xf8]
	ldr r0, [r4]
	mov r2, r5
	bl FUN_02114370
	add r1, sl, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0xfc]
	mov r2, r5
	bl FUN_02114370
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02032D28: .word 0x02099F38
_02032D2C: .word 0x00001108
_02032D30: .word 0x00007FFF

	arm_func_start FUN_02032d34
FUN_02032d34: ; 0x02032D34
	push {r4, r5, r6, lr}
	mov r5, r0
	bl FUN_02032f3c
	ldr r4, _02032E2C ; =0x02099F38
	ldrsh r1, [r5, #0x36]
	ldr r0, [r4]
	bl FUN_021128C4
	ldrsh r1, [r5, #0x38]
	ldr r0, [r4]
	bl FUN_021128C4
	add r0, r5, #0x1000
	ldrsh r1, [r0, #0xf8]
	ldr r0, [r4]
	bl FUN_021128C4
	add r1, r5, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0xfc]
	bl FUN_021128C4
	mov r6, #0
	b _02032D98
	arm_func_end FUN_02032d34
_02032D84:
	add r0, r5, r6, lsl #2
	ldr r1, [r0, #0x14]
	ldr r0, [r4]
	bl FUN_020591e8
	add r6, r6, #1
_02032D98:
	cmp r6, #7
	blt _02032D84
	add r0, r5, #0x1000
	ldr r4, _02032E2C ; =0x02099F38
	ldrsh r1, [r0, #0xfa]
	ldr r0, [r4]
	bl FUN_020591e8
	add r0, r5, #0x1000
	ldrsh r1, [r0, #0xfa]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, r5, #0x1000
	ldrsh r1, [r0, #0xfa]
	ldr r0, [r4]
	bl FUN_02058ee0
	ldrsh r1, [r5, #0x3a]
	ldr r0, [r4]
	bl FUN_020591e8
	ldrsh r1, [r5, #0x3a]
	ldr r0, [r4]
	bl FUN_02058ee0
	ldrsh r1, [r5, #0x3a]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x100]
	ldr r0, [r4]
	bl FUN_020591e8
	add r0, r5, #0x1000
	ldr r1, [r0, #0x100]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x100]
	ldr r0, [r4]
	bl FUN_02058ee0
	pop {r4, r5, r6, pc}
	.align 2, 0_02032E2C: .word 0x02099F38

	arm_func_start FUN_02032e30
FUN_02032e30: ; 0x02032E30
	push {r4, lr}
	sub sp, sp, #0x10
	mov r4, r0
	ldr r2, [r4, #0x10]
	mov lr, #0
	mov ip, #1
	add r0, r4, #0x1000
	bic r2, r2, #4
	cmp r1, #0
	strb lr, [r0, #0x30d]
	strb lr, [r0, #0x30e]
	addeq sp, sp, #0x10
	str r2, [r4, #0x10]
	strb ip, [r4, #0x3c]
	strb ip, [r4, #0x3d]
	strb ip, [r4, #0x40]
	strb ip, [r4, #0x41]
	strb ip, [r4, #0x42]
	strb ip, [r4, #0x43]
	str lr, [r4, #0x54]
	str lr, [r4, #0x58]
	str lr, [r4, #0x5c]
	popeq {r4, pc}
	ldr r3, _02032F2C ; =0x0209A250
	ldr r1, _02032F30 ; =0x0208FD34
	ldr r0, [r3]
	cmp r0, #0
	beq _02032EB8
	str lr, [sp]
	str lr, [sp, #4]
	str lr, [sp, #8]
	add r2, r4, #0x54
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_02032e30
_02032EB8:
	ldr r3, _02032F2C ; =0x0209A250
	ldr r1, _02032F34 ; =0x0208FD4C
	ldr r0, [r3]
	cmp r0, #0
	beq _02032EEC
	mov r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	mov ip, #1
	add r2, r4, #0x58
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_02032EEC:
	ldr r3, _02032F2C ; =0x0209A250
	ldr r1, _02032F38 ; =0x0208FD64
	ldr r0, [r3]
	cmp r0, #0
	addeq sp, sp, #0x10
	popeq {r4, pc}
	mov r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	mov ip, #1
	add r2, r4, #0x5c
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	add sp, sp, #0x10
	pop {r4, pc}
	.align 2, 0_02032F2C: .word 0x0209A250
_02032F30: .word 0x0208FD34
_02032F34: .word 0x0208FD4C
_02032F38: .word 0x0208FD64

	arm_func_start FUN_02032f3c
FUN_02032f3c: ; 0x02032F3C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, r0
	mov r8, #0
	mov r6, #2
	ldr r5, _02033140 ; =0x02099F38
	str r8, [r4, #0x10]
	ldrsh r1, [r4, #0x36]
	ldr r0, [r5]
	mov r2, r6
	mov r7, r8
	bl FUN_02114370
	ldrsh r1, [r4, #0x36]
	ldr r0, [r5]
	mov r3, r6
	mov r2, #3
	bl FUN_02113F7C
	ldrsh r1, [r4, #0x38]
	ldr r0, [r5]
	mov r2, r6
	bl FUN_02114370
	b _02032FC4
	arm_func_end FUN_02032f3c
_02032F90:
	ldrsh r1, [r4, #0x36]
	lsl r2, r8, #1
	ldr r0, [r5]
	mov r3, r6
	add r2, r2, #6
	bl FUN_02113F7C
	lsl r2, r8, #1
	ldrsh r1, [r4, #0x36]
	ldr r0, [r5]
	mov r3, r6
	add r2, r2, #7
	bl FUN_02113F7C
	add r8, r8, #1
_02032FC4:
	cmp r8, #4
	blt _02032F90
	ldr r5, _02033140 ; =0x02099F38
	add r1, r4, #0x1000
	mov r6, #2
	ldr r0, [r5]
	ldr r1, [r1, #0xfc]
	mov r2, r6
	bl FUN_02114370
	add r1, r4, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0xfc]
	mov r2, r6
	bl FUN_02113390
	add r0, r4, #0x1000
	ldrsh r1, [r0, #0xf8]
	ldr r0, [r5]
	mov r2, r6
	bl FUN_02114370
	add r1, r4, #0x1000
	ldrsh r1, [r1, #0xf8]
	ldr r0, [r5]
	mov r2, r6
	bl FUN_02113390
	mov r8, #0
	ldr r5, _02033144 ; =0x0209A250
	b _02033054
_02033030:
	add r0, r4, r8, lsl #2
	ldr r1, [r0, #0x54]
	cmp r1, #0
	beq _02033048
	mov r0, r5
	bl FUN_0202e1c0
_02033048:
	add r0, r4, r8, lsl #2
	str r7, [r0, #0x54]
	add r8, r8, #1
_02033054:
	cmp r8, #3
	blt _02033030
	mov r8, #0
	b _02033110
_02033064:
	mov r0, #6
	mla r6, r8, r0, r4
	mov sb, #0
	ldr r5, _02033140 ; =0x02099F38
	b _02033104
_02033078:
	add r0, r6, sb, lsl #1
	add r0, r0, #0x100
	ldrsh r1, [r0, #0x20]
	cmp r1, #0
	beq _020330BC
	ldr r0, [r5]
	bl FUN_020591e8
	add r0, r6, sb, lsl #1
	add r0, r0, #0x100
	ldrsh r1, [r0, #0x20]
	ldr r0, [r5]
	bl FUN_02058ee0
	add r0, r6, sb, lsl #1
	add r0, r0, #0x100
	ldrsh r1, [r0, #0x20]
	ldr r0, [r5]
	bl FUN_02058ee0
_020330BC:
	add r0, r6, sb, lsl #1
	add r0, r0, #0x100
	ldrsh r1, [r0, #0xfc]
	cmp r1, #0
	beq _02033100
	ldr r0, [r5]
	bl FUN_020591e8
	add r0, r6, sb, lsl #1
	add r0, r0, #0x100
	ldrsh r1, [r0, #0xfc]
	ldr r0, [r5]
	bl FUN_02058ee0
	add r0, r6, sb, lsl #1
	add r0, r0, #0x100
	ldrsh r1, [r0, #0xfc]
	ldr r0, [r5]
	bl FUN_02058ee0
_02033100:
	add sb, sb, #1
_02033104:
	cmp sb, #3
	blt _02033078
	add r8, r8, #1
_02033110:
	cmp r8, #2
	blt _02033064
	mov r5, #0xdc
	mov r1, r7
	mov r2, r5
	add r0, r4, #0x60
	bl MemWrite
	mov r1, r7
	mov r2, r5
	add r0, r4, #0x13c
	bl MemWrite
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02033140: .word 0x02099F38
_02033144: .word 0x0209A250

	arm_func_start FUN_02033148
FUN_02033148: ; 0x02033148
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sl, r0
	ldrsb r0, [sl, #0x34]
	mov fp, r1
	mov r5, #2
	cmp r0, #0
	ldr r4, _02033984 ; =0x02099F38
	mov r8, #1
	beq _02033190
	ldr r0, [sl, #0x10]
	tst r0, #0x80
	beq _02033190
	tst r0, #0x20
	beq _02033190
	tst r0, #2
	biceq r0, r0, #1
	streq r0, [sl, #0x10]
	arm_func_end FUN_02033148
_02033190:
	ldr r0, [sl, #0x10]
	ldrsh r1, [sl, #0x36]
	tst r0, #1
	ldr r0, [r4]
	mov r2, r5
	bne _020331EC
	bl FUN_02114370
	ldrsh r1, [sl, #0x38]
	ldr r0, [r4]
	mov r2, r5
	bl FUN_02114370
	add r1, sl, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0xfc]
	mov r2, r5
	bl FUN_02114370
	add r0, sl, #0x1000
	ldrsh r1, [r0, #0xf8]
	ldr r0, [r4]
	mov r2, r5
	bl FUN_02114370
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020331EC:
	mov r3, r8
	bl FUN_021142FC
	add r1, sl, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0xfc]
	mov r2, r5
	mov r3, r8
	bl FUN_021142FC
	ldr r1, [sl, #0x10]
	mov r0, sl
	bic r2, r1, #0xc0
	add r1, sl, #0x34
	str r2, [sl, #0x10]
	bl FUN_02034304
	cmp r0, #0
	ldrne r0, [sl, #0x10]
	orrne r0, r0, #0x40
	strne r0, [sl, #0x10]
	bne _0203324C
	ldrsb r0, [sl, #0x3f]
	cmp r0, #0
	ldrne r0, [sl, #0x10]
	orrne r0, r0, #0x80
	strne r0, [sl, #0x10]
_0203324C:
	ldr r0, [sl, #0x10]
	mov r7, #0
	tst r0, #0xc0
	addne r0, sl, #0x1000
	mov sb, #2
	ldr r4, _02033984 ; =0x02099F38
	strbne r8, [r0, #0x30c]
	bne _02033280
	ldrsb r0, [sl, #0x34]
	cmp r0, #0
	add r0, sl, #0x1000
	strbne r8, [r0, #0x30c]
	strbeq r7, [r0, #0x30c]
_02033280:
	ldrsb r0, [sl, #0x3c]
	ldr r2, [sl, #0x44]
	ldr r1, [sl, #0x48]
	cmp r0, #0
	asr r5, r2, #0xc
	asr r6, r1, #0xc
	ble _020333B8
	ldrsb r0, [sl, #0x34]
	cmp r0, #0
	bne _020333B8
	add r0, sl, #0x100
	ldrsb r0, [r0, #0x2f]
	cmp r0, #0
	addle r0, sl, #0x200
	ldrsble r0, [r0, #0xb]
	cmple r0, #0
	ble _020333B8
	str r8, [sp]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, r8
	mov r3, sb
	bl FUN_02113EC0
	str r8, [sp]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, sb
	mov r3, sb
	bl FUN_02113EC0
	str r7, [sp]
	ldrsb r3, [sl, #0x3c]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, sb
	sub r3, r3, #1
	bl FUN_0211401C
	ldrsb r0, [sl, #0x3d]
	ldr r7, _02033988 ; =0x0208C364
	mov r2, sb
	sub r0, r0, #1
	add r0, r7, r0, lsl #2
	ldrsh r0, [r0, #2]
	add r0, r6, r0
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
	ldrsb r3, [sl, #0x3d]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	sub r3, r3, #1
	lsl r3, r3, #2
	ldrsh r3, [r7, r3]
	add r3, r5, r3
	lsl r3, r3, #0x10
	asr r3, r3, #0x10
	bl FUN_02113B78
	ldrsb r0, [sl, #0x3d]
	mov r2, r8
	sub r0, r0, #1
	add r0, r7, r0, lsl #2
	ldrsh r0, [r0, #2]
	add r0, r6, r0
	add r0, r0, #7
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
	ldrsb r3, [sl, #0x3d]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	sub r3, r3, #1
	lsl r3, r3, #2
	ldrsh r3, [r7, r3]
	add r3, r5, r3
	add r3, r3, #0xa
	lsl r3, r3, #0x10
	asr r3, r3, #0x10
	bl FUN_02113B78
	b _020333E0
_020333B8:
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r3, sb
	mov r2, #1
	bl FUN_02113F7C
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, sb
	mov r3, sb
	bl FUN_02113F7C
_020333E0:
	ldr r0, [sl, #0x10]
	mov r1, #0
	tst r0, #4
	ldr r4, _02033984 ; =0x02099F38
	beq _02033404
	add r0, sl, #0x1300
	ldrsb r0, [r0, #0xe]
	tst r0, #0x20
	strne r1, [sl, #0x30]
_02033404:
	ldr r0, [sl, #0x10]
	tst r0, #0x40
	addeq r0, sl, #0x1300
	ldrsbeq r0, [r0, #0xd]
	cmpeq r0, #4
	bne _0203348C
	ldr r0, [sl, #0x30]
	cmp r0, #0
	beq _02033444
	mov r0, #1
	str r0, [sp]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, #3
	mov r3, #2
	bl FUN_02113EC0
_02033444:
	ldr r0, [sl, #0x30]
	and r0, r0, #0x1f
	asr r0, r0, #1
	rsb r1, r0, #0x1f
	orr r0, r1, r1, lsl #5
	orr r0, r0, r1, lsl #10
	lsl r2, r0, #0x10
	lsr r3, r2, #0x10
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, #3
	bl FUN_02113B00
	add r0, sl, #0x1000
	ldr r1, [sl, #0x30]
	ldr r0, [r0, #0x3e0]
	add r0, r1, r0
	str r0, [sl, #0x30]
	b _020334A4
_0203348C:
	str r1, [sl, #0x30]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r4]
	mov r2, #3
	mov r3, #2
	bl FUN_02113F7C
_020334A4:
	ldrsb r1, [sl, #0x42]
	ldr r3, _0203398C ; =0x0208C36C
	ldr r0, _02033984 ; =0x02099F38
	sub r1, r1, #1
	add r1, r3, r1, lsl #2
	ldrsh r1, [r1, #2]
	mov r2, #3
	str r1, [sp]
	ldrsb r4, [sl, #0x42]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r0]
	sub r4, r4, #1
	lsl r4, r4, #2
	ldrsh r3, [r3, r4]
	bl FUN_02113B78
	ldrsb r0, [sl, #0x34]
	ldrsh r2, [sl, #0x36]
	mov r3, #1
	cmp r0, #0
	movne r0, #1
	strbne r0, [sl, #0x12d]
	strbne r0, [sl, #0x209]
	ldr r0, [sl, #0x10]
	add r1, sl, #0x60
	bic r4, r0, #0x30
	mov r0, sl
	str r4, [sl, #0x10]
	bl FUN_02034784
	mov r3, #1
	orr r4, r0, #0
	ldrsh r2, [sl, #0x36]
	mov r0, sl
	add r1, sl, #0x13c
	sub r3, r3, #2
	bl FUN_02034784
	orrs r0, r4, r0
	ldrne r0, [sl, #0x10]
	orrne r0, r0, #0x10
	strne r0, [sl, #0x10]
	bne _02033558
	ldrsb r0, [sl, #0x34]
	cmp r0, #0
	ldrne r0, [sl, #0x10]
	orrne r0, r0, #0x20
	strne r0, [sl, #0x10]
_02033558:
	ldr r2, [sl, #0x10]
	ldr r1, _02033990 ; =0x020A0640
	tst r2, #0x100
	ldr r0, _02033984 ; =0x02099F38
	beq _02033878
	tst r2, #4
	beq _02033878
	tst r2, #2
	beq _02033878
	ldrb r0, [r1, #0x507]
	mov r3, #0x80
	mov r4, #0x40
	cmp r0, #1
	ldrb r0, [r1, #0x507]
	movne r3, #2
	cmp r0, #1
	add r0, sl, #0x4200
	ldrh r2, [r0, #0x5c]
	movne r4, #0x400
	orr r0, r4, r3
	tst r2, r0
	beq _0203363C
	ldrb r0, [r1, #0x507]
	mov r2, #0x40
	cmp r0, #1
	add r0, sl, #0x4200
	ldrh r0, [r0, #0x5c]
	movne r2, #0x400
	tst r0, r2
	addne r0, sl, #0x1300
	ldrsbne r2, [r0, #0x25]
	addne r0, sl, #0x1000
	subne r2, r2, #1
	strbne r2, [r0, #0x325]
	ldrb r0, [r1, #0x507]
	mov r1, #0x80
	cmp r0, #1
	add r0, sl, #0x4200
	ldrh r0, [r0, #0x5c]
	movne r1, #2
	tst r0, r1
	addne r0, sl, #0x1300
	ldrsbne r1, [r0, #0x25]
	addne r0, sl, #0x1000
	addne r1, r1, #1
	strbne r1, [r0, #0x325]
	add r0, sl, #0x1300
	ldrsb r2, [r0, #0x25]
	ldrsb r1, [r0, #0x24]
	add r0, r2, r1
	bl FUN_0201f9bc
	add r0, sl, #0x1000
	strb r1, [r0, #0x325]
	ldr r0, _02033994 ; =0x0209AC44
	mov r1, #8
	bl FUN_0202cf6c
	b _020336E4
_0203363C:
	add r0, sl, #0x4000
	ldr r0, [r0, #0x27c]
	cmp r0, #0
	beq _020336E4
	add r4, sl, #0x1300
	ldrh r1, [r4, #0x28]
	ldrsb r0, [r4, #0x24]
	ldrh r2, [r4, #0x26]
	mov sb, #0
	mul r0, r1, r0
	rsb r7, r2, #0xf8
	rsb r8, r0, #0x80
	b _020336D8
_02033670:
	ldrh r2, [r4, #0x26]
	mov r0, sl
	mov r1, #1
	add r2, r7, r2
	str r2, [sp]
	ldrh fp, [r4, #0x28]
	mov r2, r7
	mov r3, r8
	add fp, r8, fp
	str fp, [sp, #4]
	bl FUN_02030114
	cmp r0, #0
	beq _020336CC
	add r0, sl, #0x1300
	ldrsb r0, [r0, #0x25]
	cmp r0, sb
	beq _020336C0
	ldr r0, _02033994 ; =0x0209AC44
	mov r1, #8
	bl FUN_0202cf6c
_020336C0:
	add r0, sl, #0x1000
	strb sb, [r0, #0x325]
	b _020336E4
_020336CC:
	ldrh r0, [r4, #0x28]
	add sb, sb, #1
	add r8, r8, r0
_020336D8:
	ldrsb r0, [r4, #0x24]
	cmp sb, r0
	blt _02033670
_020336E4:
	mov r0, #0x80
	str r0, [sp]
	ldr r7, _02033984 ; =0x02099F38
	mov r4, #0xe
	ldrsh r1, [sl, #0x36]
	ldr r0, [r7]
	mov r2, r4
	mov r3, #0xf8
	bl FUN_02113B78
	mov fp, #0
	str fp, [sp]
	add r0, sl, #0x1300
	ldrsh r1, [sl, #0x36]
	ldrsb r3, [r0, #0x25]
	ldr r0, [r7]
	mov r2, r4
	bl FUN_0211401C
	mov r2, r4
	mov r4, #1
	str r4, [sp]
	ldr r0, [r7]
	ldrsh r1, [sl, #0x36]
	mov r8, #2
	mov r3, r8
	bl FUN_02113EC0
	ldr r0, [r7]
	mov r3, r8
	ldrsh r1, [sl, #0x36]
	mov r2, #3
	bl FUN_02113F7C
	add r0, sl, #0x4000
	ldr r0, [r0, #0x280]
	cmp r0, #0
	beq _020337EC
	add r4, sl, #0x1300
	ldrh r1, [r4, #0x28]
	ldrsb r0, [r4, #0x24]
	ldrh r2, [r4, #0x26]
	mov sb, fp
	mul r0, r1, r0
	rsb r7, r2, #0xf8
	rsb r8, r0, #0x80
	b _020337DC
_02033790:
	ldrh r2, [r4, #0x26]
	mov r0, sl
	mov r1, #4
	add r2, r7, r2
	str r2, [sp]
	ldrh ip, [r4, #0x28]
	mov r2, r7
	mov r3, r8
	add ip, r8, ip
	str ip, [sp, #4]
	bl FUN_02030114
	cmp r0, #0
	addne r0, sl, #0x1000
	strbne sb, [r0, #0x325]
	movne fp, #1
	bne _0203383C
	ldrh r0, [r4, #0x28]
	add sb, sb, #1
	add r8, r8, r0
_020337DC:
	ldrsb r0, [r4, #0x24]
	cmp sb, r0
	blt _02033790
	b _0203383C
_020337EC:
	ldr r1, _02033990 ; =0x020A0640
	ldrb r0, [r1, #0x507]
	cmp r0, #1
	add r0, sl, #0x4200
	ldrh r0, [r0, #0x5c]
	movne r4, #0x10
	tst r0, r4
	movne fp, #1
	bne _0203383C
	ldrb r0, [r1, #0x507]
	mov r1, #2
	cmp r0, #1
	add r0, sl, #0x4200
	ldrh r0, [r0, #0x5c]
	movne r1, #0x80
	tst r0, r1
	movne fp, #1
	subne r1, fp, #2
	addne r0, sl, #0x1000
	strbne r1, [r0, #0x325]
_0203383C:
	cmp fp, #0
	ldr r0, _02033984 ; =0x02099F38
	beq _0203388C
	ldr r1, [sl, #0x10]
	mov r2, #0xe
	bic r1, r1, #0x100
	str r1, [sl, #0x10]
	ldrsh r1, [sl, #0x36]
	ldr r0, [r0]
	mov r3, #2
	bl FUN_02113F7C
	ldr r0, _02033994 ; =0x0209AC44
	mov r1, #1
	bl FUN_0202cf6c
	b _0203388C
_02033878:
	ldrsh r1, [sl, #0x36]
	ldr r0, [r0]
	mov r2, #0xe
	mov r3, #2
	bl FUN_02113F7C
_0203388C:
	ldr r4, _02033984 ; =0x02099F38
	add r1, sl, #0x1000
	add r2, r5, #0xc
	add r0, r6, #0x12
	lsl r2, r2, #0x10
	lsl r3, r0, #0x10
	ldr r0, [r4]
	ldr r1, [r1, #0xfc]
	asr r2, r2, #0x10
	asr r3, r3, #0x10
	bl FUN_02114248
	add r0, sl, #0x1000
	add r2, r5, #0xc
	add r1, r6, #0x12
	lsl r2, r2, #0x10
	lsl r3, r1, #0x10
	ldrsh r1, [r0, #0xf8]
	ldr r0, [r4]
	asr r2, r2, #0x10
	asr r3, r3, #0x10
	bl FUN_02114248
	ldr r0, [sl, #0x10]
	tst r0, #0x50
	bne _02033904
	tst r0, #2
	beq _02033904
	mov r0, sl
	mov r2, fp
	add r1, sl, #0x218
	bl FUN_02033998
_02033904:
	ldr r0, [sl, #0x10]
	tst r0, #0x200
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sl, #0x4200
	ldrh r0, [r0, #0x5c]
	cmp r0, #0
	bne _02033938
	add r0, sl, #0x4000
	ldr r0, [r0, #0x27c]
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02033938:
	add r2, sl, #0x1300
	add r1, sl, #0x4200
	add r0, sl, #0x4000
	ldr r3, [r0, #0x27c]
	ldrh r4, [r2, #0x2a]
	ldrh r1, [r1, #0x5c]
	add r0, sl, #0x2a
	cmp r3, #0
	add r3, r0, #0x1300
	orr r0, r4, r1
	strh r0, [r2, #0x2a]
	ldrhne r0, [r3]
	orrne r0, r0, #0x4000
	strhne r0, [r3]
	ldr r0, [sl, #0x10]
	bic r0, r0, #0x200
	str r0, [sl, #0x10]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02033984: .word 0x02099F38
_02033988: .word 0x0208C364
_0203398C: .word 0x0208C36C
_02033990: .word 0x020A0640
_02033994: .word 0x0209AC44

	arm_func_start FUN_02033998
FUN_02033998: ; 0x02033998
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xb4
	mov r4, r1
	add r1, r4, #0x1000
	ldrsb r1, [r1, #0xf4]
	mov r8, r0
	mov r7, r2
	cmp r1, #0
	mov r6, #2
	mov sb, #1
	mov sl, #0
	ldr r5, _020342E4 ; =0x02099F38
	beq _020339F0
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	mov r2, r6
	bl FUN_02114370
	add r0, r4, #0xe00
	ldrsh r1, [r0, #0xe0]
	ldr r0, [r5]
	mov r2, r6
	bl FUN_02114370
	arm_func_end FUN_02033998
_020339F0:
	add r1, r4, #0x1000
	ldrsb r2, [r1, #0xf5]
	mov r0, #0
	str r0, [sp, #0x20]
	cmp r2, #6

	arm_func_start switchD
switchD: ; 0x02033A04
	addls pc, pc, r2, lsl #2
	b _020342D8
	arm_func_end switchD
_02033A0C: ; jump table
	b LAB_02033a28 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02033A10
	b _02033A34
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02033A14
	b _02033A90
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02033A18
	b _02033DFC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02033A1C
	b _02034158
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02033A20
	b _02034228
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02033A24
	b _020342D0
	arm_func_end caseD_6
LAB_02033a28:
	add sp, sp, #0xb4
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02033A34:
	mov r6, #2
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	mov r2, r6
	bl FUN_02114370
	add r0, r4, #0xe00
	ldrsh r1, [r0, #0xe0]
	ldr r0, [r5]
	mov r2, r6
	bl FUN_02114370
	add r1, r4, #0x1000
	ldrsb r2, [r1, #0xf5]
	add r5, r4, #0xef0
	ldr r3, _020342E8 ; =0x00007FFF
	add r0, r4, #0x1100
	strh r3, [r0, #6]
	ldr r0, [sp, #0x20]
	add r2, r2, #1
	str r5, [r1, #0xf0]
	strb r0, [r1, #0xf7]
	strh r0, [r1, #0xfa]
	strb r2, [r1, #0xf5]
	b _020342D8
_02033A90:
	mov sb, r0
	strb r0, [r1, #0xf8]
	add r0, r4, #0xf8
	ldr r8, [r1, #0xf0]
	mov r6, #1
	add r1, r0, #0x1000
	b _02033AEC
_02033AAC:
	ldrsb r0, [r8]
	cmp r0, #0xa
	cmpne r0, #0xc
	beq _02033AD8
	ldrsb r0, [r1]
	add r0, r0, #1
	strb r0, [r1]
	ldrsb r0, [r8]
	tst r0, #0x80
	addne r8, r8, #1
	addne sb, sb, #1
_02033AD8:
	ldrsb r0, [r8]
	cmp r0, #0xc
	beq _02033AF8
	add sb, sb, #1
	add r8, r8, #1
_02033AEC:
	ldrsb r0, [r8]
	cmp r0, #0
	bne _02033AAC
_02033AF8:
	add r0, r4, #0x1000
	add r7, sp, #0x30
	ldr r1, [r0, #0xf0]
	mov r0, r7
	add r2, sb, #1
	bl StrncpyWithNullPad
	add r0, sb, #2
	strb sl, [r7, r0]
	ldrsb r0, [r8]
	ldr r7, _020342EC ; =0x02099F50
	mov r2, #3
	cmp r0, #0
	addne r1, r8, #1
	addne r0, r4, #0x1000
	strne r1, [r0, #0xf0]
	addeq r0, r4, #0x1000
	streq sl, [r0, #0xf0]
	ldr r0, [r7]
	mov r1, r6
	bl rwriteat14n18
	ldr r1, [r4, #0xee8]
	mov sb, #0
	ldr r0, [r5]
	add r2, sp, #0x28
	add r3, sp, #0x2c
	str sb, [sp, #0x28]
	bl FUN_0205935c
	ldr sl, [sp, #0x28]
	mov r0, #0x40
	stm sp, {r0, sb}
	str sb, [sp, #8]
	str r6, [sp, #0xc]
	add r0, r4, #0x2e0
	str r0, [sp, #0x10]
	mov r0, #0x180
	str r0, [sp, #0x14]
	str sb, [sp, #0x18]
	str sb, [sp, #0x1c]
	ldr r0, [r7]
	add r1, sp, #0x30
	mov r2, sl
	mov r3, #0x100
	bl FUN_020425fc
	ldr r1, [sp, #0x2c]
	mov r0, sl
	bl FUN_020026d0
	ldr r3, [sp, #0x2c]
	ldr r1, [r4, #0xee8]
	ldr r0, [r5]
	mov r2, sl
	str sb, [sp]
	str sb, [sp, #4]
	str sb, [sp, #8]
	bl FUN_02059288
	ldr r0, [r7]
	mov r1, r6
	mov r2, r6
	bl rwriteat14n18
	add r0, r4, #0x1100
	strh sb, [r0]
	add r0, r4, #0x1000
	ldr r2, [r4, #0xee8]
	strh sb, [r0, #0xfe]
	strb sb, [r0, #0xf9]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	and r2, r2, #0xff
	bl FUN_02112950
	mov r7, #2
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	mov r2, r7
	bl FUN_02113390
	add r0, r4, #0x1000
	ldrsb r3, [r0, #0xf8]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	add r2, r4, #0x2e0
	bl FUN_02113618
	str r6, [sp]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	mov r2, r6
	mov r3, r7
	bl FUN_02113EC0
	add r8, r4, #0x1000
	mov r7, sb
	mov sl, #0x8a
	ldr r6, _020342F0 ; =0x51EB851F
	b _02033CA0
_02033C60:
	add r0, r4, sb, lsl #3
	add r3, r0, #0x200
	ldrsh r0, [r3, #0xe2]
	add r2, sb, #1
	smulbb r1, r0, sl
	lsr r0, r1, #0x1f
	smull r1, fp, r6, r1
	add fp, r0, fp, asr #5
	lsl r0, fp, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
	ldrsh r3, [r3, #0xe0]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	bl FUN_02113B78
	add sb, sb, #1
_02033CA0:
	ldrsb r0, [r8, #0xf8]
	cmp sb, r0
	blt _02033C60
	add r0, r4, #0xe00
	ldrsh r1, [r0, #0xe0]
	ldr r0, _020342E4 ; =0x02099F38
	mov r5, #2
	ldr r0, [r0]
	mov r2, r5
	mov r3, #1
	mov r8, #0
	bl FUN_021142FC
	add r0, r4, #0xe00
	ldrsh r1, [r0, #0xe0]
	ldr r0, _020342E4 ; =0x02099F38
	mov r2, r5
	ldr r0, [r0]
	bl FUN_02113390
	add r0, r4, #0xe00
	ldrsh r1, [r0, #0xe2]
	ldr r0, _020342E4 ; =0x02099F38
	add r2, sp, #0x24
	ldr r0, [r0]
	str r8, [sp, #0x24]
	add r3, sp, #0x2c
	bl FUN_0205935c
	mov sb, r8
	ldr sl, [sp, #0x24]
	add r5, r4, #0x1000
	mov fp, #0x40
	ldr r6, _020342F4 ; =0x02099F1C
	b _02033DB8
_02033D20:
	mov r0, #0x2a
	mul r0, sb, r0
	add r3, r4, r0
	strb r7, [r3, #3]
	ldrsh r2, [r4, r0]
	ldrsh r1, [r5, #0xfa]
	cmp r2, r1
	blt _02033DB4
	ldrsb r0, [r5, #0xf8]
	add r0, r1, r0
	cmp r2, r0
	bgt _02033DB4
	str fp, [sp]
	str r7, [sp, #4]
	lsl r0, r8, #3
	str r0, [sp, #8]
	mov r0, #9
	str r0, [sp, #0xc]
	str r7, [sp, #0x10]
	str r7, [sp, #0x14]
	str r7, [sp, #0x18]
	str r7, [sp, #0x1c]
	add r1, r3, #0xa
	ldr r0, [r6]
	mov r2, sl
	mov r3, fp
	bl FUN_020425fc
	mov r1, #0x2a
	mla r1, sb, r1, r4
	ldr r0, [r6]
	add r1, r1, #0xa
	add r8, r8, #1
	bl FUN_0204294c
	mov r1, #0x2a
	mla r1, sb, r1, r4
	strb r0, [r1, #4]
	strb r8, [r1, #3]
_02033DB4:
	add sb, sb, #1
_02033DB8:
	cmp sb, #0x10
	blt _02033D20
	ldr r1, [sp, #0x2c]
	mov r0, sl
	bl FUN_020026d0
	add r0, r4, #0xe00
	ldr r2, _020342E4 ; =0x02099F38
	ldrsh r1, [r0, #0xe2]
	ldr r3, [sp, #0x2c]
	ldr r0, [r2]
	mov r5, #0
	str r5, [sp]
	str r5, [sp, #4]
	mov r2, sl
	str r5, [sp, #8]
	bl FUN_02059288
	b _02034144
_02033DFC:
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	mov r2, #2
	mov r3, #1
	mov sl, #0x2a
	bl FUN_021142FC
	add r1, r4, #0x1000
	add r0, r8, #0x1000
	ldrsh r2, [r1, #0xfc]
	ldr r0, [r0, #0x3e0]
	ldrsh r3, [r1, #0xfe]
	mul r0, r2, r0
	lsl r0, r0, #0x10
	add r0, r3, r0, asr #16
	strh r0, [r1, #0xfe]
	cmp r7, #0
	beq _02033E5C
	mov r6, #5
	ldr r0, _020342F8 ; =0x0209AC44
	mov r1, r6
	bl FUN_0202cf6c
	sub r1, r6, #6
	add r0, r4, #0x1000
	strh r1, [r0, #0xfe]
_02033E5C:
	add r0, r4, #0x1000
	ldrsb r1, [r0, #0xf6]
	tst r1, #0x10
	mvnne r1, #0
	strhne r1, [r0, #0xfe]
	add r1, r4, #0x1000
	ldrsh r0, [r1, #0xfe]
	cmp r0, #0
	ldrsblt r2, [r1, #0xf8]
	movlt r0, #0x64
	smulbblt r0, r2, r0
	strhlt r0, [r1, #0xfe]
	add r0, r4, #0x1000
	ldrsb r0, [r0, #0xf6]
	tst r0, #8
	beq _02033ECC
	add r1, r4, #0x1100
	add r0, r8, #0x1000
	ldr r0, [r0, #0x3e0]
	ldrsh r2, [r1]
	lsl r0, r0, #0x10
	add r0, r2, r0, asr #16
	strh r0, [r1]
	ldrsh r2, [r1]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	and r2, r2, #0xff
	bl FUN_02112DAC
_02033ECC:
	mov r6, #1
	b _0203410C
_02033ED4:
	add r0, r4, #0x1000
	ldrsb r1, [r0, #0xf7]
	ldrsh r3, [r0, #0xfa]
	add r2, r1, #1
	add r1, r4, r2, lsl #2
	add r1, r1, #0x200
	ldrsh r1, [r1, #0xa0]
	cmp r3, r1
	bne _02033F14
	strb r2, [r0, #0xf7]
	ldrsb r0, [r0, #0xf7]
	add r1, r4, #0x1100
	add r0, r4, r0, lsl #2
	add r0, r0, #0x200
	ldrh r0, [r0, #0xa2]
	strh r0, [r1, #6]
_02033F14:
	mov sb, #0
	add r0, r4, #0x1000
	b _02034020
_02033F20:
	mul r2, sb, sl
	ldrsh r3, [r0, #0xfa]
	ldrsh r1, [r4, r2]
	cmp r3, r1
	bne _0203401C
	add r5, r4, #0x1000
	add r0, r4, r2
	ldrsb fp, [r5, #0xf9]
	ldrb r3, [r0, #2]
	mov r1, #0x8a
	add r2, r4, fp, lsl #3
	add r3, fp, r3
	sub r3, r3, #1
	add r3, r4, r3, lsl #3
	add r3, r3, #0x200
	add r2, r2, #0x200
	ldrsh ip, [r2, #0xe0]
	ldrsh fp, [r3, #0xe0]
	ldrsh r2, [r3, #0xe4]
	add r3, ip, fp
	add r2, r3, r2
	add r2, r2, r2, lsr #31
	asr r2, r2, #1
	strh r2, [r0, #6]
	ldrsb r3, [r5, #0xf9]
	add r2, r4, #0xe00
	ldr r5, _020342E4 ; =0x02099F38
	add r3, r4, r3, lsl #3
	add r3, r3, #0x200
	ldrsh fp, [r3, #0xe2]
	mov r3, #2
	smulbb fp, fp, r1
	ldr r1, _020342F0 ; =0x51EB851F
	smull lr, ip, r1, fp
	lsr r1, fp, #0x1f
	add ip, r1, ip, asr #5
	strh ip, [r0, #8]
	mov r1, #1
	str r1, [sp]
	ldrsh r1, [r2, #0xe0]
	ldrb r2, [r0, #3]
	ldr r0, [r5]
	bl FUN_02113EC0
	mov fp, #0x2a
	mla r3, sb, fp, r4
	ldrsh r1, [r3, #8]
	add r0, r4, #0xe00
	str r1, [sp]
	ldrsh r1, [r0, #0xe0]
	ldrb r2, [r3, #3]
	ldrsh r3, [r3, #6]
	ldr r0, [r5]
	bl FUN_02113B78
	mov r0, #8
	str r0, [sp]
	mla r3, sb, fp, r4
	add r1, r8, #0x1000
	ldrb r2, [r3, #3]
	ldrsh r1, [r1, #0xf8]
	ldrb r3, [r3, #4]
	ldr r0, [r5]
	bl FUN_02113D08
	b _02034028
_0203401C:
	add sb, sb, #1
_02034020:
	cmp sb, #0x10
	blt _02033F20
_02034028:
	mov r0, #1
	str r0, [sp]
	add r0, r4, #0x1000
	ldrsb r2, [r0, #0xf9]
	ldr r5, _020342E4 ; =0x02099F38
	ldr r1, [r4, #0xee4]
	ldr r0, [r5]
	add r2, r2, #1
	mov r3, #2
	bl FUN_02113EC0
	add r0, r4, #0x1000
	ldrsb r2, [r0, #0xf9]
	add r1, r4, #0x1100
	ldrh r3, [r1, #6]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	add r2, r2, #1
	bl FUN_02113B00
	cmp r6, #0
	ldrne r0, [r4, #0xeec]
	cmpne r0, #0
	ble _020340D4
	cmp r7, #0
	beq _020340A0
	add r0, r4, #0x1000
	ldrsb r0, [r0, #0xf9]
	cmp r0, #0
	bne _020340D4
	cmp r7, #0
	beq _020340D4
_020340A0:
	add r0, r4, #0x1000
	ldrsb r3, [r0, #0xf9]
	ldr r1, _020342FC ; =0x55555556
	mov r2, #3
	smull r0, r5, r1, r3
	add r5, r5, r3, lsr #31
	smull r0, r1, r2, r5
	subs r5, r3, r0
	bne _020340D4
	ldr r1, [r4, #0xeec]
	ldr r0, _020342F8 ; =0x0209AC44
	bl FUN_0202cf6c
	mov r6, #0
_020340D4:
	add r0, r4, #0x1000
	ldrsb r1, [r0, #0xf9]
	ldrsh r5, [r0, #0xfa]
	ldrsh r3, [r0, #0xfe]
	add r1, r1, #1
	strb r1, [r0, #0xf9]
	ldrsb r2, [r0, #0xf9]
	ldrsb r1, [r0, #0xf8]
	add r5, r5, #1
	sub r3, r3, #0x64
	strh r5, [r0, #0xfa]
	strh r3, [r0, #0xfe]
	cmp r2, r1
	bge _0203411C
_0203410C:
	add r0, r4, #0x1000
	ldrsh r0, [r0, #0xfe]
	cmp r0, #0x64
	bgt _02033ED4
_0203411C:
	add r0, r4, #0x1000
	ldrsb r2, [r0, #0xf9]
	ldrsb r1, [r0, #0xf8]
	cmp r2, r1
	blt _020342D8
	ldr r0, [r0, #0xf0]
	cmp r0, #0
	ldreq r0, [r8, #0x10]
	orreq r0, r0, #4
	streq r0, [r8, #0x10]
_02034144:
	add r0, r4, #0x1000
	ldrsb r1, [r0, #0xf5]
	add r1, r1, #1
	strb r1, [r0, #0xf5]
	b _020342D8
_02034158:
	ldrsb r0, [r1, #0xf6]
	mov r6, #1
	tst r0, #8
	beq _020341AC
	add r1, r4, #0x1100
	add r0, r8, #0x1000
	ldr r0, [r0, #0x3e0]
	ldrsh r2, [r1]
	lsl r0, r0, #0x10
	add r0, r2, r0, asr #16
	strh r0, [r1]
	ldrsh r0, [r1]
	cmp r0, #0x80
	movgt r0, #0x80
	strhgt r0, [r1]
	add r0, r4, #0x1100
	ldrsh r2, [r0]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	and r2, r2, #0xff
	bl FUN_02112DAC
_020341AC:
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	mov r3, r6
	mov r2, #2
	bl FUN_021142FC
	add r0, r4, #0x1000
	ldr r1, [r0, #0xf0]
	cmp r1, #0
	bne _020341E8
	ldrsb r0, [r0, #0xf6]
	tst r0, #0x20
	bne _020342D8
	tst r0, #0x40
	movne r7, r6
	movne r6, #0
_020341E8:
	cmp r7, #0
	beq _020342D8
	cmp r6, #0
	beq _02034204
	ldr r0, _020342F8 ; =0x0209AC44
	mov r1, #5
	bl FUN_0202cf6c
_02034204:
	ldr r0, _02034300 ; =0x020AF8AC
	bl FUN_02048c40
	add r1, r4, #0x1000
	ldrsb r2, [r1, #0xf5]
	add r0, r4, #0x1100
	mov r3, #0x20
	add r2, r2, #1
	strh r3, [r0]
	strb r2, [r1, #0xf5]
_02034228:
	add r0, r4, #0x1000
	ldrsb r0, [r0, #0xf6]
	mov r6, #2
	tst r0, #8
	beq _0203427C
	add r1, r4, #0x1100
	add r0, r8, #0x1000
	ldr r0, [r0, #0x3e0]
	ldrsh r2, [r1]
	lsl r0, r0, #0x10
	sub r0, r2, r0, asr #16
	strh r0, [r1]
	ldrsh r2, [r1]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	and r2, r2, #0xff
	bl FUN_02112DAC
	add r0, r4, #0x1100
	ldrsh r0, [r0]
	cmp r0, #0
	bgt _020342D8
_0203427C:
	add r0, r4, #0x1000
	ldr r1, [r0, #0xf0]
	mov r2, r6
	cmp r1, #0
	strbne sb, [r0, #0xf5]
	ldreq r1, [r8, #0x10]
	biceq r1, r1, #6
	streq r1, [r8, #0x10]
	strbeq sl, [r0, #0xf6]
	ldr r0, [r5]
	ldr r1, [r4, #0xee4]
	bl FUN_02113390
	add r0, r4, #0xe00
	ldrsh r1, [r0, #0xe0]
	ldr r0, [r5]
	mov r2, r6
	bl FUN_02113390
	add r0, r4, #0x1000
	ldrsb r1, [r0, #0xf5]
	add r1, r1, #1
	strb r1, [r0, #0xf5]
_020342D0:
	mov r0, #1
	str r0, [sp, #0x20]
_020342D8:
	ldr r0, [sp, #0x20]
	add sp, sp, #0xb4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020342E4: .word 0x02099F38
_020342E8: .word 0x00007FFF
_020342EC: .word 0x02099F50
_020342F0: .word 0x51EB851F
_020342F4: .word 0x02099F1C
_020342F8: .word 0x0209AC44
_020342FC: .word 0x55555556
_02034300: .word 0x020AF8AC

	arm_func_start FUN_02034304
FUN_02034304: ; 0x02034304
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	ldr r2, _020345A0 ; =0x0208C37C
	mov r7, r1
	ldrh r5, [r2]
	ldrh r4, [r2, #2]
	ldrh r3, [r2, #4]
	ldrh r2, [r2, #6]
	ldrsb r1, [r7, #0xa]
	strh r4, [sp, #6]
	strh r2, [sp, #0xa]
	mov r8, r0
	strh r5, [sp, #4]
	strh r3, [sp, #8]
	cmp r1, #0
	mov r4, #2
	ldr sb, _020345A4 ; =0x02099F38
	add r2, sp, #4
	mov r6, #1
	bne _02034384
	ldrsb r0, [r7, #0xe]
	cmp r0, #0
	ble _02034384
	sub r0, r0, #1
	lsl r1, r0, #2
	add r0, r2, r0, lsl #2
	ldrsh r1, [r2, r1]
	ldrsh r0, [r0, #2]
	lsl r1, r1, #0xc
	lsl r0, r0, #0xc
	str r1, [r7, #0x18]
	str r0, [r7, #0x1c]
	arm_func_end FUN_02034304
_02034384:
	ldrsb r0, [r7, #0xd]
	cmp r0, #1
	beq _0203439C
	cmp r0, #2
	beq _020343AC
	b _020343BC
_0203439C:
	mov r0, r8
	mov r1, r7
	bl FUN_020345a8
	b _020343B8
_020343AC:
	mov r0, r8
	mov r1, r7
	bl FUN_02034654
_020343B8:
	mov r6, r0
_020343BC:
	ldrsb r2, [r7, #0xc]
	cmp r2, #0
	ldrsbgt r0, [r7, #0xa]
	cmpgt r0, #0
	ble _02034570
	cmp r0, #0x14
	beq _02034570
	ldr r1, [r7, #0x10]
	ldr r0, [r7, #0x14]
	cmp r2, #5
	asr r4, r1, #0xc
	asr r5, r0, #0xc

	arm_func_start switchD
switchD: ; 0x020343EC
	addls pc, pc, r2, lsl #2
	b _0203453C
	arm_func_end switchD
_020343F4: ; jump table
	b _0203453C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020343F8
	b _0203440C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020343FC
	b _02034490
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02034400
	b _02034490
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02034404
	b _02034490
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02034408
	b _02034464
	arm_func_end caseD_5
_0203440C:
	ldr r2, [r8, #0x1c]
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	and r2, r2, #0xff
	bl FUN_02112950
	mov r2, #0
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	mov r3, r2
	bl FUN_0211346C
	ldr r1, [r8, #0x24]
	ldrsb r2, [r7, #0xf]
	and r3, r1, #0xff
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	bl FUN_021137DC
_0203444C:
	ldrsh r1, [r7, #2]
	ldr r0, [sb]
	mov r2, #5
	mov r3, #2
	bl FUN_02113F7C
	b _0203453C
_02034464:
	ldr r2, [r8, #0x1c]
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	and r2, r2, #0xff
	bl FUN_02112950
	mov r2, #0
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	mov r3, r2
	bl FUN_0211346C
	b _0203444C
_02034490:
	ldr r2, [r8, #0x20]
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	and r2, r2, #0xff
	bl FUN_02112950
	mov sl, #0
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	mov r2, sl
	mov r3, sl
	bl FUN_0211346C
	ldr r1, [r8, #0x28]
	mov r8, #5
	and r3, r1, #0xff
	ldrsh r1, [r7, #2]
	ldr r0, [sb]
	mov r2, r8
	bl FUN_021137DC
	str sl, [sp]
	ldrsb r3, [r7, #0xc]
	ldrsh r1, [r7, #2]
	ldr r0, [sb]
	mov r2, r8
	sub r3, r3, #2
	bl FUN_0211401C
	sub r0, r5, #6
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
	add r3, r4, #8
	lsl r3, r3, #0x10
	ldrsh r1, [r7, #2]
	ldr r0, [sb]
	mov r2, r8
	asr r3, r3, #0x10
	bl FUN_02113B78
	mov r0, #1
	str r0, [sp]
	ldrsh r1, [r7, #2]
	ldr r0, [sb]
	mov r2, r8
	mov r3, #2
	bl FUN_02113EC0
_0203453C:
	ldrsh r1, [r7, #4]
	lsl r2, r4, #0x10
	lsl r3, r5, #0x10
	ldr r0, [sb]
	asr r2, r2, #0x10
	asr r3, r3, #0x10
	bl FUN_02114248
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	mov r2, #2
	mov r3, #1
	bl FUN_021142FC
	b _02034594
_02034570:
	ldrsh r1, [r7, #4]
	ldr r0, [sb]
	mov r2, r4
	bl FUN_02114370
	ldrsh r1, [r7, #2]
	ldr r0, [sb]
	mov r3, r4
	mov r2, #5
	bl FUN_02113F7C
_02034594:
	mov r0, r6
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020345A0: .word 0x0208C37C
_020345A4: .word 0x02099F38

	arm_func_start FUN_020345a8
FUN_020345a8: ; 0x020345A8
	ldrsb r3, [r1, #0xa]
	mov r0, #1
	cmp r3, #0xb
	bgt _020345DC
	cmp r3, #0xa
	blt _020345D0
	beq _02034604
	cmp r3, #0xb
	beq _0203461C
	b _02034640
	arm_func_end FUN_020345a8
_020345D0:
	cmp r3, #0
	beq _020345E8
	b _02034640
_020345DC:
	cmp r3, #0x14
	beq _02034628
	b _02034640
_020345E8:
	ldr ip, [r1, #0x18]
	ldr r3, [r1, #0x1c]
	mov r2, #0xa
	str ip, [r1, #0x10]
	str r3, [r1, #0x14]
	strb r2, [r1, #0xa]
	bx lr
_02034604:
	ldrsb r2, [r1, #0xb]
	cmp r2, #0
	addne r2, r3, #1
	moveq r0, #0
	strbne r2, [r1, #0xa]
	bx lr
_0203461C:
	mov r2, #0x14
	strb r2, [r1, #0xa]
	bx lr
_02034628:
	ldrsb r2, [r1, #0xb]
	cmp r2, #0
	moveq r2, #0
	movne r0, #0
	strbeq r2, [r1, #0xa]
	bx lr
_02034640:
	ldrsb r2, [r1, #0xb]
	cmp r2, #0
	moveq r2, #0xb
	strbeq r2, [r1, #0xa]
	bx lr

	arm_func_start FUN_02034654
FUN_02034654: ; 0x02034654
	push {r3, r4, r5, lr}
	mov r5, r1
	ldrsb r3, [r5, #0xa]
	mov r4, #1
	cmp r3, #0xa
	bgt _02034690
	bge _02034704
	cmp r3, #1
	bgt _0203476C
	cmp r3, #0
	blt _0203476C
	beq _020346AC
	cmp r3, #1
	beq _020346CC
	b _0203476C
	arm_func_end FUN_02034654
_02034690:
	cmp r3, #0xb
	bgt _020346A0
	beq _02034720
	b _0203476C
_020346A0:
	cmp r3, #0x14
	beq _02034758
	b _0203476C
_020346AC:
	ldr r0, [r5, #0x18]
	ldr r1, [r5, #0x1c]
	sub r2, r0, #0x100000
	add r0, r3, #1
	str r2, [r5, #0x10]
	str r1, [r5, #0x14]
	strb r0, [r5, #0xa]
	b _0203477C
_020346CC:
	add r0, r0, #0x1000
	ldr r1, [r5, #0x18]
	ldr r0, [r0, #0x3e0]
	ldr r2, [r5, #0x10]
	add r1, r1, #0x40000
	mov r3, #0xcd
	bl FUN_02030740
	ldr r1, [r5, #0x18]
	str r0, [r5, #0x10]
	cmp r0, r1
	blt _0203477C
	mov r0, #0xa
	str r1, [r5, #0x10]
	strb r0, [r5, #0xa]
_02034704:
	ldrsb r0, [r5, #0xb]
	cmp r0, #0
	ldrsbne r0, [r5, #0xa]
	moveq r4, #0
	addne r0, r0, #1
	strbne r0, [r5, #0xa]
	b _0203477C
_02034720:
	add r0, r0, #0x1000
	ldr r1, [r5, #0x18]
	ldr r0, [r0, #0x3e0]
	ldr r2, [r5, #0x10]
	sub r1, r1, #0x140000
	mov r3, #0xcd
	bl FUN_02030740
	ldr r1, [r5, #0x18]
	str r0, [r5, #0x10]
	sub r1, r1, #0x100000
	cmp r0, r1
	movle r0, #0x14
	strble r0, [r5, #0xa]
	b _0203477C
_02034758:
	ldrsb r0, [r5, #0xb]
	cmp r0, #0
	movne r4, #0
	moveq r0, #0
	b _02034778
_0203476C:
	ldrsb r0, [r5, #0xb]
	cmp r0, #0
	moveq r0, #0xb
_02034778:
	strbeq r0, [r5, #0xa]
_0203477C:
	mov r0, r4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02034784
FUN_02034784: ; 0x02034784
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xb8
	ldr r4, _02034F20 ; =0x0208FC3C
	mov fp, r3
	add r3, sp, #0x2c
	mov sl, r1
	str r0, [sp, #0x14]
	mov r6, r2
	ldm r4, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r4, #6
	cmp fp, #0
	movgt r1, r4
	ldrsb r0, [sl, #0xd1]
	movle r1, #0xa
	ldrsb r3, [sl, #0xce]
	add r5, r1, r0, lsl #1
	mov r1, #1
	mov r2, #0
	cmp r3, #0xa
	str r1, [sp, #0x18]
	bgt _02034814
	mov r7, #0
	cmp r3, #0xa
	ldrge fp, _02034F24 ; =0x02099F38
	movge r6, r7
	bge _02034CDC
	cmp r3, #1
	bgt _02034C94
	cmp r3, #0
	blt _02034C94
	beq _02034820
	cmp r3, #1
	mov r8, r7
	beq _02034A64
	b _02034C94
	arm_func_end FUN_02034784
_02034814:
	cmp r3, #0x14
	beq _02034EFC
	b _02034C94
_02034820:
	ldrsb r1, [sl, #0xcf]
	ldr r5, _02034F24 ; =0x02099F38
	mov fp, #1
	cmp r1, #0
	addle sp, sp, #0xb8
	movle r0, r7
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r1, [sl, #0xd2]
	mov sb, #0
	add r6, sp, #0x38
	cmp r1, #0
	eorne r0, r0, #1
	strbne r0, [sl, #0xd1]
	b _02034A44
_02034858:
	ldrsb r0, [sl, #0xd2]
	cmp r0, #0
	bge _020348C4
	ldrsb r1, [sl, #0xd1]
	mla r0, r1, r4, sl
	add r0, r0, sb, lsl #1
	ldrsh r1, [r0, #0xc0]
	cmp r1, #0
	beq _020348B4
	ldr r0, [r5]
	bl FUN_020591e8
	ldrsb r2, [sl, #0xd1]
	ldr r0, [r5]
	mla r1, r2, r4, sl
	add r1, r1, sb, lsl #1
	ldrsh r1, [r1, #0xc0]
	bl FUN_02058ee0
	ldrsb r2, [sl, #0xd1]
	ldr r0, [r5]
	mla r1, r2, r4, sl
	add r1, r1, sb, lsl #1
	ldrsh r1, [r1, #0xc0]
	bl FUN_02058ee0
_020348B4:
	ldrsb r1, [sl, #0xd1]
	mla r0, r1, r4, sl
	add r0, r0, sb, lsl #1
	strh r7, [r0, #0xc0]
_020348C4:
	ldrsb r1, [sl, #0xd1]
	mla r0, r1, r4, sl
	add r0, r0, sb, lsl #1
	ldrsh r0, [r0, #0xc0]
	cmp r0, #0
	bne _02034A40
	ldr r1, _02034F28 ; =0x0208FD7C
	mov r0, r6
	bl _strcpy
	ldrsb r3, [sl, #0xd1]
	mov r0, #0x60
	lsl r2, sb, #5
	mla r1, r3, r0, sl
	ldrsb r0, [r2, r1]
	cmp r0, #0x2a
	beq _02034938
	add r1, r1, r2
	mov r0, r6
	bl FUN_02014ee8
	cmp sb, #2
	mov r0, r6
	beq _02034924
	ldr r1, _02034F2C ; =0x0208FD90
	b _02034928
_02034924:
	ldr r1, _02034F30 ; =0x0208FD98
_02034928:
	bl FUN_02014ee8
	str r7, [sp, #0x24]
	str r7, [sp, #0x28]
	b _020349E0
_02034938:
	add r1, sp, #0x2c
	ldr r1, [r1, sb, lsl #2]
	mov r0, r6
	bl FUN_02014ee8
	ldrsb r1, [sl, #0xd1]
	mov r0, #0x60
	mla r0, r1, r0, sl
	add r0, r0, sb, lsl #5
	add r0, r0, #1
	bl FUN_02024640
	mov r8, r0
	ldr r0, [sp, #0x14]
	add r0, r0, sb, lsl #2
	ldr r0, [r0, #0x54]
	cmp r0, #0
	beq _02034990
	mov r1, r8
	add r2, sp, #0x28
	add r3, sp, #0x24
	bl FUN_020F34F0
	cmp r0, #0
	bne _020349E0
_02034990:
	cmp sb, #0
	beq _020349AC
	cmp sb, #1
	beq _020349C0
	cmp sb, #2
	beq _020349D0
	b _02034A40
_020349AC:
	ldr r1, _02034F34 ; =0x0208FDA0
	mov r2, r8
	mov r0, r6
_020349B8:
	bl FUN_02023c40
	b _02034A40
_020349C0:
	mov r2, r8
	mov r0, r6
	ldr r1, _02034F38 ; =0x0208FDA8
	b _020349B8
_020349D0:
	mov r2, r8
	mov r0, r6
	ldr r1, _02034F3C ; =0x0208FDB0
	b _020349B8
_020349E0:
	cmp sb, #2
	beq _02034A00
	ldr r3, [sp, #0x24]
	ldr r2, [sp, #0x28]
	ldr r0, [r5]
	mov r1, #5
	stm sp, {r7, fp}
	b _02034A18
_02034A00:
	ldr r3, [sp, #0x24]
	ldr r2, [sp, #0x28]
	ldr r0, [r5]
	mov r1, #3
	str r7, [sp]
	str r7, [sp, #4]
_02034A18:
	str r7, [sp, #8]
	str r2, [sp, #0xc]
	str r3, [sp, #0x10]
	mov r2, r6
	mov r3, fp
	bl FUN_02058800
	ldrsb r2, [sl, #0xd1]
	mla r1, r2, r4, sl
	add r1, r1, sb, lsl #1
	strh r0, [r1, #0xc0]
_02034A40:
	add sb, sb, #1
_02034A44:
	cmp sb, #3
	blt _02034858
	ldrsb r0, [sl, #0xce]
	mov r1, #0
	strb r1, [sl, #0xd2]
_02034A58:
	add r0, r0, #1
	strb r0, [sl, #0xce]
	b _02034F14
_02034A64:
	mla r1, r0, r4, sl
	ldrsh r1, [r1, #0xc0]
	ldr r7, _02034F24 ; =0x02099F38
	cmp r1, #0
	beq _02034A8C
	ldr r0, _02034F24 ; =0x02099F38
	ldr r0, [r0]
	bl FUN_02058e30
	cmp r0, #0
	bgt _02034F14
_02034A8C:
	ldrsb r1, [sl, #0xd1]
	mla r0, r1, r4, sl
	ldrsh r1, [r0, #0xc2]
	cmp r1, #0
	beq _02034AB4
	ldr r0, _02034F24 ; =0x02099F38
	ldr r0, [r0]
	bl FUN_02058e30
	cmp r0, #0
	bgt _02034F14
_02034AB4:
	ldrsb r1, [sl, #0xd1]
	mla r0, r1, r4, sl
	ldrsh r1, [r0, #0xc4]
	cmp r1, #0
	beq _02034ADC
	ldr r0, _02034F24 ; =0x02099F38
	ldr r0, [r0]
	bl FUN_02058e30
	cmp r0, #0
	bgt _02034F14
_02034ADC:
	mov r0, #0xc0
	mul r1, fp, r0
	mov r0, #0x32
	mul r2, fp, r0
	rsb r0, r1, #0x80
	lsl r0, r0, #0x10
	rsb r1, r2, #0x32
	asr r0, r0, #0x10
	mov sb, #0
	and fp, r1, #0xff
	str r0, [sp, #0x20]
	b _02034BB8
_02034B0C:
	ldrsb r2, [sl, #0xd1]
	ldr r0, [r7]
	mla r1, r2, r4, sl
	add r1, r1, sb, lsl #1
	ldrsh r1, [r1, #0xc0]
	bl FUN_021146A4
	ldrsb r3, [sl, #0xd1]
	ldr r0, [r7]
	mov r2, r8
	mla r1, r3, r4, sl
	add r1, r1, sb, lsl #1
	ldrsh r1, [r1, #0xc0]
	mov r3, r8
	bl FUN_02059038
	ldrsb ip, [sl, #0xd1]
	ldr r0, [r7]
	mov r1, r6
	mla r3, ip, r4, sl
	add r3, r3, sb, lsl #1
	ldrsh r3, [r3, #0xc0]
	add r2, r5, sb
	and r3, r3, #0xff
	bl FUN_021137DC
	str r8, [sp]
	ldr r0, [r7]
	mov r1, r6
	add r2, r5, sb
	mov r3, r8
	bl FUN_0211401C
	str r8, [sp]
	ldr r0, [r7]
	mov r1, r6
	add r2, r5, sb
	mov r3, fp
	bl FUN_02114150
	mov r0, #0x40
	str r0, [sp]
	ldr r0, [r7]
	ldr r3, [sp, #0x20]
	mov r1, r6
	add r2, r5, sb
	bl FUN_02113B78
	add sb, sb, #1
_02034BB8:
	cmp sb, #2
	blt _02034B0C
	ldrsb r1, [sl, #0xd1]
	mov r7, #6
	ldr r8, _02034F24 ; =0x02099F38
	mla r0, r1, r7, sl
	ldrsh r1, [r0, #0xc4]
	ldr r0, [r8]
	mov r4, #0
	bl FUN_0205998c
	movs r1, r0
	beq _02034BFC
	ldr r2, _02034F40 ; =0x02099F04
	ldrb r0, [sl, #0xcc]
	ldr r1, [r1, #4]
	ldr r2, [r2]
	bl FUN_020F0C48
_02034BFC:
	ldrsb r1, [sl, #0xd1]
	mov r2, r4
	mov r3, r4
	mla r0, r1, r7, sl
	ldrsh r1, [r0, #0xc4]
	ldr r0, [r8]
	bl FUN_02059038
	ldrsb r3, [sl, #0xd1]
	ldr r0, [r8]
	mov r1, r6
	mla r2, r3, r7, sl
	ldrsh r3, [r2, #0xc4]
	add r2, r5, #1
	and r3, r3, #0xff
	bl FUN_02113890
	ldr r0, [r8]
	mov r3, r4
	mov r1, r6
	add r2, r5, #1
	bl FUN_02113944
	ldrsb r0, [sl, #0xcf]
	cmp r0, #2
	beq _02034C60
	ldr r4, _02034F44 ; =0x00007FFF
	b _02034C64
_02034C60:
	ldr r4, _02034F48 ; =0x0000318C
_02034C64:
	ldr r0, [r8]
	mov r1, r6
	mov r2, r5
	mov r3, r4
	bl FUN_02113B00
	ldr r0, [r8]
	mov r1, r6
	mov r3, r4
	add r2, r5, #1
	bl FUN_02113B00
	ldrsb r0, [sl, #0xce]
	b _02034A58
_02034C94:
	ldrsb r0, [sl, #0xd0]
	cmp r0, #1
	beq _02034CAC
	cmp r0, #2
	beq _02034CC4
	b _02034F14
_02034CAC:
	ldr r0, [sp, #0x14]
	mov r1, sl
	mov r2, r6
	mov r3, fp
	bl FUN_02034f64
	b _02034F14
_02034CC4:
	ldr r0, [sp, #0x14]
	mov r1, sl
	mov r2, r6
	mov r3, fp
	bl FUN_020350dc
	b _02034F14
_02034CDC:
	ldrsb r2, [sl, #0xd2]
	mov r1, r7
	str r1, [sp, #0x18]
	cmp r2, #0
	beq _02034ED8
	cmp r2, #0
	bge _02034ED0
	eor r0, r0, #1
	lsl r0, r0, #0x18
	asr r0, r0, #0x18
	mov sb, r1
	str r0, [sp, #0x1c]
	mov r0, r0
	mov r1, #0x60
	mla r7, r0, r4, sl
	mla r4, r0, r1, sl
	add r5, sp, #0x38
	b _02034EBC
_02034D24:
	add r0, r7, sb, lsl #1
	ldrsh r1, [r0, #0xc0]
	cmp r1, #0
	beq _02034D64
	ldr r0, [fp]
	bl FUN_020591e8
	add r0, r7, sb, lsl #1
	ldrsh r1, [r0, #0xc0]
	ldr r0, [fp]
	bl FUN_02058ee0
	add r0, r7, sb, lsl #1
	ldrsh r1, [r0, #0xc0]
	ldr r0, [fp]
	bl FUN_02058ee0
	add r0, r7, sb, lsl #1
	strh r6, [r0, #0xc0]
_02034D64:
	ldr r1, _02034F4C ; =0x0208FDB8
	mov r0, r5
	bl _strcpy
	lsl r1, sb, #5
	ldrsb r0, [r1, r4]
	cmp r0, #0x2a
	beq _02034DB4
	add r1, r4, r1
	mov r0, r5
	bl FUN_02014ee8
	cmp sb, #2
	mov r0, r5
	beq _02034DA0
	ldr r1, _02034F50 ; =0x0208FDCC
	b _02034DA4
_02034DA0:
	ldr r1, _02034F54 ; =0x0208FDD4
_02034DA4:
	bl FUN_02014ee8
	str r6, [sp, #0x24]
	str r6, [sp, #0x28]
	b _02034E50
_02034DB4:
	add r1, sp, #0x2c
	ldr r1, [r1, sb, lsl #2]
	mov r0, r5
	bl FUN_02014ee8
	add r0, r4, sb, lsl #5
	add r0, r0, #1
	bl FUN_02024640
	mov r8, r0
	ldr r0, [sp, #0x14]
	add r0, r0, sb, lsl #2
	ldr r0, [r0, #0x54]
	cmp r0, #0
	beq _02034E00
	mov r1, r8
	add r2, sp, #0x28
	add r3, sp, #0x24
	bl FUN_020F34F0
	cmp r0, #0
	bne _02034E50
_02034E00:
	cmp sb, #0
	beq _02034E1C
	cmp sb, #1
	beq _02034E30
	cmp sb, #2
	beq _02034E40
	b _02034EB8
_02034E1C:
	ldr r1, _02034F58 ; =0x0208FDDC
	mov r2, r8
	mov r0, r5
_02034E28:
	bl FUN_02023c40
	b _02034EB8
_02034E30:
	mov r2, r8
	mov r0, r5
	ldr r1, _02034F5C ; =0x0208FDE4
	b _02034E28
_02034E40:
	mov r2, r8
	mov r0, r5
	ldr r1, _02034F60 ; =0x0208FDEC
	b _02034E28
_02034E50:
	cmp sb, #2
	beq _02034E80
	ldr r8, [sp, #0x24]
	ldr r3, [sp, #0x28]
	ldr r0, [fp]
	mov r2, #1
	str r6, [sp]
	stmib sp, {r2, r6}
	str r3, [sp, #0xc]
	mov r1, #5
	str r8, [sp, #0x10]
	b _02034EA4
_02034E80:
	ldr r3, [sp, #0x24]
	ldr r2, [sp, #0x28]
	ldr r0, [fp]
	mov r1, #3
	str r6, [sp]
	str r6, [sp, #4]
	str r6, [sp, #8]
	str r2, [sp, #0xc]
	str r3, [sp, #0x10]
_02034EA4:
	mov r2, r5
	mov r3, #1
	bl FUN_02058800
	add r1, r7, sb, lsl #1
	strh r0, [r1, #0xc0]
_02034EB8:
	add sb, sb, #1
_02034EBC:
	cmp sb, #3
	blt _02034D24
	ldr r0, [sp, #0x1c]
	add r0, r0, #1
	strb r0, [sl, #0xd2]
_02034ED0:
	mov r0, #0xb
	strb r0, [sl, #0xce]
_02034ED8:
	ldrsb r0, [sl, #0xcf]
	cmp r0, #0
	movlt r0, #1
	strblt r0, [sl, #0xcd]
	ldrsb r0, [sl, #0xcd]
	cmp r0, #0
	movne r0, #0xb
	strbne r0, [sl, #0xce]
	b _02034F14
_02034EFC:
	ldrsb r0, [sl, #0xd2]
	strb r2, [sl, #0xce]
	cmp r0, #0
	moveq r0, #0
	streq r0, [sp, #0x18]
	strbeq r0, [sl, #0xcf]
_02034F14:
	ldr r0, [sp, #0x18]
	add sp, sp, #0xb8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02034F20: .word 0x0208FC3C
_02034F24: .word 0x02099F38
_02034F28: .word 0x0208FD7C
_02034F2C: .word 0x0208FD90
_02034F30: .word 0x0208FD98
_02034F34: .word 0x0208FDA0
_02034F38: .word 0x0208FDA8
_02034F3C: .word 0x0208FDB0
_02034F40: .word 0x02099F04
_02034F44: .word 0x00007FFF
_02034F48: .word 0x0000318C
_02034F4C: .word 0x0208FDB8
_02034F50: .word 0x0208FDCC
_02034F54: .word 0x0208FDD4
_02034F58: .word 0x0208FDDC
_02034F5C: .word 0x0208FDE4
_02034F60: .word 0x0208FDEC

	arm_func_start FUN_02034f64
FUN_02034f64: ; 0x02034F64
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r1
	ldrsb r1, [sl, #0xd1]
	mov r8, r3
	mov sb, r2
	ldrsb r0, [sl, #0xce]
	mov r2, #6
	cmp r8, #0
	movle r2, #0xa
	add r6, r2, r1, lsl #1
	cmp r0, #2
	beq _02034FA0
	cmp r0, #0xb
	beq _02035058
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02034f64
_02034FA0:
	mov r0, #0x70
	mul r0, r8, r0
	rsb r0, r0, #0x80
	lsl r0, r0, #0x10
	mov r7, #0
	asr r5, r0, #0x10
	mov fp, #0x40
	ldr r4, _020350D8 ; =0x02099F38
	b _02034FFC
_02034FC4:
	str fp, [sp]
	ldr r0, [r4]
	mov r1, sb
	mov r3, r5
	add r2, r6, r7
	bl FUN_02113B78
	mov r0, #1
	str r0, [sp]
	ldr r0, [r4]
	mov r1, sb
	add r2, r6, r7
	mov r3, #2
	bl FUN_02113EC0
	add r7, r7, #1
_02034FFC:
	cmp r7, #2
	blt _02034FC4
	ldrsb r0, [sl, #0xd1]
	mov r1, #6
	cmp r8, #0
	movle r1, #0xa
	eor r0, r0, #1
	mov r7, #0
	add r6, r1, r0, lsl #1
	mov r5, #2
	ldr r4, _020350D8 ; =0x02099F38
	b _02035044
_0203502C:
	ldr r0, [r4]
	mov r1, sb
	mov r3, r5
	add r2, r6, r7
	bl FUN_02113F7C
	add r7, r7, #1
_02035044:
	cmp r7, #2
	blt _0203502C
	mov r0, #0xa
	strb r0, [sl, #0xce]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02035058:
	ldrsb r0, [sl, #0xcd]
	cmp r0, #0
	moveq r0, #0
	strbeq r0, [sl, #0xce]
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #0xc0
	mul r0, r8, r0
	rsb r0, r0, #0x80
	lsl r0, r0, #0x10
	mov r7, #0
	asr r5, r0, #0x10
	mov r8, #0x40
	mov fp, #2
	ldr r4, _020350D8 ; =0x02099F38
	b _020350C4
_02035094:
	str r8, [sp]
	ldr r0, [r4]
	mov r1, sb
	mov r3, r5
	add r2, r6, r7
	bl FUN_02113B78
	ldr r0, [r4]
	mov r1, sb
	add r2, r6, r7
	mov r3, fp
	bl FUN_02113F7C
	add r7, r7, #1
_020350C4:
	cmp r7, #2
	blt _02035094
	mov r0, #0x14
	strb r0, [sl, #0xce]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020350D8: .word 0x02099F38

	arm_func_start FUN_020350dc
FUN_020350dc: ; 0x020350DC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r1
	mov sb, r2
	mov r4, r3
	ldrsb r2, [sl, #0xd1]
	ldrsb r1, [sl, #0xce]
	mov r3, #6
	cmp r4, #0
	movle r3, #0xa
	add r7, r3, r2, lsl #1
	cmp r1, #0xb
	bgt _02035130
	bge _02035258
	cmp r1, #3
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r1, #2
	poplt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	beq _0203513C
	cmp r1, #3
	beq _020351BC
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020350dc
_02035130:
	cmp r1, #0xc
	beq _0203526C
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203513C:
	mov r0, #0xc0
	mul r0, r4, r0
	rsb r0, r0, #0x80
	lsl r0, r0, #0x10
	mov r8, #0
	asr r5, r0, #0x10
	mov r6, #0x40
	mov fp, #1
	ldr r4, _02035338 ; =0x02099F38
	b _02035198
_02035164:
	str r6, [sp]
	ldr r0, [r4]
	mov r1, sb
	mov r3, r5
	add r2, r7, r8
	bl FUN_02113B78
	str fp, [sp]
	ldr r0, [r4]
	mov r1, sb
	add r2, r7, r8
	mov r3, #2
	bl FUN_02113EC0
	add r8, r8, #1
_02035198:
	cmp r8, #2
	blt _02035164
	ldrsb r0, [sl, #0xce]
	mov r1, #0xa
	str r1, [sl, #0xd8]
	add r0, r0, #1
	str r1, [sl, #0xd4]
	strb r0, [sl, #0xce]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020351BC:
	add r0, r0, #0x1000
	ldr r1, [sl, #0xd4]
	ldr r0, [r0, #0x3e0]
	subs r0, r1, r0
	str r0, [sl, #0xd4]
	movmi r0, #0
	strmi r0, [sl, #0xd4]
	ldr r0, [sl, #0xd4]
	ldr r1, [sl, #0xd8]
	lsl r0, r0, #6
	bl FUN_0201f9bc
	mov r8, r0
	add r0, r8, #0x70
	mul r1, r0, r4
	rsb r0, r1, #0x80
	mov r6, #0x40
	lsl r2, r0, #0x10
	asr r3, r2, #0x10
	ldr r5, _02035338 ; =0x02099F38
	str r6, [sp]
	ldr r0, [r5]
	mov r1, sb
	mov r2, r7
	bl FUN_02113B78
	add r3, r8, #0x70
	mul r4, r3, r4
	str r6, [sp]
	rsb r3, r4, #0x80
	lsl r3, r3, #0x10
	ldr r0, [r5]
	mov r1, sb
	add r2, r7, #1
	asr r3, r3, #0x10
	bl FUN_02113B78
	ldr r0, [sl, #0xd4]
	cmp r0, #0
	moveq r0, #0xa
	strbeq r0, [sl, #0xce]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02035258:
	mov r2, #0xa
	add r1, r1, #1
	str r2, [sl, #0xd8]
	str r2, [sl, #0xd4]
	strb r1, [sl, #0xce]
_0203526C:
	add r0, r0, #0x1000
	ldr r1, [sl, #0xd4]
	ldr r0, [r0, #0x3e0]
	subs r0, r1, r0
	str r0, [sl, #0xd4]
	movmi r0, #0
	strmi r0, [sl, #0xd4]
	ldr r0, [sl, #0xd4]
	ldr r1, [sl, #0xd8]
	lsl r0, r0, #6
	bl FUN_0201f9bc
	rsb r8, r0, #0x40
	add r0, r8, #0x70
	mul r1, r0, r4
	rsb r0, r1, #0x80
	mov r6, #0x40
	lsl r2, r0, #0x10
	asr r3, r2, #0x10
	ldr r5, _02035338 ; =0x02099F38
	str r6, [sp]
	ldr r0, [r5]
	mov r1, sb
	mov r2, r7
	bl FUN_02113B78
	add r0, r8, #0x70
	mul r1, r0, r4
	rsb r0, r1, #0x80
	lsl r1, r0, #0x10
	str r6, [sp]
	asr r3, r1, #0x10
	ldr r0, [r5]
	mov r1, sb
	add r2, r7, #1
	bl FUN_02113B78
	ldr r0, [sl, #0xd4]
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #2
	ldr r0, [r5]
	mov r1, sb
	mov r2, r7
	mov r3, r4
	bl FUN_02113F7C
	ldr r0, [r5]
	mov r1, sb
	mov r3, r4
	add r2, r7, #1
	bl FUN_02113F7C
	mov r0, #0x14
	strb r0, [sl, #0xce]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02035338: .word 0x02099F38

	arm_func_start FUN_0203533c
FUN_0203533c: ; 0x0203533C
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	add r0, r0, #0xa70
	add r4, r0, #0x3000
	mov r0, #0x28
	mla r4, r1, r0, r4
	ldr r6, _02035440 ; =0x02099EB0
	mov r8, r2
	ldr r0, [r6]
	mov r1, r8
	mov r5, r3
	bl FUN_0205e1e8
	str r0, [r4, #4]
	cmp r0, #0
	bge _020353DC
	mov r7, #1
	ldr r0, [r6]
	mov r1, r8
	mov r2, r7
	bl FUN_0205d734
	str r0, [r4, #4]
	str r7, [sp]
	mov r2, #0
	str r2, [sp, #4]
	ldr r0, [r6]
	ldr r1, [r4, #4]
	mov r3, r8
	bl FUN_0205d9a4
	ldr r1, [r4, #4]
	ldr r0, [r6]
	mov r2, r8
	mov r3, r7
	bl FUN_0205dbdc
	ldr r0, [r6]
	ldr r0, [r0, #0x18]
	cmp r0, #0
	strbne r7, [r0, #0x28]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x10
	b _020353E4
	arm_func_end FUN_0203533c
_020353DC:
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x20
_020353E4:
	strh r0, [r4, #0xa]
	ldr r0, [r4, #4]
	cmp r0, #0
	addeq sp, sp, #0xc
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	cmp r5, #0
	beq _02035428
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	str r3, [sp, #8]
	ldr r0, _02035440 ; =0x02099EB0
	ldr r1, [r4, #4]
	ldr r0, [r0]
	ldr r2, _02035444 ; =0x0209A7F4
	bl FUN_0205dec8
_02035428:
	ldrh r1, [r4, #0xa]
	mov r0, #1
	orr r1, r1, #1
	strh r1, [r4, #0xa]
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02035440: .word 0x02099EB0
_02035444: .word 0x0209A7F4

	arm_func_start FUN_02035448
FUN_02035448: ; 0x02035448
	push {r4, lr}
	add r0, r0, #0xa70
	add r2, r0, #0x3000
	mov r0, #0x28
	mla r4, r1, r0, r2
	ldrh r0, [r4, #0xa]
	tst r0, #1
	popeq {r4, pc}
	tst r0, #0x20
	bne _02035480
	ldr r0, _02035494 ; =0x02099EB0
	ldr r1, [r4, #4]
	ldr r0, [r0]
	bl FUN_0205dd98
	arm_func_end FUN_02035448
_02035480:
	mov r0, r4
	mov r1, #0
	mov r2, #0x28
	bl MemWrite
	pop {r4, pc}
	.align 2, 0_02035494: .word 0x02099EB0

	arm_func_start FUN_02035498
FUN_02035498: ; 0x02035498
	push {r3, r4, r5, lr}
	add r0, r0, #0xa70
	add r2, r0, #0x3000
	mov r0, #0x28
	mla r5, r1, r0, r2
	ldrh r0, [r5, #0xa]
	tst r0, #1
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	ldr r4, _020354FC ; =0x02099EB0
	ldr r1, [r5, #4]
	ldr r0, [r4]
	bl FUN_0205dd38
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [r5, #4]
	ldr r0, [r4]
	mov r2, #0x100
	bl FUN_0205dea8
	ldr r0, [r4]
	mov r1, #2
	bl FUN_0205e164
	mov r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0_020354FC: .word 0x02099EB0
	arm_func_end FUN_02035498

	arm_func_start FUN_02035500
FUN_02035500: ; 0x02035500
	mov r2, #0x28
	mla r0, r1, r2, r0
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0x7a]
	tst r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02035500

	arm_func_start FUN_0203551c
FUN_0203551c: ; 0x0203551C
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x14
	add r0, r0, #0xa70
	add r4, r0, #0x3000
	mov r0, #0x28
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	mov r6, r2
	mov r7, r3
	tst r0, #1
	addeq sp, sp, #0x14
	popeq {r4, r5, r6, r7, pc}
	ldr r0, [sp, #0x30]
	cmp r0, #0
	subgt r5, r0, #1
	movgt r0, #0
	bgt _02035590
	cmp r7, #0
	movlt r5, #0
	movlt r0, r5
	blt _02035590
	ldr r0, _020355F0 ; =0x02099EF0
	mov r1, r7
	ldr r0, [r0]
	mov r2, #0
	bl FUN_021430B4
	ldrb r5, [r0, #0x1a]
	mov r0, r7
	bl FUN_020F07A8
	arm_func_end FUN_0203551c
_02035590:
	ldr r1, [sp, #0x28]
	mov r2, #0
	cmp r1, #0
	str r2, [sp, #0xc]
	addne r1, sp, #0x28
	strne r1, [sp, #0xc]
	ldr r1, [sp, #0x2c]
	str r2, [sp, #0x10]
	cmp r1, #0
	addne r1, sp, #0x2c
	strne r1, [sp, #0x10]
	str r0, [sp]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	str r1, [sp, #4]
	str r0, [sp, #8]
	ldr r0, _020355F4 ; =0x02099EB0
	ldr r1, [r4, #4]
	ldr r0, [r0]
	mov r2, r6
	mov r3, r5
	bl FUN_0205dec8
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_020355F0: .word 0x02099EF0
_020355F4: .word 0x02099EB0

	arm_func_start FUN_020355f8
FUN_020355f8: ; 0x020355F8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x28
	mov r4, #0x28
	mul r4, r1, r4
	add r0, r0, #0xa70
	add r0, r0, #0x3000
	ldr r5, [sp, #0x48]
	adds r4, r0, r4
	mov r7, r2
	mov r6, r3
	addeq sp, sp, #0x28
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r0, [r4, #0xa]
	tst r0, #1
	addeq sp, sp, #0x28
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, _02035754 ; =0x02099EB0
	ldr r2, [r4, #4]
	ldr r1, [r0]
	add r0, sp, #4
	bl FUN_0205e084
	ldr ip, [sp, #4]
	ldr r3, [sp, #8]
	ldr r2, [sp, #0xc]
	ldr r1, [sp, #0x40]
	ldr r0, [sp, #0x44]
	str ip, [sp, #0x1c]
	str r3, [sp, #0x20]
	str r2, [sp, #0x24]
	str r6, [sp, #0x10]
	str r1, [sp, #0x14]
	str r0, [sp, #0x18]
	cmp r7, #0
	beq _02035690
	add r1, sp, #0x10
	add r0, sp, #0x1c
	mov r2, r1
	bl FUN_02009734
	arm_func_end FUN_020355f8
_02035690:
	ldr r0, [sp, #0x4c]
	cmp r0, #0
	beq _020356B4
	add r0, sp, #0x1c
	add r1, sp, #0x10
	bl FUN_02009a1c
	ldr r1, [sp, #0x4c]
	bl FUN_0200958c
	asr r5, r0, #0xc
_020356B4:
	cmp r5, #0
	bne _020356E4
	ldr r1, [sp, #0x18]
	ldr r0, _02035754 ; =0x02099EB0
	str r1, [sp]
	ldr r0, [r0]
	ldr r1, [r4, #4]
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	bl FUN_0205e01c
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
_020356E4:
	add r0, sp, #0x10
	add r1, sp, #0x1c
	mov r2, r0
	bl FUN_02009764
	ldr r0, [sp, #0x10]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	ldr r1, [sp, #0x10]
	str r0, [sp, #0x18]
	str r1, [r4, #0x10]
	ldr r0, [sp, #0x14]
	str r0, [r4, #0x14]
	ldr r0, [sp, #0x18]
	str r0, [r4, #0x18]
	strh r5, [r4, #0xc]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x100
	strh r0, [r4, #0xa]
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02035754: .word 0x02099EB0

	arm_func_start FUN_02035758
FUN_02035758: ; 0x02035758
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x1c
	mov r4, #0x28
	mul r4, r1, r4
	add r0, r0, #0xa70
	add r0, r0, #0x3000
	ldr r6, [sp, #0x40]
	ldr r5, [sp, #0x44]
	adds r4, r0, r4
	mov r8, r2
	mov r7, r3
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldrh r0, [r4, #0xa]
	tst r0, #1
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r5, #0
	bne _02035828
	ldr r0, _02035980 ; =0x0B60B60B
	mov r1, #0xb6
	umull r3, sl, r8, r0
	umull lr, ip, r7, r0
	umull sb, r5, r6, r0
	adds r3, r3, #0
	mla sl, r8, r1, sl
	asr r2, r8, #0x1f
	mla sl, r2, r0, sl
	adc r2, sl, #0x800
	lsl r2, r2, #4
	mla ip, r7, r1, ip
	mla r5, r6, r1, r5
	asr r3, r7, #0x1f
	asr r1, r6, #0x1f
	mla ip, r3, r0, ip
	adds r3, lr, #0
	adc r3, ip, #0x800
	mla r5, r1, r0, r5
	adds r0, sb, #0
	adc r0, r5, #0x800
	lsl r0, r0, #4
	lsr r0, r0, #0x10
	str r0, [sp]
	ldr r0, _02035984 ; =0x02099EB0
	lsl r3, r3, #4
	ldr r1, [r4, #4]
	ldr r0, [r0]
	lsr r2, r2, #0x10
	lsr r3, r3, #0x10
	bl FUN_0205e050
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02035758
_02035828:
	ldr r0, _02035984 ; =0x02099EB0
	ldr r2, [r4, #4]
	ldr r1, [r0]
	add r0, sp, #4
	bl FUN_0205e0f4
	ldr sb, [sp, #4]
	mov r3, #0x1680000
	umull r0, lr, sb, r3
	asr sb, sb, #0x1f
	adds r0, r0, #0x80000
	mla lr, sb, r3, lr
	ldr r2, [sp, #8]
	adc lr, lr, #0
	umull ip, sb, r2, r3
	asr r2, r2, #0x1f
	lsr r0, r0, #0x14
	orr r0, r0, lr, lsl #12
	sub r0, r8, r0
	adds r8, ip, #0x80000
	mla sb, r2, r3, sb
	ldr r1, [sp, #0xc]
	adc r2, sb, #0
	lsr r8, r8, #0x14
	orr r8, r8, r2, lsl #12
	sub r2, r7, r8
	umull r8, r7, r1, r3
	asr r1, r1, #0x1f
	str r2, [sp, #0x14]
	adds r2, r8, #0x80000
	mla r7, r1, r3, r7
	adc r1, r7, #0
	lsr r2, r2, #0x14
	orr r2, r2, r1, lsl #12
	sub r2, r6, r2
	mov r1, r5
	str r0, [sp, #0x10]
	str r2, [sp, #0x18]
	bl FUN_0201f9bc
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	mov r1, r5
	bl FUN_0201f9bc
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	mov r1, r5
	bl FUN_0201f9bc
	ldr ip, [sp, #0x10]
	ldr r2, _02035980 ; =0x0B60B60B
	ldr r8, [sp, #0x14]
	umull sb, lr, ip, r2
	mov r3, #0xb6
	mla lr, ip, r3, lr
	asr r1, ip, #0x1f
	mla lr, r1, r2, lr
	adds sb, sb, #0
	adc r1, lr, #0x800
	lsl r1, r1, #4
	lsr r1, r1, #0x10
	str r1, [sp, #0x10]
	str r1, [r4, #0x1c]
	umull ip, r1, r8, r2
	mla r1, r8, r3, r1
	asr r7, r8, #0x1f
	mla r1, r7, r2, r1
	adds ip, ip, #0
	adc r1, r1, #0x800
	lsl r1, r1, #4
	lsr r1, r1, #0x10
	str r1, [sp, #0x14]
	str r1, [r4, #0x20]
	umull r7, r1, r0, r2
	mla r1, r0, r3, r1
	asr r6, r0, #0x1f
	mla r1, r6, r2, r1
	adds r0, r7, #0
	adc r0, r1, #0x800
	lsl r0, r0, #4
	lsr r0, r0, #0x10
	str r0, [r4, #0x24]
	strh r5, [r4, #0xe]
	str r0, [sp, #0x18]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x200
	strh r0, [r4, #0xa]
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02035980: .word 0x0B60B60B
_02035984: .word 0x02099EB0

	arm_func_start FUN_02035988
FUN_02035988: ; 0x02035988
	push {r3, lr}
	add r0, r0, #0xa70
	add ip, r0, #0x3000
	mov r0, #0x28
	mla ip, r1, r0, ip
	ldrh r0, [ip, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _020359BC ; =0x02099EB0
	ldr r1, [ip, #4]
	ldr r0, [r0]
	bl FUN_0205e254
	pop {r3, pc}
	.align 2, 0_020359BC: .word 0x02099EB0
	arm_func_end FUN_02035988

	arm_func_start FUN_020359c0
FUN_020359c0: ; 0x020359C0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov fp, #0x28
	mov sb, #0
	add r0, sl, #0xa70
	add r8, r0, #0x3000
	mov r7, sb
	ldr r6, _02035A38 ; =0x02099EB0
	mov r4, fp
	mov r5, fp
	b _02035A2C
	arm_func_end FUN_020359c0
_020359EC:
	mla r1, sb, r5, sl
	add r0, r1, #0x3a00
	ldrh r0, [r0, #0x7a]
	tst r0, #1
	beq _02035A28
	tst r0, #0x20
	bne _02035A18
	add r1, r1, #0x3000
	ldr r0, [r6]
	ldr r1, [r1, #0xa74]
	bl FUN_0205dd98
_02035A18:
	mla r0, sb, r4, r8
	mov r1, r7
	mov r2, fp
	bl MemWrite
_02035A28:
	add sb, sb, #1
_02035A2C:
	cmp sb, #2
	blt _020359EC
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02035A38: .word 0x02099EB0

	arm_func_start FUN_02035a3c
FUN_02035a3c: ; 0x02035A3C
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x34
	mov sb, r0
	ldr r4, _02035C40 ; =0x02099EB0
	mov r7, #0
	b _02035C30
	arm_func_end FUN_02035a3c
_02035A54:
	add r0, sb, #0xa70
	add r1, r0, #0x3000
	mov r0, #0x28
	mla r6, r7, r0, r1
	ldr r1, [r6, #4]
	cmp r1, #0
	beq _02035C2C
	ldrh r0, [r6, #0xa]
	tst r0, #0x10
	beq _02035A98
	ldr r0, [r4]
	bl FUN_0205de18
	cmp r0, #0
	ldrheq r1, [r6, #0xa]
	ldreq r0, _02035C44 ; =0x0000FFEF
	andeq r0, r1, r0
	strheq r0, [r6, #0xa]
_02035A98:
	ldr r1, [r6, #4]
	ldr r0, [r4]
	bl FUN_0205cc5c
	cmp r0, #0
	moveq r0, #0
	beq _02035AC0
	ldrb r0, [r0, #0x24]
	cmp r0, #3
	moveq r0, #1
	movne r0, #0
_02035AC0:
	cmp r0, #0
	ldrhne r0, [r6, #0xa]
	orrne r0, r0, #2
	strhne r0, [r6, #0xa]
	ldrh r0, [r6, #0xa]
	tst r0, #0x100
	beq _02035B80
	ldr r1, [r4]
	ldr r2, [r6, #4]
	add r0, sp, #0x10
	bl FUN_0205e084
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x18]
	str r2, [sp, #0x28]
	str r1, [sp, #0x2c]
	str r0, [sp, #0x30]
	mov r8, #0
	add sl, sb, #0x1000
	add r5, sp, #0x28
	b _02035B40
_02035B14:
	mov r0, r5
	mov r2, r5
	add r1, r6, #0x10
	bl FUN_02009734
	ldrh r0, [r6, #0xc]
	sub r0, r0, #1
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	strh r0, [r6, #0xc]
	beq _02035B4C
	add r8, r8, #1
_02035B40:
	ldr r0, [sl, #0x3e0]
	cmp r8, r0
	blo _02035B14
_02035B4C:
	ldr r0, [sp, #0x30]
	str r0, [sp]
	ldr r0, [r4]
	ldr r1, [r6, #4]
	ldr r2, [sp, #0x28]
	ldr r3, [sp, #0x2c]
	bl FUN_0205e01c
	ldrh r0, [r6, #0xc]
	cmp r0, #0
	ldrheq r1, [r6, #0xa]
	ldreq r0, _02035C48 ; =0x0000FEFF
	andeq r0, r1, r0
	strheq r0, [r6, #0xa]
_02035B80:
	ldrh r0, [r6, #0xa]
	tst r0, #0x200
	beq _02035C2C
	ldr r1, [r4]
	ldr r2, [r6, #4]
	add r0, sp, #4
	bl FUN_0205e0f4
	ldr r2, [sp, #4]
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	str r2, [sp, #0x1c]
	str r0, [sp, #0x24]
	str r1, [sp, #0x20]
	mov r8, #0
	add r0, sb, #0x1000
	b _02035BEC
_02035BC0:
	ldrh r1, [r6, #0xe]
	ldr r3, [sp, #0x20]
	ldr r2, [r6, #0x20]
	sub r1, r1, #1
	lsl r1, r1, #0x10
	add r2, r3, r2
	lsrs r1, r1, #0x10
	str r2, [sp, #0x20]
	strh r1, [r6, #0xe]
	beq _02035BF8
	add r8, r8, #1
_02035BEC:
	ldr r1, [r0, #0x3e0]
	cmp r8, r1
	blo _02035BC0
_02035BF8:
	ldr r0, [sp, #0x24]
	ldr r2, [sp, #0x1c]
	str r0, [sp]
	ldr r0, [r4]
	ldr r1, [r6, #4]
	ldr r3, [sp, #0x20]
	bl FUN_0205e050
	ldrh r0, [r6, #0xe]
	cmp r0, #0
	ldrheq r1, [r6, #0xa]
	ldreq r0, _02035C4C ; =0x0000FDFF
	andeq r0, r1, r0
	strheq r0, [r6, #0xa]
_02035C2C:
	add r7, r7, #1
_02035C30:
	cmp r7, #2
	blt _02035A54
	add sp, sp, #0x34
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02035C40: .word 0x02099EB0
_02035C44: .word 0x0000FFEF
_02035C48: .word 0x0000FEFF
_02035C4C: .word 0x0000FDFF

	arm_func_start FUN_02035c50
FUN_02035c50: ; 0x02035C50
	push {r3, r4, r5, lr}
	mov r5, #0
	mov ip, #0x28
	arm_func_end FUN_02035c50
_02035C5C:
	mla r4, r5, ip, r0
	add r3, r4, #0x1000
	ldr r3, [r3, #0x570]
	add lr, r4, #0x570
	cmp r1, r3
	addeq r3, r4, #0x1500
	ldrsheq r3, [r3, #0x78]
	cmpeq r2, r3
	addeq r0, lr, #0x1000
	popeq {r3, r4, r5, pc}
	add r5, r5, #1
	cmp r5, #6
	blt _02035C5C
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02035c98
FUN_02035c98: ; 0x02035C98
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	movs sl, r1
	mov sb, r0
	mov r8, r2
	mov r7, r3
	addeq sp, sp, #0xc
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r6, #0
	mov r0, sl
	mov r1, r6
	bl FUN_020EFA9C
	movs r5, r0
	addeq sp, sp, #0xc
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, sb
	mov r1, r6
	mov r2, r6
	bl FUN_02035c50
	mov r4, r0
	str sl, [r4]
	mov r0, r5
	strh r8, [r4, #8]
	bl FUN_0206cbf8
	mov r5, r0
	ldr r0, [sb]
	bl FUN_02041fec
	cmp r0, #0x84
	mov r0, #1
	str r0, [sp]
	str r0, [sp, #4]
	movne r6, #1
	ldr r0, _02035D60 ; =0x02099EEC
	str r6, [sp, #8]
	ldr r0, [r0]
	mov r1, r5
	mov r2, r8
	mov r3, r7
	bl FUN_0205a828
	str r0, [r4, #4]
	cmp r0, #0
	movlt r0, #0
	ldrhge r0, [r4, #0xa]
	orrge r0, r0, #0x11
	strhge r0, [r4, #0xa]
	ldrshge r0, [r4, #8]
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02035D60: .word 0x02099EEC
	arm_func_end FUN_02035c98

	arm_func_start FUN_02035d64
FUN_02035d64: ; 0x02035D64
	push {r4, lr}
	cmp r1, #0
	popeq {r4, pc}
	bl FUN_02035c50
	movs r4, r0
	popeq {r4, pc}
	ldrh r0, [r4, #0xa]
	tst r0, #1
	popeq {r4, pc}
	ldr r0, _02035DAC ; =0x02099EEC
	ldr r1, [r4, #4]
	ldr r0, [r0]
	bl FUN_0205aa80
	mov r0, r4
	mov r1, #0
	mov r2, #0x28
	bl MemWrite
	pop {r4, pc}
	.align 2, 0_02035DAC: .word 0x02099EEC
	arm_func_end FUN_02035d64

	arm_func_start FUN_02035db0
FUN_02035db0: ; 0x02035DB0
	push {r3, lr}
	cmp r1, #0
	popeq {r3, pc}
	bl FUN_02035c50
	cmp r0, #0
	popeq {r3, pc}
	ldrh r1, [r0, #0xa]
	tst r1, #1
	popeq {r3, pc}
	ldr r2, _02035DE8 ; =0x02099EEC
	ldr r1, [r0, #4]
	ldr r0, [r2]
	bl FUN_0205a9f8
	pop {r3, pc}
	.align 2, 0_02035DE8: .word 0x02099EEC
	arm_func_end FUN_02035db0

	arm_func_start FUN_02035dec
FUN_02035dec: ; 0x02035DEC
	push {r4, lr}
	mov r4, r3
	cmp r1, #0
	popeq {r4, pc}
	bl FUN_02035c50
	cmp r0, #0
	popeq {r4, pc}
	ldrh r1, [r0, #0xa]
	tst r1, #1
	popeq {r4, pc}
	ldr r2, _02035E2C ; =0x02099EEC
	ldr r1, [r0, #4]
	ldr r0, [r2]
	mov r2, r4
	bl FUN_0205adf8
	pop {r4, pc}
	.align 2, 0_02035E2C: .word 0x02099EEC
	arm_func_end FUN_02035dec

	arm_func_start FUN_02035e30
FUN_02035e30: ; 0x02035E30
	push {r4, lr}
	mov r4, r3
	cmp r1, #0
	popeq {r4, pc}
	bl FUN_02035c50
	cmp r0, #0
	popeq {r4, pc}
	ldrh r1, [r0, #0xa]
	tst r1, #1
	popeq {r4, pc}
	ldr r2, _02035E70 ; =0x02099EEC
	ldr r1, [r0, #4]
	ldr r0, [r2]
	rsb r2, r4, r4, lsl #3
	bl FUN_0205ada4
	pop {r4, pc}
	.align 2, 0_02035E70: .word 0x02099EEC
	arm_func_end FUN_02035e30

	arm_func_start FUN_02035e74
FUN_02035e74: ; 0x02035E74
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x28
	ldr r5, [sp, #0x4c]
	cmp r1, #0
	mov r6, r3
	addeq sp, sp, #0x28
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_02035c50
	movs r4, r0
	addeq sp, sp, #0x28
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r0, [r4, #0xa]
	tst r0, #1
	addeq sp, sp, #0x28
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r7, _02035FE0 ; =0x02099EEC
	ldr r1, [r4, #4]
	ldr r0, [r7]
	mov r2, #1
	bl FUN_0205acb0
	ldr r1, [r7]
	ldr r2, [r4, #4]
	add r0, sp, #4
	bl FUN_0205afb4
	ldr ip, [sp, #4]
	ldr r7, [sp, #8]
	ldr r3, [sp, #0xc]
	ldr r2, [sp, #0x40]
	ldr r1, [sp, #0x44]
	ldr r0, [sp, #0x48]
	str ip, [sp, #0x1c]
	str r7, [sp, #0x20]
	str r3, [sp, #0x24]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	str r0, [sp, #0x18]
	cmp r6, #0
	beq _02035F1C
	add r1, sp, #0x10
	add r0, sp, #0x1c
	mov r2, r1
	bl FUN_02009734
	arm_func_end FUN_02035e74
_02035F1C:
	ldr r0, [sp, #0x50]
	cmp r0, #0
	beq _02035F40
	add r0, sp, #0x1c
	add r1, sp, #0x10
	bl FUN_02009a1c
	ldr r1, [sp, #0x50]
	bl FUN_0200958c
	asr r5, r0, #0xc
_02035F40:
	cmp r5, #0
	bne _02035F70
	ldr r1, [sp, #0x18]
	ldr r0, _02035FE0 ; =0x02099EEC
	str r1, [sp]
	ldr r0, [r0]
	ldr r1, [r4, #4]
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	bl FUN_0205aea0
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
_02035F70:
	add r0, sp, #0x10
	add r1, sp, #0x1c
	mov r2, r0
	bl FUN_02009764
	ldr r0, [sp, #0x10]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	ldr r1, [sp, #0x10]
	str r0, [sp, #0x18]
	str r1, [r4, #0x10]
	ldr r0, [sp, #0x14]
	str r0, [r4, #0x14]
	ldr r0, [sp, #0x18]
	str r0, [r4, #0x18]
	strh r5, [r4, #0xc]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x100
	strh r0, [r4, #0xa]
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02035FE0: .word 0x02099EEC

	arm_func_start FUN_02035fe4
FUN_02035fe4: ; 0x02035FE4
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x1c
	cmp r1, #0
	mov r5, r3
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, pc}
	bl FUN_02035c50
	movs r4, r0
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, pc}
	ldrh r0, [r4, #0xa]
	tst r0, #1
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, pc}
	ldr r0, [sp, #0x30]
	cmp r0, #0
	bne _02036070
	ldr r0, _02036110 ; =0x0B60B60B
	mov r1, #0xb6
	umull ip, r6, r5, r0
	mla r6, r5, r1, r6
	asr r3, r5, #0x1f
	mla r6, r3, r0, r6
	mov r2, #0
	adds r0, ip, #0
	adc r0, r6, #0x800
	lsl r3, r0, #4
	ldr r1, _02036114 ; =0x02099EEC
	str r2, [sp]
	ldr r0, [r1]
	ldr r1, [r4, #4]
	lsr r3, r3, #0x10
	bl FUN_0205aefc
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_02035fe4
_02036070:
	ldr r0, _02036114 ; =0x02099EEC
	ldr r2, [r4, #4]
	ldr r1, [r0]
	add r0, sp, #4
	bl FUN_0205b04c
	ldr lr, [sp, #8]
	mov r0, #0x1680000
	umull r3, r2, lr, r0
	asr r1, lr, #0x1f
	mla r2, r1, r0, r2
	adds r3, r3, #0x80000
	adc r0, r2, #0
	lsr r2, r3, #0x14
	ldr r6, [sp, #4]
	ldr ip, [sp, #0xc]
	orr r2, r2, r0, lsl #12
	ldr r1, [sp, #0x30]
	sub r0, r5, r2
	str r6, [sp, #0x10]
	str lr, [sp, #0x14]
	str ip, [sp, #0x18]
	bl FUN_0201f9bc
	ldr r1, _02036110 ; =0x0B60B60B
	mov r2, #0xb6
	umull r5, r3, r0, r1
	mla r3, r0, r2, r3
	asr r0, r0, #0x1f
	mla r3, r0, r1, r3
	adds r0, r5, #0
	adc r0, r3, #0x800
	lsl r0, r0, #4
	lsr r1, r0, #0x10
	ldr r0, [sp, #0x30]
	str r1, [r4, #0x20]
	strh r0, [r4, #0xe]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x200
	strh r0, [r4, #0xa]
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02036110: .word 0x0B60B60B
_02036114: .word 0x02099EEC

	arm_func_start FUN_02036118
FUN_02036118: ; 0x02036118
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r3
	cmp r1, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	bl FUN_02035c50
	cmp r0, #0
	beq _02036144
	ldrh r1, [r0, #0xa]
	tst r1, #1
	bne _0203614C
	arm_func_end FUN_02036118
_02036144:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_0203614C:
	ldr r2, _020361B4 ; =0x02099EEC
	ldr r1, [r0, #4]
	ldr r0, [r2]
	bl FUN_0205ad10
	mov r7, #0
	mov r6, r0
	mov r8, r7
	ldr r5, [sp, #0x18]
	b _020361A4
_02036170:
	ldr r1, [r5, r8, lsl #2]
	mov r0, r6
	bl FUN_020FB110
	mov r1, r0
	mov r0, r6
	bl FUN_020FB050
	ldr r3, [r0, #0x10]
	ldr r2, [r0, #0xc]
	ldr r1, [r0, #0x14]
	sub r0, r3, r2
	bl FUN_0200958c
	add r7, r7, r0, asr #12
	add r8, r8, #1
_020361A4:
	cmp r8, r4
	blt _02036170
	mov r0, r7
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020361B4: .word 0x02099EEC

	arm_func_start FUN_020361b8
FUN_020361b8: ; 0x020361B8
	push {r3, r4, r5, lr}
	mov r5, r3
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	bl FUN_02035c50
	movs r4, r0
	popeq {r3, r4, r5, pc}
	ldrh r0, [r4, #0xa]
	tst r0, #1
	popeq {r3, r4, r5, pc}
	ldr r0, _02036208 ; =0x02099EEC
	ldr r1, [r4, #4]
	ldr r0, [r0]
	ldr r3, [sp, #0x10]
	mov r2, r5
	bl FUN_0205ab68
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x10
	strh r0, [r4, #0xa]
	pop {r3, r4, r5, pc}
	.align 2, 0_02036208: .word 0x02099EEC
	arm_func_end FUN_020361b8

	arm_func_start FUN_0203620c
FUN_0203620c: ; 0x0203620C
	push {r3, lr}
	cmp r1, #0
	popeq {r3, pc}
	bl FUN_02035c50
	cmp r0, #0
	popeq {r3, pc}
	ldrh r1, [r0, #0xa]
	tst r1, #1
	popeq {r3, pc}
	ldr r2, _02036244 ; =0x02099EEC
	ldr r1, [r0, #4]
	ldr r0, [r2]
	bl FUN_0205a9f8
	pop {r3, pc}
	.align 2, 0_02036244: .word 0x02099EEC
	arm_func_end FUN_0203620c

	arm_func_start FUN_02036248
FUN_02036248: ; 0x02036248
	push {r3, r4, r5, lr}
	mov r5, r3
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	bl FUN_02035c50
	movs r4, r0
	popeq {r3, r4, r5, pc}
	ldrh r0, [r4, #0xa]
	tst r0, #1
	popeq {r3, r4, r5, pc}
	ldr r0, _020362AC ; =0x02099EEC
	ldr r1, [r4, #4]
	ldr r0, [r0]
	ldr r3, [sp, #0x10]
	mov r2, r5
	bl FUN_0205b0e4
	ldr r0, [sp, #0x10]
	cmp r0, #1
	ldrheq r0, [r4, #0xa]
	orreq r0, r0, #4
	strheq r0, [r4, #0xa]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #8
	strh r0, [r4, #0xa]
	pop {r3, r4, r5, pc}
	.align 2, 0_020362AC: .word 0x02099EEC
	arm_func_end FUN_02036248

	arm_func_start FUN_020362b0
FUN_020362b0: ; 0x020362B0
	push {r3, lr}
	cmp r1, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_02035c50
	cmp r0, #0
	beq _020362D8
	ldrh r0, [r0, #0xa]
	tst r0, #1
	popne {r3, pc}
	arm_func_end FUN_020362b0
_020362D8:
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_020362e0
FUN_020362e0: ; 0x020362E0
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r6, #0
	add r0, r0, #0x570
	mov sb, #0x28
	add r4, r0, #0x1000
	mov sl, r6
	ldr r8, _02036344 ; =0x02099EEC
	mov r7, sb
	b _02036338
	arm_func_end FUN_020362e0
_02036304:
	mul r1, r6, r7
	ldr r0, [r4, r1]
	add r5, r4, r1
	cmp r0, #0
	beq _02036334
	ldr r0, [r8]
	ldr r1, [r5, #4]
	bl FUN_0205aa80
	mov r0, r5
	mov r1, sl
	mov r2, sb
	bl MemWrite
_02036334:
	add r6, r6, #1
_02036338:
	cmp r6, #6
	blt _02036304
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02036344: .word 0x02099EEC

	arm_func_start FUN_02036348
FUN_02036348: ; 0x02036348
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x40
	mov sb, r0
	ldr r4, _0203657C ; =0x02099EEC
	mov r7, #0
	b _0203656C
	arm_func_end FUN_02036348
_02036360:
	mov r0, #0x28
	mul r1, r7, r0
	add r0, sb, #0x570
	add r2, r0, #0x1000
	ldr r0, [r2, r1]
	add r6, r2, r1
	cmp r0, #0
	beq _02036568
	ldrh r0, [r6, #0xa]
	tst r0, #0x10
	beq _020363AC
	ldr r0, [r4]
	ldr r1, [r6, #4]
	bl FUN_0205ac70
	cmp r0, #0
	ldrheq r1, [r6, #0xa]
	ldreq r0, _02036580 ; =0x0000FFEF
	andeq r0, r1, r0
	strheq r0, [r6, #0xa]
_020363AC:
	ldr r0, [r4]
	ldr r1, [r6, #4]
	bl FUN_0205b264
	cmp r0, #0
	ldrhne r0, [r6, #0xa]
	orrne r0, r0, #2
	strhne r0, [r6, #0xa]
	ldrh r0, [r6, #0xa]
	tst r0, #8
	beq _020363FC
	tst r0, #4
	bne _020363FC
	ldr r0, [r4]
	ldr r1, [r6, #4]
	bl FUN_0205b204
	cmp r0, #0
	ldrhne r1, [r6, #0xa]
	ldrne r0, _02036584 ; =0x0000FFF7
	andne r0, r1, r0
	strhne r0, [r6, #0xa]
_020363FC:
	ldrh r0, [r6, #0xa]
	tst r0, #0x100
	beq _020364AC
	ldr r1, [r4]
	ldr r2, [r6, #4]
	add r0, sp, #0x1c
	bl FUN_0205afb4
	ldr r2, [sp, #0x1c]
	ldr r1, [sp, #0x20]
	ldr r0, [sp, #0x24]
	str r2, [sp, #0x34]
	str r1, [sp, #0x38]
	str r0, [sp, #0x3c]
	mov r8, #0
	add sl, sb, #0x1000
	add r5, sp, #0x34
	b _0203646C
_02036440:
	mov r0, r5
	mov r2, r5
	add r1, r6, #0x10
	bl FUN_02009734
	ldrh r0, [r6, #0xc]
	sub r0, r0, #1
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	strh r0, [r6, #0xc]
	beq _02036478
	add r8, r8, #1
_0203646C:
	ldr r0, [sl, #0x3e0]
	cmp r8, r0
	blo _02036440
_02036478:
	ldr r0, [sp, #0x3c]
	str r0, [sp]
	ldr r0, [r4]
	ldr r1, [r6, #4]
	ldr r2, [sp, #0x34]
	ldr r3, [sp, #0x38]
	bl FUN_0205aea0
	ldrh r0, [r6, #0xc]
	cmp r0, #0
	ldrheq r1, [r6, #0xa]
	ldreq r0, _02036588 ; =0x0000FEFF
	andeq r0, r1, r0
	strheq r0, [r6, #0xa]
_020364AC:
	ldrh r0, [r6, #0xa]
	tst r0, #0x200
	beq _02036568
	ldr r1, [r4]
	ldr r2, [r6, #4]
	add r0, sp, #0x10
	bl FUN_0205b04c
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x18]
	str r2, [sp, #0x28]
	str r0, [sp, #0x30]
	str r1, [sp, #0x2c]
	mov r8, #0
	add r0, sb, #0x1000
	b _02036518
_020364EC:
	ldrh r1, [r6, #0xe]
	ldr r3, [sp, #0x2c]
	ldr r2, [r6, #0x20]
	sub r1, r1, #1
	lsl r1, r1, #0x10
	add r2, r3, r2
	lsrs r1, r1, #0x10
	str r2, [sp, #0x2c]
	strh r1, [r6, #0xe]
	beq _02036524
	add r8, r8, #1
_02036518:
	ldr r1, [r0, #0x3e0]
	cmp r8, r1
	blo _020364EC
_02036524:
	add r0, sp, #0x28
	add r3, sp, #4
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	ldr r1, [r6, #4]
	ldr r0, [r4]
	ldr r2, [sp, #0xc]
	str r2, [sp]
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	bl FUN_0205aefc
	ldrh r0, [r6, #0xe]
	cmp r0, #0
	ldrheq r1, [r6, #0xa]
	ldreq r0, _0203658C ; =0x0000FDFF
	andeq r0, r1, r0
	strheq r0, [r6, #0xa]
_02036568:
	add r7, r7, #1
_0203656C:
	cmp r7, #6
	blt _02036360
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0203657C: .word 0x02099EEC
_02036580: .word 0x0000FFEF
_02036584: .word 0x0000FFF7
_02036588: .word 0x0000FEFF
_0203658C: .word 0x0000FDFF

	arm_func_start FUN_02036590
FUN_02036590: ; 0x02036590
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x104
	mov r3, #0x28
	mul r6, r1, r3
	add r0, r0, #0xf60
	add r5, sp, #4
	add r7, r0, #0x1000
	ldr r4, _020365FC ; =0x02099EE8
	ldr r1, _02036600 ; =0x0208FDF4
	ldr r0, [r4]
	mov sb, r2
	mov r3, r5
	add r8, r7, r6
	bl FUN_0205e674
	str sb, [r7, r6]
	mov r2, #1
	ldr r0, [r4]
	mov r1, r5
	mov r3, r2
	str r2, [sp]
	bl FUN_0205f26c
	str r0, [r8, #4]
	ldrh r0, [r8, #0xa]
	orr r0, r0, #0x11
	strh r0, [r8, #0xa]
	add sp, sp, #0x104
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020365FC: .word 0x02099EE8
_02036600: .word 0x0208FDF4
	arm_func_end FUN_02036590

	arm_func_start FUN_02036604
FUN_02036604: ; 0x02036604
	push {r3, r4, r5, lr}
	add r0, r0, #0xf60
	add r0, r0, #0x1000
	mov r4, #0x28
	mla r5, r1, r4, r0
	ldrh r0, [r5, #0xa]
	tst r0, #1
	popeq {r3, r4, r5, pc}
	ldr r0, _02036648 ; =0x02099EE8
	ldr r1, [r5, #4]
	ldr r0, [r0]
	bl FUN_0205f5ec
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl MemWrite
	pop {r3, r4, r5, pc}
	.align 2, 0_02036648: .word 0x02099EE8
	arm_func_end FUN_02036604

	arm_func_start FUN_0203664c
FUN_0203664c: ; 0x0203664C
	push {r3, r4, r5, lr}
	add r0, r0, #0xf60
	add r2, r0, #0x1000
	mov r0, #0x28
	mla r5, r1, r0, r2
	ldrh r0, [r5, #0xa]
	tst r0, #1
	popeq {r3, r4, r5, pc}
	ldr r4, _0203669C ; =0x02099EE8
	ldr r1, [r5, #4]
	ldr r0, [r4]
	bl FUN_0205f56c
	mov r0, #1
	str r0, [sp]
	ldr r0, [r4]
	ldr r1, [r5, #4]
	mov r2, #0x3000
	mov r3, #8
	bl FUN_0205fd68
	pop {r3, r4, r5, pc}
	.align 2, 0_0203669C: .word 0x02099EE8
	arm_func_end FUN_0203664c

	arm_func_start FUN_020366a0
FUN_020366a0: ; 0x020366A0
	push {r3, lr}
	add r0, r0, #0xf60
	add r3, r0, #0x1000
	mov r0, #0x28
	mla r3, r1, r0, r3
	ldrh r0, [r3, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _020366D4 ; =0x02099EE8
	ldr r1, [r3, #4]
	ldr r0, [r0]
	bl FUN_0205fdf0
	pop {r3, pc}
	.align 2, 0_020366D4: .word 0x02099EE8
	arm_func_end FUN_020366a0

	arm_func_start FUN_020366d8
FUN_020366d8: ; 0x020366D8
	push {r3, lr}
	add r0, r0, #0xf60
	add r3, r0, #0x1000
	mov r0, #0x28
	mla r3, r1, r0, r3
	ldrh r0, [r3, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _02036710 ; =0x02099EE8
	ldr r1, [r3, #4]
	ldr r0, [r0]
	add r2, r2, r2, lsl #1
	bl FUN_0205fdac
	pop {r3, pc}
	.align 2, 0_02036710: .word 0x02099EE8
	arm_func_end FUN_020366d8

	arm_func_start FUN_02036714
FUN_02036714: ; 0x02036714
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x1c
	add r0, r0, #0xf60
	add r4, r0, #0x1000
	mov r0, #0x28
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	ldr r5, [sp, #0x3c]
	mov r7, r2
	tst r0, #1
	mov r6, r3
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r8, _02036818 ; =0x02099EE8
	ldr r1, [r4, #4]
	ldr r0, [r8]
	mov r2, #1
	bl FUN_0205f9c0
	cmp r5, #0
	bne _02036788
	ldr r0, [sp, #0x38]
	mov r2, r7
	str r0, [sp]
	ldr r0, [r8]
	ldr r1, [r4, #4]
	mov r3, r6
	bl FUN_0205fa48
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02036714
_02036788:
	ldr r1, [r8]
	ldr r2, [r4, #4]
	add r0, sp, #4
	bl FUN_0205fb80
	ldr r1, [sp, #8]
	ldr r0, [sp, #4]
	sub r3, r6, r1
	sub r0, r7, r0
	ldr r2, [sp, #0xc]
	ldr r1, [sp, #0x38]
	str r0, [sp, #0x10]
	sub r2, r1, r2
	str r3, [sp, #0x14]
	lsl r1, r5, #0xc
	str r2, [sp, #0x18]
	bl FUN_0200958c
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0x14]
	str r2, [r4, #0x10]
	str r1, [r4, #0x14]
	str r0, [r4, #0x18]
	strh r5, [r4, #0xc]
	ldrh r1, [r4, #0xa]
	str r0, [sp, #0x18]
	orr r0, r1, #0x100
	strh r0, [r4, #0xa]
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02036818: .word 0x02099EE8

	arm_func_start FUN_0203681c
FUN_0203681c: ; 0x0203681C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x104
	add r0, r0, #0xf60
	add r3, r0, #0x1000
	mov r0, #0x28
	mla r6, r1, r0, r3
	ldrh r0, [r6, #0xa]
	tst r0, #1
	addeq sp, sp, #0x104
	popeq {r3, r4, r5, r6, pc}
	add r5, sp, #4
	str r5, [sp]
	ldr r4, _02036888 ; =0x02099EE8
	ldr r3, [r6]
	ldr r0, [r4]
	ldr r1, _0203688C ; =0x0208FDFC
	bl FUN_0205e6c0
	ldr r0, [r4]
	ldr r1, [r6, #4]
	mov r2, r5
	mov r3, #1
	bl FUN_0205f790
	ldrh r0, [r6, #0xa]
	orr r0, r0, #0x10
	strh r0, [r6, #0xa]
	add sp, sp, #0x104
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02036888: .word 0x02099EE8
_0203688C: .word 0x0208FDFC
	arm_func_end FUN_0203681c

	arm_func_start FUN_02036890
FUN_02036890: ; 0x02036890
	push {r3, lr}
	add r0, r0, #0xf60
	add r2, r0, #0x1000
	mov r0, #0x28
	mla r2, r1, r0, r2
	ldrh r0, [r2, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _020368C4 ; =0x02099EE8
	ldr r1, [r2, #4]
	ldr r0, [r0]
	bl FUN_0205f56c
	pop {r3, pc}
	.align 2, 0_020368C4: .word 0x02099EE8
	arm_func_end FUN_02036890

	arm_func_start FUN_020368c8
FUN_020368c8: ; 0x020368C8
	push {r3, r4, r5, lr}
	add r0, r0, #0xf60
	add ip, r0, #0x1000
	mov r0, #0x28
	mla r4, r1, r0, ip
	ldrh r0, [r4, #0xa]
	mov r5, r3
	tst r0, #1
	popeq {r3, r4, r5, pc}
	ldr r0, _0203691C ; =0x02099EE8
	ldr r1, [r4, #4]
	ldr r0, [r0]
	bl FUN_0205fc78
	cmp r5, #1
	ldrheq r0, [r4, #0xa]
	orreq r0, r0, #4
	strheq r0, [r4, #0xa]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #8
	strh r0, [r4, #0xa]
	pop {r3, r4, r5, pc}
	.align 2, 0_0203691C: .word 0x02099EE8
	arm_func_end FUN_020368c8

	arm_func_start FUN_02036920
FUN_02036920: ; 0x02036920
	mov r2, #0x28
	mla r0, r1, r2, r0
	add r0, r0, #0x1f00
	ldrh r0, [r0, #0x6a]
	bx lr
	arm_func_end FUN_02036920

	arm_func_start FUN_02036934
FUN_02036934: ; 0x02036934
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r6, #0
	add r0, r0, #0xf60
	mov sb, #0x28
	add r4, r0, #0x1000
	mov sl, r6
	ldr r8, _02036994 ; =0x02099EE8
	mov r7, sb
	b _02036988
	arm_func_end FUN_02036934
_02036958:
	mla r5, r6, r7, r4
	ldrh r0, [r5, #0xa]
	tst r0, #1
	beq _02036984
	ldr r0, [r8]
	ldr r1, [r5, #4]
	bl FUN_0205f5ec
	mov r0, r5
	mov r1, sl
	mov r2, sb
	bl MemWrite
_02036984:
	add r6, r6, #1
_02036988:
	cmp r6, #4
	blt _02036958
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02036994: .word 0x02099EE8

	arm_func_start FUN_02036998
FUN_02036998: ; 0x02036998
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x20
	mov sb, r0
	ldr r4, _02036B2C ; =0x02099EE8
	mov r7, #0
	b _02036B1C
	arm_func_end FUN_02036998
_020369B0:
	add r0, sb, #0xf60
	add r1, r0, #0x1000
	mov r0, #0x28
	mla r6, r7, r0, r1
	ldrh r0, [r6, #0xa]
	tst r0, #1
	beq _02036B18
	tst r0, #0x10
	beq _020369F4
	ldr r0, [r4]
	ldr r1, [r6, #4]
	bl FUN_0205f990
	cmp r0, #0
	ldrheq r1, [r6, #0xa]
	ldreq r0, _02036B30 ; =0x0000FFEF
	andeq r0, r1, r0
	strheq r0, [r6, #0xa]
_020369F4:
	ldr r1, [r6, #4]
	mov r5, #0
	ldr r0, [r4]
	add r2, sp, #4
	str r5, [sp, #4]
	bl FUN_0205e754
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _02036A24
	ldrb r0, [r0, #0xc]
	cmp r0, #3
	moveq r5, #1
_02036A24:
	cmp r5, #0
	ldrhne r0, [r6, #0xa]
	orrne r0, r0, #2
	strhne r0, [r6, #0xa]
	ldrh r0, [r6, #0xa]
	tst r0, #8
	beq _02036A68
	tst r0, #4
	bne _02036A68
	ldr r0, [r4]
	ldr r1, [r6, #4]
	bl FUN_0205fd1c
	cmp r0, #0
	ldrhne r1, [r6, #0xa]
	ldrne r0, _02036B34 ; =0x0000FFF7
	andne r0, r1, r0
	strhne r0, [r6, #0xa]
_02036A68:
	ldrh r0, [r6, #0xa]
	tst r0, #0x100
	beq _02036B18
	ldr r1, [r4]
	ldr r2, [r6, #4]
	add r0, sp, #8
	bl FUN_0205fb80
	ldr r2, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	str r2, [sp, #0x14]
	str r1, [sp, #0x18]
	str r0, [sp, #0x1c]
	mov r8, #0
	add sl, sb, #0x1000
	add r5, sp, #0x14
	b _02036AD8
_02036AAC:
	mov r0, r5
	mov r2, r5
	add r1, r6, #0x10
	bl FUN_02009734
	ldrh r0, [r6, #0xc]
	sub r0, r0, #1
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	strh r0, [r6, #0xc]
	beq _02036AE4
	add r8, r8, #1
_02036AD8:
	ldr r0, [sl, #0x3e0]
	cmp r8, r0
	blo _02036AAC
_02036AE4:
	ldr r0, [sp, #0x1c]
	str r0, [sp]
	ldr r0, [r4]
	ldr r1, [r6, #4]
	ldr r2, [sp, #0x14]
	ldr r3, [sp, #0x18]
	bl FUN_0205fa48
	ldrh r0, [r6, #0xc]
	cmp r0, #0
	ldrheq r1, [r6, #0xa]
	ldreq r0, _02036B38 ; =0x0000FEFF
	andeq r0, r1, r0
	strheq r0, [r6, #0xa]
_02036B18:
	add r7, r7, #1
_02036B1C:
	cmp r7, #4
	blt _020369B0
	add sp, sp, #0x20
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02036B2C: .word 0x02099EE8
_02036B30: .word 0x0000FFEF
_02036B34: .word 0x0000FFF7
_02036B38: .word 0x0000FEFF

	arm_func_start FUN_02036b3c
FUN_02036b3c: ; 0x02036B3C
	push {r4, lr}
	mov r3, #0x28
	mul r3, r1, r3
	add r1, r0, #0x2000
	ldr r0, [r1, r3]
	add r4, r1, r3
	cmp r0, r2
	popeq {r4, pc}
	ldr r0, _02036B88 ; =0x02099F10
	str r2, [r4]
	ldr r0, [r0]
	mov r1, r2
	bl FUN_0205c394
	str r0, [r4, #4]
	cmp r0, #0
	ldrhge r0, [r4, #0xa]
	orrge r0, r0, #0x11
	strhge r0, [r4, #0xa]
	pop {r4, pc}
	.align 2, 0_02036B88: .word 0x02099F10
	arm_func_end FUN_02036b3c

	arm_func_start FUN_02036b8c
FUN_02036b8c: ; 0x02036B8C
	push {r3, r4, r5, lr}
	add r0, r0, #0x2000
	mov r4, #0x28
	mla r5, r1, r4, r0
	ldrh r0, [r5, #0xa]
	tst r0, #1
	popeq {r3, r4, r5, pc}
	ldr r0, _02036BCC ; =0x02099F10
	ldr r1, [r5, #4]
	ldr r0, [r0]
	bl FUN_0205c438
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl MemWrite
	pop {r3, r4, r5, pc}
	.align 2, 0_02036BCC: .word 0x02099F10
	arm_func_end FUN_02036b8c

	arm_func_start FUN_02036bd0
FUN_02036bd0: ; 0x02036BD0
	push {r3, r4, r5, lr}
	add r2, r0, #0x2000
	mov r0, #0x28
	mla r5, r1, r0, r2
	ldrh r0, [r5, #0xa]
	tst r0, #1
	popeq {r3, r4, r5, pc}
	ldr r4, _02036C10 ; =0x02099F10
	ldr r1, [r5, #4]
	ldr r0, [r4]
	bl FUN_0205c3a4
	ldr r0, [r4]
	ldr r1, [r5, #4]
	mov r2, #1
	bl FUN_0205c5b8
	pop {r3, r4, r5, pc}
	.align 2, 0_02036C10: .word 0x02099F10
	arm_func_end FUN_02036bd0

	arm_func_start FUN_02036c14
FUN_02036c14: ; 0x02036C14
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x1c
	add r4, r0, #0x2000
	mov r0, #0x28
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	ldr r5, [sp, #0x3c]
	mov r7, r2
	tst r0, #1
	mov r6, r3
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r8, _02036D14 ; =0x02099F10
	ldr r1, [r4, #4]
	ldr r0, [r8]
	mov r2, #1
	bl FUN_0205c558
	cmp r5, #0
	bne _02036C84
	ldr r0, [sp, #0x38]
	mov r2, r7
	str r0, [sp]
	ldr r0, [r8]
	ldr r1, [r4, #4]
	mov r3, r6
	bl FUN_0205c5e8
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02036c14
_02036C84:
	ldr r1, [r8]
	ldr r2, [r4, #4]
	add r0, sp, #4
	bl FUN_0205c690
	ldr r1, [sp, #8]
	ldr r0, [sp, #4]
	sub r3, r6, r1
	sub r0, r7, r0
	ldr r2, [sp, #0xc]
	ldr r1, [sp, #0x38]
	str r0, [sp, #0x10]
	sub r2, r1, r2
	str r3, [sp, #0x14]
	lsl r1, r5, #0xc
	str r2, [sp, #0x18]
	bl FUN_0200958c
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0x14]
	str r2, [r4, #0x10]
	str r1, [r4, #0x14]
	str r0, [r4, #0x18]
	strh r5, [r4, #0xc]
	ldrh r1, [r4, #0xa]
	str r0, [sp, #0x18]
	orr r0, r1, #0x100
	strh r0, [r4, #0xa]
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02036D14: .word 0x02099F10

	arm_func_start FUN_02036d18
FUN_02036d18: ; 0x02036D18
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x1c
	add r4, r0, #0x2000
	mov r0, #0x28
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	ldr r6, [sp, #0x40]
	ldr r5, [sp, #0x44]
	tst r0, #1
	mov r8, r2
	mov r7, r3
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, _02036F48 ; =0x02099F10
	ldr r1, [r4, #4]
	ldr r0, [r0]
	bl FUN_0205c924
	tst r0, #0x4000
	subne r6, r6, #0x8000
	cmp r5, #0
	bne _02036DF0
	ldr r0, _02036F4C ; =0x0B60B60B
	mov r1, #0xb6
	umull r3, sl, r8, r0
	umull lr, ip, r7, r0
	umull sb, r5, r6, r0
	adds r3, r3, #0
	mla sl, r8, r1, sl
	asr r2, r8, #0x1f
	mla sl, r2, r0, sl
	adc r2, sl, #0x800
	lsl r2, r2, #4
	mla ip, r7, r1, ip
	mla r5, r6, r1, r5
	asr r3, r7, #0x1f
	asr r1, r6, #0x1f
	mla ip, r3, r0, ip
	adds r3, lr, #0
	adc r3, ip, #0x800
	mla r5, r1, r0, r5
	adds r0, sb, #0
	adc r0, r5, #0x800
	lsl r0, r0, #4
	lsr r0, r0, #0x10
	str r0, [sp]
	ldr r0, _02036F48 ; =0x02099F10
	lsl r3, r3, #4
	ldr r1, [r4, #4]
	ldr r0, [r0]
	lsr r2, r2, #0x10
	lsr r3, r3, #0x10
	bl FUN_0205c620
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02036d18
_02036DF0:
	ldr r0, _02036F48 ; =0x02099F10
	ldr r2, [r4, #4]
	ldr r1, [r0]
	add r0, sp, #4
	bl FUN_0205c70c
	ldr sb, [sp, #4]
	mov r3, #0x1680000
	umull r0, lr, sb, r3
	asr sb, sb, #0x1f
	adds r0, r0, #0x80000
	mla lr, sb, r3, lr
	ldr r2, [sp, #8]
	adc lr, lr, #0
	umull ip, sb, r2, r3
	asr r2, r2, #0x1f
	lsr r0, r0, #0x14
	orr r0, r0, lr, lsl #12
	sub r0, r8, r0
	adds r8, ip, #0x80000
	mla sb, r2, r3, sb
	ldr r1, [sp, #0xc]
	adc r2, sb, #0
	lsr r8, r8, #0x14
	orr r8, r8, r2, lsl #12
	sub r2, r7, r8
	umull r8, r7, r1, r3
	asr r1, r1, #0x1f
	str r2, [sp, #0x14]
	adds r2, r8, #0x80000
	mla r7, r1, r3, r7
	adc r1, r7, #0
	lsr r2, r2, #0x14
	orr r2, r2, r1, lsl #12
	sub r2, r6, r2
	mov r1, r5
	str r0, [sp, #0x10]
	str r2, [sp, #0x18]
	bl FUN_0201f9bc
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	mov r1, r5
	bl FUN_0201f9bc
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	mov r1, r5
	bl FUN_0201f9bc
	ldr ip, [sp, #0x10]
	ldr r2, _02036F4C ; =0x0B60B60B
	ldr r8, [sp, #0x14]
	umull sb, lr, ip, r2
	mov r3, #0xb6
	mla lr, ip, r3, lr
	asr r1, ip, #0x1f
	mla lr, r1, r2, lr
	adds sb, sb, #0
	adc r1, lr, #0x800
	lsl r1, r1, #4
	lsr r1, r1, #0x10
	str r1, [sp, #0x10]
	str r1, [r4, #0x1c]
	umull ip, r1, r8, r2
	mla r1, r8, r3, r1
	asr r7, r8, #0x1f
	mla r1, r7, r2, r1
	adds ip, ip, #0
	adc r1, r1, #0x800
	lsl r1, r1, #4
	lsr r1, r1, #0x10
	str r1, [sp, #0x14]
	str r1, [r4, #0x20]
	umull r7, r1, r0, r2
	mla r1, r0, r3, r1
	asr r6, r0, #0x1f
	mla r1, r6, r2, r1
	adds r0, r7, #0
	adc r0, r1, #0x800
	lsl r0, r0, #4
	lsr r0, r0, #0x10
	str r0, [r4, #0x24]
	strh r5, [r4, #0xe]
	str r0, [sp, #0x18]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x200
	strh r0, [r4, #0xa]
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02036F48: .word 0x02099F10
_02036F4C: .word 0x0B60B60B

	arm_func_start FUN_02036f50
FUN_02036f50: ; 0x02036F50
	push {r3, lr}
	add ip, r0, #0x2000
	mov r0, #0x28
	mla ip, r1, r0, ip
	ldrh r0, [ip, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, [sp, #0xc]
	cmp r0, #0
	popne {r3, pc}
	ldr r1, [sp, #8]
	ldr r0, _02036F94 ; =0x02099F10
	str r1, [sp]
	ldr r0, [r0]
	ldr r1, [ip, #4]
	bl FUN_0205c658
	pop {r3, pc}
	.align 2, 0_02036F94: .word 0x02099F10
	arm_func_end FUN_02036f50

	arm_func_start FUN_02036f98
FUN_02036f98: ; 0x02036F98
	push {r3, r4, r5, r6, r7, lr}
	add r4, r0, #0x2000
	mov r0, #0x28
	mla r5, r1, r0, r4
	ldrh r0, [r5, #0xa]
	mov r7, r2
	mov r6, r3
	tst r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r4, _02037004 ; =0x02099F10
	ldr r1, [r5, #4]
	ldr r0, [r4]
	mov r2, #1
	bl FUN_0205c558
	ldr r0, [r4]
	ldr r1, [r5, #4]
	mov r2, r7
	mov r3, r6
	bl FUN_0205c788
	cmp r6, #1
	ldrheq r0, [r5, #0xa]
	orreq r0, r0, #4
	strheq r0, [r5, #0xa]
	ldrh r0, [r5, #0xa]
	orr r0, r0, #8
	strh r0, [r5, #0xa]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02037004: .word 0x02099F10
	arm_func_end FUN_02036f98

	arm_func_start FUN_02037008
FUN_02037008: ; 0x02037008
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x1c
	mov r5, r0
	add r4, r5, #0x2000
	mov r0, #0x28
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	mov r8, r2
	mov r7, r3
	tst r0, #1
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r6, _0203714C ; =0x02099F10
	ldr r1, [r4, #4]
	ldr r0, [r6]
	bl FUN_0205c5b8
	ldrb r3, [sp, #0x3c]
	ldr r0, [r6]
	ldr r1, [r4, #4]
	mov r2, #0x2000
	bl FUN_0205c86c
	ldrb r3, [sp, #0x40]
	ldr r0, [r6]
	ldr r1, [r4, #4]
	mov r2, #0x4000
	bl FUN_0205c86c
	cmp r8, #4
	arm_func_end FUN_02037008

	arm_func_start switchD
switchD: ; 0x02037074
	addls pc, pc, r8, lsl #2
	b _020370F4
	arm_func_end switchD
_0203707C: ; jump table
	b _020370F4 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02037080
	b _020370F4
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02037084
	b _020370F4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02037088
	b _02037090
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0203708C
	b _020370F4
	arm_func_end caseD_4
_02037090:
	ldr r0, _02037150 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _020370AC
	bl FUN_02148398
	cmp r0, #0
	bne _020370CC
_020370AC:
	ldr r2, [sp, #0x38]
	mov r0, r5
	mov r1, r7
	bl FUN_02035c50
	cmp r0, #0
	beq _020370F4
	ldr r2, [r0, #4]
	b _020370E4
_020370CC:
	mov r0, r7
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	beq _020370F4
	ldrsh r2, [r0, #0x94]
_020370E4:
	ldr r0, _0203714C ; =0x02099F10
	ldr r1, [r4, #4]
	ldr r0, [r0]
	bl FUN_0205c82c
_020370F4:
	ldrb r0, [sp, #0x40]
	cmp r0, #0
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r5, _0203714C ; =0x02099F10
	ldr r2, [r4, #4]
	ldr r1, [r5]
	add r0, sp, #4
	bl FUN_0205c70c
	ldr r0, [sp, #0xc]
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	sub r6, r0, #0x8000
	str r6, [sp]
	ldr r0, [r5]
	ldr r1, [r4, #4]
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	str r6, [sp, #0x18]
	bl FUN_0205c620
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0203714C: .word 0x02099F10
_02037150: .word 0x02099EF0

	arm_func_start FUN_02037154
FUN_02037154: ; 0x02037154
	mov r2, #0x28
	mla r0, r1, r2, r0
	add r0, r0, #0x2000
	ldrh r0, [r0, #0xa]
	tst r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02037154

	arm_func_start FUN_02037170
FUN_02037170: ; 0x02037170
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, #0
	mov r6, #0x28
	add r8, r0, #0x2000
	mov r7, sl
	ldr r5, _020371C8 ; =0x02099F10
	mov r4, r6
	b _020371BC
	arm_func_end FUN_02037170
_02037190:
	mla sb, sl, r4, r8
	ldr r1, [sb, #4]
	cmp r1, #0
	blt _020371B8
	ldr r0, [r5]
	bl FUN_0205c438
	mov r0, sb
	mov r1, r7
	mov r2, r6
	bl MemWrite
_020371B8:
	add sl, sl, #1
_020371BC:
	cmp sl, #4
	blt _02037190
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020371C8: .word 0x02099F10

	arm_func_start FUN_020371cc
FUN_020371cc: ; 0x020371CC
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x38
	mov r8, r0
	add r0, r8, #0x1000
	ldr r5, [r0, #0x3e0]
	ldr sb, _02037428 ; =0x02099F10
	mov r6, #0
	b _02037418
	arm_func_end FUN_020371cc
_020371EC:
	add r1, r8, #0x2000
	mov r0, #0x28
	mla r4, r6, r0, r1
	ldrh r0, [r4, #0xa]
	tst r0, #1
	beq _02037414
	tst r0, #0x10
	beq _02037250
	ldr r0, [sb]
	ldr r1, [r4, #4]
	bl FUN_0205c4bc
	cmp r0, #0
	ldrheq r1, [r4, #0xa]
	ldreq r0, _0203742C ; =0x0000FFEF
	andeq r0, r1, r0
	strheq r0, [r4, #0xa]
	ldr r0, [sb]
	ldr r1, [r4, #4]
	bl FUN_0205c4bc
	cmn r0, #1
	ldrheq r1, [r4, #0xa]
	ldreq r0, _02037430 ; =0x0000FFEE
	andeq r0, r1, r0
	strheq r0, [r4, #0xa]
	beq _02037414
_02037250:
	ldr r1, [r4, #4]
	mov r7, #0
	ldr r0, [sb]
	add r2, sp, #4
	str r7, [sp, #4]
	bl FUN_0205b564
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _02037280
	ldrb r0, [r0, #0xb]
	cmp r0, #3
	moveq r7, #1
_02037280:
	cmp r7, #0
	ldrhne r0, [r4, #0xa]
	orrne r0, r0, #2
	strhne r0, [r4, #0xa]
	ldrh r0, [r4, #0xa]
	tst r0, #8
	beq _020372C4
	tst r0, #4
	bne _020372C4
	ldr r0, [sb]
	ldr r1, [r4, #4]
	bl FUN_0205c7f8
	cmp r0, #0
	ldrhne r1, [r4, #0xa]
	ldrne r0, _02037434 ; =0x0000FFF7
	andne r0, r1, r0
	strhne r0, [r4, #0xa]
_020372C4:
	ldrh r0, [r4, #0xa]
	tst r0, #0x100
	beq _0203736C
	ldr r1, [sb]
	ldr r2, [r4, #4]
	add r0, sp, #0x14
	bl FUN_0205c690
	ldr r2, [sp, #0x14]
	ldr r1, [sp, #0x18]
	ldr r0, [sp, #0x1c]
	str r2, [sp, #0x2c]
	str r1, [sp, #0x30]
	str r0, [sp, #0x34]
	mov r7, #0
	add sl, sp, #0x2c
	b _02037330
_02037304:
	mov r0, sl
	mov r2, sl
	add r1, r4, #0x10
	bl FUN_02009734
	ldrh r0, [r4, #0xc]
	sub r0, r0, #1
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	strh r0, [r4, #0xc]
	beq _02037338
	add r7, r7, #1
_02037330:
	cmp r7, r5
	blo _02037304
_02037338:
	ldr r0, [sp, #0x34]
	str r0, [sp]
	ldr r0, [sb]
	ldr r1, [r4, #4]
	ldr r2, [sp, #0x2c]
	ldr r3, [sp, #0x30]
	bl FUN_0205c5e8
	ldrh r0, [r4, #0xc]
	cmp r0, #0
	ldrheq r1, [r4, #0xa]
	ldreq r0, _02037438 ; =0x0000FEFF
	andeq r0, r1, r0
	strheq r0, [r4, #0xa]
_0203736C:
	ldrh r0, [r4, #0xa]
	tst r0, #0x200
	beq _02037414
	ldr r1, [sb]
	ldr r2, [r4, #4]
	add r0, sp, #8
	bl FUN_0205c70c
	ldr r2, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	str r2, [sp, #0x20]
	str r1, [sp, #0x24]
	str r0, [sp, #0x28]
	mov r7, #0
	add sl, sp, #0x20
	b _020373D8
_020373AC:
	mov r0, sl
	mov r2, sl
	add r1, r4, #0x1c
	bl FUN_02009734
	ldrh r0, [r4, #0xe]
	sub r0, r0, #1
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	strh r0, [r4, #0xe]
	beq _020373E0
	add r7, r7, #1
_020373D8:
	cmp r7, r5
	blo _020373AC
_020373E0:
	ldr r0, [sp, #0x28]
	str r0, [sp]
	ldr r0, [sb]
	ldr r1, [r4, #4]
	ldr r2, [sp, #0x20]
	ldr r3, [sp, #0x24]
	bl FUN_0205c620
	ldrh r0, [r4, #0xe]
	cmp r0, #0
	ldrheq r1, [r4, #0xa]
	ldreq r0, _0203743C ; =0x0000FDFF
	andeq r0, r1, r0
	strheq r0, [r4, #0xa]
_02037414:
	add r6, r6, #1
_02037418:
	cmp r6, #6
	blt _020371EC
	add sp, sp, #0x38
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02037428: .word 0x02099F10
_0203742C: .word 0x0000FFEF
_02037430: .word 0x0000FFEE
_02037434: .word 0x0000FFF7
_02037438: .word 0x0000FEFF
_0203743C: .word 0x0000FDFF

	arm_func_start FUN_02037440
FUN_02037440: ; 0x02037440
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10c
	add r0, r0, #0xf0
	add r4, r0, #0x2000
	mov r0, #0x3c
	mla r8, r1, r0, r4
	add fp, sp, #0xc
	ldr r1, _02037504 ; =0x0208FE00
	mov r0, fp
	mov sl, r2
	mov sb, r3
	bl FUN_02015184
	ldr r5, _02037508 ; =0x0209A200
	ldr r4, _0203750C ; =0x02099F58
	ldr r2, [r5, #0x24]
	ldr r0, [r4]
	mov r7, #1
	str r7, [sp]
	mov r6, #0
	str r6, [sp, #4]
	add r0, r0, #4
	mov r1, #2
	mov r3, fp
	str r6, [sp, #8]
	bl FUN_02058684
	str r0, [r8, #4]
	ldr r1, _02037510 ; =0x0208FE08
	mov r2, sl
	mov r0, fp
	bl FUN_02015184
	ldr r0, [r4]
	ldr r2, [r5, #0x24]
	mov r3, fp
	str r7, [sp]
	str r6, [sp, #4]
	add r0, r0, #4
	str r6, [sp, #8]
	mov r1, #3
	bl FUN_02058684
	str r0, [r8, #8]
	ldrh r0, [r8, #0xe]
	cmp sb, #2
	orr r0, r0, #5
	strh r0, [r8, #0xe]
	ldrheq r0, [r8, #0xe]
	orreq r0, r0, #0x40
	strheq r0, [r8, #0xe]
	add sp, sp, #0x10c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02037504: .word 0x0208FE00
_02037508: .word 0x0209A200
_0203750C: .word 0x02099F58
_02037510: .word 0x0208FE08
	arm_func_end FUN_02037440

	arm_func_start FUN_02037514
FUN_02037514: ; 0x02037514
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	add r0, r5, #0xf0
	mov r2, r1
	add r0, r0, #0x2000
	mov r7, #0x3c
	mla r4, r2, r7, r0
	ldrh r0, [r4, #0xe]
	tst r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r6, _020375B8 ; =0x02099F58
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x3ec]
	ldr r3, _020375BC ; =0x0000FFFE
	add r2, r2, #1
	bl FUN_021172CC
	ldr r0, [r6]
	ldr r1, [r4, #4]
	bl FUN_02116910
	ldr r0, [r6]
	ldr r1, [r4, #4]
	add r0, r0, #4
	bl FUN_02058ee0
	ldr r0, [r6]
	ldr r1, [r4, #8]
	bl FUN_02116910
	ldr r0, [r6]
	ldr r1, [r4, #8]
	add r0, r0, #4
	bl FUN_02058ee0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x3ec]
	ldr r0, _020375C0 ; =0x02099F38
	ldr r0, [r0]
	bl FUN_021128C4
	mov r0, r4
	mov r2, r7
	mov r1, #0
	bl MemWrite
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020375B8: .word 0x02099F58
_020375BC: .word 0x0000FFFE
_020375C0: .word 0x02099F38
	arm_func_end FUN_02037514

	arm_func_start FUN_020375c4
FUN_020375c4: ; 0x020375C4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	arm_func_end FUN_020375c4
_020375D0:
	mov r0, r5
	mov r1, r4
	bl FUN_02037514
	add r4, r4, #1
	cmp r4, #0x20
	blt _020375D0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_020375ec
FUN_020375ec: ; 0x020375EC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	add r0, r7, #0xf0
	mov r6, r1
	add r1, r0, #0x2000
	mov r0, #0x3c
	mla r5, r6, r0, r1
	ldrh r0, [r5, #0xe]
	tst r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r4, _02037720 ; =0x02099F58
	ldr r1, [r5, #4]
	ldr r0, [r4]
	add r0, r0, #4
	bl FUN_02059004
	cmp r0, #0
	bne _02037648
	ldr r0, [r4]
	ldr r1, [r5, #4]
	mov r2, #1
	bl FUN_021168F8
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020375ec
_02037648:
	ldr r4, _02037720 ; =0x02099F58
	ldr r1, [r5, #8]
	ldr r0, [r4]
	add r0, r0, #4
	bl FUN_02059004
	cmp r0, #0
	bne _0203767C
	ldr r0, [r4]
	ldr r1, [r5, #8]
	mov r2, #1
	bl FUN_021168F8
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
_0203767C:
	ldr r0, [r5, #8]
	ldr r4, _02037720 ; =0x02099F58
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	str r0, [sp]
	ldr r0, [r5, #4]
	add r1, r7, #0x1000
	lsl r3, r0, #0x10
	ldr r0, [r4]
	ldr r1, [r1, #0x3ec]
	add r2, r6, #1
	lsr r3, r3, #0x10
	bl FUN_02117180
	add r1, r7, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3ec]
	ldr r3, _02037724 ; =0x0000FFFE
	add r2, r6, #1
	bl FUN_021172CC
	mov r3, #0x32
	str r3, [sp]
	add r0, r7, #0x1000
	ldr r1, [r0, #0x3ec]
	ldr r0, [r4]
	add r2, r6, #1
	bl FUN_0211746C
	ldrh r0, [r5, #0xe]
	tst r0, #0x40
	beq _02037710
	mov r0, #1
	str r0, [sp]
	add r1, r7, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3ec]
	add r2, r6, #1
	mov r3, #0x3000
	bl FUN_02117284
_02037710:
	ldrh r0, [r5, #0xe]
	orr r0, r0, #2
	strh r0, [r5, #0xe]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02037720: .word 0x02099F58
_02037724: .word 0x0000FFFE

	arm_func_start FUN_02037728
FUN_02037728: ; 0x02037728
	mov r2, #0x3c
	mla r0, r1, r2, r0
	add r0, r0, #0x2000
	ldrh r0, [r0, #0xfe]
	tst r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02037728

	arm_func_start FUN_02037744
FUN_02037744: ; 0x02037744
	push {r4, r5, lr}
	sub sp, sp, #0xc
	add lr, r0, #0xf0
	mov ip, r1
	add lr, lr, #0x2000
	mov r1, #0x3c
	mla r4, ip, r1, lr
	ldrh lr, [r4, #0xe]
	mov r5, #1
	tst lr, #1
	addeq sp, sp, #0xc
	popeq {r4, r5, pc}
	cmp r2, #0
	beq _020377E0
	orr r1, lr, #8
	strh r1, [r4, #0xe]
	cmp r3, #1
	beq _02037798
	cmp r3, #2
	moveq r5, #4
	b _0203779C
	arm_func_end FUN_02037744
_02037798:
	mov r5, #3
_0203779C:
	and r1, r5, #0xff
	str r1, [sp]
	ldr r2, [sp, #0x1c]
	ldr r1, [sp, #0x18]
	str r2, [sp, #4]
	lsl r3, r1, #0x10
	mov lr, #1
	ldr r2, _02037810 ; =0x02099F58
	str lr, [sp, #8]
	add r1, r0, #0x1000
	ldr r0, [r2]
	ldr r1, [r1, #0x3ec]
	add r2, ip, #1
	asr r3, r3, #0x10
	bl FUN_02117414
	add sp, sp, #0xc
	pop {r4, r5, pc}
_020377E0:
	ldr r1, _02037814 ; =0x0000FFF7
	ldr r2, _02037810 ; =0x02099F58
	and r1, lr, r1
	strh r1, [r4, #0xe]
	add r1, r0, #0x1000
	ldr r0, [r2]
	ldr r1, [r1, #0x3ec]
	add r2, ip, #1
	mov r3, #2
	bl FUN_021172CC
	add sp, sp, #0xc
	pop {r4, r5, pc}
	.align 2, 0_02037810: .word 0x02099F58
_02037814: .word 0x0000FFF7

	arm_func_start FUN_02037818
FUN_02037818: ; 0x02037818
	push {r3, r4, r5, r6, r7, lr}
	add r0, r0, #0xf0
	add r4, r0, #0x2000
	mov r0, #0x3c
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xe]
	ldr r5, [sp, #0x18]
	mov r7, r2
	mov r6, r3
	tst r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r7, #0
	lsl r0, r7, #0xc
	ble _02037864
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _02037870
	arm_func_end FUN_02037818
_02037864:
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_02037870:
	bl FUN_0201fdac
	mov r7, r0
	cmp r6, #0
	lsl r0, r6, #0xc
	ble _02037898
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _020378A4
_02037898:
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_020378A4:
	bl FUN_0201fdac
	ldrh r1, [r4, #0xe]
	mov r6, r0
	tst r1, #0x40
	ldrne r0, _02037938 ; =0x0209A720
	ldrne r1, [r0, #0xd4]
	ldrne r0, [r0, #0xd8]
	addne r7, r7, r1
	addne r6, r6, r0
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	ldrne r1, [r4, #0x14]
	ldrne r0, [r4, #0x18]
	addne r7, r7, r1
	addne r6, r6, r0
	cmp r5, #0
	streq r7, [r4, #0x14]
	streq r6, [r4, #0x18]
	popeq {r3, r4, r5, r6, r7, pc}
	strh r5, [r4, #0x10]
	ldr r0, [r4, #0x14]
	mov r1, r5
	sub r0, r7, r0
	str r0, [r4, #0x1c]
	ldr r2, [r4, #0x18]
	sub r2, r6, r2
	str r2, [r4, #0x20]
	bl FUN_0201f9bc
	str r0, [r4, #0x1c]
	ldr r0, [r4, #0x20]
	mov r1, r5
	bl FUN_0201f9bc
	str r0, [r4, #0x20]
	ldrh r0, [r4, #0xe]
	orr r0, r0, #0x10
	strh r0, [r4, #0xe]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02037938: .word 0x0209A720

	arm_func_start FUN_0203793c
FUN_0203793c: ; 0x0203793C
	push {r3, r4, r5, lr}
	add r4, r0, #0xf0
	mov ip, r1
	add r4, r4, #0x2000
	mov r1, #0x3c
	mla r4, ip, r1, r4
	ldrh r1, [r4, #0xe]
	mov r5, r3
	tst r1, #1
	popeq {r3, r4, r5, pc}
	ldr r1, [sp, #0x10]
	ldr r3, [r4, #0x24]
	cmp r1, #0
	addne r2, r2, r3
	cmp r5, #0
	bne _020379A4
	ldr lr, _020379C8 ; =0x02099F58
	str r2, [r4, #0x24]
	add r1, r0, #0x1000
	lsl r3, r2, #0x10
	ldr r0, [lr]
	ldr r1, [r1, #0x3ec]
	add r2, ip, #1
	lsr r3, r3, #0x10
	bl FUN_02117454
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0203793c
_020379A4:
	mov r1, r5
	sub r0, r2, r3
	bl FUN_0201f9bc
	str r0, [r4, #0x28]
	strh r5, [r4, #0x12]
	ldrh r0, [r4, #0xe]
	orr r0, r0, #0x80
	strh r0, [r4, #0xe]
	pop {r3, r4, r5, pc}
	.align 2, 0_020379C8: .word 0x02099F58

	arm_func_start FUN_020379cc
FUN_020379cc: ; 0x020379CC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	add r0, r7, #0xf0
	add r4, r0, #0x2000
	mov r5, #0
	b _02037C34
	arm_func_end FUN_020379cc
_020379E4:
	ldrh r0, [r4, #0xe]
	tst r0, #1
	beq _02037C2C
	tst r0, #4
	beq _02037A60
	ldr r6, _02037C40 ; =0x02099F58
	ldr r1, [r4, #4]
	ldr r0, [r6]
	add r0, r0, #4
	bl FUN_02058e30
	ldr r2, [r6]
	mov r6, r0
	ldr r1, [r4, #8]
	add r0, r2, #4
	bl FUN_02058e30
	cmp r6, #0
	cmpeq r0, #0
	ldrheq r2, [r4, #0xe]
	ldreq r1, _02037C44 ; =0x0000FFFB
	andeq r1, r2, r1
	strheq r1, [r4, #0xe]
	mvn r1, #0
	cmp r6, r1
	beq _02037A4C
	cmp r0, r1
	bne _02037C2C
_02037A4C:
	ldrh r1, [r4, #0xe]
	ldr r0, _02037C48 ; =0x0000FFFA
	and r0, r1, r0
	strh r0, [r4, #0xe]
	b _02037C2C
_02037A60:
	tst r0, #2
	beq _02037C2C
	tst r0, #0x20
	beq _02037AF4
	mov r0, #0
	add r1, r7, #0x1000
	b _02037AA0
_02037A7C:
	ldr r3, [r4, #0x30]
	ldr r2, [r4, #0x34]
	add r2, r3, r2
	str r2, [r4, #0x30]
	ldr r2, [r4, #0x2c]
	subs r2, r2, #1
	str r2, [r4, #0x2c]
	beq _02037AAC
	add r0, r0, #1
_02037AA0:
	ldr r2, [r1, #0x3e0]
	cmp r0, r2
	blo _02037A7C
_02037AAC:
	ldr r0, [r4, #0x2c]
	cmp r0, #0
	bne _02037AD0
	ldrh r1, [r4, #0xe]
	ldr r0, _02037C4C ; =0x0000FFDF
	and r0, r1, r0
	strh r0, [r4, #0xe]
	ldr r0, [r4, #0x38]
	str r0, [r4, #0x30]
_02037AD0:
	ldr r2, [r4, #0x30]
	ldr r0, _02037C40 ; =0x02099F58
	add r1, r7, #0x1000
	asr r3, r2, #0xc
	ldr r0, [r0]
	ldr r1, [r1, #0x3ec]
	add r2, r5, #1
	and r3, r3, #0xff
	bl FUN_02117304
_02037AF4:
	ldrh r0, [r4, #0xe]
	tst r0, #0x10
	beq _02037B6C
	mov r0, #0
	add r1, r7, #0x1000
	b _02037B48
_02037B0C:
	ldr r3, [r4, #0x14]
	ldr r2, [r4, #0x1c]
	add r2, r3, r2
	str r2, [r4, #0x14]
	ldr r3, [r4, #0x18]
	ldr r2, [r4, #0x20]
	add r2, r3, r2
	str r2, [r4, #0x18]
	ldrh r2, [r4, #0x10]
	sub r2, r2, #1
	lsl r2, r2, #0x10
	lsrs r2, r2, #0x10
	strh r2, [r4, #0x10]
	beq _02037B54
	add r0, r0, #1
_02037B48:
	ldr r2, [r1, #0x3e0]
	cmp r0, r2
	blo _02037B0C
_02037B54:
	ldrh r0, [r4, #0x10]
	cmp r0, #0
	ldrheq r1, [r4, #0xe]
	ldreq r0, _02037C50 ; =0x0000FFEF
	andeq r0, r1, r0
	strheq r0, [r4, #0xe]
_02037B6C:
	ldrh r0, [r4, #0xe]
	tst r0, #0x80
	beq _02037BF8
	mov r0, #0
	add r1, r7, #0x1000
	b _02037BB0
_02037B84:
	ldr r3, [r4, #0x24]
	ldr r2, [r4, #0x28]
	add r2, r3, r2
	str r2, [r4, #0x24]
	ldrh r2, [r4, #0x12]
	sub r2, r2, #1
	lsl r2, r2, #0x10
	lsrs r2, r2, #0x10
	strh r2, [r4, #0x12]
	beq _02037BBC
	add r0, r0, #1
_02037BB0:
	ldr r2, [r1, #0x3e0]
	cmp r0, r2
	blo _02037B84
_02037BBC:
	ldrh r0, [r4, #0x12]
	cmp r0, #0
	ldrheq r1, [r4, #0xe]
	ldreq r0, _02037C54 ; =0x0000FF7F
	andeq r0, r1, r0
	strheq r0, [r4, #0xe]
	ldr r2, [r4, #0x24]
	ldr r0, _02037C40 ; =0x02099F58
	lsl r3, r2, #0x10
	add r1, r7, #0x1000
	ldr r0, [r0]
	ldr r1, [r1, #0x3ec]
	add r2, r5, #1
	lsr r3, r3, #0x10
	bl FUN_02117454
_02037BF8:
	ldr r0, [r4, #0x18]
	ldr r2, [r4, #0x14]
	lsl r0, r0, #4
	asr r1, r0, #0x10
	ldr r0, _02037C40 ; =0x02099F58
	str r1, [sp]
	add r1, r7, #0x1000
	lsl r3, r2, #4
	ldr r0, [r0]
	ldr r1, [r1, #0x3ec]
	add r2, r5, #1
	asr r3, r3, #0x10
	bl FUN_02117390
_02037C2C:
	add r5, r5, #1
	add r4, r4, #0x3c
_02037C34:
	cmp r5, #0x20
	blt _020379E4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02037C40: .word 0x02099F58
_02037C44: .word 0x0000FFFB
_02037C48: .word 0x0000FFFA
_02037C4C: .word 0x0000FFDF
_02037C50: .word 0x0000FFEF
_02037C54: .word 0x0000FF7F

	arm_func_start FUN_02037c58
FUN_02037c58: ; 0x02037C58
	add r1, r0, #0x870
	add r2, r0, #0x170
	add r0, r1, #0x2000
	add r1, r2, #0x3000
	ldr ip, _02037C74 ; =_memcpy
	mov r2, #0x900
	bx ip
	.align 2, 0_02037C74: .word _memcpy
	arm_func_end FUN_02037c58

	arm_func_start LAB_02037c78
LAB_02037c78: ; 0x02037C78
	add r1, r0, #0x170
	add r2, r0, #0x870
	add r0, r1, #0x3000
	add r1, r2, #0x2000
	ldr ip, _02037C94 ; =_memcpy
	mov r2, #0x900
	bx ip
	.align 2, 0_02037C94: .word _memcpy
	arm_func_end LAB_02037c78

	arm_func_start FUN_02037c98
FUN_02037c98: ; 0x02037C98
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10c
	add r0, r0, #0x870
	add r4, r0, #0x2000
	mov r0, #0x48
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	mov r7, r2
	mov r6, r3
	tst r0, #1
	ldr r5, [sp, #0x128]
	ldr r8, _02037DD4 ; =0x02099EE8
	beq _02037D0C
	mov r1, r7
	add r0, r4, #0x30
	bl _strcmp
	cmp r0, #0
	bne _02037CF0
	ldr r0, [r4]
	cmp r0, r5
	addeq sp, sp, #0x10c
	popeq {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02037c98
_02037CF0:
	ldr r0, [r8]
	ldr r1, [r4, #4]
	bl FUN_0205f5ec
	mov r0, r4
	mov r1, #0
	mov r2, #0x48
	bl MemWrite
_02037D0C:
	cmp r5, #0
	ldr r0, [r8]
	bge _02037D28
	add r2, sp, #0xc
	mov r1, r7
	bl FUN_0205e71c
	b _02037D38
_02037D28:
	add r3, sp, #0xc
	mov r1, r7
	mov r2, r5
	bl FUN_0205e674
_02037D38:
	ldr r1, [sp, #0x134]
	str r5, [r4]
	cmp r1, #0
	beq _02037D70
	ldr r0, [r8]
	mov r8, #0
	str r8, [sp]
	mov r1, #1
	str r1, [sp, #4]
	add r1, sp, #0xc
	mov r2, r6
	mov r3, r5
	str r8, [sp, #8]
	b _02037D90
_02037D70:
	mov r0, #0
	stm sp, {r0, r1}
	mov r0, #1
	str r0, [sp, #8]
	ldr r0, [r8]
	add r1, sp, #0xc
	mov r2, r6
	mov r3, r5
_02037D90:
	bl FUN_0205f214
	str r0, [r4, #4]
	movs r0, r0
	addmi sp, sp, #0x10c
	popmi {r3, r4, r5, r6, r7, r8, pc}
	ldrh r1, [r4, #0xa]
	ldr r0, [sp, #0x12c]
	ldr r2, [sp, #0x130]
	orr r1, r1, #0x11
	strh r1, [r4, #0xa]
	str r0, [r4, #0x28]
	mov r1, r7
	add r0, r4, #0x30
	str r2, [r4, #0x2c]
	bl _strcpy
	add sp, sp, #0x10c
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02037DD4: .word 0x02099EE8

	arm_func_start FUN_02037dd8
FUN_02037dd8: ; 0x02037DD8
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x104
	add r0, r0, #0x870
	add r4, r0, #0x2000
	mov r0, #0x48
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	mov r5, r2
	mov r7, r3
	tst r0, #1
	ldr r6, _02037EEC ; =0x02099EE8
	beq _02037E48
	mov r1, r5
	add r0, r4, #0x30
	bl _strcmp
	cmp r0, #0
	bne _02037E2C
	ldr r0, [r4]
	cmp r0, r7
	addeq sp, sp, #0x104
	popeq {r4, r5, r6, r7, pc}
	arm_func_end FUN_02037dd8
_02037E2C:
	ldr r0, [r6]
	ldr r1, [r4, #4]
	bl FUN_0205f5ec
	mov r0, r4
	mov r1, #0
	mov r2, #0x48
	bl MemWrite
_02037E48:
	cmp r7, #0
	ldr r0, [r6]
	bge _02037E64
	add r2, sp, #4
	mov r1, r5
	bl FUN_0205e71c
	b _02037E74
_02037E64:
	add r3, sp, #4
	mov r1, r5
	mov r2, r7
	bl FUN_0205e674
_02037E74:
	ldr r0, [sp, #0x120]
	str r7, [r4]
	cmp r0, #0
	mov r2, #0
	ldr r0, [r6]
	add r1, sp, #4
	beq _02037E9C
	str r2, [sp]
	mov r3, #1
	b _02037EA8
_02037E9C:
	mov r6, #1
	mov r3, r2
	str r6, [sp]
_02037EA8:
	bl FUN_0205f26c
	str r0, [r4, #4]
	movs r0, r0
	addmi sp, sp, #0x104
	popmi {r4, r5, r6, r7, pc}
	ldrh r1, [r4, #0xa]
	ldr r0, [sp, #0x118]
	ldr r2, [sp, #0x11c]
	orr r1, r1, #0x11
	strh r1, [r4, #0xa]
	str r0, [r4, #0x28]
	mov r1, r5
	add r0, r4, #0x30
	str r2, [r4, #0x2c]
	bl _strcpy
	add sp, sp, #0x104
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_02037EEC: .word 0x02099EE8

	arm_func_start FUN_02037ef0
FUN_02037ef0: ; 0x02037EF0
	push {r3, r4, r5, lr}
	add r0, r0, #0x870
	add r0, r0, #0x2000
	mov r4, #0x48
	mla r5, r1, r4, r0
	ldrh r0, [r5, #0xa]
	tst r0, #1
	popeq {r3, r4, r5, pc}
	ldr r0, _02037F34 ; =0x02099EE8
	ldr r1, [r5, #4]
	ldr r0, [r0]
	bl FUN_0205f5ec
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl MemWrite
	pop {r3, r4, r5, pc}
	.align 2, 0_02037F34: .word 0x02099EE8
	arm_func_end FUN_02037ef0

	arm_func_start FUN_02037f38
FUN_02037f38: ; 0x02037F38
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, #0
	add r0, r0, #0x870
	mov sl, r1
	add r7, r0, #0x2000
	mov fp, sb
	mvn r4, #0
	ldr r6, _02037FAC ; =0x02099EE8
	mov r5, #0x48
	b _02037FA0
	arm_func_end FUN_02037f38
_02037F60:
	mla r8, sb, r5, r7
	ldrh r0, [r8, #0xa]
	tst r0, #1
	beq _02037F9C
	ldr r0, [r8, #0x28]
	cmp r0, r4
	cmpne r0, sl
	bne _02037F9C
	ldr r0, [r6]
	ldr r1, [r8, #4]
	bl FUN_0205f5ec
	mov r0, r8
	mov r1, fp
	mov r2, #0x48
	bl MemWrite
_02037F9C:
	add sb, sb, #1
_02037FA0:
	cmp sb, #0x20
	blt _02037F60
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02037FAC: .word 0x02099EE8

	arm_func_start FUN_02037fb0
FUN_02037fb0: ; 0x02037FB0
	push {r3, lr}
	add r0, r0, #0x870
	add r2, r0, #0x2000
	mov r0, #0x48
	mla r2, r1, r0, r2
	ldrh r0, [r2, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _02037FE4 ; =0x02099EE8
	ldr r1, [r2, #4]
	ldr r0, [r0]
	bl FUN_0205f56c
	pop {r3, pc}
	.align 2, 0_02037FE4: .word 0x02099EE8
	arm_func_end FUN_02037fb0

	arm_func_start FUN_02037fe8
FUN_02037fe8: ; 0x02037FE8
	push {r3, lr}
	add r0, r0, #0x870
	add r3, r0, #0x2000
	mov r0, #0x48
	mla r3, r1, r0, r3
	ldrh r0, [r3, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _0203801C ; =0x02099EE8
	ldr r1, [r3, #4]
	ldr r0, [r0]
	bl FUN_0205fdf0
	pop {r3, pc}
	.align 2, 0_0203801C: .word 0x02099EE8
	arm_func_end FUN_02037fe8

	arm_func_start FUN_02038020
FUN_02038020: ; 0x02038020
	push {r3, lr}
	add r0, r0, #0x870
	add r3, r0, #0x2000
	mov r0, #0x48
	mla r3, r1, r0, r3
	ldrh r0, [r3, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _02038054 ; =0x02099EE8
	ldr r1, [r3, #4]
	ldr r0, [r0]
	bl FUN_0205fdac
	pop {r3, pc}
	.align 2, 0_02038054: .word 0x02099EE8
	arm_func_end FUN_02038020

	arm_func_start FUN_02038058
FUN_02038058: ; 0x02038058
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x1c
	add r0, r0, #0x870
	add r4, r0, #0x2000
	mov r0, #0x48
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	ldr r5, [sp, #0x34]
	mov r7, r2
	tst r0, #1
	mov r6, r3
	addeq sp, sp, #0x1c
	popeq {r4, r5, r6, r7, pc}
	ldr r0, _02038198 ; =0x02099EE8
	ldr r1, [r4, #4]
	ldr r0, [r0]
	mov r2, #1
	bl FUN_0205f9c0
	ldr r0, [sp, #0x30]
	str r7, [sp, #0x10]
	str r6, [sp, #0x14]
	str r0, [sp, #0x18]
	ldr r0, [r4, #0x28]
	cmp r0, #0
	bge _020380D0
	ldr r0, _0203819C ; =0x02099EB0
	add r1, sp, #0x10
	ldr r0, [r0]
	bl FUN_020CD234
	str r0, [r4, #0x28]
	arm_func_end FUN_02038058
_020380D0:
	cmp r5, #0
	bne _02038100
	ldr r1, [sp, #0x30]
	ldr r0, _02038198 ; =0x02099EE8
	str r1, [sp]
	ldr r0, [r0]
	ldr r1, [r4, #4]
	mov r2, r7
	mov r3, r6
	bl FUN_0205fa48
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, pc}
_02038100:
	ldr r0, _02038198 ; =0x02099EE8
	ldr r2, [r4, #4]
	ldr r1, [r0]
	add r0, sp, #4
	bl FUN_0205fb80
	ldr r1, [sp, #8]
	ldr r0, [sp, #4]
	sub r3, r6, r1
	sub r0, r7, r0
	ldr r2, [sp, #0xc]
	ldr r1, [sp, #0x30]
	str r0, [sp, #0x10]
	sub r2, r1, r2
	str r3, [sp, #0x14]
	lsl r1, r5, #0xc
	str r2, [sp, #0x18]
	bl FUN_0200958c
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	lsl r1, r5, #0xc
	bl FUN_0200958c
	ldr r1, [sp, #0x10]
	str r0, [sp, #0x18]
	str r1, [r4, #0x10]
	ldr r0, [sp, #0x14]
	str r0, [r4, #0x14]
	ldr r0, [sp, #0x18]
	str r0, [r4, #0x18]
	strh r5, [r4, #0xc]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x100
	strh r0, [r4, #0xa]
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_02038198: .word 0x02099EE8
_0203819C: .word 0x02099EB0

	arm_func_start FUN_020381a0
FUN_020381a0: ; 0x020381A0
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x1c
	add r0, r0, #0x870
	add r4, r0, #0x2000
	mov r0, #0x48
	mla r4, r1, r0, r4
	ldrh r0, [r4, #0xa]
	ldr r6, [sp, #0x40]
	ldr r5, [sp, #0x44]
	tst r0, #1
	mov r8, r2
	mov r7, r3
	addeq sp, sp, #0x1c
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r5, #0
	bne _02038264
	ldr r0, _020383BC ; =0x0B60B60B
	mov r1, #0xb6
	umull r3, sl, r8, r0
	umull lr, ip, r7, r0
	umull sb, r5, r6, r0
	adds r3, r3, #0
	mla sl, r8, r1, sl
	asr r2, r8, #0x1f
	mla sl, r2, r0, sl
	adc r2, sl, #0x800
	lsl r2, r2, #4
	mla ip, r7, r1, ip
	mla r5, r6, r1, r5
	asr r3, r7, #0x1f
	asr r1, r6, #0x1f
	mla ip, r3, r0, ip
	adds r3, lr, #0
	adc r3, ip, #0x800
	mla r5, r1, r0, r5
	adds r0, sb, #0
	adc r0, r5, #0x800
	lsl r0, r0, #4
	lsr r0, r0, #0x10
	str r0, [sp]
	ldr r0, _020383C0 ; =0x02099EE8
	lsl r3, r3, #4
	ldr r1, [r4, #4]
	ldr r0, [r0]
	lsr r2, r2, #0x10
	lsr r3, r3, #0x10
	bl FUN_0205fab4
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_020381a0
_02038264:
	ldr r0, _020383C0 ; =0x02099EE8
	ldr r2, [r4, #4]
	ldr r1, [r0]
	add r0, sp, #4
	bl FUN_0205fbfc
	ldr sb, [sp, #4]
	mov r3, #0x1680000
	umull r0, lr, sb, r3
	asr sb, sb, #0x1f
	adds r0, r0, #0x80000
	mla lr, sb, r3, lr
	ldr r2, [sp, #8]
	adc lr, lr, #0
	umull ip, sb, r2, r3
	asr r2, r2, #0x1f
	lsr r0, r0, #0x14
	orr r0, r0, lr, lsl #12
	sub r0, r8, r0
	adds r8, ip, #0x80000
	mla sb, r2, r3, sb
	ldr r1, [sp, #0xc]
	adc r2, sb, #0
	lsr r8, r8, #0x14
	orr r8, r8, r2, lsl #12
	sub r2, r7, r8
	umull r8, r7, r1, r3
	asr r1, r1, #0x1f
	str r2, [sp, #0x14]
	adds r2, r8, #0x80000
	mla r7, r1, r3, r7
	adc r1, r7, #0
	lsr r2, r2, #0x14
	orr r2, r2, r1, lsl #12
	sub r2, r6, r2
	mov r1, r5
	str r0, [sp, #0x10]
	str r2, [sp, #0x18]
	bl FUN_0201f9bc
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x14]
	mov r1, r5
	bl FUN_0201f9bc
	str r0, [sp, #0x14]
	ldr r0, [sp, #0x18]
	mov r1, r5
	bl FUN_0201f9bc
	ldr ip, [sp, #0x10]
	ldr r2, _020383BC ; =0x0B60B60B
	ldr r8, [sp, #0x14]
	umull sb, lr, ip, r2
	mov r3, #0xb6
	mla lr, ip, r3, lr
	asr r1, ip, #0x1f
	mla lr, r1, r2, lr
	adds sb, sb, #0
	adc r1, lr, #0x800
	lsl r1, r1, #4
	lsr r1, r1, #0x10
	str r1, [sp, #0x10]
	str r1, [r4, #0x1c]
	umull ip, r1, r8, r2
	mla r1, r8, r3, r1
	asr r7, r8, #0x1f
	mla r1, r7, r2, r1
	adds ip, ip, #0
	adc r1, r1, #0x800
	lsl r1, r1, #4
	lsr r1, r1, #0x10
	str r1, [sp, #0x14]
	str r1, [r4, #0x20]
	umull r7, r1, r0, r2
	mla r1, r0, r3, r1
	asr r6, r0, #0x1f
	mla r1, r6, r2, r1
	adds r0, r7, #0
	adc r0, r1, #0x800
	lsl r0, r0, #4
	lsr r0, r0, #0x10
	str r0, [r4, #0x24]
	strh r5, [r4, #0xe]
	str r0, [sp, #0x18]
	ldrh r0, [r4, #0xa]
	orr r0, r0, #0x200
	strh r0, [r4, #0xa]
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020383BC: .word 0x0B60B60B
_020383C0: .word 0x02099EE8

	arm_func_start FUN_020383c4
FUN_020383c4: ; 0x020383C4
	push {r3, r4, r5, lr}
	sub sp, sp, #0x100
	add r0, r0, #0x870
	add r3, r0, #0x2000
	mov r0, #0x48
	mla r5, r1, r0, r3
	ldrh r0, [r5, #0xa]
	tst r0, #1
	addeq sp, sp, #0x100
	popeq {r3, r4, r5, pc}
	add r4, sp, #0
	ldr r1, _02038428 ; =0x0208FE10
	mov r0, r4
	bl FUN_02015184
	ldr r0, _0203842C ; =0x02099EE8
	ldr r1, [r5, #4]
	ldr r0, [r0]
	mov r2, r4
	mov r3, #1
	bl FUN_0205f664
	ldrh r0, [r5, #0xa]
	orr r0, r0, #0x10
	strh r0, [r5, #0xa]
	add sp, sp, #0x100
	pop {r3, r4, r5, pc}
	.align 2, 0_02038428: .word 0x0208FE10
_0203842C: .word 0x02099EE8
	arm_func_end FUN_020383c4

	arm_func_start FUN_02038430
FUN_02038430: ; 0x02038430
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x104
	add r0, r0, #0x870
	add r4, r0, #0x2000
	mov r0, #0x48
	mla r6, r1, r0, r4
	ldrh r0, [r6, #0xa]
	tst r0, #1
	addeq sp, sp, #0x104
	popeq {r3, r4, r5, r6, pc}
	add r5, sp, #4
	ldr r4, _020384A0 ; =0x02099EE8
	str r5, [sp]
	mov r1, r2
	mov r2, r3
	ldr r0, [r4]
	ldr r3, [r6]
	bl FUN_0205e6c0
	ldr r0, [r4]
	ldr r1, [r6, #4]
	mov r2, r5
	mov r3, #1
	bl FUN_0205f790
	ldrh r0, [r6, #0xa]
	orr r0, r0, #0x10
	strh r0, [r6, #0xa]
	add sp, sp, #0x104
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_020384A0: .word 0x02099EE8
	arm_func_end FUN_02038430

	arm_func_start FUN_020384a4
FUN_020384a4: ; 0x020384A4
	push {r4, r5, r6, lr}
	sub sp, sp, #0x100
	add r0, r0, #0x870
	add r3, r0, #0x2000
	mov r0, #0x48
	mla r6, r1, r0, r3
	ldrh r0, [r6, #0xa]
	tst r0, #1
	addeq sp, sp, #0x100
	popeq {r4, r5, r6, pc}
	add r5, sp, #0
	ldr r1, _02038514 ; =0x0208FE18
	mov r0, r5
	bl FUN_02015184
	ldr r4, _02038518 ; =0x02099EE8
	ldr r1, [r6, #4]
	ldr r0, [r4]
	mov r2, r5
	mov r3, #0
	bl FUN_0205f664
	ldr r0, [r4]
	ldr r1, [r6, #4]
	bl FUN_0205f56c
	ldrh r0, [r6, #0xa]
	orr r0, r0, #0x10
	strh r0, [r6, #0xa]
	add sp, sp, #0x100
	pop {r4, r5, r6, pc}
	.align 2, 0_02038514: .word 0x0208FE18
_02038518: .word 0x02099EE8
	arm_func_end FUN_020384a4

	arm_func_start FUN_0203851c
FUN_0203851c: ; 0x0203851C
	push {r3, lr}
	add r0, r0, #0x870
	add r2, r0, #0x2000
	mov r0, #0x48
	mla r2, r1, r0, r2
	ldrh r0, [r2, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _02038550 ; =0x02099EE8
	ldr r1, [r2, #4]
	ldr r0, [r0]
	bl FUN_0205f56c
	pop {r3, pc}
	.align 2, 0_02038550: .word 0x02099EE8
	arm_func_end FUN_0203851c

	arm_func_start FUN_02038554
FUN_02038554: ; 0x02038554
	push {r3, r4, r5, lr}
	add r0, r0, #0x870
	add ip, r0, #0x2000
	mov r0, #0x48
	mla r4, r1, r0, ip
	ldrh r0, [r4, #0xa]
	mov r5, r3
	tst r0, #1
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, _020385BC ; =0x02099EE8
	ldr r1, [r4, #4]
	ldr r0, [r0]
	bl FUN_0205fc78
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	cmp r5, #1
	ldrheq r0, [r4, #0xa]
	orreq r0, r0, #4
	strheq r0, [r4, #0xa]
	ldrh r1, [r4, #0xa]
	mov r0, #1
	orr r1, r1, #8
	strh r1, [r4, #0xa]
	pop {r3, r4, r5, pc}
	.align 2, 0_020385BC: .word 0x02099EE8
	arm_func_end FUN_02038554

	arm_func_start FUN_020385c0
FUN_020385c0: ; 0x020385C0
	mov r2, #0x48
	mla r0, r1, r2, r0
	add r0, r0, #0x2800
	ldrh r0, [r0, #0x7a]
	tst r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_020385c0

	arm_func_start FUN_020385dc
FUN_020385dc: ; 0x020385DC
	add r0, r0, #0x870
	add r2, r0, #0x2000
	mov r0, #0x48
	mla r2, r1, r0, r2
	ldrh r0, [r2, #0xa]
	tst r0, #1
	ldrne r0, [r2, #4]
	moveq r0, #0
	bx lr
	arm_func_end FUN_020385dc

	arm_func_start FUN_02038600
FUN_02038600: ; 0x02038600
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r6, #0
	add r0, r0, #0x870
	mov sb, #0x48
	add r4, r0, #0x2000
	mov sl, r6
	ldr r8, _0203866C ; =0x02099EE8
	mov r7, sb
	b _02038660
	arm_func_end FUN_02038600
_02038624:
	mla r5, r6, r7, r4
	ldrh r0, [r5, #0xa]
	tst r0, #1
	beq _0203865C
	ldr r0, [r5, #0x28]
	cmp r0, #0
	bgt _0203865C
	ldr r0, [r8]
	ldr r1, [r5, #4]
	bl FUN_0205f5ec
	mov r0, r5
	mov r1, sl
	mov r2, sb
	bl MemWrite
_0203865C:
	add r6, r6, #1
_02038660:
	cmp r6, #0x20
	blt _02038624
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0203866C: .word 0x02099EE8

	arm_func_start FUN_02038670
FUN_02038670: ; 0x02038670
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x38
	mov r8, r0
	add r0, r8, #0x1000
	ldr r5, [r0, #0x3e0]
	ldr sb, _020388AC ; =0x02099EE8
	mov r6, #0
	b _0203889C
	arm_func_end FUN_02038670
_02038690:
	add r0, r8, #0x870
	add r1, r0, #0x2000
	mov r0, #0x48
	mla r4, r6, r0, r1
	ldrh r0, [r4, #0xa]
	tst r0, #1
	beq _02038898
	tst r0, #0x10
	beq _020386D4
	ldr r0, [sb]
	ldr r1, [r4, #4]
	bl FUN_0205f990
	cmp r0, #0
	ldrheq r1, [r4, #0xa]
	ldreq r0, _020388B0 ; =0x0000FFEF
	andeq r0, r1, r0
	strheq r0, [r4, #0xa]
_020386D4:
	ldr r1, [r4, #4]
	mov r7, #0
	ldr r0, [sb]
	add r2, sp, #4
	str r7, [sp, #4]
	bl FUN_0205e754
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _02038704
	ldrb r0, [r0, #0xc]
	cmp r0, #3
	moveq r7, #1
_02038704:
	cmp r7, #0
	ldrhne r0, [r4, #0xa]
	orrne r0, r0, #2
	strhne r0, [r4, #0xa]
	ldrh r0, [r4, #0xa]
	tst r0, #8
	beq _02038748
	tst r0, #4
	bne _02038748
	ldr r0, [sb]
	ldr r1, [r4, #4]
	bl FUN_0205fd1c
	cmp r0, #0
	ldrhne r1, [r4, #0xa]
	ldrne r0, _020388B4 ; =0x0000FFF7
	andne r0, r1, r0
	strhne r0, [r4, #0xa]
_02038748:
	ldrh r0, [r4, #0xa]
	tst r0, #0x100
	beq _020387F0
	ldr r1, [sb]
	ldr r2, [r4, #4]
	add r0, sp, #0x14
	bl FUN_0205fb80
	ldr r2, [sp, #0x14]
	ldr r1, [sp, #0x18]
	ldr r0, [sp, #0x1c]
	str r2, [sp, #0x2c]
	str r1, [sp, #0x30]
	str r0, [sp, #0x34]
	mov r7, #0
	add sl, sp, #0x2c
	b _020387B4
_02038788:
	mov r0, sl
	mov r2, sl
	add r1, r4, #0x10
	bl FUN_02009734
	ldrh r0, [r4, #0xc]
	sub r0, r0, #1
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	strh r0, [r4, #0xc]
	beq _020387BC
	add r7, r7, #1
_020387B4:
	cmp r7, r5
	blo _02038788
_020387BC:
	ldr r0, [sp, #0x34]
	str r0, [sp]
	ldr r0, [sb]
	ldr r1, [r4, #4]
	ldr r2, [sp, #0x2c]
	ldr r3, [sp, #0x30]
	bl FUN_0205fa48
	ldrh r0, [r4, #0xc]
	cmp r0, #0
	ldrheq r1, [r4, #0xa]
	ldreq r0, _020388B8 ; =0x0000FEFF
	andeq r0, r1, r0
	strheq r0, [r4, #0xa]
_020387F0:
	ldrh r0, [r4, #0xa]
	tst r0, #0x200
	beq _02038898
	ldr r1, [sb]
	ldr r2, [r4, #4]
	add r0, sp, #8
	bl FUN_0205fbfc
	ldr r2, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	str r2, [sp, #0x20]
	str r1, [sp, #0x24]
	str r0, [sp, #0x28]
	mov r7, #0
	add sl, sp, #0x20
	b _0203885C
_02038830:
	mov r0, sl
	mov r2, sl
	add r1, r4, #0x1c
	bl FUN_02009734
	ldrh r0, [r4, #0xe]
	sub r0, r0, #1
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	strh r0, [r4, #0xe]
	beq _02038864
	add r7, r7, #1
_0203885C:
	cmp r7, r5
	blo _02038830
_02038864:
	ldr r0, [sp, #0x28]
	str r0, [sp]
	ldr r0, [sb]
	ldr r1, [r4, #4]
	ldr r2, [sp, #0x20]
	ldr r3, [sp, #0x24]
	bl FUN_0205fab4
	ldrh r0, [r4, #0xe]
	cmp r0, #0
	ldrheq r1, [r4, #0xa]
	ldreq r0, _020388BC ; =0x0000FDFF
	andeq r0, r1, r0
	strheq r0, [r4, #0xa]
_02038898:
	add r6, r6, #1
_0203889C:
	cmp r6, #0x20
	blt _02038690
	add sp, sp, #0x38
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020388AC: .word 0x02099EE8
_020388B0: .word 0x0000FFEF
_020388B4: .word 0x0000FFF7
_020388B8: .word 0x0000FEFF
_020388BC: .word 0x0000FDFF

	arm_func_start FUN_020388c0
FUN_020388c0: ; 0x020388C0
	push {r3, lr}
	add r0, r0, #0x870
	add r3, r0, #0x2000
	mov r0, #0x48
	mla r3, r1, r0, r3
	ldrh r0, [r3, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, _020388F4 ; =0x02099EE8
	ldr r1, [r3, #4]
	ldr r0, [r0]
	bl FUN_0205fe64
	pop {r3, pc}
	.align 2, 0_020388F4: .word 0x02099EE8
	arm_func_end FUN_020388c0

	arm_func_start FUN_020388f8
FUN_020388f8: ; 0x020388F8
	add r0, r0, #0x870
	add r2, r0, #0x2000
	mov r0, #0x48
	mla r2, r1, r0, r2
	ldrh r1, [r2, #0xa]
	tst r1, #1
	ldrne r0, [r2, #0x2c]
	subeq r0, r0, #0x49
	bx lr
	arm_func_end FUN_020388f8

	arm_func_start FUN_0203891c
FUN_0203891c: ; 0x0203891C
	push {r3, r4, r5, lr}
	add r0, r0, #0x870
	add r3, r0, #0x2000
	mov r0, #0x48
	mla r5, r1, r0, r3
	ldrh r0, [r5, #0xa]
	tst r0, #1
	popeq {r3, r4, r5, pc}
	cmp r2, #4
	arm_func_end FUN_0203891c

	arm_func_start switchD
switchD: ; 0x02038940
	addls pc, pc, r2, lsl #2
	arm_func_end switchD

	arm_func_start caseD_5
caseD_5: ; 0x02038944
	pop {r3, r4, r5, pc}
	arm_func_end caseD_5
_02038948: ; jump table
	pop {r3, r4, r5, pc} ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0203894C
	pop {r3, r4, r5, pc}
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02038950
	pop {r3, r4, r5, pc}
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02038954
	pop {r3, r4, r5, pc}
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02038958
	b LAB_0203895c
	arm_func_end caseD_4
LAB_0203895c:
	ldr r4, _02038980 ; =0x02099EE8
	ldr r1, [r5, #4]
	ldr r0, [r4]
	bl FUN_0205f02c
	ldr r0, [r4]
	ldr r1, [r5, #4]
	mov r2, #1
	bl FUN_0205fe34
	pop {r3, r4, r5, pc}
	.align 2, 0_02038980: .word 0x02099EE8

	arm_func_start FUN_02038984
FUN_02038984: ; 0x02038984
	push {r3, lr}
	add r0, r0, #0x870
	add ip, r0, #0x2000
	mov r0, #0x48
	mla ip, r1, r0, ip
	ldrh r0, [ip, #0xa]
	tst r0, #1
	popeq {r3, pc}
	ldr r0, [sp, #0xc]
	cmp r0, #0
	popne {r3, pc}
	ldr r1, [sp, #8]
	ldr r0, _020389CC ; =0x02099EE8
	str r1, [sp]
	ldr r0, [r0]
	ldr r1, [ip, #4]
	bl FUN_0205faf8
	pop {r3, pc}
	.align 2, 0_020389CC: .word 0x02099EE8
	arm_func_end FUN_02038984

	arm_func_start FUN_020389d0
FUN_020389d0: ; 0x020389D0
	push {r0, r1, r2, r3}
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	orr r0, r0, #1
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	lsl r0, r1, #0x10
	str r2, [sp]
	lsr r0, r0, #0x10
	str r0, [sp, #4]
	ldr r2, [sp, #0x28]
	ldr r0, _02038A2C ; =0x02099F24
	str r2, [sp, #8]
	add r1, sp, #0x14
	ldr r0, [r0]
	ldm r1, {r1, r2, r3}
	bl FUN_020F794C
	add sp, sp, #0xc
	ldm sp!, {lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02038A2C: .word 0x02099F24
	arm_func_end FUN_020389d0

	arm_func_start FUN_02038a30
FUN_02038a30: ; 0x02038A30
	push {r0, r1, r2, r3}
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr r1, [sp, #0x20]
	ldr r2, [sp, #0x24]
	orr r1, r1, #2
	lsl r1, r1, #0x10
	add r0, r0, #0x4000
	mov r3, #0
	strb r3, [r0, #0x254]
	lsr r0, r1, #0x10
	lsl r2, r2, #0x10
	str r0, [sp]
	lsr r0, r2, #0x10
	str r0, [sp, #4]
	ldr r2, [sp, #0x28]
	ldr r0, _02038A98 ; =0x02099F24
	str r2, [sp, #8]
	add r1, sp, #0x14
	ldr r0, [r0]
	ldm r1, {r1, r2, r3}
	bl FUN_020F79EC
	add sp, sp, #0xc
	ldm sp!, {lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02038A98: .word 0x02099F24
	arm_func_end FUN_02038a30

	arm_func_start FUN_02038a9c
FUN_02038a9c: ; 0x02038A9C
	push {r0, r1, r2, r3}
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	orr r0, r0, #4
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	lsl r0, r1, #0x10
	str r2, [sp]
	lsr r0, r0, #0x10
	str r0, [sp, #4]
	ldr r2, [sp, #0x28]
	ldr r0, _02038AF8 ; =0x02099F24
	str r2, [sp, #8]
	add r1, sp, #0x14
	ldr r0, [r0]
	ldm r1, {r1, r2, r3}
	bl FUN_020F7A8C
	add sp, sp, #0xc
	ldm sp!, {lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02038AF8: .word 0x02099F24
	arm_func_end FUN_02038a9c

	arm_func_start FUN_02038afc
FUN_02038afc: ; 0x02038AFC
	push {r3, lr}
	ldr ip, [sp, #8]
	ldr r0, _02038B2C ; =0x02099F24
	str ip, [sp]
	orr r2, r2, #4
	lsl r2, r2, #0x10
	lsl r3, r3, #0x10
	ldr r0, [r0]
	lsr r2, r2, #0x10
	lsr r3, r3, #0x10
	bl FUN_020F7B50
	pop {r3, pc}
	.align 2, 0_02038B2C: .word 0x02099F24
	arm_func_end FUN_02038afc

	arm_func_start FUN_02038b30
FUN_02038b30: ; 0x02038B30
	push {r4, lr}
	cmp r1, #0
	mov r1, r2
	mov r4, r0
	mov r2, r3
	beq _02038B5C
	bl FUN_02035c50
	add r1, r4, #0x4000
	str r0, [r1, #0x250]
	mov ip, #2
	b _02038B6C
	arm_func_end FUN_02038b30
_02038B5C:
	bl FUN_0214AABC
	add r1, r4, #0x4000
	str r0, [r1, #0x250]
	mov ip, #1
_02038B6C:
	add r0, r4, #0x4000
	ldr r1, [r0, #0x250]
	cmp r1, #0
	popeq {r4, pc}
	ldr r3, [sp, #0xc]
	ldr r2, [sp, #8]
	ldr r1, [sp, #0x10]
	strb ip, [r0, #0x254]
	strb r3, [r0, #0x256]
	strb r2, [r0, #0x255]
	str r1, [r0, #0x258]
	pop {r4, pc}

	arm_func_start FUN_02038b9c
FUN_02038b9c: ; 0x02038B9C
	add r0, r0, #0x4000
	mov r1, #0
	strb r1, [r0, #0x254]
	bx lr
	arm_func_end FUN_02038b9c

	arm_func_start FUN_02038bac
FUN_02038bac: ; 0x02038BAC
	push {r4, r5, lr}
	sub sp, sp, #0x24
	ldr r1, _02038CD0 ; =0x02099F24
	mov r5, r0
	ldr r0, [r1]
	bl FUN_020F7C24
	mov r4, r0
	add r0, r5, #0x4200
	ldrsb r0, [r0, #0x54]
	ldr r3, [r4]
	ldr r2, [r4, #4]
	ldr r1, [r4, #8]
	str r3, [sp, #0x18]
	str r2, [sp, #0x1c]
	str r1, [sp, #0x20]
	cmp r0, #0
	addeq sp, sp, #0x24
	popeq {r4, r5, pc}
	cmp r0, #1
	beq _02038C08
	cmp r0, #2
	beq _02038C38
	b _02038C6C
	arm_func_end FUN_02038bac
_02038C08:
	add r0, r5, #0x4000
	ldr r1, [r0, #0x250]
	ldr r0, _02038CD4 ; =0x02099ED8
	ldr r1, [r1, #4]
	ldr r0, [r0]
	bl FUN_020552cc
	cmp r0, #0
	beq _02038C6C
	ldr r2, [r0, #0x84]
	ldr r1, [r0, #0x88]
	ldr r0, [r0, #0x8c]
	b _02038C60
_02038C38:
	add r0, r5, #0x4000
	ldr r1, [r0, #0x250]
	ldr r0, _02038CD8 ; =0x02099EEC
	ldr r2, [r1, #4]
	ldr r1, [r0]
	add r0, sp, #0xc
	bl FUN_0205afb4
	ldr r2, [sp, #0xc]
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x14]
_02038C60:
	str r2, [sp, #0x18]
	str r1, [sp, #0x1c]
	str r0, [sp, #0x20]
_02038C6C:
	ldr r1, [r4]
	ldr r0, [sp, #0x18]
	cmp r1, r0
	ldreq r1, [r4, #4]
	ldreq r0, [sp, #0x1c]
	cmpeq r1, r0
	ldreq r1, [r4, #8]
	ldreq r0, [sp, #0x20]
	cmpeq r1, r0
	addeq sp, sp, #0x24
	popeq {r4, r5, pc}
	add r0, r5, #0x4200
	ldrsb r2, [r0, #0x55]
	add r4, r5, #0x4000
	add r1, sp, #0x18
	str r2, [sp]
	ldrsb ip, [r0, #0x56]
	mov r0, r5
	ldm r1, {r1, r2, r3}
	str ip, [sp, #4]
	ldr r4, [r4, #0x258]
	str r4, [sp, #8]
	bl FUN_02038a30
	add sp, sp, #0x24
	pop {r4, r5, pc}
	.align 2, 0_02038CD0: .word 0x02099F24
_02038CD4: .word 0x02099ED8
_02038CD8: .word 0x02099EEC

	arm_func_start FUN_02038cdc
FUN_02038cdc: ; 0x02038CDC
	ldr r0, _02038CF0 ; =0x02099EB8
	ldr ip, _02038CF4 ; =FUN_020529d8
	ldr r0, [r0]
	mov r2, #1
	bx ip
	.align 2, 0_02038CF0: .word 0x02099EB8
_02038CF4: .word FUN_020529d8
	arm_func_end FUN_02038cdc

	arm_func_start FUN_02038cf8
FUN_02038cf8: ; 0x02038CF8
	push {r4, lr}
	ldr r4, _02038D24 ; =0x02099EB8
	ldr r0, [r4]
	bl FUN_02052b20
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	ldr r0, [r4]
	bl FUN_02052c70
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_02038D24: .word 0x02099EB8
	arm_func_end FUN_02038cf8

	arm_func_start FUN_02038d28
FUN_02038d28: ; 0x02038D28
	push {r3, r4, r5, lr}
	ldr r4, _02038D54 ; =0x02099EB8
	mov r5, r1
	ldr r0, [r4]
	bl FUN_0205302c
	ldr r0, [r4]
	mov r1, r5
	bl FUN_02053080
	ldr r0, [r4]
	bl FUN_020530a0
	pop {r3, r4, r5, pc}
	.align 2, 0_02038D54: .word 0x02099EB8
	arm_func_end FUN_02038d28

	arm_func_start FUN_02038d58
FUN_02038d58: ; 0x02038D58
	ldr r0, _02038D68 ; =0x02099EB8
	ldr ip, _02038D6C ; =FUN_020530e0
	ldr r0, [r0]
	bx ip
	.align 2, 0_02038D68: .word 0x02099EB8
_02038D6C: .word FUN_020530e0
	arm_func_end FUN_02038d58

	arm_func_start FUN_02038d70
FUN_02038d70: ; 0x02038D70
	push {r4, r5, r6, r7, r8, lr}
	ldr r0, _02038DE8 ; =0x02099EB8
	mov r5, r1
	ldr r0, [r0]
	mov r4, r2
	adds r6, r0, #0x22c
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r7, #0
	mov r8, r7
	b _02038DD8
	arm_func_end FUN_02038d70
_02038D9C:
	ldr r1, [r4, r8, lsl #2]
	mov r0, r6
	bl FUN_020FB110
	mov r1, r0
	mov r0, r6
	bl FUN_020FB050
	cmp r0, #0
	beq _02038DD4
	ldr r3, [r0, #0x10]
	ldr r2, [r0, #0xc]
	ldr r1, [r0, #0x14]
	sub r0, r3, r2
	bl FUN_0200958c
	add r7, r7, r0, asr #12
_02038DD4:
	add r8, r8, #1
_02038DD8:
	cmp r8, r5
	blt _02038D9C
	mov r0, r7
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02038DE8: .word 0x02099EB8

	arm_func_start FUN_02038dec
FUN_02038dec: ; 0x02038DEC
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x18
	ldr r1, _02038F38 ; =0x0208FC20
	ldr r4, _02038F3C ; =0x02099F38
	mov r6, r0
	mov r5, #0
	ldr r2, [r1]
	ldr r0, [r4]
	mov r8, #5
	str r5, [sp]
	str r5, [sp, #4]
	str r5, [sp, #8]
	str r5, [sp, #0xc]
	mov r1, r8
	mov r3, r5
	str r5, [sp, #0x10]
	bl FUN_02058800
	mov r1, r0
	add r0, r6, #0x1000
	str r1, [r0, #0x350]
	ldr r0, [r4]
	mov r2, r5
	mov r3, r5
	bl FUN_02059038
	mov r7, #1
	ldr r0, [r4]
	mov r1, r8
	mov r2, r7
	bl FUN_02112724
	mov r1, r0
	add r0, r6, #0x1000
	ldr r2, [r0, #0x350]
	str r1, [r0, #0x35c]
	ldr r0, [r4]
	and r2, r2, #0xff
	bl FUN_02112950
	add r1, r6, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x35c]
	mov r2, #0x64
	bl FUN_02112B98
	add r1, r6, #0x1000
	mov r3, r7
	mov r7, #2
	ldr r0, [r4]
	ldr r1, [r1, #0x35c]
	mov r2, r7
	bl FUN_0211329C
	add r1, r6, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x35c]
	mov r2, r7
	bl FUN_02114370
	add r1, r6, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x35c]
	mov r2, #0x30
	mov r3, #0x60
	bl FUN_02114248
	add r7, r6, #0x1000
	mov r8, r5
	b _02038F04
	arm_func_end FUN_02038dec
_02038EE4:
	str r8, [sp]
	lsl r3, r5, #0x15
	ldr r0, [r4]
	ldr r1, [r7, #0x35c]
	add r2, r5, #1
	asr r3, r3, #0x10
	bl FUN_02113B78
	add r5, r5, #1
_02038F04:
	cmp r5, #5
	blt _02038EE4
	mov r1, #0
	ldr r0, _02038F3C ; =0x02099F38
	str r1, [sp]
	add r1, r6, #0x1000
	ldr r0, [r0]
	ldr r1, [r1, #0x35c]
	mov r2, #3
	mov r3, #0xb
	bl FUN_0211401C
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02038F38: .word 0x0208FC20
_02038F3C: .word 0x02099F38

	arm_func_start FUN_02038f40
FUN_02038f40: ; 0x02038F40
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r7, r0
	ldr r5, _020390A0 ; =0x02099F38
	add r1, r7, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x35c]
	mov r2, #2
	mov r3, #1
	bl FUN_0211329C
	mov sl, #0
	add r4, r7, #0x1000
	mov r6, sl
	b _02038F94
	arm_func_end FUN_02038f40
_02038F74:
	str r6, [sp]
	lsl r3, sl, #0x15
	ldr r0, [r5]
	ldr r1, [r4, #0x35c]
	add r2, sl, #1
	asr r3, r3, #0x10
	bl FUN_02113B78
	add sl, sl, #1
_02038F94:
	cmp sl, #5
	blt _02038F74
	mov sl, #0
	add r4, r7, #0x1000
	mov r8, sl
	ldr r7, _020390A4 ; =0x02099EF0
	ldr r6, _020390A0 ; =0x02099F38
	ldr r5, _020390A8 ; =0x66666667
	mov fp, #0xa
	b _02039094
_02038FBC:
	ldr r0, [r7]
	bl FUN_02144F4C
	cmp r0, #0
	ldr r0, [r7]
	mov r1, sl
	bne _02038FDC
	bl FUN_02143C28
	b _02038FE0
_02038FDC:
	bl FUN_02143C34
_02038FE0:
	mov sb, r0
	cmp sb, #0x63
	movgt sb, #0x63
	smull r1, r3, r5, sb
	str r8, [sp]
	lsr r0, sb, #0x1f
	add r3, r0, r3, asr #2
	add r2, sl, sl, lsl #1
	ldr r0, [r6]
	ldr r1, [r4, #0x35c]
	add r2, r2, #1
	add r3, r3, #1
	bl FUN_0211401C
	smull ip, r3, r5, sb
	str r8, [sp]
	lsr ip, sb, #0x1f
	add r3, ip, r3, asr #2
	smull r3, ip, fp, r3
	add r2, sl, sl, lsl #1
	sub r3, sb, r3
	ldr r0, [r6]
	ldr r1, [r4, #0x35c]
	add r2, r2, #2
	add r3, r3, #1
	bl FUN_0211401C
	cmp sb, #0xa
	bge _02039090
	add r2, sl, sl, lsl #1
	ldr r0, [r6]
	ldr r1, [r4, #0x35c]
	mov r3, #2
	add r2, r2, #1
	bl FUN_02113F7C
	mov r3, #0x60
	str r8, [sp]
	mul r3, sl, r3
	add r3, r3, #0x10
	add r2, sl, sl, lsl #1
	lsl r3, r3, #0x10
	ldr r0, [r6]
	ldr r1, [r4, #0x35c]
	add r2, r2, #2
	asr r3, r3, #0x10
	bl FUN_02113B78
_02039090:
	add sl, sl, #1
_02039094:
	cmp sl, #2
	blt _02038FBC
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020390A0: .word 0x02099F38
_020390A4: .word 0x02099EF0
_020390A8: .word 0x66666667

	arm_func_start FUN_020390ac
FUN_020390ac: ; 0x020390AC
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x1000
	ldr r1, [r0, #0x35c]
	cmp r1, #0
	popeq {r4, pc}
	ldr r0, _020390E4 ; =0x02099F38
	mov r2, #2
	ldr r0, [r0]
	mov r3, #1
	bl FUN_021142FC
	mov r0, r4
	bl FUN_02038f40
	pop {r4, pc}
	.align 2, 0_020390E4: .word 0x02099F38
	arm_func_end FUN_020390ac

	arm_func_start FUN_020390e8
FUN_020390e8: ; 0x020390E8
	push {r4, lr}
	ldr r1, _02039120 ; =0x02099EF0
	mov r4, r0
	ldr r0, [r1]
	cmp r0, #0
	beq _02039104
	bl FUN_02143C40
	arm_func_end FUN_020390e8
_02039104:
	add r0, r4, #0x1000
	ldr r0, [r0, #0x35c]
	cmp r0, #0
	popeq {r4, pc}
	mov r0, r4
	bl FUN_02038f40
	pop {r4, pc}
	.align 2, 0_02039120: .word 0x02099EF0

	arm_func_start FUN_02039124
FUN_02039124: ; 0x02039124
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x35c]
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	ldr r4, _020391A4 ; =0x02099F38
	mov r2, #2
	ldr r0, [r4]
	bl FUN_02114370
	add r0, r5, #0x1000
	ldr r1, [r0, #0x350]
	ldr r0, [r4]
	bl FUN_020591e8
	add r0, r5, #0x1000
	ldr r1, [r0, #0x350]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x350]
	ldr r0, [r4]
	bl FUN_02058ee0
	ldr r0, [r4]
	add r1, r5, #0x1000
	ldr r1, [r1, #0x35c]
	bl FUN_021128C4
	add r0, r5, #0x348
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x1c
	bl MemWrite
	pop {r3, r4, r5, pc}
	.align 2, 0_020391A4: .word 0x02099F38
	arm_func_end FUN_02039124

	arm_func_start FUN_020391a8
FUN_020391a8: ; 0x020391A8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x90
	mov sl, r0
	ldr r0, _0203956C ; =0x0209BA20
	mov r1, #0
	bl FUN_0207249c
	ldr r1, _02039570 ; =0x020A0640
	mov r4, r0
	ldrb r0, [r1, #0x1a]
	cmp r0, #0
	bne _020391E0
	bl FUN_020F068C
	cmp r0, #0
	beq _02039200
	arm_func_end FUN_020391a8
_020391E0:
	bl FUN_020F081C
	cmp r0, #0
	add r0, sp, #0x10
	bne _020391F8
	ldr r1, _02039574 ; =0x0208FE24
	b _02039214
_020391F8:
	ldr r1, _02039578 ; =0x0208FE38
	b _02039214
_02039200:
	ldrh r2, [r4, #0x2a]
	ldr r1, _0203957C ; =0x0208FE4C
	add r0, sp, #0x10
	cmp r2, #0
	ldrheq r2, [r4, #0x20]
_02039214:
	bl FUN_02015184
	ldr r0, _0203956C ; =0x0209BA20
	mov r1, #1
	bl FUN_0207249c
	ldr r1, _02039570 ; =0x020A0640
	mov r4, r0
	ldrb r0, [r1, #0x1a]
	cmp r0, #0
	bne _02039244
	bl FUN_020F068C
	cmp r0, #0
	beq _02039264
_02039244:
	bl FUN_020F081C
	cmp r0, #0
	add r0, sp, #0x50
	bne _0203925C
	ldr r1, _02039580 ; =0x0208FE5C
	b _02039278
_0203925C:
	ldr r1, _02039584 ; =0x0208FE70
	b _02039278
_02039264:
	ldrh r2, [r4, #0x2a]
	ldr r1, _02039588 ; =0x0208FE84
	add r0, sp, #0x50
	cmp r2, #0
	ldrheq r2, [r4, #0x20]
_02039278:
	bl FUN_02015184
	ldr r4, _0203958C ; =0x0209A200
	ldr r5, _02039590 ; =0x02099F38
	ldr r2, [r4, #0x18]
	ldr r0, [r5]
	mov sb, #0
	str sb, [sp]
	mov r6, #5
	str sb, [sp, #4]
	add r3, sp, #0x10
	mov r1, r6
	str sb, [sp, #8]
	bl FUN_02058684
	add r1, sl, #0x1000
	str r0, [r1, #0x334]
	ldr r2, [r4, #0x18]
	ldr r0, [r5]
	add r3, sp, #0x50
	str sb, [sp]
	str sb, [sp, #4]
	mov r1, r6
	str sb, [sp, #8]
	bl FUN_02058684
	add r1, sl, #0x1000
	str r0, [r1, #0x338]
	ldr r2, [r4]
	ldr r0, [r5]
	ldr r3, _02039594 ; =0x0208FE94
	str sb, [sp]
	str sb, [sp, #4]
	mov r1, r6
	str sb, [sp, #8]
	bl FUN_02058684
	add r1, sl, #0x1000
	str r0, [r1, #0x33c]
	ldr r1, [r1, #0x334]
	ldr r0, [r5]
	mov r2, sb
	mov r3, sb
	bl FUN_02059038
	add r0, sl, #0x1000
	ldr r1, [r0, #0x338]
	ldr r0, [r5]
	mov r2, sb
	mov r3, sb
	bl FUN_02059038
	add r0, sl, #0x1000
	ldr r1, [r0, #0x33c]
	ldr r0, [r5]
	mov r2, sb
	mov r3, sb
	bl FUN_02059038
	mvn fp, #7
	sub r0, fp, #0x10
	str r0, [sp, #0xc]
	add r4, sl, #0x1000
	mov r8, #1
	mov r7, sb
	mov r6, #0xe
	b _02039544
_02039368:
	ldr r0, [r5]
	mov r1, #4
	mov r2, r8
	bl FUN_02112724
	mov r1, r0
	add r0, sl, sb, lsl #2
	add r0, r0, #0x1000
	str r1, [r0, #0x340]
	ldr r2, [r4, #0x33c]
	ldr r0, [r5]
	and r2, r2, #0xff
	bl FUN_02112950
	add r1, sl, sb, lsl #2
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, r7
	mov r3, r7
	bl FUN_0211346C
	add r1, sl, sb, lsl #2
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, #0x63
	bl FUN_02112B98
	add r1, sl, sb, lsl #2
	str r6, [sp]
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, #2
	mov r3, #9
	bl FUN_02113B78
	add r1, sl, sb, lsl #2
	str r6, [sp]
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, #3
	mov r3, fp
	bl FUN_02113B78
	add r1, sl, sb, lsl #2
	str r6, [sp]
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	ldr r3, [sp, #0xc]
	mov r2, #4
	bl FUN_02113B78
	add r1, sl, sb, lsl #2
	add r2, r1, #0x1000
	ldr r3, [r2, #0x334]
	ldr r1, [r2, #0x340]
	ldr r0, [r5]
	mov r2, r8
	and r3, r3, #0xff
	bl FUN_021137DC
	add r1, sl, sb, lsl #2
	str r7, [sp]
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, r8
	mov r3, r7
	bl FUN_0211401C
	add r1, sl, sb, lsl #2
	str r7, [sp]
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, r8
	mov r3, r7
	bl FUN_02113B78
	add r1, sl, sb, lsl #2
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, r8
	mov r3, #0x64
	bl FUN_021139BC
	str r7, [sp]
	add r1, sl, sb, lsl #2
	tst sb, #1
	ldr r0, [r5]
	add r1, r1, #0x1000
	bne _020394D0
	ldr r1, [r1, #0x340]
	mov r2, r8
	mov r3, #0x28
	b _020394DC
_020394D0:
	ldr r1, [r1, #0x340]
	mov r2, r8
	mov r3, #0x3c
_020394DC:
	bl FUN_02114150
	add r1, sl, sb, lsl #2
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, #2
	mov r3, #1
	bl FUN_0211329C
	add r1, sl, sb, lsl #2
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x340]
	mov r2, #2
	bl FUN_02114370
	add r1, sl, sb, lsl #2
	add r1, r1, #0x1000
	tst sb, #1
	ldr r0, [r5]
	mov r3, #0x80
	ldr r1, [r1, #0x340]
	bne _02039538
	mov r2, #0x20
	b _0203953C
_02039538:
	mov r2, #0xe0
_0203953C:
	bl FUN_02114248
	add sb, sb, #1
_02039544:
	cmp sb, #2
	blt _02039368
	add r0, sl, #0x1000
	ldr r1, [r0, #0x32c]
	mov r2, #0x14
	add r1, r1, #1
	str r2, [r0, #0x330]
	str r1, [r0, #0x32c]
	add sp, sp, #0x90
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203956C: .word 0x0209BA20
_02039570: .word 0x020A0640
_02039574: .word 0x0208FE24
_02039578: .word 0x0208FE38
_0203957C: .word 0x0208FE4C
_02039580: .word 0x0208FE5C
_02039584: .word 0x0208FE70
_02039588: .word 0x0208FE84
_0203958C: .word 0x0209A200
_02039590: .word 0x02099F38
_02039594: .word 0x0208FE94

	arm_func_start FUN_02039598
FUN_02039598: ; 0x02039598
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	ldr r2, _02039744 ; =0x02099EF0
	mov r3, #0
	str r0, [sp, #4]
	ldr r0, [r2]
	str r1, [sp, #8]
	str r3, [sp, #0x10]
	str r3, [sp, #0xc]
	bl FUN_0213246C
	movs r4, r0
	beq _02039604
	ldrsb r0, [r4, #4]
	bl FUN_020F07F4
	cmp r0, #0
	mov r0, r4
	bne _020395F0
	bl FUN_02132718
	str r0, [sp, #0xc]
	mov r0, r4
	bl FUN_02132730
	b _02039600
	arm_func_end FUN_02039598
_020395F0:
	bl FUN_02132730
	str r0, [sp, #0xc]
	mov r0, r4
	bl FUN_02132718
_02039600:
	str r0, [sp, #0x10]
_02039604:
	mov r7, #0
	b _020396F0
_0203960C:
	ldr r0, [sp, #4]
	ldr sl, _02039748 ; =0x02099F38
	add r0, r0, r7, lsl #2
	add r1, r0, #0x1000
	ldr r0, [sl]
	ldr r1, [r1, #0x340]
	mov r2, #2
	mov r3, #1
	bl FUN_021142FC
	ldr r0, [sp, #4]
	mov r6, #0
	add r0, r0, r7, lsl #2
	add sb, r0, #0x1000
	add r5, sp, #0xc
	mov r4, r6
	ldr r8, _0203974C ; =0x66666667
	mov fp, #0xa
	b _020396B8
_02039654:
	ldr r0, [r5, r7, lsl #2]
	cmp r0, #0
	bne _02039674
	ldr r0, [sl]
	ldr r1, [sb, #0x340]
	mov r3, #2
	add r2, r6, #2
	bl FUN_02113F7C
_02039674:
	ldr ip, [r5, r7, lsl #2]
	str r4, [sp]
	lsr r0, ip, #0x1f
	smull r1, r3, r8, ip
	add r3, r0, r3, asr #2
	ldr r0, [sl]
	ldr r1, [sb, #0x340]
	add r2, r6, #2
	smull r3, lr, fp, r3
	sub r3, ip, r3
	bl FUN_0211401C
	ldr r1, [r5, r7, lsl #2]
	add r6, r6, #1
	smull r0, r2, r8, r1
	lsr r0, r1, #0x1f
	add r2, r0, r2, asr #2
	str r2, [r5, r7, lsl #2]
_020396B8:
	cmp r6, #3
	blt _02039654
	ldr r0, [sp, #4]
	mov r3, #1
	add r1, r0, r7, lsl #2
	ldr r0, _02039748 ; =0x02099F38
	str r3, [sp]
	add r1, r1, #0x1000
	mov r2, #2
	ldr r0, [r0]
	ldr r1, [r1, #0x340]
	mov r3, r2
	bl FUN_02113EC0
	add r7, r7, #1
_020396F0:
	cmp r7, #2
	blt _0203960C
	ldr r0, [sp, #8]
	cmp r0, #0
	beq _02039728
	rsb r1, r0, #2
	ldr r0, [sp, #4]
	mov r2, #2
	add r1, r0, r1, lsl #2
	ldr r0, _02039748 ; =0x02099F38
	add r1, r1, #0x1000
	ldr r0, [r0]
	ldr r1, [r1, #0x340]
	bl FUN_02114370
_02039728:
	ldr r0, [sp, #4]
	add r0, r0, #0x1000
	ldr r1, [r0, #0x32c]
	add r1, r1, #1
	str r1, [r0, #0x32c]
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02039744: .word 0x02099EF0
_02039748: .word 0x02099F38
_0203974C: .word 0x66666667

	arm_func_start FUN_02039750
FUN_02039750: ; 0x02039750
	add r0, r0, #0x1000
	ldr r1, [r0, #0x32c]
	add r1, r1, #1
	str r1, [r0, #0x32c]
	bx lr
	arm_func_end FUN_02039750

	arm_func_start FUN_02039764
FUN_02039764: ; 0x02039764
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, #0
	mov r5, #2
	ldr r4, _020397B0 ; =0x02099F38
	b _02039798
	arm_func_end FUN_02039764
_0203977C:
	add r0, r7, r6, lsl #2
	add r1, r0, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x340]
	mov r2, r5
	bl FUN_02114370
	add r6, r6, #1
_02039798:
	cmp r6, #2
	blt _0203977C
	add r0, r7, #0x1000
	mov r1, #1
	str r1, [r0, #0x32c]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020397B0: .word 0x02099F38

	arm_func_start FUN_020397b4
FUN_020397b4: ; 0x020397B4
	push {r4, r5, r6, lr}
	mov r5, r0
	add r0, r5, #0x1000
	ldr r0, [r0, #0x32c]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r4, #0
	ldr r6, _02039864 ; =0x02099F38
	b _02039818
	arm_func_end FUN_020397b4
_020397D8:
	add r0, r5, r4, lsl #2
	add r0, r0, #0x1000
	ldr r1, [r0, #0x334]
	ldr r0, [r6]
	bl FUN_020591e8
	add r0, r5, r4, lsl #2
	add r0, r0, #0x1000
	ldr r1, [r0, #0x334]
	ldr r0, [r6]
	bl FUN_02058ee0
	add r0, r5, r4, lsl #2
	add r0, r0, #0x1000
	ldr r1, [r0, #0x334]
	ldr r0, [r6]
	bl FUN_02058ee0
	add r4, r4, #1
_02039818:
	cmp r4, #3
	blt _020397D8
	mov r4, #0
	ldr r6, _02039864 ; =0x02099F38
	b _02039844
_0203982C:
	add r0, r5, r4, lsl #2
	add r1, r0, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x340]
	bl FUN_021128C4
	add r4, r4, #1
_02039844:
	cmp r4, #2
	blt _0203982C
	add r0, r5, #0x32c
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x1c
	bl MemWrite
	pop {r4, r5, r6, pc}
	.align 2, 0_02039864: .word 0x02099F38

	arm_func_start FUN_02039868
FUN_02039868: ; 0x02039868
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	str r0, [sp, #4]
	add r0, r0, #0x1000
	ldr r3, [r0, #0x32c]
	mov r4, #1
	cmp r3, #4
	mov fp, #0
	arm_func_end FUN_02039868

	arm_func_start switchD
switchD: ; 0x02039888
	addls pc, pc, r3, lsl #2
	b _02039B58
	arm_func_end switchD
_02039890: ; jump table
	b _02039B58 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02039894
	b _02039B58
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02039898
	b _020398A4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203989C
	b _020398C8
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020398A0
	b _020399A4
	arm_func_end caseD_4
_020398A4:
	ldr r2, [r0, #0x330]
	ldr r1, [r0, #0x3e0]
	add sp, sp, #0x1c
	sub r1, r2, r1
	str r1, [r0, #0x330]
	cmp r1, #0
	addle r1, r3, #1
	strle r1, [r0, #0x32c]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020398C8:
	mov sb, fp
	b _02039994
_020398D0:
	ldr r0, _02039B60 ; =0x000003E7
	bl FUN_020EF928
	ldr r1, [sp, #4]
	ldr r6, _02039B64 ; =0x02099F38
	add r1, r1, sb, lsl #2
	add r1, r1, #0x1000
	add r0, r0, #1
	add r7, sp, #0x14
	str r0, [r7, sb, lsl #2]
	ldr r1, [r1, #0x340]
	ldr r0, [r6]
	mov r2, #2
	mov r3, #1
	bl FUN_0211329C
	ldr r0, [sp, #4]
	mov r8, #0
	add r0, r0, sb, lsl #2
	add r5, r0, #0x1000
	ldr r4, _02039B68 ; =0x66666667
	b _02039988
_02039920:
	ldr r0, [r7, sb, lsl #2]
	cmp r0, #0
	bne _02039940
	ldr r0, [r6]
	ldr r1, [r5, #0x340]
	add r2, r8, #2
	mov r3, #2
	bl FUN_02113F7C
_02039940:
	ldr ip, [r7, sb, lsl #2]
	str fp, [sp]
	smull lr, r3, r4, ip
	lsr sl, ip, #0x1f
	add r3, sl, r3, asr #2
	mov sl, #0xa
	smull r3, lr, sl, r3
	ldr r0, [r6]
	ldr r1, [r5, #0x340]
	add r2, r8, #2
	sub r3, ip, r3
	bl FUN_0211401C
	ldr r1, [r7, sb, lsl #2]
	add r8, r8, #1
	smull r0, r2, r4, r1
	lsr r0, r1, #0x1f
	add r2, r0, r2, asr #2
	str r2, [r7, sb, lsl #2]
_02039988:
	cmp r8, #3
	blt _02039920
	add sb, sb, #1
_02039994:
	cmp sb, #2
	blt _020398D0
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020399A4:
	ldr r0, _02039B6C ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_0213246C
	mov r5, r0
	mov r1, fp
	ldrsb r0, [r5, #4]
	str r1, [sp, #0x10]
	bl FUN_020F07F4
	cmp r0, #0
	mov r0, r5
	mov r1, r4
	bne _020399F8
	bl FUN_021327B8
	cmp r0, #0
	mov r0, r5
	streq r4, [sp, #0x10]
	bl FUN_02132718
	str r0, [sp, #0x14]
	mov r0, r5
	bl FUN_02132730
	b _02039A18
_020399F8:
	bl FUN_021327B8
	cmp r0, #0
	mov r0, r5
	strne r4, [sp, #0x10]
	bl FUN_02132730
	str r0, [sp, #0x14]
	mov r0, r5
	bl FUN_02132718
_02039A18:
	str r0, [sp, #0x18]
	mov sb, #0
	b _02039B3C
_02039A24:
	ldr r0, [sp, #4]
	ldr r6, _02039B64 ; =0x02099F38
	add r0, r0, sb, lsl #2
	add r1, r0, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x340]
	mov r2, #2
	mov r3, #1
	bl FUN_0211329C
	ldr r0, [sp, #4]
	mov r8, #0
	add r0, r0, sb, lsl #2
	add r5, r0, #0x1000
	add r7, sp, #0x14
	ldr r4, _02039B68 ; =0x66666667
	b _02039B04
_02039A64:
	ldr r0, [r7, sb, lsl #2]
	cmp r0, #0
	bne _02039A84
	ldr r0, [r6]
	ldr r1, [r5, #0x340]
	add r2, r8, #2
	mov r3, #2
	bl FUN_02113F7C
_02039A84:
	ldr r0, [sp, #0x10]
	str fp, [sp]
	cmp sb, r0
	ldr r0, [r6]
	ldr r1, [r5, #0x340]
	add r2, r8, #2
	bne _02039AC8
	ldr lr, [r7, sb, lsl #2]
	mov ip, #0xa
	smull sl, r3, r4, lr
	lsr sl, lr, #0x1f
	add r3, sl, r3, asr #2
	smull sl, r3, ip, r3
	str r3, [sp, #8]
	sub r3, lr, sl
	add r3, r3, #0xa
	b _02039AE8
_02039AC8:
	ldr ip, [r7, sb, lsl #2]
	mov lr, #0xa
	smull sl, r3, r4, ip
	lsr sl, ip, #0x1f
	add r3, sl, r3, asr #2
	smull sl, r3, lr, r3
	str r3, [sp, #0xc]
	sub r3, ip, sl
_02039AE8:
	bl FUN_0211401C
	ldr r1, [r7, sb, lsl #2]
	add r8, r8, #1
	smull r0, r2, r4, r1
	lsr r0, r1, #0x1f
	add r2, r0, r2, asr #2
	str r2, [r7, sb, lsl #2]
_02039B04:
	cmp r8, #3
	blt _02039A64
	ldr r0, [sp, #4]
	mov r3, #1
	add r1, r0, sb, lsl #2
	ldr r0, _02039B64 ; =0x02099F38
	str r3, [sp]
	add r1, r1, #0x1000
	mov r2, #2
	ldr r0, [r0]
	ldr r1, [r1, #0x340]
	mov r3, r2
	bl FUN_02113EC0
	add sb, sb, #1
_02039B3C:
	cmp sb, #2
	blt _02039A24
	ldr r0, [sp, #4]
	add r0, r0, #0x1000
	ldr r1, [r0, #0x32c]
	add r1, r1, #1
	str r1, [r0, #0x32c]
_02039B58:
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02039B60: .word 0x000003E7
_02039B64: .word 0x02099F38
_02039B68: .word 0x66666667
_02039B6C: .word 0x02099EF0

	arm_func_start FUN_02039b70
FUN_02039b70: ; 0x02039B70
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x94
	ldr r3, _02039EF0 ; =0x0208C374
	ldr r2, _02039EF4 ; =0x02099EF0
	ldrb r8, [r3]
	ldrb r7, [r3, #1]
	ldrb r6, [r3, #2]
	ldrb r5, [r3, #3]
	ldrb r4, [r3, #4]
	ldrb r3, [r3, #5]
	mov sl, r0
	ldr r0, [r2]
	mov fp, r1
	strb r8, [sp, #0xc]
	strb r7, [sp, #0xd]
	strb r6, [sp, #0xe]
	strb r5, [sp, #0xf]
	strb r4, [sp, #0x10]
	strb r3, [sp, #0x11]
	cmp r0, #0
	mov r6, #0
	beq _02039BD8
	bl FUN_021434F8
	cmp r0, #0
	addne sp, sp, #0x94
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02039b70
_02039BD8:
	cmp fp, #0
	bge _02039BF8
	ldr r0, _02039EF4 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_02148398
	cmp r0, #0
	addeq sp, sp, #0x94
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02039BF8:
	ldr r4, _02039EF4 ; =0x02099EF0
	ldr r0, [r4]
	bl FUN_02148398
	cmp r0, #0
	beq _02039C38
	ldr r0, [r4]
	bl FUN_02159DF0
	cmp r0, #0
	beq _02039C38
	ldrb r0, [r0, #4]
	tst r0, #0x40
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	addne sp, sp, #0x94
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02039C38:
	ldr r0, _02039EF8 ; =0x02099F38
	mov sb, #3
	ldr r0, [r0]
	mov r1, sb
	mov r2, #1
	bl FUN_02112724
	add r1, sl, #0x1000
	ldr r2, _02039EF4 ; =0x02099EF0
	str r0, [r1, #0x374]
	ldr r0, [r2]
	bl FUN_02148398
	cmp r0, #0
	moveq sb, #0
	mov r8, #0
	add r4, sl, #0x1000
	add r7, sp, #0x12
	ldr r5, _02039EF8 ; =0x02099F38
	b _02039D38
_02039C80:
	add r0, sp, #0xc
	ldrb r2, [r0, sb]
	ldr r1, _02039EFC ; =0x0208FEA4
	mov r0, r7
	bl FUN_02015184
	ldr r0, _02039F00 ; =0x0209A200
	mov r1, #5
	ldr r2, [r0]
	ldr r0, [r5]
	mov r3, r7
	str r6, [sp]
	str r6, [sp, #4]
	str r6, [sp, #8]
	bl FUN_02058684
	add r1, sl, r8, lsl #2
	add r1, r1, #0x1000
	str r0, [r1, #0x368]
	mov r1, r0
	ldr r0, [r5]
	mov r2, r6
	mov r3, r6
	bl FUN_02059038
	add r3, sl, r8, lsl #2
	add r3, r3, #0x1000
	ldr r3, [r3, #0x368]
	ldr r0, [r5]
	ldr r1, [r4, #0x374]
	add r2, r8, #1
	and r3, r3, #0xff
	bl FUN_021137DC
	str r6, [sp]
	ldr r0, [r5]
	ldr r1, [r4, #0x374]
	add r2, r8, #1
	mov r3, r6
	bl FUN_0211401C
	add r1, sl, r8, lsl #2
	str r6, [sp]
	add r1, r1, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x374]
	mov r2, r8
	mov r3, r6
	bl FUN_02114150
	add r8, r8, #1
	add sb, sb, #1
_02039D38:
	cmp r8, #3
	blt _02039C80
	ldr r4, _02039EF8 ; =0x02099F38
	add r1, sl, #0x1000
	mov r6, #2
	ldr r0, [r4]
	ldr r1, [r1, #0x374]
	mov r2, r6
	bl FUN_02114370
	mov r5, #8
	str r5, [sp]
	add r1, sl, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x374]
	mov r3, r5
	mov r2, #3
	bl FUN_02113B78
	str r5, [sp]
	add r0, sl, #0x1000
	ldr r1, [r0, #0x374]
	mov r2, r6
	ldr r0, [r4]
	mov r6, #0x28
	mov r3, r6
	bl FUN_02113B78
	str r5, [sp]
	ldr r0, [r4]
	mov r3, r6
	add r1, sl, #0x1000
	ldr r1, [r1, #0x374]
	mov r4, #1
	mov r2, r4
	bl FUN_02113B78
	sub r0, r4, #2
	cmp fp, r0
	bne _02039E18
	bl FUN_020F081C
	ldr r5, _02039F04 ; =0x0209BA20
	mov r1, r0
	mov r0, r5
	bl FUN_0207249c
	mov r4, r0
	ldrb r6, [r4, #0x43]
	bl FUN_020F081C
_02039DE8:
	mov r1, r0
	mov r0, r5
	bl FUN_020724e8
	mov r2, #0x64
	mov r1, r0
	smulbb r0, r6, r2
	bl FUN_0201f9bc
	ldrb r2, [r4, #0x43]
	add r1, sl, #0x1000
	mov r4, r0
	str r2, [r1, #0x37c]
	b _02039E8C
_02039E18:
	sub r0, r4, #3
	cmp fp, r0
	bne _02039E48
	bl FUN_020F083C
	ldr r5, _02039F04 ; =0x0209BA20
	mov r1, r0
	mov r0, r5
	bl FUN_0207249c
	mov r4, r0
	ldrb r6, [r4, #0x43]
	bl FUN_020F083C
	b _02039DE8
_02039E48:
	mov r0, fp
	mov r1, #0
	bl FUN_020EFA9C
	mov r5, r0
	bl FUN_0206cc84
	mov r4, r0
	mov r0, r5
	bl FUN_0206cc94
	mov r2, #0x64
	mov r1, r0
	smulbb r0, r4, r2
	bl FUN_0201f9bc
	mov r4, r0
	mov r0, r5
	bl FUN_0206cc84
	add r1, sl, #0x1000
	str r0, [r1, #0x37c]
_02039E8C:
	add r1, sl, #0x1000
	str fp, [r1, #0x378]
	mov r6, #0x64
	str r6, [sp]
	ldr r5, _02039EF8 ; =0x02099F38
	lsl r2, r4, #0x10
	ldr r0, [r5]
	ldr r1, [r1, #0x374]
	asr r3, r2, #0x10
	mov r2, #2
	bl FUN_02113C60
	str r6, [sp]
	add r1, sl, #0x1000
	lsl r2, r4, #0x10
	ldr r0, [r5]
	ldr r1, [r1, #0x374]
	asr r3, r2, #0x10
	mov r2, #1
	bl FUN_02113C60
	add r0, sl, #0x1000
	ldr r1, [r0, #0x364]
	add r1, r1, #1
	str r1, [r0, #0x364]
	add sp, sp, #0x94
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02039EF0: .word 0x0208C374
_02039EF4: .word 0x02099EF0
_02039EF8: .word 0x02099F38
_02039EFC: .word 0x0208FEA4
_02039F00: .word 0x0209A200
_02039F04: .word 0x0209BA20

	arm_func_start FUN_02039f08
FUN_02039f08: ; 0x02039F08
	push {r4, r5, r6, lr}
	mov r5, r0
	add r0, r5, #0x1000
	ldr r0, [r0, #0x364]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r4, #0
	ldr r6, _02039FA0 ; =0x02099F38
	b _02039F6C
	arm_func_end FUN_02039f08
_02039F2C:
	add r0, r5, r4, lsl #2
	add r0, r0, #0x1000
	ldr r1, [r0, #0x368]
	ldr r0, [r6]
	bl FUN_020591e8
	add r0, r5, r4, lsl #2
	add r0, r0, #0x1000
	ldr r1, [r0, #0x368]
	ldr r0, [r6]
	bl FUN_02058ee0
	add r0, r5, r4, lsl #2
	add r0, r0, #0x1000
	ldr r1, [r0, #0x368]
	ldr r0, [r6]
	bl FUN_02058ee0
	add r4, r4, #1
_02039F6C:
	cmp r4, #3
	blt _02039F2C
	ldr r0, _02039FA0 ; =0x02099F38
	add r1, r5, #0x1000
	ldr r0, [r0]
	ldr r1, [r1, #0x374]
	bl FUN_021128C4
	add r0, r5, #0x364
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x20
	bl MemWrite
	pop {r4, r5, r6, pc}
	.align 2, 0_02039FA0: .word 0x02099F38

	arm_func_start FUN_02039fa4
FUN_02039fa4: ; 0x02039FA4
	ldr r2, _02039FC4 ; =0x02099F38
	add r1, r0, #0x1000
	ldr r0, [r2]
	ldr r1, [r1, #0x374]
	ldr ip, _02039FC8 ; =FUN_021142FC
	mov r2, #2
	mov r3, #1
	bx ip
	.align 2, 0_02039FC4: .word 0x02099F38
_02039FC8: .word FUN_021142FC
	arm_func_end FUN_02039fa4

	arm_func_start FUN_02039fcc
FUN_02039fcc: ; 0x02039FCC
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x1000
	ldr r0, [r0, #0x364]
	cmp r0, #0
	popeq {r4, pc}
	cmp r1, #4
	arm_func_end FUN_02039fcc

	arm_func_start switchD
switchD: ; 0x02039FE8
	addls pc, pc, r1, lsl #2
	b _0203A040
	arm_func_end switchD
_02039FF0: ; jump table
	b _0203A040 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02039FF4
	b _0203A004
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02039FF8
	b _0203A014
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02039FFC
	b _0203A024
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0203A000
	b _0203A034
	arm_func_end caseD_4
_0203A004:
	ldr r0, _0203A054 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_021455B8
	b _0203A040
_0203A014:
	ldr r0, _0203A054 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_021456D0
	b _0203A040
_0203A024:
	ldr r0, _0203A054 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_021455E8
	b _0203A040
_0203A034:
	ldr r0, _0203A054 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_021457B8
_0203A040:
	add r0, r4, #0x1000
	ldr r1, [r0, #0x364]
	add r1, r1, #1
	str r1, [r0, #0x364]
	pop {r4, pc}
	.align 2, 0_0203A054: .word 0x02099EF0

	arm_func_start FUN_0203a058
FUN_0203a058: ; 0x0203A058
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, r0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x364]
	mov r6, #0
	mov r7, r6
	cmp r1, #0
	mov r4, r6
	beq _0203A110
	ldr r0, [r0, #0x378]
	sub r1, r6, #1
	cmp r0, r1
	bne _0203A0C0
	bl FUN_020F081C
	ldr r7, _0203A2F8 ; =0x0209BA20
	mov r1, r0
	mov r0, r7
	bl FUN_0207249c
	ldrb r6, [r0, #0x43]
	bl FUN_020F081C
	arm_func_end FUN_0203a058
_0203A0A8:
	mov r1, r0
	mov r0, r7
	bl FUN_020724e8
	lsl r0, r0, #0x10
	asr r7, r0, #0x10
	b _0203A110
_0203A0C0:
	sub r1, r6, #2
	cmp r0, r1
	bne _0203A0EC
	bl FUN_020F083C
	ldr r7, _0203A2F8 ; =0x0209BA20
	mov r1, r0
	mov r0, r7
	bl FUN_0207249c
	ldrb r6, [r0, #0x43]
	bl FUN_020F083C
	b _0203A0A8
_0203A0EC:
	mov r1, r6
	bl FUN_020EFA9C
	movs r8, r0
	beq _0203A110
	bl FUN_0206cc84
	mov r6, r0
	mov r0, r8
	bl FUN_0206cc94
	mov r7, r0
_0203A110:
	add r0, r5, #0x1000
	ldr r1, [r0, #0x364]
	cmp r1, #5

	arm_func_start switchD
switchD: ; 0x0203A11C
	addls pc, pc, r1, lsl #2
	arm_func_end switchD

	arm_func_start caseD_6
caseD_6: ; 0x0203A120
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end caseD_6
_0203A124: ; jump table
	pop {r3, r4, r5, r6, r7, r8, sb, pc} ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0203A128
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0203A12C
	b _0203A13C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203A130
	b _0203A158
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0203A134
	b _0203A20C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0203A138
	b _0203A248
	arm_func_end caseD_5
_0203A13C:
	ldr r2, [r0, #0x37c]
	add r1, r1, #1
	sub r3, r2, r6
	mov r2, #8
	str r3, [r0, #0x37c]
	str r2, [r0, #0x380]
	str r1, [r0, #0x364]
_0203A158:
	add r0, r5, #0x1000
	ldr r2, [r0, #0x380]
	ldr r1, [r0, #0x3e0]
	mov r8, #0x64
	subs r1, r2, r1
	str r1, [r0, #0x380]
	strmi r4, [r0, #0x380]
	add r0, r5, #0x1000
	ldr r1, [r0, #0x37c]
	ldr r0, [r0, #0x380]
	smulbb r2, r6, r8
	mul r0, r1, r0
	mul r1, r0, r8
	asr r0, r1, #2
	add r0, r1, r0, lsr #29
	mov r1, r7
	add r0, r2, r0, asr #3
	bl FUN_0201f9bc
	mov sb, r0
	lsl r3, sb, #0x10
	mov r7, #1
	ldr r6, _0203A2FC ; =0x02099F38
	str r8, [sp]
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x374]
	mov r2, r7
	asr r3, r3, #0x10
	bl FUN_02113C60
	cmp sb, #0
	bne _0203A1EC
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x374]
	mov r2, r7
	mov r3, #2
	bl FUN_02113F7C
_0203A1EC:
	add r0, r5, #0x1000
	ldr r1, [r0, #0x380]
	cmp r1, #0
	ldreq r1, [r0, #0x364]
	streq r4, [r0, #0x380]
	addeq r1, r1, #1
	streq r1, [r0, #0x364]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0203A20C:
	ldr r2, [r0, #0x380]
	ldr r1, [r0, #0x3e0]
	subs r1, r2, r1
	str r1, [r0, #0x380]
	strmi r4, [r0, #0x380]
	add r0, r5, #0x1000
	ldr r1, [r0, #0x380]
	cmp r1, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r1, [r0, #0x364]
	mov r2, #0x20
	add r1, r1, #1
	str r2, [r0, #0x380]
	str r1, [r0, #0x364]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0203A248:
	ldr r2, [r0, #0x380]
	ldr r1, [r0, #0x3e0]
	mov r8, #0x64
	subs r1, r2, r1
	str r1, [r0, #0x380]
	strmi r4, [r0, #0x380]
	add r0, r5, #0x1000
	ldr r1, [r0, #0x37c]
	ldr r0, [r0, #0x380]
	smulbb r2, r6, r8
	mul r0, r1, r0
	mul r1, r0, r8
	asr r0, r1, #4
	add r0, r1, r0, lsr #27
	mov r1, r7
	add r0, r2, r0, asr #5
	bl FUN_0201f9bc
	mov sb, r0
	lsl r3, sb, #0x10
	mov r7, #2
	ldr r6, _0203A2FC ; =0x02099F38
	str r8, [sp]
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x374]
	mov r2, r7
	asr r3, r3, #0x10
	bl FUN_02113C60
	cmp sb, #0
	bne _0203A2D8
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x374]
	mov r2, r7
	mov r3, r7
	bl FUN_02113F7C
_0203A2D8:
	add r0, r5, #0x1000
	ldr r1, [r0, #0x380]
	cmp r1, #0
	ldreq r1, [r0, #0x364]
	streq r4, [r0, #0x380]
	addeq r1, r1, #1
	streq r1, [r0, #0x364]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0203A2F8: .word 0x0209BA20
_0203A2FC: .word 0x02099F38

	arm_func_start FUN_0203a300
FUN_0203a300: ; 0x0203A300
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xc
	ldr r1, _0203A460 ; =0x02099EF0
	mov r7, r0
	ldr r0, [r1]
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, pc}
	bl FUN_021434F8
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, pc}
	ldr r4, _0203A464 ; =0x02099F78
	ldr r1, _0203A468 ; =0x0208FEB4
	mov r0, r4
	bl FUN_020418b0
	lsl r3, r0, #1
	add r2, r7, #0x1000
	ldr r1, _0203A46C ; =0x0208FECC
	mov r0, r4
	str r3, [r2, #0x3b8]
	bl FUN_020418b0
	lsl r2, r0, #1
	add r0, r7, #0x1000
	ldr r1, _0203A470 ; =0x0209A200
	str r2, [r0, #0x3bc]
	ldr r4, _0203A474 ; =0x02099F38
	ldr r2, [r1]
	ldr r0, [r4]
	mov r6, #0
	str r6, [sp]
	str r6, [sp, #4]
	ldr r3, _0203A478 ; =0x0208FEE4
	str r6, [sp, #8]
	mov r1, #5
	bl FUN_02058684
	mov r1, r0
	add r0, r7, #0x1000
	str r1, [r0, #0x3ac]
	ldr r0, [r4]
	mov r5, #1
	mov r2, r5
	mov r3, r6
	bl FUN_02059038
	ldr r0, [r4]
	mov r1, r5
	mov r2, r5
	bl FUN_02112724
	mov r1, r0
	add r0, r7, #0x1000
	str r1, [r0, #0x3b0]
	ldr r2, [r0, #0x3ac]
	ldr r0, [r4]
	and r2, r2, #0xff
	bl FUN_02112950
	str r6, [sp]
	ldr r0, [r4]
	add r1, r7, #0x1000
	ldr r1, [r1, #0x3b0]
	mov r2, r5
	mov r3, r6
	bl FUN_0211401C
	str r6, [sp]
	mov r3, r6
	ldr r0, [r4]
	add r1, r7, #0x1000
	ldr r1, [r1, #0x3b0]
	mov r2, r5
	bl FUN_02113B78
	ldr r0, [r4]
	add r1, r7, #0x1000
	ldr r1, [r1, #0x3b0]
	mov r6, #2
	mov r2, r6
	bl FUN_02114370
	add r1, r7, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3b0]
	mov r2, r6
	mov r3, r5
	bl FUN_0211329C
	add r1, r7, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3b0]
	mov r2, #0x32
	bl FUN_02112B98
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0203A460: .word 0x02099EF0
_0203A464: .word 0x02099F78
_0203A468: .word 0x0208FEB4
_0203A46C: .word 0x0208FECC
_0203A470: .word 0x0209A200
_0203A474: .word 0x02099F38
_0203A478: .word 0x0208FEE4
	arm_func_end FUN_0203a300

	arm_func_start FUN_0203a47c
FUN_0203a47c: ; 0x0203A47C
	push {r4, r5, r6, lr}
	ldr r1, _0203A514 ; =0x02099EF0
	mov r4, r0
	ldr r0, [r1]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	bl FUN_021434F8
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	ldr r5, _0203A518 ; =0x02099F38
	add r0, r4, #0x1000
	ldr r1, [r0, #0x3ac]
	ldr r0, [r5]
	bl FUN_020591e8
	add r0, r4, #0x1000
	ldr r1, [r0, #0x3ac]
	ldr r0, [r5]
	bl FUN_02058ee0
	add r0, r4, #0x1000
	ldr r1, [r0, #0x3ac]
	ldr r0, [r5]
	bl FUN_02058ee0
	mov r6, #0
	b _0203A4F4
	arm_func_end FUN_0203a47c
_0203A4DC:
	add r0, r4, r6, lsl #2
	add r1, r0, #0x1000
	ldr r0, [r5]
	ldr r1, [r1, #0x3b0]
	bl FUN_021128C4
	add r6, r6, #1
_0203A4F4:
	cmp r6, #1
	blt _0203A4DC
	add r0, r4, #0x3a8
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x18
	bl MemWrite
	pop {r4, r5, r6, pc}
	.align 2, 0_0203A514: .word 0x02099EF0
_0203A518: .word 0x02099F38

	arm_func_start FUN_0203a51c
FUN_0203a51c: ; 0x0203A51C
	push {r3, r4, r5, lr}
	ldr r1, _0203A5DC ; =0x02099EF0
	mov r5, r0
	ldr r0, [r1]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_021434F8
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	add r1, r5, #0x1000
	ldr r3, [r1, #0x3b4]
	ldr r2, [r1, #0x3e0]
	ldr r0, [r1, #0x3a8]
	add r2, r3, r2
	str r2, [r1, #0x3b4]
	cmp r0, #0
	beq _0203A56C
	cmp r0, #1
	beq _0203A5A8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0203a51c
_0203A56C:
	ldr r0, _0203A5E0 ; =0x02099F38
	mov r4, #1
	ldr r0, [r0]
	ldr r1, [r1, #0x3b0]
	mov r3, r4
	mov r2, #2
	bl FUN_021142FC
	add r0, r5, #0x1000
	ldr r2, [r0, #0x3b4]
	ldr r1, [r0, #0x3b8]
	cmp r2, r1
	movgt r1, #0
	strgt r1, [r0, #0x3b4]
	strgt r4, [r0, #0x3a8]
	pop {r3, r4, r5, pc}
_0203A5A8:
	ldr r0, _0203A5E0 ; =0x02099F38
	ldr r1, [r1, #0x3b0]
	ldr r0, [r0]
	mov r2, #2
	bl FUN_02114370
	add r0, r5, #0x1000
	ldr r2, [r0, #0x3b4]
	ldr r1, [r0, #0x3bc]
	cmp r2, r1
	movgt r1, #0
	strgt r1, [r0, #0x3b4]
	strgt r1, [r0, #0x3a8]
	pop {r3, r4, r5, pc}
	.align 2, 0_0203A5DC: .word 0x02099EF0
_0203A5E0: .word 0x02099F38

	arm_func_start FUN_0203a5e4
FUN_0203a5e4: ; 0x0203A5E4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x58
	mov r5, r0
	mov r8, #0
	add r0, r5, #0x1000
	sub r6, r8, #1
	ldr r4, _0203AA2C ; =0x0208C35C
	str r8, [r0, #0x398]
	str r6, [r0, #0x388]
	ldr fp, _0203AA30 ; =0x0209BA20
	ldrb r6, [r4]
	ldrb ip, [r4, #1]
	ldrb r7, [r4, #2]
	strb r6, [sp, #0x14]
	mov sl, r3
	mov r4, r1
	mov r0, fp
	mov r1, sl
	mov r6, r2
	strb ip, [sp, #0x15]
	strb r7, [sp, #0x16]
	bl FUN_0204a2c4
	movs r7, r0
	bne _0203A660
	add r0, r5, #0x1300
	ldrsb r1, [r0, #0x84]
	add r0, r5, #0x1000
	add sp, sp, #0x58
	add r1, r1, #1
	strb r1, [r0, #0x384]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0203a5e4
_0203A660:
	mov r0, r6
	mov r1, r8
	bl FUN_020EFA9C
	movs r1, r0
	bne _0203A690
	add r0, r5, #0x1300
	ldrsb r1, [r0, #0x84]
	add r0, r5, #0x1000
	add sp, sp, #0x58
	add r1, r1, #1
	strb r1, [r0, #0x384]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203A690:
	ldr r6, _0203AA34 ; =0x02099EF0
	ldr r0, [r6]
	cmp r0, #0
	addeq sp, sp, #0x58
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [r7, #0x14]
	add r3, r5, #0x1000
	ands r2, r0, #0xff
	addeq sp, sp, #0x58
	strb r0, [r3, #0x395]
	strbeq r8, [r3, #0x394]
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr ip, _0203AA38 ; =0x51EB851F
	lsr r0, r2, #0x1f
	smull r2, r8, ip, r2
	add r8, r0, r8, asr #5
	mov r0, fp
	mov r2, sl
	strb r8, [r3, #0x395]
	bl FUN_0207224c
	add r1, r5, #0x1000
	strb r0, [r1, #0x394]
	ldr r0, [r6]
	bl FUN_021434F8
	cmp r0, #0
	beq _0203A734
	ldr r0, _0203AA3C ; =0x020A0640
	ldrb r0, [r0, #0x1a]
	cmp r0, #0
	bne _0203A734
	ldr r0, [r6]
	bl FUN_02130A30
	cmp r0, #0
	addeq sp, sp, #0x58
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r2, [r0]
	mov r0, fp
	mov r1, r7
	bl FUN_020721bc
	add r1, r5, #0x1000
	strb r0, [r1, #0x394]
_0203A734:
	add r0, r5, #0x1000
	ldrb r1, [r0, #0x394]
	cmp r1, #1
	bhi _0203A768
	ldrb r0, [r0, #0x395]
	cmp r0, #0
	cmpne r0, #1
	cmpne r0, #2
	addeq r0, r5, #0x1000
	moveq r1, #0
	strbeq r1, [r0, #0x394]
	addeq sp, sp, #0x58
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203A768:
	ldr r6, _0203AA40 ; =0x02099F38
	mov r8, #1
	ldr r0, [r6]
	mov r1, r8
	mov r2, r8
	bl FUN_02112724
	add r1, r5, #0x1000
	ldrb r7, [r1, #0x395]
	add r3, sp, #0x14
	ldrb r2, [r1, #0x394]
	ldrsb r3, [r3, r7]
	str r0, [r1, #0x390]
	add r7, sp, #0x17
	add r0, r3, r2
	sub r0, r0, #1
	and r2, r0, #0xff
	ldr r1, _0203AA44 ; =0x0208FEF4
	mov r0, r7
	add r2, r2, #0x32
	bl FUN_02015184
	ldr r1, _0203AA48 ; =0x0209A200
	mov r3, r7
	ldr r2, [r1, #0x1c]
	ldr r0, [r6]
	mov r7, #0
	str r8, [sp]
	str r7, [sp, #4]
	mov r1, #5
	str r7, [sp, #8]
	bl FUN_02058684
	add r1, r5, #0x1000
	str r0, [r1, #0x38c]
	ldr r1, [r1, #0x390]
	ldr r0, [r6]
	mov r2, r8
	mov r3, #0xa
	bl FUN_02113F7C
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x390]
	mov r2, r8
	mov r3, #0xc8
	bl FUN_021139BC
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x390]
	mov r2, r8
	mov r3, #0x1f
	bl FUN_02113A80
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x390]
	mov r2, r8
	rsb r3, r8, #0x8000
	bl FUN_02113B00
	str r7, [sp]
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x390]
	mov r2, r8
	mov r3, r7
	bl FUN_02114150
	add r1, sp, #0xc
	add r0, r5, #0x1000
	str r1, [sp]
	ldr r1, [r0, #0x3e4]
	ldr r0, [r6]
	add r2, r4, #1
	add r3, sp, #0x10
	bl FUN_02114480
	add r1, r5, #0x1000
	ldr r0, [r6]
	ldr r1, [r1, #0x3e4]
	add r2, r4, #1
	bl FUN_021145AC
	add r1, r5, #0x1000
	mov r7, r0
	ldr r0, [r6]
	ldr r1, [r1, #0x3e4]
	add r2, r4, #1
	bl FUN_02114628
	ldr r1, [sp, #0x10]
	mov r6, r0
	cmp r1, #0
	ble _0203A8DC
	mov r0, #0x960
	bl FUN_0201f9bc
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	bl FUN_0201fde0
	and sb, r0, #0xff
_0203A8DC:
	add r0, r5, #0x1000
	ldrb r1, [r0, #0x395]
	ldr r2, _0203AA38 ; =0x51EB851F
	cmp r1, #1
	ldrbeq r0, [r0, #0x394]
	cmpeq r0, #3
	bne _0203A92C
	subs r1, r7, sb
	movmi r1, #0
	ldr r0, [sp, #0x10]
	and sb, r1, #0xff
	mul r1, r0, sb
	lsr r0, r1, #0x1f
	smull r1, r3, r2, r1
	add r3, r0, r3, asr #5
	mvn r0, #0x2f
	sub r1, r0, r3
	add r0, r5, #0x1000
	str r1, [r0, #0x3a0]
	b _0203A95C
_0203A92C:
	add r0, r7, sb
	cmp r0, #0x64
	movgt r0, #0x64
	and sb, r0, #0xff
	ldr r1, [sp, #0x10]
	rsb r0, sb, #0x64
	mul r3, r1, r0
	lsr r0, r3, #0x1f
	smull r1, r3, r2, r3
	add r3, r0, r3, asr #5
	add r0, r5, #0x1000
	str r3, [r0, #0x3a0]
_0203A95C:
	ldr r8, [sp, #0xc]
	add r3, r5, #0x1000
	mul r1, r6, r8
	ldr r2, _0203AA38 ; =0x51EB851F
	lsr r0, r1, #0x1f
	smull r1, r7, r2, r1
	ldr r1, [r3, #0x3a0]
	sub r2, r8, #0x2c
	add r7, r0, r7, asr #5
	sub r0, r2, r7
	str r0, [r3, #0x3a4]
	strb sb, [r3, #0x39c]
	strb r6, [r3, #0x39d]
	cmp r1, #0
	lsl r0, r1, #0xc
	ble _0203A9B0
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _0203A9BC
_0203A9B0:
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_0203A9BC:
	bl FUN_0201fdac
	add r1, r5, #0x1000
	ldr r2, [r1, #0x3a4]
	str r0, [r1, #0x3a0]
	cmp r2, #0
	lsl r0, r2, #0xc
	ble _0203A9EC
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _0203A9F8
_0203A9EC:
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_0203A9F8:
	bl FUN_0201fdac
	add r2, r5, #0x1000
	add r1, r5, #0x1300
	ldrsb r3, [r1, #0x84]
	ldr r1, [r2, #0x398]
	str r0, [r2, #0x3a4]
	add r3, r3, #1
	orr r0, r1, #1
	strb r3, [r2, #0x384]
	str r0, [r2, #0x398]
	str r4, [r2, #0x388]
	add sp, sp, #0x58
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203AA2C: .word 0x0208C35C
_0203AA30: .word 0x0209BA20
_0203AA34: .word 0x02099EF0
_0203AA38: .word 0x51EB851F
_0203AA3C: .word 0x020A0640
_0203AA40: .word 0x02099F38
_0203AA44: .word 0x0208FEF4
_0203AA48: .word 0x0209A200

	arm_func_start FUN_0203aa4c
FUN_0203aa4c: ; 0x0203AA4C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r5, r0
	cmp r1, #0
	add r1, r5, #0x1000
	ldr r0, [r1, #0x398]
	ldrbne r4, [r1, #0x39c]
	orrne r2, r0, #0x40
	ldrbne r0, [r1, #0x39d]
	strne r2, [r1, #0x398]
	bne _0203AAB4
	ldr r6, _0203AAF0 ; =0x02099F38
	ldr r2, [r1, #0x388]
	bic r0, r0, #0x40
	str r0, [r1, #0x398]
	ldr r0, [r6]
	ldr r1, [r1, #0x3e4]
	add r2, r2, #1
	bl FUN_021145AC
	add r1, r5, #0x1000
	ldr r2, [r1, #0x388]
	mov r4, r0
	ldr r0, [r6]
	ldr r1, [r1, #0x3e4]
	add r2, r2, #1
	bl FUN_02114628
	arm_func_end FUN_0203aa4c
_0203AAB4:
	add r1, r5, #0x1000
	ldr r2, [r1, #0x388]
	cmp r2, #0
	addlt sp, sp, #4
	poplt {r3, r4, r5, r6, pc}
	str r0, [sp]
	ldr r0, _0203AAF0 ; =0x02099F38
	ldr r2, [r1, #0x388]
	ldr r0, [r0]
	ldr r1, [r1, #0x3e4]
	mov r3, r4
	add r2, r2, #1
	bl FUN_02114150
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_0203AAF0: .word 0x02099F38

	arm_func_start FUN_0203aaf4
FUN_0203aaf4: ; 0x0203AAF4
	push {r3, r4, r5, lr}
	mov r4, r0
	add r0, r4, #0x1000
	ldr r1, [r0, #0x38c]
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	ldr r5, _0203AB7C ; =0x02099F38
	ldr r1, [r0, #0x390]
	ldr r0, [r5]
	mov r2, #1
	mov r3, #2
	bl FUN_02113F7C
	add r0, r4, #0x1000
	ldr r1, [r0, #0x38c]
	ldr r0, [r5]
	bl FUN_020591e8
	add r0, r4, #0x1000
	ldr r1, [r0, #0x38c]
	ldr r0, [r5]
	bl FUN_02058ee0
	add r0, r4, #0x1000
	ldr r1, [r0, #0x38c]
	ldr r0, [r5]
	bl FUN_02058ee0
	ldr r0, [r5]
	add r1, r4, #0x1000
	ldr r1, [r1, #0x390]
	bl FUN_021128C4
	add r0, r4, #0x384
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x24
	bl MemWrite
	pop {r3, r4, r5, pc}
	.align 2, 0_0203AB7C: .word 0x02099F38
	arm_func_end FUN_0203aaf4

	arm_func_start FUN_0203ab80
FUN_0203ab80: ; 0x0203AB80
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	add r1, r6, #0x1000
	ldrb r0, [r1, #0x394]
	cmp r0, #0
	ldrne r3, [r1, #0x38c]
	cmpne r3, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r6, #0x1300
	ldrsb r0, [r0, #0x84]
	cmp r0, #3
	arm_func_end FUN_0203ab80

	arm_func_start switchD
switchD: ; 0x0203ABAC
	addls pc, pc, r0, lsl #2
	arm_func_end switchD

	arm_func_start caseD_4
caseD_4: ; 0x0203ABB0
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end caseD_4
_0203ABB4: ; jump table
	pop {r3, r4, r5, r6, r7, pc} ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0203ABB8
	b _0203ABC4
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0203ABBC
	b _0203AC24
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203ABC0
	b _0203ACB8
	arm_func_end caseD_3
_0203ABC4:
	ldr r4, _0203AD5C ; =0x02099F38
	mov r1, r3
	ldr r0, [r4]
	bl FUN_02058e30
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	add r0, r6, #0x1000
	mov r2, #0
	ldr r1, [r0, #0x38c]
	ldr r0, [r4]
	mov r3, r2
	bl FUN_02059038
	add r1, r6, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x390]
	mov r2, #1
	mov r3, #2
	bl FUN_02113F7C
	add r0, r6, #0x1300
	ldrsb r1, [r0, #0x84]
	add r0, r6, #0x1000
	add r1, r1, #1
	strb r1, [r0, #0x384]
	pop {r3, r4, r5, r6, r7, pc}
_0203AC24:
	ldr r4, _0203AD5C ; =0x02099F38
	mov r7, #1
	ldr r0, [r4]
	ldr r1, [r1, #0x390]
	mov r2, r7
	and r3, r3, #0xff
	bl FUN_021137DC
	mov r5, #0
	str r5, [sp]
	add r1, r6, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x390]
	mov r2, r7
	mov r3, r5
	bl FUN_0211401C
	str r5, [sp]
	add r1, r6, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x390]
	mov r2, r7
	mov r3, r5
	bl FUN_02114150
	add r0, r6, #0x1000
	ldr r2, [r0, #0x398]
	ldr r1, [r0, #0x38c]
	orr r2, r2, #2
	str r2, [r0, #0x398]
	ldr r0, [r4]
	bl FUN_02059328
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r0, r6, #0x1300
	ldrsb r1, [r0, #0x84]
	add r0, r6, #0x1000
	add r1, r1, #1
	strb r1, [r0, #0x384]
	pop {r3, r4, r5, r6, r7, pc}
_0203ACB8:
	ldr r0, [r1, #0x398]
	mov r5, #1
	and r0, r0, #0x40
	cmp r0, #0
	movgt r0, #1
	movle r0, #0
	ldr r4, _0203AD5C ; =0x02099F38
	str r0, [sp]
	add r1, r6, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x390]
	mov r2, r5
	mov r3, #2
	bl FUN_02113EC0
	add r2, r6, #0x1000
	ldr r1, [r2, #0x388]
	cmp r1, #0
	poplt {r3, r4, r5, r6, r7, pc}
	mov r0, #0x30
	mla r0, r1, r0, r6
	add r0, r0, #0x1000
	ldr r3, [r2, #0x3a4]
	ldr r1, [r0, #0x404]
	ldr ip, [r2, #0x3a0]
	add r3, r3, r1
	asr r1, r3, #0xb
	ldr r6, [r0, #0x400]
	add r0, r3, r1, lsr #20
	add r1, ip, r6
	lsl r0, r0, #4
	asr r0, r0, #0x10
	str r0, [sp]
	asr r0, r1, #0xb
	add r0, r1, r0, lsr #20
	lsl r3, r0, #4
	ldr r0, [r4]
	ldr r1, [r2, #0x390]
	mov r2, r5
	asr r3, r3, #0x10
	bl FUN_02113B78
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0203AD5C: .word 0x02099F38

	arm_func_start FUN_0203ad60
FUN_0203ad60: ; 0x0203AD60
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x38c]
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	ldr r4, _0203ADD8 ; =0x02099F38
	ldr r1, [r0, #0x390]
	ldr r0, [r4]
	mov r2, #1
	mov r3, #2
	bl FUN_02113F7C
	add r0, r5, #0x1000
	ldr r1, [r0, #0x38c]
	ldr r0, [r4]
	bl FUN_020591e8
	add r0, r5, #0x1000
	ldr r1, [r0, #0x38c]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x38c]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, r5, #0x384
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x24
	bl MemWrite
	pop {r3, r4, r5, pc}
	.align 2, 0_0203ADD8: .word 0x02099F38
	arm_func_end FUN_0203ad60

	arm_func_start FUN_0203addc
FUN_0203addc: ; 0x0203ADDC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	ldr r4, _0203B850 ; =0x02099F14
	mov sl, r0
	ldr r0, [r4]
	mov r1, #0xc
	bl FUN_020E500C
	str r0, [sp, #0x10]
	ldr r0, [r4]
	mov r1, #5
	bl FUN_020E500C
	ldr r0, _0203B854 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_02148398
	cmp r0, #0
	bne _0203AE30
	ldr r0, _0203B854 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_02147E24
	cmp r0, #0
	beq _0203AE74
	arm_func_end FUN_0203addc
_0203AE30:
	ldr r0, _0203B858 ; =0x0209A2C0
	ldr r0, [r0, #0x48]
	cmn r0, #1
	bgt _0203AE74
	add r0, sl, #0x1000
	ldrb r0, [r0, #0x3c0]
	tst r0, #1
	beq _0203AE5C
	ldr r0, _0203B854 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_0212DBA0
_0203AE5C:
	mov r0, sl
	bl FUN_0203c5d4
	mov r1, r0
	ldr r0, _0203B854 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_0212E7F0
_0203AE74:
	add r1, sl, #0x1000
	ldrb r0, [r1, #0x3c0]
	tst r0, #4
	beq _0203AF3C
	add r0, sl, #0x1300
	ldrh r2, [r0, #0xc2]
	ldr r0, [r1, #0x3e0]
	add r1, sl, #0x1000
	sub r6, r2, r0
	ldr r5, [r1, #0x3c4]
	ldr r3, [r1, #0x3c8]
	ldr r2, [r1, #0x3e0]
	cmp r6, #0
	mla r2, r3, r2, r5
	movle r6, #0
	add r0, sl, #0x1300
	strh r6, [r0, #0xc2]
	cmp r2, #0x1000
	ldrb r0, [r1, #0x3c0]
	str r2, [r1, #0x3c4]
	movlt r6, #0
	andlt r0, r0, #0xfd
	strlt r6, [r1, #0x3c4]
	orrge r0, r0, #2
	strb r0, [r1, #0x3c0]
	movge r6, #1
	mov r1, #1
	cmp r6, #0
	ldr r0, [r4]
	moveq r1, #0
	bl FUN_020E1A50
	add r0, sl, #0x1300
	ldrh r0, [r0, #0xc2]
	cmp r0, #0
	add r0, sl, #0x1000
	bne _0203AF28
	ldrb r2, [r0, #0x3c0]
	ldr r1, [r0, #0x3c8]
	and r2, r2, #0xfb
	cmp r1, #0
	movgt r1, #0x1f
	strb r2, [r0, #0x3c0]
	movle r1, #0
	ldr r0, [r4]
	b _0203AF34
_0203AF28:
	ldr r1, [r0, #0x3c4]
	ldr r0, [r4]
	asr r1, r1, #0xc
_0203AF34:
	and r1, r1, #0xff
	bl FUN_020E19C0
_0203AF3C:
	mov fp, #0
	b _0203B840
_0203AF44:
	mov r4, #0x58
	mla r0, fp, r4, sl
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0xd6]
	tst r0, #1
	beq _0203B83C
	ldr r0, _0203B854 ; =0x02099EF0
	mov r1, fp
	ldr r0, [r0]
	bl FUN_0213922C
	mov r5, r0
	ldr r0, _0203B854 ; =0x02099EF0
	mov r1, fp
	ldr r0, [r0]
	mov r2, #1
	bl FUN_02143088
	cmp r5, #0
	cmpne r0, #0
	beq _0203B83C
	mov r0, r5
	bl FUN_0206d688
	cmp r0, #0
	beq _0203B83C
	mul r0, fp, r4
	add r1, sl, #0x3ac0
	adds r7, r1, r0
	beq _0203B83C
	ldrh r0, [r7, #0x16]
	tst r0, #1
	beq _0203B83C
	ldrh r1, [r7, #0x34]
	ldr r0, _0203B85C ; =0x02099EC0
	ldr r2, _0203B860 ; =0x51EB851F
	lsl r3, r1, #0xc
	smull r1, sb, r2, r3
	lsr r2, r3, #0x1f
	add sb, r2, sb, asr #5
	ldr r0, [r0]
	mov r2, #0
	add r1, fp, #1
	str r2, [sp, #0xc]
	bl FUN_020571e0
	ldrh r1, [r7, #0x16]
	mov r4, r0
	tst r1, #4
	beq _0203B158
	add r0, sl, #0x1000
	ldrh r1, [r7, #0xa]
	ldr r0, [r0, #0x3e0]
	sub r0, r1, r0
	cmp r0, #0
	ldrle r0, [sp, #0xc]
	strh r0, [r7, #0xa]
	add r0, sl, #0x1000
	ldr r2, [r7, #0xc]
	ldr r1, [r7, #0x10]
	ldr r0, [r0, #0x3e0]
	mla r0, r1, r0, r2
	cmp r0, #0x1000
	str r0, [r7, #0xc]
	ldrhge r0, [r7, #0x16]
	movge r6, #1
	orrge r0, r0, #2
	strhge r0, [r7, #0x16]
	bge _0203B060
	mov r6, #0
	mov r0, sl
	mov r1, fp
	mov r2, #2
	str r6, [r7, #0xc]
	bl FUN_0203c86c
_0203B060:
	ldr r0, _0203B864 ; =0x02099F58
	mov r8, #2
	ldr r0, [r0]
	mov r1, r4
	mov r2, r8
	mov r3, r6
	bl FUN_02116CB4
	str r6, [sp]
	ldr r6, _0203B868 ; =0x02099F38
	ldr r1, [sp, #0x10]
	ldr r0, [r6]
	add r2, fp, #1
	mov r3, r8
	bl FUN_02113EC0
	ldrh r0, [r7, #0xa]
	cmp r0, #0
	bne _0203B100
	ldrh r1, [r7, #0x16]
	ldr r0, _0203B86C ; =0x0000FFFB
	mov r2, #0x1f
	and r0, r1, r0
	strh r0, [r7, #0x16]
	ldr r0, [r7, #0x10]
	mov r1, r4
	cmp r0, #0
	ldr r0, _0203B864 ; =0x02099F58
	movle r2, #0
	ldr r0, [r0]
	and r2, r2, #0xff
	bl FUN_02116D94
	ldr r0, [r7, #0x10]
	mov r3, #0x10
	cmp r0, #0
	ldr r0, _0203B868 ; =0x02099F38
	movle r3, #0
	ldr r1, [sp, #0x10]
	ldr r0, [r0]
	add r2, fp, #1
	and r3, r3, #0xff
	b _0203B154
_0203B100:
	ldr r0, _0203B864 ; =0x02099F58
	ldr r2, [r7, #0xc]
	ldr r0, [r0]
	asr r2, r2, #0xc
	mov r1, r4
	and r2, r2, #0xff
	bl FUN_02116D94
	add r2, r8, #0x840
	ldr r8, [r7, #0xc]
	ldr r0, [r6]
	umull r6, r4, r8, r2
	asr r3, r8, #0x1f
	mla r4, r3, r2, r4
	adds r3, r6, #0x800
	adc r2, r4, #0
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	asr r2, r3, #0xc
	and r3, r2, #0xff
	ldr r1, [sp, #0x10]
	add r2, fp, #1
_0203B154:
	bl FUN_02113A80
_0203B158:
	ldrh r0, [r7, #0x16]
	ldr r8, _0203B854 ; =0x02099EF0
	tst r0, #0x80
	beq _0203B204
	ldr r0, _0203B858 ; =0x0209A2C0
	ldrsh r1, [r5, #0x94]
	ldr r0, [r0, #0x48]
	cmp r1, r0
	bne _0203B204
	ldrsb r0, [r7, #0x4c]
	cmp r0, #0
	beq _0203B198
	cmp r0, #1
	beq _0203B1BC
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203B198:
	ldrsb r1, [r7, #0x50]
	ldr r0, [r8]
	bl FUN_0213922C
	cmp r0, #0
	addeq sp, sp, #0x24
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r0, #0x84]
	ldm r0, {r4, r6}
	b _0203B1C4
_0203B1BC:
	ldr r4, [r7, #0x50]
	ldr r6, [r7, #0x54]
_0203B1C4:
	ldrsb r0, [r7, #0x4d]
	lsl r1, fp, #0x18
	mov r2, r4
	str r0, [sp]
	ldr r0, [r8]
	asr r1, r1, #0x18
	mov r3, r6
	bl FUN_0212CA1C
	cmp r0, #0
	beq _0203B204
	mov r0, sl
	mov r1, fp
	mov r2, #0x80
	bl FUN_0203c86c
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203B204:
	ldrh r4, [r7, #0x16]
	tst r4, #8
	beq _0203B2AC
	ldr r1, [r5, #0x84]
	ldr r0, _0203B854 ; =0x02099EF0
	ldrb r2, [r1, #0x1d]
	mov r1, r5
	mov r3, sb
	str r4, [sp]
	ldr r0, [r0]
	bl FUN_02147EC8
	ldr r1, [r5, #0x88]
	ldr r0, [r1]
	cmp r0, #0x80000000
	ldreq r0, [r1, #4]
	cmpeq r0, #0x80000000
	beq _0203B26C
	ldr r3, [r5, #0x84]
	ldr r2, [r5, #0x88]
	ldr r1, [r3]
	ldr r0, [r2]
	cmp r0, r1
	ldreq r1, [r3, #4]
	ldreq r0, [r2, #4]
	cmpeq r0, r1
	bne _0203B288
_0203B26C:
	mov r0, sl
	mov r1, fp
	mov r2, #8
	bl FUN_0203c86c
	ldr r1, [r5, #0x84]
	mov r0, #0
	strb r0, [r1, #0x1d]
_0203B288:
	ldr r0, _0203B858 ; =0x0209A2C0
	ldrsh r2, [r5, #0x94]
	ldr r1, [r0, #0x48]
	ldr r0, _0203B854 ; =0x02099EF0
	cmp r2, r1
	bne _0203B2AC
	ldr r0, [r0]
	mov r1, r5
	bl FUN_0212FAB8
_0203B2AC:
	ldrh r0, [r7, #0x16]
	tst r0, #0x30
	beq _0203B528
	tst r0, #0x10
	ldrh r8, [r7, #0x40]
	ldr r0, _0203B854 ; =0x02099EF0
	beq _0203B318
	ldrsb r1, [r7]
	ldr r0, [r0]
	bl FUN_0213922C
	cmp r0, #0
	beq _0203B328
	ldr r2, [r0, #0x84]
	ldr r1, [r2]
	str r1, [sp, #0x14]
	ldr r1, [r2, #4]
	str r1, [sp, #0x18]
	ldrh r1, [r7, #0x16]
	tst r1, #0x40
	ldrne r0, [r0, #0x84]
	ldrhne r0, [r0, #0x18]
	addne r0, r8, r0
	lslne r0, r0, #0x10
	lsrne r8, r0, #0x10
	mov r0, #1
	str r0, [sp, #0xc]
	b _0203B328
_0203B318:
	ldr r0, [r7]
	str r0, [sp, #0x14]
	ldr r0, [r7, #4]
	str r0, [sp, #0x18]
_0203B328:
	ldrh r0, [r7, #0x16]
	ldr r4, [sp, #0x14]
	ldr r6, [sp, #0x18]
	tst r0, #0x600
	beq _0203B3B4
	ldr lr, _0203B870 ; =0x00001333
	tst r0, #0x200
	umull ip, r8, sb, lr
	asr r2, sb, #0x1f
	ldr r1, [r7, #0x3c]
	movne r3, #1
	mla r8, r2, lr, r8
	moveq r3, #0
	adds r2, ip, #0x800
	add r0, sp, #0x1c
	str r1, [sp]
	stmib sp, {r0, r3}
	ldr r0, _0203B854 ; =0x02099EF0
	ldr r1, [r5, #0x84]
	ldr r0, [r0]
	adc r8, r8, #0
	lsr r2, r2, #0xc
	add r3, sp, #0x14
	orr r2, r2, r8, lsl #20
	bl FUN_02148E5C
	cmp r0, #0
	ldrne r4, [sp, #0x1c]
	ldr r1, [sp, #0x14]
	ldrne r6, [sp, #0x20]
	ldr r0, [sp, #0x18]
	sub r1, r1, r4
	sub r0, r0, r6
	bl FUN_02009a98
	strh r0, [r7, #0x40]
	b _0203B408
_0203B3B4:
	asr r0, r8, #4
	lsl r0, r0, #1
	add r1, r0, #1
	lsl r2, r1, #1
	lsl r1, r0, #1
	ldr r3, _0203B874 ; =0x02087874
	ldr r0, [r7, #0x3c]
	ldrsh r2, [r3, r2]
	ldrsh r1, [r3, r1]
	smull r8, r3, r0, r2
	smull r2, r1, r0, r1
	adds r8, r8, #0x800
	adc r0, r3, #0
	lsr r3, r8, #0xc
	orr r3, r3, r0, lsl #20
	add r4, r4, r3
	adds r2, r2, #0x800
	adc r0, r1, #0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	add r6, r6, r1
_0203B408:
	ldr r1, [r5, #0x84]
	ldr r0, [r1]
	cmp r4, r0
	bne _0203B424
	ldr r0, [r1, #4]
	cmp r6, r0
	beq _0203B490
_0203B424:
	ldr r1, [r5, #0x88]
	ldr r0, [r1]
	cmp r0, #0x80000000
	ldrne r0, [r1, #4]
	cmpne r0, #0x80000000
	beq _0203B490
	str r4, [r1]
	ldr r0, [r5, #0x88]
	ldr r4, _0203B854 ; =0x02099EF0
	str r6, [r0, #4]
	ldr r1, [r5, #0x84]
	ldrh r0, [r7, #0x16]
	ldrb r2, [r1, #0x1d]
	mov r1, r5
	mov r3, sb
	str r0, [sp]
	ldr r0, [r4]
	bl FUN_02147EC8
	ldr r0, _0203B858 ; =0x0209A2C0
	ldrsh r1, [r5, #0x94]
	ldr r0, [r0, #0x48]
	cmp r1, r0
	bne _0203B4DC
	ldr r0, [r4]
	mov r1, r5
	bl FUN_0212FAB8
	b _0203B4DC
_0203B490:
	ldr r0, [sp, #0xc]
	ldr r4, _0203B850 ; =0x02099F14
	cmp r0, #0
	mov r6, #0
	beq _0203B4DC
	ldrsb r1, [r7]
	mov r0, #0x58
	mla r0, r1, r0, sl
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0xd6]
	tst r0, #8
	bne _0203B4DC
	ldr r0, [r5, #0x84]
	mov r1, r5
	ldrb r3, [r0, #0x1a]
	ldrb r2, [r0, #0x1d]
	str r6, [sp]
	ldr r0, [r4]
	bl FUN_020E3C14
_0203B4DC:
	ldrsh r2, [r7, #0x48]
	mov r1, #0
	cmp r2, #0
	beq _0203B528
	ble _0203B510
	add r0, sl, #0x1000
	ldr r0, [r0, #0x3e0]
	lsl r0, r0, #0x10
	sub r0, r2, r0, asr #16
	strh r0, [r7, #0x48]
	ldrsh r0, [r7, #0x48]
	cmp r0, #0
	strhle r1, [r7, #0x48]
_0203B510:
	add r0, sl, #0x1000
	ldr r2, [r7, #0x3c]
	ldr r1, [r7, #0x44]
	ldr r0, [r0, #0x3e0]
	mla r0, r1, r0, r2
	str r0, [r7, #0x3c]
_0203B528:
	mov r0, sl
	mov r1, r5
	mov r2, r7
	bl FUN_0203c75c
	ldrsh r2, [r7, #0x38]
	cmp r2, #0
	beq _0203B5B0
	cmp r2, #0
	mov r1, #1
	ble _0203B574
	add r0, sl, #0x1000
	ldr r0, [r0, #0x3e0]
	lsl r0, r0, #0x10
	sub r0, r2, r0, asr #16
	strh r0, [r7, #0x38]
	ldrsh r0, [r7, #0x38]
	cmp r0, #0
	movle r0, #0
	strhle r0, [r7, #0x38]
_0203B574:
	add r0, sl, #0x1000
	ldrsh r2, [r7, #0x36]
	ldr r0, [r0, #0x3e0]
	ldrh r3, [r7, #0x34]
	mul r0, r2, r0
	lsl r0, r0, #0x10
	add r0, r3, r0, lsr #16
	strh r0, [r7, #0x34]
	ldrh r2, [r7, #0x34]
	cmp r2, #0
	strheq r1, [r7, #0x34]
	beq _0203B5B0
	ldr r0, _0203B878 ; =0x00002710
	cmp r2, r0
	strhhi r0, [r7, #0x34]
_0203B5B0:
	ldrh r0, [r7, #0x16]
	tst r0, #0x4000
	beq _0203B68C
	mov r8, #0
	b _0203B684
_0203B5C4:
	ldr r0, _0203B854 ; =0x02099EF0
	mov r1, r8
	ldr r0, [r0]
	bl FUN_0213922C
	movs r6, r0
	cmpne r6, r5
	beq _0203B680
	bl FUN_0206d5f0
	mov r4, r0
	mov r0, r5
	bl FUN_0206d5f0
	cmp r4, r0
	beq _0203B680
	ldr r0, [r6, #0x84]
	add r1, sp, #0x14
	ldr r2, [r0, #4]
	ldr r0, [r0]
	mov r3, r1
	str r2, [sp, #0x18]
	str r0, [sp, #0x14]
	ldr r0, [r7, #0x18]
	str r0, [sp]
	ldr r0, _0203B854 ; =0x02099EF0
	ldr r2, [r5, #0x84]
	ldr r0, [r0]
	bl FUN_021488A0
	ldr r0, [sp, #0x14]
	cmp r0, #0x80000000
	ldreq r0, [sp, #0x18]
	cmpeq r0, #0x80000000
	beq _0203B680
	mov r0, #0x58
	mla r0, r8, r0, sl
	ldr r4, [sp, #0x18]
	ldr r3, [sp, #0x14]
	ldr r2, [r6, #0x88]
	add r0, r0, #0x3a00
	stm r2, {r3, r4}
	ldr r2, [r6, #0x84]
	ldrh r0, [r0, #0xd6]
	ldrb r2, [r2, #0x1d]
	mov r1, r6
	mov r3, sb
	str r0, [sp]
	ldr r0, _0203B854 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_02147EC8
_0203B680:
	add r8, r8, #1
_0203B684:
	cmp r8, #0x16
	blt _0203B5C4
_0203B68C:
	ldrh r0, [r7, #0x16]
	ldr r6, _0203B850 ; =0x02099F14
	mov r4, #0
	tst r0, #0x1000
	beq _0203B71C
	mov r8, r4
	add r0, sl, #0x1000
	b _0203B6D8
_0203B6AC:
	ldr r2, [r7, #0x20]
	ldr r1, [r7, #0x1c]
	add r3, r2, r1
	str r3, [r7, #0x20]
	ldr r2, [r7, #0x1c]
	ldr r1, [r7, #0x24]
	cmp r3, #0
	sub r1, r2, r1
	str r1, [r7, #0x1c]
	ble _0203B6E4
	add r8, r8, #1
_0203B6D8:
	ldr r1, [r0, #0x3e0]
	cmp r8, r1
	blo _0203B6AC
_0203B6E4:
	ldr r1, [r7, #0x20]
	mov r0, #0
	cmp r1, #0
	bgt _0203B710
	str r0, [r7, #0x20]
	str r0, [r7, #0x1c]
	str r0, [r7, #0x24]
	ldrh r1, [r7, #0x16]
	ldr r0, _0203B87C ; =0x0000EFFF
	and r0, r1, r0
	strh r0, [r7, #0x16]
_0203B710:
	ldr r1, [r7, #0x20]
	ldr r0, [r5, #0x84]
	str r1, [r0, #8]
_0203B71C:
	ldrh r0, [r7, #0x16]
	tst r0, #0x800
	beq _0203B7C0
	ldrsh r1, [r7, #0x30]
	cmp r1, #0
	ble _0203B754
	add r0, sl, #0x1000
	ldr r0, [r0, #0x3e0]
	lsl r0, r0, #0x10
	sub r0, r1, r0, asr #16
	strh r0, [r7, #0x30]
	ldrsh r0, [r7, #0x30]
	cmp r0, #0
	strhle r4, [r7, #0x30]
_0203B754:
	ldr r1, [r5, #0x84]
	add r0, sl, #0x1000
	ldrh r8, [r1, #0x18]
	ldr r2, [r0, #0x3e0]
	ldr r3, [r7, #0x2c]
	add r0, r8, #0xff
	add r0, r0, #0xff00
	mla r0, r3, r2, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	strh r0, [r1, #0x18]
	bl FUN_020EFD3C
	ldr r2, [r5, #0x84]
	mov r1, r5
	strb r0, [r2, #0x1a]
	ldr r0, [r5, #0x84]
	ldrb r3, [r0, #0x1a]
	ldrb r2, [r0, #0x1d]
	str r4, [sp]
	ldr r0, [r6]
	bl FUN_020E3C14
	ldrsh r0, [r7, #0x30]
	cmp r0, #0
	ldrheq r1, [r7, #0x16]
	ldreq r0, _0203B880 ; =0x0000F7FF
	andeq r0, r1, r0
	strheq r0, [r7, #0x16]
_0203B7C0:
	ldrh r0, [r7, #0x16]
	tst r0, #0x2000
	beq _0203B83C
	ldr r2, [r5, #0x84]
	ldrb r0, [r7, #0x28]
	ldrb r1, [r2, #0x1d]
	cmp r0, r1
	beq _0203B7F8
	ldrb r3, [r2, #0x1a]
	mov r1, r5
	str r4, [sp]
	ldrb r2, [r7, #0x28]
	ldr r0, [r6]
	bl FUN_020E3C14
_0203B7F8:
	ldrsh r1, [r7, #0x2a]
	cmp r1, #0
	ble _0203B824
	add r0, sl, #0x1000
	ldr r0, [r0, #0x3e0]
	lsl r0, r0, #0x10
	sub r0, r1, r0, asr #16
	strh r0, [r7, #0x2a]
	ldrsh r0, [r7, #0x2a]
	cmp r0, #0
	strhle r4, [r7, #0x2a]
_0203B824:
	ldrsh r0, [r7, #0x2a]
	cmp r0, #0
	ldrheq r1, [r7, #0x16]
	ldreq r0, _0203B884 ; =0x0000DFFF
	andeq r0, r1, r0
	strheq r0, [r7, #0x16]
_0203B83C:
	add fp, fp, #1
_0203B840:
	cmp fp, #0x16
	blt _0203AF44
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203B850: .word 0x02099F14
_0203B854: .word 0x02099EF0
_0203B858: .word 0x0209A2C0
_0203B85C: .word 0x02099EC0
_0203B860: .word 0x51EB851F
_0203B864: .word 0x02099F58
_0203B868: .word 0x02099F38
_0203B86C: .word 0x0000FFFB
_0203B870: .word 0x00001333
_0203B874: .word 0x02087874
_0203B878: .word 0x00002710
_0203B87C: .word 0x0000EFFF
_0203B880: .word 0x0000F7FF
_0203B884: .word 0x0000DFFF

	arm_func_start FUN_0203b888
FUN_0203b888: ; 0x0203B888
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, _0203B9EC ; =0x02099F14
	mov sl, r0
	ldr r0, [r4]
	mov r1, #0xc
	bl FUN_020E500C
	mov r7, r0
	ldr r0, [r4]
	mov r1, #5
	bl FUN_020E500C
	mov r6, #0
	mov fp, #1
	ldr r5, _0203B9F0 ; =0x02099F58
	ldr r4, _0203B9F4 ; =0x02099F38
	b _0203B9C0
	arm_func_end FUN_0203b888
_0203B8C4:
	mov r0, #0x58
	mla r0, r6, r0, sl
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0xd6]
	tst r0, #1
	beq _0203B9BC
	ldr r0, _0203B9F8 ; =0x02099EC0
	add r1, r6, #1
	ldr r0, [r0]
	bl FUN_020571e0
	mov r8, r0
	ldr r0, [r5]
	mov r1, r8
	mov r2, #2
	mov r3, fp
	bl FUN_02116CB4
	str fp, [sp]
	ldr r0, [r4]
	mov r1, r7
	add r2, r6, #1
	mov r3, #2
	bl FUN_02113EC0
	ldr r0, [r5]
	mov r1, r8
	mov r2, #0x1f
	bl FUN_02116D94
	ldr r0, [r4]
	mov r1, r7
	add r2, r6, #1
	mov r3, #0x10
	bl FUN_02113A80
	ldr r0, _0203B9FC ; =0x02099EF0
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0213922C
	movs r8, r0
	beq _0203B9BC
	ldr r1, [r8, #0x84]
	cmp r1, #0
	movne r0, #0
	strne r0, [r1, #8]
	ldr r0, _0203BA00 ; =0x0209BA20
	mov r1, r8
	bl FUN_0204fb20
	movs sb, r0
	beq _0203B9BC
	ldr r2, [r8, #0x88]
	ldrh r0, [sb, #0x30]
	ldrh r1, [r2, #0x1e]
	add r0, r0, r1
	strh r0, [r2, #0x1e]
	ldrb r0, [sb, #0x32]
	cmp r0, #0
	beq _0203B9A8
	mov r0, r8
	mov r1, #0x100
	bl FUN_0206dac4
_0203B9A8:
	mov r0, #0x80000000
	str r0, [sb, #0x28]
	str r0, [sb, #0x2c]
	mov r0, #0
	strb r0, [sb, #0x24]
_0203B9BC:
	add r6, r6, #1
_0203B9C0:
	cmp r6, #0x16
	blt _0203B8C4
	ldr r0, _0203B9EC ; =0x02099F14
	mov r1, #0x1f
	ldr r0, [r0]
	bl FUN_020E19C0
	add r0, sl, #0x3ac0
	mov r1, #0
	mov r2, #0x790
	bl MemWrite
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203B9EC: .word 0x02099F14
_0203B9F0: .word 0x02099F58
_0203B9F4: .word 0x02099F38
_0203B9F8: .word 0x02099EC0
_0203B9FC: .word 0x02099EF0
_0203BA00: .word 0x0209BA20

	arm_func_start FUN_0203ba04
FUN_0203ba04: ; 0x0203BA04
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov fp, r2
	mov r8, #0
	mov sb, r1
	mov r1, r8
	add r0, sl, #0x3ac0
	mov r2, #0x790
	bl MemWrite
	ldr r0, _0203BBE4 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_02159DF0
	cmp r0, #0
	beq _0203BA44
	bl FUN_0215A3EC
	mov r8, r0
	arm_func_end FUN_0203ba04
_0203BA44:
	add r0, sl, #0xd6
	mov r6, #0
	add r5, r0, #0x3a00
	mvn r4, #1
	b _0203BB94
_0203BA58:
	ldr r0, _0203BBE4 ; =0x02099EF0
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0213922C
	movs r7, r0
	beq _0203BB90
	bl FUN_0206d688
	cmp r0, #0
	beq _0203BB90
	mov r0, #0x58
	mla r0, r6, r0, sl
	add r2, r0, #0x3a00
	add r1, r0, #0x3000
	mov r0, #3
	strh r0, [r2, #0xd6]
	mov r0, #0x1f000
	str r0, [r1, #0xacc]
	mov r0, #0x64
	strh r0, [r2, #0xf4]
	mov r0, r7
	bl FUN_0206d5f0
	cmp r8, r0
	bne _0203BAD8
	mov r0, #0x58
	mul r0, r6, r0
	add r1, sl, r0
	add r2, r1, #0x3000
	mov r1, #4
	strb r1, [r2, #0xac8]
	ldrh r1, [r5, r0]
	orr r1, r1, #0x100
	strh r1, [r5, r0]
_0203BAD8:
	mov r0, #0x58
	mla r0, r6, r0, sl
	add r1, r0, #0x3000
	mov r0, #0
	strb r0, [r1, #0xac9]
	mov r0, r7
	bl FUN_0206d5f0
	cmp r0, #0
	mov r0, #0x58
	mla r0, r6, r0, sl
	add r1, r4, #1
	movne r1, r4
	add r0, r0, #0x3000
	strb r1, [r0, #0xad4]
	ldr r0, _0203BBE8 ; =0x0209BA20
	mov r1, r7
	bl FUN_0204fb20
	cmp r0, #0
	beq _0203BB90
	cmp sb, #0
	beq _0203BB4C
	ldr r1, [r7, #0x84]
	ldr r2, [r1, #4]
	ldr r1, [r1]
	str r1, [r0, #0x28]
	str r2, [r0, #0x2c]
	ldr r1, [r7, #0x84]
	ldrb r1, [r1, #0x1a]
	strb r1, [r0, #0x24]
_0203BB4C:
	cmp fp, #0
	beq _0203BB78
	ldr r1, [r7, #0x88]
	ldrh r1, [r1, #0x1e]
	strh r1, [r0, #0x30]
	ldr r1, [r7, #0x84]
	ldrh r1, [r1, #0x16]
	tst r1, #0x100
	movne r1, #1
	moveq r1, #0
	strb r1, [r0, #0x32]
_0203BB78:
	ldr r2, [r7, #0x88]
	mov r1, #0
	strh r1, [r2, #0x1e]
	mov r0, r7
	mov r1, #0x100
	bl FUN_0206dadc
_0203BB90:
	add r6, r6, #1
_0203BB94:
	cmp r6, #0x16
	blt _0203BA58
	mov r3, #0
	add r1, sl, #0x1300
	add r0, sl, #0x1000
	mov r5, #2
	mov r4, #0x1f000
	ldr r2, _0203BBE4 ; =0x02099EF0
	strh r3, [r1, #0xcc]
	strb r5, [r0, #0x3c0]
	str r4, [r0, #0x3c4]
	strb r3, [r0, #0x3c1]
	ldr r0, [r2]
	bl FUN_02149B0C
	ldr r0, _0203BBEC ; =0x02099F14
	ldr r0, [r0]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_020E3B14
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203BBE4: .word 0x02099EF0
_0203BBE8: .word 0x0209BA20
_0203BBEC: .word 0x02099F14

	arm_func_start FUN_0203bbf0
FUN_0203bbf0: ; 0x0203BBF0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr r5, _0203BD44 ; =0x02099EF0
	str r0, [sp]
	ldr r0, [r5]
	mov sl, r1
	cmp r0, #0
	str r3, [sp, #4]
	mov sb, r2
	addeq sp, sp, #8
	moveq r0, #0x16
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, #0
	addeq sp, sp, #8
	moveq r0, #0x16
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp]
	mov r7, #0
	add r6, r0, #0x3ac0
	mov fp, #0x58
	mvn r4, #0
	arm_func_end FUN_0203bbf0
_0203BC44:
	ldr r0, [r5]
	mov r1, r7
	bl FUN_0213922C
	cmp r0, #0
	ldrshne r1, [r0, #0x94]
	cmpne r1, r4
	ble _0203BD2C
	ldrsh r0, [sl, #0x94]
	cmp r1, r0
	bne _0203BD2C
	mul r0, r7, fp
	adds r8, r6, r0
	beq _0203BD2C
	ldrh r0, [r8, #0x16]
	cmn sb, #1
	orr r0, r0, #4
	strh r0, [r8, #0x16]
	bne _0203BC98
	ldr r0, [r8, #0xc]
	cmp r0, #0
	ble _0203BCAC
_0203BC98:
	cmp sb, #1
	bne _0203BCB4
	ldr r0, [r8, #0xc]
	cmp r0, #0x1f000
	blt _0203BCB4
_0203BCAC:
	mov r0, #0
	str r0, [sp, #4]
_0203BCB4:
	ldr r0, [sp, #4]
	strh r0, [r8, #0xa]
	cmp r0, #0
	bgt _0203BD0C
	mov r4, #0
	strh r4, [r8, #0xa]
	sub r0, r4, #1
	str sb, [r8, #0x10]
	cmp sb, r0
	bne _0203BCF4
	ldr r0, [sp]
	mov r1, r7
	mov r2, #2
	bl FUN_0203c86c
	str r4, [r8, #0xc]
	b _0203BD20
_0203BCF4:
	ldrh r1, [r8, #0x16]
	mov r0, #0x1f000
	orr r1, r1, #2
	strh r1, [r8, #0x16]
	str r0, [r8, #0xc]
	b _0203BD20
_0203BD0C:
	mov r1, r0
	mov r0, #0x1f000
	bl FUN_0201f9bc
	mul r1, r0, sb
	str r1, [r8, #0x10]
_0203BD20:
	add sp, sp, #8
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203BD2C:
	add r7, r7, #1
	cmp r7, #0x16
	blt _0203BC44
	mov r0, #0x16
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203BD44: .word 0x02099EF0

	arm_func_start FUN_0203bd48
FUN_0203bd48: ; 0x0203BD48
	push {r4, lr}
	add r2, r1, #2
	cmp r2, #1
	mov r2, #0
	bhi _0203BDA0
	lsl r1, r1, #0x18
	asr lr, r1, #0x18
	mov r4, r2
	mov r1, #0x58
	arm_func_end FUN_0203bd48
_0203BD6C:
	mla r3, r4, r1, r0
	add r3, r3, #0x3a00
	ldrsb ip, [r3, #0xd4]
	cmp lr, ip
	bne _0203BD90
	ldrh r3, [r3, #0xd6]
	tst r3, #4
	movne r2, #1
	bne _0203BDC4
_0203BD90:
	add r4, r4, #1
	cmp r4, #0x16
	blt _0203BD6C
	b _0203BDC4
_0203BDA0:
	cmp r1, #0x16
	moveq r0, r2
	popeq {r4, pc}
	mov r3, #0x58
	mla r0, r1, r3, r0
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0xd6]
	tst r0, #4
	movne r2, #1
_0203BDC4:
	mov r0, r2
	pop {r4, pc}

	arm_func_start FUN_0203bdcc
FUN_0203bdcc: ; 0x0203BDCC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	ldr r6, _0203BF30 ; =0x02099EF0
	mov fp, r0
	ldr r0, [r6]
	str r2, [sp, #4]
	cmp r0, #0
	str r3, [sp, #8]
	addeq sp, sp, #0x14
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r8, #0
	mov r0, r1
	mov r1, r8
	bl FUN_020EFA9C
	mov sb, r0
	add r7, fp, #0x3ac0
	mov r4, #0x58
	mvn r5, #0
	arm_func_end FUN_0203bdcc
_0203BE18:
	ldr r0, [r6]
	mov r1, r8
	bl FUN_0213922C
	cmp r0, #0
	ldrshne r1, [r0, #0x94]
	cmpne r1, r5
	ble _0203BF18
	ldrsh r0, [sb, #0x94]
	cmp r1, r0
	bne _0203BF18
	mul r0, r8, r4
	adds sl, r7, r0
	beq _0203BF18
	mov r0, sb
	bl FUN_0206da98
	ldrh r0, [sl, #0x16]
	ldr r4, [sb, #0x88]
	mov r1, r8
	tst r0, #8
	orreq r0, r0, #8
	strheq r0, [sl, #0x16]
	ldrbeq r0, [sl, #8]
	mov r2, #0x10
	addeq r0, r0, #1
	strbeq r0, [sl, #8]
	mov r0, fp
	bl FUN_0203c86c
	mov r0, fp
	mov r1, r8
	mov r2, #0x40
	bl FUN_0203c86c
	mov r5, #0
	mov r0, sl
	mov r1, r5
	mov r2, #8
	bl MemWrite
	mov r1, r5
	mov r5, #0xc
	add r0, sl, #0x3c
	mov r2, r5
	bl MemWrite
	ldr r1, [sp, #0x38]
	ldr r0, _0203BF30 ; =0x02099EF0
	str r1, [sp]
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	ldr r0, [r0]
	add r1, sp, #0xc
	bl FUN_02148610
	cmp r0, #0
	addeq sp, sp, #0x14
	subeq r0, r5, #0xd
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #0xc]
	mov r0, r8
	str r1, [r4]
	ldr r1, [sp, #0x10]
	str r1, [r4, #4]
	ldr r1, [sp, #0xc]
	str r1, [sl, #0x3c]
	ldr r1, [sp, #0x10]
	add sp, sp, #0x14
	str r1, [sl, #0x40]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203BF18:
	add r8, r8, #1
	cmp r8, #0x16
	blt _0203BE18
	mvn r0, #0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203BF30: .word 0x02099EF0

	arm_func_start FUN_0203bf34
FUN_0203bf34: ; 0x0203BF34
	cmn r1, #1
	ble _0203BF44
	cmp r1, #0x16
	blt _0203BF4C
	arm_func_end FUN_0203bf34
_0203BF44:
	mov r0, #0
	bx lr
_0203BF4C:
	mov r2, #0x58
	mla r0, r1, r2, r0
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0xd6]
	tst r0, #8
	movne r0, #1
	moveq r0, #0
	bx lr

	arm_func_start FUN_0203bf6c
FUN_0203bf6c: ; 0x0203BF6C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r4, _0203C224 ; =0x02099EF0
	mov sl, r0
	ldr r0, [r4]
	ldr fp, [sp, #0x34]
	cmp r0, #0
	str r3, [sp, #4]
	mov r4, r2
	addeq sp, sp, #0xc
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r1, r4
	addeq sp, sp, #0xc
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r8, #0x16
	sub r0, r8, #0x17
	cmp r1, r0
	movle r6, r0
	mov sb, r8
	movle r8, r6
	ble _0203BFE8
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	addeq sp, sp, #0xc
	subeq r0, r8, #0x17
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsh r6, [r0, #0x94]
	arm_func_end FUN_0203bf6c
_0203BFE8:
	mov r5, #0
	mov r0, r4
	mov r1, r5
	bl FUN_020EFA9C
	str r0, [sp, #8]
	cmp r0, #0
	addeq sp, sp, #0xc
	subeq r0, r5, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsh r7, [r0, #0x94]
	mvn r4, #0
	b _0203C050
_0203C018:
	ldr r0, _0203C224 ; =0x02099EF0
	mov r1, r5
	ldr r0, [r0]
	bl FUN_0213922C
	cmp r0, #0
	ldrshne r1, [r0, #0x94]
	cmpne r1, r4
	ble _0203C04C
	ldrsh r0, [r0, #0x94]
	cmp r1, r6
	moveq r8, r5
	cmp r0, r7
	moveq sb, r5
_0203C04C:
	add r5, r5, #1
_0203C050:
	cmp r5, #0x16
	blt _0203C018
	cmp r8, #0x16
	cmpne sb, #0x16
	addeq sp, sp, #0xc
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #8]
	bl FUN_0206da98
	mov r1, #0x58
	mul r0, sb, r1
	add r2, sl, #0x3ac0
	adds r4, r2, r0
	addeq sp, sp, #0xc
	sub r0, r1, #0x59
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r6, r0
	bne _0203C104
	mov r0, sl
	mov r1, sb
	mov r2, #0x10
	bl FUN_0203c86c
	mov r0, sl
	mov r1, sb
	mov r2, #0x20
	bl FUN_0203c86c
	mov r0, sl
	mov r1, sb
	mov r2, #0x40
	bl FUN_0203c86c
	mov r5, #0
	mov r6, #0xc
	add r0, r4, #0x3c
	mov r1, r5
	mov r2, r6
	bl MemWrite
	mov r0, r4
	mov r1, r5
	mov r2, #8
	bl MemWrite
	add r0, r4, #0x3c
	mov r2, r6
	mov r1, r5
	bl MemWrite
	b _0203C1F0
_0203C104:
	ldrh r0, [r4, #0x16]
	tst r0, #0x10
	bne _0203C128
	orr r0, r0, #0x10
	strh r0, [r4, #0x16]
	ldrb r0, [r4, #8]
	add r0, r0, #2
	strb r0, [r4, #8]
	b _0203C144
_0203C128:
	ldrsb r2, [r4]
	add r0, sl, #0x2c8
	add r3, r0, #0x3800
	mul r1, r2, r1
	ldrb r0, [r3, r1]
	sub r0, r0, #3
	strb r0, [r3, r1]
_0203C144:
	mov r0, sl
	mov r1, sb
	mov r2, #8
	bl FUN_0203c86c
	mov r0, sl
	mov r1, sb
	mov r2, #0x40
	bl FUN_0203c86c
	ldr r6, [sp, #0x30]
	ldr r0, [sp, #4]
	ldr r2, _0203C228 ; =0xB60B60B7
	lsl r7, r6, #0x10
	lsl r5, r0, #0xc
	smull r1, r0, r2, r7
	cmp fp, #1
	mov r3, #0x58
	add r0, r0, r6, lsl #16
	lsr r1, r7, #0x1f
	add r0, r1, r0, asr #8
	strb r8, [r4]
	strh r0, [r4, #0x40]
	add r0, sl, #0x2c8
	str r5, [r4, #0x3c]
	mul r1, r8, r3
	add r2, r0, #0x3800
	ldrb r0, [r2, r1]
	mov r5, #1
	moveq fp, #0x200
	add r0, r0, #3
	strb r0, [r2, r1]
	beq _0203C1CC
	cmp fp, #2
	moveq fp, #0x400
	movne fp, #0
_0203C1CC:
	mov r0, sl
	mov r1, sb
	mov r2, fp
	bl FUN_0203cd48
	ldr r0, [sp, #0x38]
	cmp r0, #0
	ldrheq r0, [r4, #0x16]
	orreq r0, r0, #0x40
	strheq r0, [r4, #0x16]
_0203C1F0:
	ldr r0, [sp, #8]
	mov r2, #1
	ldr r0, [r0, #0x84]
	ldr r1, [sp, #8]
	ldrb r3, [r0, #0x1a]
	ldr r0, _0203C22C ; =0x02099F14
	str r2, [sp]
	ldr r0, [r0]
	mov r2, r5
	bl FUN_020E3C14
	mov r0, sb
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203C224: .word 0x02099EF0
_0203C228: .word 0xB60B60B7
_0203C22C: .word 0x02099F14

	arm_func_start FUN_0203c230
FUN_0203c230: ; 0x0203C230
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	mov r8, #0
	mov r4, r0
	mov r0, r1
	mov r1, r8
	mov sl, r2
	mov r7, r3
	ldr sb, [sp, #0x3c]
	bl FUN_020EFA9C
	movs r6, r0
	ldrne r0, _0203C3EC ; =0x0209A7FC
	cmpne r0, #0
	addeq sp, sp, #0xc
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, [sp, #0x30]
	ldr r5, _0203C3F0 ; =0x02099EF0
	str r0, [sp]
	ldr r0, [r5]
	add r1, sp, #4
	mov r2, sl
	mov r3, r7
	bl FUN_02148610
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, r6
	bl FUN_0206da98
	sub r7, r8, #1
	mvn sl, #0
	b _0203C2D8
	arm_func_end FUN_0203c230
_0203C2AC:
	ldr r0, [r5]
	mov r1, r8
	bl FUN_0213922C
	cmp r0, #0
	ldrshne r1, [r0, #0x94]
	cmpne r1, sl
	ble _0203C2D4
	ldrsh r0, [r6, #0x94]
	cmp r1, r0
	moveq r7, r8
_0203C2D4:
	add r8, r8, #1
_0203C2D8:
	cmp r8, #0x16
	blt _0203C2AC
	cmn r7, #1
	addle sp, sp, #0xc
	pople {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r1, #0x58
	mul r0, r7, r1
	add r2, r4, #0x3ac0
	adds r5, r2, r0
	addeq sp, sp, #0xc
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldrh r0, [r5, #0x16]
	tst r0, #0x10
	bne _0203C328
	orr r0, r0, #0x20
	strh r0, [r5, #0x16]
	ldrb r0, [r5, #8]
	add r0, r0, #2
	strb r0, [r5, #8]
	b _0203C360
_0203C328:
	ldrsb r2, [r5]
	add r0, r4, #0x2c8
	add r6, r0, #0x3800
	mul r3, r2, r1
	ldrb r1, [r6, r3]
	ldr r0, _0203C3F4 ; =0x0000FFEF
	sub r1, r1, #3
	strb r1, [r6, r3]
	ldrh r1, [r5, #0x16]
	and r0, r1, r0
	strh r0, [r5, #0x16]
	ldrh r0, [r5, #0x16]
	orr r0, r0, #0x20
	strh r0, [r5, #0x16]
_0203C360:
	mov r0, r4
	mov r1, r7
	mov r2, #8
	bl FUN_0203c86c
	mov r0, r4
	mov r1, r7
	mov r2, #0x40
	bl FUN_0203c86c
	ldr r6, [sp, #0x38]
	cmp sb, #1
	lsl r1, r6, #0x10
	ldr r2, _0203C3F8 ; =0xB60B60B7
	lsr r0, r1, #0x1f
	smull r1, r8, r2, r1
	add r8, r8, r6, lsl #16
	add r8, r0, r8, asr #8
	ldr r3, [sp, #0x34]
	strh r8, [r5, #0x40]
	lsl r0, r3, #0xc
	str r0, [r5, #0x3c]
	ldr r0, [sp, #4]
	moveq sb, #0x200
	str r0, [r5]
	ldr r0, [sp, #8]
	str r0, [r5, #4]
	beq _0203C3D4
	cmp sb, #2
	moveq sb, #0x400
	movne sb, #0
_0203C3D4:
	mov r0, r4
	mov r1, r7
	mov r2, sb
	bl FUN_0203cd48
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0203C3EC: .word 0x0209A7FC
_0203C3F0: .word 0x02099EF0
_0203C3F4: .word 0x0000FFEF
_0203C3F8: .word 0xB60B60B7

	arm_func_start FUN_0203c3fc
FUN_0203c3fc: ; 0x0203C3FC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, _0203C4E0 ; =0x02099EF0
	str r0, [sp]
	ldr r0, [r4]
	mov sl, r1
	cmp r0, #0
	mov sb, r2
	mov fp, r3
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, sb
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mvn r7, #0
	mov r8, r7
	mov r6, #0
	arm_func_end FUN_0203c3fc
_0203C43C:
	ldr r0, [r4]
	mov r1, r6
	bl FUN_0213922C
	movs r5, r0
	beq _0203C470
	bl FUN_0206cbf8
	cmp sl, r0
	moveq r7, r6
	beq _0203C470
	mov r0, r5
	bl FUN_0206cbf8
	cmp sb, r0
	moveq r8, r6
_0203C470:
	add r6, r6, #1
	cmp r6, #0x16
	blt _0203C43C
	mvn r0, #0
	cmp r7, r0
	cmpne r8, r0
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r1, #0x58
	mul r2, r7, r1
	ldr r1, [sp]
	add r1, r1, #0x3ac0
	adds r2, r1, r2
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r0, [r2, #0x16]
	cmp fp, #0
	orr r0, r0, #0x80
	strh r0, [r2, #0x16]
	strb r8, [r2, #0x50]
	blt _0203C4C8
	cmp fp, #1
	ble _0203C4CC
_0203C4C8:
	mov fp, #0
_0203C4CC:
	strb fp, [r2, #0x4d]
	mov r1, #0
	mov r0, r7
	strb r1, [r2, #0x4c]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203C4E0: .word 0x02099EF0

	arm_func_start FUN_0203c4e4
FUN_0203c4e4: ; 0x0203C4E4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	ldr r5, _0203C5D0 ; =0x02099EF0
	mov sl, r1
	ldr r1, [r5]
	ldr sb, [sp, #0x38]
	cmp r1, #0
	str r3, [sp, #4]
	mov fp, r2
	addeq sp, sp, #0x10
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r8, #0
	add r6, r0, #0x3ac0
	mov r4, #0x58
	arm_func_end FUN_0203c4e4
_0203C520:
	ldr r0, [r5]
	mov r1, r8
	bl FUN_0213922C
	cmp r0, #0
	beq _0203C5B8
	bl FUN_0206cbf8
	cmp sl, r0
	bne _0203C5B8
	mul r0, r8, r4
	adds r7, r6, r0
	beq _0203C5B8
	ldr r1, [sp, #0x3c]
	ldr r0, _0203C5D0 ; =0x02099EF0
	str r1, [sp]
	ldr r0, [r0]
	ldr r3, [sp, #4]
	add r1, sp, #8
	mov r2, fp
	bl FUN_02148610
	cmp r0, #0
	ldrne r0, [sp, #8]
	strne r0, [r7, #0x50]
	ldrne r0, [sp, #0xc]
	strne r0, [r7, #0x54]
	ldrh r0, [r7, #0x16]
	cmp sb, #0
	orr r0, r0, #0x80
	strh r0, [r7, #0x16]
	blt _0203C59C
	cmp sb, #1
	ble _0203C5A0
_0203C59C:
	mov sb, #0
_0203C5A0:
	strb sb, [r7, #0x4d]
	mov r1, #1
	add sp, sp, #0x10
	mov r0, r8
	strb r1, [r7, #0x4c]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203C5B8:
	add r8, r8, #1
	cmp r8, #0x16
	blt _0203C520
	mvn r0, #0
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203C5D0: .word 0x02099EF0

	arm_func_start FUN_0203c5d4
FUN_0203c5d4: ; 0x0203C5D4
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _0203C6B8 ; =0x02099EF0
	mov r7, r0
	ldr r0, [r1]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, _0203C6BC ; =0x0209A2C0
	mov r4, #1
	ldr r0, [r0, #0x4c]
	sub r5, r4, #2
	bl FUN_020EFA80
	movs r1, r0
	beq _0203C63C
	ldr r0, _0203C6C0 ; =0x02099F14
	ldr r0, [r0]
	bl FUN_020E2830
	mov r1, r5
	cmp r0, r1
	ble _0203C63C
	mov r1, #0x58
	mla r1, r0, r1, r7
	add r0, r1, #0x3b00
	ldrsb r4, [r0, #0xc]
	cmp r4, #0
	ldrsbeq r5, [r0, #0x10]
	arm_func_end FUN_0203c5d4
_0203C63C:
	ldr r0, _0203C6B8 ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_0212F530
	bl FUN_020EFA80
	movs r6, r0
	beq _0203C6B0
	ldr r0, _0203C6C0 ; =0x02099F14
	mov r1, r6
	ldr r0, [r0]
	bl FUN_020E2830
	cmn r0, #1
	movle r0, #0
	pople {r3, r4, r5, r6, r7, pc}
	mov r1, #0x58
	mla r1, r0, r1, r7
	add r1, r1, #0x3a00
	ldrh r1, [r1, #0xd6]
	tst r1, #2
	beq _0203C6B0
	cmp r4, #1
	beq _0203C69C
	cmp r4, #0
	cmpeq r5, r0
	bne _0203C6B0
_0203C69C:
	mov r0, r6
	bl FUN_0206d9f8
	cmp r0, #0
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, pc}
_0203C6B0:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0203C6B8: .word 0x02099EF0
_0203C6BC: .word 0x0209A2C0
_0203C6C0: .word 0x02099F14

	arm_func_start FUN_0203c6c4
FUN_0203c6c4: ; 0x0203C6C4
	cmn r1, #1
	ble _0203C6D4
	cmp r1, #0x16
	blt _0203C6DC
	arm_func_end FUN_0203c6c4
_0203C6D4:
	mov r0, #0
	bx lr
_0203C6DC:
	mov r2, #0x58
	mla r0, r1, r2, r0
	add r0, r0, #0x3a00
	ldrh r1, [r0, #0xd6]
	mov r0, #0
	mov r3, #1
	tst r1, #0x80
	bne _0203C730
	ldr r1, _0203C758 ; =0x0209A2C0
	mov ip, r0
	ldrb r2, [r1, #0x5a]
	cmp r2, #2
	beq _0203C728
	ldrb r1, [r1, #0x5b]
	tst r1, #1
	movne r1, r3
	moveq r1, r0
	cmp r1, #0
	moveq ip, #1
_0203C728:
	cmp ip, #0
	moveq r3, #0
_0203C730:
	cmp r3, #0
	bxeq lr
	ldr r1, _0203C758 ; =0x0209A2C0
	ldr r1, [r1, #0x48]
	cmp r1, #0
	movge r1, #1
	movlt r1, #0
	cmp r1, #0
	moveq r0, #1
	bx lr
	.align 2, 0_0203C758: .word 0x0209A2C0

	arm_func_start FUN_0203c75c
FUN_0203c75c: ; 0x0203C75C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr fp, _0203C868 ; =0x02099EF0
	mov r4, r0
	ldr r0, [fp]
	mov sl, r1
	mov sb, r2
	bl FUN_021434F8
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sl, #0
	cmpne sb, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrh r0, [sb, #0x16]
	tst r0, #2
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r5, r4, #0x3ac0
	mov r6, #0
	add r4, r4, #0x1300
	arm_func_end FUN_0203c75c
_0203C7B4:
	mov r0, #0x58
	mul r0, r6, r0
	adds r7, r5, r0
	beq _0203C854
	ldrh r0, [r7, #0x16]
	tst r0, #1
	beq _0203C854
	tst r0, #2
	beq _0203C854
	ldr r0, [fp]
	mov r1, r6
	bl FUN_0213922C
	movs r8, r0
	beq _0203C854
	bl FUN_0206d688
	cmp r0, #0
	beq _0203C854
	ldrb r1, [r7, #8]
	ldrsb r0, [r7, #9]
	adds r0, r1, r0
	movmi r0, #0
	bmi _0203C814
	cmp r0, #0xff
	movgt r0, #0xff
_0203C814:
	and r2, r0, #0xff
	ldrb r1, [sb, #8]
	ldrsb r0, [sb, #9]
	adds r1, r1, r0
	movmi r1, #0
	bmi _0203C834
	cmp r1, #0xff
	movgt r1, #0xff
_0203C834:
	str r2, [sp]
	ldrsh r0, [r4, #0xcc]
	mov r2, r8
	and r3, r1, #0xff
	str r0, [sp, #4]
	ldr r0, [fp]
	mov r1, sl
	bl FUN_02151958
_0203C854:
	add r6, r6, #1
	cmp r6, #0x16
	blt _0203C7B4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203C868: .word 0x02099EF0

	arm_func_start FUN_0203c86c
FUN_0203c86c: ; 0x0203C86C
	push {r3, r4, r5, lr}
	cmp r1, #0
	poplt {r3, r4, r5, pc}
	cmp r1, #0x16
	popge {r3, r4, r5, pc}
	mov lr, #0x58
	mul r3, r1, lr
	add r1, r0, #0xd6
	add r1, r1, #0x3a00
	ldrh r4, [r1, r3]
	and r4, r2, r4
	cmp r4, #0x20
	bgt _0203C8D4
	bge _0203C95C
	cmp r4, #8
	bgt _0203C8C8
	cmp r4, #2
	poplt {r3, r4, r5, pc}
	cmpne r4, #4
	beq _0203C970
	cmp r4, #8
	beq _0203C8F0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0203c86c
_0203C8C8:
	cmp r4, #0x10
	beq _0203C908
	pop {r3, r4, r5, pc}
_0203C8D4:
	cmp r4, #0x40
	bgt _0203C8E4
	beq _0203C970
	pop {r3, r4, r5, pc}
_0203C8E4:
	cmp r4, #0x80
	beq _0203C970
	pop {r3, r4, r5, pc}
_0203C8F0:
	add r0, r0, #0x2c8
	add r4, r0, #0x3800
	ldrb r0, [r4, r3]
	sub r0, r0, #1
	strb r0, [r4, r3]
	b _0203C970
_0203C908:
	add ip, r0, #0x2c8
	add r5, ip, #0x3800
	ldrb r4, [r5, r3]
	add ip, r0, r3
	add ip, ip, #0x3a00
	sub r4, r4, #2
	strb r4, [r5, r3]
	ldrsb r4, [ip, #0xc0]
	sub ip, lr, #0x59
	cmp r4, ip
	bgt _0203C93C
	cmp r4, #0x16
	bge _0203C970
_0203C93C:
	mov ip, #0x58
	mul ip, r4, ip
	add r0, r0, #0x2c8
	add lr, r0, #0x3800
	ldrb r0, [lr, ip]
	sub r0, r0, #3
	strb r0, [lr, ip]
	b _0203C970
_0203C95C:
	add r0, r0, #0x2c8
	add ip, r0, #0x3800
	ldrb r0, [ip, r3]
	sub r0, r0, #2
	strb r0, [ip, r3]
_0203C970:
	ldrh ip, [r1, r3]
	mvn r0, r2
	lsl r0, r0, #0x10
	and r0, ip, r0, lsr #16
	strh r0, [r1, r3]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0203c988
FUN_0203c988: ; 0x0203C988
	push {r4, r5, r6, r7, r8, lr}
	ldr r7, _0203CA34 ; =0x02099EF0
	mov r6, r0
	ldr r0, [r7]
	mov r5, r1
	mov r4, r2
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	add r0, r5, #2
	cmp r0, #1
	bhi _0203C9F0
	lsl r0, r4, #0x10
	lsl r1, r5, #0x18
	lsr r2, r0, #0x10
	mov r7, #0
	asr r4, r1, #0x18
	mov r0, #0x58
	arm_func_end FUN_0203c988
_0203C9CC:
	mla r1, r7, r0, r6
	add r1, r1, #0x3a00
	ldrsb r3, [r1, #0xd4]
	add r7, r7, #1
	cmp r4, r3
	strheq r2, [r1, #0xf4]
	cmp r7, #0x16
	blt _0203C9CC
	pop {r4, r5, r6, r7, r8, pc}
_0203C9F0:
	mov r8, #0
_0203C9F4:
	ldr r0, [r7]
	mov r1, r8
	bl FUN_0213922C
	cmp r0, #0
	beq _0203CA24
	bl FUN_0206cbf8
	cmp r5, r0
	moveq r0, #0x58
	mlaeq r0, r8, r0, r6
	addeq r0, r0, #0x3a00
	strheq r4, [r0, #0xf4]
	popeq {r4, r5, r6, r7, r8, pc}
_0203CA24:
	add r8, r8, #1
	cmp r8, #0x16
	blt _0203C9F4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0203CA34: .word 0x02099EF0

	arm_func_start FUN_0203ca38
FUN_0203ca38: ; 0x0203CA38
	ldr r3, _0203CA80 ; =0x02099EF0
	ldr r3, [r3]
	cmp r3, #0
	bxeq lr
	cmp r1, #0
	beq _0203CA68
	cmp r1, #1
	addeq r3, r0, #0x1000
	addeq r0, r0, #0x1300
	strbeq r1, [r3, #0x3c1]
	strheq r2, [r0, #0xcc]
	bx lr
	arm_func_end FUN_0203ca38
_0203CA68:
	add r2, r0, #0x1000
	add r0, r0, #0x1300
	mov r3, #0
	strb r1, [r2, #0x3c1]
	strh r3, [r0, #0xcc]
	bx lr
	.align 2, 0_0203CA80: .word 0x02099EF0

	arm_func_start FUN_0203ca84
FUN_0203ca84: ; 0x0203CA84
	push {r3, r4, r5, lr}
	ldr r0, _0203CAB0 ; =0x0209BA20
	mov r5, r2
	mov r4, r3
	bl FUN_0204fb20
	cmp r0, #0
	strbne r5, [r0, #0x1f]
	ldrne r1, [sp, #0x10]
	strbne r4, [r0, #0x20]
	strhne r1, [r0, #0x22]
	pop {r3, r4, r5, pc}
	.align 2, 0_0203CAB0: .word 0x0209BA20
	arm_func_end FUN_0203ca84

	arm_func_start FUN_0203cab4
FUN_0203cab4: ; 0x0203CAB4
	add r0, r0, #0x1000
	cmp r1, #0
	ldrb r1, [r0, #0x3c0]
	andeq r1, r1, #0xfe
	orrne r1, r1, #1
	strb r1, [r0, #0x3c0]
	bx lr
	arm_func_end FUN_0203cab4

	arm_func_start FUN_0203cad0
FUN_0203cad0: ; 0x0203CAD0
	push {r3, r4, r5, lr}
	mov r5, r0
	add ip, r5, #0x1000
	ldrb r0, [ip, #0x3c0]
	mov r4, r1
	tst r0, #4
	popne {r3, r4, r5, pc}
	orr lr, r0, #4
	add r3, r5, #0x1300
	strb lr, [ip, #0x3c0]
	strh r2, [r3, #0xc2]
	cmp r2, #0
	add r0, r5, #0x13c0
	bgt _0203CB40
	mov r2, #0
	sub r1, r2, #1
	cmp r4, r1
	and r1, lr, #0xff
	andeq r1, r1, #0xfd
	strh r2, [r3, #0xc2]
	streq r2, [ip, #0x3c4]
	strbeq r1, [r0]
	orrne r2, r1, #2
	movne r1, #0x1f000
	strbne r2, [r0]
	strne r1, [ip, #0x3c4]
	str r4, [ip, #0x3c8]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0203cad0
_0203CB40:
	mov r1, r2
	mov r0, #0x1f000
	bl FUN_0201f9bc
	mul r1, r0, r4
	add r0, r5, #0x1000
	str r1, [r0, #0x3c8]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0203cb5c
FUN_0203cb5c: ; 0x0203CB5C
	add r0, r0, #0x1000
	ldrb r0, [r0, #0x3c0]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0203cb5c

	arm_func_start FUN_0203cb74
FUN_0203cb74: ; 0x0203CB74
	add r0, r0, #0x1000
	cmp r1, #0
	ldrb r1, [r0, #0x3c0]
	orrne r1, r1, #0x10
	andeq r1, r1, #0xef
	strb r1, [r0, #0x3c0]
	bx lr
	arm_func_end FUN_0203cb74

	arm_func_start FUN_0203cb90
FUN_0203cb90: ; 0x0203CB90
	add r0, r0, #0x1000
	ldrb r0, [r0, #0x3c0]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0203cb90

	arm_func_start FUN_0203cba8
FUN_0203cba8: ; 0x0203CBA8
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	mov r6, r1
	cmp r2, #1
	beq _0203CBC8
	cmp r2, #2
	beq _0203CBD0
	b _0203CBD8
	arm_func_end FUN_0203cba8
_0203CBC8:
	mov r5, #0x200
	b _0203CBDC
_0203CBD0:
	mov r5, #0x400
	b _0203CBDC
_0203CBD8:
	mov r5, #0
_0203CBDC:
	add r0, r6, #2
	cmp r0, #1
	bhi _0203CC24
	mov r4, #0
	mov r8, #0x58
_0203CBF0:
	mla r0, r4, r8, r7
	add r0, r0, #0x3a00
	ldrsb r0, [r0, #0xd4]
	cmp r6, r0
	bne _0203CC14
	mov r0, r7
	mov r1, r4
	mov r2, r5
	bl FUN_0203cd48
_0203CC14:
	add r4, r4, #1
	cmp r4, #0x16
	blt _0203CBF0
	pop {r4, r5, r6, r7, r8, pc}
_0203CC24:
	ldr r4, _0203CC70 ; =0x02099EF0
	mov r8, #0
_0203CC2C:
	ldr r0, [r4]
	mov r1, r8
	bl FUN_0213922C
	cmp r0, #0
	beq _0203CC60
	bl FUN_0206cbf8
	cmp r6, r0
	bne _0203CC60
	mov r0, r7
	mov r1, r8
	mov r2, r5
	bl FUN_0203cd48
	pop {r4, r5, r6, r7, r8, pc}
_0203CC60:
	add r8, r8, #1
	cmp r8, #0x16
	blt _0203CC2C
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0203CC70: .word 0x02099EF0

	arm_func_start FUN_0203cc74
FUN_0203cc74: ; 0x0203CC74
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r4, _0203CD3C ; =0xFFFFD8F0
	mov r6, r2
	mov r8, r0
	cmp r6, r4
	ldr r0, _0203CD40 ; =0x00002710
	movlt r6, r4
	cmp r6, r0
	mov r7, r1
	movgt r6, r0
	add r0, r7, #2
	mov r5, r3
	cmp r0, #1
	bhi _0203CCEC
	lsl r0, r6, #0x10
	lsl r1, r5, #0x10
	asr r3, r0, #0x10
	mov sb, #0
	asr r2, r1, #0x10
	mov r0, #0x58
	arm_func_end FUN_0203cc74
_0203CCC4:
	mla r1, sb, r0, r8
	add r1, r1, #0x3a00
	ldrsb r4, [r1, #0xd4]
	add sb, sb, #1
	cmp r7, r4
	strheq r3, [r1, #0xf6]
	strheq r2, [r1, #0xf8]
	cmp sb, #0x16
	blt _0203CCC4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0203CCEC:
	ldr sb, _0203CD44 ; =0x02099EF0
	mov r4, #0
_0203CCF4:
	ldr r0, [sb]
	mov r1, r4
	bl FUN_0213922C
	cmp r0, #0
	beq _0203CD2C
	bl FUN_0206cbf8
	cmp r7, r0
	bne _0203CD2C
	mov r0, #0x58
	mla r0, r4, r0, r8
	add r0, r0, #0x3a00
	strh r6, [r0, #0xf6]
	strh r5, [r0, #0xf8]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0203CD2C:
	add r4, r4, #1
	cmp r4, #0x16
	blt _0203CCF4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0203CD3C: .word 0xFFFFD8F0
_0203CD40: .word 0x00002710
_0203CD44: .word 0x02099EF0

	arm_func_start FUN_0203cd48
FUN_0203cd48: ; 0x0203CD48
	cmp r1, #0
	bxlt lr
	cmp r1, #0x16
	bxgt lr
	mov r3, #0x58
	mul r3, r1, r3
	add r0, r0, #0xd6
	add r1, r0, #0x3a00
	cmp r2, #0x200
	ldrh ip, [r1, r3]
	beq _0203CD80
	cmp r2, #0x400
	beq _0203CD94
	b _0203CDA8
	arm_func_end FUN_0203cd48
_0203CD80:
	tst ip, #0x400
	ldrne r0, _0203CDB8 ; =0x0000FBFF
	andne ip, ip, r0
	orr ip, ip, #0x200
	b _0203CDB0
_0203CD94:
	tst ip, #0x200
	ldrne r0, _0203CDBC ; =0x0000FDFF
	andne ip, ip, r0
	orr ip, ip, #0x400
	b _0203CDB0
_0203CDA8:
	ldr r0, _0203CDC0 ; =0x0000F9FF
	and ip, ip, r0
_0203CDB0:
	strh ip, [r1, r3]
	bx lr
	.align 2, 0_0203CDB8: .word 0x0000FBFF
_0203CDBC: .word 0x0000FDFF
_0203CDC0: .word 0x0000F9FF

	arm_func_start FUN_0203cdc4
FUN_0203cdc4: ; 0x0203CDC4
	push {r4, r5, r6, r7, r8, lr}
	mov r7, #0
	mov r6, r1
	ldr r4, [sp, #0x18]
	ldr r8, [sp, #0x1c]
	mov r0, r2
	mov r1, r7
	mov r5, r3
	bl FUN_020EFA9C
	cmp r0, #0
	moveq r0, r7
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r1, _0203CF24 ; =0x0209A7FC
	cmp r1, #0
	moveq r0, r7
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r2, _0203CF28 ; =0x02099EF0
	ldr r2, [r2]
	cmp r2, #0
	moveq r0, r7
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r3, _0203CF2C ; =0xB60B60B7
	lsl ip, r8, #0x10
	smull r2, lr, r3, ip
	add lr, lr, r8, lsl #16
	lsr r2, ip, #0x1f
	add lr, r2, lr, asr #8
	lsl r2, lr, #0x10
	cmp r6, #0
	lsr r2, r2, #0x10
	lsl r4, r4, #0xc
	beq _0203CE8C
	asr r2, r2, #4
	lsl r2, r2, #1
	add r3, r2, #1
	ldr r2, _0203CF30 ; =0x02087874
	lsl r3, r3, #1
	ldrsh r2, [r2, r3]
	ldr r0, [r0, #0x84]
	ldr r8, [r1, #8]
	smull r3, r2, r4, r2
	adds ip, r3, #0x800
	ldr r3, [r1]
	adc r7, r2, r7
	lsr r2, ip, #0xc
	sub r1, r8, r3
	orr r2, r2, r7, lsl #20
	asr r7, r1, #1
	ldr r1, [r0]
	b _0203CEC8
	arm_func_end FUN_0203cdc4
_0203CE8C:
	asr r3, r2, #4
	ldr r2, _0203CF30 ; =0x02087874
	lsl r3, r3, #2
	ldrsh r2, [r2, r3]
	ldr r0, [r0, #0x84]
	ldr r8, [r1, #0xc]
	smull r3, r2, r4, r2
	adds lr, r3, #0x800
	ldr r3, [r1, #4]
	adc ip, r2, r7
	lsr r2, lr, #0xc
	sub r7, r8, r3
	ldr r1, [r0, #4]
	orr r2, r2, ip, lsl #20
	asr r7, r7, #1
_0203CEC8:
	cmp r4, #0
	addgt r1, r1, r2
	cmp r5, #0
	beq _0203CF08
	cmp r5, #1
	beq _0203CF00
	cmp r5, #2
	bne _0203CF08
	ldr r0, _0203CF28 ; =0x02099EF0
	mov r2, r6
	ldr r0, [r0]
	bl FUN_021483B0
	mov r1, r0
	b _0203CF1C
_0203CF00:
	sub r1, r1, r3
	b _0203CF10
_0203CF08:
	sub r0, r1, r7
	sub r1, r0, r3
_0203CF10:
	asr r0, r1, #0xb
	add r0, r1, r0, lsr #20
	asr r1, r0, #0xc
_0203CF1C:
	mov r0, r1
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0203CF24: .word 0x0209A7FC
_0203CF28: .word 0x02099EF0
_0203CF2C: .word 0xB60B60B7
_0203CF30: .word 0x02087874

	arm_func_start FUN_0203cf34
FUN_0203cf34: ; 0x0203CF34
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0xc
	mov r7, r1
	mov r0, r7
	mov r1, #0
	mov r6, r2
	mov r5, r3
	bl FUN_020EFA9C
	cmp r0, #0
	ldrne r1, _0203CFBC ; =0x0209A7FC
	cmpne r1, #0
	ldrne r4, _0203CFC0 ; =0x02099EF0
	ldrne r1, [r4]
	cmpne r1, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, pc}
	bl FUN_0206da98
	ldr r0, [sp, #0x20]
	add r1, sp, #4
	str r0, [sp]
	ldr r0, [r4]
	mov r2, r6
	mov r3, r5
	bl FUN_02148610
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, pc}
	ldr r0, [r4]
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	mov r1, r7
	bl FUN_02139C58
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0203CFBC: .word 0x0209A7FC
_0203CFC0: .word 0x02099EF0
	arm_func_end FUN_0203cf34

	arm_func_start FUN_0203cfc4
FUN_0203cfc4: ; 0x0203CFC4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r1
	mov r6, r2
	add r1, r7, #2
	mov r8, r0
	mov r5, r3
	cmp r1, #1
	lsl r6, r6, #0xc
	mov r4, #0
	bhi _0203D028
	lsl r0, r5, #0x10
	asr r2, r0, #0x10
	mov r1, #0x58
	arm_func_end FUN_0203cfc4
_0203CFF8:
	mla r3, r4, r1, r8
	add r0, r3, #0x3a00
	ldrsb r0, [r0, #0xd4]
	add r4, r4, #1
	cmp r7, r0
	addeq r0, r3, #0x3000
	streq r6, [r0, #0xb04]
	addeq r0, r3, #0x3b00
	strheq r2, [r0, #8]
	cmp r4, #0x16
	blt _0203CFF8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D028:
	ldr sb, _0203D078 ; =0x02099EF0
_0203D02C:
	ldr r0, [sb]
	mov r1, r4
	bl FUN_0213922C
	cmp r0, #0
	beq _0203D068
	bl FUN_0206cbf8
	cmp r7, r0
	bne _0203D068
	mov r0, #0x58
	mla r1, r4, r0, r8
	add r0, r1, #0x3000
	str r6, [r0, #0xb04]
	add r0, r1, #0x3b00
	strh r5, [r0, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D068:
	add r4, r4, #1
	cmp r4, #0x16
	blt _0203D02C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0203D078: .word 0x02099EF0

	arm_func_start FUN_0203d07c
FUN_0203d07c: ; 0x0203D07C
	push {r4, lr}
	add r2, r1, #2
	cmp r2, #1
	mov r2, #0
	bhi _0203D0D4
	lsl r1, r1, #0x18
	asr lr, r1, #0x18
	mov r4, r2
	mov r1, #0x58
	arm_func_end FUN_0203d07c
_0203D0A0:
	mla r3, r4, r1, r0
	add r3, r3, #0x3a00
	ldrsb ip, [r3, #0xd4]
	cmp lr, ip
	bne _0203D0C4
	ldrh r3, [r3, #0xd6]
	tst r3, #0x800
	movne r2, #1
	bne _0203D0F8
_0203D0C4:
	add r4, r4, #1
	cmp r4, #0x16
	blt _0203D0A0
	b _0203D0F8
_0203D0D4:
	cmp r1, #0x16
	moveq r0, r2
	popeq {r4, pc}
	mov r3, #0x58
	mla r0, r1, r3, r0
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0xd6]
	tst r0, #0x800
	movne r2, #1
_0203D0F8:
	mov r0, r2
	pop {r4, pc}

	arm_func_start FUN_0203d100
FUN_0203d100: ; 0x0203D100
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r8, r2
	lsl r4, r8, #0x10
	ldr r2, _0203D2D0 ; =0xB60B60B7
	mov sb, r1
	smull r1, r8, r2, r4
	add r2, sb, #2
	add r8, r8, r4
	lsr r1, r4, #0x1f
	mov sl, r0
	mov r7, r3
	cmp r2, #1
	add r8, r1, r8, asr #8
	ldr r6, [sp, #0x28]
	bhi _0203D1F0
	lsl r0, r7, #0x10
	mov r4, #0
	asr fp, r0, #0x10
	arm_func_end FUN_0203d100
_0203D148:
	mov r0, #0x58
	mla r5, r4, r0, sl
	add r0, r5, #0x3a00
	ldrsb r0, [r0, #0xd4]
	cmp sb, r0
	bne _0203D1E0
	ldr r0, _0203D2D4 ; =0x02099EF0
	mov r1, r4
	ldr r0, [r0]
	bl FUN_0213922C
	cmp r0, #0
	beq _0203D1E0
	cmp r7, #0
	add r1, r5, #0x3a00
	bgt _0203D1A8
	ldrh r3, [r1, #0xd6]
	ldr r0, _0203D2D8 ; =0x0000F7FF
	add r2, r5, #0x3000
	and r0, r3, r0
	strh r0, [r1, #0xd6]
	mov r0, #0
	strh r0, [r1, #0xf0]
	str r0, [r2, #0xaec]
	b _0203D1E0
_0203D1A8:
	ldrh r2, [r1, #0xd6]
	cmp r6, #0
	mov r3, r8
	orr r2, r2, #0x800
	strh r2, [r1, #0xd6]
	strh fp, [r1, #0xf0]
	ldreq r0, [r0, #0x84]
	mov r1, r7
	ldrheq r0, [r0, #0x18]
	subeq r3, r8, r0
	mov r0, r3
	bl FUN_0201f9bc
	add r1, r5, #0x3000
	str r0, [r1, #0xaec]
_0203D1E0:
	add r4, r4, #1
	cmp r4, #0x16
	blt _0203D148
	b _0203D2C8
_0203D1F0:
	ldr fp, _0203D2D4 ; =0x02099EF0
	mov r5, #0
_0203D1F8:
	ldr r0, [fp]
	mov r1, r5
	bl FUN_0213922C
	movs r4, r0
	beq _0203D2B4
	bl FUN_0206cbf8
	cmp sb, r0
	bne _0203D2B4
	cmp r7, #0
	mov r0, #0x58
	bgt _0203D260
	mul r6, r5, r0
	add r0, sl, #0xd6
	add r4, r0, #0x3a00
	ldrh r3, [r4, r6]
	ldr r0, _0203D2D8 ; =0x0000F7FF
	add r2, sl, r6
	and r0, r3, r0
	strh r0, [r4, r6]
	add r1, r2, #0x3a00
	mov r3, #0
	strh r3, [r1, #0xf0]
	add r1, r2, #0x3000
	mov r0, r5
	str r3, [r1, #0xaec]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203D260:
	mul sb, r5, r0
	add r0, sl, #0xd6
	add r2, r0, #0x3a00
	ldrh r1, [r2, sb]
	add r0, sl, sb
	add r0, r0, #0x3a00
	orr r1, r1, #0x800
	strh r1, [r2, sb]
	strh r7, [r0, #0xf0]
	cmp r6, #0
	ldreq r0, [r4, #0x84]
	mov r1, r7
	ldrheq r0, [r0, #0x18]
	subeq r8, r8, r0
	mov r0, r8
	bl FUN_0201f9bc
	add r1, sl, sb
	add r1, r1, #0x3000
	str r0, [r1, #0xaec]
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203D2B4:
	add r5, r5, #1
	cmp r5, #0x16
	blt _0203D1F8
	mov r0, #0x16
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203D2C8:
	mov r0, sb
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203D2D0: .word 0xB60B60B7
_0203D2D4: .word 0x02099EF0
_0203D2D8: .word 0x0000F7FF

	arm_func_start FUN_0203d2dc
FUN_0203d2dc: ; 0x0203D2DC
	push {r4, lr}
	add r2, r1, #2
	cmp r2, #1
	mov r2, #0
	bhi _0203D334
	lsl r1, r1, #0x18
	asr lr, r1, #0x18
	mov r4, r2
	mov r1, #0x58
	arm_func_end FUN_0203d2dc
_0203D300:
	mla r3, r4, r1, r0
	add r3, r3, #0x3a00
	ldrsb ip, [r3, #0xd4]
	cmp lr, ip
	bne _0203D324
	ldrh r3, [r3, #0xd6]
	tst r3, #0x2000
	movne r2, #1
	bne _0203D358
_0203D324:
	add r4, r4, #1
	cmp r4, #0x16
	blt _0203D300
	b _0203D358
_0203D334:
	cmp r1, #0x16
	moveq r0, r2
	popeq {r4, pc}
	mov r3, #0x58
	mla r0, r1, r3, r0
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0xd6]
	tst r0, #0x2000
	movne r2, #1
_0203D358:
	mov r0, r2
	pop {r4, pc}

	arm_func_start FUN_0203d360
FUN_0203d360: ; 0x0203D360
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r4, r2
	mov sb, r1
	mov r1, r4
	mov sl, r0
	mov r8, r3
	bl FUN_0203d4b8
	cmp r0, #0
	moveq r0, #0x16
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sb, #2
	cmp r8, #0
	mvnlt r8, #0
	cmp r0, #1
	bhi _0203D41C
	lsl r0, r8, #0x10
	ldr fp, _0203D4B0 ; =0x02099EF0
	mov r6, #0
	asr r5, r0, #0x10
	and r4, r4, #0xff
	arm_func_end FUN_0203d360
_0203D3B0:
	mov r0, #0x58
	mla r7, r6, r0, sl
	add r0, r7, #0x3a00
	ldrsb r0, [r0, #0xd4]
	cmp sb, r0
	bne _0203D40C
	ldr r0, [fp]
	mov r1, r6
	bl FUN_0213922C
	cmp r0, #0
	beq _0203D40C
	add r1, r7, #0x3a00
	strh r5, [r1, #0xea]
	add r0, r7, #0x3000
	strb r4, [r0, #0xae8]
	cmp r8, #0
	ldrhne r0, [r1, #0xd6]
	orrne r0, r0, #0x2000
	strhne r0, [r1, #0xd6]
	ldrheq r2, [r1, #0xd6]
	ldreq r0, _0203D4B4 ; =0x0000DFFF
	andeq r0, r2, r0
	strheq r0, [r1, #0xd6]
_0203D40C:
	add r6, r6, #1
	cmp r6, #0x16
	blt _0203D3B0
	b _0203D4A8
_0203D41C:
	ldr r6, _0203D4B0 ; =0x02099EF0
	mov r5, #0
_0203D424:
	ldr r0, [r6]
	mov r1, r5
	bl FUN_0213922C
	cmp r0, #0
	beq _0203D494
	bl FUN_0206cbf8
	cmp sb, r0
	bne _0203D494
	mov r0, #0x58
	mul r0, r5, r0
	add r2, sl, r0
	add r1, r2, #0x3a00
	strh r8, [r1, #0xea]
	add r1, r2, #0x3000
	strb r4, [r1, #0xae8]
	add r1, sl, #0xd6
	cmp r8, #0
	addne r2, r1, #0x3a00
	ldrhne r1, [r2, r0]
	orrne r1, r1, #0x2000
	addeq r3, r1, #0x3a00
	strhne r1, [r2, r0]
	ldrheq r2, [r3, r0]
	ldreq r1, _0203D4B4 ; =0x0000DFFF
	andeq r1, r2, r1
	strheq r1, [r3, r0]
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203D494:
	add r5, r5, #1
	cmp r5, #0x16
	blt _0203D424
	mov r0, #0x16
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203D4A8:
	mov r0, sb
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203D4B0: .word 0x02099EF0
_0203D4B4: .word 0x0000DFFF

	arm_func_start FUN_0203d4b8
FUN_0203d4b8: ; 0x0203D4B8
	cmp r1, #9
	arm_func_end FUN_0203d4b8

	arm_func_start switchD
switchD: ; 0x0203D4BC
	addls pc, pc, r1, lsl #2
	arm_func_end switchD

	arm_func_start caseD_a
caseD_a: ; 0x0203D4C0
	b _0203D4F4
	arm_func_end caseD_a
_0203D4C4: ; jump table
	b _0203D4EC ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0203D4C8
	b _0203D4EC
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0203D4CC
	b _0203D4EC
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203D4D0
	b _0203D4EC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0203D4D4
	b _0203D4EC
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0203D4D8
	b _0203D4EC
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0203D4DC
	b _0203D4EC
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0203D4E0
	b _0203D4EC
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0203D4E4
	b _0203D4EC
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0203D4E8
	b _0203D4EC
	arm_func_end caseD_9
_0203D4EC:
	mov r0, #1
	bx lr
_0203D4F4:
	mov r0, #0
	bx lr

	arm_func_start FUN_0203d4fc
FUN_0203d4fc: ; 0x0203D4FC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #8
	movs r4, r2
	mov r5, r1
	mov r7, r3
	mov r6, #1
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r5, #0
	addeq sp, sp, #8
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r8, _0203D728 ; =0x0209A7FC
	cmp r8, #0
	addeq sp, sp, #8
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r5
	bl FUN_020F07D0
	cmp r0, #0
	ldr r0, _0203D72C ; =0x02099EF0
	ldr r2, [r8]
	ldr r1, [r8, #8]
	mov sb, r6
	sub r1, r1, r2
	add ip, r2, r1, asr #1
	ldr r2, [r8, #4]
	ldr r1, [r8, #0xc]
	ldr r0, [r0]
	sub r1, r1, r2
	add lr, r2, r1, asr #1
	mov r1, r7
	mov r3, r6
	mov r2, #0
	movne sb, #0
	str ip, [sp]
	str lr, [sp, #4]
	bl FUN_0213F368
	mov r7, r0
	tst r4, #1
	beq _0203D5C0
	ldr r0, _0203D730 ; =0x0209A2C0
	ldrsh r1, [r5, #0x94]
	ldr r0, [r0, #0x48]
	cmp r0, r1
	addeq sp, sp, #8
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_0203d4fc
_0203D5C0:
	tst r4, #2
	beq _0203D5E0
	mov r0, r5
	bl FUN_0206d6d8
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D5E0:
	tst r4, #4
	beq _0203D60C
	ldr r0, [r5, #0x84]
	ldr r0, [r0, #4]
	cmp r0, r7
	movlt r0, #1
	movge r0, #0
	teq sb, r0
	addeq sp, sp, #8
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D60C:
	tst r4, #8
	beq _0203D65C
	ldr r2, [r5, #0x84]
	ldr r0, [r8]
	ldr r1, [r2]
	cmp r1, r0
	blt _0203D650
	ldr r0, [r8, #8]
	cmp r1, r0
	bgt _0203D650
	ldr r1, [r2, #4]
	ldr r0, [r8, #4]
	cmp r1, r0
	blt _0203D650
	ldr r0, [r8, #0xc]
	cmp r1, r0
	ble _0203D65C
_0203D650:
	add sp, sp, #8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D65C:
	tst r4, #0x10
	beq _0203D68C
	ldr r1, [r5, #0x84]
	ldr r0, [sp, #4]
	ldr r1, [r1, #4]
	cmp r1, r0
	movlt r0, #1
	movge r0, #0
	teq sb, r0
	addeq sp, sp, #8
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D68C:
	tst r4, #0x20
	beq _0203D6BC
	ldr r1, [r5, #0x84]
	ldr r0, [sp, #4]
	ldr r1, [r1, #4]
	cmp r1, r0
	movlt r0, #1
	movge r0, #0
	teq sb, r0
	addne sp, sp, #8
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D6BC:
	tst r4, #0x40
	beq _0203D6EC
	ldr r1, [r5, #0x84]
	ldr r0, [sp]
	ldr r1, [r1]
	cmp r1, r0
	movlt r0, #1
	movge r0, #0
	teq sb, r0
	addeq sp, sp, #8
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D6EC:
	tst r4, #0x80
	beq _0203D71C
	ldr r1, [r5, #0x84]
	ldr r0, [sp]
	ldr r1, [r1]
	cmp r1, r0
	movlt r0, #1
	movge r0, #0
	teq sb, r0
	addne sp, sp, #8
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
_0203D71C:
	mov r0, #0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0203D728: .word 0x0209A7FC
_0203D72C: .word 0x02099EF0
_0203D730: .word 0x0209A2C0

	arm_func_start FUN_0203d734
FUN_0203d734: ; 0x0203D734
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r5, r2
	mov sl, r0
	mov sb, r1
	mov r6, r3
	cmp r5, #0
	ldr r4, [sp, #0x28]
	bgt _0203D764
	cmp r5, #0
	movne r0, #0x16
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r5, #0x1e
	arm_func_end FUN_0203d734
_0203D764:
	cmp r6, #0
	bgt _0203D778
	movne r0, #0x16
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r6, #8
_0203D778:
	cmp r6, #0
	lsl r0, r6, #0xc
	ble _0203D798
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _0203D7A4
_0203D798:
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_0203D7A4:
	bl FUN_0201fdac
	cmp r4, #0
	ldrle r4, _0203D908 ; =0x00000FAE
	asr r6, r0, #1
	mov r0, #0x6000
	umull r3, r2, r4, r0
	asr r1, r4, #0x1f
	mla r2, r1, r0, r2
	adds r3, r3, #0x800
	adc r0, r2, #0
	lsr r3, r3, #0xc
	orr r3, r3, r0, lsl #20
	ldr r1, _0203D90C ; =0x88888889
	lsr r2, r3, #0x1f
	smull r0, r4, r1, r3
	add r4, r3, r4
	mov r0, r5
	mov r1, r6
	add r4, r2, r4, asr #5
	mov r8, #0
	bl FUN_0200958c
	smull r2, r1, r4, r6
	adds r2, r2, #0x800
	adc r1, r1, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	add r5, r0, r2
	mov r0, r5
	mov r1, r6
	bl FUN_0200958c
	add r1, sb, #2
	cmp r1, #1
	mov r7, r0
	bhi _0203D894
	ldr fp, _0203D910 ; =0x02099EF0
	mov r4, r8
_0203D834:
	mov r0, #0x58
	mla r6, r8, r0, sl
	add r0, r6, #0x3a00
	ldrsb r0, [r0, #0xd4]
	cmp sb, r0
	bne _0203D880
	ldr r0, [fp]
	mov r1, r8
	bl FUN_0213922C
	cmp r0, #0
	beq _0203D880
	add r0, r6, #0x3000
	str r5, [r0, #0xadc]
	str r4, [r0, #0xae0]
	str r7, [r0, #0xae4]
	add r0, r6, #0x3a00
	ldrh r1, [r0, #0xd6]
	orr r1, r1, #0x1000
	strh r1, [r0, #0xd6]
_0203D880:
	add r8, r8, #1
	cmp r8, #0x16
	blt _0203D834
	mov r0, sb
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203D894:
	ldr r4, _0203D910 ; =0x02099EF0
_0203D898:
	ldr r0, [r4]
	mov r1, r8
	bl FUN_0213922C
	cmp r0, #0
	beq _0203D8F4
	bl FUN_0206cbf8
	cmp sb, r0
	bne _0203D8F4
	mov r0, #0x58
	mul r3, r8, r0
	add r0, sl, r3
	add r0, r0, #0x3000
	str r5, [r0, #0xadc]
	mov r1, #0
	str r1, [r0, #0xae0]
	add r1, sl, #0xd6
	str r7, [r0, #0xae4]
	add r2, r1, #0x3a00
	ldrh r1, [r2, r3]
	mov r0, r8
	orr r1, r1, #0x1000
	strh r1, [r2, r3]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203D8F4:
	add r8, r8, #1
	cmp r8, #0x16
	blt _0203D898
	mov r0, #0x16
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203D908: .word 0x00000FAE
_0203D90C: .word 0x88888889
_0203D910: .word 0x02099EF0

	arm_func_start FUN_0203d914
FUN_0203d914: ; 0x0203D914
	push {r4, lr}
	add r2, r1, #2
	cmp r2, #1
	mov r2, #0
	bhi _0203D96C
	lsl r1, r1, #0x18
	asr lr, r1, #0x18
	mov r4, r2
	mov r1, #0x58
	arm_func_end FUN_0203d914
_0203D938:
	mla r3, r4, r1, r0
	add r3, r3, #0x3a00
	ldrsb ip, [r3, #0xd4]
	cmp lr, ip
	bne _0203D95C
	ldrh r3, [r3, #0xd6]
	tst r3, #0x1000
	movne r2, #1
	bne _0203D990
_0203D95C:
	add r4, r4, #1
	cmp r4, #0x16
	blt _0203D938
	b _0203D990
_0203D96C:
	cmp r1, #0x16
	moveq r0, r2
	popeq {r4, pc}
	mov r3, #0x58
	mla r0, r1, r3, r0
	add r0, r0, #0x3a00
	ldrh r0, [r0, #0xd6]
	tst r0, #0x1000
	movne r2, #1
_0203D990:
	mov r0, r2
	pop {r4, pc}

	arm_func_start FUN_0203d998
FUN_0203d998: ; 0x0203D998
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov fp, #0
	ldr r5, _0203DB2C ; =0x02099EF0
	mov r4, r0
	mov sb, r1
	mov sl, r2
	mov r8, r3
	mov r7, fp
	arm_func_end FUN_0203d998
_0203D9BC:
	ldr r0, [r5]
	mov r1, r7
	bl FUN_0213922C
	movs r6, r0
	beq _0203D9DC
	bl FUN_0206cbf8
	cmp sb, r0
	beq _0203D9E8
_0203D9DC:
	add r7, r7, #1
	cmp r7, #0x16
	blt _0203D9BC
_0203D9E8:
	cmp r7, #0x16
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x30]
	mov sb, #1
	cmp r0, #1
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	moveq sb, #0
	cmn r8, #1
	beq _0203DAF8
	cmp r8, #0
	beq _0203DA2C
	cmp r8, #1
	beq _0203DAC8
	b _0203DAF8
_0203DA2C:
	ldr r4, _0203DB2C ; =0x02099EF0
	mov r8, #0
	add fp, sp, #4
_0203DA38:
	ldr r0, [r4]
	mov r1, r8
	bl FUN_0213922C
	movs r7, r0
	ldrshne r2, [r7, #0x94]
	ldrshne r1, [r6, #0x94]
	cmpne r2, r1
	beq _0203DAB4
	bl FUN_020F0810
	mov r5, r0
	mov r0, r6
	bl FUN_020F0810
	cmp r5, r0
	beq _0203DAB4
	cmp sb, #0
	bne _0203DA88
	mov r0, r7
	bl FUN_0206d6d8
	cmp r0, #0
	bne _0203DAB4
_0203DA88:
	str sl, [sp]
	ldr r0, [r4]
	ldr r2, [r6, #0x84]
	ldr r3, [r7, #0x84]
	mov r1, fp
	bl FUN_021488A0
	cmp r0, #0
	ldrne r2, [sp, #8]
	ldrne r1, [r7, #0x84]
	ldrne r0, [sp, #4]
	stmne r1, {r0, r2}
_0203DAB4:
	add r8, r8, #1
	cmp r8, #0x16
	blt _0203DA38
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203DAC8:
	mov r0, #0x58
	mul r3, r7, r0
	add r0, r4, #0xd6
	add r2, r0, #0x3a00
	ldrh r1, [r2, r3]
	add r0, r4, r3
	add r0, r0, #0x3000
	orr r1, r1, #0x4000
	strh r1, [r2, r3]
	add sp, sp, #0xc
	str sl, [r0, #0xad8]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203DAF8:
	mov r0, #0x58
	mul r5, r7, r0
	add r0, r4, #0xd6
	add r3, r0, #0x3a00
	ldrh r2, [r3, r5]
	ldr r0, _0203DB30 ; =0x0000BFFF
	add r1, r4, r5
	and r0, r2, r0
	strh r0, [r3, r5]
	add r0, r1, #0x3000
	str fp, [r0, #0xad8]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203DB2C: .word 0x02099EF0
_0203DB30: .word 0x0000BFFF

	arm_func_start FUN_0203db34
FUN_0203db34: ; 0x0203DB34
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mvn r3, #0x63
	cmp r2, r3
	mov sl, r0
	mov sb, r1
	movlt r2, r3
	blt _0203DB58
	cmp r2, #0x64
	movgt r2, #0x64
	arm_func_end FUN_0203db34
_0203DB58:
	lsl r0, r2, #0x18
	add r1, sb, #2
	cmp r1, #1
	asr r7, r0, #0x18
	bhi _0203DBB4
	ldr r5, _0203DBFC ; =0x02099EF0
	mov r6, #0
	mov r4, #0x58
_0203DB78:
	mla r8, r6, r4, sl
	add r0, r8, #0x3a00
	ldrsb r0, [r0, #0xd4]
	cmp sb, r0
	bne _0203DBA4
	ldr r0, [r5]
	mov r1, r6
	bl FUN_0213922C
	cmp r0, #0
	addne r0, r8, #0x3000
	strbne r7, [r0, #0xac9]
_0203DBA4:
	add r6, r6, #1
	cmp r6, #0x16
	blt _0203DB78
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0203DBB4:
	ldr r4, _0203DBFC ; =0x02099EF0
	mov r5, #0
_0203DBBC:
	ldr r0, [r4]
	mov r1, r5
	bl FUN_0213922C
	cmp r0, #0
	beq _0203DBEC
	bl FUN_0206cbf8
	cmp sb, r0
	moveq r0, #0x58
	mlaeq r0, r5, r0, sl
	addeq r0, r0, #0x3000
	strbeq r7, [r0, #0xac9]
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
_0203DBEC:
	add r5, r5, #1
	cmp r5, #0x16
	blt _0203DBBC
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0203DBFC: .word 0x02099EF0

	arm_func_start FUN_0203dc00
FUN_0203dc00: ; 0x0203DC00
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	ldr r1, _0203DDC0 ; =0x020A0640
	ldr r2, _0203DDC4 ; =0x02099EF0
	ldrb r1, [r1, #0x8f]
	mov r8, r0
	ldr r0, [r2]
	bl FUN_02145C40
	cmp r0, #0xc
	bgt _0203DC68
	cmp r0, #0
	arm_func_end FUN_0203dc00

	arm_func_start switchD
switchD: ; 0x0203DC2C
	addge pc, pc, r0, lsl #2
	b _0203DC98
	arm_func_end switchD
_0203DC34: ; jump table
	b _0203DC98 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0203DC38
	b _0203DC98
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0203DC3C
	b _0203DC98
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203DC40
	b _0203DC74
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0203DC44
	b _0203DC98
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0203DC48
	b _0203DC98
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0203DC4C
	b _0203DC78
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0203DC50
	b _0203DC98
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0203DC54
	b _0203DC98
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0203DC58
	b _0203DC80
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0203DC5C
	b _0203DC98
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0203DC60
	b _0203DC98
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0203DC64
	b _0203DC90
	arm_func_end caseD_c
_0203DC68:
	cmp r0, #0xf
	beq _0203DC88
	b _0203DC98
_0203DC74:
	b _0203DC98
_0203DC78:
	mov r7, #1
	b _0203DC9C
_0203DC80:
	mov r7, #2
	b _0203DC9C
_0203DC88:
	mov r7, #4
	b _0203DC9C
_0203DC90:
	mov r7, #5
	b _0203DC9C
_0203DC98:
	mov r7, #0
_0203DC9C:
	cmp r0, #0xf
	ldreq r0, _0203DDC0 ; =0x020A0640
	moveq r1, #1
	strbeq r1, [r0, #0x8c]
	ldr r0, _0203DDC8 ; =0x0209A200
	ldr r4, _0203DDCC ; =0x02099F38
	ldr r2, [r0]
	ldr r0, [r4]
	mov r6, #0
	str r6, [sp]
	str r6, [sp, #4]
	ldr r3, _0203DDD0 ; =0x0208FF04
	mov r1, #5
	str r6, [sp, #8]
	bl FUN_02058684
	mov r1, r0
	add r0, r8, #0x1000
	str r1, [r0, #0x3d8]
	ldr r0, [r4]
	mov r2, r6
	mov r3, r6
	bl FUN_02059038
	mov r5, #1
	ldr r0, [r4]
	mov r1, r5
	mov r2, r5
	bl FUN_02112724
	mov r1, r0
	add r0, r8, #0x1000
	ldr r2, [r0, #0x3d8]
	str r1, [r0, #0x3dc]
	ldr r0, [r4]
	and r2, r2, #0xff
	bl FUN_02112950
	add r1, r8, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3dc]
	mov r2, r7
	mov r3, r6
	bl FUN_0211346C
	add r1, r8, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3dc]
	mov r2, #0xc8
	bl FUN_02112B98
	mov r0, #0x50
	str r0, [sp]
	add r1, r8, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3dc]
	mov r3, r6
	mov r2, r5
	bl FUN_02113B78
	add r1, r8, #0x1000
	mov r3, r5
	mov r5, #2
	ldr r0, [r4]
	ldr r1, [r1, #0x3dc]
	mov r2, r5
	bl FUN_0211329C
	add r1, r8, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3dc]
	mov r2, r5
	bl FUN_02114370
	add r0, r8, #0x1000
	mov r1, #0x5a
	str r1, [r0, #0x3d4]
	ldr r1, [r0, #0x3d0]
	add r1, r1, #1
	str r1, [r0, #0x3d0]
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0203DDC0: .word 0x020A0640
_0203DDC4: .word 0x02099EF0
_0203DDC8: .word 0x0209A200
_0203DDCC: .word 0x02099F38
_0203DDD0: .word 0x0208FF04

	arm_func_start FUN_0203ddd4
FUN_0203ddd4: ; 0x0203DDD4
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x3d0]
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	ldr r4, _0203DE44 ; =0x02099F38
	ldr r1, [r0, #0x3d8]
	ldr r0, [r4]
	bl FUN_020591e8
	add r0, r5, #0x1000
	ldr r1, [r0, #0x3d8]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r0, r5, #0x1000
	ldr r1, [r0, #0x3d8]
	ldr r0, [r4]
	bl FUN_02058ee0
	add r1, r5, #0x1000
	ldr r0, [r4]
	ldr r1, [r1, #0x3dc]
	bl FUN_021128C4
	add r0, r5, #0x3d0
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x10
	bl MemWrite
	pop {r3, r4, r5, pc}
	.align 2, 0_0203DE44: .word 0x02099F38
	arm_func_end FUN_0203ddd4

	arm_func_start FUN_0203de48
FUN_0203de48: ; 0x0203DE48
	add r0, r0, #0x1000
	ldr r0, [r0, #0x3d0]
	cmp r0, #0xa
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_0203de48

	arm_func_start FUN_0203de60
FUN_0203de60: ; 0x0203DE60
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x1000
	ldr r1, [r0, #0x3d0]
	cmp r1, #0xa
	arm_func_end FUN_0203de60

	arm_func_start switchD
switchD: ; 0x0203DE74
	addls pc, pc, r1, lsl #2
	arm_func_end switchD

	arm_func_start caseD_b
caseD_b: ; 0x0203DE78
	pop {r4, pc}
	arm_func_end caseD_b
_0203DE7C: ; jump table
	pop {r4, pc} ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0203DE80
	b _0203DEA8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0203DE84
	b _0203DED0
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203DE88
	b _0203DF2C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0203DE8C
	pop {r4, pc}
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0203DE90
	pop {r4, pc}
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0203DE94
	pop {r4, pc}
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0203DE98
	pop {r4, pc}
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0203DE9C
	pop {r4, pc}
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0203DEA0
	pop {r4, pc}
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0203DEA4
	pop {r4, pc}
	arm_func_end caseD_a
_0203DEA8:
	ldr r2, _0203DF68 ; =0x02099F38
	ldr r1, [r0, #0x3d8]
	ldr r0, [r2]
	bl FUN_02058e30
	cmp r0, #0
	addeq r0, r4, #0x1000
	ldreq r1, [r0, #0x3d0]
	addeq r1, r1, #1
	streq r1, [r0, #0x3d0]
	pop {r4, pc}
_0203DED0:
	ldr r2, _0203DF68 ; =0x02099F38
	ldr r1, [r0, #0x3dc]
	ldr r0, [r2]
	mov r2, #2
	mov r3, #1
	bl FUN_021142FC
	ldr r0, _0203DF6C ; =0x020A0640
	ldr r2, _0203DF70 ; =0x02099EF0
	ldrb r1, [r0, #0x8f]
	ldr r0, [r2]
	bl FUN_02145C40
	cmp r0, #0xf
	beq _0203DF10
	ldr r0, _0203DF74 ; =0x0209AC44
	ldr r1, _0203DF78 ; =0x0000407D
	b _0203DF18
_0203DF10:
	ldr r0, _0203DF74 ; =0x0209AC44
	ldr r1, _0203DF7C ; =0x0000407C
_0203DF18:
	bl FUN_0202cf6c
	add r0, r4, #0x1000
	ldr r1, [r0, #0x3d0]
	add r1, r1, #1
	str r1, [r0, #0x3d0]
_0203DF2C:
	add r0, r4, #0x1000
	ldr r1, [r0, #0x3d4]
	sub r1, r1, #1
	str r1, [r0, #0x3d4]
	cmp r1, #0
	popgt {r4, pc}
	ldr r2, _0203DF68 ; =0x02099F38
	ldr r1, [r0, #0x3dc]
	ldr r0, [r2]
	mov r2, #2
	bl FUN_02113390
	add r0, r4, #0x1000
	mov r1, #0xa
	str r1, [r0, #0x3d0]
	pop {r4, pc}
	.align 2, 0_0203DF68: .word 0x02099F38
_0203DF6C: .word 0x020A0640
_0203DF70: .word 0x02099EF0
_0203DF74: .word 0x0209AC44
_0203DF78: .word 0x0000407D
_0203DF7C: .word 0x0000407C

	arm_func_start FUN_0203df80
FUN_0203df80: ; 0x0203DF80
	bx lr
	arm_func_end FUN_0203df80

	arm_func_start FUN_0203df84
FUN_0203df84: ; 0x0203DF84
	bx lr
	arm_func_end FUN_0203df84

	arm_func_start FUN_0203df88
FUN_0203df88: ; 0x0203DF88
	str r1, [r0]
	bx lr
	arm_func_end FUN_0203df88

	arm_func_start FUN_0203df90
FUN_0203df90: ; 0x0203DF90
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	beq _0203DFB4
	mov r0, r2
	mov r2, #6
	mov r3, #1
	bl FUN_0202de58
	pop {r3, pc}
	arm_func_end FUN_0203df90
_0203DFB4:
	ldr r2, [r0, #0x240]
	cmp r2, #0
	moveq r0, #0
	popeq {r3, pc}
	mov r0, r1
	blx r2
	pop {r3, pc}

	arm_func_start FUN_0203dfd0
FUN_0203dfd0: ; 0x0203DFD0
	push {r3, lr}
	ldr r2, [r0]
	cmp r2, #0
	beq _0203DFEC
	mov r0, r2
	bl FUN_0202e1c0
	pop {r3, pc}
	arm_func_end FUN_0203dfd0
_0203DFEC:
	ldr r2, [r0, #0x244]
	cmp r2, #0
	popeq {r3, pc}
	mov r0, r1
	blx r2
	pop {r3, pc}

	arm_func_start FUN_0203e004
FUN_0203e004: ; 0x0203E004
	push {r4, r5, r6, lr}
	ldr r4, _0203E1C4 ; =0x020B5BB0
	mov r6, r0
	ldr r0, [r4]
	mov r5, r1
	cmp r0, #0
	mov r4, #0
	movne r0, #1
	popne {r4, r5, r6, pc}
	ldr r0, [r6]
	cmp r0, #0
	bne _0203E04C
	ldr r0, [r6, #0x240]
	cmp r0, #0
	ldrne r0, [r6, #0x244]
	cmpne r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	arm_func_end FUN_0203e004
_0203E04C:
	mul r1, r2, r3
	add r0, r6, #0x2400
	add r1, r1, #4
	strh r1, [r0, #0x64]
	ldrh r1, [r0, #0x64]
	strh r2, [r0, #0x66]
	strh r3, [r0, #0x5e]
	cmp r1, #0x200
	movhi r0, #0
	pophi {r4, r5, r6, pc}
	mov r1, r4
	add r0, r6, #0x360
	mov r2, #6
	bl MemWrite
	ldr r2, _0203E1C8 ; =0x00001078
	mov r1, r4
	add r0, r6, #0x380
	bl MemWrite
	mov r0, r6
	mov r1, #0xf20
	bl FUN_0203df90
	str r0, [r6, #0x20c]
	cmp r0, #0
	moveq r0, r4
	popeq {r4, r5, r6, pc}
	add r0, r0, #0x1f
	ldr r1, _0203E1CC ; =FUN_0203e2f4
	bic r0, r0, #0x1f
	mov r2, #3
	bl FUN_020130b4
	cmp r0, #2
	movne r0, r4
	popne {r4, r5, r6, pc}
	add r0, r6, #0x44
	mov r1, r4
	add r0, r0, #0x2400
	mov r2, #0x18
	bl MemWrite
	add r0, r6, #0x300
	strh r4, [r0, #0x24]
	ldr r1, _0203E1C4 ; =0x020B5BB0
	str r5, [r6, #0x328]
	str r4, [r6, #0x320]
	str r6, [r1]
	add r1, r6, #0x2400
	ldrh r3, [r1, #0x64]
	ldrh r2, [r1, #0x66]
	add r0, r6, #0x2000
	add r3, r3, #0x23
	add r2, r2, #0x21
	bic r3, r3, #0x1f
	bic r2, r2, #0x1f
	cmp r3, r2
	movlt r3, r2
	str r4, [r0, #0x440]
	add r0, r3, #0x3f
	bic r5, r0, #0x3f
	strh r4, [r1, #0x6a]
	mov r0, r6
	add r1, r5, #0x20
	bl FUN_0203df90
	add r1, r6, #0x2400
	ldrh r3, [r1, #0x66]
	ldrh r2, [r1, #0x5e]
	ldrh r1, [r1, #0x64]
	add r3, r3, #0xe
	sub r2, r2, #1
	mul r2, r3, r2
	add r2, r2, #0x29
	add r1, r1, #0x55
	bic r2, r2, #0x1f
	bic r1, r1, #0x1f
	lsl r2, r2, #1
	str r0, [r6, #0x204]
	lsl r0, r1, #1
	cmp r2, r1, lsl #1
	movlt r2, r0
	add r0, r2, #0x3f
	str r5, [r6, #0x238]
	bic r5, r0, #0x3f
	mov r0, r6
	add r1, r5, #0x20
	bl FUN_0203df90
	ldr r1, [r6, #0x204]
	str r0, [r6, #0x208]
	cmp r1, #0
	cmpne r0, #0
	moveq r0, #0
	ldrne r0, _0203E1C4 ; =0x020B5BB0
	str r5, [r6, #0x23c]
	strne r4, [r0, #4]
	movne r0, #1
	strbne r0, [r6, #0x236]
	pop {r4, r5, r6, pc}
	.align 2, 0_0203E1C4: .word 0x020B5BB0
_0203E1C8: .word 0x00001078
_0203E1CC: .word FUN_0203e2f4

	arm_func_start FUN_0203e1d0
FUN_0203e1d0: ; 0x0203E1D0
	add r0, r0, #0x2400
	ldrh r0, [r0, #0x6a]
	bx lr
	arm_func_end FUN_0203e1d0

	arm_func_start LAB_0203e1dc
LAB_0203e1dc: ; 0x0203E1DC
	add r0, r0, #0x2400
	ldrh r0, [r0, #0x5c]
	bx lr
	arm_func_end LAB_0203e1dc

	arm_func_start FUN_0203e1e8
FUN_0203e1e8: ; 0x0203E1E8
	add r0, r0, #0x2400
	ldrh r0, [r0, #0x60]
	bx lr
	arm_func_end FUN_0203e1e8

	arm_func_start FUN_0203e1f4
FUN_0203e1f4: ; 0x0203E1F4
	ldrh r0, [r0, #6]
	bx lr
	arm_func_end FUN_0203e1f4

	arm_func_start LAB_0203e1fc
LAB_0203e1fc: ; 0x0203E1FC
	add r0, r0, #0x2000
	ldr r0, [r0, #0x440]
	bx lr
	arm_func_end LAB_0203e1fc

	arm_func_start thunk_FUN_02012be0
thunk_FUN_02012be0: ; 0x0203E208
	ldr ip, _0203E210 ; =FUN_02012be0
	bx ip
	.align 2, 0_0203E210: .word FUN_02012be0
	arm_func_end thunk_FUN_02012be0

	arm_func_start FUN_0203e214
FUN_0203e214: ; 0x0203E214
	push {r3, lr}
	sub sp, sp, #8
	mov r3, r0
	ldrb r0, [r3, #0x236]
	cmp r1, #0
	add r1, r3, #0x300
	orrne r0, r0, #1
	andeq r0, r0, #0xfe
	strb r0, [r3, #0x236]
	add r0, r3, #0x200
	ldrh r2, [r0, #0x34]
	ldr r0, _0203E268 ; =FUN_0203e2cc
	str r2, [sp]
	ldrb r2, [r3, #0x236]
	str r2, [sp, #4]
	ldrh r2, [r1, #0x24]
	ldr r1, [r3, #0x320]
	ldr r3, [r3, #0x328]
	bl FUN_02014a9c
	add sp, sp, #8
	pop {r3, pc}
	.align 2, 0_0203E268: .word FUN_0203e2cc
	arm_func_end FUN_0203e214

	arm_func_start FUN_0203e26c
FUN_0203e26c: ; 0x0203E26C
	push {r3, lr}
	sub sp, sp, #8
	mov ip, r0
	add r0, ip, #0x2400
	ldrh r0, [r0, #0x6c]
	add r3, ip, #0x300
	str r1, [ip, #0x320]
	tst r0, #2
	addeq sp, sp, #8
	strh r2, [r3, #0x24]
	popeq {r3, pc}
	add r0, ip, #0x200
	ldrh r1, [r0, #0x34]
	ldr r0, _0203E2C8 ; =FUN_0203e2cc
	str r1, [sp]
	ldrb r1, [ip, #0x236]
	str r1, [sp, #4]
	ldrh r2, [r3, #0x24]
	ldr r1, [ip, #0x320]
	ldr r3, [ip, #0x328]
	bl FUN_02014a9c
	add sp, sp, #8
	pop {r3, pc}
	.align 2, 0_0203E2C8: .word FUN_0203e2cc
	arm_func_end FUN_0203e26c

	arm_func_start FUN_0203e2cc
FUN_0203e2cc: ; 0x0203E2CC
	bx lr
	arm_func_end FUN_0203e2cc

	arm_func_start FUN_0203e2d0
FUN_0203e2d0: ; 0x0203E2D0
	add r2, r0, #0x1000
	ldrb r3, [r2, #0x3e2]
	mov r2, #1
	tst r3, r2, lsl r1
	moveq r0, #0
	addne r2, r0, #0x7e0
	movne r0, #0xc0
	mlane r0, r1, r0, r2
	bx lr
	arm_func_end FUN_0203e2d0

	arm_func_start FUN_0203e2f4
FUN_0203e2f4: ; 0x0203E2F4
	push {r4, lr}
	ldr r4, _0203E34C ; =0x020B5BB0
	ldr r1, [r4]
	cmp r1, #0
	popeq {r4, pc}
	ldrh r0, [r0, #2]
	cmp r0, #0
	addne r0, r1, #0x2400
	movne r1, #9
	strhne r1, [r0, #0x6a]
	popne {r4, pc}
	ldr r0, _0203E350 ; =FUN_0203e354
	bl FUN_02012828
	cmp r0, #0
	ldr r0, [r4]
	movne r1, #9
	addne r0, r0, #0x2400
	strhne r1, [r0, #0x6a]
	moveq r1, #1
	addeq r0, r0, #0x2400
	strheq r1, [r0, #0x6a]
	pop {r4, pc}
	.align 2, 0_0203E34C: .word 0x020B5BB0
_0203E350: .word FUN_0203e354
	arm_func_end FUN_0203e2f4

	arm_func_start FUN_0203e354
FUN_0203e354: ; 0x0203E354
	bx lr
	arm_func_end FUN_0203e354

	arm_func_start FUN_0203e358
FUN_0203e358: ; 0x0203E358
	push {r3, lr}
	add r1, r0, #0x2400
	mov r2, #2
	ldr r0, _0203E380 ; =FUN_0203e384
	strh r2, [r1, #0x6a]
	bl FUN_0201312c
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	.align 2, 0_0203E380: .word FUN_0203e384
	arm_func_end FUN_0203e358

	arm_func_start FUN_0203e384
FUN_0203e384: ; 0x0203E384
	ldr r2, _0203E3E8 ; =0x020B5BB0
	ldr r3, [r2]
	cmp r3, #0
	bxeq lr
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq _0203E3C0
	add r1, r3, #0x2400
	mov r3, #9
	strh r3, [r1, #0x6a]
	ldr r1, [r2]
	ldrh r2, [r0, #2]
	add r0, r1, #0x2000
	str r2, [r0, #0x440]
	bx lr
	arm_func_end FUN_0203e384
_0203E3C0:
	add r0, r3, #0x2400
	mov r1, #1
	strh r1, [r0, #0x6a]
	ldr r1, [r2]
	ldr r0, _0203E3EC ; =0x0000FFFD
	add r1, r1, #0x2400
	ldrh r2, [r1, #0x6c]
	and r0, r2, r0
	strh r0, [r1, #0x6c]
	bx lr
	.align 2, 0_0203E3E8: .word 0x020B5BB0
_0203E3EC: .word 0x0000FFFD

	arm_func_start FUN_0203e3f0
FUN_0203e3f0: ; 0x0203E3F0
	push {r4, r5, r6, lr}
	mov r4, r0
	add r5, r4, #0x2400
	ldrh r1, [r5, #0x6a]
	cmp r1, #6
	arm_func_end FUN_0203e3f0

	arm_func_start switchD
switchD: ; 0x0203E404
	addls pc, pc, r1, lsl #2
	b _0203E498
	arm_func_end switchD
_0203E40C: ; jump table
	b _0203E498 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0203E410
	b _0203E428
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0203E414
	b _0203E46C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203E418
	b _0203E42C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0203E41C
	b _0203E458
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0203E420
	b _0203E434
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0203E424
	b _0203E444
	arm_func_end caseD_6
_0203E428:
	pop {r4, r5, r6, pc}
_0203E42C:
	bl FUN_0203f7bc
	b _0203E4C8
_0203E434:
	bl FUN_0203eaf8
	cmp r0, #0
	beq _0203E4C8
	b _0203E4B8
_0203E444:
	add r0, r4, #0x1400
	bl FUN_02014054
	cmp r0, #0
	beq _0203E458
	b _0203E4B8
_0203E458:
	mov r0, r4
	bl FUN_0203eb30
	cmp r0, #0
	bne _0203E4C8
	b _0203E4B8
_0203E46C:
	cmp r1, #1
	popeq {r4, r5, r6, pc}
	add r4, r4, #0x6a
	mov r6, #2
_0203E47C:
	mov r1, r6
	add r0, r4, #0x2400
	bl FUN_020026d0
	ldrh r0, [r5, #0x6a]
	cmp r0, #1
	bne _0203E47C
	pop {r4, r5, r6, pc}
_0203E498:
	add r0, r4, #0x2400
	ldrh r0, [r0, #0x6c]
	tst r0, #2
	mov r0, r4
	beq _0203E4C0
	bl FUN_0203eb30
	cmp r0, #0
	bne _0203E4C8
_0203E4B8:
	mov r0, r4
	b _0203E4C0
_0203E4C0:
	bl FUN_0203e358
	mov r6, r0
_0203E4C8:
	cmp r6, #0
	addne r5, r4, #0x2400
	ldrhne r0, [r5, #0x6a]
	cmpne r0, #1
	popeq {r4, r5, r6, pc}
	add r4, r4, #0x6a
	mov r6, #2
_0203E4E4:
	mov r1, r6
	add r0, r4, #0x2400
	bl FUN_020026d0
	ldrh r0, [r5, #0x6a]
	cmp r0, #1
	bne _0203E4E4
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0203e500
FUN_0203e500: ; 0x0203E500
	ldrh r0, [r0, #2]
	cmp r0, #0
	ldrne r0, _0203E528 ; =0x020B5BB0
	movne r1, #9
	ldreq r0, _0203E528 ; =0x020B5BB0
	moveq r1, #0
	ldr r0, [r0]
	add r0, r0, #0x2400
	strh r1, [r0, #0x6a]
	bx lr
	.align 2, 0_0203E528: .word 0x020B5BB0
	arm_func_end FUN_0203e500

	arm_func_start FUN_0203e52c
FUN_0203e52c: ; 0x0203E52C
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	add r0, r4, #0x2400
	ldrh r0, [r0, #0x6a]
	mov r7, #0
	cmp r0, #1
	movne r0, r7
	popne {r4, r5, r6, r7, r8, pc}
	ldr r0, _0203E604 ; =FUN_0203e500
	bl FUN_02013168
	cmp r0, #2
	movne r0, r7
	popne {r4, r5, r6, r7, r8, pc}
	add r6, r4, #0x2400
	ldrh r0, [r6, #0x6a]
	cmp r0, #1
	bne _0203E590
	add r5, r4, #0x6a
	mov r8, #2
	arm_func_end FUN_0203e52c
_0203E578:
	mov r1, r8
	add r0, r5, #0x2400
	bl FUN_020026d0
	ldrh r0, [r6, #0x6a]
	cmp r0, #1
	beq _0203E578
_0203E590:
	ldr r0, _0203E608 ; =0x020B5BB0
	ldr r0, [r0]
	add r0, r0, #0x2400
	ldrh r0, [r0, #0x6a]
	cmp r0, #9
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r1, [r4, #0x204]
	cmp r1, #0
	beq _0203E5C4
	mov r0, r4
	bl FUN_0203dfd0
	str r7, [r4, #0x204]
_0203E5C4:
	ldr r1, [r4, #0x208]
	cmp r1, #0
	beq _0203E5DC
	mov r0, r4
	bl FUN_0203dfd0
	str r7, [r4, #0x208]
_0203E5DC:
	ldr r1, [r4, #0x20c]
	cmp r1, #0
	beq _0203E5F4
	mov r0, r4
	bl FUN_0203dfd0
	str r7, [r4, #0x20c]
_0203E5F4:
	ldr r0, _0203E608 ; =0x020B5BB0
	str r7, [r0]
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0203E604: .word FUN_0203e500
_0203E608: .word 0x020B5BB0

	arm_func_start FUN_0203e60c
FUN_0203e60c: ; 0x0203E60C
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	add r0, r5, #0x2400
	ldrh r0, [r0, #0x6c]
	tst r0, #2
	addne sp, sp, #8
	movne r0, #1
	popne {r3, r4, r5, pc}
	ldr r0, [r5, #0x238]
	mov r4, #1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	stm sp, {r0, r4}
	ldr r2, [r5, #0x208]
	ldr r0, [r5, #0x204]
	ldr r1, [r5, #0x23c]
	add r3, r0, #0x1f
	add ip, r2, #0x1f
	lsl r2, r1, #0x10
	ldr r0, _0203E68C ; =FUN_0203e690
	bic r1, ip, #0x1f
	lsr r2, r2, #0x10
	bic r3, r3, #0x1f
	bl FUN_02013908
	cmp r0, #2
	addne r1, r5, #0x2000
	strne r0, [r1, #0x440]
	movne r0, #0
	moveq r0, r4
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0_0203E68C: .word FUN_0203e690
	arm_func_end FUN_0203e60c

	arm_func_start FUN_0203e690
FUN_0203e690: ; 0x0203E690
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r4, _0203E834 ; =0x020B5BB0
	ldr r2, [r4]
	cmp r2, #0
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	ldrh r1, [r0, #2]
	cmp r1, #0
	bgt _0203E6C0
	beq _0203E708
	b _0203E6E0
	arm_func_end FUN_0203e690
_0203E6C0:
	cmp r1, #0xf
	bgt _0203E6E0
	cmp r1, #9
	blt _0203E6E0
	cmpne r1, #0xd
	cmpne r1, #0xf
	addeq sp, sp, #4
	popeq {r3, r4, pc}
_0203E6E0:
	add r1, r2, #0x2400
	mov r2, #9
	strh r2, [r1, #0x6a]
	ldr r1, _0203E834 ; =0x020B5BB0
	ldrh r2, [r0, #2]
	ldr r0, [r1]
	add sp, sp, #4
	add r0, r0, #0x2000
	str r2, [r0, #0x440]
	pop {r3, r4, pc}
_0203E708:
	ldrh r0, [r0, #4]
	sub r0, r0, #0xa
	cmp r0, #3

	arm_func_start switchD
switchD: ; 0x0203E714
	addls pc, pc, r0, lsl #2
	b _0203E82C
	arm_func_end switchD
_0203E71C: ; jump table
	b LAB_0203e72c ; case 0

	arm_func_start caseD_b
caseD_b: ; 0x0203E720
	b _0203E82C
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0203E724
	b _0203E82C
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0203E728
	b _0203E82C
	arm_func_end caseD_d
LAB_0203e72c:
	add r0, r2, #0x2400
	ldrh r1, [r0, #0x6c]
	orr r1, r1, #2
	strh r1, [r0, #0x6c]
	ldr ip, [r4]
	add r0, ip, #0x2400
	ldrh r1, [r0, #0x68]
	tst r1, #1
	beq _0203E7AC
	ldrh r0, [r0, #0x6a]
	cmp r0, #5
	beq _0203E820
	add r0, ip, #0xc20
	add r0, r0, #0x1000
	mov r1, #0xd
	bl FUN_02014964
	cmp r0, #0
	beq _0203E790
	ldr r1, [r4]
	mov r2, #9
	add r1, r1, #0x2400
	strh r2, [r1, #0x6a]
	ldr r1, [r4]
	add r1, r1, #0x2000
	str r0, [r1, #0x440]
_0203E790:
	ldr r0, _0203E834 ; =0x020B5BB0
	mov r1, #5
	ldr r0, [r0]
	add sp, sp, #4
	add r0, r0, #0x2400
	strh r1, [r0, #0x6a]
	pop {r3, r4, pc}
_0203E7AC:
	tst r1, #2
	beq _0203E820
	mov r2, #1
	str r2, [sp]
	ldrh r1, [r0, #0x5e]
	ldrh r3, [r0, #0x66]
	add r0, ip, #0x1400
	lsl r1, r2, r1
	sub r1, r1, #1
	lsl r1, r1, #0x10
	lsr r2, r1, #0x10
	mov r1, #0xd
	bl FUN_02013e14
	cmp r0, #0
	ldreq r0, [r4]
	moveq r1, #6
	addeq r0, r0, #0x2400
	strheq r1, [r0, #0x6a]
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	ldr r1, [r4]
	mov r2, #9
	add r1, r1, #0x2400
	strh r2, [r1, #0x6a]
	ldr r1, [r4]
	add sp, sp, #4
	add r1, r1, #0x2000
	str r0, [r1, #0x440]
	pop {r3, r4, pc}
_0203E820:
	add r0, ip, #0x2400
	mov r1, #4
	strh r1, [r0, #0x6a]
_0203E82C:
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_0203E834: .word 0x020B5BB0

	arm_func_start FUN_0203e838
FUN_0203e838: ; 0x0203E838
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x2400
	ldrh r1, [r0, #0x6e]
	ldrh r2, [r0, #0x70]
	ldr r0, _0203E86C ; =FUN_0203e870
	bl FUN_02013a30
	cmp r0, #2
	addne r1, r4, #0x2000
	strne r0, [r1, #0x440]
	movne r0, #0
	moveq r0, #1
	pop {r4, pc}
	.align 2, 0_0203E86C: .word FUN_0203e870
	arm_func_end FUN_0203e838

	arm_func_start FUN_0203e870
FUN_0203e870: ; 0x0203E870
	push {r4, lr}
	ldr r4, _0203E898 ; =0x020B5BB0
	ldr r0, [r4]
	bl FUN_0203e60c
	cmp r0, #0
	ldreq r0, [r4]
	moveq r1, #9
	addeq r0, r0, #0x2400
	strheq r1, [r0, #0x6a]
	pop {r4, pc}
	.align 2, 0_0203E898: .word 0x020B5BB0
	arm_func_end FUN_0203e870

	arm_func_start FUN_0203e89c
FUN_0203e89c: ; 0x0203E89C
	push {r3, lr}
	mov r2, r0
	add r0, r2, #0x2400
	ldrh r0, [r0, #0x6a]
	cmp r0, #6
	movne r0, #0
	popne {r3, pc}
	add r0, r2, #0x1400
	add r2, r2, #4
	bl FUN_020140a0
	cmp r0, #0
	beq _0203E8D4
	cmp r0, #5
	b _0203E8DC
	arm_func_end FUN_0203e89c
_0203E8D4:
	mov r0, #1
	pop {r3, pc}
_0203E8DC:
	ldr r1, _0203E8F4 ; =0x020B5BB0
	ldr r1, [r1]
	add r1, r1, #0x2000
	str r0, [r1, #0x440]
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_0203E8F4: .word 0x020B5BB0

	arm_func_start FUN_0203e8f8
FUN_0203e8f8: ; 0x0203E8F8
	push {r3, lr}
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq _0203E910
	cmp r1, #0xf
	popne {r3, pc}
	arm_func_end FUN_0203e8f8
_0203E910:
	ldr r2, [r0, #0x20]
	cmp r2, #0
	popeq {r3, pc}
	mov r0, #1
	cmp r1, #0
	movne r0, #0
	blx r2
	pop {r3, pc}

	arm_func_start FUN_0203e930
FUN_0203e930: ; 0x0203E930
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	mov lr, r0
	add r0, lr, #0x2400
	ldrh ip, [r0, #0x6a]
	mov r6, r1
	mov r5, r2
	cmp ip, #4
	mov r4, r3
	addne sp, sp, #0xc
	movne r0, #0
	popne {r3, r4, r5, r6, pc}
	ldrh r0, [r0, #0x6c]
	tst r0, #0x10
	addne sp, sp, #0xc
	movne r0, #0
	popne {r3, r4, r5, r6, pc}
	ldr r0, [lr, #0x204]
	ldr r1, [lr, #0x238]
	bl FUN_020026d0
	ldr r0, _0203E9D0 ; =0x0000FFFF
	mov r1, r4
	str r0, [sp]
	mov ip, #0xe
	ldr r0, _0203E9D4 ; =FUN_0203e8f8
	mov r2, r6
	mov r3, r5
	str ip, [sp, #4]
	mov r4, #1
	str r4, [sp, #8]
	bl FUN_02013a7c
	ldr r1, _0203E9D8 ; =0x020B5BB0
	cmp r0, #2
	ldr r1, [r1]
	movne r4, #0
	add r1, r1, #0x2000
	str r0, [r1, #0x440]
	mov r0, r4
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_0203E9D0: .word 0x0000FFFF
_0203E9D4: .word FUN_0203e8f8
_0203E9D8: .word 0x020B5BB0
	arm_func_end FUN_0203e930

	arm_func_start FUN_0203e9dc
FUN_0203e9dc: ; 0x0203E9DC
	push {r3, lr}
	mov r1, r0
	ldrh r0, [r1, #2]
	cmp r0, #0
	popne {r3, pc}
	ldr r0, _0203EA3C ; =0x020B5BB0
	ldr r3, [r0, #4]
	cmp r3, #0
	popeq {r3, pc}
	ldrh r0, [r1, #4]
	cmp r0, #0x15
	bne _0203EA20
	ldrh r0, [r1, #0x12]
	ldrh r2, [r1, #0x10]
	ldr r1, [r1, #0xc]
	blx r3
	pop {r3, pc}
	arm_func_end FUN_0203e9dc
_0203EA20:
	cmp r0, #9
	popne {r3, pc}
	ldrh r0, [r1, #0x12]
	mov r1, #0
	mov r2, r1
	blx r3
	pop {r3, pc}
	.align 2, 0_0203EA3C: .word 0x020B5BB0

	arm_func_start FUN_0203ea40
FUN_0203ea40: ; 0x0203EA40
	ldr r2, _0203EA5C ; =0x020B5BB0
	ldr r1, _0203EA60 ; =FUN_0203e9dc
	str r0, [r2, #4]
	ldr ip, _0203EA64 ; =FUN_0201286c
	mov r0, #0xe
	mov r2, #0
	bx ip
	.align 2, 0_0203EA5C: .word 0x020B5BB0
_0203EA60: .word FUN_0203e9dc
_0203EA64: .word FUN_0201286c
	arm_func_end FUN_0203ea40

	arm_func_start FUN_0203ea68
FUN_0203ea68: ; 0x0203EA68
	ldrh r0, [r0, #2]
	cmp r0, #0
	bxne lr
	ldr r1, _0203EA94 ; =0x020B5BB0
	ldr r0, _0203EA98 ; =0x0000FFEF
	ldr r1, [r1]
	add r1, r1, #0x2400
	ldrh r2, [r1, #0x6c]
	and r0, r2, r0
	strh r0, [r1, #0x6c]
	bx lr
	.align 2, 0_0203EA94: .word 0x020B5BB0
_0203EA98: .word 0x0000FFEF
	arm_func_end FUN_0203ea68

	arm_func_start FUN_0203ea9c
FUN_0203ea9c: ; 0x0203EA9C
	lsl r1, r1, #0x10
	ldr r0, _0203EAB0 ; =FUN_0203ea68
	ldr ip, _0203EAB4 ; =FUN_020139ec
	lsr r1, r1, #0x10
	bx ip
	.align 2, 0_0203EAB0: .word FUN_0203ea68
_0203EAB4: .word FUN_020139ec
	arm_func_end FUN_0203ea9c

	arm_func_start FUN_0203eab8
FUN_0203eab8: ; 0x0203EAB8
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r5, r2
	mov r2, r1
	add r0, r4, #0x1400
	add r1, r4, #4
	mov r4, r3
	bl FUN_020148e0
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r1, r5
	mov r2, r4
	bl _memcpy
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0203eab8

	arm_func_start FUN_0203eaf8
FUN_0203eaf8: ; 0x0203EAF8
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0xc20
	add r0, r0, #0x1000
	bl thunk_FUN_02014054
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	mov r0, r4
	bl FUN_0203eb30
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r4, pc}
	arm_func_end FUN_0203eaf8

	arm_func_start FUN_0203eb30
FUN_0203eb30: ; 0x0203EB30
	push {r3, lr}
	ldr r0, _0203EB4C ; =FUN_0203eb50
	bl FUN_02013bb4
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	.align 2, 0_0203EB4C: .word FUN_0203eb50
	arm_func_end FUN_0203eb30

	arm_func_start FUN_0203eb50
FUN_0203eb50: ; 0x0203EB50
	push {r3, lr}
	ldr r1, _0203EBB0 ; =0x020B5BB0
	ldr r1, [r1]
	cmp r1, #0
	popeq {r3, pc}
	ldrh r0, [r0, #2]
	cmp r0, #0
	add r0, r1, #0x2400
	ldrh r0, [r0, #0x68]
	beq _0203EB94
	tst r0, #0x100
	mov r0, r1
	beq _0203EB8C
	bl FUN_0203e358
	pop {r3, pc}
	arm_func_end FUN_0203eb50
_0203EB8C:
	bl FUN_0203e3f0
	pop {r3, pc}
_0203EB94:
	tst r0, #0x100
	mov r0, r1
	beq _0203EBA8
	bl FUN_0203ebb4
	pop {r3, pc}
_0203EBA8:
	bl FUN_0203ec20
	pop {r3, pc}
	.align 2, 0_0203EBB0: .word 0x020B5BB0

	arm_func_start FUN_0203ebb4
FUN_0203ebb4: ; 0x0203EBB4
	push {r3, lr}
	ldr r0, _0203EBD0 ; =FUN_0203ebd4
	bl FUN_02013350
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	.align 2, 0_0203EBD0: .word FUN_0203ebd4
	arm_func_end FUN_0203ebb4

	arm_func_start FUN_0203ebd4
FUN_0203ebd4: ; 0x0203EBD4
	ldr r1, _0203EC18 ; =0x020B5BB0
	ldr r2, [r1]
	cmp r2, #0
	bxeq lr
	ldrh r0, [r0, #2]
	cmp r0, #0
	bxne lr
	add r0, r2, #0x2400
	mov r2, #1
	strh r2, [r0, #0x6a]
	ldr r1, [r1]
	ldr r0, _0203EC1C ; =0x0000FFFD
	add r1, r1, #0x2400
	ldrh r2, [r1, #0x6c]
	and r0, r2, r0
	strh r0, [r1, #0x6c]
	bx lr
	.align 2, 0_0203EC18: .word 0x020B5BB0
_0203EC1C: .word 0x0000FFFD
	arm_func_end FUN_0203ebd4

	arm_func_start FUN_0203ec20
FUN_0203ec20: ; 0x0203EC20
	push {r4, lr}
	mov r4, #0
	ldr r0, _0203EC54 ; =FUN_0203ec5c
	mov r1, r4
	bl FUN_020135f4
	cmp r0, #2
	moveq r0, #1
	popeq {r4, pc}
	ldr r0, _0203EC58 ; =0x020B5BB0
	ldr r0, [r0]
	bl FUN_0203e358
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0203EC54: .word FUN_0203ec5c
_0203EC58: .word 0x020B5BB0
	arm_func_end FUN_0203ec20

	arm_func_start FUN_0203ec5c
FUN_0203ec5c: ; 0x0203EC5C
	ldr r1, _0203ECA0 ; =0x020B5BB0
	ldr r2, [r1]
	cmp r2, #0
	bxeq lr
	ldrh r0, [r0, #2]
	cmp r0, #0
	bxne lr
	add r0, r2, #0x2400
	mov r2, #1
	strh r2, [r0, #0x6a]
	ldr r1, [r1]
	ldr r0, _0203ECA4 ; =0x0000FFFD
	add r1, r1, #0x2400
	ldrh r2, [r1, #0x6c]
	and r0, r2, r0
	strh r0, [r1, #0x6c]
	bx lr
	.align 2, 0_0203ECA0: .word 0x020B5BB0
_0203ECA4: .word 0x0000FFFD
	arm_func_end FUN_0203ec5c

	arm_func_start FUN_0203eca8
FUN_0203eca8: ; 0x0203ECA8
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x2400
	ldrh r0, [r0, #0x6a]
	mov r4, r1
	cmp r0, #1
	movne r0, #0
	popne {r3, r4, r5, pc}
	mov r0, r2
	add r1, r5, #0x220
	mov r2, #0x14
	bl _memcpy
	ldr r0, _0203ED04 ; =FUN_0203ed08
	mov r1, r4
	add r3, r5, #0x2400
	mov ip, #8
	add r2, r5, #0x220
	strh ip, [r3, #0x6a]
	bl FUN_0201498c
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_0203ED04: .word FUN_0203ed08
	arm_func_end FUN_0203eca8

	arm_func_start FUN_0203ed08
FUN_0203ed08: ; 0x0203ED08
	ldr r2, _0203ED68 ; =0x020B5BB0
	ldr r3, [r2]
	cmp r3, #0
	bxeq lr
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq _0203ED44
	add r1, r3, #0x2400
	mov r3, #9
	strh r3, [r1, #0x6a]
	ldr r1, [r2]
	ldrh r2, [r0, #2]
	add r0, r1, #0x2000
	str r2, [r0, #0x440]
	bx lr
	arm_func_end FUN_0203ed08
_0203ED44:
	add r0, r3, #0x2400
	mov r1, #1
	strh r1, [r0, #0x6a]
	ldr r0, [r2]
	add r0, r0, #0x2400
	ldrh r1, [r0, #0x6c]
	orr r1, r1, #4
	strh r1, [r0, #0x6c]
	bx lr
	.align 2, 0_0203ED68: .word 0x020B5BB0

	arm_func_start FUN_0203ed6c
FUN_0203ed6c: ; 0x0203ED6C
	push {r3, lr}
	add r2, r0, #0x2400
	ldrh r3, [r2, #0x6a]
	cmp r3, #1
	movne r0, #0
	popne {r3, pc}
	strh r1, [r2, #0x62]
	add r2, r0, #0x300
	mov ip, #0
	mov r3, #0x65
	mov r1, #1
	strh ip, [r2, #0x62]
	strh r3, [r2, #0x64]
	bl FUN_0203eda8
	pop {r3, pc}
	arm_func_end FUN_0203ed6c

	arm_func_start FUN_0203eda8
FUN_0203eda8: ; 0x0203EDA8
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02012bc0
	cmp r0, #0x8000
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	sub r1, r4, #1
	mov r2, #1
	tst r0, r2, lsl r1
	bne _0203EE04
	arm_func_end FUN_0203eda8
_0203EDE0:
	add r1, r4, #1
	lsl r1, r1, #0x10
	lsr r4, r1, #0x10
	cmp r4, #0x10
	movhs r0, #0
	pophs {r3, r4, r5, pc}
	sub r1, r4, #1
	tst r0, r2, lsl r1
	beq _0203EDE0
_0203EE04:
	add r1, r5, #0x2400
	mov r2, #2
	strh r2, [r1, #0x6a]
	mov r3, r4
	mov r4, #0x1e
	ldr r0, _0203EE44 ; =FUN_0203ee48
	mov r1, #3
	mov r2, #0x11
	str r4, [sp]
	bl FUN_02014c18
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r0, #2
	movne r0, #0
	moveq r0, #1
	pop {r3, r4, r5, pc}
	.align 2, 0_0203EE44: .word FUN_0203ee48

	arm_func_start FUN_0203ee48
FUN_0203ee48: ; 0x0203EE48
	push {r4, lr}
	ldr r2, _0203EEF8 ; =0x020B5BB0
	ldr r3, [r2]
	cmp r3, #0
	popeq {r4, pc}
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq _0203EE88
	add r1, r3, #0x2400
	mov r3, #9
	strh r3, [r1, #0x6a]
	ldr r1, [r2]
	ldrh r2, [r0, #2]
	add r0, r1, #0x2000
	str r2, [r0, #0x440]
	pop {r4, pc}
	arm_func_end FUN_0203ee48
_0203EE88:
	add r1, r3, #0x300
	ldrh r4, [r1, #0x64]
	ldrh r3, [r0, #0xa]
	ldrh ip, [r0, #8]
	cmp r4, r3
	strhhi ip, [r1, #0x62]
	ldrhi r1, [r2]
	ldrhhi r2, [r0, #0xa]
	addhi r0, r1, #0x300
	ldr r4, _0203EEF8 ; =0x020B5BB0
	strhhi r2, [r0, #0x64]
	add r0, ip, #1
	lsl r1, r0, #0x10
	ldr r0, [r4]
	lsr r1, r1, #0x10
	bl FUN_0203eda8
	cmp r0, #0
	popne {r4, pc}
	ldr r3, [r4]
	mov r1, #1
	add r0, r3, #0x300
	ldrh r2, [r0, #0x62]
	add r0, r3, #0x2400
	strh r2, [r0, #0x62]
	ldr r0, [r4]
	add r0, r0, #0x2400
	strh r1, [r0, #0x6a]
	pop {r4, pc}
	.align 2, 0_0203EEF8: .word 0x020B5BB0

	arm_func_start FUN_0203eefc
FUN_0203eefc: ; 0x0203EEFC
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	add r0, r7, #0x2400
	ldrh r4, [r0, #0x6a]
	mov r6, r2
	mov r5, r3
	cmp r4, #1
	movne r0, #0
	popne {r4, r5, r6, r7, r8, pc}
	orr r1, r1, #0x100
	mov r4, #0
	strh r1, [r0, #0x68]
	strh r4, [r0, #0x5c]
	bl FUN_02012ef8
	add r1, r7, #0x200
	strh r0, [r1, #0x34]
	add r0, r7, #0x2400
	ldrh r2, [r1, #0x34]
	add r1, r7, #0x300
	ldrh r0, [r0, #0x62]
	strh r2, [r1, #0x2c]
	strh r0, [r1, #0x52]
	bl FUN_02012c74
	add r2, r7, #0x2400
	add r1, r7, #0x300
	ldrh r8, [r2, #0x5e]
	ldrh lr, [r2, #0x64]
	ldrh ip, [r2, #0x66]
	ldrh r3, [r2, #0x68]
	sub r8, r8, #1
	mov r2, #1
	strh r0, [r1, #0x38]
	strh r8, [r1, #0x30]
	tst r3, #1
	strh r2, [r1, #0x2e]
	ldr r0, _0203EFD4 ; =FUN_0203efd8
	strh lr, [r1, #0x54]
	strh ip, [r1, #0x56]
	strh r4, [r1, #0x36]
	strh r4, [r1, #0x32]
	moveq r2, r4
	add r4, r7, #0x2400
	add r3, r7, #0x300
	mov r8, #0
	add r1, r7, #0x320
	strh r2, [r3, #0x34]
	strh r8, [r4, #0x60]
	strh r6, [r4, #0x6e]
	strh r5, [r4, #0x70]
	bl FUN_020131ac
	cmp r0, #2
	movne r0, r8
	moveq r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0203EFD4: .word FUN_0203efd8
	arm_func_end FUN_0203eefc

	arm_func_start FUN_0203efd8
FUN_0203efd8: ; 0x0203EFD8
	push {r3, lr}
	ldr r2, _0203F024 ; =0x020B5BB0
	ldr r3, [r2]
	cmp r3, #0
	popeq {r3, pc}
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq _0203F018
	add r1, r3, #0x2400
	mov r3, #9
	strh r3, [r1, #0x6a]
	ldr r1, [r2]
	ldrh r2, [r0, #2]
	add r0, r1, #0x2000
	str r2, [r0, #0x440]
	pop {r3, pc}
	arm_func_end FUN_0203efd8
_0203F018:
	ldr r0, _0203F028 ; =FUN_0203f02c
	bl FUN_02013340
	pop {r3, pc}
	.align 2, 0_0203F024: .word 0x020B5BB0
_0203F028: .word FUN_0203f02c

	arm_func_start FUN_0203f02c
FUN_0203f02c: ; 0x0203F02C
	push {r4, lr}
	ldr r2, _0203F164 ; =0x020B5BB0
	ldr r3, [r2]
	cmp r3, #0
	popeq {r4, pc}
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq _0203F06C
	add r1, r3, #0x2400
	mov r3, #9
	strh r3, [r1, #0x6a]
	ldr r1, [r2]
	ldrh r2, [r0, #2]
	add r0, r1, #0x2000
	str r2, [r0, #0x440]
	pop {r4, pc}
	arm_func_end FUN_0203f02c
_0203F06C:
	ldrh r1, [r0, #8]
	cmp r1, #7
	bgt _0203F094
	bge _0203F0B0
	cmp r1, #2
	bgt _0203F148
	cmp r1, #0
	blt _0203F148
	beq _0203F100
	b _0203F148
_0203F094:
	cmp r1, #9
	bgt _0203F0A4
	beq _0203F0D0
	b _0203F148
_0203F0A4:
	cmp r1, #0x1a
	beq _0203F0FC
	b _0203F148
_0203F0B0:
	ldrh r0, [r0, #0x10]
	add r1, r3, #0x2400
	mov r2, #1
	lsl r0, r2, r0
	ldrh r2, [r1, #0x60]
	lsl r0, r0, #0x10
	orr r0, r2, r0, lsr #16
	b _0203F0F4
_0203F0D0:
	ldrh r0, [r0, #0x10]
	mov r2, #1
	add r1, r3, #0x2400
	lsl r0, r2, r0
	lsl r0, r0, #0x10
	mvn r0, r0, lsr #16
	ldrh r2, [r1, #0x60]
	lsl r0, r0, #0x10
	and r0, r2, r0, lsr #16
_0203F0F4:
	strh r0, [r1, #0x60]
	b _0203F148
_0203F0FC:
	b _0203F0D0
_0203F100:
	add r0, r3, #0x2400
	ldrh r1, [r0, #0x6e]
	cmp r1, #0
	ldrhne r0, [r0, #0x70]
	cmpne r0, #0
	beq _0203F128
	mov r0, r3
	bl FUN_0203e838
	cmp r0, #0
	bne _0203F148
_0203F128:
	ldr r4, _0203F164 ; =0x020B5BB0
	ldr r0, [r4]
	bl FUN_0203e60c
	cmp r0, #0
	ldreq r0, [r4]
	moveq r1, #9
	addeq r0, r0, #0x2400
	strheq r1, [r0, #0x6a]
_0203F148:
	ldr r0, _0203F164 ; =0x020B5BB0
	mov r1, #2
	ldr r0, [r0]
	add r0, r0, #0x460
	add r0, r0, #0x2000
	bl FUN_020026d0
	pop {r4, pc}
	.align 2, 0_0203F164: .word 0x020B5BB0

	arm_func_start FUN_0203f168
FUN_0203f168: ; 0x0203F168
	push {r4, r5, r6, r7, r8, lr}
	mov r5, r0
	add r3, r5, #0x2400
	ldrh r0, [r3, #0x6a]
	mov r4, r1
	mov r7, r2
	cmp r0, #1
	movne r0, #0
	popne {r4, r5, r6, r7, r8, pc}
	ldr r2, _0203F228 ; =0x00001078
	mov r6, #3
	add r0, r5, #0x380
	mov r1, #0
	strh r6, [r3, #0x6a]
	bl MemWrite
	cmp r7, #0
	add r0, r5, #0x8a
	mov r2, #6
	beq _0203F1C4
	mov r1, r7
	add r0, r0, #0x300
	bl _memcpy
	b _0203F1D0
	arm_func_end FUN_0203f168
_0203F1C4:
	add r0, r0, #0x300
	mov r1, #0xff
	bl MemWrite
_0203F1D0:
	mov r6, #0
	add r3, r5, #0x1300
	add r8, r5, #0x3e0
	add lr, r5, #0x1000
	mov r1, r6
	add ip, r5, #0x300
	mov r7, #0x400
	add r0, r5, #0x7e0
	mov r2, #0xc00
	strh r4, [r3, #0xf4]
	str r8, [r5, #0x380]
	strh r7, [ip, #0x84]
	strb r6, [lr, #0x3e2]
	bl MemWrite
	add r0, r5, #0xe3
	mov r1, r6
	add r0, r0, #0x1300
	mov r2, #0x10
	bl MemWrite
	mov r0, r5
	bl FUN_0203f22c
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0203F228: .word 0x00001078

	arm_func_start FUN_0203f22c
FUN_0203f22c: ; 0x0203F22C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	bl FUN_02012bc0
	cmp r0, #0x8000
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r1, r6, #0x1300
	ldrh r7, [r1, #0xf4]
	mov r2, #1
	mov r5, r2
	cmp r7, #0
	addeq r1, r7, #1
	lsleq r1, r1, #0x10
	lsreq r7, r1, #0x10
	arm_func_end FUN_0203f22c
_0203F270:
	cmp r7, #0x10
	movhi r7, r2
	sub r1, r7, #1
	tst r0, r5, lsl r1
	lsl lr, r5, r1
	addeq r1, r7, #1
	lsleq r1, r1, #0x10
	lsreq r7, r1, #0x10
	beq _0203F270
	add ip, r6, #0x300
	add r3, r6, #0x1300
	mov r4, #0
	add r0, r6, #0x394
	mov r1, #0xff
	mov r2, #0x20
	strh r7, [r3, #0xf4]
	strh lr, [ip, #0x86]
	strh r5, [ip, #0x90]
	strh r4, [ip, #0x92]
	bl MemWrite
	bl FUN_02012d08
	add r2, r6, #0x2400
	ldrh r3, [r2, #0x6c]
	add r1, r6, #0x300
	strh r0, [r1, #0x88]
	orr r3, r3, #1
	ldr r0, _0203F2F8 ; =FUN_0203f330
	add r1, r6, #0x380
	strh r3, [r2, #0x6c]
	bl FUN_02013394
	cmp r0, #2
	movne r0, r4
	moveq r0, r5
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0203F2F8: .word FUN_0203f330

	arm_func_start FUN_0203f2fc
FUN_0203f2fc: ; 0x0203F2FC
	mov ip, #0
	arm_func_end FUN_0203f2fc
_0203F300:
	ldrb r3, [r0]
	ldrb r2, [r1]
	cmp r3, r2
	movne r0, #0
	bxne lr
	add ip, ip, #1
	cmp ip, #0x10
	add r0, r0, #1
	add r1, r1, #1
	blt _0203F300
	mov r0, #1
	bx lr

	arm_func_start FUN_0203f330
FUN_0203f330: ; 0x0203F330
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	str r0, [sp]
	ldr r0, _0203F7AC ; =0x020B5BB0
	mov r4, #1
	ldr r0, [r0]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp]
	ldrh r1, [r1, #2]
	cmp r1, #0
	beq _0203F384
	add r0, r0, #0x2400
	mov r1, #9
	strh r1, [r0, #0x6a]
	ldr r0, _0203F7AC ; =0x020B5BB0
	ldr r1, [r0]
	ldr r0, [sp]
	ldrh r2, [r0, #2]
	add r0, r1, #0x2000
	str r2, [r0, #0x440]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0203f330
_0203F384:
	add r1, r0, #0x2400
	ldrh r1, [r1, #0x6a]
	cmp r1, #3
	beq _0203F39C
	bl FUN_0203f7bc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203F39C:
	ldr r1, [sp]
	ldrh r1, [r1, #8]
	cmp r1, #3
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r1, #4
	beq _0203F3C0
	cmp r1, #5
	beq _0203F460
	b _0203F788
_0203F3C0:
	mov r6, #0xc0
	mov r5, #0
	mov r7, r6
	b _0203F454
_0203F3D0:
	ldr r0, _0203F7AC ; =0x020B5BB0
	ldr r1, [r0]
	add r0, r1, r5
	add r0, r0, #0x1000
	ldrb r0, [r0, #0x3e3]
	cmp r0, #0
	beq _0203F450
	add r0, r1, #0xe3
	add r1, r0, #0x1300
	ldrb r0, [r1, r5]
	sub r0, r0, #1
	strb r0, [r1, r5]
	ldr r0, _0203F7AC ; =0x020B5BB0
	ldr r1, [r0]
	add r0, r1, r5
	add r0, r0, #0x1000
	ldrb r0, [r0, #0x3e3]
	cmp r0, #0
	bne _0203F450
	add r0, r1, #0x7e0
	mla r0, r5, r7, r0
	mov r1, #0
	mov r2, r6
	bl MemWrite
	ldr r0, _0203F7AC ; =0x020B5BB0
	mvn r1, r4, lsl r5
	ldr r0, [r0]
	and r1, r1, #0xff
	add r0, r0, #0x1000
	ldrb r2, [r0, #0x3e2]
	and r1, r2, r1
	strb r1, [r0, #0x3e2]
_0203F450:
	add r5, r5, #1
_0203F454:
	cmp r5, #0x10
	blt _0203F3D0
	b _0203F788
_0203F460:
	ldr r1, [sp]
	ldrh r1, [r1, #0xe]
	cmp r1, #0
	beq _0203F47C
	add r0, r0, #0x3e0
	mov r1, #0x400
	bl FUN_02002698
_0203F47C:
	mov r5, #0
	b _0203F778
_0203F484:
	ldr r0, [sp]
	mov r2, #0
	add r0, r0, r5, lsl #2
	ldr r6, [r0, #0x10]
	mov r3, r2
	ldrh r1, [r6, #0x3c]
	mov r0, r2
	cmp r1, #0x10
	blo _0203F4B0
	cmp r1, #0x80
	movls r0, #1
_0203F4B0:
	cmp r0, #0
	beq _0203F4C8
	ldrb r0, [r6, #0x4a]
	add r0, r0, #0x10
	cmp r1, r0
	moveq r3, #1
_0203F4C8:
	cmp r3, #0
	beq _0203F4DC
	ldrh r0, [r6, #0x40]
	cmp r0, #1
	moveq r2, #1
_0203F4DC:
	cmp r2, #0
	beq _0203F774
	ldr r0, _0203F7AC ; =0x020B5BB0
	ldr r2, [r6, #0x44]
	ldr r1, [r0]
	ldr r0, [r1, #0x328]
	cmp r2, r0
	bne _0203F774
	ldrb r0, [r6, #0x4b]
	tst r0, #1
	beq _0203F774
	tst r0, #2
	bne _0203F774
	ldr r1, [r1, #0x320]
	add r0, r6, #0x50
	bl FUN_0203f2fc
	cmp r0, #0
	beq _0203F774
	ldrb r0, [r6, #0x75]
	cmp r0, #0
	bne _0203F774
	ldr r0, _0203F7AC ; =0x020B5BB0
	mov ip, #0
	ldr r0, [r0]
	add r1, r0, #0x3e4
	add fp, r1, #0x400
	b _0203F604
_0203F548:
	add r1, r0, ip
	add r1, r1, #0x1000
	ldrb r1, [r1, #0x3e3]
	cmp r1, #0
	beq _0203F600
	mov r1, #0xc0
	mul r2, ip, r1
	ldrb sl, [fp, r2]
	ldrb sb, [r6, #4]
	add r1, fp, r2
	mov r2, #0
	cmp sl, sb
	ldrbeq sl, [r1, #1]
	ldrbeq sb, [r6, #5]
	mov r8, r2
	mov r3, r2
	cmpeq sl, sb
	moveq r8, r4
	mov lr, r2
	mov r7, r2
	cmp r8, #0
	beq _0203F5B0
	ldrb sb, [r1, #2]
	ldrb r8, [r6, #6]
	cmp sb, r8
	moveq r7, r4
_0203F5B0:
	cmp r7, #0
	beq _0203F5C8
	ldrb r8, [r1, #3]
	ldrb r7, [r6, #7]
	cmp r8, r7
	moveq lr, r4
_0203F5C8:
	cmp lr, #0
	beq _0203F5E0
	ldrb r8, [r1, #4]
	ldrb r7, [r6, #8]
	cmp r8, r7
	moveq r3, r4
_0203F5E0:
	cmp r3, #0
	beq _0203F5F8
	ldrb r3, [r1, #5]
	ldrb r1, [r6, #9]
	cmp r3, r1
	moveq r2, r4
_0203F5F8:
	cmp r2, #0
	bne _0203F60C
_0203F600:
	add ip, ip, #1
_0203F604:
	cmp ip, #0x10
	blt _0203F548
_0203F60C:
	cmp ip, #0x10
	ldr r1, _0203F7AC ; =0x020B5BB0
	blt _0203F64C
	mov ip, #0
	ldr r2, [r1]
	b _0203F63C
_0203F624:
	add r0, r2, ip
	add r0, r0, #0x1000
	ldrb r0, [r0, #0x3e3]
	cmp r0, #0
	beq _0203F644
	add ip, ip, #1
_0203F63C:
	cmp ip, #0x10
	blt _0203F624
_0203F644:
	cmp ip, #0x10
	bge _0203F788
_0203F64C:
	mov r0, #0xc0
	mul r2, ip, r0
	ldr r0, [r1]
	ldrh r1, [r6]
	add r3, r0, #0x7e0
	add r0, r3, r2
	strh r1, [r3, r2]
	ldrh r1, [r6, #2]
	add r8, r6, #0xc
	add r7, r0, #0xc
	strh r1, [r0, #2]
	ldrb r2, [r6, #4]
	ldrb r1, [r6, #5]
	mov r3, #0x10
	strb r2, [r0, #4]
	strb r1, [r0, #5]
	ldrb r2, [r6, #6]
	ldrb r1, [r6, #7]
	strb r2, [r0, #6]
	strb r1, [r0, #7]
	ldrb r2, [r6, #8]
	ldrb r1, [r6, #9]
	strb r2, [r0, #8]
	strb r1, [r0, #9]
	ldrh r1, [r6, #0xa]
	strh r1, [r0, #0xa]
_0203F6B4:
	ldrb r2, [r8]
	ldrb r1, [r8, #1]
	add r8, r8, #2
	subs r3, r3, #1
	strb r1, [r7, #1]
	strb r2, [r7], #2
	bne _0203F6B4
	ldrh r1, [r6, #0x2c]
	add sb, r6, #0x40
	add r8, r0, #0x40
	strh r1, [r0, #0x2c]
	ldrh r2, [r6, #0x2e]
	ldrh r1, [r6, #0x30]
	mov r7, #8
	strh r2, [r0, #0x2e]
	strh r1, [r0, #0x30]
	ldrh r1, [r6, #0x32]
	strh r1, [r0, #0x32]
	ldrh r1, [r6, #0x34]
	strh r1, [r0, #0x34]
	ldrh r1, [r6, #0x36]
	strh r1, [r0, #0x36]
	ldrh r1, [r6, #0x38]
	strh r1, [r0, #0x38]
	ldrh r1, [r6, #0x3a]
	strh r1, [r0, #0x3a]
	ldrh r1, [r6, #0x3c]
	strh r1, [r0, #0x3c]
	ldrh r1, [r6, #0x3e]
	strh r1, [r0, #0x3e]
_0203F72C:
	ldm sb!, {r0, r1, r2, r3}
	stm r8!, {r0, r1, r2, r3}
	subs r7, r7, #1
	bne _0203F72C
	ldr r1, _0203F7AC ; =0x020B5BB0
	mov r0, #1
	ldr r3, [r1]
	lsl r2, r0, ip
	add r0, r3, ip
	add r0, r0, #0x1000
	mov r3, #0x2c
	strb r3, [r0, #0x3e3]
	ldr r0, [r1]
	and r1, r2, #0xff
	add r0, r0, #0x1000
	ldrb r2, [r0, #0x3e2]
	orr r1, r2, r1
	strb r1, [r0, #0x3e2]
_0203F774:
	add r5, r5, #1
_0203F778:
	ldr r0, [sp]
	ldrh r0, [r0, #0xe]
	cmp r5, r0
	blt _0203F484
_0203F788:
	ldr r1, _0203F7AC ; =0x020B5BB0
	ldr r0, [r1]
	add r0, r0, #0x1300
	ldrh r2, [r0, #0xf4]
	add r2, r2, #1
	strh r2, [r0, #0xf4]
	ldr r0, [r1]
	bl FUN_0203f22c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0203F7AC: .word 0x020B5BB0

	arm_func_start thunk_FUN_0203f7bc
thunk_FUN_0203f7bc: ; 0x0203F7B0
	ldr ip, _0203F7B8 ; =FUN_0203f7bc
	bx ip
	.align 2, 0_0203F7B8: .word FUN_0203f7bc
	arm_func_end thunk_FUN_0203f7bc

	arm_func_start FUN_0203f7bc
FUN_0203f7bc: ; 0x0203F7BC
	push {r3, lr}
	add r1, r0, #0x2400
	ldrh r0, [r1, #0x6a]
	cmp r0, #3
	popne {r3, pc}
	ldr r0, _0203F7E4 ; =FUN_0203f7e8
	mov r2, #2
	strh r2, [r1, #0x6a]
	bl FUN_020134e4
	pop {r3, pc}
	.align 2, 0_0203F7E4: .word FUN_0203f7e8
	arm_func_end FUN_0203f7bc

	arm_func_start FUN_0203f7e8
FUN_0203f7e8: ; 0x0203F7E8
	ldr r2, _0203F838 ; =0x020B5BB0
	ldr r1, [r2]
	cmp r1, #0
	bxeq lr
	ldrh r0, [r0, #2]
	cmp r0, #0
	addne r0, r1, #0x2400
	movne r1, #9
	strhne r1, [r0, #0x6a]
	bxne lr
	add r1, r1, #0x2400
	ldrh ip, [r1, #0x6c]
	ldr r0, _0203F83C ; =0x0000FFFE
	mov r3, #1
	and r0, ip, r0
	strh r0, [r1, #0x6c]
	ldr r0, [r2]
	add r0, r0, #0x2400
	strh r3, [r0, #0x6a]
	bx lr
	.align 2, 0_0203F838: .word 0x020B5BB0
_0203F83C: .word 0x0000FFFE
	arm_func_end FUN_0203f7e8

	arm_func_start FUN_0203f840
FUN_0203f840: ; 0x0203F840
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	add r3, r6, #0x1000
	ldrb r3, [r3, #0x3e2]
	mov r5, #1
	mov r4, #0
	tst r3, r5, lsl r2
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, pc}
	add r3, r6, #0x2400
	ldrh r7, [r3, #0x6a]
	cmp r7, #3
	bne _0203F880
	bl FUN_0203f7bc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0203f840
_0203F880:
	cmp r7, #1
	movne r0, r4
	popne {r3, r4, r5, r6, r7, pc}
	ldrh r0, [r3, #0x6c]
	tst r0, #2
	movne r0, r5
	popne {r3, r4, r5, r6, r7, pc}
	add r0, r6, #0x7e0
	mov r7, #0xc0
	mla r0, r2, r7, r0
	orr ip, r1, #0x200
	mov r2, r7
	add r1, r6, #0x260
	strh ip, [r3, #0x68]
	strh r4, [r3, #0x60]
	bl _memcpy
	mov r1, r7
	add r0, r6, #0x260
	bl FUN_020026d0
	bl FUN_020026f4
	add r0, r6, #0x2400
	ldrh r0, [r0, #0x6c]
	add r2, r6, #0x44
	add r1, r6, #0x260
	tst r0, #4
	moveq r5, r4
	lsl r0, r5, #0x10
	lsr r5, r0, #0x10
	mov r4, #1
	ldr r0, _0203F918 ; =FUN_0203f9b8
	mov r3, r4
	add r2, r2, #0x2400
	str r5, [sp]
	bl FUN_02013528
	cmp r0, #2
	movne r0, #0
	moveq r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0203F918: .word FUN_0203f9b8

	arm_func_start FUN_0203f91c
FUN_0203f91c: ; 0x0203F91C
	push {r4, lr}
	mov r4, r0
	ldr r0, _0203F948 ; =FUN_0203f94c
	bl FUN_0201312c
	cmp r0, #2
	movne r0, #0
	addeq r0, r4, #0x2400
	moveq r1, #2
	strheq r1, [r0, #0x6a]
	moveq r0, #1
	pop {r4, pc}
	.align 2, 0_0203F948: .word FUN_0203f94c
	arm_func_end FUN_0203f91c

	arm_func_start FUN_0203f94c
FUN_0203f94c: ; 0x0203F94C
	ldr r2, _0203F9B0 ; =0x020B5BB0
	ldr r3, [r2]
	cmp r3, #0
	bxeq lr
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq _0203F988
	add r1, r3, #0x2400
	mov r3, #9
	strh r3, [r1, #0x6a]
	ldr r1, [r2]
	ldrh r2, [r0, #2]
	add r0, r1, #0x2000
	str r2, [r0, #0x440]
	bx lr
	arm_func_end FUN_0203f94c
_0203F988:
	add r0, r3, #0x2400
	mov r1, #1
	strh r1, [r0, #0x6a]
	ldr r1, [r2]
	ldr r0, _0203F9B4 ; =0x0000FFFD
	add r1, r1, #0x2400
	ldrh r2, [r1, #0x6c]
	and r0, r2, r0
	strh r0, [r1, #0x6c]
	bx lr
	.align 2, 0_0203F9B0: .word 0x020B5BB0
_0203F9B4: .word 0x0000FFFD

	arm_func_start FUN_0203f9b8
FUN_0203f9b8: ; 0x0203F9B8
	push {r4, r5, r6, lr}
	ldr r4, _0203FB58 ; =0x020B5BB0
	mov r6, r0
	ldr r0, [r4]
	mov r5, #9
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	ldrh r1, [r6, #2]
	cmp r1, #0xb
	bgt _0203FA0C
	bge _0203FA30
	cmp r1, #6
	popgt {r4, r5, r6, pc}
	cmp r1, #0
	poplt {r4, r5, r6, pc}
	beq _0203FA84
	cmp r1, #1
	beq _0203FA4C
	cmp r1, #6
	beq _0203FA68
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0203f9b8
_0203FA0C:
	cmp r1, #0xc
	popne {r4, r5, r6, pc}
	add r0, r0, #0x2400
	strh r5, [r0, #0x6a]
	ldr r0, [r4]
	ldrh r1, [r6, #2]
	add r0, r0, #0x2000
	str r1, [r0, #0x440]
	pop {r4, r5, r6, pc}
_0203FA30:
	add r0, r0, #0x2400
	strh r5, [r0, #0x6a]
	ldr r0, [r4]
	ldrh r1, [r6, #2]
	add r0, r0, #0x2000
	str r1, [r0, #0x440]
	pop {r4, r5, r6, pc}
_0203FA4C:
	add r0, r0, #0x2400
	strh r5, [r0, #0x6a]
	ldr r0, [r4]
	ldrh r1, [r6, #2]
	add r0, r0, #0x2000
	str r1, [r0, #0x440]
	pop {r4, r5, r6, pc}
_0203FA68:
	add r0, r0, #0x2400
	strh r5, [r0, #0x6a]
	ldr r0, [r4]
	ldrh r1, [r6, #2]
	add r0, r0, #0x2000
	str r1, [r0, #0x440]
	pop {r4, r5, r6, pc}
_0203FA84:
	ldrh r1, [r6, #8]
	cmp r1, #9
	bgt _0203FAC4
	cmp r1, #0

	arm_func_start switchD
switchD: ; 0x0203FA94
	addge pc, pc, r1, lsl #2
	b _0203FB4C
	arm_func_end switchD
_0203FA9C: ; jump table
	b _0203FB4C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0203FAA0
	b _0203FB4C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0203FAA4
	b _0203FB4C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0203FAA8
	b _0203FB4C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0203FAAC
	b _0203FB4C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0203FAB0
	b _0203FB4C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0203FAB4
	pop {r4, r5, r6, pc}
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0203FAB8
	b _0203FAD0
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0203FABC
	pop {r4, r5, r6, pc}
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0203FAC0
	b _0203FB30
	arm_func_end caseD_9
_0203FAC4:
	cmp r1, #0x1a
	popeq {r4, r5, r6, pc}
	b _0203FB4C
_0203FAD0:
	bl FUN_0203e60c
	cmp r0, #0
	ldr r0, [r4]
	addeq r0, r0, #0x2400
	strheq r5, [r0, #0x6a]
	popeq {r4, r5, r6, pc}
	ldrh r1, [r6, #0xa]
	add r0, r0, #0x2400
	mov r2, #1
	strh r1, [r0, #0x5c]
	ldr r1, [r4]
	ldrh r0, [r6, #0xa]
	add r1, r1, #0x2400
	ldrh r3, [r1, #0x60]
	lsl r0, r2, r0
	lsl r0, r0, #0x10
	orr r0, r3, r0, lsr #16
	strh r0, [r1, #0x60]
	ldr r0, [r4]
	mov r1, #2
	add r0, r0, #0x460
	add r0, r0, #0x2000
	bl FUN_020026d0
	pop {r4, r5, r6, pc}
_0203FB30:
	add r0, r0, #0x2400
	strh r5, [r0, #0x6a]
	ldr r0, [r4]
	mov r1, #0x14
	add r0, r0, #0x2000
	str r1, [r0, #0x440]
	pop {r4, r5, r6, pc}
_0203FB4C:
	add r0, r0, #0x2400
	strh r5, [r0, #0x6a]
	pop {r4, r5, r6, pc}
	.align 2, 0_0203FB58: .word 0x020B5BB0

	arm_func_start FUN_0203fb5c
FUN_0203fb5c: ; 0x0203FB5C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02040388
	asr r0, r0, #4
	lsl r3, r0, #1
	add r0, r3, #1
	ldr r2, _0203FBD0 ; =0x02087874
	lsl r1, r0, #1
	lsl r0, r3, #1
	ldrsh r1, [r2, r1]
	ldrsh r0, [r2, r0]
	ldr ip, [r5]
	smull r1, r2, r4, r1
	adds r3, r1, #0x800
	smull r1, r0, r4, r0
	adc r2, r2, #0
	adds r1, r1, #0x800
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	add r3, ip, r3
	adc r0, r0, #0
	lsr r1, r1, #0xc
	ldr r2, [r5, #4]
	orr r1, r1, r0, lsl #20
	add r0, r2, r1
	str r3, [r5, #8]
	str r0, [r5, #0xc]
	pop {r3, r4, r5, pc}
	.align 2, 0_0203FBD0: .word 0x02087874
	arm_func_end FUN_0203fb5c

	arm_func_start FUN_0203fbd4
FUN_0203fbd4: ; 0x0203FBD4
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r4, r1
	bl FUN_02040388
	asr r0, r0, #4
	lsl r3, r0, #1
	add r0, r3, #1
	ldr r1, _0203FC6C ; =0x02087874
	lsl r2, r0, #1
	lsl r0, r3, #1
	ldrsh r2, [r1, r2]
	ldrsh r1, [r1, r0]
	ldr r0, [r6]
	smull r2, r3, r4, r2
	adds r5, r2, #0x800
	smull r1, r2, r4, r1
	adc r7, r3, #0
	adds r3, r1, #0x800
	lsr r5, r5, #0xc
	ldr r1, [r6, #8]
	adc r2, r2, #0
	lsr r4, r3, #0xc
	orr r5, r5, r7, lsl #20
	orr r4, r4, r2, lsl #20
	bl FUN_0203fc70
	mov r7, r0
	ldr r0, [r6, #4]
	ldr r1, [r6, #0xc]
	bl FUN_0203fc70
	sub r3, r7, r5
	sub r2, r0, r4
	add r1, r7, r5
	add r0, r0, r4
	str r3, [r6]
	str r2, [r6, #4]
	str r1, [r6, #8]
	str r0, [r6, #0xc]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0203FC6C: .word 0x02087874
	arm_func_end FUN_0203fbd4

	arm_func_start FUN_0203fc70
FUN_0203fc70: ; 0x0203FC70
	cmp r0, r1
	blt _0203FC88
	subs r0, r0, r1
	rsbmi r0, r0, #0
	add r0, r1, r0, asr #1
	bx lr
	arm_func_end FUN_0203fc70
_0203FC88:
	subs r1, r1, r0
	rsbmi r1, r1, #0
	add r0, r0, r1, asr #1
	bx lr

	arm_func_start FUN_0203fc98
FUN_0203fc98: ; 0x0203FC98
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x20
	mov r5, r1
	mov sb, r2
	mov r4, r3
	mov r6, r0
	mov r0, r5
	mov r1, sb
	mov r2, r4
	bl FUN_02040b68
	cmp r0, #0
	bne _0203FCDC
	mov r0, r6
	bl FUN_020404cc
	add sp, sp, #0x20
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_0203fc98
_0203FCDC:
	ldr r0, [r5]
	ldr r1, [sb]
	bl FUN_0203fc70
	mov r8, r0
	ldr r0, [r5, #4]
	ldr r1, [sb, #4]
	bl FUN_0203fc70
	ldr r2, [r5, #4]
	ldr r1, [sb, #4]
	mov r7, r0
	sub r0, r2, r1
	ldr r2, [r5]
	ldr r1, [sb]
	sub r1, r2, r1
	bl FUN_02009a98
	add r0, r0, #0x4000
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	asr r0, r0, #4
	lsl r1, r0, #1
	add r0, r1, #1
	lsl r2, r0, #1
	ldr sb, _0203FDEC ; =0x02087874
	lsl r1, r1, #1
	ldrsh r3, [sb, r2]
	ldrsh r2, [sb, r1]
	ldr r0, [r5]
	add r3, r8, r3, lsl #4
	add r2, r7, r2, lsl #4
	ldr r1, [r4]
	str r8, [sp, #0x10]
	str r7, [sp, #0x14]
	str r3, [sp, #0x18]
	str r2, [sp, #0x1c]
	bl FUN_0203fc70
	mov r8, r0
	ldr r0, [r5, #4]
	ldr r1, [r4, #4]
	bl FUN_0203fc70
	mov r7, r0
	ldr r0, [r4, #4]
	ldm r5, {r2, r3}
	ldr r1, [r4]
	sub r0, r3, r0
	sub r1, r2, r1
	bl FUN_02009a98
	add r0, r0, #0x4000
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	asr r0, r0, #4
	lsl r3, r0, #1
	add r0, r3, #1
	lsl r0, r0, #1
	ldrsh r1, [sb, r0]
	lsl r0, r3, #1
	ldrsh r0, [sb, r0]
	add r1, r8, r1, lsl #4
	str r1, [sp, #8]
	add r0, r7, r0, lsl #4
	str r0, [sp, #0xc]
	mov r2, r6
	add r0, sp, #0x10
	add r1, sp, #0
	str r8, [sp]
	str r7, [sp, #4]
	bl FUN_01FF852C
	add sp, sp, #0x20
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0203FDEC: .word 0x02087874

	arm_func_start FUN_0203fdf0
FUN_0203fdf0: ; 0x0203FDF0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r0, [sl]
	ldr r3, [sl, #8]
	mov sb, r1
	cmp r0, r3
	ldreq r4, [sl, #4]
	ldreq r1, [sl, #0xc]
	mov r8, r2
	mov r5, #0
	cmpeq r4, r1
	bne _0203FE7C
	ldr r3, [sb]
	ldr r1, [sb, #8]
	cmp r3, r1
	ldreq r2, [sb, #4]
	ldreq r1, [sb, #0xc]
	cmpeq r2, r1
	bne _0203FE68
	cmp r0, r3
	cmpeq r4, r2
	bne _0203FE60
	cmp r8, #0
	strne r0, [r8]
	ldrne r0, [sl, #4]
	strne r0, [r8, #4]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0203fdf0
_0203FE60:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203FE68:
	mov r0, sl
	mov sl, sb
	mov sb, r0
	mov r5, #1
	b _0203FE98
_0203FE7C:
	ldr r1, [sb]
	ldr r0, [sb, #8]
	cmp r1, r0
	ldreq r1, [sb, #4]
	ldreq r0, [sb, #0xc]
	cmpeq r1, r0
	moveq r5, #1
_0203FE98:
	mov r0, sl
	bl FUN_02040388
	mov r6, r0
	mov r0, sb
	bl FUN_02040388
	mov r7, r0
	cmp r8, #0
	beq _0203FEC8
	mov r0, r8
	mov r1, #0
	mov r2, #8
	bl MemWrite
_0203FEC8:
	ldr r0, _02040110 ; =0x00007FFF
	and r1, r6, r0
	and r0, r7, r0
	cmp r1, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r2, r6
	mov r3, sb
	ldm sl, {r0, r1}
	bl FUN_020404dc
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, r6, #0x8000
	lsl r2, r0, #0x10
	ldr r0, [sl, #8]
	ldr r1, [sl, #0xc]
	mov r3, sb
	lsr r2, r2, #0x10
	bl FUN_020404dc
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0
	cmp r8, #0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r5, #0
	beq _0203FF54
	ldr r1, [sb]
	mov r0, #1
	str r1, [r8]
	ldr r1, [sb, #4]
	str r1, [r8, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0203FF54:
	asr r0, r6, #4
	lsl r5, r0, #1
	add r2, r5, #1
	asr r0, r7, #4
	lsl r3, r0, #1
	add r1, r3, #1
	ldr r0, _02040114 ; =0x02087874
	lsl r2, r2, #1
	ldrsh r6, [r0, r2]
	lsl r5, r5, #1
	lsl r2, r3, #1
	lsl r1, r1, #1
	cmp r6, #0
	ldrsh r5, [r0, r5]
	ldrsh fp, [r0, r2]
	ldrsh r7, [r0, r1]
	beq _02040050
	smull r0, r3, r6, fp
	adds r1, r0, #0x800
	ldm sb, {r2, fp}
	ldr r0, [sl]
	ldr sb, [sl, #4]
	adc r3, r3, r4
	lsr r1, r1, #0xc
	sub sb, fp, sb
	orr r1, r1, r3, lsl #20
	sub r0, r2, r0
	smull r0, r2, r1, r0
	adds r0, r0, #0x800
	smull r3, sb, r7, sb
	adc r2, r2, r4
	adds fp, r3, #0x800
	lsr r3, r0, #0xc
	adc r0, sb, r4
	lsr sb, fp, #0xc
	orr sb, sb, r0, lsl #20
	smull r0, ip, r6, sb
	adds r0, r0, #0x800
	orr r3, r3, r2, lsl #20
	smull fp, sb, r7, r5
	adc r2, ip, r4
	lsr r0, r0, #0xc
	orr r0, r0, r2, lsl #20
	sub r0, r3, r0
	adds r3, fp, #0x800
	adc r2, sb, r4
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	sub r1, r1, r3
	bl FUN_0200958c
	mov r7, r0
	smull r1, r0, r7, r5
	adds r1, r1, #0x800
	adc r2, r0, r4
	lsr r0, r1, #0xc
	mov r1, r6
	orr r0, r0, r2, lsl #20
	bl FUN_0200958c
	ldr r1, [sl]
	add r1, r7, r1
	str r1, [r8]
	ldr r1, [sl, #4]
	b _02040100
_02040050:
	smull r0, r3, r7, r5
	adds r1, r0, #0x800
	adc r3, r3, r4
	lsr r1, r1, #0xc
	ldm sl, {r2, sl}
	ldm sb, {r0, r5}
	sub r5, sl, r5
	orr r1, r1, r3, lsl #20
	sub r0, r2, r0
	smull r0, r2, r1, r0
	adds r0, r0, #0x800
	smull r3, r5, r6, r5
	adc r2, r2, r4
	adds sl, r3, #0x800
	lsr r3, r0, #0xc
	adc r0, r5, r4
	lsr r5, sl, #0xc
	orr r5, r5, r0, lsl #20
	smull r0, ip, r7, r5
	adds r0, r0, #0x800
	orr r3, r3, r2, lsl #20
	smull sl, r5, r6, fp
	adc r2, ip, r4
	lsr r0, r0, #0xc
	orr r0, r0, r2, lsl #20
	sub r0, r3, r0
	adds r3, sl, #0x800
	adc r2, r5, r4
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	sub r1, r1, r3
	bl FUN_0200958c
	mov r5, r0
	smull r1, r0, r5, fp
	adds r1, r1, #0x800
	adc r2, r0, r4
	lsr r0, r1, #0xc
	mov r1, r7
	orr r0, r0, r2, lsl #20
	bl FUN_0200958c
	ldr r1, [sb]
	add r1, r5, r1
	str r1, [r8]
	ldr r1, [sb, #4]
_02040100:
	add r0, r0, r1
	str r0, [r8, #4]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02040110: .word 0x00007FFF
_02040114: .word 0x02087874

	arm_func_start FUN_02040118
FUN_02040118: ; 0x02040118
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02040118

	arm_func_start FUN_02040128
FUN_02040128: ; 0x02040128
	push {r3, lr}
	bl FUN_020F07D0
	bl FUN_02040118
	pop {r3, pc}
	arm_func_end FUN_02040128

	arm_func_start FUN_02040138
FUN_02040138: ; 0x02040138
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02040138

	arm_func_start FUN_02040148
FUN_02040148: ; 0x02040148
	push {r3, lr}
	bl FUN_020F0810
	bl FUN_02040138
	pop {r3, pc}
	arm_func_end FUN_02040148

	arm_func_start FUN_02040158
FUN_02040158: ; 0x02040158
	cmp r0, #0
	ldreq r0, _02040168 ; =0x0209A83C
	ldrne r0, _0204016C ; =0x0209A82C
	bx lr
	.align 2, 0_02040168: .word 0x0209A83C
_0204016C: .word 0x0209A82C
	arm_func_end FUN_02040158

	arm_func_start FUN_02040170
FUN_02040170: ; 0x02040170
	push {r3, lr}
	bl FUN_02040118
	ldr r1, _02040184 ; =0x0209A80C
	add r0, r1, r0, lsl #4
	pop {r3, pc}
	.align 2, 0_02040184: .word 0x0209A80C
	arm_func_end FUN_02040170

	arm_func_start FUN_02040188
FUN_02040188: ; 0x02040188
	cmp r0, #0
	ldreq r0, _02040198 ; =0x0209A85C
	ldrne r0, _0204019C ; =0x0209A84C
	bx lr
	.align 2, 0_02040198: .word 0x0209A85C
_0204019C: .word 0x0209A84C
	arm_func_end FUN_02040188

	arm_func_start FUN_020401a0
FUN_020401a0: ; 0x020401A0
	cmp r0, #0
	ldreq r0, _020401B0 ; =0x0209A884
	ldrne r0, _020401B4 ; =0x0209A87C
	bx lr
	.align 2, 0_020401B0: .word 0x0209A884
_020401B4: .word 0x0209A87C
	arm_func_end FUN_020401a0

	arm_func_start FUN_020401b8
FUN_020401b8: ; 0x020401B8
	push {r4, r5, r6, lr}
	mov r6, r3
	rsb r3, r0, #0
	cmp r0, #0
	movge r3, r0
	cmp r3, #0x200000
	bge _02040208
	rsb r3, r1, #0
	cmp r1, #0
	movge r3, r1
	cmp r3, #0x200000
	bge _02040208
	rsb r3, r2, #0
	cmp r2, #0
	movge r3, r2
	cmp r3, #0x200000
	bge _02040208
	mov r3, r6
	bl FUN_020402dc
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020401b8
_02040208:
	cmp r0, #0
	asrge r4, r0, #8
	asrlt r0, r0, #8
	orrlt r4, r0, #0xff000000
	cmp r1, #0
	asrge r5, r1, #8
	asrlt r0, r1, #8
	orrlt r5, r0, #0xff000000
	cmp r2, #0
	asrge ip, r2, #8
	asrlt r0, r2, #8
	orrlt ip, r0, #0xff000000
	cmp r4, #0
	bne _0204025C
	cmp r5, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r1, r5
	rsb r0, ip, #0
	bl FUN_0200958c
	pop {r4, r5, r6, pc}
_0204025C:
	cmp ip, #0
	bne _02040280
	cmp r4, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r1, r4
	rsb r0, r5, #0
	bl FUN_0200958c
	pop {r4, r5, r6, pc}
_02040280:
	smull r0, r2, r5, r5
	adds r3, r0, #0x800
	smull r1, r0, r4, ip
	adc r2, r2, #0
	adds r1, r1, #0x800
	lsr r3, r3, #0xc
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	sub r0, r3, r1, lsl #2
	bl FUN_020095ac
	cmp r6, #0
	beq _020402CC
	add r0, r0, r5
	rsb r0, r0, #0
	lsl r1, r4, #1
	bl FUN_0200958c
	pop {r4, r5, r6, pc}
_020402CC:
	sub r0, r0, r5
	lsl r1, r4, #1
	bl FUN_0200958c
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020402dc
FUN_020402dc: ; 0x020402DC
	push {r4, r5, r6, lr}
	movs r6, r0
	mov r5, r1
	mov r4, r3
	bne _02040308
	cmp r5, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	rsb r0, r2, #0
	bl FUN_0200958c
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020402dc
_02040308:
	cmp r2, #0
	bne _0204032C
	cmp r6, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r1, r6
	rsb r0, r5, #0
	bl FUN_0200958c
	pop {r4, r5, r6, pc}
_0204032C:
	smull r0, r3, r5, r5
	adds ip, r0, #0x800
	smull r1, r0, r6, r2
	adc r2, r3, #0
	adds r1, r1, #0x800
	lsr r3, ip, #0xc
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	sub r0, r3, r1, lsl #2
	bl FUN_020095ac
	cmp r4, #0
	beq _02040378
	add r0, r0, r5
	rsb r0, r0, #0
	lsl r1, r6, #1
	bl FUN_0200958c
	pop {r4, r5, r6, pc}
_02040378:
	sub r0, r0, r5
	lsl r1, r6, #1
	bl FUN_0200958c
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02040388
FUN_02040388: ; 0x02040388
	push {r3, lr}
	ldr ip, [r0, #0xc]
	ldr r2, [r0, #8]
	ldm r0, {r1, r3}
	sub r0, ip, r3
	sub r1, r2, r1
	bl FUN_02009a98
	pop {r3, pc}
	arm_func_end FUN_02040388

	arm_func_start FUN_020403a8
FUN_020403a8: ; 0x020403A8
	push {r3, lr}
	ldm r1, {r2, ip}
	ldr r1, [r0]
	ldr r3, [r0, #4]
	sub r1, r2, r1
	sub r0, ip, r3
	bl FUN_02009a98
	add r0, r0, #0x10000
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r3, pc}
	arm_func_end FUN_020403a8

	arm_func_start FUN_020403d4
FUN_020403d4: ; 0x020403D4
	sub r0, r1, r0
	mov r1, #0x8000
	cmp r0, #0x8000
	subgt r0, r0, #0x10000
	rsb r1, r1, #0
	cmp r0, r1
	addle r0, r0, #0x10000
	bx lr
	arm_func_end FUN_020403d4

	arm_func_start FUN_020403f4
FUN_020403f4: ; 0x020403F4
	cmp r0, r1
	movhi r3, r1
	movhi r1, r0
	movhi r0, r3
	sub r1, r1, r0
	add r0, r0, r1, asr #1
	cmp r1, #0x8000
	addgt r0, r0, #0x8000
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r2, #0
	addeq r0, r0, #0x8000
	lsleq r0, r0, #0x10
	lsreq r0, r0, #0x10
	bx lr
	arm_func_end FUN_020403f4

	arm_func_start FUN_02040430
FUN_02040430: ; 0x02040430
	push {r4, lr}
	ldr r2, _02040478 ; =0x00007FFF
	mov ip, r0
	mov r4, r1
	and r3, ip, r2
	and r1, r4, r2
	cmp r3, r1
	popeq {r4, pc}
	mov r0, r4
	mov r1, ip
	bl FUN_020403d4
	subs r0, r4, r0
	bpl _0204046C
	arm_func_end FUN_02040430
_02040464:
	adds r0, r0, #0x10000
	bmi _02040464
_0204046C:
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
	.align 2, 0_02040478: .word 0x00007FFF

	arm_func_start FUN_0204047c
FUN_0204047c: ; 0x0204047C
	add r0, r0, #0x10000
	sub r0, r0, r1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	tst r0, #0x8000
	beq _020404A8
	cmp r2, #0
	rsbne r0, r0, #0x10000
	lslne r0, r0, #0x10
	lsrne r0, r0, #0x10
	bx lr
	arm_func_end FUN_0204047c
_020404A8:
	cmp r2, #0
	rsbeq r0, r0, #0x10000
	lsleq r0, r0, #0x10
	lsreq r0, r0, #0x10
	bx lr

	arm_func_start FUN_020404bc
FUN_020404bc: ; 0x020404BC
	ldr r1, _020404C8 ; =0x020A06D8
	ldrb r0, [r1, r0]
	bx lr
	.align 2, 0_020404C8: .word 0x020A06D8
	arm_func_end FUN_020404bc

	arm_func_start FUN_020404cc
FUN_020404cc: ; 0x020404CC
	mov r1, #0x80000000
	str r1, [r0]
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_020404cc

	arm_func_start FUN_020404dc
FUN_020404dc: ; 0x020404DC
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r7, r3
	mov r5, r0
	mov r4, r1
	ldm r7, {r3, r6}
	sub r0, r6, r4
	sub r1, r3, r5
	mov r8, r2
	bl FUN_02009a98
	ldr r1, [r7, #8]
	ldr r2, [r7, #0xc]
	mov r6, r0
	sub r0, r2, r4
	sub r1, r1, r5
	bl FUN_02009a98
	mov r2, r0
	mov r3, #1
	mov r1, r6
	mov r0, r8
	str r3, [sp]
	bl FUN_020408d8
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020404dc

	arm_func_start FUN_0204053c
FUN_0204053c: ; 0x0204053C
	push {r3, lr}
	ldr r1, _02040574 ; =0x0209A2C0
	mov r2, r0
	ldr r0, [r1, #0x48]
	cmp r0, #0
	blt _0204056C
	ldrsh r1, [r2, #0x94]
	bl FUN_020F06D8
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_0204053c
_0204056C:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_02040574: .word 0x0209A2C0

	arm_func_start FUN_02040578
FUN_02040578: ; 0x02040578
	cmp r1, r2
	movgt r3, r1
	movgt r1, r2
	movgt r2, r3
	cmp r0, r1
	blt _0204059C
	cmp r0, r2
	movle r0, #1
	bxle lr
	arm_func_end FUN_02040578
_0204059C:
	mov r0, #0
	bx lr

	arm_func_start FUN_020405a4
FUN_020405a4: ; 0x020405A4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_020403d4
	cmp r0, #0
	mov r0, r6
	mov r1, r5
	bge _020405D4
	bl FUN_020403d4
	rsb r0, r0, #0
	b _020405D8
	arm_func_end FUN_020405a4
_020405D4:
	bl FUN_020403d4
_020405D8:
	lsl r0, r0, #0x10
	cmp r4, r0, lsr #16
	movhs r0, #1
	movlo r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020405ec
FUN_020405ec: ; 0x020405EC
	ldr r2, _02040614 ; =0x0209A7FC
	mov r3, #0
	ldr r1, [r2]
	cmp r0, r1
	blt _0204060C
	ldr r1, [r2, #8]
	cmp r0, r1
	movle r3, #1
	arm_func_end FUN_020405ec
_0204060C:
	mov r0, r3
	bx lr
	.align 2, 0_02040614: .word 0x0209A7FC

	arm_func_start FUN_02040618
FUN_02040618: ; 0x02040618
	ldr r2, _02040640 ; =0x0209A7FC
	mov r3, #0
	ldr r1, [r2, #4]
	cmp r0, r1
	blt _02040638
	ldr r1, [r2, #0xc]
	cmp r0, r1
	movle r3, #1
	arm_func_end FUN_02040618
_02040638:
	mov r0, r3
	bx lr
	.align 2, 0_02040640: .word 0x0209A7FC

	arm_func_start FUN_02040644
FUN_02040644: ; 0x02040644
	push {r4, lr}
	ldr r3, _020406A0 ; =0x0209A7FC
	mov ip, #0
	ldr r2, [r3]
	mov lr, ip
	mov r4, ip
	cmp r0, r2
	blt _02040670
	ldr r2, [r3, #8]
	cmp r0, r2
	movle r4, #1
	arm_func_end FUN_02040644
_02040670:
	cmp r4, #0
	beq _02040684
	ldr r0, [r3, #4]
	cmp r1, r0
	movge lr, #1
_02040684:
	cmp lr, #0
	beq _02040698
	ldr r0, [r3, #0xc]
	cmp r1, r0
	movle ip, #1
_02040698:
	mov r0, ip
	pop {r4, pc}
	.align 2, 0_020406A0: .word 0x0209A7FC

	arm_func_start FUN_020406a4
FUN_020406a4: ; 0x020406A4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r0, [r7]
	mov r4, r1
	ldr r5, _02040718 ; =0x0209A7FC
	mov r6, #0
	bl FUN_020405ec
	cmp r0, #0
	bne _020406E0
	ldr r1, [r7]
	ldr r0, [r5]
	mov r6, #1
	cmp r1, r0
	ldrge r0, [r5, #8]
	str r0, [r7]
	arm_func_end FUN_020406a4
_020406E0:
	ldr r0, [r4]
	bl FUN_02040618
	cmp r0, #0
	bne _02040708
	ldr r1, [r4]
	ldr r0, [r5, #4]
	mov r6, #1
	cmp r1, r0
	ldrge r0, [r5, #0xc]
	str r0, [r4]
_02040708:
	mov r0, #1
	cmp r6, #0
	movne r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02040718: .word 0x0209A7FC

	arm_func_start FUN_0204071c
FUN_0204071c: ; 0x0204071C
	ldr r3, [r0]
	cmp r1, r3
	blt _02040750
	ldr r3, [r0, #8]
	cmp r1, r3
	bgt _02040750
	ldr r1, [r0, #4]
	cmp r2, r1
	blt _02040750
	ldr r0, [r0, #0xc]
	cmp r2, r0
	movle r0, #1
	ble _02040754
	arm_func_end FUN_0204071c
_02040750:
	mov r0, #0
_02040754:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	bx lr

	arm_func_start FUN_02040764
FUN_02040764: ; 0x02040764
	push {r4, lr}
	ldr r3, [r1]
	mov ip, #0
	ldr r2, [r0]
	mov lr, ip
	mov r4, ip
	cmp r3, r2
	blt _02040790
	ldr r2, [r0, #8]
	cmp r3, r2
	movle r4, #1
	arm_func_end FUN_02040764
_02040790:
	cmp r4, #0
	beq _020407A8
	ldr r3, [r1, #4]
	ldr r2, [r0, #4]
	cmp r3, r2
	movge lr, #1
_020407A8:
	cmp lr, #0
	beq _020407C0
	ldr r1, [r1, #4]
	ldr r0, [r0, #0xc]
	cmp r1, r0
	movle ip, #1
_020407C0:
	mov r0, #1
	cmp ip, #0
	moveq r0, #0
	pop {r4, pc}

	arm_func_start FUN_020407d0
FUN_020407d0: ; 0x020407D0
	push {r4, r5, r6, lr}
	ldr lr, _0204083C ; =0x0209A7FC
	mov r4, #0
	ldr ip, [lr]
	mov r5, r4
	sub ip, ip, r2
	mov r6, r4
	cmp r0, ip
	blt _02040804
	ldr ip, [lr, #8]
	add r2, ip, r2
	cmp r0, r2
	movle r6, #1
	arm_func_end FUN_020407d0
_02040804:
	cmp r6, #0
	beq _0204081C
	ldr r0, [lr, #4]
	sub r0, r0, r3
	cmp r1, r0
	movge r5, #1
_0204081C:
	cmp r5, #0
	beq _02040834
	ldr r0, [lr, #0xc]
	add r0, r0, r3
	cmp r1, r0
	movle r4, #1
_02040834:
	mov r0, r4
	pop {r4, r5, r6, pc}
	.align 2, 0_0204083C: .word 0x0209A7FC

	arm_func_start FUN_02040840
FUN_02040840: ; 0x02040840
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _020408D0 ; =0x02099EF0
	mov r7, r0
	ldr r0, [r3]
	mov r6, r1
	ldr r0, [r0, #0x288]
	cmp r2, r0
	movge r0, #0
	popge {r3, r4, r5, r6, r7, pc}
	ldr r4, _020408D4 ; =0x0209BA20
	mov r5, #0
	arm_func_end FUN_02040840
_0204086C:
	mov r0, r4
	mov r1, r5
	bl FUN_02073194
	cmp r0, #0
	beq _020408BC
	mov r0, r5
	bl FUN_02040170
	ldr r1, [r0]
	cmp r7, r1
	ble _020408BC
	ldr r1, [r0, #8]
	cmp r7, r1
	bge _020408BC
	ldr r1, [r0, #4]
	cmp r6, r1
	ble _020408BC
	ldr r0, [r0, #0xc]
	cmp r6, r0
	movlt r0, #1
	poplt {r3, r4, r5, r6, r7, pc}
_020408BC:
	add r5, r5, #1
	cmp r5, #2
	blt _0204086C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020408D0: .word 0x02099EF0
_020408D4: .word 0x0209BA20

	arm_func_start FUN_020408d8
FUN_020408d8: ; 0x020408D8
	push {r3, lr}
	cmp r1, r2
	bne _02040924
	cmp r3, #0
	beq _0204090C
	ldrb r2, [sp, #8]
	cmp r2, #0
	beq _02040904
	cmp r0, r1
	moveq r0, #1
	popeq {r3, pc}
	arm_func_end FUN_020408d8
_02040904:
	mov r0, #0
	pop {r3, pc}
_0204090C:
	ldrb r2, [sp, #8]
	cmp r2, #0
	cmpeq r0, r1
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
_02040924:
	ldr ip, _020409D0 ; =0x00007FFF
	and lr, r1, ip
	and ip, r2, ip
	cmp lr, ip
	moveq r0, #1
	popeq {r3, pc}
	cmp r1, r2
	movhi ip, r2
	movhi r2, r1
	movhi r1, ip
	sub ip, r2, r1
	cmp ip, #0x8000
	bgt _02040970
	cmp r0, r1
	bls _0204096C
	cmp r0, r2
	movlo lr, #1
	blo _0204098C
_0204096C:
	b _02040988
_02040970:
	cmp r0, r1
	blo _02040980
	cmp r0, r2
	bls _02040988
_02040980:
	mov lr, #1
	b _0204098C
_02040988:
	mov lr, #0
_0204098C:
	ldrb ip, [sp, #8]
	cmp ip, #0
	beq _020409B4
	cmp r0, r1
	cmpne r0, r2
	moveq r0, #1
	movne r0, #0
	orrs r0, lr, r0
	movne lr, #1
	moveq lr, #0
_020409B4:
	cmp r3, #0
	bne _020409C8
	cmp lr, #0
	moveq lr, #1
	movne lr, #0
_020409C8:
	mov r0, lr
	pop {r3, pc}
	.align 2, 0_020409D0: .word 0x00007FFF

	arm_func_start FUN_020409d4
FUN_020409d4: ; 0x020409D4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	mov r5, r1
	mov r7, r2
	mov r0, r5
	mov r1, r8
	mov r6, r3
	bl FUN_020403a8
	mov r4, r0
	mov r0, r5
	mov r1, r7
	bl FUN_020403a8
	mov sb, r0
	mov r0, r5
	mov r1, r6
	bl FUN_020403a8
	mov r2, r0
	mov r0, r4
	mov r4, #1
	mov r5, #0
	mov r1, sb
	mov r3, r4
	str r5, [sp]
	bl FUN_020408d8
	cmp r0, #0
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r7
	mov r1, r8
	bl FUN_020403a8
	mov r8, r0
	mov r0, r7
	mov r1, r6
	bl FUN_020403a8
	add r1, sb, #0x8000
	lsl r1, r1, #0x10
	mov r2, r0
	mov r0, r8
	mov r3, r4
	lsr r1, r1, #0x10
	str r5, [sp]
	bl FUN_020408d8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020409d4

	arm_func_start FUN_02040a80
FUN_02040a80: ; 0x02040A80
	ldr r1, [r0]
	cmp r1, #0x80000000
	ldrne r0, [r0, #4]
	cmpne r0, #0x80000000
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02040a80

	arm_func_start FUN_02040aa8
FUN_02040aa8: ; 0x02040AA8
	ldr r1, _02040AC4 ; =0x0209A2C0
	ldrsh r0, [r0, #0x94]
	ldr r1, [r1, #0x48]
	cmp r1, r0
	moveq r0, #1
	movne r0, #0
	bx lr
	.align 2, 0_02040AC4: .word 0x0209A2C0
	arm_func_end FUN_02040aa8

	arm_func_start FUN_02040ac8
FUN_02040ac8: ; 0x02040AC8
	cmp r0, #1
	blt _02040ADC
	cmp r0, #0xb
	movle r0, #1
	bxle lr
	arm_func_end FUN_02040ac8
_02040ADC:
	mov r0, #0
	bx lr

	arm_func_start FUN_02040ae4
FUN_02040ae4: ; 0x02040AE4
	push {r3, r4, r5, lr}
	mov r4, r2
	mov r5, r1
	ldr r1, [r4]
	ldr r2, [r4, #8]
	bl FUN_02040578
	cmp r0, #0
	beq _02040B20
	ldr r1, [r4, #4]
	ldr r2, [r4, #0xc]
	mov r0, r5
	bl FUN_02040578
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, pc}
	arm_func_end FUN_02040ae4
_02040B20:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02040b28
FUN_02040b28: ; 0x02040B28
	ldr r3, [r0]
	ldr r2, [r1]
	cmp r3, r2
	ldreq r2, [r0, #4]
	ldreq r0, [r1, #4]
	cmpeq r2, r0
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02040b28

	arm_func_start FUN_02040b4c
FUN_02040b4c: ; 0x02040B4C
	ldr r0, [r0, #0x88]
	ldrb r1, [r0, #0x84]
	ldrb r0, [r0, #0x85]
	cmp r1, r0
	movlo r0, #1
	movhs r0, #0
	bx lr
	arm_func_end FUN_02040b4c

	arm_func_start FUN_02040b68
FUN_02040b68: ; 0x02040B68
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r4, r1
	mov r5, r2
	bl FUN_02040b28
	cmp r0, #0
	bne _02040B98
	mov r0, r6
	mov r1, r4
	bl FUN_02040b28
	cmp r0, #0
	beq _02040BA0
	arm_func_end FUN_02040b68
_02040B98:
	mov r0, #0
	pop {r4, r5, r6, pc}
_02040BA0:
	mov r0, r6
	mov r1, r4
	bl FUN_020403a8
	mov r4, r0
	mov r0, r6
	mov r1, r5
	bl FUN_020403a8
	subs r1, r4, r0
	ldr r0, _02040BD8 ; =0x00007FFF
	rsbmi r1, r1, #0
	tst r1, r0
	movne r0, #1
	moveq r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_02040BD8: .word 0x00007FFF

	arm_func_start FUN_02040bdc
FUN_02040bdc: ; 0x02040BDC
	push {r3, lr}
	ldr ip, [r2]
	ldr lr, [r0]
	add ip, ip, r3
	cmp lr, ip
	strlt ip, [r0]
	blt _02040C08
	ldr ip, [r2, #8]
	sub ip, ip, r3
	cmp lr, ip
	strgt ip, [r0]
	arm_func_end FUN_02040bdc
_02040C08:
	ldr r0, [r2, #4]
	ldr ip, [r1]
	add r0, r0, r3
	cmp ip, r0
	strlt r0, [r1]
	poplt {r3, pc}
	ldr r0, [r2, #0xc]
	sub r0, r0, r3
	cmp ip, r0
	strgt r0, [r1]
	pop {r3, pc}

	arm_func_start FUN_02040c34
FUN_02040c34: ; 0x02040C34
	ldr ip, _02040C48 ; =FUN_02040bdc
	mov r3, r2
	mov r2, r1
	add r1, r0, #4
	bx ip
	.align 2, 0_02040C48: .word FUN_02040bdc
	arm_func_end FUN_02040c34

	arm_func_start FUN_02040c4c
FUN_02040c4c: ; 0x02040C4C
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	ldm r6, {r0, r1}
	bl FUN_02040ae4
	cmp r0, #0
	movne r0, #1
	popne {r4, r5, r6, pc}
	mov r2, r4
	ldm r5, {r0, r1}
	bl FUN_02040ae4
	cmp r0, #0
	bne _02040CA0
	mov r5, #1
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_02040c34
	mov r0, r5
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02040c4c
_02040CA0:
	ldr r0, [r4]
	ldr r2, [r6]
	cmp r2, r0
	bgt _02040CE0
	ldr r1, [r5]
	sub r0, r1, r0
	sub r1, r1, r2
	bl FUN_0200958c
	ldr r3, [r5, #4]
	ldr r1, [r6, #4]
	ldr ip, [r4]
	sub r1, r1, r3
	smull r2, r0, r1, r0
	adds r1, r2, #0x800
	add r2, ip, #1
	b _02040D18
_02040CE0:
	ldr r0, [r4, #8]
	cmp r2, r0
	blt _02040D30
	ldr r1, [r5]
	sub r0, r0, r1
	sub r1, r2, r1
	bl FUN_0200958c
	ldr r3, [r5, #4]
	ldr r1, [r6, #4]
	ldr ip, [r4, #8]
	sub r1, r1, r3
	smull r2, r0, r1, r0
	adds r1, r2, #0x800
	sub r2, ip, #1
_02040D18:
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	add r0, r3, r1
	str r2, [r6]
	str r0, [r6, #4]
_02040D30:
	ldr r0, [r4, #4]
	ldr r2, [r6, #4]
	cmp r2, r0
	bgt _02040D70
	ldr r1, [r5, #4]
	sub r0, r1, r0
	sub r1, r1, r2
	bl FUN_0200958c
	ldr r5, [r5]
	ldr r2, [r6]
	ldr r1, [r4, #4]
	sub r2, r2, r5
	smull r0, r3, r2, r0
	adds r2, r0, #0x800
	add r0, r1, #1
	b _02040DA8
_02040D70:
	ldr r0, [r4, #0xc]
	cmp r2, r0
	blt _02040DC0
	ldr r1, [r5, #4]
	sub r0, r0, r1
	sub r1, r2, r1
	bl FUN_0200958c
	ldr r5, [r5]
	ldr r2, [r6]
	ldr r1, [r4, #0xc]
	sub r2, r2, r5
	smull r0, r3, r2, r0
	adds r2, r0, #0x800
	sub r0, r1, #1
_02040DA8:
	adc r1, r3, #0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	add r1, r5, r2
	str r1, [r6]
	str r0, [r6, #4]
_02040DC0:
	mov r0, #1
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02040dc8
FUN_02040dc8: ; 0x02040DC8
	push {r4, r5, r6, r7, r8, lr}
	movs r8, r0
	mov r7, r1
	cmpne r7, #0
	mov r6, r2
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	cmp r6, #0
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, pc}
	subs r0, r8, r7
	rsbmi r0, r0, #0
	cmp r0, r6
	bhs _02040E18
	mov r0, r8
	mov r1, r7
	mov r2, r6
	bl _memcpy
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02040dc8
_02040E18:
	ldr r5, _02040E68 ; =0x0209A250
	mov r1, r6
	mov r0, r5
	bl FUN_0202de44
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r8
	mov r1, r4
	mov r2, r6
	bl _memcpy
	mov r0, r4
	mov r1, r7
	mov r2, r6
	bl _memcpy
	mov r0, r5
	mov r1, r4
	bl FUN_0202e1c0
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02040E68: .word 0x0209A250

	arm_func_start FUN_02040e6c
FUN_02040e6c: ; 0x02040E6C
	push {r4, lr}
	mov r4, r0
	ldr r0, _02040E90 ; =0x0209A250
	mov r1, #0x8000
	bl FUN_0202de44
	mov r1, #0
	str r0, [r4, #0x1c]
	str r1, [r4, #0x20]
	pop {r4, pc}
	.align 2, 0_02040E90: .word 0x0209A250
	arm_func_end FUN_02040e6c

	arm_func_start FUN_02040e94
FUN_02040e94: ; 0x02040E94
	mov r1, #0
	str r1, [r0, #0x20]
	bx lr
	arm_func_end FUN_02040e94

	arm_func_start FUN_02040ea0
FUN_02040ea0: ; 0x02040EA0
	push {r3, r4, r5, r6, r7, lr}
	ldr r6, _02040F08 ; =0x020B5BB8
	mov r4, #0
	mov r7, r0
	mov r0, r4
	mov r1, r6
	mov r2, #0x24
	bl FUN_0200787c
	ldr r0, _02040F0C ; =0x020B5BB8
	cmp r7, #0
	str r7, [r0, #4]
	pople {r3, r4, r5, r6, r7, pc}
	mov r0, #0x1c
	mul r5, r7, r0
	ldr r0, _02040F10 ; =0x0209A250
	mov r1, r5
	bl FUN_0202de44
	movs r1, r0
	str r1, [r6]
	beq _02040EFC
	mov r0, r4
	mov r2, r5
	bl FUN_0200787c
	arm_func_end FUN_02040ea0
_02040EFC:
	mov r0, r6
	bl FUN_02040e6c
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02040F08: .word 0x020B5BB8
_02040F0C: .word 0x020B5BB8
_02040F10: .word 0x0209A250

	arm_func_start FUN_02040f14
FUN_02040f14: ; 0x02040F14
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r4, _0204106C ; =0x020B5BB8
	mov r8, #0
	ldr r4, [r4]
	ldr ip, _02041070 ; =0x020B5BB8
	cmp r4, #0
	moveq r0, r8
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r1, #0
	cmpne r2, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrh r5, [ip, #8]
	ldrh r4, [ip, #0xa]
	ldr lr, [ip, #4]
	add r6, r2, #3
	add r2, r5, r4
	cmp r2, lr
	bic r2, r6, #3
	movge r0, r8
	popge {r4, r5, r6, r7, r8, sb, sl, pc}
	add r3, r3, #3
	bics r3, r3, #3
	beq _02040F94
	cmp r3, r2
	bhs _02040F94
	ldr r4, [ip, #0x1c]
	cmp r1, r4
	blo _02040F98
	sub r4, r1, r4
	cmp r4, #0x8000
	bhs _02040F98
	arm_func_end FUN_02040f14
_02040F94:
	mov r3, r2
_02040F98:
	ldr r5, [ip, #0xc]
	cmp r5, #0
	beq _02040FD4
_02040FA4:
	ldr r4, [r5, #4]
	cmp r4, r1
	ldreq r4, [r5]
	cmpeq r4, r0
	ldreq r4, [r5, #8]
	cmpeq r4, r2
	streq r8, [r5, #0x14]
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r5, [r5, #0xc]
	cmp r5, #0
	bne _02040FA4
_02040FD4:
	mov r4, #0
	mov sb, r4
	cmp lr, #0
	ble _0204100C
	ldr sl, [ip]
	mov r5, #0x1c
_02040FEC:
	mla r7, sb, r5, sl
	ldr r6, [r7, #4]
	cmp r6, #0
	moveq r4, r7
	beq _0204100C
	add sb, sb, #1
	cmp sb, lr
	blt _02040FEC
_0204100C:
	cmp r4, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	stm r4, {r0, r1, r2}
	str r8, [r4, #0xc]
	str r3, [r4, #0x10]
	ldr r1, [sp, #0x20]
	str r8, [r4, #0x14]
	cmp r1, #0
	str r1, [r4, #0x18]
	movne r0, #1
	strbne r0, [r1]
	ldr r0, [ip, #0xc]
	cmp r0, #0
	ldr r0, [ip, #0x10]
	streq r4, [ip, #0xc]
	cmp r0, #0
	strne r4, [r0, #0xc]
	ldrh r1, [ip, #8]
	str r4, [ip, #0x10]
	mov r0, #1
	add r1, r1, #1
	strh r1, [ip, #8]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0204106C: .word 0x020B5BB8
_02041070: .word 0x020B5BB8

	arm_func_start FUN_02041074
FUN_02041074: ; 0x02041074
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r4, _020411CC ; =0x020B5BB8
	mov r8, #0
	ldr r4, [r4]
	ldr ip, _020411D0 ; =0x020B5BB8
	cmp r4, #0
	moveq r0, r8
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r1, #0
	cmpne r2, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrh r5, [ip, #8]
	ldrh r4, [ip, #0xa]
	ldr lr, [ip, #4]
	add r6, r2, #3
	add r2, r5, r4
	cmp r2, lr
	bic r2, r6, #3
	movge r0, r8
	popge {r4, r5, r6, r7, r8, sb, sl, pc}
	add r3, r3, #3
	bics r3, r3, #3
	beq _020410F4
	cmp r3, r2
	bhs _020410F4
	ldr r4, [ip, #0x1c]
	cmp r1, r4
	blo _020410F8
	sub r4, r1, r4
	cmp r4, #0x8000
	bhs _020410F8
	arm_func_end FUN_02041074
_020410F4:
	mov r3, r2
_020410F8:
	ldr r5, [ip, #0x14]
	cmp r5, #0
	beq _02041134
_02041104:
	ldr r4, [r5, #4]
	cmp r4, r1
	ldreq r4, [r5]
	cmpeq r4, r0
	ldreq r4, [r5, #8]
	cmpeq r4, r2
	streq r8, [r5, #0x14]
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r5, [r5, #0xc]
	cmp r5, #0
	bne _02041104
_02041134:
	mov r4, #0
	mov sb, r4
	cmp lr, #0
	ble _0204116C
	ldr sl, [ip]
	mov r5, #0x1c
_0204114C:
	mla r7, sb, r5, sl
	ldr r6, [r7, #4]
	cmp r6, #0
	moveq r4, r7
	beq _0204116C
	add sb, sb, #1
	cmp sb, lr
	blt _0204114C
_0204116C:
	cmp r4, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	stm r4, {r0, r1, r2}
	str r8, [r4, #0xc]
	str r3, [r4, #0x10]
	ldr r1, [sp, #0x20]
	str r8, [r4, #0x14]
	cmp r1, #0
	str r1, [r4, #0x18]
	movne r0, #1
	strbne r0, [r1]
	ldr r0, [ip, #0x14]
	cmp r0, #0
	ldr r0, [ip, #0x18]
	streq r4, [ip, #0x14]
	cmp r0, #0
	strne r4, [r0, #0xc]
	ldrh r1, [ip, #0xa]
	str r4, [ip, #0x18]
	mov r0, #1
	add r1, r1, #1
	strh r1, [ip, #0xa]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020411CC: .word 0x020B5BB8
_020411D0: .word 0x020B5BB8

	arm_func_start FUN_020411d4
FUN_020411d4: ; 0x020411D4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	ldr r0, _020413B0 ; =0x020B5BB8
	mov r4, #0
	ldr r0, [r0]
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _020413B4 ; =0x020B5BB8
	mov r5, r4
	ldr r8, [r0, #0xc]
	str r5, [sp, #4]
	mov r6, r5
	str r5, [sp]
	mov r7, r5
	mov fp, r5
	cmp r8, #0
	beq _020412C4
	bl FUN_02005cf4
	cmp r8, #0
	beq _020412C0
	arm_func_end FUN_020411d4
_02041228:
	ldr r1, [r8, #0x14]
	ldr sl, [r8, #0x10]
	ldr r2, [r8, #8]
	add r0, r1, sl
	cmp r0, r2
	subhi sl, r2, r1
	ldm r8, {r3, ip}
	add r0, ip, r1
	add r1, r3, r1
	mov r2, sl
	ldr sb, [r8, #0xc]
	bl FUN_02005d50
	ldr r0, [r8, #0x14]
	add r1, r0, sl
	str r1, [r8, #0x14]
	ldr r0, [r8, #8]
	cmp r1, r0
	blo _0204128C
	ldr r0, [r8, #0x18]
	cmp r0, #0
	strbne r4, [r0]
	str r4, [r8, #4]
	str r4, [r8, #8]
	str r4, [r8]
	b _020412B4
_0204128C:
	ldr r0, [sp, #4]
	cmp r0, #0
	add r0, fp, #1
	streq r8, [sp, #4]
	cmp r5, #0
	strne r8, [r5, #0xc]
	lsl r0, r0, #0x10
	mov r5, r8
	str r4, [r8, #0xc]
	lsr fp, r0, #0x10
_020412B4:
	mov r8, sb
	cmp sb, #0
	bne _02041228
_020412C0:
	bl FUN_02005e9c
_020412C4:
	ldr r0, _020413B4 ; =0x020B5BB8
	ldr r8, [r0, #0x14]
	cmp r8, #0
	beq _0204137C
	bl FUN_02005ee0
	cmp r8, #0
	beq _02041378
_020412E0:
	ldr r1, [r8, #0x14]
	ldr sl, [r8, #0x10]
	ldr r2, [r8, #8]
	add r0, r1, sl
	cmp r0, r2
	subhi sl, r2, r1
	ldm r8, {r3, ip}
	add r0, ip, r1
	add r1, r3, r1
	mov r2, sl
	ldr sb, [r8, #0xc]
	bl FUN_02005f14
	ldr r0, [r8, #0x14]
	add r1, r0, sl
	str r1, [r8, #0x14]
	ldr r0, [r8, #8]
	cmp r1, r0
	blo _02041344
	ldr r0, [r8, #0x18]
	cmp r0, #0
	strbne r4, [r0]
	str r4, [r8, #4]
	str r4, [r8, #8]
	str r4, [r8]
	b _0204136C
_02041344:
	ldr r0, [sp]
	cmp r0, #0
	add r0, r7, #1
	streq r8, [sp]
	cmp r6, #0
	strne r8, [r6, #0xc]
	lsl r0, r0, #0x10
	mov r6, r8
	str r4, [r8, #0xc]
	lsr r7, r0, #0x10
_0204136C:
	mov r8, sb
	cmp sb, #0
	bne _020412E0
_02041378:
	bl FUN_02005f84
_0204137C:
	ldr r0, _020413B4 ; =0x020B5BB8
	ldr r2, [sp, #4]
	mov r1, r0
	str r2, [r1, #0xc]
	ldr r2, [sp]
	str r5, [r1, #0x10]
	str r2, [r1, #0x14]
	str r6, [r1, #0x18]
	strh fp, [r1, #8]
	strh r7, [r1, #0xa]
	bl FUN_02040e94
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020413B0: .word 0x020B5BB8
_020413B4: .word 0x020B5BB8

	arm_func_start FUN_020413b8
FUN_020413b8: ; 0x020413B8
	ldr r0, _02041424 ; =0x020B5BB8
	ldr r3, _02041428 ; =0x020B5BB8
	ldr r0, [r0]
	cmp r0, #0
	mov r0, #0
	bxeq lr
	ldr ip, [r3, #0xc]
	cmp ip, #0
	beq _020413F8
	arm_func_end FUN_020413b8
_020413DC:
	ldr r2, [ip, #8]
	ldr r1, [ip, #0x14]
	ldr ip, [ip, #0xc]
	sub r1, r2, r1
	cmp ip, #0
	add r0, r0, r1
	bne _020413DC
_020413F8:
	ldr r3, [r3, #0x14]
	cmp r3, #0
	bxeq lr
_02041404:
	ldr r2, [r3, #8]
	ldr r1, [r3, #0x14]
	ldr r3, [r3, #0xc]
	sub r1, r2, r1
	cmp r3, #0
	add r0, r0, r1
	bne _02041404
	bx lr
	.align 2, 0_02041424: .word 0x020B5BB8
_02041428: .word 0x020B5BB8

	arm_func_start FUN_0204142c
FUN_0204142c: ; 0x0204142C
	push {r3, r4, r5, lr}
	ldr r0, _02041490 ; =0x020B5BB8
	ldr r4, _02041494 ; =0x020B5BB8
	ldr r0, [r0]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [r4, #4]
	mov r0, #0x1c
	mul r5, r1, r0
	mov r0, #0
	ldr r1, [r4]
	mov r2, r5
	str r0, [r4, #0xc]
	str r0, [r4, #0x10]
	str r0, [r4, #0x14]
	str r0, [r4, #0x18]
	strh r0, [r4, #8]
	strh r0, [r4, #0xa]
	bl FUN_0200787c
	ldr r0, [r4]
	mov r1, r5
	bl FUN_020026d0
	mov r0, r4
	bl FUN_02040e94
	pop {r3, r4, r5, pc}
	.align 2, 0_02041490: .word 0x020B5BB8
_02041494: .word 0x020B5BB8
	arm_func_end FUN_0204142c

	arm_func_start FUN_02041498
FUN_02041498: ; 0x02041498
	push {r3, r4, r5, lr}
	ldr r1, _020414F4 ; =0x020B5BB8
	ldr ip, _020414F8 ; =0x020B5BB8
	ldr r1, [r1, #0x1c]
	cmp r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [r0]
	add r1, r1, #0x1f
	bic r2, r1, #0x1f
	str r2, [r0]
	ldr r5, [ip, #0x20]
	rsb r0, r5, #0x8000
	cmp r2, r0
	mov r0, #0
	popgt {r3, r4, r5, pc}
	ldr r4, [ip, #0x1c]
	add r3, r5, r2
	add r1, r4, r5
	str r3, [ip, #0x20]
	bl FUN_0200787c
	add r0, r4, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_020414F4: .word 0x020B5BB8
_020414F8: .word 0x020B5BB8
	arm_func_end FUN_02041498

	arm_func_start FUN_020414fc
FUN_020414fc: ; 0x020414FC
	ldr r1, _02041510 ; =0x020B5BDC
	ldr ip, _02041514 ; =FUN_0200787c
	mov r0, #0
	mov r2, #0x1c
	bx ip
	.align 2, 0_02041510: .word 0x020B5BDC
_02041514: .word FUN_0200787c
	arm_func_end FUN_020414fc

	arm_func_start FUN_02041518
FUN_02041518: ; 0x02041518
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xc
	mov r7, r0
	mov r6, r1
	bl FUN_02041618
	mul r5, r6, r7
	ldr r8, _02041608 ; =0x0209A250
	mov r1, r5
	mov r0, r8
	mov sb, #0
	bl FUN_0202de44
	movs r4, r0
	addeq sp, sp, #0xc
	moveq r0, sb
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldr r0, _0204160C ; =0x02099F30
	add r1, sp, #0
	ldr r0, [r0]
	mov r2, r5
	str sb, [sp]
	str sb, [sp, #4]
	strb sb, [sp, #8]
	strb sb, [sp, #9]
	bl FUN_020517ac
	cmp r0, #0
	bne _02041598
	mov r0, r8
	mov r1, r4
	bl FUN_0202e1c0
	add sp, sp, #0xc
	mov r0, sb
	pop {r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02041518
_02041598:
	ldr r1, _02041610 ; =0x020B5BDC
	mov r0, sb
	mov r2, #0x1c
	bl FUN_0200787c
	mov r0, sb
	mov r1, r4
	mov r2, r5
	bl FUN_0200787c
	ldr r0, [sp]
	ldr r1, _02041614 ; =0x020B5BDC
	ldr r2, [sp, #4]
	str r0, [r1]
	ldrb r0, [sp, #8]
	str r2, [r1, #4]
	ldrb r2, [sp, #9]
	strb r0, [r1, #8]
	ldrb r0, [sp, #0xa]
	strb r2, [r1, #9]
	ldrb r2, [sp, #0xb]
	strb r0, [r1, #0xa]
	mov r0, #1
	strb r2, [r1, #0xb]
	str r4, [r1, #0xc]
	str r5, [r1, #0x10]
	str r7, [r1, #0x14]
	str r6, [r1, #0x18]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02041608: .word 0x0209A250
_0204160C: .word 0x02099F30
_02041610: .word 0x020B5BDC
_02041614: .word 0x020B5BDC

	arm_func_start FUN_02041618
FUN_02041618: ; 0x02041618
	push {r3, lr}
	ldr r0, _02041658 ; =0x02099F30
	ldr r1, _0204165C ; =0x020B5BDC
	ldr r0, [r0]
	bl FUN_02051858
	ldr r0, _02041660 ; =0x020B5BDC
	ldr r1, [r0, #0xc]
	cmp r1, #0
	beq _02041644
	ldr r0, _02041664 ; =0x0209A250
	bl FUN_0202e1c0
	arm_func_end FUN_02041618
_02041644:
	ldr r1, _0204165C ; =0x020B5BDC
	mov r0, #0
	mov r2, #0x1c
	bl FUN_0200787c
	pop {r3, pc}
	.align 2, 0_02041658: .word 0x02099F30
_0204165C: .word 0x020B5BDC
_02041660: .word 0x020B5BDC
_02041664: .word 0x0209A250

	arm_func_start FUN_02041668
FUN_02041668: ; 0x02041668
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	ldr r1, _020416C8 ; =0x020B5BDC
	ldr r0, [r1, #0xc]
	cmp r0, #0
	ldrne r0, [r1]
	cmpne r0, #0
	addle sp, sp, #0xc
	ldmle sp!, {pc}
	ldrb r0, [r1, #9]
	cmp r0, #0
	addne sp, sp, #0xc
	ldmne sp!, {pc}
	ldr r0, [r1, #0x10]
	mov r2, #0
	stm sp, {r0, r2}
	str r2, [sp, #8]
	ldr r0, _020416CC ; =0x02099F30
	ldr r3, [r1, #0xc]
	ldr r0, [r0]
	ldr r1, _020416D0 ; =0x020B5BDC
	bl FUN_020519e4
	add sp, sp, #0xc
	ldm sp!, {pc}
	.align 2, 0_020416C8: .word 0x020B5BDC
_020416CC: .word 0x02099F30
_020416D0: .word 0x020B5BDC
	arm_func_end FUN_02041668

	arm_func_start FUN_020416d4
FUN_020416d4: ; 0x020416D4
	cmp r0, #0
	blt _020416EC
	ldr r1, _02041704 ; =0x020B5BDC
	ldr r2, [r1, #0x14]
	cmp r0, r2
	blt _020416F4
	arm_func_end FUN_020416d4
_020416EC:
	mov r0, #0
	bx lr
_020416F4:
	ldr r2, [r1, #0xc]
	ldr r1, [r1, #0x18]
	mla r0, r1, r0, r2
	bx lr
	.align 2, 0_02041704: .word 0x020B5BDC

	arm_func_start FUN_02041708
FUN_02041708: ; 0x02041708
	push {r3, r4, r5, lr}
	movs r5, r0
	bmi _02041724
	ldr r4, _02041754 ; =0x020B5BDC
	ldr r0, [r4, #0x14]
	cmp r5, r0
	blt _0204172C
	arm_func_end FUN_02041708
_02041724:
	mvn r0, #0
	pop {r3, r4, r5, pc}
_0204172C:
	ldr r0, _02041758 ; =0x02099F30
	ldr r1, _0204175C ; =0x020B5BDC
	ldr r0, [r0]
	add r2, sp, #0
	bl FUN_02051bb8
	ldr r0, [sp]
	cmn r0, #1
	ldrne r1, [r4, #0x18]
	mlane r0, r1, r5, r0
	pop {r3, r4, r5, pc}
	.align 2, 0_02041754: .word 0x020B5BDC
_02041758: .word 0x02099F30
_0204175C: .word 0x020B5BDC

	arm_func_start FUN_02041760
FUN_02041760: ; 0x02041760
	ldr r0, _02041774 ; =0x02099F30
	ldr r1, _02041778 ; =0x020B5BDC
	ldr r0, [r0]
	ldr ip, _0204177C ; =FUN_02051d3c
	bx ip
	.align 2, 0_02041774: .word 0x02099F30
_02041778: .word 0x020B5BDC
_0204177C: .word FUN_02051d3c
	arm_func_end FUN_02041760

	arm_func_start FUN_02041780
FUN_02041780: ; 0x02041780
	ldr r0, _02041794 ; =0x02099F30
	ldr r1, _02041798 ; =0x020B5BDC
	ldr r0, [r0]
	ldr ip, _0204179C ; =FUN_02051dc4
	bx ip
	.align 2, 0_02041794: .word 0x02099F30
_02041798: .word 0x020B5BDC
_0204179C: .word FUN_02051dc4
	arm_func_end FUN_02041780

	arm_func_start FUN_020417a0
FUN_020417a0: ; 0x020417A0
	push {r4, lr}
	mov r4, r0
	bl FUN_020417dc
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020417a0

	arm_func_start FUN_020417b4
FUN_020417b4: ; 0x020417B4
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _020417CC
	bl FUN_02086738
	arm_func_end FUN_020417b4
_020417CC:
	mov r1, #0
	mov r0, r4
	str r1, [r4]
	pop {r4, pc}

	arm_func_start FUN_020417dc
FUN_020417dc: ; 0x020417DC
	mov r1, #0
	str r1, [r0]
	bx lr
	arm_func_end FUN_020417dc

	arm_func_start FUN_020417e8
FUN_020417e8: ; 0x020417E8
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r4, #0
	mov r8, r0
	add r0, sp, #0
	mov r2, r4
	mov r3, r4
	str r4, [sp]
	bl FUN_02085bbc
	mov r7, r0
	cmp r7, #0
	addle sp, sp, #4
	movle r0, r4
	pople {r3, r4, r5, r6, r7, r8, pc}
	ldr r0, [sp]
	add r1, r0, r7
	mov r6, r0
	mov r5, r0
	cmp r0, r1
	bhs _020418A0
	arm_func_end FUN_020417e8
_02041838:
	ldrsb r0, [r6]
	cmp r0, #0xa
	beq _0204184C
	cmp r0, #0xd
	bne _0204188C
_0204184C:
	mov r0, r5
	strb r4, [r6]
	bl _strlen
	cmp r0, #0
	beq _02041888
	ldr r3, [r8]
	ldr r2, [r8, #4]
	mov r0, r8
	mov r1, r5
	add r2, r3, r2, lsl #3
	bl FUN_0204197c
	cmp r0, #0
	ldrne r0, [r8, #4]
	addne r0, r0, #1
	strne r0, [r8, #4]
_02041888:
	add r5, r6, #1
_0204188C:
	ldr r0, [sp]
	add r6, r6, #1
	add r1, r0, r7
	cmp r6, r1
	blo _02041838
_020418A0:
	bl FUN_02086738
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020418b0
FUN_020418b0: ; 0x020418B0
	push {r4, lr}
	mov r4, r0
	bl FUN_02041914
	cmp r0, #0
	blt _020418D0
	ldr r1, [r4]
	cmp r1, #0
	bne _020418D8
	arm_func_end FUN_020418b0
_020418D0:
	mov r0, #0
	pop {r4, pc}
_020418D8:
	add r0, r1, r0, lsl #3
	ldr r0, [r0, #4]
	pop {r4, pc}

	arm_func_start FUN_020418e4
FUN_020418e4: ; 0x020418E4
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	cmp r0, #0
	bne _02041908
	mov r0, #0x300
	mvn r1, #0
	bl FUN_0208670c
	str r0, [r4]
	arm_func_end FUN_020418e4
_02041908:
	mov r0, #0
	str r0, [r4, #4]
	pop {r4, pc}

	arm_func_start FUN_02041914
FUN_02041914: ; 0x02041914
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r4, [r6]
	mov r5, r1
	cmp r4, #0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r5
	bl GetStrLen
	mov r1, r0
	mov r0, r5
	bl FUN_020859d8
	ldr r3, [r6, #4]
	mov r2, #0
	cmp r3, #0
	ble _02041974
	arm_func_end FUN_02041914
_02041954:
	ldr r1, [r4]
	cmp r1, r0
	moveq r0, r2
	popeq {r4, r5, r6, pc}
	add r2, r2, #1
	cmp r2, r3
	add r4, r4, #8
	blt _02041954
_02041974:
	mvn r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0204197c
FUN_0204197c: ; 0x0204197C
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x20
	movs r5, r2
	mov r4, #1
	mov r7, #0
	mov r6, r1
	addeq sp, sp, #0x20
	mov r3, r4
	mov r0, r7
	popeq {r4, r5, r6, r7, r8, pc}
	ldrsb r2, [r6]
	cmp r2, #0
	beq _02041A64
	mov r8, r4
	arm_func_end FUN_0204197c
_020419B4:
	ldrsb r2, [r6]
	cmp r2, #0x20
	beq _020419C8
	cmp r2, #9
	bne _020419D8
_020419C8:
	add r6, r6, #1
	cmp r3, #0
	movne r1, r6
	b _02041A58
_020419D8:
	cmp r2, #0x3b
	bne _020419F0
	cmp r4, #0
	addne sp, sp, #0x20
	movne r0, #0
	popne {r4, r5, r6, r7, r8, pc}
_020419F0:
	cmp r2, #0x3d
	cmpeq r0, #0
	bne _02041A4C
	cmp r6, r1
	addeq sp, sp, #0x20
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r2, r6
	b _02041A18
_02041A14:
	sub r2, r2, #1
_02041A18:
	ldrsb r0, [r2, #-1]
	cmp r0, #0x20
	cmpne r0, #9
	beq _02041A14
	mov r0, r1
	sub r1, r2, r1
	bl FUN_020859d8
	add r6, r6, #1
	str r0, [r5]
	mov r0, r8
	mov r1, r6
	mov r3, r8
	b _02041A58
_02041A4C:
	mov r4, r7
	mov r3, r7
	add r6, r6, #1
_02041A58:
	ldrsb r2, [r6]
	cmp r2, #0
	bne _020419B4
_02041A64:
	cmp r0, #0
	beq _02041ABC
	b _02041A74
_02041A70:
	sub r6, r6, #1
_02041A74:
	ldrsb r0, [r6, #-1]
	cmp r0, #0x20
	cmpne r0, #9
	beq _02041A70
	sub r6, r6, r1
	cmp r6, #0
	ble _02041ABC
	add r4, sp, #0
	mov r2, r6
	mov r0, r4
	bl _strncpy
	mov r0, r4
	strb r7, [r4, r6]
	bl FUN_02024640
	str r0, [r5, #4]
	add sp, sp, #0x20
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
_02041ABC:
	mov r0, #0
	add sp, sp, #0x20
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02041ac8
FUN_02041ac8: ; 0x02041AC8
	push {r4, lr}
	ldr r1, _02041AE4 ; =0x0208FF94
	mov r4, r0
	str r1, [r4]
	bl FUN_02041b04
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02041AE4: .word 0x0208FF94
	arm_func_end FUN_02041ac8

	arm_func_start FUN_02041ae8
FUN_02041ae8: ; 0x02041AE8
	bx lr
	arm_func_end FUN_02041ae8

	arm_func_start FUN_02041aec
FUN_02041aec: ; 0x02041AEC
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02041aec

	arm_func_start FUN_02041b00
FUN_02041b00: ; 0x02041B00
	bx lr
	arm_func_end FUN_02041b00

	arm_func_start FUN_02041b04
FUN_02041b04: ; 0x02041B04
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	mov r1, r4
	add r0, r5, #0x20
	mov r2, #0x60
	str r4, [r5, #0x18]
	str r4, [r5, #0x1c]
	bl MemWrite
	str r4, [r5, #0x80]
	str r4, [r5, #0x84]
	strb r4, [r5, #0x89]
	strb r4, [r5, #0x88]
	strb r4, [r5, #0x8a]
	strb r4, [r5, #0x8b]
	strb r4, [r5, #0x8c]
	strh r4, [r5, #0x8e]
	strb r4, [r5, #4]
	strb r4, [r5, #5]
	str r4, [r5, #8]
	str r4, [r5, #0xc]
	str r4, [r5, #0x10]
	str r4, [r5, #0x14]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02041b04

	arm_func_start FUN_02041b64
FUN_02041b64: ; 0x02041B64
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x88]
	mov r5, r1
	mov r4, r2
	cmp r0, #0
	beq _02041BA0
	ldr r0, [r6, #0x84]
	cmp r0, #0
	beq _02041BD0
	bl FUN_020F1660
	cmp r0, #0
	bne _02041BD0
	ldr r0, [r6, #0x84]
	b _02041BBC
	arm_func_end FUN_02041b64
_02041BA0:
	ldr r0, [r6, #0x80]
	cmp r0, #0
	beq _02041BD0
	bl FUN_020F1650
	cmp r0, #0
	bne _02041BD0
	ldr r0, [r6, #0x80]
_02041BBC:
	ldr r3, [r0]
	mov r1, r5
	ldr r3, [r3, #8]
	mov r2, r4
	blx r3
_02041BD0:
	ldr r0, _02041BE8 ; =0x0209BA20
	mov r1, r5
	mov r2, r4
	bl FUN_020724b8
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_02041BE8: .word 0x0209BA20

	arm_func_start FUN_02041bec
FUN_02041bec: ; 0x02041BEC
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrb r0, [r5, #0x88]
	mov r4, r1
	cmp r0, #0
	beq _02041C24
	ldr r0, [r5, #0x84]
	cmp r0, #0
	beq _02041C50
	bl FUN_020F1660
	cmp r0, #0
	bne _02041C50
	ldr r0, [r5, #0x84]
	b _02041C40
	arm_func_end FUN_02041bec
_02041C24:
	ldr r0, [r5, #0x80]
	cmp r0, #0
	beq _02041C50
	bl FUN_020F1650
	cmp r0, #0
	bne _02041C50
	ldr r0, [r5, #0x80]
_02041C40:
	ldr r2, [r0]
	mov r1, r4
	ldr r2, [r2, #0xc]
	blx r2
_02041C50:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02041c58
FUN_02041c58: ; 0x02041C58
	push {r3, r4, r5, lr}
	movs r4, r1
	mov r5, r0
	bne _02041C8C
	ldr r0, [r5, #0x80]
	cmp r0, #0
	beq _02041CB8
	ldr r1, [r0]
	ldr r1, [r1, #0x14]
	blx r1
	mov r1, r0
	ldr r0, [r5, #0x80]
	b _02041CAC
	arm_func_end FUN_02041c58
_02041C8C:
	ldr r0, [r5, #0x84]
	cmp r0, #0
	beq _02041CB8
	ldr r1, [r0]
	ldr r1, [r1, #0x14]
	blx r1
	mov r1, r0
	ldr r0, [r5, #0x84]
_02041CAC:
	ldr r2, [r0]
	ldr r2, [r2, #0x18]
	blx r2
_02041CB8:
	mov r0, r4
	bl FUN_020F16C8
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02041cc8
FUN_02041cc8: ; 0x02041CC8
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	mov r0, r4
	bl FUN_020F16C8
	cmp r4, #0
	bne _02041CF4
	ldr r0, [r5, #0x80]
	cmp r0, #0
	beq _02041D0C
	b _02041D00
	arm_func_end FUN_02041cc8
_02041CF4:
	ldr r0, [r5, #0x84]
	cmp r0, #0
	beq _02041D0C
_02041D00:
	ldr r1, [r0]
	ldr r1, [r1, #0x1c]
	blx r1
_02041D0C:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02041d14
FUN_02041d14: ; 0x02041D14
	push {r4, lr}
	mov r4, r2
	ldr r0, [r4]
	cmp r0, #0
	popeq {r4, pc}
	arm_func_end FUN_02041d14
_02041D28:
	ldrb r0, [r4, #8]
	cmp r0, #0
	beq _02041D70
	ldr r0, [r4, #4]
	cmp r0, r1
	bne _02041D70
	ldr r1, [r4, #0xc]
	mov r0, #0
	bl FUN_0200e5d4
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _02041D64
	ldr r1, [r0]
	ldr r1, [r1, #4]
	blx r1
_02041D64:
	mov r0, #0
	str r0, [r4, #4]
	pop {r4, pc}
_02041D70:
	ldr r0, [r4, #0x10]!
	cmp r0, #0
	bne _02041D28
	pop {r4, pc}

	arm_func_start FUN_02041d80
FUN_02041d80: ; 0x02041D80
	push {r3, lr}
	ldr r0, [r0, #0x80]
	cmp r0, #0
	popeq {r3, pc}
	mov r0, #6
	bl FUN_020F1468
	pop {r3, pc}
	arm_func_end FUN_02041d80

	arm_func_start FUN_02041d9c
FUN_02041d9c: ; 0x02041D9C
	push {r3, lr}
	ldr r0, [r0, #0x80]
	cmp r0, #0
	popeq {r3, pc}
	mov r0, #6
	bl FUN_020F1514
	pop {r3, pc}
	arm_func_end FUN_02041d9c

	arm_func_start FUN_02041db8
FUN_02041db8: ; 0x02041DB8
	push {r3, lr}
	ldr r0, [r0, #0x84]
	cmp r0, #0
	popeq {r3, pc}
	mov r0, #6
	bl FUN_020F1528
	pop {r3, pc}
	arm_func_end FUN_02041db8

	arm_func_start FUN_02041dd4
FUN_02041dd4: ; 0x02041DD4
	push {r3, lr}
	ldr r0, [r0, #0x80]
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	ldr r2, [r0]
	ldr r2, [r2, #0x60]
	blx r2
	pop {r3, pc}
	arm_func_end FUN_02041dd4

	arm_func_start FUN_02041df8
FUN_02041df8: ; 0x02041DF8
	push {r3, lr}
	ldr r0, [r0, #0x84]
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	ldr r2, [r0]
	ldr r2, [r2, #0x60]
	blx r2
	pop {r3, pc}
	arm_func_end FUN_02041df8

	arm_func_start FUN_02041e1c
FUN_02041e1c: ; 0x02041E1C
	push {r3, lr}
	ldr r0, [r0, #0x80]
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	ldr r2, [r0]
	ldr r2, [r2, #0x64]
	blx r2
	pop {r3, pc}
	arm_func_end FUN_02041e1c

	arm_func_start FUN_02041e40
FUN_02041e40: ; 0x02041E40
	push {r3, lr}
	ldr r0, [r0, #0x84]
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	ldr r2, [r0]
	ldr r2, [r2, #0x64]
	blx r2
	pop {r3, pc}
	arm_func_end FUN_02041e40

	arm_func_start FUN_02041e64
FUN_02041e64: ; 0x02041E64
	push {r3, lr}
	ldr r0, [r0, #0x80]
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	ldr r1, [r0]
	ldr r1, [r1, #0x68]
	blx r1
	pop {r3, pc}
	arm_func_end FUN_02041e64

	arm_func_start FUN_02041e88
FUN_02041e88: ; 0x02041E88
	push {r3, lr}
	ldr r0, [r0, #0x84]
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	ldr r1, [r0]
	ldr r1, [r1, #0x68]
	blx r1
	pop {r3, pc}
	arm_func_end FUN_02041e88

	arm_func_start FUN_02041eac
FUN_02041eac: ; 0x02041EAC
	push {r4, lr}
	add lr, r0, r1, lsl #2
	ldr ip, [lr, #0x18]
	add r4, r0, #0x20
	mov r3, #0x18
	mla r4, ip, r3, r4
	mov r3, #0xc
	mla r4, r1, r3, r4
	mov ip, #0
	str ip, [lr, #8]
	ldr r3, [r4, #8]
	add r0, r0, r1
	cmp r3, r2
	movne ip, #1
	strb ip, [r0, #4]
	str r2, [r4, #8]
	pop {r4, pc}
	arm_func_end FUN_02041eac

	arm_func_start FUN_02041ef0
FUN_02041ef0: ; 0x02041EF0
	push {r3, r4, r5, lr}
	add lr, r0, r1, lsl #2
	ldr r3, [lr, #0x18]
	mov ip, #1
	add r5, r0, #0x20
	add r4, r3, #1
	mov r3, #0x18
	mla r5, r4, r3, r5
	mov r3, #0xc
	mla r3, r1, r3, r5
	str ip, [lr, #8]
	add r0, r0, r1
	strb ip, [r0, #4]
	str r2, [r3, #8]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02041ef0

	arm_func_start FUN_02041f2c
FUN_02041f2c: ; 0x02041F2C
	push {r4, lr}
	add ip, r0, r1, lsl #2
	ldr r2, [ip, #0x18]
	add r4, r0, #0x20
	sub lr, r2, #1
	mov r2, #0x18
	mla r4, lr, r2, r4
	mov r2, #0xc
	mla r2, r1, r2, r4
	mov r3, #2
	add r0, r0, r1
	str r3, [ip, #8]
	mov r1, #1
	strb r1, [r0, #4]
	ldr r1, [r2, #4]
	mov r0, #0
	stmib r2, {r0, r1}
	pop {r4, pc}
	arm_func_end FUN_02041f2c

	arm_func_start FUN_02041f74
FUN_02041f74: ; 0x02041F74
	push {r3, r4, r5, lr}
	add r5, r0, r1, lsl #2
	ldr r3, [r5, #0x18]
	mov ip, #0xc
	mov lr, #0x18
	mul ip, r1, ip
	mla r4, r3, lr, r0
	add r4, r4, ip
	ldr r4, [r4, #0x24]
	str r4, [r5, #0x10]
	ldr r4, [r5, #8]
	cmp r4, #1
	beq _02041FB4
	cmp r4, #2
	subeq r3, r3, #1
	b _02041FB8
	arm_func_end FUN_02041f74
_02041FB4:
	add r3, r3, #1
_02041FB8:
	add r4, r0, #0x20
	mov lr, #0x18
	mla r4, r3, lr, r4
	add lr, r0, r1, lsl #2
	str r3, [lr, #0x18]
	mov r3, #0
	add r0, r0, r1
	str r3, [lr, #8]
	add r1, r4, ip
	strb r3, [r0, #4]
	ldr r0, [r1, #4]
	stm r1, {r0, r2}
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02041fec
FUN_02041fec: ; 0x02041FEC
	ldr r1, [r0, #8]
	ldr r2, [r0, #0x18]
	cmp r1, #1
	beq _02042008
	cmp r1, #2
	subeq r2, r2, #1
	b _0204200C
	arm_func_end FUN_02041fec
_02042008:
	add r2, r2, #1
_0204200C:
	mov r1, #0x18
	mla r0, r2, r1, r0
	ldr r0, [r0, #0x24]
	bx lr

	arm_func_start FUN_0204201c
FUN_0204201c: ; 0x0204201C
	ldr r1, [r0, #8]
	ldr r2, [r0, #0x18]
	cmp r1, #1
	beq _02042038
	cmp r1, #2
	subeq r2, r2, #1
	b _0204203C
	arm_func_end FUN_0204201c
_02042038:
	add r2, r2, #1
_0204203C:
	mov r1, #0x18
	mla r0, r2, r1, r0
	ldr r0, [r0, #0x28]
	bx lr

	arm_func_start FUN_0204204c
FUN_0204204c: ; 0x0204204C
	ldr r0, [r0, #0x10]
	bx lr
	arm_func_end FUN_0204204c

	arm_func_start FUN_02042054
FUN_02042054: ; 0x02042054
	ldr r1, [r0, #0xc]
	ldr r2, [r0, #0x1c]
	cmp r1, #1
	beq _02042070
	cmp r1, #2
	subeq r2, r2, #1
	b _02042074
	arm_func_end FUN_02042054
_02042070:
	add r2, r2, #1
_02042074:
	mov r1, #0x18
	mla r0, r2, r1, r0
	ldr r0, [r0, #0x30]
	bx lr

	arm_func_start FUN_02042084
FUN_02042084: ; 0x02042084
	ldr r1, [r0, #0xc]
	ldr r2, [r0, #0x1c]
	cmp r1, #1
	beq _020420A0
	cmp r1, #2
	subeq r2, r2, #1
	b _020420A4
	arm_func_end FUN_02042084
_020420A0:
	add r2, r2, #1
_020420A4:
	mov r1, #0x18
	mla r0, r2, r1, r0
	ldr r0, [r0, #0x34]
	bx lr

	arm_func_start FUN_020420b4
FUN_020420b4: ; 0x020420B4
	ldr r0, [r0, #0x14]
	bx lr
	arm_func_end FUN_020420b4

	arm_func_start FUN_020420bc
FUN_020420bc: ; 0x020420BC
	ldrb r1, [r0, #0x89]
	cmp r1, #0
	bxeq lr
	ldrb r1, [r0, #0x88]
	ldr r2, _0204210C ; =0x04000304
	cmp r1, #0
	ldrhne r1, [r2]
	bicne r1, r1, #0x8000
	strhne r1, [r2]
	ldrheq r1, [r2]
	orreq r1, r1, #0x8000
	strheq r1, [r2]
	ldrb r1, [r0, #0x88]
	mov r2, #1
	cmp r1, #0
	movne r2, #0
	mov r1, #0
	strb r2, [r0, #0x88]
	strb r1, [r0, #0x89]
	bx lr
	.align 2, 0_0204210C: .word 0x04000304
	arm_func_end FUN_020420bc

	arm_func_start FUN_02042110
FUN_02042110: ; 0x02042110
	sub r0, r1, #0x5a
	cmp r0, #3
	movls r0, #1
	movhi r0, #0
	bx lr
	arm_func_end FUN_02042110

	arm_func_start FUN_02042124
FUN_02042124: ; 0x02042124
	bx lr
	arm_func_end FUN_02042124

	arm_func_start FUN_02042128
FUN_02042128: ; 0x02042128
	bx lr
	arm_func_end FUN_02042128

	arm_func_start FUN_0204212c
FUN_0204212c: ; 0x0204212C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	mov r3, #1
	ldr ip, _02042184 ; =0x0208FFEC
	mov r0, r4
	add r1, r5, #4
	mov r2, #8
	str ip, [r5]
	str r4, [r5, #0xc]
	str r3, [r5, #0x14]
	str r3, [r5, #0x18]
	strb r4, [r5, #0x1e]
	strb r4, [r5, #0x1f]
	strb r4, [r5, #0x20]
	bl FUN_0200787c
	mov r1, r4
	add r0, r5, #0x1c
	mov r2, #2
	bl MemWrite
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_02042184: .word 0x0208FFEC
	arm_func_end FUN_0204212c

	arm_func_start FUN_02042188
FUN_02042188: ; 0x02042188
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	mov r3, #1
	ldr ip, _020421E0 ; =0x0208FFEC
	mov r0, r4
	add r1, r5, #4
	mov r2, #8
	str ip, [r5]
	str r4, [r5, #0xc]
	str r3, [r5, #0x14]
	str r3, [r5, #0x18]
	strb r4, [r5, #0x1e]
	strb r4, [r5, #0x1f]
	strb r4, [r5, #0x20]
	bl FUN_0200787c
	mov r1, r4
	add r0, r5, #0x1c
	mov r2, #2
	bl MemWrite
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_020421E0: .word 0x0208FFEC
	arm_func_end FUN_02042188
_020421E4:
	.byte 0x10, 0x40, 0x2D, 0xE9, 0x10, 0x10, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1
	.byte 0x00, 0x10, 0x84, 0xE5, 0x14, 0x00, 0x00, 0xEB, 0x04, 0x00, 0xA0, 0xE1, 0x10, 0x80, 0xBD, 0xE8
	.byte 0xEC, 0xFF, 0x08, 0x02, 0x10, 0x40, 0x2D, 0xE9, 0x18, 0x10, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1
	.byte 0x00, 0x10, 0x84, 0xE5, 0x0C, 0x00, 0x00, 0xEB, 0x04, 0x00, 0xA0, 0xE1, 0x95, 0x6F, 0xFF, 0xEB
	.byte 0x04, 0x00, 0xA0, 0xE1, 0x10, 0x80, 0xBD, 0xE8, 0xEC, 0xFF, 0x08, 0x02

	arm_func_start FUN_0204222c
FUN_0204222c: ; 0x0204222C
	push {r4, lr}
	ldr r1, _02042248 ; =0x0208FFEC
	mov r4, r0
	str r1, [r4]
	bl FUN_0204224c
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02042248: .word 0x0208FFEC
	arm_func_end FUN_0204222c

	arm_func_start FUN_0204224c
FUN_0204224c: ; 0x0204224C
	mov r3, r0
	mov r0, #0
	ldr ip, _02042270 ; =FUN_0200787c
	add r1, r3, #4
	mov r2, #8
	str r0, [r3, #0xc]
	strb r0, [r3, #0x1e]
	strb r0, [r3, #0x1f]
	bx ip
	.align 2, 0_02042270: .word FUN_0200787c
	arm_func_end FUN_0204224c

	arm_func_start FUN_02042274
FUN_02042274: ; 0x02042274
	tst r1, #1
	bic r1, r1, #1
	ldrh r0, [r1]
	andne r0, r0, #0xff
	orrne r0, r0, r2, lsl #8
	andeq r0, r0, #0xff00
	orreq r0, r0, r2
	strh r0, [r1]
	bx lr
	arm_func_end FUN_02042274

	arm_func_start FUN_02042298
FUN_02042298: ; 0x02042298
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov sl, r0
	ldr r0, [sl, #4]
	ldr r4, [sp, #0x3c]
	ldr r5, [r0, #8]
	ldrsb r0, [r4]
	ldrsb r6, [r4, #2]
	ldr r4, [sp, #0x40]
	mov sb, r1
	str r4, [sp, #0x40]
	ldr r4, [sp, #0x44]
	ldr r1, [sp, #0x40]
	str r4, [sp, #0x44]
	ldrb r4, [r5]
	sub fp, r6, r0
	cmp r1, #0
	sub r1, r4, fp
	str r1, [sp, #0xc]
	ldr r1, [sp, #0x44]
	str r2, [sp]
	add r0, r1, r0
	str r0, [sp, #0x44]
	ldr r0, [sp, #0x48]
	str r3, [sp, #4]
	str r0, [sp, #0x48]
	mov r0, #0
	mov r5, #0x80
	str r0, [sp, #0x10]
	ble _02042414
	ldr r0, [sp, #0x44]
	tst r0, #1
	movne r0, #1
	strne r0, [sp, #8]
	ldreq r0, [sp, #0x10]
	streq r0, [sp, #8]
	ldrb r0, [sp, #0x38]
	and r7, r0, #0xf
	arm_func_end FUN_02042298
_02042330:
	ldr r1, [sp, #0x48]
	ldr r0, [sp, #0x10]
	cmp fp, #0
	add r2, r1, r0
	ldr r1, [sp, #4]
	ldr r0, [sp, #0x44]
	ldr r8, [sp, #8]
	mla r0, r1, r2, r0
	add r1, r0, r0, lsr #31
	ldr r0, [sp]
	mov r4, #0
	add r6, r0, r1, asr #1
	ble _020423CC
_02042364:
	ldrb r0, [sb]
	tst r0, r5
	beq _020423A0
	cmp r8, #0
	mov r0, sl
	mov r1, r6
	ldrb r2, [r6]
	beq _02042390
	and r2, r2, #0xf
	orr r2, r2, r7, lsl #4
	b _02042398
_02042390:
	and r2, r2, #0xf0
	orr r2, r2, r7
_02042398:
	and r2, r2, #0xff
	bl FUN_02042274
_020423A0:
	asrs r5, r5, #1
	moveq r5, #0x80
	addeq sb, sb, #1
	cmp r8, #0
	addne r6, r6, #1
	cmp r8, #0
	moveq r8, #1
	add r4, r4, #1
	movne r8, #0
	cmp r4, fp
	blt _02042364
_020423CC:
	ldr r0, [sp, #0xc]
	mov r2, #0
	cmp r0, #0
	ble _020423FC
	mov r1, #0x80
_020423E0:
	ldr r0, [sp, #0xc]
	asrs r5, r5, #1
	add r2, r2, #1
	moveq r5, r1
	addeq sb, sb, #1
	cmp r2, r0
	blt _020423E0
_020423FC:
	ldr r0, [sp, #0x10]
	add r1, r0, #1
	ldr r0, [sp, #0x40]
	str r1, [sp, #0x10]
	cmp r1, r0
	blt _02042330
_02042414:
	add r0, fp, #1
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02042420
FUN_02042420: ; 0x02042420
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov fp, r0
	ldr r0, [fp, #4]
	ldr r4, [sp, #0x34]
	ldr r5, [r0, #8]
	ldrsb r0, [r4]
	ldrsb r6, [r4, #2]
	ldr r4, [sp, #0x38]
	mov sl, r1
	str r4, [sp, #0x38]
	ldr r4, [sp, #0x3c]
	ldr r1, [sp, #0x38]
	str r4, [sp, #0x3c]
	cmp r1, #0
	ldrb r4, [r5]
	sub r6, r6, r0
	ldr r1, [sp, #0x3c]
	str r2, [sp]
	add r0, r1, r0
	str r0, [sp, #0x3c]
	ldr r0, [sp, #0x40]
	str r3, [sp, #4]
	str r0, [sp, #0x40]
	mov r0, #0
	sub r7, r4, r6
	ldr sb, [sp, #0x30]
	mov r5, #0x80
	str r0, [sp, #8]
	ble _02042538
	arm_func_end FUN_02042420
_02042498:
	ldr r1, [sp, #0x40]
	ldr r0, [sp, #8]
	cmp r6, #0
	add r2, r1, r0
	ldr r1, [sp, #4]
	ldr r0, [sp, #0x3c]
	mov r4, #0
	mla r2, r1, r2, r0
	ldr r0, [sp]
	add r8, r0, r2
	ble _020424FC
_020424C4:
	ldrb r0, [sl]
	tst r0, r5
	beq _020424E0
	mov r0, fp
	mov r1, r8
	mov r2, sb
	bl FUN_02042274
_020424E0:
	asrs r5, r5, #1
	add r4, r4, #1
	moveq r5, #0x80
	addeq sl, sl, #1
	add r8, r8, #1
	cmp r4, r6
	blt _020424C4
_020424FC:
	cmp r7, #0
	mov r0, #0
	ble _02042520
_02042508:
	asrs r5, r5, #1
	add r0, r0, #1
	moveq r5, #0x80
	addeq sl, sl, #1
	cmp r0, r7
	blt _02042508
_02042520:
	ldr r0, [sp, #8]
	add r1, r0, #1
	ldr r0, [sp, #0x38]
	str r1, [sp, #8]
	cmp r1, r0
	blt _02042498
_02042538:
	add r0, r6, #1
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02042544
FUN_02042544: ; 0x02042544
	cmp r0, #0
	moveq r0, #0
	bxeq lr
	ldrb r0, [r0]
	cmp r0, #0x20
	blo _02042564
	cmp r0, #0x7e
	bls _02042574
	arm_func_end FUN_02042544
_02042564:
	cmp r0, #0xa1
	blo _0204257C
	cmp r0, #0xdf
	bhi _0204257C
_02042574:
	mov r0, #1
	bx lr
_0204257C:
	mov r0, #2
	bx lr

	arm_func_start FUN_02042584
FUN_02042584: ; 0x02042584
	ldrb r1, [r0]
	cmp r1, #0
	ldrbeq r0, [r0, #1]
	cmpeq r0, #0
	moveq r0, #0
	movne r0, #2
	bx lr
	arm_func_end FUN_02042584

	arm_func_start FUN_020425a0
FUN_020425a0: ; 0x020425A0
	push {r3, lr}
	ldrb r0, [r0, #0x20]
	cmp r0, #0
	mov r0, r1
	beq _020425BC
	bl FUN_02042584
	pop {r3, pc}
	arm_func_end FUN_020425a0
_020425BC:
	bl FUN_02042544
	pop {r3, pc}

	arm_func_start FUN_020425c4
FUN_020425c4: ; 0x020425C4
	push {r4, lr}
	mov r4, r1
	bl FUN_020425a0
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	cmp r0, #1
	ldrbeq r0, [r4]
	ldrbne r1, [r4]
	ldrbne r0, [r4, #1]
	orrne r0, r0, r1, lsl #8
	lslne r0, r0, #0x10
	lsrne r0, r0, #0x10
	pop {r4, pc}
	arm_func_end FUN_020425c4

	arm_func_start FUN_020425fc
FUN_020425fc: ; 0x020425FC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	movs sb, r1
	ldr r1, [sp, #0x58]
	mov sl, r0
	str r1, [sp, #0x58]
	ldr r1, [sp, #0x68]
	str r2, [sp, #0x14]
	str r1, [sp, #0x68]
	ldr r1, [sp, #0x6c]
	mov r8, r3
	str r1, [sp, #0x6c]
	ldr r1, [sp, #0x70]
	ldr r7, [sp, #0x5c]
	str r1, [sp, #0x70]
	ldr r1, [sp, #0x74]
	ldr r6, [sp, #0x60]
	str r1, [sp, #0x74]
	mov r1, #0
	ldr fp, [sp, #0x64]
	str r1, [sp, #0x1c]
	beq _02042660
	movs r1, r2
	cmpne r8, #0
	bgt _0204266C
	arm_func_end FUN_020425fc
_02042660:
	add sp, sp, #0x30
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204266C:
	ldr r2, [sl, #4]
	ldr r4, [sp, #0x74]
	ldr r3, [r2, #8]
	mov r1, r7
	ldrb r5, [r3, #1]
	mov r2, r8
	mov r3, sb
	str r4, [sp]
	bl FUN_02042aa4
	mov r4, r0
	ldr r0, [sp, #0x70]
	cmp r0, #0
	beq _020426D8
	mov r0, sl
	mov r1, sb
	bl FUN_020429fc
	str r7, [sp]
	str r6, [sp, #4]
	str r0, [sp, #8]
	ldr r1, [sl, #0x18]
	ldr r3, [sp, #0x58]
	add r1, r5, r1
	str r1, [sp, #0xc]
	ldr r1, [sp, #0x14]
	mov r0, sl
	mov r2, r8
	bl FUN_02043380
_020426D8:
	cmp r6, #0
	addlt sp, sp, #0x30
	movlt r0, #0
	poplt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r1, [sb]
	cmp r1, #0
	beq _0204293C
	and r0, fp, #0xff
	str r0, [sp, #0x2c]
	lsl r0, r5, #0x10
	asr r0, r0, #0x10
	str r0, [sp, #0x28]
_02042708:
	cmp r1, #0xa
	bne _02042788
	ldr r0, [sp, #0x74]
	mov r1, r7
	str r0, [sp]
	mov r0, sl
	mov r2, r8
	add r3, sb, #1
	bl FUN_02042aa4
	mov r4, r0
	ldr r0, [sp, #0x70]
	cmp r0, #0
	beq _02042778
	mov r0, sl
	add r1, sb, #1
	bl FUN_020429fc
	str r7, [sp]
	add r1, r6, r5
	str r1, [sp, #4]
	str r0, [sp, #8]
	ldr r1, [sl, #0x18]
	ldr r3, [sp, #0x58]
	add r1, r5, r1
	str r1, [sp, #0xc]
	ldr r1, [sp, #0x14]
	mov r0, sl
	mov r2, r8
	bl FUN_02043380
_02042778:
	ldr r0, [sl, #0x18]
	add r0, r5, r0
	add r6, r6, r0
	b _02042930
_02042788:
	mov r0, sl
	mov r1, sb
	bl FUN_020425c4
	mov fp, r0
	add r0, sl, #4
	mov r1, fp
	bl FUN_020182ac
	mov r1, r0
	ldr r0, _02042948 ; =0x0000FFFF
	cmp r1, r0
	ldreq r0, [sl, #4]
	ldrheq r1, [r0, #2]
	add r0, sl, #4
	bl FUN_020182f4
	mov r1, fp
	str r0, [sp, #0x18]
	ldrsb fp, [r0, #2]
	add r0, sl, #4
	bl FUN_020182ac
	ldr r1, _02042948 ; =0x0000FFFF
	ldr r2, [sl, #4]
	cmp r0, r1
	ldreq r0, [sl, #4]
	ldr r2, [r2, #8]
	add r1, r4, fp
	ldrheq r0, [r0, #2]
	cmp r1, r8
	add r1, r2, #8
	str r1, [sp, #0x20]
	ldrh r1, [r2, #2]
	mul r1, r0, r1
	str r1, [sp, #0x24]
	ble _02042880
	ldr r0, [sp, #0x74]
	mov r1, r7
	str r0, [sp]
	mov r0, sl
	mov r2, r8
	mov r3, sb
	bl FUN_02042aa4
	mov r4, r0
	ldr r0, [sp, #0x70]
	cmp r0, #0
	beq _02042874
	mov r0, sl
	mov r1, sb
	bl FUN_020429fc
	str r7, [sp]
	add r1, r6, r5
	str r1, [sp, #4]
	str r0, [sp, #8]
	ldr r1, [sl, #0x18]
	ldr r3, [sp, #0x58]
	add r1, r5, r1
	str r1, [sp, #0xc]
	ldr r1, [sp, #0x14]
	mov r0, sl
	mov r2, r8
	bl FUN_02043380
_02042874:
	ldr r0, [sl, #0x18]
	add r0, r5, r0
	add r6, r6, r0
_02042880:
	ldr r0, [sp, #0x58]
	add r1, r6, r5
	cmp r1, r0
	bgt _0204293C
	ldr r0, [sp, #0x68]
	cmp r0, #0
	ldrne r1, [sp, #0x1c]
	ldrne r0, [sp, #0x6c]
	cmpne r1, r0
	bge _020428D4
	ldr r0, [sp, #0x68]
	ldr r1, [sp, #0x28]
	strh r4, [r0]
	strh r6, [r0, #2]
	strh fp, [r0, #4]
	strh r1, [r0, #6]
	add r0, r0, #8
	str r0, [sp, #0x68]
	ldr r0, [sp, #0x1c]
	add r0, r0, #1
	str r0, [sp, #0x1c]
_020428D4:
	ldr r1, [sp, #0x20]
	ldr r0, [sp, #0x24]
	ldr r2, [sp, #0x14]
	add r1, r1, r0
	ldr r0, [sp, #0x2c]
	mov r3, r8
	str r0, [sp]
	ldr r0, [sp, #0x18]
	stmib sp, {r0, r5}
	str r4, [sp, #0xc]
	str r6, [sp, #0x10]
	mov r0, sl
	ldr ip, [r0]
	ldr ip, [ip, #0x14]
	blx ip
	ldr r1, [sl, #0x14]
	mov r0, sl
	add r1, fp, r1
	add r4, r4, r1
	mov r1, sb
	bl FUN_020425a0
	cmp r0, #2
	addeq sb, sb, #1
_02042930:
	ldrsb r1, [sb, #1]!
	cmp r1, #0
	bne _02042708
_0204293C:
	mov r0, #1
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02042948: .word 0x0000FFFF

	arm_func_start FUN_0204294c
FUN_0204294c: ; 0x0204294C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r1
	ldrsb r1, [r7]
	mov r6, #0
	mov r8, r0
	mov r5, r6
	cmp r1, #0
	beq _020429F0
	ldr sb, _020429F8 ; =0x0000FFFF
	mov r4, r6
	arm_func_end FUN_0204294c
_02042974:
	cmp r1, #0xa
	moveq r5, r4
	beq _020429E4
	mov r0, r8
	mov r1, r7
	bl FUN_020425c4
	mov r1, r0
	add r0, r8, #4
	bl FUN_020182ac
	mov r1, r0
	cmp r1, sb
	ldreq r0, [r8, #4]
	ldrheq r1, [r0, #2]
	add r0, r8, #4
	bl FUN_020182f4
	ldrsb r1, [r0, #2]
	cmp r1, #0
	cmpne r5, #0
	ldrne r0, [r8, #0x14]
	addne r5, r5, r0
	add r5, r5, r1
	cmp r5, r6
	mov r0, r8
	mov r1, r7
	movgt r6, r5
	bl FUN_020425a0
	cmp r0, #2
	addeq r7, r7, #1
_020429E4:
	ldrsb r1, [r7, #1]!
	cmp r1, #0
	bne _02042974
_020429F0:
	mov r0, r6
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020429F8: .word 0x0000FFFF

	arm_func_start FUN_020429fc
FUN_020429fc: ; 0x020429FC
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r1
	ldrsb r1, [r4]
	mov r8, #0
	mov r5, r0
	mov r7, r8
	cmp r1, #0
	beq _02042A98
	ldr r6, _02042AA0 ; =0x0000FFFF
	arm_func_end FUN_020429fc
_02042A20:
	cmp r1, #0xa
	beq _02042A98
	mov r0, r5
	mov r1, r4
	bl FUN_020425c4
	mov r1, r0
	add r0, r5, #4
	bl FUN_020182ac
	mov r1, r0
	cmp r1, r6
	ldreq r0, [r5, #4]
	ldrheq r1, [r0, #2]
	add r0, r5, #4
	bl FUN_020182f4
	ldrsb r1, [r0, #2]
	cmp r1, #0
	cmpne r7, #0
	ldrne r0, [r5, #0x14]
	addne r7, r7, r0
	add r7, r7, r1
	cmp r7, r8
	mov r0, r5
	mov r1, r4
	movgt r8, r7
	bl FUN_020425a0
	cmp r0, #2
	addeq r4, r4, #1
	ldrsb r1, [r4, #1]!
	cmp r1, #0
	bne _02042A20
_02042A98:
	mov r0, r8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02042AA0: .word 0x0000FFFF

	arm_func_start FUN_02042aa4
FUN_02042aa4: ; 0x02042AA4
	push {r3, r4, r5, lr}
	movs r5, r1
	mov r4, r2
	bmi _02042ABC
	cmp r5, r4
	ble _02042AC4
	arm_func_end FUN_02042aa4
_02042ABC:
	mov r0, #0
	pop {r3, r4, r5, pc}
_02042AC4:
	ldr r1, [sp, #0x10]
	cmp r1, #0
	moveq r0, r5
	popeq {r3, r4, r5, pc}
	mov r1, r3
	sub r4, r4, r5
	bl FUN_020429fc
	cmp r0, r4
	movgt r0, r5
	popgt {r3, r4, r5, pc}
	ldr r1, [sp, #0x10]
	cmp r1, #1
	addeq r1, r5, r4, asr #1
	subeq r0, r1, r0, asr #1
	addne r1, r5, r4
	subne r1, r1, #1
	subne r0, r1, r0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02042b0c
FUN_02042b0c: ; 0x02042B0C
	push {r4, lr}
	mov r4, r0
	bl FUN_020425c4
	mov r1, r0
	add r0, r4, #4
	bl FUN_020182ac
	ldr r2, _02042B48 ; =0x0000FFFF
	mov r1, r0
	cmp r1, r2
	ldreq r0, [r4, #4]
	ldrheq r1, [r0, #2]
	add r0, r4, #4
	bl FUN_020182f4
	ldrsb r0, [r0, #2]
	pop {r4, pc}
	.align 2, 0_02042B48: .word 0x0000FFFF
	arm_func_end FUN_02042b0c

	arm_func_start FUN_02042b4c
FUN_02042b4c: ; 0x02042B4C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov sl, r0
	ldr r0, [sl, #4]
	ldr r4, [sp, #0x3c]
	ldr r5, [r0, #8]
	ldrsb r0, [r4]
	ldrsb r6, [r4, #2]
	ldr r4, [sp, #0x40]
	mov sb, r1
	str r4, [sp, #0x40]
	ldr r4, [sp, #0x44]
	ldr r1, [sp, #0x40]
	str r4, [sp, #0x44]
	ldrb r4, [r5]
	sub fp, r6, r0
	cmp r1, #0
	sub r1, r4, fp
	str r1, [sp, #0xc]
	ldr r1, [sp, #0x44]
	mov r8, r2
	add r0, r1, r0
	str r0, [sp, #0x44]
	ldr r0, [sp, #0x48]
	mov r5, #0x80
	str r0, [sp, #0x48]
	mov r0, #0
	str r0, [sp, #0x10]
	ble _02042CE4
	ldr r0, [sp, #0x44]
	asr r1, r3, #3
	tst r0, #1
	lsl r0, r1, #5
	str r0, [sp, #4]
	movne r0, #1
	strne r0, [sp]
	ldreq r0, [sp, #0x10]
	streq r0, [sp]
	ldrb r0, [sp, #0x38]
	and r6, r0, #0xf
	arm_func_end FUN_02042b4c
_02042BEC:
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x48]
	cmp fp, #0
	add r2, r1, r0
	ldr r0, [sp, #4]
	asr r1, r2, #3
	mul r1, r0, r1
	lsl r0, r2, #0x1d
	add r0, r1, r0, lsr #27
	str r0, [sp, #8]
	ldr r7, [sp]
	mov r4, #0
	ble _02042C9C
_02042C20:
	ldr r0, [sp, #0x44]
	add r2, r4, r0
	ldr r0, [sp, #8]
	asr r1, r2, #3
	add r1, r0, r1, lsl #5
	and r0, r2, #7
	add r2, r1, r0, asr #1
	ldrb r0, [sb]
	tst r0, r5
	beq _02042C78
	add r1, r8, r2
	cmp r7, #0
	mov r0, sl
	ldrb r2, [r8, r2]
	beq _02042C68
	and r2, r2, #0xf
	orr r2, r2, r6, lsl #4
	b _02042C70
_02042C68:
	and r2, r2, #0xf0
	orr r2, r2, r6
_02042C70:
	and r2, r2, #0xff
	bl FUN_02042274
_02042C78:
	asrs r5, r5, #1
	moveq r5, #0x80
	addeq sb, sb, #1
	cmp r7, #0
	moveq r7, #1
	add r4, r4, #1
	movne r7, #0
	cmp r4, fp
	blt _02042C20
_02042C9C:
	ldr r0, [sp, #0xc]
	mov r2, #0
	cmp r0, #0
	ble _02042CCC
	mov r1, #0x80
_02042CB0:
	ldr r0, [sp, #0xc]
	asrs r5, r5, #1
	add r2, r2, #1
	moveq r5, r1
	addeq sb, sb, #1
	cmp r2, r0
	blt _02042CB0
_02042CCC:
	ldr r0, [sp, #0x10]
	add r1, r0, #1
	ldr r0, [sp, #0x40]
	str r1, [sp, #0x10]
	cmp r1, r0
	blt _02042BEC
_02042CE4:
	ldr r0, [sl, #0x14]
	add r0, fp, r0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02042cf4
FUN_02042cf4: ; 0x02042CF4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov fp, r0
	ldr r0, [fp, #4]
	ldr r4, [sp, #0x34]
	ldr r5, [r0, #8]
	ldrsb r0, [r4]
	ldrsb r6, [r4, #2]
	ldr r4, [sp, #0x38]
	ldr sb, [sp, #0x3c]
	str r4, [sp, #0x38]
	ldrb r4, [r5]
	sub r6, r6, r0
	add sb, sb, r0
	ldr r0, [sp, #0x30]
	mov sl, r1
	str r0, [sp, #0x30]
	ldr r0, [sp, #0x40]
	ldr r1, [sp, #0x38]
	str r0, [sp, #0x40]
	mov r0, #0
	str r2, [sp]
	cmp r1, #0
	sub r7, r4, r6
	mov r5, #0x80
	str r0, [sp, #8]
	ble _02042E3C
	asr r0, r3, #2
	add r0, r3, r0, lsr #29
	asr r0, r0, #3
	lsl r0, r0, #6
	str r0, [sp, #4]
	arm_func_end FUN_02042cf4
_02042D74:
	ldr r1, [sp, #8]
	ldr r0, [sp, #0x40]
	cmp r6, #0
	add r3, r1, r0
	asr r0, r3, #2
	add r0, r3, r0, lsr #29
	asr r1, r0, #3
	ldr r0, [sp, #4]
	mov r4, #0
	mul r2, r1, r0
	lsr r1, r3, #0x1f
	rsb r0, r1, r3, lsl #29
	add r0, r1, r0, ror #29
	add r8, r2, r0, lsl #3
	ble _02042DFC
_02042DB0:
	add r2, r4, sb
	asr r0, r2, #3
	add r1, r8, r0, lsl #6
	and r0, r2, #7
	add r1, r1, r0
	ldrb r0, [sl]
	tst r0, r5
	beq _02042DE4
	ldr r0, [sp]
	ldr r2, [sp, #0x30]
	add r1, r0, r1
	mov r0, fp
	bl FUN_02042274
_02042DE4:
	asrs r5, r5, #1
	add r4, r4, #1
	moveq r5, #0x80
	addeq sl, sl, #1
	cmp r4, r6
	blt _02042DB0
_02042DFC:
	cmp r7, #0
	mov r1, #0
	ble _02042E24
	mov r0, #0x80
_02042E0C:
	asrs r5, r5, #1
	add r1, r1, #1
	moveq r5, r0
	addeq sl, sl, #1
	cmp r1, r7
	blt _02042E0C
_02042E24:
	ldr r0, [sp, #8]
	add r1, r0, #1
	ldr r0, [sp, #0x38]
	str r1, [sp, #8]
	cmp r1, r0
	blt _02042D74
_02042E3C:
	ldr r0, [fp, #0x14]
	add r0, r6, r0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02042e4c
FUN_02042e4c: ; 0x02042E4C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	mov sb, r2
	ldr r2, [sp, #0x54]
	ldr r5, [sp, #0x50]
	str r2, [sp, #0x54]
	ldr r2, [sp, #0x58]
	ldr r7, [sp, #0x5c]
	str r2, [sp, #0x58]
	ldr r2, [sp, #0x60]
	movs r8, r3
	str r2, [sp, #0x60]
	ldr r2, [sp, #0x64]
	mov sl, r0
	str r2, [sp, #0x64]
	ldr r2, [sp, #0x68]
	mov fp, #0
	str r1, [sp, #0x14]
	str r2, [sp, #0x68]
	addeq sp, sp, #0x2c
	moveq r0, fp
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r4, [sl, #4]
	mov r2, r7
	ldr r4, [r4, #8]
	ldrb r6, [r4, #1]
	ldr r4, [sp, #0x54]
	str r4, [sp]
	bl FUN_02042aa4
	cmp sb, #0
	mov r4, r0
	addlt sp, sp, #0x2c
	movlt r0, fp
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r1, [r8]
	cmp r1, #0
	beq _0204308C
	and r0, r5, #0xff
	str r0, [sp, #0x28]
	lsl r0, r6, #0x10
	asr r0, r0, #0x10
	str r0, [sp, #0x24]
	arm_func_end FUN_02042e4c
_02042EF4:
	cmp r1, #0xa
	bne _02042F2C
	ldr r0, [sp, #0x54]
	ldr r1, [sp, #0x14]
	str r0, [sp]
	mov r0, sl
	mov r2, r7
	add r3, r8, #1
	bl FUN_02042aa4
	mov r4, r0
	ldr r0, [sl, #0x18]
	add r0, r6, r0
	add sb, sb, r0
	b _02043080
_02042F2C:
	mov r0, sl
	mov r1, r8
	bl FUN_020425c4
	mov r5, r0
	add r0, sl, #4
	mov r1, r5
	bl FUN_020182ac
	mov r1, r0
	ldr r0, _020430AC ; =0x0000FFFF
	cmp r1, r0
	ldreq r0, [sl, #4]
	ldrheq r1, [r0, #2]
	add r0, sl, #4
	bl FUN_020182f4
	mov r1, r5
	str r0, [sp, #0x18]
	ldrsb r5, [r0, #2]
	add r0, sl, #4
	bl FUN_020182ac
	ldr r1, _020430AC ; =0x0000FFFF
	ldr r2, [sl, #4]
	cmp r0, r1
	ldreq r0, [sl, #4]
	ldr r2, [r2, #8]
	add r1, r4, r5
	ldrheq r0, [r0, #2]
	cmp r1, r7
	add r1, r2, #8
	str r1, [sp, #0x1c]
	ldrh r1, [r2, #2]
	mul r1, r0, r1
	str r1, [sp, #0x20]
	ble _02042FDC
	ldr r0, [sp, #0x54]
	ldr r1, [sp, #0x14]
	str r0, [sp]
	mov r0, sl
	mov r2, r7
	mov r3, r8
	bl FUN_02042aa4
	mov r4, r0
	ldr r0, [sl, #0x18]
	add r0, r6, r0
	add sb, sb, r0
_02042FDC:
	ldr r0, [sp, #0x60]
	add r1, sb, r6
	cmp r1, r0
	bgt _0204308C
	ldr r0, [sp, #0x64]
	cmp r0, #0
	ldrne r0, [sp, #0x68]
	cmpne fp, r0
	bge _02043024
	ldr r0, [sp, #0x64]
	ldr r1, [sp, #0x24]
	strh r4, [r0]
	strh sb, [r0, #2]
	strh r5, [r0, #4]
	strh r1, [r0, #6]
	add r0, r0, #8
	str r0, [sp, #0x64]
	add fp, fp, #1
_02043024:
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x20]
	ldr r2, [sp, #0x58]
	add r1, r1, r0
	ldr r0, [sp, #0x28]
	mov r3, r7
	str r0, [sp]
	ldr r0, [sp, #0x18]
	stmib sp, {r0, r6}
	str r4, [sp, #0xc]
	str sb, [sp, #0x10]
	mov r0, sl
	ldr ip, [r0]
	ldr ip, [ip, #0x10]
	blx ip
	ldr r1, [sl, #0x14]
	mov r0, sl
	add r1, r5, r1
	add r4, r4, r1
	mov r1, r8
	bl FUN_020425a0
	cmp r0, #2
	addeq r8, r8, #1
_02043080:
	ldrsb r1, [r8, #1]!
	cmp r1, #0
	bne _02042EF4
_0204308C:
	ldr r0, [sp, #0x60]
	mul r1, r7, r0
	ldr r0, [sp, #0x58]
	asr r1, r1, #1
	bl FUN_020026d0
	mov r0, #1
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020430AC: .word 0x0000FFFF

	arm_func_start FUN_020430b0
FUN_020430b0: ; 0x020430B0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	mov sb, r2
	ldr r2, [sp, #0x54]
	ldr r5, [sp, #0x50]
	str r2, [sp, #0x54]
	ldr r2, [sp, #0x58]
	ldr r7, [sp, #0x5c]
	str r2, [sp, #0x58]
	ldr r2, [sp, #0x60]
	movs r8, r3
	str r2, [sp, #0x60]
	ldr r2, [sp, #0x64]
	mov sl, r0
	str r2, [sp, #0x64]
	ldr r2, [sp, #0x68]
	mov fp, #0
	str r1, [sp, #0x14]
	str r2, [sp, #0x68]
	addeq sp, sp, #0x2c
	moveq r0, fp
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r4, [sl, #4]
	mov r2, r7
	ldr r4, [r4, #8]
	ldrb r6, [r4, #1]
	ldr r4, [sp, #0x54]
	str r4, [sp]
	bl FUN_02042aa4
	cmp sb, #0
	mov r4, r0
	addlt sp, sp, #0x2c
	movlt r0, fp
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r1, [r8]
	cmp r1, #0
	beq _020432F0
	and r0, r5, #0xff
	str r0, [sp, #0x28]
	lsl r0, r6, #0x10
	asr r0, r0, #0x10
	str r0, [sp, #0x24]
	arm_func_end FUN_020430b0
_02043158:
	cmp r1, #0xa
	bne _02043190
	ldr r0, [sp, #0x54]
	ldr r1, [sp, #0x14]
	str r0, [sp]
	mov r0, sl
	mov r2, r7
	add r3, r8, #1
	bl FUN_02042aa4
	mov r4, r0
	ldr r0, [sl, #0x18]
	add r0, r6, r0
	add sb, sb, r0
	b _020432E4
_02043190:
	mov r0, sl
	mov r1, r8
	bl FUN_020425c4
	mov r5, r0
	add r0, sl, #4
	mov r1, r5
	bl FUN_020182ac
	mov r1, r0
	ldr r0, _0204330C ; =0x0000FFFF
	cmp r1, r0
	ldreq r0, [sl, #4]
	ldrheq r1, [r0, #2]
	add r0, sl, #4
	bl FUN_020182f4
	mov r1, r5
	str r0, [sp, #0x18]
	ldrsb r5, [r0, #2]
	add r0, sl, #4
	bl FUN_020182ac
	ldr r1, _0204330C ; =0x0000FFFF
	ldr r2, [sl, #4]
	cmp r0, r1
	ldreq r0, [sl, #4]
	ldr r2, [r2, #8]
	add r1, r4, r5
	ldrheq r0, [r0, #2]
	cmp r1, r7
	add r1, r2, #8
	str r1, [sp, #0x1c]
	ldrh r1, [r2, #2]
	mul r1, r0, r1
	str r1, [sp, #0x20]
	ble _02043240
	ldr r0, [sp, #0x54]
	ldr r1, [sp, #0x14]
	str r0, [sp]
	mov r0, sl
	mov r2, r7
	mov r3, r8
	bl FUN_02042aa4
	mov r4, r0
	ldr r0, [sl, #0x18]
	add r0, r6, r0
	add sb, sb, r0
_02043240:
	ldr r0, [sp, #0x60]
	add r1, sb, r6
	cmp r1, r0
	bgt _020432F0
	ldr r0, [sp, #0x64]
	cmp r0, #0
	ldrne r0, [sp, #0x68]
	cmpne fp, r0
	bge _02043288
	ldr r0, [sp, #0x64]
	ldr r1, [sp, #0x24]
	strh r4, [r0]
	strh sb, [r0, #2]
	strh r5, [r0, #4]
	strh r1, [r0, #6]
	add r0, r0, #8
	str r0, [sp, #0x64]
	add fp, fp, #1
_02043288:
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x20]
	ldr r2, [sp, #0x58]
	add r1, r1, r0
	ldr r0, [sp, #0x28]
	mov r3, r7
	str r0, [sp]
	ldr r0, [sp, #0x18]
	stmib sp, {r0, r6}
	str r4, [sp, #0xc]
	str sb, [sp, #0x10]
	mov r0, sl
	ldr ip, [r0]
	ldr ip, [ip, #0x18]
	blx ip
	ldr r1, [sl, #0x14]
	mov r0, sl
	add r1, r5, r1
	add r4, r4, r1
	mov r1, r8
	bl FUN_020425a0
	cmp r0, #2
	addeq r8, r8, #1
_020432E4:
	ldrsb r1, [r8, #1]!
	cmp r1, #0
	bne _02043158
_020432F0:
	ldr r0, [sp, #0x60]
	mul r1, r7, r0
	ldr r0, [sp, #0x58]
	bl FUN_020026d0
	mov r0, #1
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204330C: .word 0x0000FFFF

	arm_func_start rwriteat14n18
rwriteat14n18: ; 0x02043310
	str r1, [r0, #0x14]
	str r2, [r0, #0x18]
	bx lr
	arm_func_end rwriteat14n18

	arm_func_start wraper_rwiteat14n18
wraper_rwiteat14n18: ; 0x0204331C
	mov r1, #1
	ldr ip, _0204332C ; =rwriteat14n18
	mov r2, r1
	bx ip
	.align 2, 0_0204332C: .word rwriteat14n18
	arm_func_end wraper_rwiteat14n18

	arm_func_start FUN_02043330
FUN_02043330: ; 0x02043330
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r3
	cmp r1, #0
	mov r0, #0
	popeq {r3, r4, r5, pc}
	cmp r2, #0x10
	movhs r2, #0
	strb r0, [r5, #0x1f]
	str r1, [r5, #0xc]
	str r2, [r5, #0x10]
	cmp r4, #0
	add r0, r5, #4
	beq _02043370
	bl FUN_02018264
	b _02043374
	arm_func_end FUN_02043330
_02043370:
	bl FUN_02018288
_02043374:
	strb r4, [r5, #0x20]
	mov r0, #1
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02043380
FUN_02043380: ; 0x02043380
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov r6, r0
	movs r0, r1
	ldr r0, [sp, #0x38]
	str r1, [sp]
	str r0, [sp, #0x38]
	ldr r0, [sp, #0x3c]
	str r2, [sp, #4]
	str r0, [sp, #0x3c]
	ldr r0, [sp, #0x40]
	str r0, [sp, #0x40]
	ldr r0, [sp, #0x44]
	str r0, [sp, #0x44]
	addeq sp, sp, #0x14
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x38]
	cmp r0, #0
	addlt sp, sp, #0x14
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r1, r0
	mov r0, r2
	cmp r1, r0
	addge sp, sp, #0x14
	popge {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	addlt sp, sp, #0x14
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r0, r3
	addge sp, sp, #0x14
	popge {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x40]
	mov fp, #0
	add r1, r1, r0
	mov r0, r2
	cmp r1, r0
	ldrgt r0, [sp, #0x38]
	movgt r1, r2
	subgt r0, r1, r0
	strgt r0, [sp, #0x40]
	ldr r1, [sp, #0x3c]
	ldr r0, [sp, #0x44]
	add r0, r1, r0
	cmp r0, r3
	movgt r0, r1
	subgt r0, r3, r0
	strgt r0, [sp, #0x44]
	ldr r0, [sp, #0x44]
	cmp r0, #0
	addle sp, sp, #0x14
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x38]
	ldr r1, [sp, #0x38]
	tst r0, #1
	movne r0, #1
	strne r0, [sp, #8]
	ldr r0, [sp, #0x38]
	streq fp, [sp, #8]
	and r0, r0, #7
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x40]
	add r1, r1, r0
	ldr r0, [sp, #0x10]
	and r5, r1, #3
	rsb r0, r0, #8
	str r0, [sp, #0xc]
	arm_func_end FUN_02043380
_0204348C:
	ldr r0, [sp, #0x3c]
	ldr r1, [sp, #4]
	add r2, r0, fp
	ldr r0, [sp, #0x38]
	ldr sl, [sp, #8]
	mla r0, r1, r2, r0
	add r1, r0, r0, lsr #31
	ldr r0, [sp]
	add r4, r0, r1, asr #1
	ldr r0, [sp, #0x10]
	tst r0, #7
	mov sb, r0
	beq _0204350C
	mov r7, #0
	mov r8, #1
_020434C8:
	cmp sl, #0
	mov r0, r6
	mov r1, r4
	beq _020434E4
	ldrb r2, [r4], #1
	and r2, r2, #0xf
	b _020434F0
_020434E4:
	ldrb r2, [r4]
	and r2, r2, #0xf0
	and r2, r2, #0xff
_020434F0:
	bl FUN_02042274
	cmp sl, #0
	moveq sl, r8
	add sb, sb, #1
	movne sl, r7
	tst sb, #7
	bne _020434C8
_0204350C:
	ldr r0, [sp, #0x10]
	ldr r1, [sp, #0x40]
	cmp r0, #0
	ldrne r0, [sp, #0xc]
	mov sl, #0
	subne r1, r1, r0
	bic r0, r1, #7
	add r7, r0, r0, lsr #31
	asr r2, r7, #1
	mov r0, sl
	mov r1, r4
	bl FUN_0200787c
	add r4, r4, r7, asr #1
	cmp r5, #0
	mov sb, sl
	ble _02043598
	mov r7, sl
	mov r8, #1
_02043554:
	cmp sl, #0
	mov r0, r6
	mov r1, r4
	beq _02043570
	ldrb r2, [r4], #1
	and r2, r2, #0xf
	b _0204357C
_02043570:
	ldrb r2, [r4]
	and r2, r2, #0xf0
	and r2, r2, #0xff
_0204357C:
	bl FUN_02042274
	cmp sl, #0
	moveq sl, r8
	add sb, sb, #1
	movne sl, r7
	cmp sb, r5
	blt _02043554
_02043598:
	ldr r0, [sp, #0x44]
	add fp, fp, #1
	cmp fp, r0
	blt _0204348C
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_020435b0
FUN_020435b0: ; 0x020435B0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	mov sl, r0
	movs r0, r1
	ldr r0, [sp, #0x40]
	str r1, [sp]
	str r0, [sp, #0x40]
	ldr r0, [sp, #0x44]
	str r0, [sp, #0x44]
	addeq sp, sp, #0x18
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x40]
	cmp r0, #0
	addlt sp, sp, #0x18
	poplt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r0, r2
	addge sp, sp, #0x18
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x44]
	cmp r0, #0
	addlt sp, sp, #0x18
	poplt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r0, r3
	addge sp, sp, #0x18
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #0x48]
	ldr r0, [sp, #0x40]
	ldr r4, [sp, #0x4c]
	add r8, r0, r1
	ldr r0, [sp, #0x44]
	str r8, [sp, #0x10]
	add r0, r0, r4
	str r0, [sp, #0xc]
	cmp r8, r2
	ldr r0, [sp, #0xc]
	strgt r2, [sp, #0x10]
	cmp r0, r3
	strgt r3, [sp, #0xc]
	ldr r1, [sp, #0x44]
	ldr r0, [sp, #0xc]
	cmp r1, r0
	addge sp, sp, #0x18
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	asr r0, r2, #2
	add r0, r2, r0, lsr #29
	asr r0, r0, #3
	str r0, [sp, #8]
	arm_func_end FUN_020435b0
_0204366C:
	ldr r5, [sp, #0x40]
	ldr r0, [sp, #0x10]
	mov r1, r5
	cmp r1, r0
	bge _02043760
	ldr r0, [sp, #0x44]
	mov fp, #0
	asr r1, r0, #2
	add r0, r0, r1, lsr #29
	asr r1, r0, #3
	ldr r0, [sp, #8]
	mov r4, #1
	mul r3, r1, r0
	ldr r0, [sp, #0x44]
	lsr r2, r0, #0x1f
	rsb r1, r2, r0, lsl #29
	ldr r0, [sp]
	add r0, r0, r3, lsl #5
	str r0, [sp, #4]
	add r0, r2, r1, ror #29
	str r0, [sp, #0x14]
_020436C0:
	asr r0, r5, #2
	add r0, r5, r0, lsr #29
	asr r1, r0, #3
	ldr r0, [sp, #4]
	tst r5, #1
	add r1, r0, r1, lsl #5
	ldr r0, [sp, #0x14]
	movne sb, #1
	add r2, r1, r0, lsl #2
	lsr r1, r5, #0x1f
	rsb r0, r1, r5, lsl #29
	add r0, r1, r0, ror #29
	add r0, r0, r0, lsr #31
	add r7, r2, r0, asr #1
	moveq sb, #0
	and r6, r5, #7
	b _02043744
_02043704:
	cmp sb, #0
	mov r0, sl
	mov r1, r7
	beq _02043720
	ldrb r2, [r7], #1
	and r2, r2, #0xf
	b _0204372C
_02043720:
	ldrb r2, [r7]
	and r2, r2, #0xf0
	and r2, r2, #0xff
_0204372C:
	bl FUN_02042274
	cmp sb, #0
	moveq sb, r4
	add r5, r5, #1
	add r6, r6, #1
	movne sb, fp
_02043744:
	tst r6, #8
	bne _02043754
	cmp r5, r8
	blt _02043704
_02043754:
	ldr r0, [sp, #0x10]
	cmp r5, r0
	blt _020436C0
_02043760:
	ldr r0, [sp, #0x44]
	add r1, r0, #1
	ldr r0, [sp, #0xc]
	str r1, [sp, #0x44]
	cmp r1, r0
	blt _0204366C
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02043780
FUN_02043780: ; 0x02043780
	strb r1, [r0, #0x1c]
	strb r2, [r0, #0x1d]
	bx lr
	arm_func_end FUN_02043780

	arm_func_start FUN_0204378c
FUN_0204378c: ; 0x0204378C
	push {r4, r5, r6, r7, r8, lr}
	ldrsb r4, [r2]
	mov r3, #0
	mov ip, r3
	mov lr, r3
	cmp r4, #0
	beq _020437E4
	ldr r4, _020438E0 ; =0x0000889F
	ldr r5, _020438E4 ; =0x00008140
	mov r7, #1
	arm_func_end FUN_0204378c
_020437B4:
	ldrsb r8, [r2]
	ldrb r6, [r2, #1]
	add r2, r2, #2
	lsl r8, r8, #0x18
	orr r6, r6, r8, lsr #16
	cmp r6, r5
	beq _020437E4
	cmp r6, r4
	ldrsb r6, [r2]
	movhs ip, r7
	cmp r6, #0
	bne _020437B4
_020437E4:
	ldrsb r7, [r2]
	cmp r7, #0
	beq _0204381C
	ldr r4, _020438E0 ; =0x0000889F
	mov r5, #1
_020437F8:
	ldrb r6, [r2, #1]
	lsl r7, r7, #0x18
	add r2, r2, #2
	orr r6, r6, r7, lsr #16
	ldrsb r7, [r2]
	cmp r6, r4
	movhs lr, r5
	cmp r7, #0
	bne _020437F8
_0204381C:
	ldrsb r2, [r1]
	cmp r2, #0
	beq _02043888
	ldr r2, _020438E4 ; =0x00008140
	mvn r6, #0x7e
	mov r5, #0x40
_02043834:
	ldrb r8, [r1]
	ldrb r7, [r1, #1]
	add r1, r1, #2
	orr r4, r7, r8, lsl #8
	cmp r4, r2
	strbeq r8, [r0, r3]
	addeq r2, r3, #1
	strbeq r7, [r0, r2]
	addeq r3, r3, #2
	beq _02043888
	cmp ip, #0
	strbne r8, [r0, r3]
	addne r4, r3, #1
	strbne r7, [r0, r4]
	strbeq r6, [r0, r3]
	addeq r4, r3, #1
	strbeq r5, [r0, r4]
	ldrsb r4, [r1]
	add r3, r3, #2
	cmp r4, #0
	bne _02043834
_02043888:
	ldrsb r4, [r1]
	cmp r4, #0
	beq _020438D4
	mvn r5, #0x7e
	mov r2, #0x40
_0204389C:
	ldrb ip, [r1, #1]
	and r4, r4, #0xff
	cmp lr, #0
	strbne r4, [r0, r3]
	addne r4, r3, #1
	strbne ip, [r0, r4]
	add r1, r1, #2
	strbeq r5, [r0, r3]
	addeq r4, r3, #1
	strbeq r2, [r0, r4]
	ldrsb r4, [r1]
	add r3, r3, #2
	cmp r4, #0
	bne _0204389C
_020438D4:
	mov r1, #0
	strb r1, [r0, r3]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020438E0: .word 0x0000889F
_020438E4: .word 0x00008140

	arm_func_start FUN_020438e8
FUN_020438e8: ; 0x020438E8
	ldr r2, _02043910 ; =0x0209002C
	mov r1, #0
	str r2, [r0]
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	str r1, [r0, #0x10]
	str r1, [r0, #0x14]
	str r1, [r0, #0x18]
	bx lr
	.align 2, 0_02043910: .word 0x0209002C
	arm_func_end FUN_020438e8

	arm_func_start FUN_02043914
FUN_02043914: ; 0x02043914
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #4]
	cmp r1, #0
	beq _02043938
	ldr r0, _02043954 ; =0x0209A250
	bl FUN_0202e1c0
	mov r0, #0
	str r0, [r4, #4]
	arm_func_end FUN_02043914
_02043938:
	mov r0, #0
	str r0, [r4, #8]
	str r0, [r4, #0xc]
	str r0, [r4, #0x10]
	str r0, [r4, #0x14]
	str r0, [r4, #0x18]
	pop {r4, pc}
	.align 2, 0_02043954: .word 0x0209A250

	arm_func_start LAB_02043958
LAB_02043958: ; 0x02043958
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r5, r2
	mul r1, r6, r5
	mov r7, r0
	ldr r0, [r7, #0x10]
	lsl r4, r1, #2
	cmp r0, r1, lsl #2
	bge _020439B0
	ldr r1, [r7, #4]
	cmp r1, #0
	beq _02043990
	ldr r0, _020439C0 ; =0x0209A250
	bl FUN_0202e1c0
	arm_func_end LAB_02043958
_02043990:
	ldr r0, _020439C0 ; =0x0209A250
	mov r1, r4
	bl FUN_0202de44
	str r0, [r7, #4]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	str r4, [r7, #0x10]
_020439B0:
	str r6, [r7, #8]
	str r5, [r7, #0xc]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020439C0: .word 0x0209A250

	arm_func_start LAB_020439c4
LAB_020439c4: ; 0x020439C4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r0, [sl, #0xc]
	mov r7, #0
	mov sb, r1
	str r2, [sp]
	mov fp, r7
	cmp r0, #0
	ldr r8, [sl, #4]
	ble _02043A70
	arm_func_end LAB_020439c4
_020439EC:
	ldr r2, [sl, #8]
	mov r6, #0
	mov r5, r6
	cmp r2, #0
	ble _02043A58
	smull r1, r0, r7, r7
	adds r1, r1, #0x800
	adc r0, r0, #0
	lsr r4, r1, #0xc
	cmp r2, #0
	orr r4, r4, r0, lsl #20
	ble _02043A58
_02043A1C:
	smull r1, r0, r6, r6
	adds r1, r1, #0x800
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	asr r0, r1, #4
	add r0, r0, r4, asr #4
	bl FUN_020095ac
	lsl r0, r0, #2
	str r0, [r8], #4
	ldr r0, [sl, #8]
	add r5, r5, #1
	cmp r5, r0
	add r6, r6, sb
	blt _02043A1C
_02043A58:
	ldr r0, [sl, #0xc]
	add fp, fp, #1
	cmp fp, r0
	ldr r0, [sp]
	add r7, r7, r0
	blt _020439EC
_02043A70:
	ldr r0, [sp]
	str sb, [sl, #0x14]
	str r0, [sl, #0x18]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02043a80
FUN_02043a80: ; 0x02043A80
	push {r4, lr}
	ldr r1, _02043AA4 ; =0x0209002C
	mov r4, r0
	str r1, [r4]
	bl FUN_02043914
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02043AA4: .word 0x0209002C
	arm_func_end FUN_02043a80
_02043AA8:
	.byte 0x10, 0x40, 0x2D, 0xE9, 0x10, 0x10, 0x9F, 0xE5
	.byte 0x00, 0x40, 0xA0, 0xE1, 0x00, 0x10, 0x84, 0xE5, 0x95, 0xFF, 0xFF, 0xEB, 0x04, 0x00, 0xA0, 0xE1
	.byte 0x10, 0x80, 0xBD, 0xE8, 0x2C, 0x00, 0x09, 0x02

	arm_func_start FUN_02043ac8
FUN_02043ac8: ; 0x02043AC8
	push {r4, lr}
	mov r4, r0
	bl FUN_020438e8
	ldr r1, _02043AE4 ; =0x02090054
	mov r0, r4
	str r1, [r4]
	pop {r4, pc}
	.align 2, 0_02043AE4: .word 0x02090054
	arm_func_end FUN_02043ac8
_02043AE8:
	.byte 0x10, 0x40, 0x2D, 0xE9, 0x10, 0x10, 0x9F, 0xE5
	.byte 0x00, 0x40, 0xA0, 0xE1, 0x00, 0x10, 0x84, 0xE5, 0x85, 0xFF, 0xFF, 0xEB, 0x04, 0x00, 0xA0, 0xE1
	.byte 0x10, 0x80, 0xBD, 0xE8, 0x2C, 0x00, 0x09, 0x02, 0x10, 0x40, 0x2D, 0xE9, 0x18, 0x10, 0x9F, 0xE5
	.byte 0x00, 0x40, 0xA0, 0xE1, 0x00, 0x10, 0x84, 0xE5, 0x7D, 0xFF, 0xFF, 0xEB, 0x04, 0x00, 0xA0, 0xE1
	.byte 0x54, 0x69, 0xFF, 0xEB, 0x04, 0x00, 0xA0, 0xE1, 0x10, 0x80, 0xBD, 0xE8, 0x2C, 0x00, 0x09, 0x02

	arm_func_start FUN_02043b30
FUN_02043b30: ; 0x02043B30
	mov r1, #0x20
	ldr ip, _02043B40 ; =LAB_02043958
	mov r2, r1
	bx ip
	.align 2, 0_02043B40: .word LAB_02043958
	arm_func_end FUN_02043b30

	arm_func_start FUN_02043b44
FUN_02043b44: ; 0x02043B44
	mov r1, #0x1000
	ldr ip, _02043B54 ; =LAB_020439c4
	mov r2, r1
	bx ip
	.align 2, 0_02043B54: .word LAB_020439c4
	arm_func_end FUN_02043b44

	arm_func_start FUN_02043b58
FUN_02043b58: ; 0x02043B58
	ldr r3, [r0, #4]
	add r0, r1, r2, lsl #5
	ldr r0, [r3, r0, lsl #2]
	bx lr
	arm_func_end FUN_02043b58

	arm_func_start FUN_02043b68
FUN_02043b68: ; 0x02043B68
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r5, r2
	asr r1, r6, #0xc
	orr r3, r1, r5, asr #12
	asr r2, r5, #0xc
	bics r3, r3, #0x1f
	mov r4, #0
	beq _02043BA4
	arm_func_end FUN_02043b68
_02043B8C:
	asr r1, r1, #1
	asr r2, r2, #1
	orr r3, r1, r2
	add r4, r4, #1
	bics r3, r3, #0x1f
	bne _02043B8C
_02043BA4:
	bl FUN_02043b58
	cmp r6, r5, lsl #1
	mov r2, #1
	ble _02043BCC
	add r1, r4, #0xc
	lsl r1, r2, r1
	sub r1, r1, #1
	and r1, r6, r1
	add r0, r1, r0, lsl r4
	pop {r4, r5, r6, pc}
_02043BCC:
	add r1, r4, #0xc
	lsl r1, r2, r1
	cmp r5, r6, lsl #1
	subgt r1, r1, #1
	andgt r1, r5, r1
	addgt r0, r1, r0, lsl r4
	popgt {r4, r5, r6, pc}
	sub r3, r1, #1
	and r2, r6, r3
	and r1, r5, r3
	add r1, r2, r1
	asr r2, r1, #1
	orr r1, r6, r5
	add r2, r2, r0, lsl r4
	and r0, r3, r1
	add r0, r2, r0, asr #2
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02043c10
FUN_02043c10: ; 0x02043C10
	ldr ip, _02043C28 ; =FUN_02043b68
	cmp r2, #0
	rsblt r2, r2, #0
	cmp r1, #0
	rsblt r1, r1, #0
	bx ip
	.align 2, 0_02043C28: .word FUN_02043b68
	arm_func_end FUN_02043c10

	arm_func_start LAB_02043c2c
LAB_02043c2c: ; 0x02043C2C
	push {r3, lr}
	ldr ip, [r1, #4]
	ldr r3, [r2, #4]
	subs ip, ip, r3
	ldr r3, [r1]
	ldr r1, [r2]
	rsbmi ip, ip, #0
	subs r1, r3, r1
	rsbmi r1, r1, #0
	mov r2, ip
	bl FUN_02043b68
	pop {r3, pc}
	arm_func_end LAB_02043c2c

	arm_func_start FUN_02043c5c
FUN_02043c5c: ; 0x02043C5C
	ldr ip, _02043C64 ; =LAB_02043c68
	bx ip
	.align 2, 0_02043C64: .word LAB_02043c68
	arm_func_end FUN_02043c5c

	arm_func_start LAB_02043c68
LAB_02043c68: ; 0x02043C68
	bx lr
	arm_func_end LAB_02043c68

	arm_func_start LAB_02043c6c
LAB_02043c6c: ; 0x02043C6C
	ldr r1, [r1, #0x84]
	ldr r2, [r2, #0x84]
	ldr ip, _02043C7C ; =LAB_02043c2c
	bx ip
	.align 2, 0_02043C7C: .word LAB_02043c2c
	arm_func_end LAB_02043c6c

	arm_func_start FUN_02043c80
FUN_02043c80: ; 0x02043C80
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x14
	mov r5, #1
	mov r6, r0
	mov r0, r5
	bl FUN_02086750
	mov r4, #0
	ldr r1, _02043D6C ; =0x020900CC
	mov r0, r4
	bl FUN_02085e4c
	ldr r7, _02043D70 ; =0x0209A200
	ldr r1, _02043D74 ; =0x020900DC
	str r0, [r7]
	mov r0, r4
	bl FUN_02085e4c
	str r0, [r7, #0x24]
	add r0, r6, #0x324
	add r0, r0, #0x1c00
	bl FUN_02030260
	add r0, r6, #0x6000
	str r5, [r0, #0x20c]
	str r4, [r0, #0x210]
	str r4, [r0, #0x200]
	str r4, [r0, #0x224]
	add r0, r6, #0x1a8
	add r0, r0, #0x6000
	mov r1, r4
	mov r2, #0x40
	bl MemWrite
	add r1, r6, #0x6000
	strb r4, [r1, #0x1e9]
	add r0, r6, #0x6100
	ldrsb r2, [r0, #0xe9]
	add r0, r6, #0x90
	strb r2, [r1, #0x1e8]
	bl FUN_02047af8
	add r0, r6, #0x90
	mov r1, r4
	mov r2, #2
	mov r3, r4
	str r4, [sp]
	bl FUN_02047f8c
	add r0, r6, #0x22c
	add r0, r0, #0x6000
	ldr r3, _02043D78 ; =0x0209A250
	str r0, [sp, #0x10]
	ldr r0, [r3]
	ldr r1, _02043D7C ; =0x020900EC
	cmp r0, #0
	addeq sp, sp, #0x14
	popeq {r4, r5, r6, r7, pc}
	str r4, [sp]
	mov r2, #4
	stmib sp, {r2, r4}
	add r2, sp, #0x10
	str r5, [sp, #0xc]
	bl FUN_0202eff0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_02043D6C: .word 0x020900CC
_02043D70: .word 0x0209A200
_02043D74: .word 0x020900DC
_02043D78: .word 0x0209A250
_02043D7C: .word 0x020900EC
	arm_func_end FUN_02043c80

	arm_func_start FUN_02043d80
FUN_02043d80: ; 0x02043D80
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x10
	cmp r1, #1
	mov r8, r0
	mov r5, #0
	mov r4, #1
	addeq sp, sp, #0x10
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r2, r8, #0x6000
	ldr r1, [r2, #0x20c]
	cmp r1, #0
	addeq sp, sp, #0x10
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r1, r8, #0x6100
	ldrsb r3, [r1, #0xe8]
	add r1, r8, #0x1a8
	ldr r2, [r2, #0x224]
	add r1, r1, #0x6000
	cmp r2, #8
	add r6, r1, r3, lsl #3
	arm_func_end FUN_02043d80

	arm_func_start switchD
switchD: ; 0x02043DD8
	addls pc, pc, r2, lsl #2
	b _020442A4
	arm_func_end switchD
_02043DE0: ; jump table
	b LAB_02043e04 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02043DE4
	b _02043F30
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02043DE8
	b _02043F90
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02043DEC
	b _02044000
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02043DF0
	b _020440F0
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02043DF4
	b _020441A0
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02043DF8
	b _0204422C
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02043DFC
	b _02044270
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02043E00
	b _02044298
	arm_func_end caseD_8
LAB_02043e04:
	mov r1, r5
	mov r2, r5
	bl FUN_02044470
	ldrsh r0, [r6, #6]
	cmp r0, #0
	bne _02043F0C
	bl FUN_02029d54
	cmp r0, #3
	addne sp, sp, #0x10
	movne r0, r5
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r8, #0x6000
	ldr r2, [r0, #0x1ec]
	cmp r2, #0
	addeq sp, sp, #0x10
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r1, r8, #0x324
	mov r0, r8
	add r1, r1, #0x1c00
	bl FUN_02044470
	add r0, r8, #0x6000
	ldr r0, [r0, #0x1ec]
	bl FUN_020BDBE8
	cmp r0, #9
	bne _02043EEC
	ldr r0, _020442B0 ; =0x0208C384
	ldr r4, _020442B4 ; =0x0209A160
	add r3, sp, #4
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	ldr r1, [r4]
	ldrsh r0, [r4, #4]
	str r1, [sp, #4]
	bl FUN_02021288
	ldrsh r5, [r4, #6]
	mov r4, r0
	mov r0, #0x100
	mov r1, r5
	bl FUN_0201f9bc
	mul r0, r5, r0
	cmp r0, r4
	bne _02043EEC
	ldr r1, [sp, #4]
	ldr r0, [sp, #8]
	cmp r1, r0
	beq _02043ECC
	ldr r0, [sp, #0xc]
	cmp r1, r0
	bne _02043EEC
_02043ECC:
	mov r4, #0
	b _02043EE4
_02043ED4:
	mov r1, r4
	add r0, r8, #0x90
	bl FUN_02048aac
	add r4, r4, #1
_02043EE4:
	cmp r4, #3
	blt _02043ED4
_02043EEC:
	add r0, r8, #0x324
	add r0, r0, #0x1c00
	bl FUN_02030638
	add r0, r8, #0x90
	bl FUN_02048748
	add sp, sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02043F0C:
	add r0, r8, #0x6000
	ldr r1, [r0, #0x210]
	cmp r1, #0
	addeq sp, sp, #0x10
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r1, [r0, #0x224]
	add r1, r1, #1
	str r1, [r0, #0x224]
_02043F30:
	mov r7, #0
	str r7, [sp]
	ldrsb r2, [r6, #5]
	add r1, r8, #0x324
	ldr r3, [r6]
	add r0, r8, #0x90
	add r1, r1, #0x1c00
	bl FUN_020486f0
	ldrsb r0, [r6, #5]
	add r1, r8, #0x6000
	mov r2, #1
	cmp r0, #0
	moveq r7, #1
	add r0, r8, #0x324
	cmp r7, #0
	ldr r1, [r1, #0x1ec]
	movne r2, #0
	add r0, r0, #0x1c00
	bl FUN_020304e4
	add r0, r8, #0x6000
	ldr r1, [r0, #0x224]
	str r4, [r0, #0x220]
	add r1, r1, #1
	str r1, [r0, #0x224]
_02043F90:
	add r0, r8, #0x6000
	ldr r1, [r0, #0x214]
	cmp r1, #0
	beq _02043FCC
	bl FUN_020F17F0
	cmp r0, #0
	addne r0, r8, #0x6000
	strne r5, [r0, #0x220]
	add r0, r8, #0x6000
	ldr r0, [r0, #0x1ec]
	bl FUN_02041d9c
	add r0, r8, #0x6000
	mov r1, #6
_02043FC4:
	str r1, [r0, #0x224]
	b _020442A4
_02043FCC:
	ldr r0, [r0, #0x21c]
	cmp r0, #0
	bne _020442A4
	add r0, r8, #0x324
	add r0, r0, #0x1c00
	bl FUN_02030638
	add r0, r8, #0x90
	bl FUN_02048748
	cmp r0, #0
	addeq r0, r8, #0x6000
	ldreq r1, [r0, #0x224]
	addeq r1, r1, #1
	b _02044290
_02044000:
	add r0, r8, #0x90
	bl FUN_02048a04
	add r0, r8, #0x324
	add r0, r0, #0x1c00
	bl FUN_02030584
	add r0, r8, #0x6100
	ldrsb r0, [r0, #0xe8]
	ldr r1, _020442B8 ; =0x00001014
	ldrsh r7, [r6, #6]
	add r0, r8, r0, lsl #3
	add r0, r0, #0x6100
	ldrsh r0, [r0, #0xae]
	cmp r0, r1
	bne _02044040
	ldr r0, _020442BC ; =0x020A9C40
	bl FUN_0204556c
_02044040:
	ldrsb r1, [r6, #5]
	cmp r1, #0xb
	blt _02044054
	add r0, r8, #0x90
	bl FUN_02048288
_02044054:
	add r0, r8, #0x6100
	ldrsb r1, [r0, #0xe8]
	add r0, r8, #0x1a8
	add r0, r0, #0x6000
	add r0, r0, r1, lsl #3
	mov r1, #0
	mov r2, #8
	bl MemWrite
	add r1, r8, #0x6100
	ldrsb r2, [r1, #0xe8]
	add r0, r8, #0x6000
	str r4, [r0, #0x224]
	add r2, r2, #1
	strb r2, [r0, #0x1e8]
	ldrsb r2, [r1, #0xe8]
	and r2, r2, #7
	strb r2, [r0, #0x1e8]
	ldrsb r1, [r1, #0xe8]
	add r1, r8, r1, lsl #3
	add r1, r1, #0x6100
	ldrsh r1, [r1, #0xae]
	cmp r1, #0
	bne _020442A4
	ldr r0, [r0, #0x214]
	cmp r0, #0
	bne _020440E4
	ldr r1, _020442C0 ; =0x00001002
	cmp r7, r1
	addne r0, r1, #0x1f
	cmpne r7, r0
	addne r0, r1, #0x20
	cmpne r7, r0
	addne r0, r1, #0x21
	cmpne r7, r0
	addeq r0, r8, #0x6000
	streq r5, [r0, #0x220]
_020440E4:
	add r0, r8, #0x6000
	mov r1, #4
	b _02043FC4
_020440F0:
	mov r6, r5
	mov r1, r6
	add r0, r8, #0x90
	bl FUN_020484a4
	cmp r0, #0
	beq _020442A4
	add r0, r8, #0x6000
	ldr r0, [r0, #0x200]
	cmp r0, #0
	add r0, r8, #0x90
	bne _02044138
	bl FUN_02048508
	add r1, r8, #0x6000
	str r0, [r1, #0x200]
	cmp r0, #0
	bne _020442A4
	str r6, [r1, #0x210]
	b _02044190
_02044138:
	sub r1, r6, #1
	bl FUN_02048178
	cmp r0, #0
	beq _020442A4
	add r7, r8, #0x6000
	str r6, [r7, #0x210]
	ldr sb, _020442C4 ; =0x00001023
	b _02044180
_02044158:
	ldr r0, [r7, #0x200]
	tst r0, r4, lsl r6
	beq _0204417C
	mov r0, r8
	mov r1, r6
	mov r2, sb
	bl FUN_02044d00
	cmp r0, #0
	strne r4, [r7, #0x210]
_0204417C:
	add r6, r6, #1
_02044180:
	cmp r6, #0x10
	blt _02044158
	add r0, r8, #0x6000
	str r5, [r0, #0x200]
_02044190:
	add r0, r8, #0x6000
	ldr r1, [r0, #0x224]
	add r1, r1, #1
	str r1, [r0, #0x224]
_020441A0:
	add r0, r8, #0x6000
	ldr r1, [r0, #0x210]
	cmp r1, #0
	bne _02044224
	ldr r1, [r0, #0x1fc]
	cmp r1, #0
	beq _020441FC
	cmp r1, #1
	bne _020441DC
	bl FUN_020F068C
	cmp r0, #0
	moveq r0, #0x12
	movne r0, #0x15
	mov r1, #1
	bl FUN_020F2604
_020441DC:
	mov r0, #6
	bl FUN_020F153C
	add r0, r8, #0x6000
	ldr r0, [r0, #0x1fc]
	bl FUN_02029d44
	add r0, r8, #0x6000
	str r5, [r0, #0x1fc]
	b _02044208
_020441FC:
	ldr r1, [r0, #0x1ec]
	mov r0, r8
	bl FUN_02044e50
_02044208:
	add r0, r8, #0x6000
	str r5, [r0, #0x214]
	str r5, [r0, #0x218]
	str r5, [r0, #0x21c]
	str r4, [r0, #0x220]
	str r5, [r0, #0x224]
	b _020442A4
_02044224:
	str r4, [r0, #0x224]
	b _020442A4
_0204422C:
	bl FUN_020F1670
	cmp r0, #0
	bne _020442A4
	add r0, r8, #0x6000
	ldr r0, [r0, #0x218]
	cmp r0, #0
	add r0, r8, #0x90
	beq _02044254
	bl FUN_02048a68
	b _02044258
_02044254:
	bl FUN_02048a4c
_02044258:
	ldr r0, _020442C8 ; =0x0209A8A0
	bl FUN_0202e958
	add r0, r8, #0x6000
	ldr r1, [r0, #0x224]
	add r1, r1, #1
	str r1, [r0, #0x224]
_02044270:
	add r0, r8, #0x324
	add r0, r0, #0x1c00
	bl FUN_02030638
	add r0, r8, #0x90
	bl FUN_02048748
	cmp r0, #0
	addeq r0, r8, #0x6000
	moveq r1, #3
_02044290:
	streq r1, [r0, #0x224]
	b _020442A4
_02044298:
	add r0, r8, #0x324
	add r0, r0, #0x1c00
	bl FUN_02030638
_020442A4:
	mov r0, #0
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020442B0: .word 0x0208C384
_020442B4: .word 0x0209A160
_020442B8: .word 0x00001014
_020442BC: .word 0x020A9C40
_020442C0: .word 0x00001002
_020442C4: .word 0x00001023
_020442C8: .word 0x0209A8A0

	arm_func_start FUN_020442cc
FUN_020442cc: ; 0x020442CC
	mov r0, #0
	bx lr
	arm_func_end FUN_020442cc

	arm_func_start FUN_020442d4
FUN_020442d4: ; 0x020442D4
	bx lr
	arm_func_end FUN_020442d4

	arm_func_start FUN_020442d8
FUN_020442d8: ; 0x020442D8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r7, r0
	mov r5, r2
	ands r4, r6, #1
	beq _020442F4
	bl FUN_02045124
	arm_func_end FUN_020442d8
_020442F4:
	cmp r4, #0
	beq _02044304
	mov r0, r7
	bl FUN_020452e0
_02044304:
	add r0, r7, #0x324
	mov r1, r6
	mov r2, r5
	add r0, r0, #0x1c00
	bl FUN_02030010
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02044320
FUN_02044320: ; 0x02044320
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x6000
	mov r2, #0
	mov r4, r1
	str r2, [r0, #0x208]
	ldrh r1, [r4, #4]
	cmp r1, #1
	bne _02044364
	ldr r1, [r0, #0x204]
	cmp r1, #0
	moveq r1, #1
	streq r1, [r0, #0x208]
	add r0, r5, #0x6000
	mov r1, #1
	str r1, [r0, #0x204]
	b _02044368
	arm_func_end FUN_02044320
_02044364:
	str r2, [r0, #0x204]
_02044368:
	add r0, r5, #0x6000
	ldr r0, [r0, #0x208]
	cmp r0, #0
	beq _02044388
	mov r0, r5
	bl FUN_02045124
	mov r0, r5
	bl FUN_020452e0
_02044388:
	add r0, r5, #0x324
	mov r1, r4
	add r0, r0, #0x1c00
	bl FUN_0203003c
	mov r0, #0
	pop {r3, r4, r5, pc}
_020443A0:
	.byte 0x1E, 0xFF, 0x2F, 0xE1

	arm_func_start FUN_020443a4
FUN_020443a4: ; 0x020443A4
	add r0, r0, #0x6000
	str r1, [r0, #0x1fc]
	bx lr
	arm_func_end FUN_020443a4

	arm_func_start FUN_020443b0
FUN_020443b0: ; 0x020443B0
	ldr ip, _020443BC ; =FUN_02047bc4
	add r0, r0, #0x90
	bx ip
	.align 2, 0_020443BC: .word FUN_02047bc4
	arm_func_end FUN_020443b0

	arm_func_start FUN_020443c0
FUN_020443c0: ; 0x020443C0
	add r0, r0, #0x324
	ldr ip, _020443D0 ; =LAB_020303b0
	add r0, r0, #0x1c00
	bx ip
	.align 2, 0_020443D0: .word LAB_020303b0
	arm_func_end FUN_020443c0

	arm_func_start FUN_020443d4
FUN_020443d4: ; 0x020443D4
	add r0, r0, #0x324
	ldr ip, _020443E4 ; =FUN_020303bc
	add r0, r0, #0x1c00
	bx ip
	.align 2, 0_020443E4: .word FUN_020303bc
	arm_func_end FUN_020443d4

	arm_func_start FUN_020443e8
FUN_020443e8: ; 0x020443E8
	push {r3, r4, r5, lr}
	mov r4, r0
	add r0, r4, #0x6000
	ldr r1, [r0, #0x210]
	cmp r1, #0
	ldrne r0, [r0, #0x224]
	cmpne r0, #0
	beq _0204441C
	add r0, r4, #0x90
	bl FUN_02048a04
	add r0, r4, #0x324
	add r0, r0, #0x1c00
	bl FUN_02030584
	arm_func_end FUN_020443e8
_0204441C:
	add r0, r4, #0x1a8
	mov r5, #0
	add r3, r4, #0x6000
	mov r1, r5
	add r0, r0, #0x6000
	mov r2, #0x40
	str r5, [r3, #0x214]
	str r5, [r3, #0x218]
	str r5, [r3, #0x21c]
	str r5, [r3, #0x210]
	str r5, [r3, #0x224]
	bl MemWrite
	add r1, r4, #0x6000
	strb r5, [r1, #0x1e9]
	add r0, r4, #0x6100
	ldrsb r0, [r0, #0xe9]
	strb r0, [r1, #0x1e8]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02044464
FUN_02044464: ; 0x02044464
	add r0, r0, #0x6000
	str r1, [r0, #0x1ec]
	bx lr
	arm_func_end FUN_02044464

	arm_func_start FUN_02044470
FUN_02044470: ; 0x02044470
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	add r0, r5, #0x90
	bl FUN_02048aa0
	mov r1, r4
	add r0, r5, #0x90
	bl FUN_02048a94
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02044470

	arm_func_start FUN_02044494
FUN_02044494: ; 0x02044494
	add r0, r0, #0x324
	add r0, r0, #0x1c00
	bx lr
	arm_func_end FUN_02044494

	arm_func_start FUN_020444a0
FUN_020444a0: ; 0x020444A0
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x234
	add r0, r0, #0x6000
	mov r2, #0x80
	mov r4, r1
	bl _memcpy
	add r0, r5, #0x324
	add r0, r0, #0x1c00
	add r1, r4, #0x80
	bl FUN_02030438
	add r0, r5, #0x90
	add r1, r4, #0x280
	bl FUN_02047c7c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020444a0

	arm_func_start FUN_020444dc
FUN_020444dc: ; 0x020444DC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r1, r5, #0x234
	mov r0, r4
	add r1, r1, #0x6000
	mov r2, #0x80
	bl _memcpy
	add r0, r5, #0x324
	add r0, r0, #0x1c00
	add r1, r4, #0x80
	bl FUN_02030480
	add r0, r5, #0x90
	add r1, r4, #0x280
	bl FUN_02047cdc
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020444dc

	arm_func_start FUN_0204451c
FUN_0204451c: ; 0x0204451C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	add r0, r7, #0x6000
	ldr r5, [r0, #0x1ec]
	mov r6, r1
	cmp r5, #0
	beq _02044554
	mov r0, r5
	bl FUN_02041fec
	mov r4, r0
	mov r0, r5
	bl FUN_0204201c
	cmp r4, r0
	popne {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0204451c
_02044554:
	add r0, r7, #0x6000
	str r6, [r0, #0x20c]
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02044560
FUN_02044560: ; 0x02044560
	add r0, r0, #0x6100
	ldrsb r1, [r0, #0xe9]
	ldrsb r0, [r0, #0xe8]
	add r1, r1, #8
	sub r0, r1, r0
	and r0, r0, #7
	bx lr
	arm_func_end FUN_02044560

	arm_func_start FUN_0204457c
FUN_0204457c: ; 0x0204457C
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	add r0, r8, #0x6000
	ldr r0, [r0, #0x210]
	cmp r0, #0
	beq _020445B8
	add r0, r8, #0x6100
	ldrsb r1, [r0, #0xe8]
	add r0, r8, #0x1a8
	add r0, r0, #0x6000
	add r2, r0, r1, lsl #3
	ldrsb r5, [r2, #4]
	ldrsb r6, [r2, #5]
	ldrsh r7, [r2, #6]
	ldr r4, [r0, r1, lsl #3]
	arm_func_end FUN_0204457c
_020445B8:
	add r0, r8, #0x1a8
	add r0, r0, #0x6000
	mov r1, #0
	mov r2, #0x40
	bl MemWrite
	add r0, r8, #0x6000
	ldr r0, [r0, #0x210]
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	add r0, r8, #0x6100
	ldrsb r1, [r0, #0xe8]
	add r0, r8, #0x1a8
	add r0, r0, #0x6000
	str r4, [r0, r1, lsl #3]!
	strb r5, [r0, #4]
	strb r6, [r0, #5]
	strh r7, [r0, #6]
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02044600
FUN_02044600: ; 0x02044600
	add r0, r0, #0x6000
	ldr r1, [r0, #0x210]
	cmp r1, #0
	ldrne r0, [r0, #0x224]
	cmpne r0, #0
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02044600

	arm_func_start FUN_02044620
FUN_02044620: ; 0x02044620
	add r0, r0, #0x6000
	str r1, [r0, #0x21c]
	bx lr
	arm_func_end FUN_02044620

	arm_func_start FUN_0204462c
FUN_0204462c: ; 0x0204462C
	add r1, r0, #0x6100
	ldrsb r1, [r1, #0xe8]
	add r0, r0, r1, lsl #3
	add r0, r0, #0x6100
	ldrsh r0, [r0, #0xae]
	bx lr
	arm_func_end FUN_0204462c

	arm_func_start FUN_02044644
FUN_02044644: ; 0x02044644
	push {r3, lr}
	add r0, r0, #0x90
	bl FUN_02047e20
	ldr r0, [r0]
	pop {r3, pc}
	arm_func_end FUN_02044644

	arm_func_start FUN_02044658
FUN_02044658: ; 0x02044658
	ldr ip, _02044664 ; =FUN_02047e20
	add r0, r0, #0x90
	bx ip
	.align 2, 0_02044664: .word FUN_02047e20
	arm_func_end FUN_02044658

	arm_func_start FUN_02044668
FUN_02044668: ; 0x02044668
	push {r4, lr}
	add r0, r0, #0x90
	mov r4, r2
	bl FUN_02047e20
	str r4, [r0]
	pop {r4, pc}
	arm_func_end FUN_02044668

	arm_func_start FUN_02044680
FUN_02044680: ; 0x02044680
	ldr ip, _0204468C ; =FUN_02048278
	add r0, r0, #0x90
	bx ip
	.align 2, 0_0204468C: .word FUN_02048278
	arm_func_end FUN_02044680

	arm_func_start FUN_02044690
FUN_02044690: ; 0x02044690
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r8, r0
	add r0, r8, #0x6000
	ldr r0, [r0, #0x210]
	mov r7, r1
	mov r6, r2
	mov r5, r3
	cmp r0, #0
	ldr r4, [sp, #0x20]
	bne _020446F8
	cmp r4, #0
	bne _020446CC
	add r0, r8, #0x90
	bl FUN_02048288
	arm_func_end FUN_02044690
_020446CC:
	cmp r5, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r1, r7
	mov r2, r6
	mov r3, r5
	add r0, r8, #0x90
	str r4, [sp]
	bl FUN_02047f8c
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
_020446F8:
	cmp r4, #0
	bne _02044708
	add r0, r8, #0x90
	bl FUN_0204836c
_02044708:
	cmp r5, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r1, r7
	mov r2, r6
	mov r3, r5
	add r0, r8, #0x90
	str r4, [sp]
	bl FUN_02048068
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02044734
FUN_02044734: ; 0x02044734
	push {r3, lr}
	mov r3, r1
	mov ip, #0
	mov r1, #2
	mov r2, #1
	str ip, [sp]
	bl FUN_02044690
	pop {r3, pc}
	arm_func_end FUN_02044734

	arm_func_start FUN_02044754
FUN_02044754: ; 0x02044754
	push {r3, lr}
	add r3, r0, #0x6000
	ldr r3, [r3, #0x210]
	cmp r3, #0
	beq _02044770
	cmp r2, #0
	beq _0204477C
	arm_func_end FUN_02044754
_02044770:
	add r0, r0, #0x90
	bl FUN_02048288
	pop {r3, pc}
_0204477C:
	add r0, r0, #0x90
	bl FUN_0204836c
	pop {r3, pc}

	arm_func_start FUN_02044788
FUN_02044788: ; 0x02044788
	ldr ip, _02044794 ; =FUN_0204847c
	add r0, r0, #0x90
	bx ip
	.align 2, 0_02044794: .word FUN_0204847c
	arm_func_end FUN_02044788

	arm_func_start FUN_02044798
FUN_02044798: ; 0x02044798
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x80
	mov r4, #0x80
	mov sb, r0
	mov r5, #0
	mov r8, r1
	add r0, sp, #0
	mov r1, r5
	mov r2, r4
	ldr r7, [sp, #0xa0]
	bl MemWrite
	ldr r0, _02044C4C ; =0x00010006
	cmp r8, r0
	bgt _020448A8
	bge _02044B20
	sub r1, r0, #4
	cmp r8, r1
	bgt _02044878
	sub r0, r0, #4
	cmp r8, r0
	bge _02044B00
	cmp r8, #0x19
	bgt _02044868
	cmp r8, #0
	arm_func_end FUN_02044798

	arm_func_start switchD
switchD: ; 0x020447F8
	addge pc, pc, r8, lsl #2
	b _02044B50
	arm_func_end switchD
_02044800: ; jump table
	b _02044B50 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02044804
	b _0204491C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02044808
	b _02044A80
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0204480C
	b _02044924
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02044810
	b _0204499C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02044814
	b _0204492C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02044818
	b _0204493C
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0204481C
	b _02044944
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02044820
	b _02044A70
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02044824
	b _02044A78
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x02044828
	b _02044934
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0204482C
	b _02044914
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x02044830
	b _02044A88
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x02044834
	b _02044A90
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x02044838
	b _02044A98
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0204483C
	b _02044AA8
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x02044840
	b _02044AA0
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x02044844
	b _02044AB0
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x02044848
	b _02044AB8
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0204484C
	b _02044AC0
	arm_func_end caseD_13

	arm_func_start caseD_14
caseD_14: ; 0x02044850
	b _02044AC8
	arm_func_end caseD_14

	arm_func_start caseD_15
caseD_15: ; 0x02044854
	b _02044AD0
	arm_func_end caseD_15

	arm_func_start caseD_16
caseD_16: ; 0x02044858
	b _02044AD8
	arm_func_end caseD_16

	arm_func_start caseD_17
caseD_17: ; 0x0204485C
	b _02044AE0
	arm_func_end caseD_17

	arm_func_start caseD_18
caseD_18: ; 0x02044860
	b _02044AE8
	arm_func_end caseD_18

	arm_func_start caseD_19
caseD_19: ; 0x02044864
	b _02044AF0
	arm_func_end caseD_19
_02044868:
	ldr r0, _02044C50 ; =0x00010001
	cmp r8, r0
	beq _02044AF8
	b _02044B50
_02044878:
	sub r1, r0, #2
	cmp r8, r1
	bgt _02044898
	bge _02044B10
	sub r0, r0, #3
	cmp r8, r0
	beq _02044B08
	b _02044B50
_02044898:
	sub r0, r0, #1
	cmp r8, r0
	beq _02044B18
	b _02044B50
_020448A8:
	add r1, r0, #3
	cmp r8, r1
	bgt _020448E4
	bge _02044B30
	add r1, r0, #1
	cmp r8, r1
	bgt _020448D4
	add r0, r0, #1
	cmp r8, r0
	beq _02044B28
	b _02044B50
_020448D4:
	add r0, r0, #2
	cmp r8, r0
	beq _02044A68
	b _02044B50
_020448E4:
	add r1, r0, #5
	cmp r8, r1
	bgt _02044904
	bge _02044B40
	add r0, r0, #4
	cmp r8, r0
	beq _02044B38
	b _02044B50
_02044904:
	add r0, r0, #6
	cmp r8, r0
	beq _02044B48
	b _02044B50
_02044914:
	ldr r6, _02044C54 ; =0x00001013
	b _02044B5C
_0204491C:
	ldr r6, _02044C58 ; =0x00001022
	b _02044B5C
_02044924:
	ldr r6, _02044C5C ; =0x00001003
	b _02044B5C
_0204492C:
	ldr r6, _02044C60 ; =0x00001004
	b _02044B5C
_02044934:
	ldr r6, _02044C64 ; =0x00001026
	b _02044B5C
_0204493C:
	ldr r6, _02044C68 ; =0x0000100B
	b _02044B5C
_02044944:
	ldr r0, _02044C6C ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _02044968
	bl FUN_021434F8
	cmp r0, #0
	addne sp, sp, #0x80
	movne r0, r5
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
_02044968:
	ldr r0, _02044C6C ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_021375D4
	ldrsb r0, [r0, #0xc]
	bl FUN_020EFA80
	cmp r0, #0
	beq _02044994
	bl FUN_0206d6b0
	cmp r0, #0
	ldrne r6, _02044C70 ; =0x0000100C
	bne _02044B5C
_02044994:
	ldr r6, _02044C74 ; =0x0000100D
	b _02044B5C
_0204499C:
	ldr r0, _02044C78 ; =0x020A0640
	ldrb r0, [r0, #0x8f]
	cmp r0, #2
	movls r0, #1
	bls _02044A1C
	cmp r0, #3
	blo _020449C4
	cmp r0, #5
	movls r0, #2
	bls _02044A1C
_020449C4:
	ldr r0, _02044C78 ; =0x020A0640
	ldrb r0, [r0, #0x8f]
	cmp r0, #6
	blo _020449E0
	cmp r0, #8
	movls r0, #3
	bls _02044A1C
_020449E0:
	ldr r0, _02044C78 ; =0x020A0640
	ldrb r0, [r0, #0x8f]
	cmp r0, #9
	blo _020449FC
	cmp r0, #0xb
	movls r0, #4
	bls _02044A1C
_020449FC:
	ldr r0, _02044C78 ; =0x020A0640
	ldrb r0, [r0, #0x8f]
	cmp r0, #0xc
	blo _02044A18
	cmp r0, #0xe
	movls r0, #5
	bls _02044A1C
_02044A18:
	mvn r0, #0
_02044A1C:
	cmp r0, #5

	arm_func_start switchD
switchD: ; 0x02044A20
	addls pc, pc, r0, lsl #2
	arm_func_end switchD

	arm_func_start LAB_02044a24
LAB_02044a24: ; 0x02044A24
	b _02044B5C
	arm_func_end LAB_02044a24
_02044A28: ; jump table
	b _02044B5C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02044A2C
	b _02044A40
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02044A30
	b _02044A48
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02044A34
	b _02044A50
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02044A38
	b _02044A58
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02044A3C
	b _02044A60
	arm_func_end caseD_5
_02044A40:
	ldr r6, _02044C7C ; =0x00001005
	b _02044B5C
_02044A48:
	ldr r6, _02044C80 ; =0x00001006
	b _02044B5C
_02044A50:
	ldr r6, _02044C84 ; =0x00001007
	b _02044B5C
_02044A58:
	ldr r6, _02044C88 ; =0x00001008
	b _02044B5C
_02044A60:
	ldr r6, _02044C8C ; =0x00001029
	b _02044B5C
_02044A68:
	ldr r6, _02044C90 ; =0x0000101C
	b _02044B5C
_02044A70:
	ldr r6, _02044C94 ; =0x0000101A
	b _02044B5C
_02044A78:
	ldr r6, _02044C98 ; =0x0000101B
	b _02044B5C
_02044A80:
	ldr r6, _02044C9C ; =0x00001021
	b _02044B5C
_02044A88:
	ldr r6, _02044CA0 ; =0x00001015
	b _02044B5C
_02044A90:
	ldr r6, _02044CA4 ; =0x00001014
	b _02044B5C
_02044A98:
	ldr r6, _02044CA8 ; =0x00001016
	b _02044B5C
_02044AA0:
	ldr r6, _02044CAC ; =0x0000101D
	b _02044B5C
_02044AA8:
	ldr r6, _02044CB0 ; =0x00001017
	b _02044B5C
_02044AB0:
	ldr r6, _02044CB4 ; =0x00001024
	b _02044B5C
_02044AB8:
	ldr r6, _02044CB8 ; =0x00001027
	b _02044B5C
_02044AC0:
	ldr r6, _02044CBC ; =0x00001025
	b _02044B5C
_02044AC8:
	ldr r6, _02044CC0 ; =0x00001028
	b _02044B5C
_02044AD0:
	ldr r6, _02044CC4 ; =0x0000102A
	b _02044B5C
_02044AD8:
	ldr r6, _02044CC8 ; =0x0000102B
	b _02044B5C
_02044AE0:
	ldr r6, _02044CCC ; =0x0000102C
	b _02044B5C
_02044AE8:
	ldr r6, _02044CD0 ; =0x0000102D
	b _02044B5C
_02044AF0:
	add r6, r4, #0xfb0
	b _02044B5C
_02044AF8:
	ldr r6, _02044CD4 ; =0x0000100E
	b _02044B5C
_02044B00:
	ldr r6, _02044CD8 ; =0x0000100F
	b _02044B5C
_02044B08:
	add r6, r4, #0xf90
	b _02044B5C
_02044B10:
	ldr r6, _02044CDC ; =0x00001011
	b _02044B5C
_02044B18:
	ldr r6, _02044CE0 ; =0x00001012
	b _02044B5C
_02044B20:
	ldr r6, _02044CE4 ; =0x00001019
	b _02044B5C
_02044B28:
	ldr r6, _02044CE8 ; =0x00001018
	b _02044B5C
_02044B30:
	ldr r6, _02044CEC ; =0x0000101E
	b _02044B5C
_02044B38:
	ldr r6, _02044CF0 ; =0x0000101F
	b _02044B5C
_02044B40:
	ldr r6, _02044CF4 ; =0x0000102E
	b _02044B5C
_02044B48:
	ldr r6, _02044CF8 ; =0x0000102F
	b _02044B5C
_02044B50:
	add sp, sp, #0x80
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02044B5C:
	mov r4, #0
	mov r5, #0xf
	and sl, r8, #0x10000
	b _02044B90
_02044B6C:
	mov r0, sb
	mov r1, r5
	mov r2, r6
	bl FUN_02044d00
	adds r4, r4, r0
	beq _02044B8C
	cmp sl, #0
	bne _02044B98
_02044B8C:
	sub r5, r5, #1
_02044B90:
	cmp r5, #0
	bge _02044B6C
_02044B98:
	cmp r4, #0
	bne _02044BF4
	ldr r0, _02044C9C ; =0x00001021
	cmp r6, r0
	beq _02044BB8
	add r0, r0, #1
	cmp r6, r0
	bne _02044BF4
_02044BB8:
	ldr r6, _02044CFC ; =0x00001002
	mov r5, #0xf
	and r8, r8, #0x10000
	b _02044BEC
_02044BC8:
	mov r0, sb
	mov r1, r5
	mov r2, r6
	bl FUN_02044d00
	adds r4, r4, r0
	beq _02044BE8
	cmp r8, #0
	bne _02044BF4
_02044BE8:
	sub r5, r5, #1
_02044BEC:
	cmp r5, #0
	bge _02044BC8
_02044BF4:
	cmp r4, #0
	cmpne r7, #0
	beq _02044C40
	add r1, sb, #0x6000
	mov r0, r7
	str r7, [r1, #0x1ec]
	bl FUN_02041fec
	add r1, sb, #0x6000
	str r0, [r1, #0x1f0]
	mov r0, r7
	bl FUN_02042054
	add r1, sb, #0x6000
	mov r3, #0
	mov r2, #1
	str r0, [r1, #0x1f4]
	str r3, [r1, #0x214]
	str r3, [r1, #0x218]
	str r3, [r1, #0x21c]
	str r2, [r1, #0x210]
_02044C40:
	mov r0, r4
	add sp, sp, #0x80
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02044C4C: .word 0x00010006
_02044C50: .word 0x00010001
_02044C54: .word 0x00001013
_02044C58: .word 0x00001022
_02044C5C: .word 0x00001003
_02044C60: .word 0x00001004
_02044C64: .word 0x00001026
_02044C68: .word 0x0000100B
_02044C6C: .word 0x02099EF0
_02044C70: .word 0x0000100C
_02044C74: .word 0x0000100D
_02044C78: .word 0x020A0640
_02044C7C: .word 0x00001005
_02044C80: .word 0x00001006
_02044C84: .word 0x00001007
_02044C88: .word 0x00001008
_02044C8C: .word 0x00001029
_02044C90: .word 0x0000101C
_02044C94: .word 0x0000101A
_02044C98: .word 0x0000101B
_02044C9C: .word 0x00001021
_02044CA0: .word 0x00001015
_02044CA4: .word 0x00001014
_02044CA8: .word 0x00001016
_02044CAC: .word 0x0000101D
_02044CB0: .word 0x00001017
_02044CB4: .word 0x00001024
_02044CB8: .word 0x00001027
_02044CBC: .word 0x00001025
_02044CC0: .word 0x00001028
_02044CC4: .word 0x0000102A
_02044CC8: .word 0x0000102B
_02044CCC: .word 0x0000102C
_02044CD0: .word 0x0000102D
_02044CD4: .word 0x0000100E
_02044CD8: .word 0x0000100F
_02044CDC: .word 0x00001011
_02044CE0: .word 0x00001012
_02044CE4: .word 0x00001019
_02044CE8: .word 0x00001018
_02044CEC: .word 0x0000101E
_02044CF0: .word 0x0000101F
_02044CF4: .word 0x0000102E
_02044CF8: .word 0x0000102F
_02044CFC: .word 0x00001002

	arm_func_start FUN_02044d00
FUN_02044d00: ; 0x02044D00
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sb, r1
	mov sl, r0
	mov r8, r2
	lsl r0, sb, #0x18
	mov r1, #0
	lsl r2, r8, #0x10
	add r3, sl, #0xe9
	asr r6, r0, #0x18
	add r0, sl, #0x6000
	mov r7, r1
	asr fp, r2, #0x10
	add r5, r3, #0x6100
	add r4, sl, #0x6100
	str r0, [sp, #4]
	arm_func_end FUN_02044d00
_02044D40:
	ldrsb r0, [r4, #0xe9]
	add r0, sl, r0, lsl #3
	add r0, r0, #0x6100
	ldrsh r0, [r0, #0xae]
	cmp r0, #0
	addne sp, sp, #8
	movne r0, r7
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov ip, #0
	mov r2, sb
	mov r3, r8
	add r0, sl, #0x90
	str ip, [sp]
	bl FUN_02048674
	movs r1, r0
	beq _02044DD4
	ldrsb r0, [r4, #0xe9]
	add r7, r7, #1
	add r0, sl, r0, lsl #3
	add r0, r0, #0x6000
	strb r6, [r0, #0x1ad]
	ldrsb r0, [r4, #0xe9]
	add r0, sl, r0, lsl #3
	add r0, r0, #0x6100
	strh fp, [r0, #0xae]
	ldrsb r0, [r4, #0xe9]
	add r0, sl, r0, lsl #3
	add r0, r0, #0x6000
	str r1, [r0, #0x1a8]
	ldrsb r0, [r5]
	add r0, r0, #1
	strb r0, [r5]
	ldrsb r0, [r4, #0xe9]
	and r2, r0, #7
	ldr r0, [sp, #4]
	strb r2, [r0, #0x1e9]
	b _02044D40
_02044DD4:
	mov r0, r7
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02044de0
FUN_02044de0: ; 0x02044DE0
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x6100
	ldrsb r0, [r0, #0xe8]
	mov r4, r1
	add r0, r5, r0, lsl #3
	add r0, r0, #0x6100
	ldrsh r0, [r0, #0xae]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	add r1, r5, #0x6000
	mov r0, r4
	str r4, [r1, #0x1ec]
	bl FUN_02041fec
	add r1, r5, #0x6000
	str r0, [r1, #0x1f0]
	mov r0, r4
	bl FUN_02042054
	add r1, r5, #0x6000
	str r0, [r1, #0x1f4]
	mov r0, #1
	str r0, [r1, #0x210]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02044de0

	arm_func_start FUN_02044e40
FUN_02044e40: ; 0x02044E40
	add r0, r0, #0x6000
	str r1, [r0, #0x1f0]
	str r2, [r0, #0x1f4]
	bx lr
	arm_func_end FUN_02044e40

	arm_func_start FUN_02044e50
FUN_02044e50: ; 0x02044E50
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x6000
	ldr r2, [r0, #0x1f0]
	mov r4, r1
	cmp r2, #0
	blt _02044E78
	mov r0, r4
	mov r1, #0
	bl FUN_02041eac
	arm_func_end FUN_02044e50
_02044E78:
	add r0, r5, #0x6000
	ldr r2, [r0, #0x1f4]
	cmp r2, #0
	poplt {r3, r4, r5, pc}
	mov r0, r4
	mov r1, #1
	bl FUN_02041eac
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02044e98
FUN_02044e98: ; 0x02044E98
	add r0, r0, #0x6000
	str r1, [r0, #0x1f8]
	bx lr
	arm_func_end FUN_02044e98

	arm_func_start FUN_02044ea4
FUN_02044ea4: ; 0x02044EA4
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	mov r6, r1
	add r4, r6, #3
	mov r1, #0x88
	mul r1, r4, r1
	mov r7, r0
	mov r4, r2
	add r5, r1, #0x20
	ldr r0, _02044F70 ; =0x0209A250
	add r1, r5, r4
	mov r8, r3
	bl FUN_0202de44
	add r2, r5, r4
	mov r1, #0
	mov r4, r0
	bl MemWrite
	cmp r8, #0
	addne r0, r4, r5
	strne r0, [r8]
	ldr r0, _02044F74 ; =0x00030001
	add ip, r6, #3
	stmib r4, {r0, r5}
	strh ip, [r4, #0xc]
	mov r2, #0
	strh r2, [r4, #0xe]
	sub r0, r5, #0x20
	str r0, [r4, #0x10]
	mov r3, #1
	str r2, [r4, #0x14]
	strh r3, [r4, #0x20]
	mov r0, #0x88
	strh r0, [r4, #0x22]
	add r0, r3, #0x3000
	strh r0, [r4, #0x24]
	mov r1, #2
	strb r1, [r4, #0x26]
	strb r3, [r4, #0x27]
	mov r0, #0x11
	str r0, [r4, #0x28]
	str r2, [r4, #0x2c]
	rsb r0, r3, #0x2000
	str r0, [r4, #0x30]
	stm sp, {r1, r2}
	mov r0, r7
	add r1, r4, #0x20
	add r2, r3, #0x6000
	str ip, [sp, #8]
	bl FUN_02045064
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02044F70: .word 0x0209A250
_02044F74: .word 0x00030001
	arm_func_end FUN_02044ea4

	arm_func_start FUN_02044f78
FUN_02044f78: ; 0x02044F78
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	mov r6, #2
	str r6, [sp]
	mov r5, #0
	mov r4, #1
	stmib sp, {r5, r6}
	mov r3, r4
	add r2, r6, #0x6000
	mov r8, r0
	bl FUN_02045064
	ldrh ip, [r0]
	mov r2, #0x88
	add r3, r4, #0x30000
	sub r1, ip, #1
	mul r7, r1, r2
	sub r1, r0, r7
	mul r0, ip, r2
	sub r7, r1, #0x20
	str r3, [r7, #4]
	strh ip, [r7, #0xc]
	strh r5, [r7, #0xe]
	str r0, [r7, #0x10]
	str r5, [r7, #0x14]
	str r6, [sp]
	mov r0, r8
	mov r3, r4
	add r2, r4, #0x6000
	stmib sp, {r5, ip}
	bl FUN_02045064
	mov r2, r7
	mov r3, r4
	add r0, r8, #0x90
	mov r1, #0xb
	bl FUN_020481c8
	add r2, r8, #0x6100
	ldrsb r1, [r2, #0xe9]
	rsb r4, r4, #0x2000
	add r3, r7, #0x20
	add r1, r8, r1, lsl #3
	add r1, r1, #0x6000
	strb r0, [r1, #0x1ad]
	ldrsb r0, [r2, #0xe9]
	add r1, r8, #0x6000
	add r0, r8, r0, lsl #3
	add r0, r0, #0x6100
	strh r4, [r0, #0xae]
	ldrsb r0, [r2, #0xe9]
	add r0, r8, r0, lsl #3
	add r0, r0, #0x6000
	str r3, [r0, #0x1a8]
	ldrsb r0, [r2, #0xe9]
	add r0, r0, #1
	strb r0, [r1, #0x1e9]
	ldrsb r0, [r2, #0xe9]
	and r0, r0, #7
	strb r0, [r1, #0x1e9]
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02044f78

	arm_func_start FUN_02045064
FUN_02045064: ; 0x02045064
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	ldrh r4, [r1]
	mov r0, #0x88
	strh r0, [r1, #0x8a]
	add r0, r4, #1
	strh r0, [r1, #0x88]
	strh r2, [r1, #0x8c]
	ldr r0, [sp, #0x20]
	strb r0, [r1, #0x8e]
	strb r3, [r1, #0x8f]
	ldr r4, [sp, #0x20]
	cmp r4, #0
	beq _02045114
	and r0, r0, #0xff
	add r3, r0, #7
	add r2, sp, #0x20
	asr r0, r3, #2
	add r0, r3, r0, lsr #29
	bic r2, r2, #3
	asr r3, r0, #3
	cmp r4, #0
	add r2, r2, #4
	mov r0, #0
	ble _02045114
	add ip, r1, r3, lsl #2
	mov r4, #1
	arm_func_end FUN_02045064
_020450D0:
	asr r3, r0, #2
	add r3, r0, r3, lsr #29
	asr r3, r3, #3
	add r5, r1, r3, lsl #2
	lsl r3, r0, #2
	ldr lr, [r5, #0x90]
	and r3, r3, #0x1f
	orr r3, lr, r4, lsl r3
	str r3, [r5, #0x90]
	add r2, r2, #4
	add r3, ip, r0, lsl #2
	ldr lr, [r2, #-4]
	add r0, r0, #1
	str lr, [r3, #0x90]
	ldr r3, [sp, #0x20]
	cmp r0, r3
	blt _020450D0
_02045114:
	add r0, r1, #0x88
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr

	arm_func_start FUN_02045124
FUN_02045124: ; 0x02045124
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, r0
	mov r5, #1
	bl FUN_02029d54
	cmp r0, #2
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r7, _020452D8 ; =0x0209BA20
	mov r0, r7
	bl FUN_020731a4
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	add r0, sl, #0x6000
	ldr r0, [r0, #0x1ec]
	bl FUN_02041fec
	cmp r0, #0x36
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r4, _020452DC ; =0x02099EF0
	ldr r0, [r4]
	bl FUN_0213246C
	movs r8, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov sb, #0
	ldr r0, [r4]
	mov r1, sb
	bl FUN_02143114
	ldr r0, [r4]
	bl FUN_021447EC
	add r1, sl, #0x6000
	ldr r1, [r1, #0x1f4]
	mov r6, r0
	cmp r1, #0x39
	bne _02045214
	ldrsh r1, [r8]
	mov r0, r7
	bl FUN_0204a2c4
	mov r4, r0
	ldrsh r1, [r8, #2]
	mov r0, r7
	bl FUN_0204a2c4
	cmp r4, #0
	beq _020451E4
	ldrb r1, [r4]
	cmp r1, #5
	moveq sb, r5
	arm_func_end FUN_02045124
_020451E4:
	cmp r0, #0
	beq _020451F8
	ldrb r0, [r0]
	cmp r0, #6
	moveq sb, #1
_020451F8:
	ldrb r0, [r8, #0x12]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	movne sb, #0
	b _02045254
_02045214:
	cmp r1, #0x3a
	bne _02045254
	ldr r0, [r4]
	bl FUN_021375D4
	cmp r0, #0
	ldrshne r1, [r0, #8]
	cmpne r1, #0
	beq _02045254
	mov r0, r7
	bl FUN_0204a2c4
	cmp r0, #0
	beq _02045254
	ldrb r0, [r0]
	cmp r0, #7
	cmpeq r6, #1
	moveq sb, r5
_02045254:
	cmp sb, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	add r0, sl, #0x6000
	ldr r0, [r0, #0x1ec]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	bl FUN_020F1670
	cmp r0, #0
	bne _0204528C
	bl FUN_020F17F0
	cmp r0, #0
	beq _02045294
_0204528C:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02045294:
	add r0, sl, #0x6100
	ldrsb r0, [r0, #0xe8]
	add r0, sl, r0, lsl #3
	add r0, r0, #0x6100
	ldrsb r0, [r0, #0xac]
	cmp r0, #0
	bne _020452D0
	add r0, sl, #0x6000
	ldr r1, [r0, #0x210]
	cmp r1, #0
	beq _020452D0
	ldr r1, [r0, #0x224]
	cmp r1, #2
	streq r5, [r0, #0x214]
	streq r5, [r0, #0x218]
_020452D0:
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020452D8: .word 0x0209BA20
_020452DC: .word 0x02099EF0

	arm_func_start FUN_020452e0
FUN_020452e0: ; 0x020452E0
	push {r4, r5, r6, lr}
	mov r5, r0
	add r0, r5, #0x6000
	ldr r0, [r0, #0x1ec]
	mov r6, #0
	cmp r0, #0
	moveq r0, r6
	popeq {r4, r5, r6, pc}
	bl FUN_02029d54
	cmp r0, #3
	movne r0, r6
	popne {r4, r5, r6, pc}
	add r0, r5, #0x6000
	ldr r0, [r0, #0x1ec]
	bl FUN_02041fec
	cmp r0, #0x83
	movne r0, r6
	popne {r4, r5, r6, pc}
	ldr r4, _020453A8 ; =0x020AF818
	ldrb r0, [r4]
	cmp r0, #0
	moveq r0, r6
	popeq {r4, r5, r6, pc}
	bl FUN_020F1670
	cmp r0, #0
	bne _02045354
	bl FUN_020F17F0
	cmp r0, #0
	beq _0204535C
	arm_func_end FUN_020452e0
_02045354:
	mov r0, #0
	pop {r4, r5, r6, pc}
_0204535C:
	add r0, r5, #0x6100
	ldrsb r0, [r0, #0xe8]
	add r0, r5, r0, lsl #3
	add r0, r0, #0x6100
	ldrsb r0, [r0, #0xac]
	cmp r0, #0
	bne _0204539C
	add r0, r5, #0x6000
	ldr r1, [r0, #0x210]
	cmp r1, #0
	beq _0204539C
	ldr r1, [r0, #0x224]
	cmp r1, #2
	moveq r1, #1
	streq r1, [r0, #0x214]
	streq r1, [r0, #0x218]
_0204539C:
	strb r6, [r4]
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_020453A8: .word 0x020AF818

	arm_func_start FUN_020453ac
FUN_020453ac: ; 0x020453AC
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x324
	add r0, r0, #0x1c00
	bl FUN_0203000c
	add r0, r4, #0x90
	bl FUN_02047ad4
	mov r0, r4
	bl FUN_02041b00
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020453ac

	arm_func_start FUN_020453e0
FUN_020453e0: ; 0x020453E0
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, #0
	add r3, r5, #0x5000
	add r0, r5, #4
	mov r6, #0x124
	sub ip, r4, #1
	mov r1, r4
	mov r2, r6
	add r0, r0, #0x400
	str r4, [r3, #0xad0]
	str r4, [r3, #0xad4]
	strb r4, [r5, #0x528]
	str r4, [r3, #0xaf4]
	str ip, [r3, #0xaf8]
	str r4, [r3, #0xab4]
	str r4, [r3, #0xab8]
	bl MemWrite
	mov r0, r5
	mov r1, r4
	add r2, r6, #0x2e0
	bl MemWrite
	add r1, r5, #0x5000
	add r2, r5, #0x5b00
	mov r3, #1
	mov r0, r5
	strb r3, [r5, #0x4cb]
	str r4, [r1, #0xb9c]
	strh r4, [r2, #0xd6]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020453e0

	arm_func_start FUN_02045458
FUN_02045458: ; 0x02045458
	bx lr
	arm_func_end FUN_02045458

	arm_func_start FUN_0204545c
FUN_0204545c: ; 0x0204545C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, #0
	add r3, r6, #0x5000
	ldr r2, _02045534 ; =0x000008BC
	mov r1, r5
	str r5, [r3, #0xad0]
	str r5, [r3, #0xad4]
	bl MemWrite
	add r2, r6, #0x5000
	mov r4, #1
	sub r7, r4, #2
	mov r3, #0x64
	mov r0, r6
	mov r1, #0x17
	strb r5, [r6, #0x528]
	strb r4, [r6, #0x5a3]
	str r5, [r2, #0xaf4]
	str r7, [r2, #0xaf8]
	str r5, [r2, #0xab4]
	str r5, [r2, #0xab8]
	str r5, [r2, #0xabc]
	str r5, [r6, #0x594]
	strb r5, [r6, #0x599]
	str r5, [r6, #0x59c]
	str r7, [r2, #0xb7c]
	str r7, [r2, #0xb80]
	strb r5, [r2, #0xbd5]
	strb r3, [r2, #0xbd4]
	str r7, [r6, #0x5c4]
	bl FUN_020455a0
	ldr r2, _02045538 ; =0x0000E4FA
	ldr r0, _0204553C ; =0x02099F78
	ldr r1, _02045540 ; =0x02090124
	str r2, [r6, #0x54c]
	bl FUN_020418b0
	str r0, [r6, #0x550]
	strb r4, [r6, #0x4cb]
	add r0, r6, #0x5000
	strb r5, [r0, #0xb85]
	ldr r7, _02045544 ; =0x0209AC44
	mov r1, r5
	mov r0, r7
	ldr r2, _02045548 ; =0x02090138
	mov r3, r5
	bl FUN_0202bfb8
	mov r0, r7
	mov r1, r4
	ldr r2, _0204554C ; =0x0209013C
	mov r3, r5
	bl FUN_0202bfb8
	add r0, r6, #0x5000
	strb r5, [r0, #0xbd8]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02045534: .word 0x000008BC
_02045538: .word 0x0000E4FA
_0204553C: .word 0x02099F78
_02045540: .word 0x02090124
_02045544: .word 0x0209AC44
_02045548: .word 0x02090138
_0204554C: .word 0x0209013C
	arm_func_end FUN_0204545c

	arm_func_start FUN_02045550
FUN_02045550: ; 0x02045550
	add r0, r0, #0x5000
	str r1, [r0, #0xab8]
	bx lr
	arm_func_end FUN_02045550

	arm_func_start FUN_0204555c
FUN_0204555c: ; 0x0204555C
	add r0, r0, #0x5000
	str r1, [r0, #0xad0]
	str r2, [r0, #0xad4]
	bx lr
	arm_func_end FUN_0204555c

	arm_func_start FUN_0204556c
FUN_0204556c: ; 0x0204556C
	bx lr
	arm_func_end FUN_0204556c

	arm_func_start FUN_02045570
FUN_02045570: ; 0x02045570
	add r0, r0, #0x5000
	ldr r0, [r0, #0xad0]
	bx lr
	arm_func_end FUN_02045570

	arm_func_start FUN_0204557c
FUN_0204557c: ; 0x0204557C
	add r0, r0, #0x5000
	ldr r0, [r0, #0xad4]
	bx lr
	arm_func_end FUN_0204557c

	arm_func_start FUN_02045588
FUN_02045588: ; 0x02045588
	add r0, r0, #0x5000
	str r1, [r0, #0xab4]
	bx lr
	arm_func_end FUN_02045588

	arm_func_start FUN_02045594
FUN_02045594: ; 0x02045594
	add r0, r0, #0x5000
	ldr r0, [r0, #0xab4]
	bx lr
	arm_func_end FUN_02045594

	arm_func_start FUN_020455a0
FUN_020455a0: ; 0x020455A0
	add r0, r0, #0x5000
	str r1, [r0, #0xab0]
	bx lr
	arm_func_end FUN_020455a0

	arm_func_start FUN_020455ac
FUN_020455ac: ; 0x020455AC
	add r0, r0, #0x5000
	ldr r0, [r0, #0xab0]
	bx lr
	arm_func_end FUN_020455ac

	arm_func_start FUN_020455b8
FUN_020455b8: ; 0x020455B8
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	mov lr, r1
	mov r3, #0
	mov r0, #0x38
	arm_func_end FUN_020455b8
_020455CC:
	mla r1, r3, r0, r4
	add r1, r1, #0x4000
	ldr r2, [r1, #0xc3c]
	add r1, r4, r3
	add r3, r3, #1
	strb r2, [r1, #0x554]
	cmp r3, #0x40
	blt _020455CC
	mov r7, r4
	mov r6, lr
	mov r5, #0x40
_020455F8:
	ldm r7!, {r0, r1, r2, r3}
	stm r6!, {r0, r1, r2, r3}
	subs r5, r5, #1
	bne _020455F8
	ldr r2, [r7]
	add r0, r4, #4
	add r1, lr, #4
	str r2, [r6]
	add r7, r0, #0x400
	add r6, r1, #0x400
	mov r5, #0x12
_02045624:
	ldm r7!, {r0, r1, r2, r3}
	stm r6!, {r0, r1, r2, r3}
	subs r5, r5, #1
	bne _02045624
	ldr r2, [r7]
	add r0, r4, #0x128
	add r1, lr, #0x128
	str r2, [r6]
	add r5, r0, #0x400
	add r3, r1, #0x400
	mov r2, #0x10
_02045650:
	ldrb r1, [r5]
	ldrb r0, [r5, #1]
	add r5, r5, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02045650
	ldr r1, [r4, #0x548]
	add r0, r4, #0x154
	str r1, [lr, #0x548]
	ldr r2, [r4, #0x54c]
	add r1, lr, #0x154
	str r2, [lr, #0x54c]
	ldr r2, [r4, #0x550]
	add r5, r0, #0x400
	str r2, [lr, #0x550]
	add r3, r1, #0x400
	mov r2, #0x20
_02045698:
	ldrb r1, [r5]
	ldrb r0, [r5, #1]
	add r5, r5, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02045698
	ldr r0, [r4, #0x594]
	add r1, r4, #0x1a4
	str r0, [lr, #0x594]
	ldrb r0, [r4, #0x598]
	add r2, lr, #0x1a4
	add r3, r4, #0x1c8
	strb r0, [lr, #0x598]
	ldrb r6, [r4, #0x599]
	add r0, r4, #0x500
	add ip, r1, #0x400
	strb r6, [lr, #0x599]
	ldr r6, [r4, #0x59c]
	add r8, r2, #0x400
	str r6, [lr, #0x59c]
	ldrsb r1, [r0, #0xa0]
	add r5, lr, #0x1c8
	add r6, r5, #0x400
	strb r1, [lr, #0x5a0]
	ldrb r1, [r4, #0x5a1]
	add r7, r3, #0x400
	mov r5, #0xbc
	strb r1, [lr, #0x5a1]
	ldrb r1, [r4, #0x5a2]
	strb r1, [lr, #0x5a2]
	ldrsb r0, [r0, #0xa3]
	strb r0, [lr, #0x5a3]
	ldm ip!, {r0, r1, r2, r3}
	stm r8!, {r0, r1, r2, r3}
	ldm ip, {r0, r1, r2, r3}
	stm r8, {r0, r1, r2, r3}
	ldr r0, [r4, #0x5c4]
	str r0, [lr, #0x5c4]
_02045734:
	ldrh r1, [r7]
	ldrh r0, [r7, #2]
	add r7, r7, #4
	subs r5, r5, #1
	strh r0, [r6, #2]
	strh r1, [r6], #4
	bne _02045734
	add r0, r4, #0x800
	ldrsh r2, [r0, #0xb8]
	add r1, lr, #0x800
	strh r2, [r1, #0xb8]
	ldrsh r0, [r0, #0xba]
	strh r0, [r1, #0xba]
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204576c
FUN_0204576c: ; 0x0204576C
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r1
	ldrb r1, [r4, #0x5a2]
	mov r5, r0
	bl FUN_02045e08
	mov r8, r4
	mov r7, r5
	mov r6, #0x40
	arm_func_end FUN_0204576c
_0204578C:
	ldm r8!, {r0, r1, r2, r3}
	stm r7!, {r0, r1, r2, r3}
	subs r6, r6, #1
	bne _0204578C
	ldr r2, [r8]
	add r0, r4, #4
	add r1, r5, #4
	str r2, [r7]
	add r8, r0, #0x400
	add r7, r1, #0x400
	mov r6, #0x12
_020457B8:
	ldm r8!, {r0, r1, r2, r3}
	stm r7!, {r0, r1, r2, r3}
	subs r6, r6, #1
	bne _020457B8
	ldr r2, [r8]
	add r0, r4, #0x128
	add r1, r5, #0x128
	str r2, [r7]
	add r6, r0, #0x400
	add r3, r1, #0x400
	mov r2, #0x10
_020457E4:
	ldrb r1, [r6]
	ldrb r0, [r6, #1]
	add r6, r6, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _020457E4
	ldr r1, [r4, #0x548]
	add r0, r4, #0x154
	str r1, [r5, #0x548]
	ldr r2, [r4, #0x54c]
	add r1, r5, #0x154
	str r2, [r5, #0x54c]
	ldr r2, [r4, #0x550]
	add r6, r0, #0x400
	str r2, [r5, #0x550]
	add r3, r1, #0x400
	mov r2, #0x20
_0204582C:
	ldrb r1, [r6]
	ldrb r0, [r6, #1]
	add r6, r6, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _0204582C
	ldr r0, [r4, #0x594]
	add r1, r4, #0x1a4
	str r0, [r5, #0x594]
	ldrb r0, [r4, #0x598]
	add r2, r5, #0x1a4
	add r3, r4, #0x1c8
	strb r0, [r5, #0x598]
	ldrb r6, [r4, #0x599]
	add r0, r4, #0x500
	add ip, r1, #0x400
	strb r6, [r5, #0x599]
	ldr r6, [r4, #0x59c]
	add r8, r2, #0x400
	str r6, [r5, #0x59c]
	ldrsb r1, [r0, #0xa0]
	add lr, r5, #0x1c8
	add r6, lr, #0x400
	strb r1, [r5, #0x5a0]
	ldrb r1, [r4, #0x5a1]
	add r7, r3, #0x400
	mov lr, #0xbc
	strb r1, [r5, #0x5a1]
	ldrb r1, [r4, #0x5a2]
	strb r1, [r5, #0x5a2]
	ldrsb r0, [r0, #0xa3]
	strb r0, [r5, #0x5a3]
	ldm ip!, {r0, r1, r2, r3}
	stm r8!, {r0, r1, r2, r3}
	ldm ip, {r0, r1, r2, r3}
	stm r8, {r0, r1, r2, r3}
	ldr r0, [r4, #0x5c4]
	str r0, [r5, #0x5c4]
_020458C8:
	ldrh r1, [r7]
	ldrh r0, [r7, #2]
	add r7, r7, #4
	subs lr, lr, #1
	strh r0, [r6, #2]
	strh r1, [r6], #4
	bne _020458C8
	add r0, r4, #0x800
	ldrsh r2, [r0, #0xb8]
	add r1, r5, #0x800
	strh r2, [r1, #0xb8]
	ldrsh r0, [r0, #0xba]
	strh r0, [r1, #0xba]
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02045900
FUN_02045900: ; 0x02045900
	add r0, r0, #0xbc
	add r0, r0, #0x800
	bx lr
	arm_func_end FUN_02045900

	arm_func_start FUN_0204590c
FUN_0204590c: ; 0x0204590C
	mov ip, #0
	mov r1, #0x38
	arm_func_end FUN_0204590c
_02045914:
	mla r2, ip, r1, r0
	add r3, r0, ip
	add ip, ip, #1
	ldrb r3, [r3, #0x554]
	add r2, r2, #0x4000
	cmp ip, #0x40
	str r3, [r2, #0xc3c]
	blt _02045914
	bx lr

	arm_func_start FUN_02045938
FUN_02045938: ; 0x02045938
	add r3, r0, #0x128
	str r2, [r0, #0x548]
	ldr ip, _0204594C ; =_strcpy
	add r0, r3, #0x400
	bx ip
	.align 2, 0_0204594C: .word _strcpy
	arm_func_end FUN_02045938

	arm_func_start FUN_02045950
FUN_02045950: ; 0x02045950
	add r0, r0, #0x128
	add r0, r0, #0x400
	bx lr
	arm_func_end FUN_02045950

	arm_func_start FUN_0204595c
FUN_0204595c: ; 0x0204595C
	add r0, r0, #0x5000
	str r1, [r0, #0xaf8]
	bx lr
	arm_func_end FUN_0204595c

	arm_func_start FUN_02045968
FUN_02045968: ; 0x02045968
	add r0, r0, #0x5000
	ldr r0, [r0, #0xaf8]
	bx lr
	arm_func_end FUN_02045968

	arm_func_start FUN_02045974
FUN_02045974: ; 0x02045974
	add r0, r0, #0x5000
	str r1, [r0, #0xaf4]
	bx lr
	arm_func_end FUN_02045974

	arm_func_start FUN_02045980
FUN_02045980: ; 0x02045980
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r0
	add r0, r6, #0x1e
	add ip, r6, #0x5000
	mvn r7, #0
	add r0, r0, #0x5b00
	mov r5, r2
	mov r4, r3
	strb r7, [ip, #0xb3e]
	bl _strcpy
	ldr r0, _020459FC ; =0x0477D1A9
	add r1, r6, #0x5000
	umull r8, r7, r4, r0
	asr lr, r4, #0x1f
	mov ip, #0
	ldr r4, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	ldr r2, [sp, #0x20]
	mla r7, lr, r0, r7
	adds r0, r8, #0x80000000
	adc r7, r7, #0
	strb ip, [r1, #0xb1d]
	add r0, r6, #0x5b00
	ldrsb r0, [r0, #0x1d]
	strb r5, [r1, #0xb3f]
	str r7, [r1, #0xb70]
	strb r0, [r1, #0xb1c]
	str r4, [r1, #0xb40]
	str r3, [r1, #0xb44]
	str r2, [r1, #0xb48]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020459FC: .word 0x0477D1A9
	arm_func_end FUN_02045980

	arm_func_start FUN_02045a00
FUN_02045a00: ; 0x02045A00
	add r1, r0, #0x5b00
	ldrsb r1, [r1, #0x3e]
	cmp r1, #0
	moveq r0, #0
	addne r1, r0, #0x5000
	addne r0, r0, #0x2fc
	movne r2, #0
	strbne r2, [r1, #0xb3e]
	addne r0, r0, #0x5800
	bx lr
	arm_func_end FUN_02045a00

	arm_func_start FUN_02045a28
FUN_02045a28: ; 0x02045A28
	push {r3, lr}
	ldr r2, _02045A5C ; =0x0B60B60B
	mov r3, #0xb6
	umull lr, ip, r1, r2
	mla ip, r1, r3, ip
	asr r1, r1, #0x1f
	mla ip, r1, r2, ip
	adds r1, lr, #0
	adc r1, ip, #0x800
	lsl r1, r1, #4
	lsr r1, r1, #0x10
	str r1, [r0, #0x54c]
	pop {r3, pc}
	.align 2, 0_02045A5C: .word 0x0B60B60B
	arm_func_end FUN_02045a28

	arm_func_start FUN_02045a60
FUN_02045a60: ; 0x02045A60
	ldr r0, [r0, #0x54c]
	bx lr
	arm_func_end FUN_02045a60

	arm_func_start FUN_02045a68
FUN_02045a68: ; 0x02045A68
	str r1, [r0, #0x550]
	bx lr
	arm_func_end FUN_02045a68

	arm_func_start FUN_02045a70
FUN_02045a70: ; 0x02045A70
	ldr r0, [r0, #0x550]
	bx lr
	arm_func_end FUN_02045a70

	arm_func_start FUN_02045a78
FUN_02045a78: ; 0x02045A78
	strb r1, [r0, #0x5a3]
	bx lr
	arm_func_end FUN_02045a78

	arm_func_start FUN_02045a80
FUN_02045a80: ; 0x02045A80
	push {r4, r5, r6, lr}
	ldr r6, [sp, #0x10]
	mov r5, #0
	mvn ip, #0
	arm_func_end FUN_02045a80
_02045A90:
	cmp r3, ip
	beq _02045AA0
	cmp r3, r5
	bne _02045AD4
_02045AA0:
	add r4, r0, r5, lsl #3
	ldr lr, [r4, #0x5a4]
	cmp r1, lr
	ldrne lr, [r4, #0x5a8]
	cmpne lr, #0
	beq _02045AC0
	cmp r6, #0
	beq _02045AD4
_02045AC0:
	add r0, r0, r5, lsl #3
	str r1, [r0, #0x5a4]
	str r2, [r0, #0x5a8]
	mov r0, #1
	pop {r4, r5, r6, pc}
_02045AD4:
	add r5, r5, #1
	cmp r5, #4
	blt _02045A90
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02045ae8
FUN_02045ae8: ; 0x02045AE8
	add r2, r0, #0x500
	ldrsb r2, [r2, #0xa3]
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	mov ip, #0
	arm_func_end FUN_02045ae8
_02045B00:
	add r3, r0, ip, lsl #3
	ldr r2, [r3, #0x5a8]
	cmp r2, #0
	beq _02045B2C
	sub r2, r2, r1
	cmp r2, #0
	str r2, [r3, #0x5a8]
	movle r0, #0
	strle r0, [r3, #0x5a8]
	ldrle r0, [r3, #0x5a4]
	bxle lr
_02045B2C:
	add ip, ip, #1
	cmp ip, #4
	blt _02045B00
	mov r0, #0
	bx lr

	arm_func_start FUN_02045b40
FUN_02045b40: ; 0x02045B40
	add r0, r0, #0x5000
	str r1, [r0, #0xb74]
	str r2, [r0, #0xb78]
	bx lr
	arm_func_end FUN_02045b40

	arm_func_start FUN_02045b50
FUN_02045b50: ; 0x02045B50
	cmp r1, #0
	addne r3, r0, #0x5000
	ldrne r3, [r3, #0xb74]
	strne r3, [r1]
	cmp r2, #0
	addne r0, r0, #0x5000
	ldrne r0, [r0, #0xb78]
	strne r0, [r2]
	bx lr
	arm_func_end FUN_02045b50

	arm_func_start FUN_02045b74
FUN_02045b74: ; 0x02045B74
	push {r3, r4, r5, lr}
	mov r5, #0
	mov ip, r5
	mov r3, r5
	arm_func_end FUN_02045b74
_02045B84:
	add lr, r0, r3, lsl #2
	ldrb r4, [lr, #0x5c8]
	cmp r4, #0
	beq _02045BD4
	cmp r1, r4
	bne _02045BAC
	add lr, lr, #0x500
	ldrh r4, [lr, #0xca]
	cmp r2, r4
	popeq {r3, r4, r5, pc}
_02045BAC:
	add r4, r0, r3, lsl #2
	ldrb r4, [r4, #0x5c9]
	tst r4, #0x20
	beq _02045BC8
	cmp r5, #0
	moveq ip, r3
	add r5, r5, #1
_02045BC8:
	add r3, r3, #1
	cmp r3, #0xbc
	blt _02045B84
_02045BD4:
	cmp r1, #6
	bge _02045C28
	cmp r5, #0x14
	blt _02045C28
	cmp ip, #0xbb
	bge _02045C24
_02045BEC:
	add r4, r0, ip, lsl #2
	ldrb lr, [r4, #0x5cc]
	add r3, r4, #0x500
	strb lr, [r4, #0x5c8]
	ldrb lr, [r4, #0x5cd]
	strb lr, [r4, #0x5c9]
	ldrh lr, [r3, #0xce]
	strh lr, [r3, #0xca]
	ldrb r3, [r4, #0x5c8]
	cmp r3, #0
	beq _02045C24
	add ip, ip, #1
	cmp ip, #0xbb
	blt _02045BEC
_02045C24:
	mov r3, ip
_02045C28:
	add lr, r0, r3, lsl #2
	strb r1, [lr, #0x5c8]
	mov ip, #1
	strb ip, [lr, #0x5c9]
	add ip, lr, #0x500
	strh r2, [ip, #0xca]
	cmp r1, #0xb
	addlt r2, r0, #0xc9
	addlt ip, r2, #0x500
	ldrblt r2, [ip, r3, lsl #2]
	orrlt r2, r2, #0x10
	strblt r2, [ip, r3, lsl #2]
	cmp r1, #6
	addlt r0, r0, #0xc9
	addlt r1, r0, #0x500
	ldrblt r0, [r1, r3, lsl #2]
	orrlt r0, r0, #0x20
	strblt r0, [r1, r3, lsl #2]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02045c74
FUN_02045c74: ; 0x02045C74
	mov r3, #0
	arm_func_end FUN_02045c74
_02045C78:
	add r2, r0, r3, lsl #2
	ldrb r2, [r2, #0x5c8]
	cmp r1, r2
	bne _02045CA0
	add r0, r0, #0xc9
	add r1, r0, #0x500
	ldrb r0, [r1, r3, lsl #2]
	orr r0, r0, #2
	strb r0, [r1, r3, lsl #2]
	bx lr
_02045CA0:
	add r3, r3, #1
	cmp r3, #0xbc
	blt _02045C78
	bx lr

	arm_func_start FUN_02045cb0
FUN_02045cb0: ; 0x02045CB0
	add r0, r0, #0x1c8
	add r0, r0, #0x400
	bx lr
	arm_func_end FUN_02045cb0

	arm_func_start FUN_02045cbc
FUN_02045cbc: ; 0x02045CBC
	cmp r1, #0
	ldrne r1, [r0, #0x5c4]
	mov r3, #1
	orrne r1, r1, r3, lsl r2
	mvneq r1, r3, lsl r2
	ldreq r2, [r0, #0x5c4]
	andeq r1, r2, r1
	str r1, [r0, #0x5c4]
	bx lr
	arm_func_end FUN_02045cbc

	arm_func_start FUN_02045ce0
FUN_02045ce0: ; 0x02045CE0
	ldr r2, [r0, #0x5c4]
	mov r0, #1
	and r0, r2, r0, lsl r1
	bx lr
	arm_func_end FUN_02045ce0

	arm_func_start FUN_02045cf0
FUN_02045cf0: ; 0x02045CF0
	add r0, r0, #0x800
	strh r1, [r0, #0xb8]
	strh r2, [r0, #0xba]
	bx lr
	arm_func_end FUN_02045cf0

	arm_func_start FUN_02045d00
FUN_02045d00: ; 0x02045D00
	add r3, r0, #0x800
	ldrsh ip, [r3, #0xb8]
	cmp ip, #0
	movle ip, #0xe0
	strhle ip, [r3, #0xb8]
	add r3, r0, #0x800
	ldrsh r3, [r3, #0xb8]
	cmp r3, #0xe0
	movgt r3, #0xe0
	bgt _02045D30
	cmp r3, #1
	movlt r3, #1
	arm_func_end FUN_02045d00
_02045D30:
	strh r3, [r1]
	add r0, r0, #0x800
	ldrsh r0, [r0, #0xba]
	cmp r0, #0xa0
	movgt r0, #0xa0
	bgt _02045D50
	cmp r0, #1
	movlt r0, #1
_02045D50:
	strh r0, [r2]
	bx lr

	arm_func_start FUN_02045d58
FUN_02045d58: ; 0x02045D58
	cmp r1, #0
	add r1, r0, #0x500
	ldrsb r1, [r1, #0xa0]
	orrne r1, r1, #1
	biceq r1, r1, #1
	strb r1, [r0, #0x5a0]
	bx lr
	arm_func_end FUN_02045d58

	arm_func_start FUN_02045d74
FUN_02045d74: ; 0x02045D74
	ldrb r1, [r0, #0x5a1]
	cmp r1, #0
	moveq r0, #0
	bxeq lr
	add r0, r0, #0x500
	ldrsb r0, [r0, #0xa0]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02045d74

	arm_func_start FUN_02045d9c
FUN_02045d9c: ; 0x02045D9C
	cmp r1, #0
	add r1, r0, #0x500
	ldrsb r1, [r1, #0xa0]
	orrne r1, r1, #2
	biceq r1, r1, #2
	strb r1, [r0, #0x5a0]
	bx lr
	arm_func_end FUN_02045d9c

	arm_func_start FUN_02045db8
FUN_02045db8: ; 0x02045DB8
	ldrb r1, [r0, #0x5a1]
	cmp r1, #0
	moveq r0, #0
	bxeq lr
	add r0, r0, #0x500
	ldrsb r0, [r0, #0xa0]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02045db8

	arm_func_start FUN_02045de0
FUN_02045de0: ; 0x02045DE0
	add r0, r0, #0x5000
	ldr r0, [r0, #0xb9c]
	bx lr
	arm_func_end FUN_02045de0

	arm_func_start FUN_02045dec
FUN_02045dec: ; 0x02045DEC
	add r0, r0, #0x5000
	str r1, [r0, #0xb9c]
	bx lr
	arm_func_end FUN_02045dec

	arm_func_start FUN_02045df8
FUN_02045df8: ; 0x02045DF8
	strb r1, [r0, #0x5a1]
	bx lr
	arm_func_end FUN_02045df8

	arm_func_start FUN_02045e00
FUN_02045e00: ; 0x02045E00
	ldrb r0, [r0, #0x5a1]
	bx lr
	arm_func_end FUN_02045e00

	arm_func_start FUN_02045e08
FUN_02045e08: ; 0x02045E08
	push {r4, r5, lr}
	sub sp, sp, #0x14
	mov r5, r0
	mov r4, r1
	ldr r0, _02045EBC ; =0x02099F78
	ldr r1, _02045EC0 ; =0x02090140
	bl FUN_020418b0
	cmp r0, #0
	ldr r1, _02045EC4 ; =0x02090148
	ldrb r0, [r5, #0x5a2]
	ldrne r1, _02045EC8 ; =0x02090168
	cmp r0, r4
	beq _02045E90
	ldr r3, _02045ECC ; =0x0209A250
	add r2, r5, #0xbb0
	ldr r0, [r3]
	add r2, r2, #0x5000
	cmp r0, #0
	str r2, [sp, #0x10]
	moveq r0, #0
	beq _02045E88
	sub ip, r4, #1
	mov r2, #0x24
	mul lr, ip, r2
	str lr, [sp]
	str r2, [sp, #4]
	mov ip, #0
	str ip, [sp, #8]
	mov ip, #1
	add r2, sp, #0x10
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_02045e08
_02045E88:
	cmp r0, #0
	moveq r4, #0
_02045E90:
	ldrb r0, [r5, #0x5a1]
	mov r1, #1
	strb r4, [r5, #0x5a2]
	cmp r0, #0
	addeq r0, r5, #0x5b00
	ldrheq r0, [r0, #0xb0]
	strbeq r0, [r5, #0x5a1]
	add r0, r5, #0x5000
	str r1, [r0, #0xb9c]
	add sp, sp, #0x14
	pop {r4, r5, pc}
	.align 2, 0_02045EBC: .word 0x02099F78
_02045EC0: .word 0x02090140
_02045EC4: .word 0x02090148
_02045EC8: .word 0x02090168
_02045ECC: .word 0x0209A250

	arm_func_start FUN_02045ed0
FUN_02045ed0: ; 0x02045ED0
	add r0, r0, #0xbb0
	add r0, r0, #0x5000
	bx lr
	arm_func_end FUN_02045ed0

	arm_func_start FUN_02045edc
FUN_02045edc: ; 0x02045EDC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x58
	mov r7, r0
	mov r4, r1
	ldr r0, _02046090 ; =0x02099F78
	ldr r1, _02046094 ; =0x02090188
	mov r5, #0
	bl FUN_020418b0
	cmp r0, #0
	ldr r1, _02046098 ; =0x02090190
	add r0, r7, #0xbb0
	ldrne r1, _0204609C ; =0x020901B0
	cmp r4, #0
	add r6, r0, #0x5000
	ldrbne r0, [r7, #0x5a2]
	cmpne r0, r4
	beq _02045F6C
	ldr r3, _020460A0 ; =0x0209A250
	add r2, sp, #0x34
	ldr r0, [r3]
	str r2, [sp, #0x10]
	cmp r0, #0
	moveq r0, #0
	beq _02045F64
	sub r4, r4, #1
	mov r2, #0x24
	mul r7, r4, r2
	str r7, [sp]
	str r2, [sp, #4]
	add r2, sp, #0x10
	str r5, [sp, #8]
	mov r4, #1
	str r4, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_02045edc
_02045F64:
	cmp r0, #0
	addne r6, sp, #0x34
_02045F6C:
	mov r1, #0
	add r0, sp, #0x14
_02045F74:
	str r1, [r0, r1, lsl #2]
	add r1, r1, #1
	cmp r1, #8
	blt _02045F74
	mov r7, #0
	add r4, sp, #0x14
_02045F8C:
	mov r0, r5
	mov r2, r7
	cmp r7, #8
	bge _02045FB8
_02045F9C:
	ldr r1, [r4, r2, lsl #2]
	add r2, r2, #1
	add r1, r6, r1, lsl #2
	ldrh r1, [r1, #6]
	cmp r2, #8
	add r0, r0, r1
	blt _02045F9C
_02045FB8:
	cmp r0, #0
	beq _02046010
	bl FUN_020EF928
	mov r2, r7
	cmp r7, #7
	bge _02045FF4
_02045FD0:
	ldr r1, [r4, r2, lsl #2]
	add r1, r6, r1, lsl #2
	ldrh r1, [r1, #6]
	sub r0, r0, r1
	cmp r0, #0
	ble _02045FF4
	add r2, r2, #1
	cmp r2, #7
	blt _02045FD0
_02045FF4:
	ldr r1, [r4, r7, lsl #2]
	ldr r0, [r4, r2, lsl #2]
	str r0, [r4, r7, lsl #2]
	add r7, r7, #1
	str r1, [r4, r2, lsl #2]
	cmp r7, #7
	blt _02045F8C
_02046010:
	ldr sb, _020460A4 ; =0x0209BA20
	mov r7, #0
	add r4, sp, #0x14
_0204601C:
	ldr r0, [r4, r7, lsl #2]
	add r0, r6, r0, lsl #2
	ldrh r8, [r0, #4]
	cmp r8, #0
	beq _02046048
	mov r0, sb
	mov r1, r8
	bl FUN_0207290c
	cmp r0, #0
	bne _02046054
	mov r8, r5
_02046048:
	add r7, r7, #1
	cmp r7, #7
	blt _0204601C
_02046054:
	cmp r8, #0
	bne _02046084
	mov r2, #0
	add r1, sp, #0x14
_02046064:
	ldr r0, [r1, r2, lsl #2]
	add r0, r6, r0, lsl #2
	ldrh r8, [r0, #4]
	cmp r8, #0
	bne _02046084
	add r2, r2, #1
	cmp r2, #7
	blt _02046064
_02046084:
	mov r0, r8
	add sp, sp, #0x58
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02046090: .word 0x02099F78
_02046094: .word 0x02090188
_02046098: .word 0x02090190
_0204609C: .word 0x020901B0
_020460A0: .word 0x0209A250
_020460A4: .word 0x0209BA20

	arm_func_start FUN_020460a8
FUN_020460a8: ; 0x020460A8
	add r0, r0, #0x5000
	mov r3, #1
	str r3, [r0, #0xba0]
	str r1, [r0, #0xba8]
	str r2, [r0, #0xbac]
	bx lr
	arm_func_end FUN_020460a8

	arm_func_start FUN_020460c0
FUN_020460c0: ; 0x020460C0
	add r0, r0, #0x5000
	ldr r3, [r0, #0xba8]
	str r3, [r1]
	ldr r0, [r0, #0xbac]
	str r0, [r2]
	bx lr
	arm_func_end FUN_020460c0

	arm_func_start FUN_020460d8
FUN_020460d8: ; 0x020460D8
	add r2, r0, #0x5000
	ldr r0, [r2, #0xba0]
	cmp r1, #0
	moveq r1, #0
	streq r1, [r2, #0xba0]
	bx lr
	arm_func_end FUN_020460d8

	arm_func_start FUN_020460f0
FUN_020460f0: ; 0x020460F0
	add r0, r0, #0x5000
	str r1, [r0, #0xba4]
	bx lr
	arm_func_end FUN_020460f0

	arm_func_start FUN_020460fc
FUN_020460fc: ; 0x020460FC
	add r0, r0, #0x5000
	ldr r0, [r0, #0xba4]
	bx lr
	arm_func_end FUN_020460fc

	arm_func_start FUN_02046108
FUN_02046108: ; 0x02046108
	push {r3, lr}
	cmp r1, #0x11
	moveq r0, #3
	popeq {r3, pc}
	ldr lr, _02046154 ; =0x30C30C31
	lsr ip, r1, #0x1f
	smull r0, r2, lr, r1
	add r2, ip, r2, asr #2
	mov r3, #0x15
	smull r0, r2, r3, r2
	sub r2, r1, r0
	cmp r2, #0x12
	subge r0, r2, #0x12
	smulllt r0, r1, lr, r1
	ldrlt r0, _02046158 ; =0x0208C390
	addlt r1, ip, r1, asr #2
	ldrlt r0, [r0, r1, lsl #2]
	addlt r0, r2, r0
	pop {r3, pc}
	.align 2, 0_02046154: .word 0x30C30C31
_02046158: .word 0x0208C390
	arm_func_end FUN_02046108

	arm_func_start FUN_0204615c
FUN_0204615c: ; 0x0204615C
	ldr r0, _02046174 ; =0x0208C390
	add r2, r1, #1
	ldr r2, [r0, r2, lsl #2]
	ldr r0, [r0, r1, lsl #2]
	sub r0, r2, r0
	bx lr
	.align 2, 0_02046174: .word 0x0208C390
	arm_func_end FUN_0204615c

	arm_func_start FUN_02046178
FUN_02046178: ; 0x02046178
	push {r4, lr}
	mov r4, r0
	bl FUN_02046108
	asr r1, r0, #2
	add r1, r0, r1, lsr #29
	asr r1, r1, #3
	add r2, r4, r1, lsl #3
	lsr r1, r0, #0x1f
	rsb r0, r1, r0, lsl #29
	add r1, r1, r0, ror #29
	ldrb r2, [r2, #4]
	mov r0, #1
	tst r2, r0, lsl r1
	moveq r0, #0
	pop {r4, pc}
	arm_func_end FUN_02046178

	arm_func_start FUN_020461b4
FUN_020461b4: ; 0x020461B4
	push {r4, lr}
	mov r4, r0
	bl FUN_02046108
	add r0, r4, r0, lsl #3
	ldr r0, [r0, #8]
	pop {r4, pc}
	arm_func_end FUN_020461b4

	arm_func_start FUN_020461cc
FUN_020461cc: ; 0x020461CC
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r4, r2
	mov r5, r3
	bl FUN_02046108
	mov r7, r0
	mov r1, r4
	mov r0, r6
	mov r4, r7
	bl FUN_02046108
	cmp r7, r0
	movgt r4, r0
	movgt r0, r7
	cmp r4, r0
	bgt _02046254
	mov r3, #1
	arm_func_end FUN_020461cc
_0204620C:
	asr r1, r4, #2
	add r1, r4, r1, lsr #29
	asr ip, r1, #3
	lsr r2, r4, #0x1f
	rsb r1, r2, r4, lsl #29
	add r1, r2, r1, ror #29
	add ip, r6, ip, lsl #3
	lsl r1, r3, r1
	ldrb r2, [ip, #4]
	and r1, r1, #0xff
	cmp r5, #0
	orr r1, r2, r1
	strb r1, [ip, #4]
	addne r1, r6, r4, lsl #3
	add r4, r4, #1
	strne r5, [r1, #8]
	cmp r4, r0
	ble _0204620C
_02046254:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204625c
FUN_0204625c: ; 0x0204625C
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r2
	bl FUN_02046108
	mov r6, r0
	mov r1, r4
	mov r0, r5
	mov r4, r6
	bl FUN_02046108
	cmp r6, r0
	movgt r4, r0
	movgt r0, r6
	cmp r4, r0
	popgt {r4, r5, r6, pc}
	mov ip, #1
	mov r3, #0
	arm_func_end FUN_0204625c
_0204629C:
	asr r1, r4, #2
	add r1, r4, r1, lsr #29
	lsr r2, r4, #0x1f
	asr lr, r1, #3
	rsb r1, r2, r4, lsl #29
	add r6, r5, lr, lsl #3
	add r1, r2, r1, ror #29
	mvn r2, ip, lsl r1
	add r1, r5, r4, lsl #3
	add r4, r4, #1
	ldrb lr, [r6, #4]
	and r2, r2, #0xff
	cmp r4, r0
	and r2, lr, r2
	strb r2, [r6, #4]
	str r3, [r1, #8]
	ble _0204629C
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020462e4
FUN_020462e4: ; 0x020462E4
	push {r3, r4, r5, lr}
	mov r4, r2
	mov r5, r0
	bl FUN_02046108
	cmp r4, #0
	addne r0, r5, r0, lsl #3
	strne r4, [r0, #8]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020462e4

	arm_func_start FUN_02046304
FUN_02046304: ; 0x02046304
	strh r1, [r0, #2]
	bx lr
	arm_func_end FUN_02046304

	arm_func_start FUN_0204630c
FUN_0204630c: ; 0x0204630C
	ldrh r0, [r0, #2]
	bx lr
	arm_func_end FUN_0204630c

	arm_func_start FUN_02046314
FUN_02046314: ; 0x02046314
	str r1, [r0, #0x594]
	cmp r1, #0
	addne r0, r0, #0x5000
	mvnne r1, #0
	strne r1, [r0, #0xb7c]
	strne r1, [r0, #0xb80]
	bx lr
	arm_func_end FUN_02046314

	arm_func_start FUN_02046330
FUN_02046330: ; 0x02046330
	ldr r0, [r0, #0x594]
	bx lr
	arm_func_end FUN_02046330

	arm_func_start FUN_02046338
FUN_02046338: ; 0x02046338
	add r0, r0, #0x37c
	add r0, r0, #0x5800
	bx lr
	arm_func_end FUN_02046338

	arm_func_start FUN_02046344
FUN_02046344: ; 0x02046344
	add r0, r0, #0x1b80
	add r0, r0, #0x4000
	bx lr
	arm_func_end FUN_02046344

	arm_func_start FUN_02046350
FUN_02046350: ; 0x02046350
	str r1, [r0, #0x59c]
	bx lr
	arm_func_end FUN_02046350

	arm_func_start FUN_02046358
FUN_02046358: ; 0x02046358
	ldr r0, [r0, #0x59c]
	bx lr
	arm_func_end FUN_02046358

	arm_func_start FUN_02046360
FUN_02046360: ; 0x02046360
	ldrb r0, [r0, #0x598]
	bx lr
	arm_func_end FUN_02046360

	arm_func_start FUN_02046368
FUN_02046368: ; 0x02046368
	strb r1, [r0, #0x598]
	bx lr
	arm_func_end FUN_02046368

	arm_func_start FUN_02046370
FUN_02046370: ; 0x02046370
	strb r1, [r0, #0x599]
	bx lr
	arm_func_end FUN_02046370

	arm_func_start FUN_02046378
FUN_02046378: ; 0x02046378
	ldrb r0, [r0, #0x599]
	bx lr
	arm_func_end FUN_02046378

	arm_func_start FUN_02046380
FUN_02046380: ; 0x02046380
	push {r3, lr}
	add r2, r0, #0x85
	add lr, r2, #0x5b00
	mov ip, #0xa
	arm_func_end FUN_02046380
_02046390:
	ldrb r3, [r1]
	ldrb r2, [r1, #1]
	add r1, r1, #2
	subs ip, ip, #1
	strb r2, [lr, #1]
	strb r3, [lr], #2
	bne _02046390
	add r0, r0, #0x85
	add r0, r0, #0x5b00
	pop {r3, pc}

	arm_func_start FUN_020463b8
FUN_020463b8: ; 0x020463B8
	add r0, r0, #0xf8
	add r0, r0, #0x400
	bx lr
	arm_func_end FUN_020463b8

	arm_func_start FUN_020463c4
FUN_020463c4: ; 0x020463C4
	add r0, r0, #0x5000
	strb r1, [r0, #0xbd5]
	bx lr
	arm_func_end FUN_020463c4

	arm_func_start FUN_020463d0
FUN_020463d0: ; 0x020463D0
	add r0, r0, #0x5000
	ldrb r0, [r0, #0xbd5]
	bx lr
	arm_func_end FUN_020463d0

	arm_func_start FUN_020463dc
FUN_020463dc: ; 0x020463DC
	add r0, r0, #0x5000
	strb r1, [r0, #0xbd4]
	bx lr
	arm_func_end FUN_020463dc

	arm_func_start FUN_020463e8
FUN_020463e8: ; 0x020463E8
	add r0, r0, #0x5000
	ldrb r0, [r0, #0xbd4]
	bx lr
	arm_func_end FUN_020463e8

	arm_func_start FUN_020463f4
FUN_020463f4: ; 0x020463F4
	push {r4, lr}
	ldr r1, _02046410 ; =0x02090204
	mov r4, r0
	str r1, [r4]
	bl thunk_FUN_020465fc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02046410: .word 0x02090204
	arm_func_end FUN_020463f4

	arm_func_start LAB_02046414
LAB_02046414: ; 0x02046414
	push {r4, lr}
	ldr r1, _02046438 ; =0x02090204
	mov r4, r0
	str r1, [r4]
	bl thunk_FUN_020465fc
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02046438: .word 0x02090204
	arm_func_end LAB_02046414

	arm_func_start LAB_0204643c
LAB_0204643c: ; 0x0204643C
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r5, #0
	ldr r1, _020464EC ; =0x020B5BF8
	str r5, [r4, #0x58]
	str r5, [r4, #0x60]
	str r5, [r4, #0x5c]
	strb r5, [r4, #0x67]
	strb r5, [r4, #0x66]
	add r0, r4, #4
	strb r5, [r1]
	bl FUN_02003f54
	add r0, r4, #0x2bc
	bl FUN_02003f38
	ldr r0, _020464F0 ; =0x020901D0
	add r1, r4, #0x2e0
	ldr r0, [r0, #0x10]
	mov r2, #0x10
	bl _memcpy
	add r0, r4, #0xc2
	ldr r1, _020464F4 ; =0x0209020C
	add r0, r0, #0x200
	bl FUN_02023c40
	mov r0, r5
	ldr r1, _020464F8 ; =0x0209AA60
	mov r2, #0x1e4
	bl FUN_0200787c
	mov r0, r5
	ldr r1, _020464FC ; =0x0209E6C0
	mov r2, #0xf00
	bl FUN_0200787c
	ldr r1, _02046500 ; =0x0209A10C
	ldr r0, _02046504 ; =0x0209A138
	str r5, [r1]
	str r5, [r0]
	strb r5, [r4, #0x88]
	mov r0, #0x78
	str r0, [r4, #0x78]
	str r0, [r4, #0x7c]
	add r0, r0, r0, lsl #1
	add r0, r0, #0x78
	add r0, r0, #4
	str r0, [r4, #0x90]
	pop {r3, r4, r5, pc}
	.align 2, 0_020464EC: .word 0x020B5BF8
_020464F0: .word 0x020901D0
_020464F4: .word 0x0209020C
_020464F8: .word 0x0209AA60
_020464FC: .word 0x0209E6C0
_02046500: .word 0x0209A10C
_02046504: .word 0x0209A138
	arm_func_end LAB_0204643c

	arm_func_start FUN_02046508
FUN_02046508: ; 0x02046508
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	mov r4, r3
	ldr r5, [r7, #0x78]
	ldr r3, [r7, #0x7c]
	sub r0, r4, #1
	mla r0, r3, r0, r5
	ldrb ip, [sp, #0x18]
	ldr r8, _020465EC ; =0x020A18A0
	mov r6, r1
	add r3, r0, #4
	ldr r1, _020465F0 ; =0x0209A250
	mov r0, r8
	mov r5, r2
	strb ip, [r7, #0x65]
	str r3, [r7, #0x90]
	bl FUN_0203df88
	ldr r1, [sp, #0x20]
	mov r0, r8
	mov r3, r4
	ldr r2, [sp, #0x1c]
	bl FUN_0203e004
	mov r2, #0
	ldrb r1, [sp, #0x18]
	mov r4, r0
	strb r2, [r7, #0x97]
	cmp r1, #0
	strb r2, [r7, #0x96]
	strb r2, [r7, #0x95]
	strb r2, [r7, #0x94]
	bne _0204658C
	ldr r0, _020465F4 ; =FUN_02047150
	bl FUN_0203ea40
	arm_func_end FUN_02046508
_0204658C:
	cmp r4, #0
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r5
	add r1, r7, #0x2f0
	mov r2, #0x11
	strb r6, [r7, #0x301]
	bl _memcpy
	ldr r0, _020465F8 ; =0x020A0640
	add r1, r7, #0x2e0
	ldrb r0, [r0, #0x89]
	mov r2, #0x64
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	strb r0, [r7, #0x305]
	ldr r0, _020465EC ; =0x020A18A0
	bl FUN_0203e26c
	mov r0, r7
	bl FUN_020466a0
	mov r0, r7
	bl FUN_02046d60
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020465EC: .word 0x020A18A0
_020465F0: .word 0x0209A250
_020465F4: .word FUN_02047150
_020465F8: .word 0x020A0640

	arm_func_start FUN_020465fc
FUN_020465fc: ; 0x020465FC
	push {r3, r4, r5, lr}
	ldr r4, _02046658 ; =0x020A18A0
	mov r5, r0
	mov r0, r4
	bl FUN_0203e1d0
	cmp r0, #0
	beq _02046630
	arm_func_end FUN_020465fc
_02046618:
	mov r0, r4
	bl FUN_0203e3f0
	mov r0, r4
	bl FUN_0203e52c
	cmp r0, #0
	beq _02046618
_02046630:
	mov r4, #0
	mov r0, r5
	mov r1, r4
	bl FUN_0204667c
	str r4, [r5, #0x60]
	str r4, [r5, #0x5c]
	strb r4, [r5, #0x67]
	strb r4, [r5, #0x66]
	strb r4, [r5, #0x65]
	pop {r3, r4, r5, pc}
	.align 2, 0_02046658: .word 0x020A18A0

	arm_func_start thunk_FUN_020465fc
thunk_FUN_020465fc: ; 0x0204665C
	ldr ip, _02046664 ; =FUN_020465fc
	bx ip
	.align 2, 0_02046664: .word FUN_020465fc
	arm_func_end thunk_FUN_020465fc

	arm_func_start FUN_02046668
FUN_02046668: ; 0x02046668
	ldr r0, _02046674 ; =0x020A18A0
	ldr ip, _02046678 ; =FUN_0203e358
	bx ip
	.align 2, 0_02046674: .word 0x020A18A0
_02046678: .word FUN_0203e358
	arm_func_end FUN_02046668

	arm_func_start FUN_0204667c
FUN_0204667c: ; 0x0204667C
	str r1, [r0, #0x58]
	cmp r1, #0
	ldreq r0, _02046694 ; =0x0209A0F8
	moveq r1, #1
	streq r1, [r0]
	bx lr
	.align 2, 0_02046694: .word 0x0209A0F8
	arm_func_end FUN_0204667c

	arm_func_start FUN_02046698
FUN_02046698: ; 0x02046698
	ldr r0, [r0, #0x58]
	bx lr
	arm_func_end FUN_02046698

	arm_func_start FUN_020466a0
FUN_020466a0: ; 0x020466A0
	mov r3, #0
	mov r2, r3
	arm_func_end FUN_020466a0
_020466A8:
	add r1, r0, r3, lsl #2
	add r3, r3, #1
	str r2, [r1, #0x27c]
	cmp r3, #0x10
	blt _020466A8
	bx lr

	arm_func_start FUN_020466c0
FUN_020466c0: ; 0x020466C0
	push {r3, lr}
	ldr r0, _020466E0 ; =0x020A18A0
	bl thunk_FUN_02012be0
	cmp r0, #0
	movlt r0, #0
	cmp r0, #3
	movgt r0, #3
	pop {r3, pc}
	.align 2, 0_020466E0: .word 0x020A18A0
	arm_func_end FUN_020466c0

	arm_func_start FUN_020466e4
FUN_020466e4: ; 0x020466E4
	push {r3, lr}
	bl FUN_02046698
	cmp r0, #0xb
	cmpne r0, #5
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_020466e4

	arm_func_start FUN_02046700
FUN_02046700: ; 0x02046700
	push {r3, lr}
	bl FUN_02046698
	cmp r0, #0
	cmpne r0, #0xc
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_02046700

	arm_func_start FUN_0204671c
FUN_0204671c: ; 0x0204671C
	ldr r0, _02046728 ; =0x020A18A0
	ldr ip, _0204672C ; =LAB_0203e1fc
	bx ip
	.align 2, 0_02046728: .word 0x020A18A0
_0204672C: .word LAB_0203e1fc
	arm_func_end FUN_0204671c

	arm_func_start FUN_02046730
FUN_02046730: ; 0x02046730
	ldr r0, _0204673C ; =0x020A18A0
	ldr ip, _02046740 ; =LAB_0203e1dc
	bx ip
	.align 2, 0_0204673C: .word 0x020A18A0
_02046740: .word LAB_0203e1dc
	arm_func_end FUN_02046730

	arm_func_start FUN_02046744
FUN_02046744: ; 0x02046744
	push {r3, lr}
	ldrb r1, [r0, #0x65]
	cmp r1, #0
	bne _02046788
	ldr r1, [r0, #0x5c]
	cmp r1, #1
	moveq r1, #1
	movne r1, #0
	cmp r1, #0
	ldrheq r0, [r0, #0x6a]
	popeq {r3, pc}
	ldr r0, _020467A0 ; =0x020A18A0
	bl FUN_0203e1e8
	orr r0, r0, #1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r3, pc}
	arm_func_end FUN_02046744
_02046788:
	ldr r0, _020467A0 ; =0x020A18A0
	bl FUN_0203e1f4
	orr r0, r0, #1
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r3, pc}
	.align 2, 0_020467A0: .word 0x020A18A0

	arm_func_start FUN_020467a4
FUN_020467a4: ; 0x020467A4
	ldrh r0, [r0, #0x6c]
	bx lr
	arm_func_end FUN_020467a4

	arm_func_start FUN_020467ac
FUN_020467ac: ; 0x020467AC
	push {r4, lr}
	mov r4, r0
	bl FUN_02046744
	strh r0, [r4, #0x6c]
	pop {r4, pc}
	arm_func_end FUN_020467ac

	arm_func_start FUN_020467c0
FUN_020467c0: ; 0x020467C0
	push {r4, lr}
	mov r4, r0
	bl FUN_02046744
	ldrh r1, [r4, #0x6c]
	cmp r0, r1
	movne r0, #1
	moveq r0, #0
	pop {r4, pc}
	arm_func_end FUN_020467c0

	arm_func_start FUN_020467e0
FUN_020467e0: ; 0x020467E0
	push {r3, lr}
	bl FUN_02046744
	mov r1, #0
	mov r3, r1
	mov r2, #1
	arm_func_end FUN_020467e0
_020467F4:
	tst r0, r2, lsl r3
	addne r1, r1, #1
	lslne r1, r1, #0x10
	add r3, r3, #1
	lsrne r1, r1, #0x10
	cmp r3, #4
	blt _020467F4
	mov r0, r1
	pop {r3, pc}

	arm_func_start FUN_02046818
FUN_02046818: ; 0x02046818
	push {r4, lr}
	ldr r4, _02046844 ; =0x020B5BF8
	ldrb r0, [r4]
	cmp r0, #0
	popne {r4, pc}
	ldr r0, _02046848 ; =0x020A18A0
	mov r1, #0
	bl FUN_0203e214
	mov r0, #1
	strb r0, [r4]
	pop {r4, pc}
	.align 2, 0_02046844: .word 0x020B5BF8
_02046848: .word 0x020A18A0
	arm_func_end FUN_02046818

	arm_func_start FUN_0204684c
FUN_0204684c: ; 0x0204684C
	push {r4, lr}
	ldr r4, _02046878 ; =0x020B5BF8
	ldrb r0, [r4]
	cmp r0, #0
	popeq {r4, pc}
	ldr r0, _0204687C ; =0x020A18A0
	mov r1, #1
	bl FUN_0203e214
	mov r0, #0
	strb r0, [r4]
	pop {r4, pc}
	.align 2, 0_02046878: .word 0x020B5BF8
_0204687C: .word 0x020A18A0
	arm_func_end FUN_0204684c

	arm_func_start FUN_02046880
FUN_02046880: ; 0x02046880
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	ldr r4, [r8, #0x60]
	ldr r3, _02046940 ; =0x020A3CA0
	mov r7, r1
	mov r6, r2
	cmp r4, #1
	ldrh r5, [r3, #0x66]
	mov r4, #0
	bne _02046924
	ldr r0, [r8, #0x58]
	cmp r0, #5
	beq _020468BC
	cmp r0, #0xb
	bne _02046938
	arm_func_end FUN_02046880
_020468BC:
	ldr r0, _02046944 ; =0x0209A10C
	ldr r4, _02046948 ; =0x0209E6C0
	ldr sb, [r0]
	mov r8, #0x3c0
	and r1, sb, #3
	mla r0, r1, r8, r4
	mov r1, r7
	mov r2, r5
	bl _memcpy
	and r0, sb, #3
	mla r3, r0, r8, r4
	mov r1, r6
	mov r2, r5
	add r0, r3, #0xf0
	bl _memcpy
	ldr r2, _0204694C ; =0x0209A138
	mov r3, #0
	mov r0, r7
	mov r1, r5
	str r3, [r2]
	bl FUN_020026d0
	mov r0, r6
	mov r1, r5
	bl FUN_020026d0
	mov r4, #1
	b _02046938
_02046924:
	bl FUN_02046698
	cmp r0, #0xc
	bne _02046938
	mov r0, r8
	bl FUN_020465fc
_02046938:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02046940: .word 0x020A3CA0
_02046944: .word 0x0209A10C
_02046948: .word 0x0209E6C0
_0204694C: .word 0x0209A138

	arm_func_start FUN_02046950
FUN_02046950: ; 0x02046950
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r4, r0
	ldr r2, [r4, #0x60]
	str r1, [sp]
	mov r7, r1
	cmp r2, #1
	mov sl, #0
	bne _020469F8
	ldr r0, [r4, #0x58]
	cmp r0, #5
	beq _02046984
	cmp r0, #0xb
	bne _02046A0C
	arm_func_end FUN_02046950
_02046984:
	ldr r0, _02046A14 ; =0x0209A138
	ldr r1, _02046A18 ; =0x0209A10C
	ldr sl, [r0]
	mov fp, #0xf0
	cmp sl, #4
	ldr r0, _02046A14 ; =0x0209A138
	mov sb, #0
	movgt sl, #4
	str sb, [r0]
	ldr r8, [r1]
	lsl r5, fp, #2
	ldr r6, _02046A1C ; =0x0209E6C0
	mov r4, #0x3c0
	b _020469DC
_020469BC:
	sub r0, r8, sb
	and r1, r0, #3
	mla r0, r1, r4, r6
	mov r1, r7
	mov r2, r5
	bl _memcpy
	add r7, r7, r5
	add sb, sb, #1
_020469DC:
	cmp sb, sl
	blt _020469BC
	lsl r0, fp, #2
	mul r1, sl, r0
	ldr r0, [sp]
	bl FUN_020026d0
	b _02046A0C
_020469F8:
	bl FUN_02046698
	cmp r0, #0xc
	bne _02046A0C
	mov r0, r4
	bl FUN_020465fc
_02046A0C:
	mov r0, sl
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02046A14: .word 0x0209A138
_02046A18: .word 0x0209A10C
_02046A1C: .word 0x0209E6C0

	arm_func_start FUN_02046a20
FUN_02046a20: ; 0x02046A20
	push {r4, r5, r6, lr}
	mov r4, r1
	mov r6, r2
	mov r5, r0
	mov r0, r4
	mov r1, r6
	bl FUN_020026d0
	ldrb r0, [r5, #0x65]
	cmp r0, #0
	bne _02046AE4
	ldr r0, [r5, #0x5c]
	cmp r0, #1
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	beq _02046AC0
	mov r0, r5
	bl FUN_02046744
	ldr r6, _02046B08 ; =0x0209AA60
	strb r0, [r6]
	ldrb r0, [r5, #0x88]
	cmp r0, #0
	movne r0, #0
	strbne r0, [r6, #1]
	strbne r0, [r6, #2]
	popne {r4, r5, r6, pc}
	ldr r2, [r5, #0x78]
	ldr r1, _02046B0C ; =0x0209AA64
	lsr r0, r2, #2
	strb r0, [r6, #1]
	ldr r3, [r5, #0x7c]
	mov r0, r4
	lsr r3, r3, #2
	strb r3, [r6, #2]
	bl _memcpy
	ldr r1, [r5, #0x78]
	mov r0, r6
	add r1, r1, #4
	bl FUN_020026d0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02046a20
_02046AC0:
	ldr r6, _02046B08 ; =0x0209AA60
	ldr r2, [r5, #0x7c]
	mov r0, r4
	mov r1, r6
	bl _memcpy
	ldr r1, [r5, #0x7c]
	mov r0, r6
	bl FUN_020026d0
	pop {r4, r5, r6, pc}
_02046AE4:
	ldr r5, _02046B08 ; =0x0209AA60
	mov r0, r4
	mov r1, r5
	mov r2, r6
	bl _memcpy
	mov r0, r5
	mov r1, r6
	bl FUN_020026d0
	pop {r4, r5, r6, pc}
	.align 2, 0_02046B08: .word 0x0209AA60
_02046B0C: .word 0x0209AA64

	arm_func_start FUN_02046b10
FUN_02046b10: ; 0x02046B10
	cmp r2, #0
	ldrne r0, [r0, #0x78]
	add r3, r1, #2
	ldreq r0, [r0, #0x7c]
	mov r2, #0
	sub r1, r0, #2
	cmp r1, #0
	ble _02046B4C
	arm_func_end FUN_02046b10
_02046B30:
	ldrb r0, [r3], #1
	sub r1, r1, #1
	cmp r1, #0
	add r0, r2, r0
	lsl r0, r0, #0x10
	lsr r2, r0, #0x10
	bgt _02046B30
_02046B4C:
	mov r0, r2
	bx lr

	arm_func_start FUN_02046b54
FUN_02046b54: ; 0x02046B54
	push {r4, lr}
	ldrb r2, [r0, #0x64]
	mov r4, r1
	bl FUN_02046b10
	strh r0, [r4]
	pop {r4, pc}
	arm_func_end FUN_02046b54

	arm_func_start FUN_02046b6c
FUN_02046b6c: ; 0x02046B6C
	push {r4, lr}
	mov r4, r1
	bl FUN_02046b10
	ldrh r1, [r4]
	lsl r0, r0, #0x10
	cmp r1, r0, lsr #16
	moveq r0, #1
	movne r0, #0
	pop {r4, pc}
	arm_func_end FUN_02046b6c

	arm_func_start FUN_02046b90
FUN_02046b90: ; 0x02046B90
	ldrb r3, [r0, #0x65]
	sub ip, r1, #1
	sub r1, r2, #1
	bic r2, r1, #3
	bic ip, ip, #3
	cmp r3, #0
	add r1, ip, #4
	add r2, r2, #4
	bxne lr
	ldr r3, [r0, #0x5c]
	cmp r3, #1
	moveq r3, #1
	movne r3, #0
	cmp r3, #0
	bxeq lr
	ldr r3, [r0, #0x78]
	cmp r1, r3
	ldreq r3, [r0, #0x7c]
	cmpeq r2, r3
	bxeq lr
	mov ip, #1
	mov r3, #0x78
	str r1, [r0, #0x80]
	str r2, [r0, #0x84]
	strb ip, [r0, #0x88]
	str r3, [r0, #0x8c]
	bx lr
	arm_func_end FUN_02046b90

	arm_func_start FUN_02046bfc
FUN_02046bfc: ; 0x02046BFC
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	mov r7, #1
	bl FUN_02046744
	ldr r1, _02046C58 ; =0x020A3CA0
	ldrh r1, [r1, #0x5e]
	sub r2, r1, #1
	mov r1, r7
	b _02046C38
	arm_func_end FUN_02046bfc
_02046C28:
	tst r0, r1, lsl r2
	movne r7, r2
	bne _02046C40
	sub r2, r2, #1
_02046C38:
	cmp r2, #0
	bgt _02046C28
_02046C40:
	mla r0, r4, r7, r5
	add r0, r0, #4
	str r5, [r6, #0x78]
	str r4, [r6, #0x7c]
	str r0, [r6, #0x90]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02046C58: .word 0x020A3CA0

	arm_func_start FUN_02046c5c
FUN_02046c5c: ; 0x02046C5C
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4, #0x88]
	cmp r1, #0
	popeq {r4, pc}
	ldr r1, [r4, #0x80]
	ldr r2, [r4, #0x84]
	bl FUN_02046bfc
	ldr r1, [r4, #0x90]
	ldr r0, _02046C94 ; =0x020A18A0
	bl FUN_0203ea9c
	mov r0, #0
	strb r0, [r4, #0x88]
	pop {r4, pc}
	.align 2, 0_02046C94: .word 0x020A18A0
	arm_func_end FUN_02046c5c

	arm_func_start FUN_02046c98
FUN_02046c98: ; 0x02046C98
	cmp r1, #0
	moveq r0, #0
	ldrne r3, [r0, #0x78]
	ldrne r2, [r0, #0x7c]
	subne r0, r1, #1
	mlane r0, r2, r0, r3
	bx lr
	arm_func_end FUN_02046c98

	arm_func_start FUN_02046cb4
FUN_02046cb4: ; 0x02046CB4
	push {r4, lr}
	mov r4, r0
	cmp r1, #7
	str r1, [r4, #0x70]
	moveq r1, #0xf0
	moveq r2, #0x50
	beq _02046CDC
	bl FUN_02046ce8
	mov r1, r0
	mov r2, r1
	arm_func_end FUN_02046cb4
_02046CDC:
	mov r0, r4
	bl FUN_02046b90
	pop {r4, pc}

	arm_func_start FUN_02046ce8
FUN_02046ce8: ; 0x02046CE8
	cmp r1, #0xc
	mov r0, #0x74
	arm_func_end FUN_02046ce8

	arm_func_start switchD
switchD: ; 0x02046CF0
	addls pc, pc, r1, lsl #2
	b _02046D58
	arm_func_end switchD
_02046CF8: ; jump table
	b _02046D58 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02046CFC
	b _02046D58
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02046D00
	b _02046D2C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02046D04
	b _02046D34
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02046D08
	b _02046D3C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02046D0C
	b _02046D44
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02046D10
	b _02046D48
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02046D14
	b _02046D58
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02046D18
	b _02046D4C
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02046D1C
	b _02046D58
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x02046D20
	b _02046D58
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x02046D24
	b _02046D58
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x02046D28
	b _02046D54
	arm_func_end caseD_c
_02046D2C:
	mov r0, #0x22
	b _02046D58
_02046D34:
	mov r0, #4
	b _02046D58
_02046D3C:
	mov r0, #0xc
	b _02046D58
_02046D44:
	mov r0, #4
_02046D48:
	b _02046D58
_02046D4C:
	mov r0, #0x18
	b _02046D58
_02046D54:
	mov r0, #0x30
_02046D58:
	add r0, r0, #4
	bx lr

	arm_func_start FUN_02046d60
FUN_02046d60: ; 0x02046D60
	push {r3, r4, r5, lr}
	mov r5, #0
	mov r4, #1
	ldr r2, _02046D98 ; =0x0209A0F8
	str r5, [r0, #0x5c]
	mov r1, r4
	str r5, [r2]
	bl FUN_0204667c
	ldr r0, _02046D9C ; =0x020A18A0
	mov r1, r4
	bl FUN_0203e214
	ldr r0, _02046DA0 ; =0x020B5BF8
	strb r5, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0_02046D98: .word 0x0209A0F8
_02046D9C: .word 0x020A18A0
_02046DA0: .word 0x020B5BF8
	arm_func_end FUN_02046d60

	arm_func_start FUN_02046da4
FUN_02046da4: ; 0x02046DA4
	push {r4, lr}
	mov r4, r0
	bl FUN_02046698
	cmp r0, #1
	popne {r4, pc}
	mov r2, #1
	mov r0, r4
	mov r1, #2
	str r2, [r4, #0x5c]
	bl FUN_0204667c
	pop {r4, pc}
	arm_func_end FUN_02046da4

	arm_func_start FUN_02046dd0
FUN_02046dd0: ; 0x02046DD0
	push {r4, lr}
	mov r4, r0
	bl FUN_02046698
	cmp r0, #1
	popne {r4, pc}
	mov r2, #2
	mov r0, r4
	mov r1, #6
	str r2, [r4, #0x5c]
	bl FUN_0204667c
	pop {r4, pc}
	arm_func_end FUN_02046dd0

	arm_func_start FUN_02046dfc
FUN_02046dfc: ; 0x02046DFC
	push {r4, lr}
	mov r4, r0
	ldr r0, _02046E24 ; =0x020A18A0
	bl FUN_0203f91c
	mov r2, #2
	mov r0, r4
	mov r1, #6
	str r2, [r4, #0x5c]
	bl FUN_0204667c
	pop {r4, pc}
	.align 2, 0_02046E24: .word 0x020A18A0
	arm_func_end FUN_02046dfc

	arm_func_start FUN_02046e28
FUN_02046e28: ; 0x02046E28
	push {r3, lr}
	bl FUN_02046700
	cmp r0, #0
	popeq {r3, pc}
	ldr r0, _02046E44 ; =0x020A18A0
	bl FUN_0203e3f0
	pop {r3, pc}
	.align 2, 0_02046E44: .word 0x020A18A0
	arm_func_end FUN_02046e28

	arm_func_start FUN_02046e48
FUN_02046e48: ; 0x02046E48
	push {r3, lr}
	bl FUN_02046698
	cmp r0, #0xb
	arm_func_end FUN_02046e48

	arm_func_start switchD
switchD: ; 0x02046E54
	addls pc, pc, r0, lsl #2
	arm_func_end switchD

	arm_func_start caseD_c
caseD_c: ; 0x02046E58
	pop {r3, pc}
	arm_func_end caseD_c
_02046E5C: ; jump table
	pop {r3, pc} ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02046E60
	pop {r3, pc}
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02046E64
	pop {r3, pc}
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02046E68
	pop {r3, pc}
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02046E6C
	pop {r3, pc}
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02046E70
	pop {r3, pc}
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02046E74
	b _02046E8C
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02046E78
	b _02046E8C
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02046E7C
	b _02046E8C
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02046E80
	b _02046E98
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x02046E84
	pop {r3, pc}
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x02046E88
	b _02046E98
	arm_func_end caseD_b
_02046E8C:
	ldr r0, _02046EA4 ; =0x020A18A0
	bl thunk_FUN_0203f7bc
	pop {r3, pc}
_02046E98:
	ldr r0, _02046EA4 ; =0x020A18A0
	bl FUN_0203e3f0
	pop {r3, pc}
	.align 2, 0_02046EA4: .word 0x020A18A0

	arm_func_start FUN_02046ea8
FUN_02046ea8: ; 0x02046EA8
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02046698
	cmp r0, #7
	popne {r3, r4, r5, pc}
	mov r0, r5
	mov r1, #8
	strb r4, [r5, #0x67]
	bl FUN_0204667c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02046ea8

	arm_func_start FUN_02046ed4
FUN_02046ed4: ; 0x02046ED4
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02046698
	cmp r0, #2
	beq _02046EFC
	cmp r0, #3
	beq _02046F20
	cmp r0, #4
	beq _02046F48
	b _02046F94
	arm_func_end FUN_02046ed4
_02046EFC:
	ldr r0, _02046F9C ; =0x020A18A0
	mov r1, #0
	bl FUN_0203ed6c
	cmp r0, #0
	beq _02046F94
	mov r0, r5
	mov r1, #3
_02046F18:
	bl FUN_0204667c
	b _02046F94
_02046F20:
	add r1, r5, #0xc2
	ldr r0, _02046F9C ; =0x020A18A0
	add r2, r1, #0x200
	mov r1, #3
	bl FUN_0203eca8
	cmp r0, #0
	beq _02046F94
	mov r0, r5
	mov r1, #4
	b _02046F18
_02046F48:
	ldrb r0, [r5, #0x65]
	mov r4, #0
	mov r1, #4
	cmp r0, #0
	ldr r0, _02046F9C ; =0x020A18A0
	movne r1, #2
	mov r2, r4
	mov r3, r4
	bl FUN_0203eefc
	cmp r0, #0
	beq _02046F94
	mov r0, r5
	mov r1, #5
	strb r4, [r5, #0x66]
	bl FUN_0204667c
	ldr r1, _02046FA0 ; =0x0209A0F8
	mov r0, #1
	str r0, [r1]
	pop {r3, r4, r5, pc}
_02046F94:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_02046F9C: .word 0x020A18A0
_02046FA0: .word 0x0209A0F8

	arm_func_start FUN_02046fa4
FUN_02046fa4: ; 0x02046FA4
	mov r0, #1
	bx lr
	arm_func_end FUN_02046fa4

	arm_func_start FUN_02046fac
FUN_02046fac: ; 0x02046FAC
	push {r4, lr}
	mov r4, r0
	bl FUN_020466a0
	mov r0, r4
	bl FUN_02046698
	cmp r0, #6
	bne _02046FFC
	mov r1, #0
	ldr r0, _02047004 ; =0x020A18A0
	mov r2, r1
	bl FUN_0203f168
	cmp r0, #0
	beq _02046FFC
	mov r0, r4
	mov r1, #7
	bl FUN_0204667c
	ldr r1, _02047008 ; =0x0209A0F8
	mov r0, #1
	str r0, [r1]
	pop {r4, pc}
	arm_func_end FUN_02046fac
_02046FFC:
	mov r0, #0
	pop {r4, pc}
	.align 2, 0_02047004: .word 0x020A18A0
_02047008: .word 0x0209A0F8

	arm_func_start FUN_0204700c
FUN_0204700c: ; 0x0204700C
	push {r4, r5, r6, lr}
	mov r4, r0
	bl FUN_02046698
	cmp r0, #0xa
	arm_func_end FUN_0204700c

	arm_func_start switchD
switchD: ; 0x0204701C
	addls pc, pc, r0, lsl #2
	b _02047144
	arm_func_end switchD
_02047024: ; jump table
	b _02047144 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02047028
	b _02047144
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0204702C
	b _02047144
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02047030
	b _02047144
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02047034
	b _02047144
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02047038
	b _02047144
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0204703C
	b _02047144
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02047040
	b _02047050
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02047044
	b _02047080
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02047048
	b _020470D0
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0204704C
	b _02047108
	arm_func_end caseD_a
_02047050:
	mov r6, #0
	ldr r5, _0204714C ; =0x020A18A0
	b _02047074
_0204705C:
	mov r0, r5
	mov r1, r6
	bl FUN_0203e2d0
	add r1, r4, r6, lsl #2
	str r0, [r1, #0x27c]
	add r6, r6, #1
_02047074:
	cmp r6, #0x10
	blt _0204705C
	b _02047144
_02047080:
	ldr r5, _0204714C ; =0x020A18A0
	ldrb r1, [r4, #0x67]
	mov r0, r5
	bl FUN_0203e2d0
	cmp r0, #0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r5
	bl thunk_FUN_0203f7bc
	add r1, r4, #0xc2
	mov r0, r5
	add r2, r1, #0x200
	mov r1, #3
	bl FUN_0203eca8
	cmp r0, #0
	beq _02047144
	mov r0, r4
	mov r1, #9
_020470C8:
	bl FUN_0204667c
	b _02047144
_020470D0:
	ldrb r0, [r4, #0x65]
	ldrb r2, [r4, #0x67]
	mov r1, #4
	cmp r0, #0
	ldr r0, _0204714C ; =0x020A18A0
	movne r1, #2
	bl FUN_0203f840
	cmp r0, #0
	beq _02047100
	mov r0, r4
	mov r1, #0xa
	b _020470C8
_02047100:
	mvn r0, #0
	pop {r4, r5, r6, pc}
_02047108:
	ldr r5, _0204714C ; =0x020A18A0
	mov r0, r5
	bl FUN_0203e1d0
	cmp r0, #9
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r5
	bl FUN_0203e1e8
	cmp r0, #0
	beq _02047144
	mov r0, r4
	mov r1, #0xb
	bl FUN_0204667c
	mov r0, #1
	pop {r4, r5, r6, pc}
_02047144:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_0204714C: .word 0x020A18A0

	arm_func_start FUN_02047150
FUN_02047150: ; 0x02047150
	push {r3, r4, r5, r6, r7, lr}
	movs r5, r1
	mov r6, r0
	beq _020471E0
	cmp r6, #0
	ldr r4, _020471F0 ; =0x0209AF58
	bne _020471AC
	ldrb r0, [r5]
	ldr r7, _020471F4 ; =0x0209AEC0
	strh r0, [r7, #0x6a]
	ldrb r1, [r5, #1]
	cmp r1, #0
	ldrbne r2, [r5, #2]
	cmpne r2, #0
	beq _020471D0
	mov r0, r7
	lsl r1, r1, #2
	lsl r2, r2, #2
	bl FUN_02046bfc
	ldr r2, [r7, #0x90]
	mov r1, r4
	add r0, r5, #4
	b _020471CC
	arm_func_end FUN_02047150
_020471AC:
	ldr r0, _020471F4 ; =0x0209AEC0
	mov r1, r6
	ldr r7, [r0, #0x7c]
	bl FUN_02046c98
	mov r1, r0
	mov r0, r5
	mov r2, r7
	add r1, r4, r1
_020471CC:
	bl _memcpy
_020471D0:
	ldr r0, _020471F8 ; =0x0209AF54
	mov r1, #1
	strb r1, [r0, r6]
	pop {r3, r4, r5, r6, r7, pc}
_020471E0:
	ldr r0, _020471F8 ; =0x0209AF54
	mov r1, #0
	strb r1, [r0, r6]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020471F0: .word 0x0209AF58
_020471F4: .word 0x0209AEC0
_020471F8: .word 0x0209AF54

	arm_func_start FUN_020471fc
FUN_020471fc: ; 0x020471FC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	ldr r1, _020473D0 ; =0x0208C408
	ldr r5, _020473D4 ; =0x020A18A0
	mov r4, r0
	add r6, sp, #0
	ldm r1, {r0, r1, r2, r3}
	stm r6, {r0, r1, r2, r3}
	mov r0, r5
	bl FUN_0203e1e8
	cmp r0, #0
	bne _02047280
	ldrb r0, [r4, #0x66]
	cmp r0, #0
	beq _02047274
	mov r0, r4
	bl FUN_02046700
	cmp r0, #0
	beq _02047274
	ldr r0, _020473D8 ; =0x020A0640
	ldrb r0, [r0, #0xae]
	cmp r0, #0
	bne _02047274
	mov r5, #0xc
	mov r0, r4
	mov r1, r5
	bl FUN_0204667c
	add sp, sp, #0x10
	sub r0, r5, #0xd
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020471fc
_02047274:
	add sp, sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02047280:
	mov r0, r5
	bl FUN_0203e1d0
	cmp r0, #9
	bne _020472CC
	mov r0, r4
	bl FUN_02046700
	cmp r0, #0
	beq _020472CC
	ldr r0, _020473D8 ; =0x020A0640
	ldrb r0, [r0, #0xae]
	cmp r0, #0
	bne _020472CC
	mov r5, #0xc
	mov r0, r4
	mov r1, r5
	bl FUN_0204667c
	add sp, sp, #0x10
	sub r0, r5, #0xd
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020472CC:
	ldr fp, _020473D4 ; =0x020A18A0
	mov r0, fp
	bl FUN_0203e1d0
	cmp r0, #6
	addne sp, sp, #0x10
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, _020473DC ; =0x0209AA60
	mov r2, #1
	mov r0, fp
	strb r2, [r4, #0x66]
	bl FUN_0203e89c
	cmp r0, #0
	beq _020473C4
	ldr r0, _020473E0 ; =0x0209AEC0
	bl FUN_02046744
	ldr r1, _020473E4 ; =0x0209A10C
	mov sb, r0
	ldr r0, [r1]
	ldr r2, _020473E8 ; =0x0209E6C0
	add r0, r0, #1
	and r1, r0, #3
	mov r0, #0x3c0
	mla r7, r1, r0, r2
	mov sl, #0
	add r6, sp, #0
	mov r8, #1
	mov r4, #0xf0
	ldr r5, _020473EC ; =0x020A3CA0
	b _0204736C
_02047344:
	tst sb, r8, lsl sl
	beq _02047368
	mla r2, sl, r4, r7
	lsl r1, sl, #0x10
	ldrh r3, [r5, #0x66]
	mov r0, fp
	lsr r1, r1, #0x10
	bl FUN_0203eab8
	str r0, [r6, sl, lsl #2]
_02047368:
	add sl, sl, #1
_0204736C:
	cmp sl, #4
	blt _02047344
	ldr r0, _020473F0 ; =0x0209A138
	ldr r2, [sp]
	ldr r3, [r0]
	ldr r1, _020473E4 ; =0x0209A10C
	add r3, r3, #1
	str r3, [r0]
	cmp r2, #0
	ldrne r0, [sp, #4]
	ldr r4, [r1]
	cmpne r0, #0
	ldrne r0, [sp, #8]
	add r4, r4, #1
	cmpne r0, #0
	ldrne r0, [sp, #0xc]
	add sp, sp, #0x10
	cmpne r0, #0
	movne r0, #1
	str r4, [r1]
	moveq r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020473C4:
	mov r0, #0
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020473D0: .word 0x0208C408
_020473D4: .word 0x020A18A0
_020473D8: .word 0x020A0640
_020473DC: .word 0x0209AA60
_020473E0: .word 0x0209AEC0
_020473E4: .word 0x0209A10C
_020473E8: .word 0x0209E6C0
_020473EC: .word 0x020A3CA0
_020473F0: .word 0x0209A138

	arm_func_start FUN_020473f4
FUN_020473f4: ; 0x020473F4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	ldr r1, _02047554 ; =0x0208C418
	add r4, sp, #0
	mov r5, r0
	ldm r1, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r0, _02047558 ; =0x020A18A0
	bl FUN_0203e1d0
	mov r4, r0
	cmp r4, #9
	bne _02047460
	mov r0, r5
	bl FUN_02046700
	cmp r0, #0
	beq _02047460
	ldr r0, _0204755C ; =0x020A0640
	ldrb r0, [r0, #0xae]
	cmp r0, #0
	bne _02047460
	mov r4, #0xc
	mov r0, r5
	mov r1, r4
	bl FUN_0204667c
	add sp, sp, #0x10
	sub r0, r4, #0xd
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020473f4
_02047460:
	cmp r4, #6
	addne sp, sp, #0x10
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr fp, _02047558 ; =0x020A18A0
	ldr r1, _02047560 ; =0x0209AA60
	mov r0, fp
	bl FUN_0203e89c
	cmp r0, #0
	beq _02047548
	ldr r0, _02047564 ; =0x0209AEC0
	bl FUN_02046744
	ldr r1, _02047568 ; =0x0209A10C
	mov sb, r0
	ldr r0, [r1]
	ldr r2, _0204756C ; =0x0209E6C0
	add r0, r0, #1
	and r1, r0, #3
	mov r0, #0x3c0
	mla r7, r1, r0, r2
	mov sl, #0
	add r6, sp, #0
	mov r8, #1
	mov r4, #0xf0
	ldr r5, _02047570 ; =0x020A3CA0
	b _020474F0
_020474C8:
	tst sb, r8, lsl sl
	beq _020474EC
	mla r2, sl, r4, r7
	lsl r1, sl, #0x10
	ldrh r3, [r5, #0x66]
	mov r0, fp
	lsr r1, r1, #0x10
	bl FUN_0203eab8
	str r0, [r6, sl, lsl #2]
_020474EC:
	add sl, sl, #1
_020474F0:
	cmp sl, #4
	blt _020474C8
	ldr r0, _02047574 ; =0x0209A138
	ldr r2, [sp]
	ldr r3, [r0]
	ldr r1, _02047568 ; =0x0209A10C
	add r3, r3, #1
	str r3, [r0]
	cmp r2, #0
	ldrne r0, [sp, #4]
	ldr r4, [r1]
	cmpne r0, #0
	ldrne r0, [sp, #8]
	add r4, r4, #1
	cmpne r0, #0
	ldrne r0, [sp, #0xc]
	add sp, sp, #0x10
	cmpne r0, #0
	movne r0, #1
	str r4, [r1]
	moveq r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02047548:
	mov r0, #0
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02047554: .word 0x0208C418
_02047558: .word 0x020A18A0
_0204755C: .word 0x020A0640
_02047560: .word 0x0209AA60
_02047564: .word 0x0209AEC0
_02047568: .word 0x0209A10C
_0204756C: .word 0x0209E6C0
_02047570: .word 0x020A3CA0
_02047574: .word 0x0209A138
_02047578:
	.byte 0x08, 0x40, 0x2D, 0xE9, 0x00, 0x00, 0x50, 0xE3
	.byte 0x08, 0x80, 0xBD, 0x08, 0x04, 0x00, 0x9F, 0xE5, 0xB3, 0xFD, 0xFF, 0xEB, 0x08, 0x80, 0xBD, 0xE8
	.byte 0xC0, 0xAE, 0x09, 0x02

	arm_func_start FUN_02047594
FUN_02047594: ; 0x02047594
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	ldr r1, _02047870 ; =0x0208C3F8
	ldr r5, _02047874 ; =0x020A18A0
	mov sl, r0
	add r4, sp, #0
	ldm r1, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	mov r0, r5
	ldr r4, _02047878 ; =0x020A3CA0
	mov r7, #1
	bl FUN_0203e1e8
	cmp r0, #0
	bne _02047610
	ldrb r0, [sl, #0x66]
	cmp r0, #0
	beq _02047604
	mov r0, sl
	bl FUN_02046700
	cmp r0, #0
	beq _02047604
	mov r4, #0xc
	mov r0, sl
	mov r1, r4
	bl FUN_0204667c
	add sp, sp, #0x10
	sub r0, r4, #0xd
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02047594
_02047604:
	add sp, sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02047610:
	mov r0, r5
	bl FUN_0203e1d0
	cmp r0, #9
	bne _0204764C
	mov r0, sl
	bl FUN_02046700
	cmp r0, #0
	beq _0204764C
	mov r4, #0xc
	mov r0, sl
	mov r1, r4
	bl FUN_0204667c
	add sp, sp, #0x10
	sub r0, r4, #0xd
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204764C:
	ldr r0, _02047874 ; =0x020A18A0
	bl FUN_0203e1d0
	cmp r0, #4
	addne sp, sp, #0x10
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	bl FUN_02046744
	ldrb fp, [sl, #0x88]
	mov r8, r0
	cmp fp, #0
	bne _020476D8
	mov sb, #1
	add r6, sl, #0x98
	ldr r5, _0204787C ; =0x0209AA60
	b _020476C8
_0204768C:
	tst r8, r7, lsl sb
	addne r0, sl, sb
	ldrbne r0, [r0, #0x94]
	cmpne r0, #0
	beq _020476C4
	lsl r1, sb, #0x10
	mov r0, sl
	lsr r1, r1, #0x10
	bl FUN_02046c98
	add r1, r0, #4
	ldr r2, [sl, #0x7c]
	add r0, r6, r0
	add r1, r5, r1
	bl _memcpy
_020476C4:
	add sb, sb, #1
_020476C8:
	ldrh r0, [r4, #0x5e]
	cmp sb, r0
	blt _0204768C
	b _02047704
_020476D8:
	ldr r0, [sl, #0x8c]
	sub r0, r0, #1
	str r0, [sl, #0x8c]
	cmp r0, #0
	bgt _02047704
	mov r0, #0x78
	str r0, [sl, #0x8c]
	ldrh r1, [r4, #0x6c]
	ldr r0, _02047880 ; =0x0000FFEF
	and r0, r1, r0
	strh r0, [r4, #0x6c]
_02047704:
	ldr r1, [sl, #0x90]
	mov r0, #1
	lsl r2, r1, #0x10
	strb r0, [sl, #0x66]
	mov r3, #0
	cmp fp, #0
	ldrne r3, _02047884 ; =0x02047578
	ldr r0, _02047874 ; =0x020A18A0
	ldr r1, _0204787C ; =0x0209AA60
	lsr r2, r2, #0x10
	ldr r4, _02047878 ; =0x020A3CA0
	bl FUN_0203e930
	cmp r0, #0
	beq _02047864
	cmp fp, #0
	ldrhne r1, [r4, #0x6c]
	addne sp, sp, #0x10
	movne r0, #0
	orrne r1, r1, #0x10
	strhne r1, [r4, #0x6c]
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _02047888 ; =0x0209A10C
	ldr r5, _0204788C ; =0x0209E6C0
	ldr r1, [r0]
	mov r0, #0x3c0
	add r6, r1, #1
	and r2, r6, #3
	mla r1, r2, r0, r5
	ldr r2, [sl, #0x78]
	ldr r0, _02047890 ; =0x0209AA64
	bl _memcpy
	and r1, r6, #3
	mov r0, #0x3c0
	mla r5, r1, r0, r5
	mov sb, #1
	add r6, sl, #0x98
	add r7, sp, #0
	mov fp, #0xf0
	b _020477E0
_020477A0:
	mov r0, #1
	tst r8, r0, lsl sb
	addne r0, sl, sb
	ldrbne r0, [r0, #0x94]
	strne r0, [r7, sb, lsl #2]
	cmpne r0, #0
	beq _020477DC
	lsl r1, sb, #0x10
	mov r0, sl
	lsr r1, r1, #0x10
	bl FUN_02046c98
	mla r1, sb, fp, r5
	ldr r2, [sl, #0x7c]
	add r0, r6, r0
	bl _memcpy
_020477DC:
	add sb, sb, #1
_020477E0:
	ldrh r0, [r4, #0x5e]
	cmp sb, r0
	blt _020477A0
	ldr r1, [sp]
	ldr r0, _02047878 ; =0x020A3CA0
	cmp r1, #0
	ldrne r1, [sp, #4]
	mov r3, #0
	cmpne r1, #0
	ldrne r1, [sp, #8]
	cmpne r1, #0
	ldrne r1, [sp, #0xc]
	cmpne r1, #0
	beq _02047858
	ldr r2, _02047888 ; =0x0209A10C
	ldr r1, _02047894 ; =0x0209A138
	ldr r5, [r2]
	ldr r4, [r1]
	add r5, r5, #1
	add r4, r4, #1
	str r5, [r2]
	str r4, [r1]
	mov r2, #1
	b _0204784C
_02047840:
	add r1, sl, r2
	strb r3, [r1, #0x94]
	add r2, r2, #1
_0204784C:
	ldrh r1, [r0, #0x5e]
	cmp r2, r1
	blt _02047840
_02047858:
	add sp, sp, #0x10
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02047864:
	mov r0, #0
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02047870: .word 0x0208C3F8
_02047874: .word 0x020A18A0
_02047878: .word 0x020A3CA0
_0204787C: .word 0x0209AA60
_02047880: .word 0x0000FFEF
_02047884: .word 0x02047578
_02047888: .word 0x0209A10C
_0204788C: .word 0x0209E6C0
_02047890: .word 0x0209AA64
_02047894: .word 0x0209A138

	arm_func_start FUN_02047898
FUN_02047898: ; 0x02047898
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	ldr r1, _020479F4 ; =0x0208C428
	add r4, sp, #0
	mov sl, r0
	ldm r1, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r0, _020479F8 ; =0x020A18A0
	bl FUN_0203e1d0
	mov r4, r0
	cmp r4, #9
	bne _020478F4
	mov r0, sl
	bl FUN_02046700
	cmp r0, #0
	beq _020478F4
	mov r4, #0xc
	mov r0, sl
	mov r1, r4
	bl FUN_0204667c
	add sp, sp, #0x10
	sub r0, r4, #0xd
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02047898
_020478F4:
	cmp r4, #4
	addne sp, sp, #0x10
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r8, #0
	ldr r0, _020479F8 ; =0x020A18A0
	ldr r1, _020479FC ; =0x0209AA60
	mov r3, r8
	mov r2, #0x78
	bl FUN_0203e930
	cmp r0, #0
	beq _020479E8
	mov r0, sl
	bl FUN_02046744
	ldrb r1, [sl, #0x94]
	mov r7, r0
	cmp r1, #0
	addeq sp, sp, #0x10
	moveq r0, r8
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _02047A00 ; =0x0209A10C
	strb r8, [sl, #0x94]
	ldr r0, [r0]
	ldr r2, _02047A04 ; =0x0209E6C0
	add r0, r0, #1
	and r1, r0, #3
	mov r0, #0x3c0
	mla r4, r1, r0, r2
	add r5, sl, #0x98
	mov r6, #1
	ldr fp, _02047A08 ; =0x020A3CA0
	b _020479B0
_02047974:
	tst r7, r6, lsl r8
	beq _020479AC
	cmp r8, #0
	ldreq sb, [sl, #0x78]
	lsl r1, r8, #0x10
	mov r0, sl
	lsr r1, r1, #0x10
	ldrne sb, [sl, #0x7c]
	bl FUN_02046c98
	mov r1, #0xf0
	mla r1, r8, r1, r4
	mov r2, sb
	add r0, r5, r0
	bl _memcpy
_020479AC:
	add r8, r8, #1
_020479B0:
	ldrh r0, [fp, #0x5e]
	cmp r8, r0
	blt _02047974
	ldr r0, _02047A0C ; =0x0209A138
	ldr r1, _02047A00 ; =0x0209A10C
	ldr r2, [r0]
	ldr r3, [r1]
	add r2, r2, #1
	add r3, r3, #1
	str r2, [r0]
	add sp, sp, #0x10
	str r3, [r1]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020479E8:
	mov r0, r8
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020479F4: .word 0x0208C428
_020479F8: .word 0x020A18A0
_020479FC: .word 0x0209AA60
_02047A00: .word 0x0209A10C
_02047A04: .word 0x0209E6C0
_02047A08: .word 0x020A3CA0
_02047A0C: .word 0x0209A138

	arm_func_start FUN_02047a10
FUN_02047a10: ; 0x02047A10
	push {r4, lr}
	mov r4, r0
	bl FUN_02046698
	cmp r0, #5
	beq _02047A30
	cmp r0, #0xb
	beq _02047A50
	b _02047A70
	arm_func_end FUN_02047a10
_02047A30:
	ldrb r0, [r4, #0x65]
	cmp r0, #0
	mov r0, r4
	bne _02047A48
	bl FUN_02047594
	b _02047A74
_02047A48:
	bl FUN_020471fc
	b _02047A74
_02047A50:
	ldrb r0, [r4, #0x65]
	cmp r0, #0
	mov r0, r4
	bne _02047A68
	bl FUN_02047898
	b _02047A74
_02047A68:
	bl FUN_020473f4
	b _02047A74
_02047A70:
	mvn r0, #0
_02047A74:
	str r0, [r4, #0x60]
	pop {r4, pc}

	arm_func_start FUN_02047a7c
FUN_02047a7c: ; 0x02047A7C
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr ip, _02047ACC ; =FUN_02048c80
	ldr r3, _02047AD0 ; =FUN_02048c5c
	mov r1, #0x10
	mov r2, #0x1b8
	mov r4, r0
	str ip, [sp]
	bl FUN_0201e1f8
	mov r2, #0
	mov r1, r2
	arm_func_end FUN_02047a7c
_02047AA8:
	add r0, r4, r2, lsl #2
	add r0, r0, #0x1000
	add r2, r2, #1
	str r1, [r0, #0xb88]
	cmp r2, #8
	blt _02047AA8
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_02047ACC: .word FUN_02048c80
_02047AD0: .word FUN_02048c5c

	arm_func_start FUN_02047ad4
FUN_02047ad4: ; 0x02047AD4
	push {r4, lr}
	ldr r3, _02047AF4 ; =FUN_02048c80
	mov r1, #0x10
	mov r2, #0x1b8
	mov r4, r0
	bl FUN_0201e338
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02047AF4: .word FUN_02048c80
	arm_func_end FUN_02047ad4

	arm_func_start FUN_02047af8
FUN_02047af8: ; 0x02047AF8
	push {r4, r5, r6, lr}
	mov r4, r0
	mov r1, #0
	add r0, r4, #0x1000
	str r1, [r0, #0xbb8]
	mov r6, r1
	arm_func_end FUN_02047af8
_02047B10:
	add r0, r4, r1, lsl #2
	add r0, r0, #0x1000
	str r6, [r0, #0xccc]
	add r1, r1, #1
	str r6, [r0, #0xce4]
	cmp r1, #6
	blt _02047B10
	mov r5, #0x1b8
_02047B30:
	mla r0, r6, r5, r4
	mov r1, r4
	bl FUN_02048c98
	add r6, r6, #1
	cmp r6, #0x10
	blt _02047B30
	mov r6, #0
	mov r5, #0x2bc
_02047B50:
	mov r0, r5
	bl FUN_0201e014
	cmp r0, #0
	beq _02047B64
	bl FUN_020FE4F4
_02047B64:
	add r1, r4, r6, lsl #2
	add r2, r1, #0x1000
	mov r1, r4
	str r0, [r2, #0xb88]
	bl FUN_020FE51C
	add r6, r6, #1
	cmp r6, #0xb
	blt _02047B50
	add r0, r4, #0x1fc
	mov r5, #0
	mov r1, r5
	add r0, r0, #0x1c00
	mov r2, #0xc
	bl MemWrite
	add r0, r4, #0x208
	mov r1, r5
	add r0, r0, #0x1c00
	mov r2, #0x84
	bl MemWrite
	add r1, r4, #0x1000
	mov r0, r4
	strb r5, [r1, #0xe8c]
	bl FUN_02047e30
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02047bc4
FUN_02047bc4: ; 0x02047BC4
	push {r4, r5, r6, lr}
	mov r4, r0
	add r0, r4, #0xfc
	mov r6, #0
	mov r5, #0x100
	mov r1, r6
	mov r2, r5
	add r0, r0, #0x1c00
	bl MemWrite
	add r0, r4, #0x3bc
	mov r1, r6
	add r0, r0, #0x1800
	mov r2, #0x10
	bl MemWrite
	add r0, r4, #0x3cc
	mov r1, r6
	mov r2, r5
	add r0, r0, #0x1800
	bl MemWrite
	mov r6, #1
	mov r5, #0x1b8
	arm_func_end FUN_02047bc4
_02047C18:
	mla r0, r6, r5, r4
	bl FUN_0204912c
	add r6, r6, #1
	cmp r6, #0xb
	blt _02047C18
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02047c30
FUN_02047c30: ; 0x02047C30
	push {r3, r4, r5, lr}
	ldr r0, _02047C64 ; =0x0209A250
	mov r2, #2
	mov r3, #1
	mov r5, r1
	bl FUN_0202de58
	movs r4, r0
	beq _02047C5C
	mov r2, r5
	mov r1, #0
	bl MemWrite
	arm_func_end FUN_02047c30
_02047C5C:
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_02047C64: .word 0x0209A250

	arm_func_start LAB_02047c68
LAB_02047c68: ; 0x02047C68
	ldr r0, _02047C74 ; =0x0209A250
	ldr ip, _02047C78 ; =FUN_0202e1c0
	bx ip
	.align 2, 0_02047C74: .word 0x0209A250
_02047C78: .word FUN_0202e1c0
	arm_func_end LAB_02047c68

	arm_func_start FUN_02047c7c
FUN_02047c7c: ; 0x02047C7C
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	add r0, r4, #0xfc
	add r0, r0, #0x1c00
	mov r2, #0x100
	mov r5, r1
	bl _memcpy
	add r0, r4, #0x1fc
	add r0, r0, #0x1c00
	add r1, r5, #0x580
	mov r2, #0xc
	bl _memcpy
	add r7, r5, #0x100
	mov r8, #0
	mov r5, #0x1b8
	mov r6, #0x48
	arm_func_end FUN_02047c7c
_02047CBC:
	mla r0, r8, r5, r4
	mla r1, r8, r6, r7
	bl FUN_0204930c
	add r8, r8, #1
	cmp r8, #0x10
	blt _02047CBC
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02047cdc
FUN_02047cdc: ; 0x02047CDC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x38
	mov r8, r0
	mov r7, r1
	add r1, r8, #0xfc
	mov r0, r7
	add r1, r1, #0x1c00
	mov r2, #0x100
	bl _memcpy
	add r1, r8, #0x1fc
	add r0, r7, #0x580
	add r1, r1, #0x1c00
	mov r2, #0xc
	bl _memcpy
	mov r6, #0
	add fp, r7, #0x100
	mov sl, r6
	arm_func_end FUN_02047cdc
_02047D20:
	cmp r6, #0xd
	mov r0, #0x48
	bge _02047D70
	mul sb, r6, r0
	mov r0, #0x1b8
	mul r4, r6, r0
	add r0, r7, sb
	ldr r5, [r0, #0x100]
	add r0, r8, r4
	bl FUN_0204912c
	add r0, r8, r5, lsl #2
	add r3, r0, #0x1000
	add r0, r8, r4
	ldr r4, [r3, #0xce4]
	add r2, fp, sb
	str r4, [sp]
	ldr r3, [r3, #0xccc]
	mov r1, r6
	bl FUN_02049354
	b _02047E08
_02047D70:
	mla r0, r6, r0, r7
	ldr r4, [r0, #0x100]
	ldr r5, [r0, #0x104]
	cmp r4, #0
	sub sb, r6, #0xd
	bne _02047D90
	cmp r5, #0
	beq _02047E08
_02047D90:
	add r0, sp, #0xc
	mov r1, sl
	mov r2, #0x2c
	bl MemWrite
	add r2, r8, sb, lsl #2
	add r2, r2, #0x1000
	ldr r3, [r2, #0xdfc]
	mov r0, r8
	mov r1, sb
	add r2, sp, #0xc
	bl FUN_02048b4c
	movs sb, r0
	beq _02047E08
	add r0, r8, r4, lsl #2
	add r1, r0, #0x1000
	mov r0, #0x1b8
	str r6, [sb, #0x18]
	mov r2, r4
	ldr r4, [r1, #0xccc]
	mla r0, r6, r0, r8
	str r4, [sp]
	ldr r4, [r1, #0xce4]
	mov r3, r5
	mov r1, r6
	stmib sp, {r4, sl}
	bl FUN_02049038
	cmp r0, #0
	movne r0, #0x2000
	strne r0, [sb, #0x1c]
	strne sl, [sb, #0xc]
_02047E08:
	add r6, r6, #1
	cmp r6, #0x10
	blt _02047D20
	mov r0, #1
	add sp, sp, #0x38
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02047e20
FUN_02047e20: ; 0x02047E20
	add r0, r0, #0xfc
	add r0, r0, #0x1c00
	add r0, r0, r1, lsl #2
	bx lr
	arm_func_end FUN_02047e20

	arm_func_start FUN_02047e30
FUN_02047e30: ; 0x02047E30
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x78
	ldr r6, _02047F6C ; =0x02090278
	mov sb, r0
	ldm r6!, {r0, r1, r2, r3}
	add r8, sp, #0x64
	mov r7, r8
	ldr r4, _02047F70 ; =0x0209028C
	stm r8!, {r0, r1, r2, r3}
	ldm r4!, {r0, r1, r2, r3}
	ldr r6, [r6]
	add r5, sp, #0x50
	str r6, [r8]
	mov r6, r5
	stm r5!, {r0, r1, r2, r3}
	ldr r4, [r4]
	mov r8, #1
	str r4, [r5]
	ldr r4, _02047F74 ; =0x0209A250
	mov fp, #0
	add r5, sp, #0x10
	arm_func_end FUN_02047e30
_02047E84:
	add r0, sb, r8, lsl #2
	add sl, r0, #0xcc
	add r0, r0, #0x1000
	ldr r0, [r0, #0xccc]
	cmp r0, #0
	bne _02047EE8
	ldr r1, _02047F78 ; =0x020902A0
	ldr r2, [r7, r8, lsl #2]
	mov r0, r5
	bl FUN_02023c40
	mov r0, r4
	mov r1, #4
	bl FUN_0202e19c
	ldr r0, [r4]
	cmp r0, #0
	beq _02047EE8
	str fp, [sp]
	str fp, [sp, #4]
	str fp, [sp, #8]
	mov r1, #1
	str r1, [sp, #0xc]
	add r2, sl, #0x1c00
	mov r1, r5
	mov r3, r4
	bl FUN_0202eff0
_02047EE8:
	add r0, sb, r8, lsl #2
	add sl, r0, #0xe4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xce4]
	cmp r0, #0
	bne _02047F58
	ldr r2, [r6, r8, lsl #2]
	cmp r2, #0
	beq _02047F58
	ldr r1, _02047F7C ; =0x020902B4
	mov r0, r5
	bl FUN_02023c40
	mov r0, r4
	mov r1, #4
	bl FUN_0202e19c
	ldr r0, [r4]
	cmp r0, #0
	beq _02047F58
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	str r1, [sp, #8]
	mov r1, #1
	str r1, [sp, #0xc]
	add r2, sl, #0x1c00
	mov r1, r5
	mov r3, r4
	bl FUN_0202eff0
_02047F58:
	add r8, r8, #1
	cmp r8, #4
	ble _02047E84
	add sp, sp, #0x78
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02047F6C: .word 0x02090278
_02047F70: .word 0x0209028C
_02047F74: .word 0x0209A250
_02047F78: .word 0x020902A0
_02047F7C: .word 0x020902B4

	arm_func_start FUN_02047f80
FUN_02047f80: ; 0x02047F80
	mov r2, #0x1b8
	mla r0, r1, r2, r0
	bx lr
	arm_func_end FUN_02047f80

	arm_func_start FUN_02047f8c
FUN_02047f8c: ; 0x02047F8C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	mov r8, r2
	add r0, sl, r8, lsl #2
	add r0, r0, #0x1000
	ldr r5, [r0, #0xccc]
	mov sb, r1
	str r5, [sp]
	ldr r5, [r0, #0xce4]
	mov r4, #0x1b8
	mla r0, sb, r4, sl
	str r5, [sp, #4]
	mov r4, #0
	ldr r7, [sp, #0x30]
	mov fp, r3
	str r4, [sp, #8]
	bl FUN_02049038
	cmp r0, #0
	addne sp, sp, #0xc
	movne r0, sb
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, #0
	addeq sp, sp, #0xc
	subeq r0, r4, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, sl, r8, lsl #2
	add r0, r1, #0xe4
	add r1, r1, #0xcc
	add r4, sb, r7
	add r5, r0, #0x1c00
	add r6, r1, #0x1c00
	b _02048054
	arm_func_end FUN_02047f8c
_02048010:
	mov r0, #0x1b8
	ldr r1, [r6]
	mla r0, r4, r0, sl
	str r1, [sp]
	ldr r2, [r5]
	mov r1, sb
	str r2, [sp, #4]
	mov ip, #0
	mov r2, r8
	mov r3, fp
	str ip, [sp, #8]
	bl FUN_02049038
	cmp r0, #0
	addne sp, sp, #0xc
	movne r0, r4
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r4, r4, r7
_02048054:
	cmp r4, #0x10
	blo _02048010
	mvn r0, #0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02048068
FUN_02048068: ; 0x02048068
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r4, [sp, #0x20]
	mov sb, r0
	mov r8, r1
	mov r7, r2
	mov r6, r3
	cmp r4, #0
	mov r4, #0
	bne _020480C8
	mov r3, r4
	add r2, r8, #1
	arm_func_end FUN_02048068
_02048094:
	add r0, sb, r3, lsl #4
	add r0, r0, #0x1000
	ldr r1, [r0, #0xbcc]
	cmp r2, r1
	bne _020480BC
	ldr r0, [r0, #0xbd4]
	cmp r6, r0
	moveq r0, #1
	movne r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020480BC:
	add r3, r3, #1
	cmp r3, #0x10
	blt _02048094
_020480C8:
	mov r5, #0
	mov sl, #0x1b8
_020480D0:
	mla r0, r5, sl, sb
	mov r1, r7
	mov r2, r6
	bl FUN_02049178
	cmp r0, #0
	beq _02048120
	mov r6, #0
	add r2, r5, #1
_020480F0:
	add r3, sb, r6
	add r0, r3, #0x1b00
	ldrsb r1, [r0, #0xbc]
	add r0, r3, #0x3bc
	add r0, r0, #0x1800
	cmp r2, r1
	add r6, r6, #1
	strbeq r4, [r0]
	cmp r6, #0x10
	blt _020480F0
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02048120:
	add r5, r5, #1
	cmp r5, #0x10
	blt _020480D0
	mov r2, #0
_02048130:
	add r0, sb, r2, lsl #4
	add r0, r0, #0x1000
	ldr r1, [r0, #0xbcc]
	cmp r1, #0
	bne _02048164
	add r1, r8, #1
	str r1, [r0, #0xbcc]
	str r7, [r0, #0xbd0]
	ldr r1, [sp, #0x20]
	str r6, [r0, #0xbd4]
	str r1, [r0, #0xbd8]
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02048164:
	add r2, r2, #1
	cmp r2, #0x10
	blt _02048130
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02048178
FUN_02048178: ; 0x02048178
	push {r4, r5, r6, lr}
	mov r6, r0
	cmp r1, #0
	bge _020481B8
	mov r5, #0
	mov r4, #0x1b8
	arm_func_end FUN_02048178
_02048190:
	mla r0, r5, r4, r6
	bl FUN_020491b0
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	add r5, r5, #1
	cmp r5, #0x10
	blt _02048190
	mov r0, #1
	pop {r4, r5, r6, pc}
_020481B8:
	mov r0, #0x1b8
	mla r0, r1, r0, r6
	bl FUN_020491b0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020481c8
FUN_020481c8: ; 0x020481C8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	mov sb, r1
	mov r0, #0x1b8
	mla r0, sb, r0, sl
	mov r7, r3
	mov r3, #0
	mov r4, #5
	mov r8, r2
	str r3, [sp]
	mov r2, r4
	stmib sp, {r3, r8}
	bl FUN_02049038
	cmp r0, #0
	addne sp, sp, #0xc
	movne r0, sb
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, #0
	addeq sp, sp, #0xc
	subeq r0, r4, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov fp, r4
	add r6, sb, r7
	mov r5, #0
	mov r4, #0x1b8
	b _02048264
	arm_func_end FUN_020481c8
_02048234:
	mla r0, r6, r4, sl
	str r5, [sp]
	mov r1, sb
	mov r2, fp
	mov r3, r5
	stmib sp, {r5, r8}
	bl FUN_02049038
	cmp r0, #0
	addne sp, sp, #0xc
	movne r0, r6
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r6, r6, r7
_02048264:
	cmp r6, #0x10
	blo _02048234
	mvn r0, #0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02048278
FUN_02048278: ; 0x02048278
	push {r3, lr}
	bl FUN_02047f80
	ldr r0, [r0, #0x28]
	pop {r3, pc}
	arm_func_end FUN_02048278

	arm_func_start FUN_02048288
FUN_02048288: ; 0x02048288
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	mov r7, r1
	mov r0, #0x1b8
	mla r0, r7, r0, r8
	bl FUN_0204912c
	ldr r0, _02048364 ; =0x02099E91
	ldrb r0, [r0]
	cmp r0, #0
	ldrne r0, _02048368 ; =0x02099E90
	ldrbne r1, [r0]
	cmpne r1, #0
	beq _020482FC
	mov r4, #0
	strb r4, [r0]
	add r0, r8, #0x1000
	ldr r1, [r0, #0xbb8]
	cmp r1, #0
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r0, #0xb90]
	bl FUN_020FE8B0
	add r0, r8, #0x1000
	ldr r0, [r0, #0xb90]
	bl FUN_020FE56C
	add r0, r8, #0x1000
	str r4, [r0, #0xbb8]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02048288
_020482FC:
	add r0, r8, #0x208
	mov r5, #0
	add r4, r0, #0x1c00
	mov sb, #0x2c
_0204830C:
	mul r6, r5, sb
	add r0, r8, r6
	add r0, r0, #0x1000
	ldr r1, [r0, #0xe20]
	cmp r7, r1
	bne _02048350
	ldr r0, [r0, #0xe18]
	cmp r0, #0
	beq _02048350
	bl FUN_020FE8B0
	add r0, r8, r6
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe18]
	bl FUN_020FE56C
	mov r0, r8
	add r1, r4, r6
	bl FUN_02048be4
_02048350:
	add r5, r5, #1
	cmp r5, #3
	blt _0204830C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02048364: .word 0x02099E91
_02048368: .word 0x02099E90

	arm_func_start FUN_0204836c
FUN_0204836c: ; 0x0204836C
	push {r3, lr}
	add r2, r1, #1
	lsl r2, r2, #0x18
	mov ip, #0
	asr r3, r2, #0x18
	arm_func_end FUN_0204836c
_02048380:
	add r2, r0, ip
	add r2, r2, #0x1b00
	ldrsb r2, [r2, #0xbc]
	cmp r3, r2
	moveq r0, #1
	popeq {r3, pc}
	add ip, ip, #1
	cmp ip, #0x10
	blt _02048380
	mov lr, #0
_020483A8:
	add ip, r0, lr
	add r2, ip, #0x1b00
	ldrsb r3, [r2, #0xbc]
	add r2, ip, #0x3bc
	add r2, r2, #0x1800
	cmp r3, #0
	addeq r0, r1, #1
	strbeq r0, [r2]
	moveq r0, #1
	popeq {r3, pc}
	add lr, lr, #1
	cmp lr, #0x10
	blt _020483A8
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_020483e4
FUN_020483e4: ; 0x020483E4
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r2
	mov r6, r0
	mov r5, r1
	mov r2, #0
	arm_func_end FUN_020483e4
_020483F8:
	add r0, r6, r2, lsl #4
	add r0, r0, #0x1000
	ldr r1, [r0, #0xbcc]
	cmp r1, #0
	beq _0204842C
	ldr r1, [r0, #0xbd0]
	cmp r5, r1
	ldreq r1, [r0, #0xbd4]
	cmpeq r4, r1
	moveq r1, #0
	streq r1, [r0, #0xbcc]
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, pc}
_0204842C:
	add r2, r2, #1
	cmp r2, #0x10
	blt _020483F8
	mov r8, #0
	mov r7, #0x1b8
_02048440:
	mla r0, r8, r7, r6
	mov r1, r5
	mov r2, r4
	bl FUN_02049178
	cmp r0, #0
	beq _02048468
	mov r0, r6
	mov r1, r8
	bl FUN_0204836c
	pop {r4, r5, r6, r7, r8, pc}
_02048468:
	add r8, r8, #1
	cmp r8, #0x10
	blt _02048440
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204847c
FUN_0204847c: ; 0x0204847C
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, #1
	mov r4, #0x1b8
	arm_func_end FUN_0204847c
_0204848C:
	mla r0, r5, r4, r6
	bl FUN_0204912c
	add r5, r5, #1
	cmp r5, #0xb
	blt _0204848C
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020484a4
FUN_020484a4: ; 0x020484A4
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _02048504 ; =0x0209A250
	mov r7, r0
	mov r6, #1
	mvn r5, #0
	arm_func_end FUN_020484a4
_020484B8:
	add r0, r7, r6, lsl #2
	add r0, r0, #0x1000
	ldr r1, [r0, #0xccc]
	cmp r1, #0
	beq _020484E8
	ldr r0, [r4]
	cmp r0, #0
	moveq r0, r5
	beq _020484E0
	bl FUN_0202f57c
_020484E0:
	cmp r0, #0
	bgt _020484F4
_020484E8:
	add r6, r6, #1
	cmp r6, #6
	blt _020484B8
_020484F4:
	mov r0, #0
	cmp r6, #6
	moveq r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02048504: .word 0x0209A250

	arm_func_start FUN_02048508
FUN_02048508: ; 0x02048508
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r5, #0
	mov r4, #0x1b8
	arm_func_end FUN_02048508
_02048518:
	add r0, r7, r5
	add r0, r0, #0x1b00
	ldrsb r0, [r0, #0xbc]
	cmp r0, #0
	beq _02048538
	sub r1, r0, #1
	mla r0, r1, r4, r7
	bl FUN_0204912c
_02048538:
	add r5, r5, #1
	cmp r5, #0x10
	blt _02048518
	add r0, r7, #0x3bc
	mov r5, #0
	mov r1, r5
	add r0, r0, #0x1800
	mov r2, #0x10
	bl MemWrite
	mov r6, r5
	mov r4, #1
_02048564:
	add r0, r7, r6, lsl #4
	add r1, r0, #0x1000
	ldr ip, [r1, #0xbcc]
	cmp ip, #0
	beq _020485A8
	ldr r2, [r1, #0xbd8]
	mov r0, r7
	str r2, [sp]
	ldr r2, [r1, #0xbd0]
	ldr r3, [r1, #0xbd4]
	sub r1, ip, #1
	bl FUN_02047f8c
	add r0, r7, r6, lsl #4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xbcc]
	sub r0, r0, #1
	orr r5, r5, r4, lsl r0
_020485A8:
	add r6, r6, #1
	cmp r6, #0x10
	blt _02048564
	add r0, r7, #0x3cc
	add r0, r0, #0x1800
	mov r1, #0
	mov r2, #0x100
	bl MemWrite
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020485d0
FUN_020485d0: ; 0x020485D0
	push {r4, r5, r6, lr}
	mov r5, r0
	cmp r1, #0
	addge r0, r5, r1, lsl #2
	addge r0, r0, #0x1000
	mov r4, r2
	ldrge r0, [r0, #0xb88]
	popge {r4, r5, r6, pc}
	cmp r4, #0xd
	bge _02048634
	mov r6, #0
	arm_func_end FUN_020485d0
_020485FC:
	add r0, r5, r6, lsl #2
	add r0, r0, #0x1000
	ldr r0, [r0, #0xb88]
	mov r1, r4
	bl FUN_020FE530
	cmp r0, #0
	addne r0, r5, r6, lsl #2
	addne r0, r0, #0x1000
	ldrne r0, [r0, #0xb88]
	popne {r4, r5, r6, pc}
	add r6, r6, #1
	cmp r6, #8
	blt _020485FC
	b _0204866C
_02048634:
	mov r6, #8
_02048638:
	add r0, r5, r6, lsl #2
	add r0, r0, #0x1000
	ldr r0, [r0, #0xb88]
	mov r1, r4
	bl FUN_020FE530
	cmp r0, #0
	addne r0, r5, r6, lsl #2
	addne r0, r0, #0x1000
	ldrne r0, [r0, #0xb88]
	popne {r4, r5, r6, pc}
	add r6, r6, #1
	cmp r6, #0xb
	blt _02048638
_0204866C:
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02048674
FUN_02048674: ; 0x02048674
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r8, r1
	mvn r1, #0
	ldr r5, [sp, #0x20]
	mov sb, r0
	mov r7, r2
	mov r6, r3
	bl FUN_020485d0
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, #0x1b8
	mul sl, r7, r0
	arm_func_end FUN_02048674
_020486A8:
	mov r1, r8
	mov r2, r6
	add r0, sb, sl
	bl FUN_02049400
	movs r8, r0
	beq _020486D8
	mov r0, r4
	mov r1, r8
	mov r2, r5
	bl FUN_020FE584
	cmp r0, #0
	beq _020486A8
_020486D8:
	cmp r4, #0
	beq _020486E8
	mov r0, r4
	bl FUN_020FE56C
_020486E8:
	mov r0, r8
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_020486f0
FUN_020486f0: ; 0x020486F0
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	add ip, r7, #0x1000
	ldr r4, [ip, #0xbb8]
	mov r6, r1
	cmp r4, #0
	mov r5, r3
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	mvn r1, #0
	bl FUN_020485d0
	movs r4, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r3, [sp, #0x18]
	mov r1, r6
	mov r2, r5
	bl FUN_020FE6E8
	add r0, r7, #0x1000
	str r4, [r0, #0xbb8]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020486f0

	arm_func_start FUN_02048748
FUN_02048748: ; 0x02048748
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x14
	mov r4, r0
	add r0, r4, #0x1000
	mov r6, #0
	str r6, [r0, #0xe90]
	b _020489CC
	arm_func_end FUN_02048748
_02048764:
	add r1, r4, #0x1000
	ldr r7, [r1, #0xe90]
	mov r5, #0x2c
	mla r0, r7, r5, r4
	add r0, r0, #0x1000
	ldr r2, [r0, #0xe18]
	cmp r2, #0
	bne _0204889C
	ldr r0, [r0, #0xe20]
	cmp r0, #0
	ldrne r0, [r1, #0xb84]
	cmpne r0, #0
	ldrne r1, [r1, #0xb80]
	cmpne r1, #0
	beq _020489BC
	bl FUN_02042054
	cmp r0, #0x83
	bne _020489BC
	ldr r0, _020489FC ; =0x0208C438
	ldr r5, _02048A00 ; =0x0209A160
	add r3, sp, #8
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	ldr r1, [r5]
	ldrsh r0, [r5, #4]
	str r1, [sp, #8]
	bl FUN_02021288
	ldrsh r1, [r5, #6]
	rsb r1, r1, #0x100
	cmp r1, r0
	bne _020489BC
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	cmp r1, r0
	beq _020487FC
	ldr r0, [sp, #0x10]
	cmp r1, r0
	bne _020489BC
_020487FC:
	mov r8, #0x2c
	mla r0, r7, r8, r4
	add r0, r0, #0x1000
	ldr r1, [r0, #0xe20]
	mov r0, r4
	bl FUN_02048178
	cmp r0, #0
	beq _020489BC
	mla r0, r7, r8, r4
	add r5, sp, #4
	str r6, [sp, #4]
	str r5, [sp]
	add r0, r0, #0x1000
	ldr r1, [r0, #0xe14]
	ldr r2, [r0, #0xe20]
	ldr r3, [r0, #0xe24]
	mov r0, r4
	bl FUN_02048674
	mla r1, r7, r8, r4
	add r1, r1, #0x1000
	str r0, [r1, #0xe14]
	cmp r0, #0
	bne _02048868
	ldr r1, [r1, #0xe20]
	mov r0, r4
	bl FUN_02048288
	b _020489BC
_02048868:
	ldr r2, [r1, #0xe20]
	mov r0, r4
	sub r1, r6, #1
	bl FUN_020485d0
	mla r1, r7, r8, r4
	add r2, r1, #0x1000
	str r0, [r2, #0xe18]
	add r1, r4, #0x1000
	ldr r1, [r1, #0xb80]
	ldr r2, [r2, #0xe14]
	mov r3, r5
	bl FUN_020FE6E8
	b _020489BC
_0204889C:
	bl FUN_02029d54
	cmp r0, #3
	bne _020489BC
	mla r0, r7, r5, r4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe18]
	bl FUN_020FE92C
	cmp r0, #0
	bne _020489BC
	add r0, r4, r7, lsl #2
	add r1, r0, #0x1000
	ldr r0, [r1, #0xdfc]
	cmp r0, #0
	beq _020489BC
	add r0, r4, #0x1fc
	add r2, r0, #0x1c00
	ldr r0, [r2, r7, lsl #2]
	subs r0, r0, #1
	str r0, [r2, r7, lsl #2]
	bne _02048938
	mla r0, r7, r5, r4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe18]
	bl FUN_020FE8B0
	mla r0, r7, r5, r4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe18]
	bl FUN_020FE56C
	mla r0, r7, r5, r4
	add r0, r0, #0x1000
	ldr r1, [r0, #0xe20]
	mov r0, r4
	bl FUN_02048288
	add r0, r4, #0x208
	add r0, r0, #0x1c00
	mla r1, r7, r5, r0
	mov r0, r4
	bl FUN_02048be4
	b _020489BC
_02048938:
	ldr r0, [r1, #0xdfc]
	cmp r0, #0
	sublt r0, r5, #0x2d
	mov r5, #0x2c
	strlt r0, [r1, #0xdfc]
	mla r0, r7, r5, r4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe18]
	bl FUN_020FE9AC
	mla r1, r7, r5, r4
	add r1, r1, #0x1000
	mov r8, r0
	ldr r0, [r1, #0xe18]
	bl FUN_020FE9A4
	mla r1, r7, r5, r4
	mov sb, r0
	add r0, r1, #0x1000
	ldr r0, [r0, #0xe18]
	mov r1, sb
	bl FUN_020FE9B4
	mla r0, r7, r5, r4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe18]
	mov r1, #1
	bl FUN_020FE9BC
	mov r0, #0
	b _020489B4
_020489A4:
	strb r6, [sb, #0xb]
	strb r6, [sb, #0xa]
	add sb, sb, #0x2c
	add r0, r0, #1
_020489B4:
	cmp r0, r8
	blt _020489A4
_020489BC:
	add r0, r4, #0x1000
	ldr r1, [r0, #0xe90]
	add r1, r1, #1
	str r1, [r0, #0xe90]
_020489CC:
	add r0, r4, #0x1000
	ldr r1, [r0, #0xe90]
	cmp r1, #3
	blt _02048764
	ldr r0, [r0, #0xbb8]
	cmp r0, #0
	addeq sp, sp, #0x14
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, pc}
	bl FUN_020FE92C
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020489FC: .word 0x0208C438
_02048A00: .word 0x0209A160

	arm_func_start FUN_02048a04
FUN_02048a04: ; 0x02048A04
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x1000
	ldr r0, [r0, #0xbb8]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r4, #0
	arm_func_end FUN_02048a04
_02048A20:
	add r0, r5, r4, lsl #2
	add r0, r0, #0x1000
	ldr r0, [r0, #0xb88]
	bl FUN_020FE8B0
	add r4, r4, #1
	cmp r4, #8
	blt _02048A20
	add r0, r5, #0x1000
	mov r1, #0
	str r1, [r0, #0xbb8]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02048a4c
FUN_02048a4c: ; 0x02048A4C
	push {r3, lr}
	add r0, r0, #0x1000
	ldr r0, [r0, #0xbb8]
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_020FE904
	pop {r3, pc}
	arm_func_end FUN_02048a4c

	arm_func_start FUN_02048a68
FUN_02048a68: ; 0x02048A68
	push {r3, lr}
	add r0, r0, #0x1000
	ldr r0, [r0, #0xbb8]
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_020FE918
	ldr r0, _02048A90 ; =0x0209AC44
	mov r1, #0x64
	bl FUN_0202cff8
	pop {r3, pc}
	.align 2, 0_02048A90: .word 0x0209AC44
	arm_func_end FUN_02048a68

	arm_func_start FUN_02048a94
FUN_02048a94: ; 0x02048A94
	add r0, r0, #0x1000
	str r1, [r0, #0xb84]
	bx lr
	arm_func_end FUN_02048a94

	arm_func_start FUN_02048aa0
FUN_02048aa0: ; 0x02048AA0
	add r0, r0, #0x1000
	str r1, [r0, #0xb80]
	bx lr
	arm_func_end FUN_02048aa0

	arm_func_start FUN_02048aac
FUN_02048aac: ; 0x02048AAC
	push {r3, r4, r5, lr}
	mov r2, #0x2c
	mul r4, r1, r2
	mov r5, r0
	add r0, r5, r4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe18]
	cmp r0, #0
	beq _02048AF8
	bl FUN_020FE8B0
	add r0, r5, r4
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe18]
	bl FUN_020FE56C
	add r0, r5, r4
	add r0, r0, #0x1000
	ldr r1, [r0, #0xe20]
	mov r0, r5
	bl FUN_02048288
	arm_func_end FUN_02048aac
_02048AF8:
	add r0, r5, #0x208
	add r1, r0, #0x1c00
	mov r0, r5
	add r1, r1, r4
	bl FUN_02048be4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02048b10
FUN_02048b10: ; 0x02048B10
	cmp r1, #0
	mov r3, #0
	blt _02048B44
	cmp r1, #3
	bge _02048B44
	add r3, r0, #0x208
	add ip, r3, #0x1c00
	mov r3, #0x2c
	add r0, r0, r1, lsl #2
	add r0, r0, #0x1000
	ldr r0, [r0, #0xdfc]
	mla r3, r1, r3, ip
	str r0, [r2]
	arm_func_end FUN_02048b10
_02048B44:
	mov r0, r3
	bx lr

	arm_func_start FUN_02048b4c
FUN_02048b4c: ; 0x02048B4C
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r1
	mov r7, r0
	mov r5, r2
	mov r4, r3
	mov ip, #0
	bmi _02048BDC
	cmp r6, #3
	bge _02048BDC
	bl FUN_02048aac
	mov r0, #0x2c
	mul r1, r6, r0
	add r0, r7, #0x208
	add r2, r0, #0x1c00
	ldr r0, [r5]
	add ip, r2, r1
	str r0, [r2, r1]
	ldr r1, [r5, #4]
	add r0, r7, r6, lsl #2
	str r1, [ip, #4]
	ldrsb r1, [r5, #8]
	add lr, r5, #0xc
	add r7, ip, #0xc
	strb r1, [ip, #8]
	ldrsb r1, [r5, #9]
	add r6, r0, #0x1000
	strb r1, [ip, #9]
	ldrsb r0, [r5, #0xa]
	strb r0, [ip, #0xa]
	ldrsb r0, [r5, #0xb]
	strb r0, [ip, #0xb]
	ldm lr!, {r0, r1, r2, r3}
	stm r7!, {r0, r1, r2, r3}
	ldm lr, {r0, r1, r2, r3}
	stm r7, {r0, r1, r2, r3}
	str r4, [r6, #0xdfc]
	arm_func_end FUN_02048b4c
_02048BDC:
	mov r0, ip
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02048be4
FUN_02048be4: ; 0x02048BE4
	push {r3, lr}
	add r2, r0, #0x208
	add r3, r2, #0x1c00
	mov lr, #0
	mov r2, #0x2c
	arm_func_end FUN_02048be4
_02048BF8:
	mla ip, lr, r2, r3
	cmp ip, r1
	bne _02048C24
	add r1, r0, lr, lsl #2
	add r3, r1, #0x1000
	mov r1, #0
	mov r0, ip
	mov r2, #0x2c
	str r1, [r3, #0xdfc]
	bl MemWrite
	pop {r3, pc}
_02048C24:
	add lr, lr, #1
	cmp lr, #3
	blt _02048BF8
	pop {r3, pc}

	arm_func_start FUN_02048c34
FUN_02048c34: ; 0x02048C34
	add r0, r0, #0x1000
	ldr r0, [r0, #0xe90]
	bx lr
	arm_func_end FUN_02048c34

	arm_func_start FUN_02048c40
FUN_02048c40: ; 0x02048C40
	add r0, r0, #0x1000
	mov r1, #0
	strb r1, [r0, #0xe8c]
	bx lr
	arm_func_end FUN_02048c40

	arm_func_start FUN_02048c50
FUN_02048c50: ; 0x02048C50
	add r0, r0, #0x1000
	ldrb r0, [r0, #0xe8c]
	bx lr
	arm_func_end FUN_02048c50

	arm_func_start FUN_02048c5c
FUN_02048c5c: ; 0x02048C5C
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_0202fd38
	mov r1, #0
	mov r0, r4
	str r1, [r4, #0x24]
	str r1, [r4, #0x28]
	pop {r4, pc}
	arm_func_end FUN_02048c5c

	arm_func_start FUN_02048c80
FUN_02048c80: ; 0x02048C80
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_0202fd44
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02048c80

	arm_func_start FUN_02048c98
FUN_02048c98: ; 0x02048C98
	mov r2, #0
	str r1, [r0]
	str r2, [r0, #0x24]
	str r2, [r0, #0x28]
	bx lr
	arm_func_end FUN_02048c98

	arm_func_start FUN_02048cac
FUN_02048cac: ; 0x02048CAC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x108
	sub r1, r1, #9
	mov r5, r3
	mov r8, #1
	mov r4, #0
	cmp r1, #1
	movls r8, r4
	mov sl, r0
	mov sb, r2
	cmp r5, #0
	beq _02048EF0
	ldr r7, _0204900C ; =0x02090324
	add fp, sp, #0x34
	ldm r7!, {r0, r1, r2, r3}
	mov r4, fp
	stm fp!, {r0, r1, r2, r3}
	ldr r6, _02049010 ; =0x02090338
	ldr r7, [r7]
	ldm r6!, {r0, r1, r2, r3}
	str r7, [fp]
	add r7, sp, #0x20
	stm r7!, {r0, r1, r2, r3}
	ldr r6, [r6]
	add r2, sp, #0x14
	mov r0, r5
	mov r1, sb
	add r3, sp, #0x10
	str r6, [r7]
	bl FUN_020F34F0
	cmp r0, #0
	moveq r0, #0
	addeq sp, sp, #0x108
	streq r0, [sl, #0x24]
	streq r0, [sl, #0x28]
	subeq r0, r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r7, sp, #0x88
	ldr r1, _02049014 ; =0x0209034C
	mov r0, r7
	bl _strcpy
	ldr r1, [sl, #0x24]
	mov r0, r7
	ldr r1, [r4, r1, lsl #2]
	bl FUN_02014ee8
	add r0, sp, #0x18
	str r0, [sp, #0x1c]
	mov fp, #0
	ldr r0, [sp, #0x14]
	mov r6, #4
	stm sp, {r0, r6}
	ldr r4, _02049018 ; =0x0209C2C4
	str fp, [sp, #8]
	mov r5, #1
	mov r0, r4
	mov r1, r7
	add r2, sp, #0x1c
	mov r3, fp
	str r5, [sp, #0xc]
	bl FUN_0202eff0
	mov r1, r6
	ldr r6, _0204901C ; =0x0209A250
	mov r0, r6
	bl FUN_0202e19c
	ldr r1, [sp, #0x18]
	mov r0, r6
	mov r3, r8
	mov r2, r5
	lsr r1, r1, #8
	bl FUN_0202de58
	str r0, [sl, #0x1c]
	ldr r0, [sp, #0x134]
	cmp r0, #0
	bne _02048E00
	ldr r1, [sp, #0x14]
	mov r0, r4
	str r1, [sp]
	ldr r2, [sp, #0x10]
	mov r1, r7
	stmib sp, {r2, r5}
	mov r3, fp
	add r2, sl, #0x1c
	str r5, [sp, #0xc]
	bl FUN_0202eff0
	b _02048E28
	arm_func_end FUN_02048cac
_02048E00:
	ldr r1, [sp, #0x14]
	mov r0, r4
	str r1, [sp]
	ldr r2, [sp, #0x10]
	mov r1, r7
	stmib sp, {r2, r5}
	mov r3, fp
	add r2, sl, #0x1c
	str r5, [sp, #0xc]
	bl FUN_0202f294
_02048E28:
	movs r5, r0
	mov r0, #0
	addeq sp, sp, #0x108
	streq r0, [sl, #0x24]
	streq r0, [sl, #0x28]
	subeq r0, r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x130]
	cmp r0, #0
	ldrne r1, [sl, #0x24]
	addne r0, sp, #0x20
	ldrne r2, [r0, r1, lsl #2]
	cmpne r2, #0
	beq _02048EA8
	add r4, sp, #0x48
	ldr r1, _02049020 ; =0x02090360
	mov r0, r4
	bl FUN_02023c40
	ldr r0, _02049018 ; =0x0209C2C4
	mov r2, r4
	add r1, sl, #0x16c
	bl FUN_0202f568
	ldr r0, [sp, #0x130]
	add r2, sp, #0x14
	add r3, sp, #0x10
	mov r1, sb
	bl FUN_020F34F0
	cmp r0, #0
	ldrne r0, [sp, #0x14]
	strne r0, [sl, #0x174]
	mvneq r0, #0
	streq r0, [sl, #0x174]
_02048EA8:
	add r4, sp, #0xc8
	mov r0, sl
	mov r1, r4
	bl FUN_0204927c
	ldr r1, _02049024 ; =0x02090374
	add r0, sl, #0x178
	bl _strcpy
	mov r1, r4
	add r0, sl, #0x178
	bl FUN_02014ee8
	add r0, sl, #0x178
	bl GetStrLen
	add r2, sl, #0x178
	sub r0, r0, #5
	ldr r1, _02049028 ; =0x02090388
	add r0, r2, r0
	bl _strcpy
	b _02049000
_02048EF0:
	add r5, sp, #0xc8
	mov r0, sl
	mov r1, r5
	bl FUN_0204927c
	add r6, sp, #0x88
	ldr r1, _0204902C ; =0x02090390
	mov r0, r6
	bl _strcpy
	mov r0, r6
	mov r1, r5
	bl FUN_02014ee8
	ldr r5, _0204901C ; =0x0209A250
	mov r1, #4
	mov r0, r5
	bl FUN_0202e19c
	ldr r0, [sp, #0x134]
	cmp r0, #0
	ldr r0, [r5]
	beq _02048F70
	cmp r0, #0
	moveq r5, #0
	beq _02048FA4
	str r4, [sp]
	str r4, [sp, #4]
	mov r1, #1
	str r1, [sp, #8]
	mov r1, r6
	mov r3, r5
	add r2, sl, #0x1c
	str r8, [sp, #0xc]
	bl FUN_0202f294
	b _02048FA0
_02048F70:
	cmp r0, #0
	moveq r5, #0
	beq _02048FA4
	str r4, [sp]
	str r4, [sp, #4]
	mov r1, #1
	str r1, [sp, #8]
	mov r1, r6
	mov r3, r5
	add r2, sl, #0x1c
	str r8, [sp, #0xc]
	bl FUN_0202eff0
_02048FA0:
	mov r5, r0
_02048FA4:
	cmp r5, #0
	addeq sp, sp, #0x108
	streq r4, [sl, #0x24]
	streq r4, [sl, #0x28]
	subeq r0, r4, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, _02049030 ; =0x020903A4
	add r0, sl, #0x178
	bl _strcpy
	add r1, sp, #0xc8
	add r0, sl, #0x178
	bl FUN_02014ee8
	add r0, sl, #0x178
	bl GetStrLen
	add r2, sl, #0x178
	sub r0, r0, #5
	ldr r1, _02049034 ; =0x020903B8
	add r0, r2, r0
	bl _strcpy
	ldr r0, _02049018 ; =0x0209C2C4
	add r1, sl, #0x16c
	add r2, sl, #0x178
	bl FUN_0202f568
_02049000:
	mov r0, r5
	add sp, sp, #0x108
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204900C: .word 0x02090324
_02049010: .word 0x02090338
_02049014: .word 0x0209034C
_02049018: .word 0x0209C2C4
_0204901C: .word 0x0209A250
_02049020: .word 0x02090360
_02049024: .word 0x02090374
_02049028: .word 0x02090388
_0204902C: .word 0x02090390
_02049030: .word 0x020903A4
_02049034: .word 0x020903B8

	arm_func_start FUN_02049038
FUN_02049038: ; 0x02049038
	push {r3, r4, r5, lr}
	sub sp, sp, #0x48
	mov r4, r0
	ldr r5, [r4, #0x1c]
	cmp r5, #0
	addne sp, sp, #0x48
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldr r5, [sp, #0x60]
	str r2, [r4, #0x24]
	cmp r5, #0
	str r3, [r4, #0x28]
	strne r5, [r4, #0x1c]
	bne _0204909C
	ldr r5, [sp, #0x5c]
	mov r2, r3
	str r5, [sp]
	mov r5, #0
	ldr r3, [sp, #0x58]
	str r5, [sp, #4]
	bl FUN_02048cac
	cmp r0, #0
	addlt sp, sp, #0x48
	sublt r0, r5, #1
	poplt {r3, r4, r5, pc}
	arm_func_end FUN_02049038
_0204909C:
	ldr r1, [r4, #0x1c]
	ldr r2, _02049124 ; =0x020903C0
	add r0, r4, #4
	bl SsdLocateStrings
	cmp r0, #0
	bne _020490C0
	add r1, sp, #8
	mov r0, r4
	bl FUN_0204927c
_020490C0:
	mov r1, #0
	ldr r5, _02049128 ; =0x00003001
	str r1, [r4, #0x20]
_020490CC:
	mov r0, r4
	bl WraperSsdGetInstructionPtr
	movs r1, r0
	beq _020490F4
	ldrh r0, [r1, #4]
	cmp r0, r5
	ldreq r0, [r4, #0x20]
	addeq r0, r0, #1
	streq r0, [r4, #0x20]
	b _020490CC
_020490F4:
	mov r5, #0
	mov r1, r5
	add r0, r4, #0x2c
	mov r2, #0x40
	bl MemWrite
	mov r1, r5
	add r0, r4, #0x6c
	mov r2, #0x100
	bl MemWrite
	mov r0, #1
	add sp, sp, #0x48
	pop {r3, r4, r5, pc}
	.align 2, 0_02049124: .word 0x020903C0
_02049128: .word 0x00003001

	arm_func_start FUN_0204912c
FUN_0204912c: ; 0x0204912C
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x1c]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r4, #0
	mov r1, r4
	mov r2, r4
	add r0, r5, #4
	bl SsdLocateStrings
	ldr r1, [r5, #0x1c]
	ldr r0, _02049174 ; =0x0209A250
	bl FUN_0202e1c0
	str r4, [r5, #0x24]
	str r4, [r5, #0x28]
	str r4, [r5, #0x20]
	str r4, [r5, #0x1c]
	pop {r3, r4, r5, pc}
	.align 2, 0_02049174: .word 0x0209A250
	arm_func_end FUN_0204912c

	arm_func_start FUN_02049178
FUN_02049178: ; 0x02049178
	ldr r3, [r0, #0x24]
	cmp r3, r1
	ldreq r0, [r0, #0x28]
	cmpeq r0, r2
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02049178

	arm_func_start FUN_02049194
FUN_02049194: ; 0x02049194
	cmp r1, #0
	ldrne r3, [r0, #0x24]
	strne r3, [r1]
	cmp r2, #0
	ldrne r0, [r0, #0x28]
	strne r0, [r2]
	bx lr
	arm_func_end FUN_02049194

	arm_func_start FUN_020491b0
FUN_020491b0: ; 0x020491B0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x40
	mov r5, r0
	ldr r1, [r5, #0x1c]
	cmp r1, #0
	addeq sp, sp, #0x40
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x20]
	cmp r0, #0
	addne sp, sp, #0x40
	movne r0, #1
	popne {r3, r4, r5, pc}
	ldr r0, _02049270 ; =0x0209A250
	ldr r0, [r0]
	cmp r0, #0
	mvneq r0, #0
	beq _020491FC
	bl FUN_0202f57c
	arm_func_end FUN_020491b0
_020491FC:
	cmp r0, #0
	addne sp, sp, #0x40
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldr r1, [r5, #0x1c]
	ldr r2, _02049274 ; =0x020903C4
	add r0, r5, #4
	bl SsdLocateStrings
	cmp r0, #0
	bne _02049230
	add r1, sp, #0
	mov r0, r5
	bl FUN_0204927c
_02049230:
	mov r1, #0
	ldr r4, _02049278 ; =0x00003001
	str r1, [r5, #0x20]
_0204923C:
	mov r0, r5
	bl WraperSsdGetInstructionPtr
	movs r1, r0
	beq _02049264
	ldrh r0, [r1, #4]
	cmp r0, r4
	ldreq r0, [r5, #0x20]
	addeq r0, r0, #1
	streq r0, [r5, #0x20]
	b _0204923C
_02049264:
	mov r0, #1
	add sp, sp, #0x40
	pop {r3, r4, r5, pc}
	.align 2, 0_02049270: .word 0x0209A250
_02049274: .word 0x020903C4
_02049278: .word 0x00003001

	arm_func_start FUN_0204927c
FUN_0204927c: ; 0x0204927C
	push {r3, lr}
	mov r2, r0
	ldr r0, [r2, #0x24]
	cmp r0, #4
	arm_func_end FUN_0204927c

	arm_func_start switchD
switchD: ; 0x0204928C
	addls pc, pc, r0, lsl #2
	b _020492EC
	arm_func_end switchD
_02049294: ; jump table
	b _020492EC ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02049298
	b _020492A8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0204929C
	b _020492BC
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020492A0
	b _020492CC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020492A4
	b _020492DC
	arm_func_end caseD_4
_020492A8:
	mov r0, r1
	ldr r2, [r2, #0x28]
	ldr r1, _020492FC ; =0x020903C8
_020492B4:
	bl FUN_02023c40
	b _020492F4
_020492BC:
	mov r0, r1
	ldr r2, [r2, #0x28]
	ldr r1, _02049300 ; =0x020903D8
	b _020492B4
_020492CC:
	mov r0, r1
	ldr r2, [r2, #0x28]
	ldr r1, _02049304 ; =0x020903E8
	b _020492B4
_020492DC:
	mov r0, r1
	ldr r2, [r2, #0x28]
	ldr r1, _02049308 ; =0x020903F8
	b _020492B4
_020492EC:
	mov r0, #0
	pop {r3, pc}
_020492F4:
	mov r0, #1
	pop {r3, pc}
	.align 2, 0_020492FC: .word 0x020903C8
_02049300: .word 0x020903D8
_02049304: .word 0x020903E8
_02049308: .word 0x020903F8

	arm_func_start FUN_0204930c
FUN_0204930c: ; 0x0204930C
	push {r3, lr}
	mov r3, #0
	str r3, [r1, #4]
	str r3, [r1]
	ldr r2, [r0, #0x1c]
	cmp r2, #0
	moveq r0, r3
	popeq {r3, pc}
	ldr r3, [r0, #0x24]
	mov r2, #0x40
	str r3, [r1]
	ldr r3, [r0, #0x28]
	add r0, r0, #0x2c
	str r3, [r1, #4]
	add r1, r1, #8
	bl _memcpy
	mov r0, #1
	pop {r3, pc}
	arm_func_end FUN_0204930c

	arm_func_start FUN_02049354
FUN_02049354: ; 0x02049354
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	mov r5, r2
	ldr r2, [r5]
	mov r6, r0
	cmp r2, #0
	ldreq r0, [r5, #4]
	cmpeq r0, #0
	addeq sp, sp, #0xc
	moveq r0, #1
	popeq {r3, r4, r5, r6, pc}
	ldr r0, [sp, #0x20]
	str r3, [sp]
	str r0, [sp, #4]
	mov r4, #0
	str r4, [sp, #8]
	ldr r3, [r5, #4]
	mov r0, r6
	bl FUN_02049038
	cmp r0, #0
	addeq sp, sp, #0xc
	moveq r0, r4
	popeq {r3, r4, r5, r6, pc}
	add r0, r5, #8
	add r1, r6, #0x2c
	mov r2, #0x40
	bl _memcpy
	mov r1, r4
	add r0, r6, #0x6c
	mov r2, #0x100
	bl MemWrite
	mov r0, #1
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_02049354

	arm_func_start FUN_020493dc
FUN_020493dc: ; 0x020493DC
	cmp r1, #0x10
	movge r1, #0
	add r0, r0, #0x2c
	add r0, r0, r1, lsl #2
	bx lr
	arm_func_end FUN_020493dc

	arm_func_start WraperSsdGetInstructionPtr
WraperSsdGetInstructionPtr: ; 0x020493F0
	ldr ip, _020493FC ; =SsdGetInstructionPtr
	add r0, r0, #4
	bx ip
	.align 2, 0_020493FC: .word SsdGetInstructionPtr
	arm_func_end WraperSsdGetInstructionPtr

	arm_func_start FUN_02049400
FUN_02049400: ; 0x02049400
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, [r5, #0x1c]
	mov r4, r2
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r6, _02049478 ; =0x00003001
	arm_func_end FUN_02049400
_02049420:
	mov r0, r5
	bl WraperSsdGetInstructionPtr
	movs r1, r0
	beq _02049470
	ldrh r0, [r1, #4]
	cmp r0, r6
	bne _02049420
	ldrb r0, [r1, #6]
	add r2, r0, #7
	asr r0, r2, #2
	add r0, r2, r0, lsr #29
	asr r0, r0, #3
	add r2, r1, r0, lsl #2
	ldr r0, [r2, #8]
	add r0, r5, r0
	ldrsb r0, [r0, #0x6c]
	cmp r0, #0
	ldreq r0, [r2, #0xc]
	cmpeq r4, r0
	bne _02049420
_02049470:
	mov r0, r1
	pop {r4, r5, r6, pc}
	.align 2, 0_02049478: .word 0x00003001

	arm_func_start FUN_0204947c
FUN_0204947c: ; 0x0204947C
	push {r4, lr}
	mov r4, r0
	bl FUN_0204959c
	ldr r1, _02049498 ; =0x02090428
	mov r0, r4
	str r1, [r4]
	pop {r4, pc}
	.align 2, 0_02049498: .word 0x02090428
	arm_func_end FUN_0204947c

	arm_func_start LAB_0204949c
LAB_0204949c: ; 0x0204949C
	push {r4, lr}
	mov r4, r0
	bl FUN_020495e4
	mov r0, r4
	pop {r4, pc}
	arm_func_end LAB_0204949c

	arm_func_start FUN_020494b0
FUN_020494b0: ; 0x020494B0
	push {r4, lr}
	mov r4, r0
	bl FUN_020495e4
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020494b0

	arm_func_start LAB_020494cc
LAB_020494cc: ; 0x020494CC
	ldr ip, _020494D4 ; =LAB_020497ec
	bx ip
	.align 2, 0_020494D4: .word LAB_020497ec
	arm_func_end LAB_020494cc

	arm_func_start FUN_020494d8
FUN_020494d8: ; 0x020494D8
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020F2700
	cmp r0, #0xa
	bne _0204950C
	mov r0, r4
	bl FUN_020F0810
	bl FUN_020F0A14
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020494d8
_0204950C:
	cmp r0, #0xb
	bne _02049530
	mov r0, r4
	bl FUN_020F0810
	bl FUN_020F0A14
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}
_02049530:
	mov r0, r5
	mov r1, r4
	bl FUN_02049840
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02049540
FUN_02049540: ; 0x02049540
	push {r4, lr}
	mov r4, r1
	bl FUN_020F2700
	cmp r0, #0xa
	bne _0204956C
	mov r0, r4
	bl FUN_020F0A14
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r4, pc}
	arm_func_end FUN_02049540
_0204956C:
	cmp r0, #0xb
	bne _0204958C
	mov r0, r4
	bl FUN_020F0A14
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r4, pc}
_0204958C:
	mov r0, #1
	pop {r4, pc}

	arm_func_start FUN_02049594
FUN_02049594: ; 0x02049594
	mov r0, #0
	bx lr
	arm_func_end FUN_02049594

	arm_func_start FUN_0204959c
FUN_0204959c: ; 0x0204959C
	ldr r2, _020495B0 ; =0x02090484
	mov r1, #0
	str r2, [r0]
	str r1, [r0, #4]
	bx lr
	.align 2, 0_020495B0: .word 0x02090484
	arm_func_end FUN_0204959c

	arm_func_start FUN_020495b4
FUN_020495b4: ; 0x020495B4
	ldr r2, _020495C8 ; =0x02090484
	mov r1, #0
	str r2, [r0]
	str r1, [r0, #4]
	bx lr
	.align 2, 0_020495C8: .word 0x02090484
	arm_func_end FUN_020495b4

	arm_func_start FUN_020495cc
FUN_020495cc: ; 0x020495CC
	bx lr
	arm_func_end FUN_020495cc

	arm_func_start FUN_020495d0
FUN_020495d0: ; 0x020495D0
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020495d0

	arm_func_start FUN_020495e4
FUN_020495e4: ; 0x020495E4
	bx lr
	arm_func_end FUN_020495e4

	arm_func_start FUN_020495e8
FUN_020495e8: ; 0x020495E8
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _02049728 ; =0x020A0640
	mov r6, #0
	ldrb r3, [r0, #0x8f]
	cmp r3, #2
	movls r4, #1
	bls _02049664
	cmp r3, #3
	blo _02049618
	cmp r3, #5
	movls r4, #2
	bls _02049664
	arm_func_end FUN_020495e8
_02049618:
	ldrb r3, [r0, #0x8f]
	cmp r3, #6
	blo _02049630
	cmp r3, #8
	movls r4, #3
	bls _02049664
_02049630:
	ldrb r3, [r0, #0x8f]
	cmp r3, #9
	blo _02049648
	cmp r3, #0xb
	movls r4, #4
	bls _02049664
_02049648:
	ldrb r3, [r0, #0x8f]
	cmp r3, #0xc
	blo _02049660
	cmp r3, #0xe
	movls r4, #5
	bls _02049664
_02049660:
	mvn r4, #0
_02049664:
	ldr r3, _0204972C ; =0x020A0648
	sub r5, r4, #1
	ldr r4, [r0, #4]
	ldr r0, [r3, r5, lsl #2]
	cmp r4, r0
	movhs r4, #1
	movlo r4, #0
	cmp r1, #0
	cmpeq r2, #0
	bne _020496C4
	ldr r0, _02049730 ; =0x0209A2C0
	ldrb r0, [r0, #0x5b]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	bne _020496C4
	ldr r0, _02049730 ; =0x0209A2C0
	ldrb r0, [r0, #0x5c]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020496C8
_020496C4:
	mov r4, #0
_020496C8:
	ldr r5, _02049734 ; =0x02099EF0
	ldr r0, [r5]
	bl FUN_02145838
	mov r7, r0
	ldr r0, [r5]
	mov r1, r6
	mov r2, r7
	bl FUN_02145A44
	cmp r0, #0
	bne _02049708
	ldr r0, [r5]
	mov r2, r7
	mov r1, #1
	bl FUN_02145A44
	cmp r0, #0
	beq _02049710
_02049708:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02049710:
	ldr r0, [r5]
	bl FUN_02144F4C
	cmp r0, #0
	movne r0, r6
	moveq r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02049728: .word 0x020A0640
_0204972C: .word 0x020A0648
_02049730: .word 0x0209A2C0
_02049734: .word 0x02099EF0

	arm_func_start LAB_02049738
LAB_02049738: ; 0x02049738
	push {r4, r5, r6, r7, r8, lr}
	mov r6, #0
	mov r4, r0
	mov r7, r6
	adds r0, r4, #8
	popeq {r4, r5, r6, r7, r8, pc}
	mov r1, r6
	mov r2, #0x58
	bl MemWrite
	mov r5, r6
	arm_func_end LAB_02049738
_02049760:
	mov r0, r5
	bl FUN_020EFA80
	movs r8, r0
	beq _020497BC
	bl FUN_0206d64c
	cmp r0, #0
	beq _020497BC
	mov r0, r8
	bl FUN_0206d688
	cmp r0, #0
	beq _020497BC
	mov r0, r8
	bl FUN_020F0810
	cmp r0, #0
	moveq r1, r6
	addne r1, r7, #0xb
	add r0, r4, r1, lsl #2
	str r8, [r0, #8]
	ldr r0, [r8, #0x88]
	addeq r6, r6, #1
	addne r7, r7, #1
	cmp r0, #0
	strbne r1, [r0, #0x2c]
_020497BC:
	add r5, r5, #1
	cmp r5, #0x20
	blt _02049760
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020497cc
FUN_020497cc: ; 0x020497CC
	add r0, r0, r1, lsl #2
	ldr r0, [r0, #8]
	bx lr
	arm_func_end FUN_020497cc

	arm_func_start LAB_020497d8
LAB_020497d8: ; 0x020497D8
	mov r3, #0xb
	mla r2, r1, r3, r2
	add r0, r0, r2, lsl #2
	ldr r0, [r0, #8]
	bx lr
	arm_func_end LAB_020497d8

	arm_func_start LAB_020497ec
LAB_020497ec: ; 0x020497EC
	ldr ip, _02049800 ; =MemWrite
	add r0, r0, #8
	mov r1, #0
	mov r2, #0x58
	bx ip
	.align 2, 0_02049800: .word MemWrite
	arm_func_end LAB_020497ec

	arm_func_start LAB_02049804
LAB_02049804: ; 0x02049804
	push {r3, lr}
	ldr r0, [r0, #4]
	bl FUN_0207318c
	bl FUN_02073e54
	pop {r3, pc}
	arm_func_end LAB_02049804

	arm_func_start FUN_02049818
FUN_02049818: ; 0x02049818
	push {r3, lr}
	ldr r0, [r0, #4]
	bl FUN_0207318c
	bl FUN_02073e68
	pop {r3, pc}
	arm_func_end FUN_02049818

	arm_func_start FUN_0204982c
FUN_0204982c: ; 0x0204982C
	push {r3, lr}
	ldr r1, [r0]
	ldr r1, [r1, #0x10]
	blx r1
	pop {r3, pc}
	arm_func_end FUN_0204982c

	arm_func_start FUN_02049840
FUN_02049840: ; 0x02049840
	push {r3, lr}
	ldr r2, _02049898 ; =0x0209A2C0
	ldr r0, [r2, #0x48]
	cmp r0, #0
	blt _0204986C
	ldrsh r1, [r1, #0x94]
	bl FUN_020F06D8
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_02049840
_0204986C:
	ldr r0, [r2, #0x4c]
	cmp r0, #0
	blt _02049890
	ldrsh r1, [r1, #0x94]
	bl FUN_020F06D8
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
_02049890:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_02049898: .word 0x0209A2C0

	arm_func_start LAB_0204989c
LAB_0204989c: ; 0x0204989C
	push {r4, lr}
	mov r4, r2
	mov r0, r1
	bl FUN_02040188
	mov r1, r4
	bl FUN_02040764
	pop {r4, pc}
	arm_func_end LAB_0204989c

	arm_func_start FUN_020498b8
FUN_020498b8: ; 0x020498B8
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r1
	mov r5, r2
	mov r0, r7
	mov r4, r3
	bl FUN_02040188
	mov r1, r5
	mov r6, r0
	bl FUN_02040764
	cmp r0, #0
	beq _02049964
	cmp r7, #0
	ldreq r1, [r6, #4]
	ldr r3, [r5]
	subeq r2, r1, #0x6000
	ldrne r1, [r6, #0xc]
	ldr ip, [r6]
	addne r2, r1, #0x6000
	subs lr, ip, r3
	ldr r0, [r6, #8]
	rsbmi lr, lr, #0
	subs r6, r0, r3
	ldr r0, [r5, #4]
	rsbmi r6, r6, #0
	subs r0, r1, r0
	rsbmi r0, r0, #0
	cmp lr, r6
	cmplt lr, r0
	ldrlt r0, [r5, #4]
	sublt r1, ip, #0x6000
	strlt r1, [r4]
	strlt r0, [r4, #4]
	blt _0204995C
	cmp r6, lr
	cmplt r6, r0
	ldrlt r0, [r5, #4]
	addlt r1, ip, #0x6000
	strlt r1, [r4]
	strlt r0, [r4, #4]
	strge r3, [r4]
	strge r2, [r4, #4]
	arm_func_end FUN_020498b8
_0204995C:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02049964:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204996c
FUN_0204996c: ; 0x0204996C
	push {r3, r4, r5, lr}
	mov r4, r2
	mov r0, r1
	mov r5, r3
	bl FUN_020401a0
	ldr r2, [r0]
	ldr r3, [r4]
	ldr r1, [r4, #4]
	ldr r0, [r0, #4]
	sub r2, r3, r2
	sub r0, r1, r0
	asr r1, r2, #4
	asr r4, r0, #4
	smull r0, r2, r1, r1
	adds r3, r0, #0x800
	smull r1, r0, r4, r4
	adc r2, r2, #0
	adds r1, r1, #0x800
	lsr r3, r3, #0xc
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	add r0, r3, r1
	mov r4, #0
	bl FUN_020095ac
	ldr r1, _020499FC ; =0x00036E66
	ldr r2, _02049A00 ; =0x51EB851F
	mul r3, r5, r1
	smull r1, r5, r2, r3
	lsr r1, r3, #0x1f
	add r5, r1, r5, asr #5
	cmp r5, r0, lsl #4
	movgt r4, #1
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_020499FC: .word 0x00036E66
_02049A00: .word 0x51EB851F
	arm_func_end FUN_0204996c

	arm_func_start LAB_02049a04
LAB_02049a04: ; 0x02049A04
	ldr r0, _02049A1C ; =0x0209A83C
	cmp r1, #0
	ldrne r0, _02049A20 ; =0x0209A82C
	ldr ip, _02049A24 ; =FUN_02040764
	mov r1, r2
	bx ip
	.align 2, 0_02049A1C: .word 0x0209A83C
_02049A20: .word 0x0209A82C
_02049A24: .word FUN_02040764
	arm_func_end LAB_02049a04

	arm_func_start FUN_02049a28
FUN_02049a28: ; 0x02049A28
	mov r0, #1
	bx lr
	arm_func_end FUN_02049a28

	arm_func_start FUN_02049a30
FUN_02049a30: ; 0x02049A30
	str r1, [r0, #4]
	bx lr
	arm_func_end FUN_02049a30

	arm_func_start FUN_02049a38
FUN_02049a38: ; 0x02049A38
	mov r0, #1
	bx lr
	arm_func_end FUN_02049a38

	arm_func_start FUN_02049a40
FUN_02049a40: ; 0x02049A40
	cmp r1, #4
	moveq r0, #4
	bxeq lr
	cmp r1, #5
	moveq r0, #3
	bxeq lr
	cmp r1, #6
	moveq r0, #2
	bxeq lr
	mov r0, #1
	cmp r1, #7
	movne r0, #0
	bx lr
	arm_func_end FUN_02049a40

	arm_func_start FUN_02049a74
FUN_02049a74: ; 0x02049A74
	push {r3, r4, r5, lr}
	mov r4, r3
	mov r5, r2
	ldrb r2, [r4, #2]
	ldrb ip, [r4]
	mov r3, #0
	cmp r2, #0xa
	moveq r3, #1
	cmp ip, #0xa
	arm_func_end FUN_02049a74

	arm_func_start switchD
switchD: ; 0x02049A98
	addls pc, pc, ip, lsl #2
	arm_func_end switchD

	arm_func_start caseD_b
caseD_b: ; 0x02049A9C
	b _02049BB4
	arm_func_end caseD_b
_02049AA0: ; jump table
	b LAB_02049acc ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02049AA4
	b _02049AD4
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02049AA8
	b _02049AE8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02049AAC
	b _02049AFC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02049AB0
	b _02049B20
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02049AB4
	b _02049B20
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02049AB8
	b _02049B20
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02049ABC
	b _02049B20
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02049AC0
	b _02049B6C
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02049AC4
	b _02049B84
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x02049AC8
	b _02049B9C
	arm_func_end caseD_a
LAB_02049acc:
	mov r0, #1
	pop {r3, r4, r5, pc}
_02049AD4:
	ldrh r0, [r4, #4]
	cmp r5, r0
	movle r0, #1
	movgt r0, #0
	pop {r3, r4, r5, pc}
_02049AE8:
	ldrh r0, [r4, #4]
	cmp r5, r0
	movge r0, #1
	movlt r0, #0
	pop {r3, r4, r5, pc}
_02049AFC:
	ldrh r0, [r4, #4]
	cmp r5, r0
	blt _02049B18
	ldrh r0, [r4, #6]
	cmp r5, r0
	movle r0, #1
	pople {r3, r4, r5, pc}
_02049B18:
	mov r0, #0
	pop {r3, r4, r5, pc}
_02049B20:
	cmp r3, #0
	cmpeq r5, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r1, ip
	bl FUN_02049a40
	cmp r0, #0
	mov r2, #0
	ble _02049B64
_02049B44:
	add r1, r4, r2, lsl #1
	ldrh r1, [r1, #4]
	cmp r5, r1
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	add r2, r2, #1
	cmp r2, r0
	blt _02049B44
_02049B64:
	mov r0, #0
	pop {r3, r4, r5, pc}
_02049B6C:
	ldr r3, [sp, #0x10]
	bl FUN_0204f02c
	cmp r5, r0
	movle r0, #1
	movgt r0, #0
	pop {r3, r4, r5, pc}
_02049B84:
	ldr r3, [sp, #0x10]
	bl FUN_0204f02c
	cmp r5, r0
	movle r0, #1
	movgt r0, #0
	pop {r3, r4, r5, pc}
_02049B9C:
	ldr r3, [sp, #0x10]
	bl FUN_0204f02c
	cmp r5, r0
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}
_02049BB4:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02049bbc
FUN_02049bbc: ; 0x02049BBC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs sb, r1
	mov r5, r2
	mov r6, r0
	cmpne r5, #0
	mov r4, r3
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r4
	bl FUN_0204b1b8
	mov r8, r0
	cmp r8, #1
	bne _02049C14
	mov r0, sb
	bl FUN_0206cbf8
	mov r7, r0
	mov r0, r5
	bl FUN_0206cbf8
	cmp r7, r0
	beq _02049C98
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02049bbc
_02049C14:
	cmp r8, #5
	mov r0, sb
	bne _02049C38
	mov r1, r5
	bl FUN_020F0728
	cmp r0, #0
	bne _02049C98
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02049C38:
	bl FUN_0206cbf8
	mov r7, r0
	mov r0, r5
	bl FUN_0206cbf8
	cmp r7, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r8, #2
	bne _02049C78
	mov r0, sb
	mov r1, r5
	bl FUN_020F0728
	cmp r0, #0
	bne _02049C98
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02049C78:
	cmp r8, #3
	bne _02049C98
	mov r0, sb
	mov r1, r5
	bl FUN_020F0728
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
_02049C98:
	ldrb r0, [r4, #2]
	mov r8, #1
	cmp r0, #0xe
	moveq r8, #6
	beq _02049CB4
	cmp r0, #0xd
	moveq r8, #6
_02049CB4:
	cmp r8, #0
	mov r7, #0
	ble _02049D04
_02049CC0:
	ldrb r2, [r4, #2]
	mov r0, r6
	mov r1, r5
	mov r3, r7
	bl FUN_0204f02c
	mov r2, r0
	mov r0, r6
	mov r1, r5
	mov r3, r4
	str r7, [sp]
	bl FUN_02049a74
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	add r7, r7, #1
	cmp r7, r8
	blt _02049CC0
_02049D04:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02049d0c
FUN_02049d0c: ; 0x02049D0C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	add r5, sp, #0
	mov r7, #0
	movs r4, r1
	mov sb, r0
	mov r6, r2
	mov r8, r3
	strh r7, [r5]
	strh r7, [r5, #2]
	beq _02049D48
	mov r0, r4
	mov r1, r8
	bl FUN_0206cdf8
	cmp r6, r0
	beq _02049D50
	arm_func_end FUN_02049d0c
_02049D48:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02049D50:
	mov r0, r4
	mov r1, r8
	mov r2, r7
	mov r3, r7
	bl FUN_0206d150
	mov r0, sb
	mov r1, r6
	bl FUN_0204a2c4
	cmp r0, #0
	moveq r0, r7
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldrb r0, [r0, #0xa]
	cmp r0, #0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
_02049D8C:
	cmp r7, r8
	beq _02049DEC
	mov r0, r4
	mov r1, r7
	bl FUN_0206cdf8
	cmp r6, r0
	bne _02049DEC
	mov r0, r4
	mov r1, r7
	mov r2, #0
	bl FUN_0206ce24
	mov r5, #1
	mov r6, r0
	mov r0, r4
	mov r1, r7
	mov r2, r5
	bl FUN_0206ce24
	mov r3, r0
	mov r0, r4
	mov r1, r8
	mov r2, r6
	bl FUN_0206d150
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02049DEC:
	add r7, r7, #1
	cmp r7, #6
	blt _02049D8C
	ldrh r2, [sp]
	ldrh r3, [sp, #2]
	mov r0, r4
	mov r1, r8
	bl FUN_0206d150
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02049e14
FUN_02049e14: ; 0x02049E14
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r8, r1
	mov sb, r0
	mov r7, r2
	mvn r4, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r3, #0
	movne r5, #0
	movne r6, #4
	moveq r5, #4
	moveq r6, #6
	cmp r5, r6
	bge _02049E80
	arm_func_end FUN_02049e14
_02049E4C:
	mov r0, r8
	mov r1, r5
	bl FUN_0206cdf8
	cmp r0, r7
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r4, #0
	bge _02049E74
	cmp r0, #0
	moveq r4, r5
_02049E74:
	add r5, r5, #1
	cmp r5, r6
	blt _02049E4C
_02049E80:
	cmp r4, #0
	movlt r0, #0
	poplt {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, sb
	mov r1, r8
	mov r2, r7
	mov r3, r4
	bl FUN_02049ee8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02049ea4
FUN_02049ea4: ; 0x02049EA4
	push {r3, r4, r5, r6, r7, lr}
	mov r4, #0
	mov r7, r0
	mov r0, r1
	mov r1, r4
	mov r6, r2
	mov r5, r3
	bl FUN_020EFA9C
	movs r1, r0
	beq _02049EE0
	mov r0, r7
	mov r2, r6
	mov r3, r5
	bl FUN_02049ee8
	mov r4, r0
	arm_func_end FUN_02049ea4
_02049EE0:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02049ee8
FUN_02049ee8: ; 0x02049EE8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r6, r1
	mov r7, r0
	mov r5, r2
	mov r4, r3
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r1, r5
	bl FUN_0204a2c4
	movs r2, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r7
	mov r1, r6
	mov r3, #1
	bl FUN_02049fc8
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r4, #4
	cmpne r4, #5
	beq _02049F84
	lsl r1, r5, #0x10
	mov r0, r6
	lsr r1, r1, #0x10
	bl FUN_0206cfd0
	movs sb, r0
	beq _02049FA0
	mov r8, #0
	arm_func_end FUN_02049ee8
_02049F5C:
	mov r0, r6
	mov r1, r8
	bl FUN_0206cdf8
	cmp r5, r0
	moveq r4, r8
	beq _02049FA0
	add r8, r8, #1
	cmp r8, #4
	blt _02049F5C
	b _02049FA0
_02049F84:
	lsl r2, r5, #0x10
	mov r0, r6
	mov r1, r4
	lsr r2, r2, #0x10
	mov r3, #1
	bl FUN_0206ceac
	mov sb, r0
_02049FA0:
	cmp sb, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r7
	mov r1, r6
	mov r2, r5
	mov r3, r4
	bl FUN_02049d0c
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02049fc8
FUN_02049fc8: ; 0x02049FC8
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	ldrb r2, [r2, #7]
	mov r8, r0
	mov r7, r1
	cmp r2, #0
	mov r5, r3
	addeq sp, sp, #0xc
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, pc}
	add r4, sp, #0
	mov r1, r4
	bl FUN_0204a1e0
	cmp r0, #0
	addeq sp, sp, #0xc
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r4
	bl FUN_0204b1b8
	cmp r0, #1
	bne _0204A038
	mov r0, r8
	mov r1, r7
	mov r2, r7
	mov r3, r4
	bl FUN_02049bbc
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02049fc8
_0204A038:
	cmp r5, #0
	addne sp, sp, #0xc
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, pc}
	mov r6, #0
	mov r5, r6
_0204A050:
	mov r0, r8
	mov r1, r5
	bl FUN_0204bbd0
	mov r2, r0
	mov r0, r8
	mov r1, r7
	mov r3, r4
	bl FUN_02049bbc
	cmp r0, #0
	beq _0204A08C
	mov r0, r4
	add r6, r6, #1
	bl FUN_0204b1c8
	cmp r6, r0
	bge _0204A098
_0204A08C:
	add r5, r5, #1
	cmp r5, #0x16
	blt _0204A050
_0204A098:
	add r0, sp, #0
	bl FUN_0204b1c8
	cmp r6, r0
	movge r0, #1
	movlt r0, #0
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204a0b4
FUN_0204a0b4: ; 0x0204A0B4
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov r6, r2
	mov r7, r1
	mov r5, r3
	mov r1, r6
	mov r8, r0
	mov sb, #0
	bl FUN_0204a2c4
	mov r4, r0
	cmp r5, #0
	movne r0, #1
	strne r0, [r5]
	cmp r4, #0
	beq _0204A118
	ldrb r0, [r4]
	cmp r0, #0
	beq _0204A10C
	ldrsh r0, [r4, #4]
	cmp r0, #0
	movge r0, #1
	bge _0204A110
	arm_func_end FUN_0204a0b4
_0204A10C:
	mov r0, #0
_0204A110:
	cmp r0, #0
	bne _0204A130
_0204A118:
	cmp r5, #0
	movne r0, #3
	strne r0, [r5]
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0204A130:
	mov r0, r7
	bl FUN_0206cc84
	mov sl, r0
	mov r0, r4
	mov r1, r7
	bl FUN_0204b114
	cmp sl, r0
	bge _0204A168
	cmp r5, #0
	movne r0, #4
	strne r0, [r5]
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0204A168:
	ldrb r0, [r4, #0xa]
	cmp r0, #0
	beq _0204A1CC
	mov r4, #0
_0204A178:
	mov r0, r7
	mov r1, r4
	bl FUN_0206cdf8
	cmp r6, r0
	bne _0204A1C0
	add r3, sp, #0
	mov r0, r8
	mov r1, r7
	mov r2, r6
	bl FUN_0204a318
	cmp r0, #0
	bne _0204A1CC
	cmp r5, #0
	movne r0, #8
	strne r0, [r5]
	add sp, sp, #4
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0204A1C0:
	add r4, r4, #1
	cmp r4, #6
	blt _0204A178
_0204A1CC:
	cmp r5, #0
	strne sb, [r5]
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0204a1e0
FUN_0204a1e0: ; 0x0204A1E0
	push {r0, r1, r2, r3}
	push {r4, lr}
	sub sp, sp, #0x10
	ldr r1, [sp, #0x1c]
	mov r4, r2
	cmp r1, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r4, lr}
	addeq sp, sp, #0x10
	bxeq lr
	mov r1, r4
	bl FUN_0204a2a0
	cmp r0, #0
	beq _0204A23C
	ldr r1, [sp, #0x1c]
	mov r2, #0xc
	bl _memcpy
	add sp, sp, #0x10
	mov r0, #1
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_0204a1e0
_0204A23C:
	ldr r3, _0204A298 ; =0x0209A250
	ldr r1, _0204A29C ; =0x020904D8
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _0204A27C
	mov r2, #0xc
	mul ip, r4, r2
	str ip, [sp]
	str r2, [sp, #4]
	mov ip, #0
	str ip, [sp, #8]
	mov ip, #1
	add r2, sp, #0x1c
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_0204A27C:
	cmp r0, #0
	moveq r0, #0
	movne r0, #1
	add sp, sp, #0x10
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_0204A298: .word 0x0209A250
_0204A29C: .word 0x020904D8

	arm_func_start FUN_0204a2a0
FUN_0204a2a0: ; 0x0204A2A0
	ldr r2, [r0, #0x808]
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	cmp r1, #0x40
	movhs r0, #0
	movlo r0, #0xc
	mlalo r0, r1, r0, r2
	bx lr
	arm_func_end FUN_0204a2a0

	arm_func_start FUN_0204a2c4
FUN_0204a2c4: ; 0x0204A2C4
	cmp r1, #0x200
	movhs r0, #0
	ldrlo r2, [r0, #0x7d4]
	movlo r0, #0x24
	mlalo r0, r1, r0, r2
	bx lr
	arm_func_end FUN_0204a2c4

	arm_func_start FUN_0204a2dc
FUN_0204a2dc: ; 0x0204A2DC
	push {r4, lr}
	mov r4, r0
	cmp r1, #0
	moveq r0, #0
	popeq {r4, pc}
	mov r0, r1
	mov r1, r2
	bl FUN_0206cdf8
	mov r1, r0
	mov r0, r4
	bl FUN_0204a2c4
	cmp r0, #0
	ldrbne r0, [r0, #0xa]
	moveq r0, #0
	pop {r4, pc}
	arm_func_end FUN_0204a2dc

	arm_func_start FUN_0204a318
FUN_0204a318: ; 0x0204A318
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	movs r7, r1
	mov r8, r0
	mov r6, r2
	mov r5, r3
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r4, #0
	arm_func_end FUN_0204a318
_0204A340:
	mov r0, r7
	mov r1, r4
	bl FUN_0206cdf8
	cmp r6, r0
	beq _0204A360
	add r4, r4, #1
	cmp r4, #6
	blt _0204A340
_0204A360:
	cmp r4, #6
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov ip, #1
	mov r0, r8
	mov r1, r7
	mov r2, r4
	mov r3, r5
	str ip, [sp]
	bl FUN_0204a394
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204a394
FUN_0204a394: ; 0x0204A394
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x74
	mov sb, r3
	movs sl, r1
	mov fp, r0
	ldr r8, [sp, #0x98]
	str r2, [sp, #0xc]
	cmpne sb, #0
	mov r0, #0
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	strhne r0, [sb, #2]
	ldrhne r0, [sb, #2]
	ldr r1, [sp, #0xc]
	strhne r0, [sb]
	mov r0, sl
	bl FUN_0206cdf8
	str r0, [sp, #0x18]
	ldr r1, [sp, #0x18]
	mov r0, fp
	bl FUN_0204a2c4
	movs r5, r0
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [r5, #0xa]
	cmp r0, #0
	addeq sp, sp, #0x74
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r6, #0
	mov r7, r6
	ble _0204A4C4
	arm_func_end FUN_0204a394
_0204A41C:
	ldr r1, [sp, #0xc]
	mov r0, sl
	mov r2, r7
	bl FUN_0206ce24
	cmp r0, #0
	beq _0204A4B4
	ldrb r3, [r5, #0xa]
	mov r2, #0
	cmp r3, #0
	ble _0204A460
_0204A444:
	lsl r1, r2, #1
	ldrh r1, [sb, r1]
	cmp r0, r1
	beq _0204A460
	add r2, r2, #1
	cmp r2, r3
	blt _0204A444
_0204A460:
	cmp r2, r3
	bne _0204A4B4
	mov r1, #0
	bl FUN_020EFA9C
	movs r4, r0
	beq _0204A4B4
	cmp r8, #0
	beq _0204A48C
	bl FUN_0206d688
	cmp r0, #0
	beq _0204A4B4
_0204A48C:
	mov r0, r4
	bl FUN_0206cbf8
	lsl r1, r7, #1
	strh r0, [sb, r1]
	ldrb r0, [r5, #0xa]
	add r6, r6, #1
	cmp r6, r0
	addeq sp, sp, #0x74
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204A4B4:
	ldrb r0, [r5, #0xa]
	add r7, r7, #1
	cmp r7, r0
	blt _0204A41C
_0204A4C4:
	cmp r8, #0
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [r5, #0xb]
	cmp r0, #0x51
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [r5, #0xf]
	cmp r0, #0x51
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	bl FUN_0206d688
	cmp r0, #0
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r8, _0204A740 ; =0x02099EF0
	ldr r0, [r8]
	cmp r0, #0
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0
	mov r7, r4
_0204A534:
	mov r0, fp
	mov r1, r7
	bl FUN_0204bbd0
	cmp sl, r0
	bne _0204A55C
	ldr r0, [r8]
	mov r1, r7
	mov r2, #0
	bl FUN_02143088
	mov r4, r0
_0204A55C:
	add r7, r7, #1
	cmp r7, #0x16
	blt _0204A534
	cmp r4, #0
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, sp, #0x1c
	str r1, [sp]
	ldr r0, _0204A744 ; =0x00060001
	add r7, sp, #0x48
	str r0, [sp, #4]
	ldr r0, _0204A740 ; =0x02099EF0
	str sl, [sp, #8]
	ldr r0, [r0]
	mov r1, r4
	mov r3, r7
	mov r2, #0xb
	bl FUN_0213F1D8
	str r0, [sp, #0x14]
	cmp r0, #0
	mov r4, #0
	ble _0204A5D0
_0204A5B8:
	ldr r0, [r7, r4, lsl #2]
	bl FUN_020EFA80
	ldr r0, [sp, #0x14]
	add r4, r4, #1
	cmp r4, r0
	blt _0204A5B8
_0204A5D0:
	ldrb r0, [r5, #0xb]
	cmp r0, #0
	bne _0204A5E8
	ldrb r0, [r5, #0xf]
	cmp r0, #0
	beq _0204A734
_0204A5E8:
	ldr r0, [sp, #0x14]
	cmp r0, #0
	mov r0, #0
	str r0, [sp, #0x10]
	ble _0204A734
_0204A5FC:
	ldr r0, [sp, #0x10]
	add r1, sp, #0x48
	ldr r0, [r1, r0, lsl #2]
	bl FUN_020EFA80
	movs r8, r0
	beq _0204A71C
	bl FUN_0206cc00
	mov r4, r0
	mov r0, sl
	bl FUN_0206cc00
	cmp r4, r0
	beq _0204A71C
	ldrb r0, [r5, #0xa]
	mov r7, #0
	cmp r0, #0
	ble _0204A66C
	ldr r4, _0204A748 ; =0x00000FFF
_0204A640:
	mov r0, r8
	bl FUN_0206cc00
	lsl r1, r7, #1
	ldrh r1, [sb, r1]
	and r1, r1, r4
	cmp r1, r0
	beq _0204A66C
	ldrb r0, [r5, #0xa]
	add r7, r7, #1
	cmp r7, r0
	blt _0204A640
_0204A66C:
	ldrb r0, [r5, #0xa]
	cmp r7, r0
	bne _0204A71C
	ldrh r0, [sb]
	cmp r0, #0
	bne _0204A6C0
	mov r4, #0
	str r4, [sp]
	mov r4, #1
	ldr r2, [sp, #0x18]
	mov r0, fp
	mov r1, sl
	mov r3, r8
	str r4, [sp, #4]
	bl FUN_0204a798
	cmp r0, #0
	bne _0204A71C
	mov r0, r8
	bl FUN_0206cbf8
	strh r0, [sb]
	b _0204A704
_0204A6C0:
	ldrh r0, [sb, #2]
	cmp r0, #0
	bne _0204A704
	mov r4, #0
	str r4, [sp]
	mov r4, #2
	ldr r2, [sp, #0x18]
	mov r0, fp
	mov r1, sl
	mov r3, r8
	str r4, [sp, #4]
	bl FUN_0204a798
	cmp r0, #0
	bne _0204A71C
	mov r0, r8
	bl FUN_0206cbf8
	strh r0, [sb, #2]
_0204A704:
	ldrb r0, [r5, #0xa]
	add r6, r6, #1
	cmp r6, r0
	addeq sp, sp, #0x74
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204A71C:
	ldr r0, [sp, #0x10]
	add r1, r0, #1
	ldr r0, [sp, #0x14]
	str r1, [sp, #0x10]
	cmp r1, r0
	blt _0204A5FC
_0204A734:
	mov r0, #0
	add sp, sp, #0x74
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204A740: .word 0x02099EF0
_0204A744: .word 0x00060001
_0204A748: .word 0x00000FFF

	arm_func_start FUN_0204a74c
FUN_0204a74c: ; 0x0204A74C
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r5, r1
	mov r6, r0
	mov r0, r5
	mov r1, r2
	mov r4, r3
	bl FUN_0206cdf8
	ldrb r1, [sp, #0x18]
	mov r2, r0
	ldr ip, [sp, #0x1c]
	str r1, [sp]
	mov r0, r6
	mov r1, r5
	mov r3, r4
	str ip, [sp, #4]
	bl FUN_0204a798
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0204a74c

	arm_func_start FUN_0204a798
FUN_0204a798: ; 0x0204A798
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sb, r0
	cmp r1, #0
	mov sl, r2
	mov r8, r3
	mov r7, #0
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r8, #0
	moveq r0, #3
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, r1
	bl FUN_0206cbf8
	mov r4, r0
	mov r0, r8
	bl FUN_0206cbf8
	cmp r4, r0
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, sb
	mov r1, sl
	bl FUN_0204a2c4
	movs r4, r0
	moveq r0, #6
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrb r0, [r4, #0xa]
	cmp r0, #0
	moveq r0, #5
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrb r0, [sp, #0x20]
	cmp r0, #0
	beq _0204A82C
	mov r0, r8
	bl FUN_0206d688
	cmp r0, #0
	moveq r0, #2
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_0204a798
_0204A82C:
	ldr r0, [sp, #0x24]
	cmp r0, #1
	ldrbeq r5, [r4, #0xb]
	ldrsheq r6, [r4, #0xc]
	beq _0204A84C
	cmp r0, #2
	ldrbeq r5, [r4, #0xf]
	ldrsheq r6, [r4, #0x10]
_0204A84C:
	cmp r5, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r5, #0x51
	mov r0, sb
	bne _0204A884
	mov r1, r8
	mov r2, r5
	mov r3, r6
	bl FUN_0204f02c
	mov r7, #1
	cmp r0, #0
	moveq r7, #0
	b _0204A908
_0204A884:
	mov r1, r5
	bl FUN_0204ef90
	cmp r0, #0
	beq _0204A8E8
	mov sl, #1
	cmp r5, #0xe
	moveq sl, #6
	beq _0204A8AC
	cmp r5, #0xd
	moveq sl, #6
_0204A8AC:
	cmp sl, #0
	mov r4, #0
	ble _0204A908
_0204A8B8:
	mov r0, sb
	mov r1, r8
	mov r2, r5
	mov r3, r4
	bl FUN_0204f02c
	cmp r6, r0
	moveq r7, #1
	beq _0204A908
	add r4, r4, #1
	cmp r4, sl
	blt _0204A8B8
	b _0204A908
_0204A8E8:
	mov r7, #0
	mov r0, sb
	mov r1, r8
	mov r2, r5
	mov r3, r7
	bl FUN_0204f02c
	cmp r0, r6
	movge r7, #1
_0204A908:
	mov r0, #4
	cmp r7, #0
	movne r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0204a918
FUN_0204a918: ; 0x0204A918
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #8
	mov r6, r2
	movs r7, r1
	cmpne r6, #0
	mov r8, r0
	mov r5, r3
	mov sb, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r1, r6
	bl FUN_0204a2c4
	movs r4, r0
	addeq sp, sp, #8
	moveq r0, sb
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldrb r0, [r4, #0xa]
	cmp r0, #0
	addeq sp, sp, #8
	moveq r0, sb
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r5, #0
	moveq r5, sb
	beq _0204A9B8
	mov r0, r8
	mov r1, r7
	mov r2, r6
	mov r3, r5
	str sb, [sp]
	mov ip, #1
	str ip, [sp, #4]
	bl FUN_0204a798
	cmp r0, #0
	addne sp, sp, #8
	movne r0, sb
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r5
	bl FUN_0206cbf8
	mov r5, r0
	arm_func_end FUN_0204a918
_0204A9B8:
	ldrb r0, [r4, #0xa]
	mov r4, #0
	cmp r0, #2
	bne _0204AA0C
	ldr r3, [sp, #0x28]
	cmp r3, #0
	beq _0204AA0C
	mov r0, r8
	mov r1, r7
	mov r2, r6
	str r4, [sp]
	mov r8, #2
	str r8, [sp, #4]
	bl FUN_0204a798
	cmp r0, #0
	addne sp, sp, #8
	movne r0, r4
	popne {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sp, #0x28]
	bl FUN_0206cbf8
	mov r4, r0
_0204AA0C:
	mov sb, #0
	mov r8, sb
_0204AA14:
	mov r0, r7
	mov r1, r8
	bl FUN_0206cdf8
	cmp r6, r0
	bne _0204AA40
	mov r0, r7
	mov r1, r8
	mov r2, r5
	mov r3, r4
	bl FUN_0206d150
	add sb, sb, #1
_0204AA40:
	add r8, r8, #1
	cmp r8, #6
	blt _0204AA14
	mov r0, #1
	cmp sb, #0
	movle r0, #0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0204aa60
FUN_0204aa60: ; 0x0204AA60
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	movs r5, r1
	mov r6, r0
	mov r4, r3
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	mov r0, r5
	mov r1, r2
	bl FUN_0206cdf8
	ldr ip, [sp, #0x18]
	mov r2, r0
	mov r0, r6
	mov r1, r5
	mov r3, r4
	str ip, [sp]
	bl FUN_0204a918
	ldr r0, _0204AAE4 ; =0x020A0640
	ldrb r1, [r0, #0x1a]
	cmp r1, #0
	beq _0204AAD8
	ldrsh r3, [r5, #0x94]
	cmp r3, #0
	blt _0204AAD8
	cmp r3, #0x20
	ldrlt r2, [r0, #0x78]
	movlt r1, #1
	orrlt r1, r2, r1, lsl r3
	strlt r1, [r0, #0x78]
	arm_func_end FUN_0204aa60
_0204AAD8:
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_0204AAE4: .word 0x020A0640

	arm_func_start FUN_0204aae8
FUN_0204aae8: ; 0x0204AAE8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r4, #0
	mov sb, r3
	mov fp, r1
	mov sl, r2
	mov r5, r4
	mov r2, r4
	cmp sb, #0
	ldr r8, [sp, #0x28]
	ldr r7, [sp, #0x2c]
	mov r0, r4
	mov r1, r4
	ble _0204AB2C
	arm_func_end FUN_0204aae8
_0204AB1C:
	str r1, [sl, r2, lsl #2]
	add r2, r2, #1
	cmp r2, sb
	blt _0204AB1C
_0204AB2C:
	cmp r7, #0
	mov r1, #0
	ble _0204AB48
_0204AB38:
	str r0, [r8, r1, lsl #2]
	add r1, r1, #1
	cmp r1, r7
	blt _0204AB38
_0204AB48:
	mov r6, #0
_0204AB4C:
	mov r0, fp
	mov r1, r6
	bl FUN_0206cdf8
	cmp r4, sb
	strlt r0, [sl, r4, lsl #2]
	add r6, r6, #1
	addlt r4, r4, #1
	cmp r6, #4
	blt _0204AB4C
	cmp r6, #6
	bge _0204AB9C
_0204AB78:
	mov r0, fp
	mov r1, r6
	bl FUN_0206cdf8
	cmp r5, r7
	strlt r0, [r8, r5, lsl #2]
	add r6, r6, #1
	addlt r5, r5, #1
	cmp r6, #6
	blt _0204AB78
_0204AB9C:
	add r0, r4, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0204aba4
FUN_0204aba4: ; 0x0204ABA4
	push {r3, lr}
	sub sp, sp, #8
	cmp r1, #0
	ldr lr, [sp, #0x10]
	ldr ip, [sp, #0x14]
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, pc}
	cmp r2, #0
	bne _0204ABF8
	cmp r3, #0
	mov r2, lr
	mov r3, #0
	str ip, [sp]
	bne _0204ABEC
	bl FUN_0204aeb0
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_0204aba4
_0204ABEC:
	bl FUN_0204aed8
	add sp, sp, #8
	pop {r3, pc}
_0204ABF8:
	cmp r2, #2
	bne _0204AC20
	mov r2, #0x40
	str r2, [sp]
	mov r3, lr
	mov r2, #0
	str ip, [sp, #4]
	bl FUN_0204ad5c
	add sp, sp, #8
	pop {r3, pc}
_0204AC20:
	cmp r3, #0
	mov r2, lr
	mov r3, #0
	str ip, [sp]
	bne _0204AC40
	bl FUN_0204af00
	add sp, sp, #8
	pop {r3, pc}
_0204AC40:
	bl FUN_0204af28
	add sp, sp, #8
	pop {r3, pc}

	arm_func_start FUN_0204ac4c
FUN_0204ac4c: ; 0x0204AC4C
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	mov r8, #0
	mov sl, r0
	mov sb, r1
	add r4, sp, #8
	mov r7, #0x20
	mov r6, r8
	mov r5, #7
	arm_func_end FUN_0204ac4c
_0204AC70:
	str r7, [sp]
	mov r0, sl
	mov r1, sb
	mov r2, r5
	mov r3, r8
	str r6, [sp, #4]
	bl FUN_0204ad5c
	movs r2, r0
	addeq sp, sp, #0xc
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, sl
	mov r1, sb
	mov r3, r4
	bl FUN_0204a0b4
	cmp r0, #0
	addne sp, sp, #0xc
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	add r8, r8, #1
	cmp r8, #6
	blt _0204AC70
	mov r0, r6
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0204acd4
FUN_0204acd4: ; 0x0204ACD4
	tst r3, #1
	beq _0204ACEC
	mov r0, #1
	cmp r2, #0
	movne r0, #2
	bx lr
	arm_func_end FUN_0204acd4
_0204ACEC:
	mov r0, #3
	cmp r2, #0
	movne r0, #2
	bx lr

	arm_func_start FUN_0204acfc
FUN_0204acfc: ; 0x0204ACFC
	tst r3, #1
	beq _0204AD14
	mov r0, #0xc
	cmp r2, #0
	movne r0, #0xb
	bx lr
	arm_func_end FUN_0204acfc
_0204AD14:
	mov r0, #0xa
	cmp r2, #0
	movne r0, #0xb
	bx lr

	arm_func_start FUN_0204ad24
FUN_0204ad24: ; 0x0204AD24
	tst r3, #0x10
	beq _0204AD3C
	mov r0, #0x16
	cmp r2, #0
	movne r0, #0x17
	bx lr
	arm_func_end FUN_0204ad24
_0204AD3C:
	mov r0, #0x14
	cmp r2, #0
	movne r0, #0x15
	bx lr

	arm_func_start FUN_0204ad4c
FUN_0204ad4c: ; 0x0204AD4C
	mov r0, #0x1e
	cmp r2, #0
	movne r0, #0x1f
	bx lr
	arm_func_end FUN_0204ad4c

	arm_func_start FUN_0204ad5c
FUN_0204ad5c: ; 0x0204AD5C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r6, [sp, #0x30]
	mov r4, #0
	ldr sb, [sp, #0x34]
	str r0, [sp]
	mov sl, r1
	str r2, [sp, #4]
	str r3, [sp, #8]
	mov r5, r4
	and fp, r6, #0x40
	and r8, r6, #0x20
	arm_func_end FUN_0204ad5c
_0204AD8C:
	mov r0, sl
	mov r1, r5
	bl FUN_0206cdf8
	movs r6, r0
	beq _0204AE94
	ldr r0, [sp]
	mov r1, r6
	bl FUN_0204a2c4
	movs r7, r0
	beq _0204AE94
	cmp sb, #0
	bne _0204ADD0
	mov r0, sl
	mov r1, r5
	bl FUN_0206d194
	cmp r0, #0
	bne _0204AE94
_0204ADD0:
	cmp fp, #0
	beq _0204AE38
	ldr r0, _0204AEAC ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_0213777C
	ldrb r1, [r0, #0x2f]
	ldrb r0, [r0, #0x2e]
	cmp r0, #1
	bne _0204AE20
	ldrb r0, [r7, #0x13]
	tst r0, #4
	movne r2, #1
	moveq r2, #0
	cmp r2, #1
	beq _0204AE20
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	cmp r0, #1
	bne _0204AE94
_0204AE20:
	cmp r1, #1
	bne _0204AE7C
	ldrb r0, [r7, #0x13]
	tst r0, #8
	beq _0204AE94
	b _0204AE7C
_0204AE38:
	cmp r8, #0
	beq _0204AE6C
	ldrb r0, [r7]
	cmp r0, #7
	bne _0204AE5C
	ldrb r0, [r7, #0x13]
	tst r0, #1
	movne r0, #1
	bne _0204AE60
_0204AE5C:
	mov r0, #0
_0204AE60:
	cmp r0, #1
	beq _0204AE7C
	b _0204AE94
_0204AE6C:
	ldrb r1, [r7]
	ldr r0, [sp, #4]
	cmp r1, r0
	bne _0204AE94
_0204AE7C:
	ldr r0, [sp, #8]
	cmp r4, r0
	addeq sp, sp, #0xc
	moveq r0, r6
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r4, r4, #1
_0204AE94:
	add r5, r5, #1
	cmp r5, #6
	blt _0204AD8C
	mov r0, #0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204AEAC: .word 0x02099EF0

	arm_func_start FUN_0204aeb0
FUN_0204aeb0: ; 0x0204AEB0
	push {r3, lr}
	sub sp, sp, #8
	ldrb ip, [sp, #0x10]
	str r3, [sp]
	mov r3, r2
	mov r2, #5
	str ip, [sp, #4]
	bl FUN_0204ad5c
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_0204aeb0

	arm_func_start FUN_0204aed8
FUN_0204aed8: ; 0x0204AED8
	push {r3, lr}
	sub sp, sp, #8
	ldrb ip, [sp, #0x10]
	str r3, [sp]
	mov r3, r2
	mov r2, #6
	str ip, [sp, #4]
	bl FUN_0204ad5c
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_0204aed8

	arm_func_start FUN_0204af00
FUN_0204af00: ; 0x0204AF00
	push {r3, lr}
	sub sp, sp, #8
	ldrb ip, [sp, #0x10]
	str r3, [sp]
	mov r3, r2
	mov r2, #7
	str ip, [sp, #4]
	bl FUN_0204ad5c
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_0204af00

	arm_func_start FUN_0204af28
FUN_0204af28: ; 0x0204AF28
	push {r3, lr}
	sub sp, sp, #8
	ldrb ip, [sp, #0x10]
	str r3, [sp]
	mov r3, r2
	mov r2, #8
	str ip, [sp, #4]
	bl FUN_0204ad5c
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_0204af28

	arm_func_start FUN_0204af50
FUN_0204af50: ; 0x0204AF50
	ldr r0, [r0, #0x810]
	cmp r0, #0
	ldrsbne r0, [r0, r1]
	moveq r0, #0
	bx lr
	arm_func_end FUN_0204af50

	arm_func_start FUN_0204af64
FUN_0204af64: ; 0x0204AF64
	ldr r3, [r0, #0x810]
	cmp r3, #0
	moveq r0, #0
	bxeq lr
	cmp r2, #0x7f
	movgt r2, #0x7f
	mvn r0, #0x7e
	cmp r2, r0
	movlt r2, r0
	strb r2, [r3, r1]
	mov r0, #1
	bx lr
	arm_func_end FUN_0204af64

	arm_func_start FUN_0204af94
FUN_0204af94: ; 0x0204AF94
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r0, r1
	mov r1, r4
	mov r5, r2
	bl FUN_020EFA9C
	cmp r0, #0
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	cmp r5, #0x200
	movhs r0, #0
	ldrlo r1, [r0, #0x88]
	movlo r0, #1
	strhlo r5, [r1, #0x32]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0204af94

	arm_func_start FUN_0204afd0
FUN_0204afd0: ; 0x0204AFD0
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	mov r0, r1
	mov r1, r6
	mov r4, r2
	mov r7, r3
	bl FUN_020EFA9C
	movs r5, r0
	popeq {r3, r4, r5, r6, r7, pc}
	sub r0, r6, #1
	cmp r4, r0
	bne _0204B054
	mov r4, #1
	arm_func_end FUN_0204afd0
_0204B004:
	mov r0, r5
	mov r1, r6
	bl FUN_0206cdf8
	cmp r0, #0
	beq _0204B044
	ldr r3, [r5, #0x88]
	lsl r2, r4, r6
	ldrb r1, [r3, #0x88]
	rsb r0, r2, #0xff
	cmp r7, #0
	and r0, r1, r0
	strb r0, [r3, #0x88]
	ldrbne r1, [r3, #0x88]
	andne r0, r2, #0xff
	orrne r0, r1, r0
	strbne r0, [r3, #0x88]
_0204B044:
	add r6, r6, #1
	cmp r6, #6
	blt _0204B004
	pop {r3, r4, r5, r6, r7, pc}
_0204B054:
	mov r0, r5
	mov r1, r6
	bl FUN_0206cdf8
	cmp r4, r0
	bne _0204B09C
	ldr r3, [r5, #0x88]
	mov r0, #1
	lsl r2, r0, r6
	ldrb r1, [r3, #0x88]
	rsb r0, r2, #0xff
	cmp r7, #0
	and r0, r1, r0
	strb r0, [r3, #0x88]
	ldrbne r1, [r3, #0x88]
	andne r0, r2, #0xff
	orrne r0, r1, r0
	strbne r0, [r3, #0x88]
	pop {r3, r4, r5, r6, r7, pc}
_0204B09C:
	add r6, r6, #1
	cmp r6, #6
	blt _0204B054
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204b0ac
FUN_0204b0ac: ; 0x0204B0AC
	cmp r1, #0x40
	movhs r0, #0
	ldrlo r2, [r0, #0x80c]
	movlo r0, #0x14
	mlalo r0, r1, r0, r2
	bx lr
	arm_func_end FUN_0204b0ac

	arm_func_start FUN_0204b0c4
FUN_0204b0c4: ; 0x0204B0C4
	ldrsh r0, [r0, #4]
	cmp r0, #0
	rsblt r0, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	cmp r1, #0
	addne r1, r0, r0, lsl #1
	asrne r0, r1, #1
	addne r0, r1, r0, lsr #30
	lslne r0, r0, #0xe
	lsrne r0, r0, #0x10
	mul r1, r0, r2
	ldr r2, _0204B110 ; =0x51EB851F
	lsr r0, r1, #0x1f
	smull r1, r3, r2, r1
	add r3, r0, r3, asr #5
	lsl r0, r3, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0_0204B110: .word 0x51EB851F
	arm_func_end FUN_0204b0c4

	arm_func_start FUN_0204b114
FUN_0204b114: ; 0x0204B114
	push {r4, r5, r6, r7, r8, lr}
	movs r8, r1
	ldrne r7, _0204B1AC ; =0x02099EF0
	mov r6, r0
	ldrne r0, [r7]
	mov r4, #0
	mov r5, #0x64
	cmpne r0, #0
	beq _0204B154
	mov r0, r8
	bl FUN_0206d5f0
	mov r1, r0
	ldr r0, [r7]
	bl FUN_02145190
	cmp r0, #0
	movne r4, #1
	arm_func_end FUN_0204b114
_0204B154:
	ldr r0, [r8, #0x90]
	tst r0, #0x200
	beq _0204B170
	ldr r0, _0204B1B0 ; =0x0209BA20
	mov r1, #0x3c
	bl FUN_0204a2c4
	ldrb r5, [r0, #6]
_0204B170:
	ldr r0, [r8, #0x90]
	tst r0, #0x400
	beq _0204B198
	mov r0, #0x78
	mul r1, r5, r0
	ldr r2, _0204B1B4 ; =0x51EB851F
	lsr r0, r1, #0x1f
	smull r1, r3, r2, r1
	add r3, r0, r3, asr #5
	and r5, r3, #0xff
_0204B198:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_0204b0c4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0204B1AC: .word 0x02099EF0
_0204B1B0: .word 0x0209BA20
_0204B1B4: .word 0x51EB851F

	arm_func_start FUN_0204b1b8
FUN_0204b1b8: ; 0x0204B1B8
	ldrb r0, [r0, #1]
	asr r0, r0, #5
	and r0, r0, #7
	bx lr
	arm_func_end FUN_0204b1b8

	arm_func_start FUN_0204b1c8
FUN_0204b1c8: ; 0x0204B1C8
	ldrb r0, [r0, #1]
	and r0, r0, #0x1f
	bx lr
	arm_func_end FUN_0204b1c8

	arm_func_start FUN_0204b1d4
FUN_0204b1d4: ; 0x0204B1D4
	ldrb r0, [r0]
	bx lr
	arm_func_end FUN_0204b1d4

	arm_func_start FUN_0204b1dc
FUN_0204b1dc: ; 0x0204B1DC
	cmp r1, #0
	beq _0204B1EC
	cmp r1, #0x14
	bls _0204B1F4
	arm_func_end FUN_0204b1dc
_0204B1EC:
	mov r0, #0
	bx lr
_0204B1F4:
	cmp r1, #1
	moveq r0, #0
	subne r1, r1, #2
	addne r0, r0, r1, lsl #1
	ldrbne r0, [r0, #1]
	bx lr

	arm_func_start FUN_0204b20c
FUN_0204b20c: ; 0x0204B20C
	cmp r1, #0
	beq _0204B21C
	cmp r1, #0x14
	bls _0204B224
	arm_func_end FUN_0204b20c
_0204B21C:
	mov r0, #0
	bx lr
_0204B224:
	cmp r1, #1
	moveq r0, #0
	subne r1, r1, #2
	addne r0, r0, r1, lsl #1
	ldrbne r0, [r0, #2]
	bx lr

	arm_func_start FUN_0204b23c
FUN_0204b23c: ; 0x0204B23C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	add r0, r0, #0xc
	mov r4, r1
	add r0, r0, #0x400
	add r8, r0, r4, lsl #5
	bl FUN_020F066C
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, r8
	bl FUN_0204fb78
	mov sl, #0
	mov sb, sl
	mov r6, #1
	arm_func_end FUN_0204b23c
_0204B274:
	mov r0, sb
	bl FUN_020EFA80
	movs r7, r0
	beq _0204B2E0
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204B2E0
	mov r0, r7
	bl FUN_0206d660
	cmp r0, #0
	beq _0204B2E0
	mov r0, r7
	bl FUN_0206d5f0
	cmp r4, r0
	bne _0204B2E0
	mov r0, r7
	mov r1, r6
	bl FUN_0206d824
	movs r5, r0
	beq _0204B2E0
	mov r0, r7
	bl FUN_0206cbf8
	mov r2, r0
	mov r0, r8
	sub r1, r5, #1
	bl FUN_0204fb8c
	add sl, sl, #1
_0204B2E0:
	add sb, sb, #1
	cmp sb, #0x64
	blt _0204B274
	mov r0, sl
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0204b2f4
FUN_0204b2f4: ; 0x0204B2F4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	add r0, r0, #0xcc
	mov sl, r1
	add r0, r0, #0x400
	movs sb, r2
	add r5, r0, sl, lsl #4
	mov fp, r3
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r7, #0
	mov r0, sb
	mov r1, r7
	lsl r2, fp, #1
	bl MemWrite
	mov r6, r7
	ldrb r4, [sp, #0x28]
	b _0204B3E0
	arm_func_end FUN_0204b2f4
_0204B338:
	cmp r7, fp
	bge _0204B3E8
	ldr r0, _0204B434 ; =0x020A0640
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	beq _0204B360
	mov r0, r5
	mov r1, r6
	bl FUN_02050244
	b _0204B390
_0204B360:
	cmp r4, #0
	cmpeq sl, #1
	mov r0, r5
	bne _0204B388
	mov r1, r6
	bl FUN_02050244
	orr r0, r0, #0x8000
	lsl r0, r0, #0x10
	lsr r8, r0, #0x10
	b _0204B394
_0204B388:
	mov r1, r6
	bl FUN_02050258
_0204B390:
	mov r8, r0
_0204B394:
	cmp r8, #0
	beq _0204B3DC
	mov r0, r8
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	beq _0204B3DC
	cmp r4, #0
	cmpeq sl, #1
	ldreq r0, _0204B434 ; =0x020A0640
	add r7, r7, #1
	ldrbeq r0, [r0, #0x1b]
	cmpeq r0, #0
	orreq r1, r8, #0x8000
	lsleq r0, r6, #1
	strheq r1, [sb, r0]
	lslne r0, r6, #1
	strhne r8, [sb, r0]
_0204B3DC:
	add r6, r6, #1
_0204B3E0:
	cmp r6, #4
	blt _0204B338
_0204B3E8:
	cmp fp, #4
	ble _0204B42C
	mov r0, r5
	bl FUN_02050284
	cmp r0, #0
	beq _0204B42C
	ldrb r0, [sp, #0x28]
	cmp r0, #0
	cmpeq sl, #1
	mov r0, r5
	bne _0204B420
	bl FUN_02050284
	orr r0, r0, #0x8000
	b _0204B424
_0204B420:
	bl FUN_0205028c
_0204B424:
	strh r0, [sb, #8]
	add r7, r7, #1
_0204B42C:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204B434: .word 0x020A0640

	arm_func_start FUN_0204b438
FUN_0204b438: ; 0x0204B438
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	str r0, [sp, #4]
	add r0, r0, #0xc
	mov sl, r1
	add r0, r0, #0x400
	ldr r7, [sp, #0x30]
	movs sb, r2
	add fp, r0, sl, lsl #5
	mov r8, r3
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r6, #0
	mov r0, sb
	mov r1, r6
	lsl r2, r8, #1
	bl MemWrite
	mov r5, r6
	arm_func_end FUN_0204b438
_0204B484:
	cmp r6, r8
	bge _0204B514
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204B508
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204B508
	mov r0, r4
	bl FUN_0206d5f0
	cmp sl, r0
	bne _0204B508
	mov r0, r4
	bl FUN_0206cc00
	mov r1, r0
	mov r0, fp
	bl FUN_0204fcd4
	cmp r0, #0
	bne _0204B508
	cmp r7, #0
	mov r0, r4
	bne _0204B4F0
	bl FUN_0206cbf8
	lsl r1, r6, #1
	strh r0, [sb, r1]
	b _0204B504
_0204B4F0:
	bl FUN_0206cbf8
	ldr r1, _0204B53C ; =0x00000FFF
	and r1, r0, r1
	lsl r0, r6, #1
	strh r1, [sb, r0]
_0204B504:
	add r6, r6, #1
_0204B508:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204B484
_0204B514:
	ldr r0, [sp, #4]
	mov r4, #1
	mov r1, sb
	mov r2, r6
	mov r3, #0x80
	str r4, [sp]
	bl FUN_0204ee94
	mov r0, r6
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204B53C: .word 0x00000FFF

	arm_func_start FUN_0204b540
FUN_0204b540: ; 0x0204B540
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	str r0, [sp, #4]
	add r0, r0, #0xc
	movs sb, r2
	mov sl, r1
	add r0, r0, #0x400
	add r4, r0, sl, lsl #5
	mov r8, r3
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r6, #0
	mov r0, sb
	mov r1, r6
	lsl r2, r8, #1
	bl MemWrite
	mov r5, r6
	ldrb fp, [sp, #0x30]
	b _0204B618
	arm_func_end FUN_0204b540
_0204B590:
	cmp r6, r8
	bge _0204B620
	ldr r0, _0204B648 ; =0x020A0640
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	beq _0204B5B8
	mov r0, r4
	mov r1, r5
	bl FUN_0204fbe8
	b _0204B5E8
_0204B5B8:
	cmp fp, #0
	cmpeq sl, #1
	mov r0, r4
	bne _0204B5E0
	mov r1, r5
	bl FUN_0204fbe8
	orr r0, r0, #0x8000
	lsl r0, r0, #0x10
	lsr r7, r0, #0x10
	b _0204B5EC
_0204B5E0:
	mov r1, r5
	bl FUN_0204fbfc
_0204B5E8:
	mov r7, r0
_0204B5EC:
	ldr r0, _0204B64C ; =0x00000FFF
	tst r7, r0
	beq _0204B614
	mov r0, r7
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	lslne r0, r6, #1
	strhne r7, [sb, r0]
	addne r6, r6, #1
_0204B614:
	add r5, r5, #1
_0204B618:
	cmp r5, #0x10
	blt _0204B590
_0204B620:
	ldr r3, [sp, #0x34]
	mov r4, #1
	ldr r0, [sp, #4]
	mov r1, sb
	mov r2, r6
	str r4, [sp]
	bl FUN_0204ee94
	mov r0, r6
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204B648: .word 0x020A0640
_0204B64C: .word 0x00000FFF

	arm_func_start FUN_0204b650
FUN_0204b650: ; 0x0204B650
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	movs sb, r2
	str r0, [sp, #4]
	mov r7, #0
	mov sl, r1
	mov r8, r3
	addeq sp, sp, #8
	moveq r0, r7
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sb
	mov r1, r7
	lsl r2, r8, #1
	bl MemWrite
	mov r6, r7
	ldrb r4, [sp, #0x30]
	ldr fp, _0204B750 ; =0x020A0640
	b _0204B720
	arm_func_end FUN_0204b650
_0204B698:
	cmp r7, r8
	bge _0204B728
	mov r0, r6
	bl FUN_020EFA80
	movs r5, r0
	beq _0204B71C
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204B71C
	mov r0, r5
	bl FUN_0206d5f0
	cmp sl, r0
	bne _0204B71C
	mov r0, r5
	bl FUN_0206cc00
	ldrb r1, [fp, #0x1b]
	cmp r1, #0
	beq _0204B6F4
	mov r0, r5
	bl FUN_0206cbf8
	lsl r1, r7, #1
	strh r0, [sb, r1]
	b _0204B710
_0204B6F4:
	cmp r4, #0
	cmpeq sl, #1
	orreq r1, r0, #0x8000
	lsleq r0, r7, #1
	strheq r1, [sb, r0]
	lslne r1, r7, #1
	strhne r0, [sb, r1]
_0204B710:
	add r7, r7, #1
	cmp r7, r8
	bge _0204B728
_0204B71C:
	add r6, r6, #1
_0204B720:
	cmp r6, #0x64
	blt _0204B698
_0204B728:
	ldr r0, [sp, #4]
	mov r4, #1
	mov r1, sb
	mov r2, r7
	mov r3, #0x80
	str r4, [sp]
	bl FUN_0204ee94
	mov r0, r7
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204B750: .word 0x020A0640

	arm_func_start FUN_0204b754
FUN_0204b754: ; 0x0204B754
	push {r4, r5, r6, lr}
	movs r5, r1
	mov r6, r0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r5
	mov r1, #0
	bl FUN_0206d824
	mov r4, r0
	mov r0, r5
	bl FUN_020F07D0
	cmp r4, #0
	ble _0204B790
	cmp r4, #0xb
	ble _0204B798
	arm_func_end FUN_0204b754
_0204B790:
	mov r0, #0
	pop {r4, r5, r6, pc}
_0204B798:
	mov r1, #0xb
	mla r1, r0, r1, r4
	sub r0, r1, #1
	add r0, r6, r0
	ldrb r0, [r0, #0x84a]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0204b7b0
FUN_0204b7b0: ; 0x0204B7B0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x80
	ldr r2, _0204B9C0 ; =0x020A0640
	mov r6, #0
	ldrh r3, [r2, #0x92]
	ldrh r4, [r2, #0x94]
	mov r1, r6
	strh r3, [sp]
	mov r3, r3
	strh r4, [r2, #0x92]
	mov r7, r0
	strh r4, [sp, #2]
	strh r3, [r2, #0x94]
	bl FUN_0207249c
	add sb, sp, #0x34
	mov r8, #0x4c
	mov r1, sb
	mov r2, r8
	bl _memcpy
	mov r0, sb
	mov r1, r8
	bl FUN_020026d0
	mov r5, #1
	mov r0, r7
	mov r1, r5
	bl FUN_0207249c
	mov r4, r0
	mov r0, r7
	mov r1, r6
	bl FUN_0207249c
	mov r1, r0
	mov r0, r4
	mov r2, r8
	bl _memcpy
	mov r0, r7
	mov r1, r6
	bl FUN_0207249c
	mov r1, r8
	bl FUN_020026d0
	mov r0, r7
	mov r1, r5
	bl FUN_0207249c
	mov r1, r0
	mov r0, sb
	mov r2, r8
	bl _memcpy
	mov r1, r5
	mov r0, r7
	bl FUN_0207249c
	mov r1, r8
	bl FUN_020026d0
	add r0, r7, #0xc
	add r5, sp, #4
	mov r4, #0x20
	add r0, r0, #0x400
	mov r1, r5
	mov r2, r4
	bl _memcpy
	mov r0, r5
	mov r1, r4
	bl FUN_020026d0
	add r0, r7, #0x2c
	add r1, r7, #0xc
	add r0, r0, #0x400
	add r1, r1, #0x400
	mov r2, r4
	bl _memcpy
	add r0, r7, #0xc
	add r0, r0, #0x400
	mov r1, r4
	bl FUN_020026d0
	add r1, r7, #0x2c
	mov r0, r5
	add r1, r1, #0x400
	mov r2, r4
	bl _memcpy
	add r0, r7, #0x2c
	mov r1, r4
	add r0, r0, #0x400
	bl FUN_020026d0
	add r5, sp, #0x24
	add r0, r7, #0xcc
	mov r4, #0x10
	mov r1, r5
	mov r2, r4
	add r0, r0, #0x400
	bl _memcpy
	mov r0, r5
	mov r1, r4
	bl FUN_020026d0
	add r0, r7, #0xdc
	add r1, r7, #0xcc
	add r0, r0, #0x400
	add r1, r1, #0x400
	mov r2, r4
	bl _memcpy
	add r0, r7, #0xcc
	add r0, r0, #0x400
	mov r1, r4
	bl FUN_020026d0
	add r1, r7, #0xdc
	mov r0, r5
	add r1, r1, #0x400
	mov r2, r4
	bl _memcpy
	add r0, r7, #0xdc
	add r0, r0, #0x400
	mov r1, r4
	bl FUN_020026d0
	b _0204B9B0
	arm_func_end FUN_0204b7b0
_0204B968:
	mov r0, r6
	bl FUN_020EFA80
	movs r4, r0
	beq _0204B9AC
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204B9AC
	mov r0, r4
	bl FUN_0206d5f0
	cmp r0, #2
	beq _0204B9AC
	mov r0, r4
	bl FUN_0206d5f0
	bl FUN_02040138
	mov r1, r0
	mov r0, r4
	bl FUN_0206d600
_0204B9AC:
	add r6, r6, #1
_0204B9B0:
	cmp r6, #0x64
	blt _0204B968
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0204B9C0: .word 0x020A0640

	arm_func_start FUN_0204b9c4
FUN_0204b9c4: ; 0x0204B9C4
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x20
	mov r4, r0
	add r0, r4, #0xc
	add r0, r0, #0x400
	add r7, r0, r1, lsl #5
	add r6, sp, #0
	mov r5, #0x20
	mov r8, r2
	mov r0, r7
	mov r1, r6
	mov r2, r5
	bl _memcpy
	add r0, r4, #0xc
	add r0, r0, #0x400
	add r8, r0, r8, lsl #5
	mov r0, r8
	mov r1, r7
	mov r2, r5
	bl _memcpy
	mov r0, r6
	mov r1, r8
	mov r2, r5
	bl _memcpy
	mov r0, r4
	mov r1, #0
	bl FUN_0207249c
	ldrh r2, [r0, #0x22]
	ldrh r1, [r0, #0x48]
	strh r1, [r0, #0x22]
	strh r2, [r0, #0x48]
	add sp, sp, #0x20
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0204b9c4

	arm_func_start FUN_0204ba48
FUN_0204ba48: ; 0x0204BA48
	push {r4, lr}
	ldr r1, _0204BA74 ; =0x02099E98
	mov r4, r0
	ldrb r1, [r1]
	cmp r1, #0
	popeq {r4, pc}
	mov r1, #0
	bl FUN_0207249c
	ldrb r0, [r0, #0x43]
	strb r0, [r4, #0x8a0]
	pop {r4, pc}
	.align 2, 0_0204BA74: .word 0x02099E98
	arm_func_end FUN_0204ba48

	arm_func_start FUN_0204ba78
FUN_0204ba78: ; 0x0204BA78
	push {r4, lr}
	ldr r1, _0204BAA4 ; =0x02099E98
	mov r4, r0
	ldrb r1, [r1]
	cmp r1, #0
	popeq {r4, pc}
	mov r1, #0
	bl FUN_0207249c
	ldrb r1, [r4, #0x8a0]
	strb r1, [r0, #0x43]
	pop {r4, pc}
	.align 2, 0_0204BAA4: .word 0x02099E98
	arm_func_end FUN_0204ba78

	arm_func_start FUN_0204baa8
FUN_0204baa8: ; 0x0204BAA8
	push {r3, r4, r5, lr}
	mov r5, #0
	arm_func_end FUN_0204baa8
_0204BAB0:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204BAE0
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204BAE0
	mov r0, r4
	bl FUN_0206d5f0
	mov r1, r0
	mov r0, r4
	bl FUN_0206cc1c
_0204BAE0:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204BAB0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0204baf0
FUN_0204baf0: ; 0x0204BAF0
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r1
	mov r6, r2
	mov r5, #0
	arm_func_end FUN_0204baf0
_0204BB00:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204BB38
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204BB38
	mov r0, r4
	bl FUN_0206d5f0
	cmp r7, r0
	bne _0204BB38
	mov r0, r4
	mov r1, r6
	bl FUN_0206d4d4
_0204BB38:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204BB00
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204bb48
FUN_0204bb48: ; 0x0204BB48
	push {r3, r4, r5, r6, r7, lr}
	cmp r2, #0
	movle r4, #0
	ble _0204BB6C
	sub r2, r2, #1
	mov r3, #0x1000
	lsl r2, r3, r2
	lsl r2, r2, #0x10
	lsr r4, r2, #0x10
	arm_func_end FUN_0204bb48
_0204BB6C:
	add r0, r0, #0xc
	add r0, r0, #0x400
	ldr r5, _0204BBBC ; =0x00000FFF
	add r7, r0, r1, lsl #5
	mov r6, #0
_0204BB80:
	mov r0, r7
	mov r1, r6
	bl FUN_0204fbe8
	movs r2, r0
	andne r0, r2, r5
	orrne r0, r0, r4
	lslne r0, r0, #0x10
	lsrne r2, r0, #0x10
	mov r0, r7
	mov r1, r6
	bl FUN_0204fb8c
	add r6, r6, #1
	cmp r6, #0x10
	blt _0204BB80
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0204BBBC: .word 0x00000FFF

	arm_func_start FUN_0204bbc0
FUN_0204bbc0: ; 0x0204BBC0
	ldr r0, [r0, #0x7bc]
	ldr ip, _0204BBCC ; =LAB_02049738
	bx ip
	.align 2, 0_0204BBCC: .word LAB_02049738
	arm_func_end FUN_0204bbc0

	arm_func_start FUN_0204bbd0
FUN_0204bbd0: ; 0x0204BBD0
	ldr r0, [r0, #0x7bc]
	ldr ip, _0204BBDC ; =FUN_020497cc
	bx ip
	.align 2, 0_0204BBDC: .word FUN_020497cc
	arm_func_end FUN_0204bbd0

	arm_func_start FUN_0204bbe0
FUN_0204bbe0: ; 0x0204BBE0
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r1
	mov r7, r2
	mov r6, r3
	mov r5, #0
	arm_func_end FUN_0204bbe0
_0204BBF4:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204BC38
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204BC38
	mov r0, r4
	bl FUN_020F0810
	cmp r8, r0
	bne _0204BC38
	mov r0, r4
	mov r1, r6
	bl FUN_0206d824
	cmp r7, r0
	moveq r0, r4
	popeq {r4, r5, r6, r7, r8, pc}
_0204BC38:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204BBF4
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204bc4c
FUN_0204bc4c: ; 0x0204BC4C
	push {r3, lr}
	ldr r2, _0204BCD0 ; =0x00000FFF
	and r1, r1, r2
	lsl r1, r1, #0x10
	lsrs ip, r1, #0x10
	moveq r0, #0
	popeq {r3, pc}
	ldr r1, _0204BCD4 ; =0x0209A120
	mov r2, #0
	ldr r1, [r1]
	subs r3, r1, #1
	bmi _0204BCC8
	ldr lr, [r0, #0x814]
	arm_func_end FUN_0204bc4c
_0204BC80:
	sub r0, r3, r2
	add r0, r2, r0, asr #1
	lsl r1, r0, #1
	ldrsh r1, [lr, r1]
	cmp r1, #0
	bne _0204BCAC
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	sub r3, r0, #1
	b _0204BCC0
_0204BCAC:
	cmp r1, ip
	subgt r3, r0, #1
	bgt _0204BCC0
	popge {r3, pc}
	add r2, r0, #1
_0204BCC0:
	cmp r2, r3
	ble _0204BC80
_0204BCC8:
	mvn r0, #0
	pop {r3, pc}
	.align 2, 0_0204BCD0: .word 0x00000FFF
_0204BCD4: .word 0x0209A120

	arm_func_start FUN_0204bcd8
FUN_0204bcd8: ; 0x0204BCD8
	push {r3, lr}
	ldr r2, _0204BD5C ; =0x00000FFF
	and r1, r1, r2
	lsl r1, r1, #0x10
	lsrs ip, r1, #0x10
	moveq r0, #0
	popeq {r3, pc}
	ldr r1, _0204BD60 ; =0x0209A130
	mov r2, #0
	ldr r1, [r1]
	subs r3, r1, #1
	bmi _0204BD54
	ldr lr, [r0, #0x818]
	arm_func_end FUN_0204bcd8
_0204BD0C:
	sub r0, r3, r2
	add r0, r2, r0, asr #1
	lsl r1, r0, #1
	ldrsh r1, [lr, r1]
	cmp r1, #0
	bne _0204BD38
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	sub r3, r0, #1
	b _0204BD4C
_0204BD38:
	cmp r1, ip
	subgt r3, r0, #1
	bgt _0204BD4C
	popge {r3, pc}
	add r2, r0, #1
_0204BD4C:
	cmp r2, r3
	ble _0204BD0C
_0204BD54:
	mvn r0, #0
	pop {r3, pc}
	.align 2, 0_0204BD5C: .word 0x00000FFF
_0204BD60: .word 0x0209A130

	arm_func_start FUN_0204bd64
FUN_0204bd64: ; 0x0204BD64
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x68
	movs r5, r2
	mov r7, r0
	mov sb, #0
	mov r6, r1
	addeq sp, sp, #0x68
	moveq r0, sb
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r8, _0204C068 ; =0x00000FFF
	mov r4, sb
	and r6, r6, r8
	mov r0, r6
	mov r1, r4
	bl FUN_020EFA9C
	cmp r0, #0
	beq _0204BDC0
	mov r1, r5
	mov r2, #0x68
	bl _memcpy
	add sp, sp, #0x68
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_0204bd64
_0204BDC0:
	ldr r0, [r7, #0x81c]
	sub r1, r4, #1
	add r2, r8, #0xf000
_0204BDCC:
	ldrh r3, [r0, #0x4e]
	and r3, r3, r8
	lsl r3, r3, #0x10
	cmp r6, r3, lsr #16
	ldrh r3, [r0, #0x68]
	moveq r1, r4
	add r4, r4, #1
	cmp r3, r2
	addlo r3, r3, #1
	strhlo r3, [r0, #0x68]
	cmp r4, #0x40
	add r0, r0, #0x6c
	blt _0204BDCC
	cmp r1, #0
	blt _0204BE34
	ldr r2, [r7, #0x81c]
	mov r0, #0x6c
	mla r4, r1, r0, r2
	mov r0, r4
	mov r1, r5
	mov r2, #0x68
	bl _memcpy
	add sp, sp, #0x68
	strh sb, [r4, #0x68]
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0204BE34:
	ldr r1, [r7, #0x81c]
	mvn r2, #0
	mov r0, r2
	mov r3, r1
	mov r4, #0
	add r8, r2, #0x1000
_0204BE4C:
	ldrh sb, [r3, #0x4e]
	and sb, sb, r8
	lsl sb, sb, #0x10
	lsrs sb, sb, #0x10
	moveq r2, r4
	beq _0204BE84
	ldrh sb, [r3, #0x68]
	add r3, r3, #0x6c
	cmp sb, r0
	movgt r2, r4
	add r4, r4, #1
	movgt r0, sb
	cmp r4, #0x40
	blt _0204BE4C
_0204BE84:
	mov r0, #0x6c
	mul r4, r2, r0
	add r2, r1, r4
	mov r0, r7
	mov r1, r6
	str r2, [sp, #0x14]
	mov sl, #0x68
	mov r8, #1
	mov sb, #0
	bl FUN_0204bc4c
	cmp r0, #0
	blt _0204BF20
	ldr r3, _0204C06C ; =0x0209A250
	ldr r1, _0204C070 ; =0x0209050C
	ldr r6, [r3]
	cmp r6, #0
	moveq r0, sb
	beq _0204BEE8
	mul r2, r0, sl
	stm sp, {r2, sl}
	str sb, [sp, #8]
	add r2, sp, #0x14
	mov r0, r6
	str r8, [sp, #0xc]
	bl FUN_0202eff0
_0204BEE8:
	cmp r0, #0
	addeq sp, sp, #0x68
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, [sp, #0x14]
	mov r1, r5
	mov r2, #0x68
	bl _memcpy
	ldr r0, [r7, #0x81c]
	add sp, sp, #0x68
	add r0, r0, r4
	strh sb, [r0, #0x68]
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0204BF20:
	mov r0, r7
	mov r1, r6
	bl FUN_0204bcd8
	cmp r0, #0
	blt _0204C05C
	ldr r3, _0204C06C ; =0x0209A250
	add r1, sp, #0x18
	ldr ip, [r3]
	str r1, [sp, #0x10]
	cmp ip, #0
	ldr sl, [sp, #0x14]
	ldr r1, _0204C074 ; =0x02090528
	moveq r0, sb
	beq _0204BF7C
	mov r2, #0x50
	mul r6, r0, r2
	str r6, [sp]
	str r2, [sp, #4]
	str sb, [sp, #8]
	add r2, sp, #0x10
	mov r0, ip
	str r8, [sp, #0xc]
	bl FUN_0202eff0
_0204BF7C:
	cmp r0, #0
	mov r6, #1
	addeq sp, sp, #0x68
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r8, #0x10
	add r0, sp, #0x18
	mov r1, sl
	mov r2, r8
	bl FUN_020078c8
	add r0, sp, #0x28
	mov r2, r8
	add r1, sl, #0x1c
	bl FUN_020078c8
	add r0, sp, #0x38
	add r1, sl, #0x2c
	mov r2, #0x20
	bl FUN_020078c8
	ldrh r0, [sp, #0x58]
	mov r1, r5
	mov r2, #0x68
	strh r0, [sl, #0x4e]
	ldrh r0, [sp, #0x5a]
	strh r0, [sl, #0x50]
	ldrb r0, [sp, #0x5c]
	strb r0, [sl, #0x52]
	ldrb r0, [sp, #0x5d]
	strb r0, [sl, #0x53]
	ldrh r0, [sp, #0x5e]
	strh r0, [sl, #0x54]
	ldrh r0, [sp, #0x60]
	strh r0, [sl, #0x56]
	ldrh r0, [sp, #0x62]
	strh r0, [sl, #0x58]
	ldrb r0, [sp, #0x64]
	strb r0, [sl, #0x5a]
	ldrb r0, [sp, #0x65]
	strb r0, [sl, #0x5b]
	ldrb r0, [sp, #0x66]
	strb r0, [sl, #0x5c]
	strb r6, [sl, #0x4c]
	strb r6, [sl, #0x4d]
	ldrb r0, [sl, #0x5d]
	and r0, r0, #0x1f
	and r0, r0, #0xe0
	strb r0, [sl, #0x5d]
	strb r6, [sl, #0x62]
	strh sb, [sl, #0x66]
	ldr r0, [sp, #0x14]
	bl _memcpy
	ldr r1, [r7, #0x81c]
	add sp, sp, #0x68
	add r1, r1, r4
	mov r0, r6
	strh sb, [r1, #0x68]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0204C05C:
	mov r0, sb
	add sp, sp, #0x68
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0204C068: .word 0x00000FFF
_0204C06C: .word 0x0209A250
_0204C070: .word 0x0209050C
_0204C074: .word 0x02090528

	arm_func_start FUN_0204c078
FUN_0204c078: ; 0x0204C078
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x78
	mov r5, r2
	add r2, sp, #0x30
	mov r7, r0
	mov r6, r1
	str r2, [sp, #0x10]
	bl FUN_0204c1d4
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #1
	bne _0204C0D8
	mov r4, #0x48
	ldr r1, [sp, #0x10]
	mov r0, r7
	mov r2, r4
	bl FUN_020748c8
	mov r1, r5
	mov r2, r4
	bl _memcpy
	add sp, sp, #0x78
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0204c078
_0204C0D8:
	mov r0, r7
	mov r1, r6
	bl FUN_0204bc4c
	mov r4, r0
	cmn r4, #1
	addeq sp, sp, #0x78
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr ip, _0204C1C8 ; =0x0208C444
	add r3, sp, #0x14
	mov r2, #0xe
_0204C104:
	ldrb r0, [ip, #1]
	ldrb r1, [ip], #2
	subs r2, r2, #1
	mov r8, #0
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _0204C104
	ldr r0, _0204C1CC ; =0x0209AC44
	mov r1, #8
	bl FUN_0202db98
	ldr r3, _0204C1D0 ; =0x0209A250
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, r8
	beq _0204C168
	mov r1, #0x48
	mul r2, r4, r1
	str r2, [sp]
	str r1, [sp, #4]
	add r1, sp, #0x14
	add r2, sp, #0x10
	str r8, [sp, #8]
	mov ip, #1
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_0204C168:
	cmp r0, #0
	addeq sp, sp, #0x78
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r2, [sp, #0x10]
	mov r0, r7
	mov r1, r6
	bl FUN_0204c254
	mov r6, #0x48
	ldr r1, [sp, #0x10]
	mov r0, r7
	mov r2, r6
	bl FUN_020748c8
	mov r1, r5
	mov r2, r6
	bl _memcpy
	lsl r1, r4, #0x10
	mov r0, r7
	mov r2, r5
	lsr r1, r1, #0x10
	bl FUN_02073f10
	mov r0, #1
	add sp, sp, #0x78
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0204C1C8: .word 0x0208C444
_0204C1CC: .word 0x0209AC44
_0204C1D0: .word 0x0209A250

	arm_func_start FUN_0204c1d4
FUN_0204c1d4: ; 0x0204C1D4
	push {r3, r4, r5, lr}
	ldr r3, _0204C250 ; =0x00000FFF
	mov r5, r0
	and r0, r1, r3
	ldr r4, [r5, #0x7f4]
	lsl r0, r0, #0x10
	mov r3, #0
	arm_func_end FUN_0204c1d4
_0204C1F0:
	ldrh r1, [r4]
	cmp r1, r0, lsr #16
	bne _0204C238
	cmp r2, #0
	beq _0204C214
	mov r1, r2
	add r0, r4, #8
	mov r2, #0x48
	bl _memcpy
_0204C214:
	ldr r1, [r4, #4]
	ldr r0, [r5, #0x7f8]
	cmp r1, r0
	addne r0, r0, #1
	strne r0, [r5, #0x7f8]
	ldr r1, [r5, #0x7f8]
	mov r0, #1
	str r1, [r4, #4]
	pop {r3, r4, r5, pc}
_0204C238:
	add r3, r3, #1
	cmp r3, #0x40
	add r4, r4, #0x50
	blt _0204C1F0
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_0204C250: .word 0x00000FFF

	arm_func_start FUN_0204c254
FUN_0204c254: ; 0x0204C254
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mvn r4, #0
	mov r8, r0
	mov r7, r1
	add r0, r4, #0x1000
	ldr r5, [r8, #0x7f4]
	and r0, r7, r0
	lsl r0, r0, #0x10
	mov r3, r5
	mov r6, r4
	lsr r7, r0, #0x10
	mov r1, #0
	arm_func_end FUN_0204c254
_0204C284:
	ldrh r0, [r3]
	cmp r0, #0
	moveq r4, r1
	beq _0204C2B4
	ldr r0, [r3, #4]
	add r3, r3, #0x50
	cmp r6, r0
	movhi r4, r1
	add r1, r1, #1
	movhi r6, r0
	cmp r1, #0x40
	blt _0204C284
_0204C2B4:
	mov r0, #0x50
	mul sb, r4, r0
	add r6, r5, sb
	mov r0, r2
	add r1, r6, #8
	mov r2, #0x48
	bl _memcpy
	strh r7, [r5, sb]
	ldr r1, [r8, #0x7f8]
	mov r0, r4
	add r1, r1, #1
	str r1, [r8, #0x7f8]
	str r1, [r6, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0204c2ec
FUN_0204c2ec: ; 0x0204C2EC
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	bl FUN_020F0810
	mov r1, r0
	mov r0, r4
	bl FUN_0207249c
	cmp r0, #0
	beq _0204C324
	ldrb r0, [r0, #0x2c]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r4, pc}
	arm_func_end FUN_0204c2ec
_0204C324:
	mov r0, #1
	pop {r4, pc}

	arm_func_start FUN_0204c32c
FUN_0204c32c: ; 0x0204C32C
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r2
	mov r8, r1
	mov r6, r3
	cmp r7, #0
	ble _0204C34C
	cmp r7, #0x10
	ble _0204C354
	arm_func_end FUN_0204c32c
_0204C34C:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_0204C354:
	cmp r6, #2
	beq _0204C370
	cmp r6, #0
	bne _0204C37C
	bl FUN_020731b4
	cmp r0, #0
	beq _0204C37C
_0204C370:
	cmp r7, #4
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, pc}
_0204C37C:
	mov r5, #0
_0204C380:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204C3CC
	bl FUN_0206d64c
	cmp r0, #0
	bne _0204C3CC
	mov r0, r4
	bl FUN_0206d5f0
	cmp r8, r0
	bne _0204C3CC
	cmp r4, #0
	beq _0204C3CC
	mov r0, r4
	mov r1, r6
	bl FUN_0206d824
	cmp r7, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
_0204C3CC:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204C380
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204c3e0
FUN_0204c3e0: ; 0x0204C3E0
	push {r4, r5, r6, lr}
	add r0, r0, #0xcc
	add r0, r0, #0x400
	mov r5, #0
	mov r4, r5
	add r6, r0, r1, lsl #4
	arm_func_end FUN_0204c3e0
_0204C3F8:
	mov r0, r6
	mov r1, r4
	bl FUN_02050244
	cmp r0, #0
	add r4, r4, #1
	addne r5, r5, #1
	cmp r4, #4
	blt _0204C3F8
	mov r0, r5
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0204c420
FUN_0204c420: ; 0x0204C420
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	mov r7, r1
	mov r5, r6
	arm_func_end FUN_0204c420
_0204C430:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204C45C
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204C45C
	mov r0, r4
	bl FUN_0206d5f0
	cmp r7, r0
	addeq r6, r6, #1
_0204C45C:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204C430
	mov r0, r6
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204c470
FUN_0204c470: ; 0x0204C470
	push {r4, r5, r6, r7, r8, lr}
	mov r6, #0
	mov r8, r1
	mov r7, r2
	mov r5, r6
	arm_func_end FUN_0204c470
_0204C484:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204C4B8
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204C4B8
	mov r0, r4
	bl FUN_0206d5f0
	cmp r8, r0
	ldrbeq r0, [r4, #0x4d]
	cmpeq r7, r0
	addeq r6, r6, #1
_0204C4B8:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204C484
	mov r0, r6
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204c4cc
FUN_0204c4cc: ; 0x0204C4CC
	push {r4, r5, r6, lr}
	add r0, r0, #0xc
	add r0, r0, #0x400
	mov r5, #0
	mov r4, r5
	add r6, r0, r1, lsl #5
	arm_func_end FUN_0204c4cc
_0204C4E4:
	mov r0, r6
	mov r1, r4
	bl FUN_0204fbe8
	cmp r0, #0
	add r4, r4, #1
	addne r5, r5, #1
	cmp r4, #0x10
	blt _0204C4E4
	mov r0, r5
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0204c50c
FUN_0204c50c: ; 0x0204C50C
	push {r3, r4, r5, r6, r7, lr}
	add r0, r0, #0xc
	mov r6, #0
	add r0, r0, #0x400
	mov r5, r6
	add r7, r0, r1, lsl #5
	mov r4, r6
	arm_func_end FUN_0204c50c
_0204C528:
	mov r0, r7
	mov r1, r5
	bl FUN_0204fbe8
	cmp r0, #0
	beq _0204C54C
	mov r1, r4
	bl FUN_020EFA9C
	cmp r0, #0
	addne r6, r6, #1
_0204C54C:
	add r5, r5, #1
	cmp r5, #0xb
	blt _0204C528
	mov r0, r6
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204c560
FUN_0204c560: ; 0x0204C560
	push {r4, r5, r6, r7, r8, lr}
	mov r6, #0
	mov r8, r1
	mov r7, r2
	mov r5, r6
	arm_func_end FUN_0204c560
_0204C574:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204C5BC
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204C5BC
	mov r0, r4
	bl FUN_020F0810
	cmp r8, r0
	bne _0204C5BC
	mov r0, r4
	mov r1, r7
	bl FUN_0206d824
	cmp r0, #1
	blt _0204C5BC
	cmp r0, #0xb
	addle r6, r6, #1
_0204C5BC:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204C574
	mov r0, r6
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204c5d0
FUN_0204c5d0: ; 0x0204C5D0
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	mov r7, r1
	mov r5, r6
	arm_func_end FUN_0204c5d0
_0204C5E0:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204C60C
	bl FUN_0206d674
	cmp r0, #0
	beq _0204C60C
	mov r0, r4
	bl FUN_020F0810
	cmp r7, r0
	addeq r6, r6, #1
_0204C60C:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204C5E0
	mov r0, r6
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204c620
FUN_0204c620: ; 0x0204C620
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	mov r7, r1
	mov r5, r6
	arm_func_end FUN_0204c620
_0204C630:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204C66C
	bl FUN_0206d69c
	cmp r0, #0
	beq _0204C66C
	mov r0, r4
	bl FUN_020F0810
	cmp r7, r0
	bne _0204C66C
	mov r0, r4
	bl FUN_0206d6ec
	cmp r0, #0
	addne r6, r6, #1
_0204C66C:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204C630
	mov r0, r6
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204c680
FUN_0204c680: ; 0x0204C680
	push {r4, r5, r6, lr}
	ldr r3, _0204C6E8 ; =0x020A0640
	mov r4, r2
	ldrb r2, [r3, #0x1b]
	cmp r2, #0
	bne _0204C6A8
	ldr r2, _0204C6EC ; =0x00000FFF
	cmp r1, #1
	and r4, r4, r2
	orreq r4, r4, #0x8000
	arm_func_end FUN_0204c680
_0204C6A8:
	add r0, r0, #0xcc
	add r0, r0, #0x400
	mov r6, #0
	add r5, r0, r1, lsl #4
	b _0204C6D8
_0204C6BC:
	mov r0, r5
	mov r1, r6
	bl FUN_02050244
	cmp r4, r0
	addeq r0, r6, #1
	popeq {r4, r5, r6, pc}
	add r6, r6, #1
_0204C6D8:
	cmp r6, #4
	blt _0204C6BC
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_0204C6E8: .word 0x020A0640
_0204C6EC: .word 0x00000FFF

	arm_func_start FUN_0204c6f0
FUN_0204c6f0: ; 0x0204C6F0
	push {r4, r5, r6, lr}
	ldr r3, _0204C758 ; =0x020A0640
	mov r4, r2
	ldrb r2, [r3, #0x1b]
	cmp r2, #0
	bne _0204C718
	ldr r2, _0204C75C ; =0x00000FFF
	cmp r1, #1
	and r4, r4, r2
	orreq r4, r4, #0x8000
	arm_func_end FUN_0204c6f0
_0204C718:
	add r0, r0, #0xc
	add r0, r0, #0x400
	mov r6, #0
	add r5, r0, r1, lsl #5
	b _0204C748
_0204C72C:
	mov r0, r5
	mov r1, r6
	bl FUN_0204fbe8
	cmp r4, r0
	addeq r0, r6, #1
	popeq {r4, r5, r6, pc}
	add r6, r6, #1
_0204C748:
	cmp r6, #0x10
	blt _0204C72C
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_0204C758: .word 0x020A0640
_0204C75C: .word 0x00000FFF

	arm_func_start FUN_0204c760
FUN_0204c760: ; 0x0204C760
	push {r3, lr}
	bl FUN_0204c680
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_0204c760

	arm_func_start FUN_0204c778
FUN_0204c778: ; 0x0204C778
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x10
	ldr r5, _0204C858 ; =0x0209A11C
	ldrb ip, [sp, #0x30]
	mov r8, r0
	ldr r0, [r5]
	mov r4, #0
	ldr sb, _0204C85C ; =0x00000FFF
	mov r6, r2
	and r6, r6, sb
	mov r7, r1
	mov r5, r3
	strh r6, [sp, #8]
	strb r4, [sp, #0xa]
	strb ip, [sp, #0xb]
	bl FUN_0206c788
	ldr r1, [sp, #0x34]
	mov r2, r0
	stm sp, {r1, r4}
	mov r0, r8
	mov r1, r6
	mov r3, r7
	bl FUN_02071d74
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	bl FUN_0206dca4
	ldr r0, _0204C860 ; =0x020A0640
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	bne _0204C824
	bl FUN_020F081C
	cmp r7, r0
	ldrbeq r0, [sp, #0x38]
	cmpeq r0, #0
	bne _0204C824
	ldr r0, _0204C864 ; =0x020A108A
	and r1, r6, sb
	bl FUN_02050930
	ldr r0, _0204C868 ; =0x020A0DB0
	and r1, r6, sb
	bl FUN_02050854
	arm_func_end FUN_0204c778
_0204C824:
	cmp r5, #0
	addeq sp, sp, #0x10
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r4, #1
	mov r0, r8
	mov r1, r7
	mov r2, r6
	mov r3, r5
	str r4, [sp]
	bl FUN_0204c92c
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0204C858: .word 0x0209A11C
_0204C85C: .word 0x00000FFF
_0204C860: .word 0x020A0640
_0204C864: .word 0x020A108A
_0204C868: .word 0x020A0DB0

	arm_func_start FUN_0204c86c
FUN_0204c86c: ; 0x0204C86C
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x14
	add r6, sp, #0
	mov r5, r0
	mov sb, r2
	mov r8, #0
	mov r4, r1
	mov r0, r6
	mov r1, r8
	mov r2, #0x14
	bl MemWrite
	mov r0, r5
	mov r1, r4
	bl FUN_0205107c
	mov r7, r0
	mov r4, #1
	mov r5, r8
	arm_func_end FUN_0204c86c
_0204C8B0:
	mov r0, r7
	mov r1, r8
	bl FUN_0204fbe8
	cmp r0, #0
	beq _0204C8E8
	mov r1, r5
	bl FUN_020EFA9C
	cmp r0, #0
	beq _0204C8E8
	mov r1, sb
	bl FUN_0206d9b0
	cmp r0, #0
	addne r0, r6, r0
	strbne r4, [r0, #-1]
_0204C8E8:
	add r8, r8, #1
	cmp r8, #0x10
	blt _0204C8B0
	mov r2, #0
	add r1, sp, #0
_0204C8FC:
	ldrb r0, [r1, r2]
	cmp r0, #0
	addeq r0, r2, #1
	addeq sp, sp, #0x14
	andeq r0, r0, #0xff
	popeq {r4, r5, r6, r7, r8, sb, pc}
	add r2, r2, #1
	cmp r2, #0x14
	blt _0204C8FC
	mov r0, #0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0204c92c
FUN_0204c92c: ; 0x0204C92C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, r1
	mov sb, r2
	mov r8, r3
	mov r4, #0
	bl FUN_0205107c
	mov r5, r0
	mov r0, #1
	cmp sl, #0
	moveq r0, r4
	mov r7, #1
	cmp r0, #0
	moveq r7, #0
	cmp r8, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, sb
	mov r1, r4
	bl FUN_020EFA9C
	movs r6, r0
	moveq r0, r4
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, r5
	mov r1, sb
	bl FUN_0204fd68
	movs r1, r0
	beq _0204C9A8
	mov r0, r5
	mov r2, r4
	sub r1, r1, #1
	bl FUN_0204fb8c
	arm_func_end FUN_0204c92c
_0204C9A8:
	sub r8, r8, #1
	mov r0, r5
	mov r1, r8
	bl FUN_0204fbe8
	cmp r0, #0
	beq _0204CA00
	mov r0, r5
	bl FUN_0204fda4
	movs r4, r0
	beq _0204C9F0
	mov r0, r5
	mov r1, r8
	bl FUN_0204fbe8
	mov r2, r0
	mov r0, r5
	sub r1, r4, #1
	bl FUN_0204fb8c
	b _0204CA00
_0204C9F0:
	mov r0, r6
	mov r2, r7
	mov r1, #0
	bl FUN_0206d9cc
_0204CA00:
	mov r0, r5
	mov r1, r8
	mov r2, sb
	bl FUN_0204fb8c
	mov r0, r6
	mov r1, r7
	bl FUN_0206d9b0
	cmp r0, #0
	bne _0204CA50
	ldrb r0, [sp, #0x20]
	cmp r0, #0
	beq _0204CA50
	ldr r0, _0204CA58 ; =0x0209BA20
	mov r1, sl
	mov r2, r7
	bl FUN_0204c86c
	mov r1, r0
	mov r0, r6
	mov r2, r7
	bl FUN_0206d9cc
_0204CA50:
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0204CA58: .word 0x0209BA20

	arm_func_start FUN_0204ca5c
FUN_0204ca5c: ; 0x0204CA5C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x20
	mov sb, r0
	add r0, sb, #0xcc
	ldr r6, [sp, #0x4c]
	mov r8, r1
	add r1, r0, #0x400
	mov r0, r3
	sub sl, r0, #1
	str r3, [sp, #0xc]
	mov r0, #0
	cmp r6, #0
	strhne r0, [r6]
	ldr r0, [sp, #0xc]
	mov r7, r2
	add r4, r1, r8, lsl #4
	ldr r5, [sp, #0x50]
	cmp r0, #0
	bge _0204CAB8
	cmp r0, #4
	addge sp, sp, #0x20
	movge r0, #0
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0204ca5c
_0204CAB8:
	ldr r0, _0204CE4C ; =0x0209A11C
	mov r1, r7
	ldr r0, [r0]
	mov r2, r8
	bl FUN_0206c7dc
	cmp r0, #0
	addeq sp, sp, #0x20
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r7
	mov r1, #0
	bl FUN_020EFA9C
	mov fp, r0
	mov r0, sb
	mov r1, r8
	mov r2, r7
	bl FUN_0204c760
	cmp r0, #0
	beq _0204CBCC
	ldrb r0, [sp, #0x48]
	cmp r0, #0
	addeq sp, sp, #0x20
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sb
	mov r1, r8
	mov r2, r7
	bl FUN_0204c680
	sub r0, r0, #1
	str r0, [sp, #0x14]
	mov r0, r4
	mov r1, sl
	bl FUN_02050244
	mov r2, r7
	mov r7, r0
	mov r1, sl
	mov r0, r4
	mov r3, #0
	bl FUN_020501bc
	ldr r1, [sp, #0x14]
	mov r0, r4
	mov r3, #0
	mov r2, r7
	bl FUN_020501bc
	cmp r6, #0
	mov r0, fp
	strhne r7, [r6]
	bl FUN_0206d8a8
	cmp r0, #0
	bne _0204CBC0
	mov r4, #2
	mov r0, sb
	mov r1, r8
	mov r2, r5
	mov r3, r4
	bl FUN_0204c32c
	cmp r0, #0
	bne _0204CBB4
	mov r0, sb
	mov r1, r8
	mov r2, r4
	bl FUN_020731ec
	mov r5, r0
_0204CBB4:
	mov r0, fp
	mov r1, r5
	bl FUN_0206d968
_0204CBC0:
	add sp, sp, #0x20
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204CBCC:
	cmp sl, #0
	blt _0204CD08
	mov r0, r4
	mov r1, sl
	bl FUN_02050244
	cmp r0, #0
	bne _0204CC08
	mov r0, r4
	mov r1, sl
	mov r2, r7
	mov r3, #0
	bl FUN_020501bc
	add sp, sp, #0x20
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204CC08:
	ldrb r0, [sp, #0x48]
	cmp r0, #0
	beq _0204CD08
	mov r0, r4
	mov r1, sl
	bl FUN_02050244
	str r0, [sp, #0x10]
	mov r1, #0
	bl FUN_020EFA9C
	str r0, [sp, #0x18]
	bl FUN_0206d8a8
	str r0, [sp, #0x1c]
	ldr r2, [sp, #0x10]
	mov r0, sb
	mov r1, r8
	bl FUN_0204d2a4
	mov r1, sl
	mov r2, r7
	mov r0, r4
	mov r3, #0
	bl FUN_020501bc
	mov r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	ldr r3, [sp, #0xc]
	ldr r2, [sp, #0x10]
	mov r0, sb
	mov r1, r8
	bl FUN_0204ca5c
	ldr r1, [sp, #0x10]
	mov r0, r4
	bl FUN_020502a8
	cmp r0, #0
	beq _0204CCA0
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	bl FUN_0206d968
_0204CCA0:
	cmp r6, #0
	ldrne r0, [sp, #0x10]
	strhne r0, [r6]
	mov r0, fp
	bl FUN_0206d8a8
	cmp r0, #0
	bne _0204CCFC
	mov r4, #2
	mov r0, sb
	mov r1, r8
	mov r2, r5
	mov r3, r4
	bl FUN_0204c32c
	cmp r0, #0
	bne _0204CCF0
	mov r0, sb
	mov r1, r8
	mov r2, r4
	bl FUN_020731ec
	mov r5, r0
_0204CCF0:
	mov r0, fp
	mov r1, r5
	bl FUN_0206d968
_0204CCFC:
	add sp, sp, #0x20
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204CD08:
	mov sl, #0
_0204CD0C:
	mov r0, r4
	mov r1, sl
	bl FUN_02050244
	cmp r0, #0
	bne _0204CD90
	mov r0, r4
	mov r1, sl
	mov r2, r7
	mov r3, #0
	bl FUN_020501bc
	mov r0, fp
	bl FUN_0206d8a8
	cmp r0, #0
	bne _0204CD84
	mov r4, #2
	mov r0, sb
	mov r1, r8
	mov r2, r5
	mov r3, r4
	bl FUN_0204c32c
	cmp r0, #0
	bne _0204CD78
	mov r0, sb
	mov r1, r8
	mov r2, r4
	bl FUN_020731ec
	mov r5, r0
_0204CD78:
	mov r0, fp
	mov r1, r5
	bl FUN_0206d968
_0204CD84:
	add sp, sp, #0x20
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204CD90:
	add sl, sl, #1
	cmp sl, #4
	blt _0204CD0C
	ldrb r0, [sp, #0x48]
	cmp r0, #0
	beq _0204CE40
	mov r0, r4
	mov r1, #3
	bl FUN_02050244
	mov sl, r0
	mov r0, sb
	mov r1, r8
	mov r2, sl
	bl FUN_0204d2a4
	mov r0, r4
	mov r1, #3
	mov r2, r7
	mov r3, #0
	bl FUN_020501bc
	cmp r6, #0
	mov r0, fp
	strhne sl, [r6]
	bl FUN_0206d8a8
	cmp r0, #0
	bne _0204CE34
	mov r4, #2
	mov r0, sb
	mov r1, r8
	mov r2, r5
	mov r3, r4
	bl FUN_0204c32c
	cmp r0, #0
	bne _0204CE28
	mov r0, sb
	mov r1, r8
	mov r2, r4
	bl FUN_020731ec
	mov r5, r0
_0204CE28:
	mov r0, fp
	mov r1, r5
	bl FUN_0206d968
_0204CE34:
	add sp, sp, #0x20
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204CE40:
	mov r0, #0
	add sp, sp, #0x20
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204CE4C: .word 0x0209A11C

	arm_func_start FUN_0204ce50
FUN_0204ce50: ; 0x0204CE50
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, #0
	mov fp, r0
	mov r1, sl
	mov r5, sl
	bl FUN_0205106c
	mov r7, r0
	mov r0, fp
	mov r1, sl
	bl FUN_0205107c
	mov r8, r0
	ldr r0, _0204D0AC ; =0x0209BA20
	bl FUN_020EDFB0
	cmp r0, #0
	ble _0204CF50
	ldr r4, _0204D0B0 ; =0x0209A11C
	arm_func_end FUN_0204ce50
_0204CE90:
	mov r0, r7
	mov r1, sl
	bl FUN_02050244
	mov r1, r0
	ldr r0, [r4]
	mov r2, #0
	bl FUN_0206c7dc
	cmp r0, #0
	bne _0204CF34
	mov sb, #1
_0204CEB8:
	mov r0, r8
	sub r1, sb, #1
	bl FUN_0204fbe8
	mov r6, r0
	ldr r0, [r4]
	mov r1, r6
	mov r2, r5
	bl FUN_0206c7dc
	cmp r0, #0
	cmpne r6, #0
	beq _0204CF20
	mov r0, r7
	mov r1, r6
	bl FUN_020502a8
	cmp r0, #0
	bne _0204CF20
	mov r0, r7
	mov r1, sl
	mov r2, r6
	mov r3, r5
	bl FUN_020501bc
	mov r0, fp
	mov r1, r6
	mov r2, sl
	bl FUN_0204d524
	b _0204CF34
_0204CF20:
	add r0, sb, #1
	lsl r0, r0, #0x10
	lsr sb, r0, #0x10
	cmp sb, #0x10
	bls _0204CEB8
_0204CF34:
	add r0, sl, #1
	lsl r6, r0, #0x10
	ldr r0, _0204D0AC ; =0x0209BA20
	lsr sl, r6, #0x10
	bl FUN_020EDFB0
	cmp r0, r6, lsr #16
	bgt _0204CE90
_0204CF50:
	mov r0, r7
	mov r1, #1
	mov r5, #0
	bl FUN_0204fed8
	movs r4, r0
	beq _0204CF84
	ldr r0, _0204D0B0 ; =0x0209A11C
	mov r1, r4
	ldr r0, [r0]
	mov r2, r5
	bl FUN_0206c7dc
	cmp r0, #0
	moveq r4, r5
_0204CF84:
	cmp r4, #0
	bne _0204CFF8
	mov r6, #2
_0204CF90:
	mov r0, r7
	mov r1, r6
	bl FUN_0204fed8
	mov r1, r5
	mov r4, r0
	bl FUN_020EFA9C
	cmp r0, #0
	beq _0204CFE4
	bl FUN_0206dcd4
	ldrh r0, [r0, #0x5a]
	tst r0, #1
	bne _0204CFE4
	mov r0, r7
	mov r1, r4
	bl FUN_0204fff8
	mov r2, #1
	mov r1, r0
	mov r0, r7
	mov r3, r2
	bl FUN_02050144
	b _0204CFF8
_0204CFE4:
	add r0, r6, #1
	lsl r0, r0, #0x10
	asr r6, r0, #0x10
	cmp r6, #0xb
	ble _0204CF90
_0204CFF8:
	ldr r5, _0204D0AC ; =0x0209BA20
	mov r6, #0
	mov r0, r5
	bl FUN_020EDFB0
	cmp r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204D010:
	mov r0, r7
	mov r1, r6
	bl FUN_02050244
	cmp r0, #0
	bne _0204D08C
	mov r0, r5
	mov r8, r6
	bl FUN_020EDFB0
	cmp r6, r0
	bge _0204D08C
_0204D038:
	mov r0, r7
	mov r1, r8
	bl FUN_02050244
	movs r4, r0
	beq _0204D070
	mov r0, r7
	mov r1, r4
	bl FUN_0205019c
	mov r3, r0
	mov r0, r7
	mov r1, r6
	mov r2, r4
	bl FUN_020501bc
	b _0204D08C
_0204D070:
	add r0, r8, #1
	lsl r4, r0, #0x10
	mov r0, r5
	lsr r8, r4, #0x10
	bl FUN_020EDFB0
	cmp r0, r4, lsr #16
	bgt _0204D038
_0204D08C:
	add r0, r6, #1
	lsl r4, r0, #0x10
	mov r0, r5
	lsr r6, r4, #0x10
	bl FUN_020EDFB0
	cmp r0, r4, lsr #16
	bgt _0204D010
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204D0AC: .word 0x0209BA20
_0204D0B0: .word 0x0209A11C

	arm_func_start FUN_0204d0b4
FUN_0204d0b4: ; 0x0204D0B4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, r1
	bl FUN_0205107c
	mov r6, #1
	mov r5, r0
	mov r4, #0
	mov fp, r6
	arm_func_end FUN_0204d0b4
_0204D0D4:
	mov r0, r5
	sub r1, r6, #1
	bl FUN_0204fbe8
	movs r7, r0
	beq _0204D104
	ldr r0, _0204D2A0 ; =0x0209A11C
	mov r1, r7
	ldr r0, [r0]
	mov r2, r4
	bl FUN_0206c7dc
	cmp r0, #0
	moveq r7, r4
_0204D104:
	cmp r7, #0
	bne _0204D164
	mov r7, #0xc
_0204D110:
	sub r8, r7, #1
	mov r0, r5
	mov r1, r8
	bl FUN_0204fbe8
	cmp r0, #0
	beq _0204D150
	mov r0, r5
	mov r1, r8
	bl FUN_0204fbe8
	mov r2, r0
	mov r0, sl
	str fp, [sp]
	mov r1, sb
	mov r3, r6
	bl FUN_0204c92c
	b _0204D164
_0204D150:
	add r0, r7, #1
	lsl r0, r0, #0x10
	asr r7, r0, #0x10
	cmp r7, #0x10
	ble _0204D110
_0204D164:
	add r6, r6, #1
	cmp r6, #0xb
	ble _0204D0D4
	mov r6, #0xc
	mov r4, #1
_0204D178:
	mov r0, r5
	sub r1, r6, #1
	bl FUN_0204fbe8
	cmp r0, #0
	bne _0204D1E0
	add r7, r6, #1
	cmp r7, #0x10
	bgt _0204D1E0
_0204D198:
	mov r0, r5
	sub r1, r7, #1
	bl FUN_0204fbe8
	cmp r0, #0
	beq _0204D1D4
	mov r0, r5
	sub r1, r7, #1
	bl FUN_0204fbe8
	mov r2, r0
	mov r0, sl
	mov r1, sb
	mov r3, r6
	str r4, [sp]
	bl FUN_0204c92c
	b _0204D1E0
_0204D1D4:
	add r7, r7, #1
	cmp r7, #0x10
	ble _0204D198
_0204D1E0:
	add r6, r6, #1
	cmp r6, #0x10
	ble _0204D178
	mov r4, #0
	mov r0, r5
	mov r1, r4
	bl FUN_0204fbe8
	movs r6, r0
	beq _0204D220
	ldr r0, _0204D2A0 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	mov r2, r4
	bl FUN_0206c7dc
	cmp r0, #0
	moveq r6, r4
_0204D220:
	cmp r6, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r6, #2
	mov r4, #0
_0204D230:
	sub r7, r6, #1
	mov r0, r5
	mov r1, r7
	bl FUN_0204fbe8
	mov r1, r4
	bl FUN_020EFA9C
	cmp r0, #0
	beq _0204D288
	bl FUN_0206dcd4
	ldrh r0, [r0, #0x5a]
	tst r0, #1
	bne _0204D288
	mov r0, r5
	mov r1, r7
	bl FUN_0204fbe8
	mov r3, #1
	mov r2, r0
	mov r0, sl
	mov r1, sb
	str r3, [sp]
	bl FUN_0204c92c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204D288:
	add r0, r6, #1
	lsl r0, r0, #0x10
	asr r6, r0, #0x10
	cmp r6, #0xb
	ble _0204D230
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204D2A0: .word 0x0209A11C

	arm_func_start FUN_0204d2a4
FUN_0204d2a4: ; 0x0204D2A4
	push {r3, r4, r5, r6, r7, lr}
	add r0, r0, #0xcc
	ldr r3, _0204D34C ; =0x00000FFF
	mov r4, r2
	mov r5, r1
	add r0, r0, #0x400
	add r7, r0, r5, lsl #4
	and r4, r4, r3
	mov r6, #0
	b _0204D2FC
	arm_func_end FUN_0204d2a4
_0204D2CC:
	mov r0, r7
	mov r1, r6
	bl FUN_02050258
	cmp r4, r0
	bne _0204D2F8
	mov r2, #0
	mov r0, r7
	mov r1, r6
	mov r3, r2
	bl FUN_020501bc
	b _0204D304
_0204D2F8:
	add r6, r6, #1
_0204D2FC:
	cmp r6, #4
	blt _0204D2CC
_0204D304:
	cmp r6, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, _0204D350 ; =0x020A0640
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	cmpeq r5, #1
	orreq r4, r4, #0x8000
	mov r5, #0
	mov r0, r4
	mov r1, r5
	bl FUN_020EFA9C
	cmp r0, #0
	beq _0204D344
	mov r1, r5
	bl FUN_0206d968
_0204D344:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0204D34C: .word 0x00000FFF
_0204D350: .word 0x020A0640

	arm_func_start FUN_0204d354
FUN_0204d354: ; 0x0204D354
	push {r4, r5, r6, lr}
	add r0, r0, #0xc
	add r0, r0, #0x400
	add r6, r0, r1, lsl #5
	ldr r0, _0204D3BC ; =0x00000FFF
	mov r5, #0
	and r0, r2, r0
	lsl r0, r0, #0x10
	lsr r4, r0, #0x10
	arm_func_end FUN_0204d354
_0204D378:
	mov r0, r6
	mov r1, r5
	bl FUN_0204fbfc
	cmp r4, r0
	bne _0204D3A0
	mov r0, r6
	mov r1, r5
	mov r2, #0
	bl FUN_0204fb8c
	b _0204D3AC
_0204D3A0:
	add r5, r5, #1
	cmp r5, #0x10
	blt _0204D378
_0204D3AC:
	mov r0, #0
	cmp r5, #0x10
	movne r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_0204D3BC: .word 0x00000FFF

	arm_func_start FUN_0204d3c0
FUN_0204d3c0: ; 0x0204D3C0
	push {r4, r5, r6, lr}
	ldr r3, _0204D430 ; =0x020A0640
	mov r6, r0
	ldrb r0, [r3, #0x1b]
	mov r5, r1
	mov r4, r2
	cmp r0, #0
	bne _0204D3F0
	ldr r0, _0204D434 ; =0x00000FFF
	cmp r5, #1
	and r4, r4, r0
	orreq r4, r4, #0x8000
	arm_func_end FUN_0204d3c0
_0204D3F0:
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_0204d2a4
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_0204d354
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_0204d4e8
	cmp r0, #0
	moveq r0, #0
	movne r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_0204D430: .word 0x020A0640
_0204D434: .word 0x00000FFF

	arm_func_start FUN_0204d438
FUN_0204d438: ; 0x0204D438
	push {r3, r4, r5, r6, r7, lr}
	add r0, r0, #0xcc
	ldr r3, _0204D4E0 ; =0x00000FFF
	mov r4, r2
	mov r5, r1
	add r0, r0, #0x400
	add r7, r0, r5, lsl #4
	and r4, r4, r3
	mov r6, #0
	b _0204D490
	arm_func_end FUN_0204d438
_0204D460:
	mov r0, r7
	mov r1, r6
	bl FUN_02050258
	cmp r4, r0
	bne _0204D48C
	mov r2, #0
	mov r0, r7
	mov r1, r6
	mov r3, r2
	bl FUN_020501bc
	b _0204D498
_0204D48C:
	add r6, r6, #1
_0204D490:
	cmp r6, #4
	blt _0204D460
_0204D498:
	cmp r6, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, _0204D4E4 ; =0x020A0640
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	cmpeq r5, #1
	orreq r4, r4, #0x8000
	mov r5, #0
	mov r0, r4
	mov r1, r5
	bl FUN_020EFA9C
	cmp r0, #0
	beq _0204D4D8
	mov r1, r5
	bl FUN_0206d968
_0204D4D8:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0204D4E0: .word 0x00000FFF
_0204D4E4: .word 0x020A0640

	arm_func_start FUN_0204d4e8
FUN_0204d4e8: ; 0x0204D4E8
	push {r4, lr}
	mov r4, #0
	mov r0, r2
	mov r1, r4
	bl FUN_020EFA9C
	cmp r0, #0
	moveq r0, r4
	popeq {r4, pc}
	ldr r2, _0204D520 ; =0x0209A11C
	ldrsh r1, [r0, #0x94]
	ldr r0, [r2]
	bl FUN_0206c5d8
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_0204D520: .word 0x0209A11C
	arm_func_end FUN_0204d4e8

	arm_func_start FUN_0204d524
FUN_0204d524: ; 0x0204D524
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xa0
	mov r4, r1
	mov r5, #0
	mov r0, r4
	mov r1, r5
	mov r6, r2
	mov sl, #0x32
	bl FUN_020EFA9C
	cmp r0, #0
	beq _0204D55C
	bl FUN_0206dcd4
	ldrh sb, [r0, #0xe]
	b _0204D580
	arm_func_end FUN_0204d524
_0204D55C:
	ldr r0, _0204D69C ; =0x0209BA20
	add r2, sp, #0x38
	mov r1, r4
	bl FUN_0204bd64
	cmp r0, #0
	addeq sp, sp, #0xa0
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrh sb, [sp, #0x90]
_0204D580:
	ldr r5, _0204D6A0 ; =0x02099ED8
	str sl, [sp]
	mov r8, #0
	ldr r0, [r5]
	mov r1, r4
	mov r2, r8
	mov r3, sb
	bl FUN_02055004
	mov r7, r0
	ldr r0, [r5]
	mov r1, r7
	mov r2, r6
	bl FUN_02055890
	ldr r0, [r5]
	mov r1, r7
	bl FUN_020552cc
	mov r6, #1
	mov r1, r6
	bl FUN_02054424
	ldr r0, [r5]
	bl FUN_02055c20
	mov r1, r7
	bl FUN_02054854
	mov r2, r0
	ldr r1, [r5]
	add r0, sp, #0x20
	bl FUN_02055c28
	ldr r3, [sp, #0x20]
	ldr r2, [sp, #0x24]
	ldr r1, [sp, #0x28]
	str r2, [sp, #0x30]
	str r8, [sp]
	stmib sp, {r2, r8}
	str r6, [sp, #0xc]
	str r6, [sp, #0x10]
	str r1, [sp, #0x34]
	ldr r1, [r5]
	add r0, sp, #0x14
	mov r2, r7
	str r3, [sp, #0x2c]
	bl FUN_020555e8
	ldr r2, [sp, #0x34]
	ldr r0, [r5]
	lsl r2, r2, #0x10
	mov r1, r7
	lsr r2, r2, #0x10
	bl FUN_02055558
	ldr r0, [r5]
	mov r1, r7
	bl FUN_02055324
	ldr r5, _0204D6A4 ; =0x02099EC0
	str sl, [sp]
	mov r7, r0
	ldr r0, [r5]
	mov r1, r4
	mov r2, sb
	mov r3, r8
	bl FUN_02056ed4
	str sb, [sp]
	stmib sp, {r8, sl}
	ldr r0, [r5]
	mov r1, r7
	mov r2, r4
	mov r3, r8
	bl FUN_02056b24
	ldr r0, [r5]
	mov r1, r6
	bl FUN_02057020
	mov r0, r6
	add sp, sp, #0xa0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0204D69C: .word 0x0209BA20
_0204D6A0: .word 0x02099ED8
_0204D6A4: .word 0x02099EC0

	arm_func_start FUN_0204d6a8
FUN_0204d6a8: ; 0x0204D6A8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x4c
	ldr r5, _0204D7F4 ; =0x02099ED8
	mov sl, #0
	ldr r0, [r5]
	mov r2, sl
	mov fp, r1
	bl FUN_020554b0
	str r0, [sp]
	ldr r0, [r5]
	bl FUN_02055c20
	ldr r1, [sp]
	mov sb, r0
	bl FUN_02054854
	sub r1, sl, #1
	cmp r0, r1
	beq _0204D7E8
	add r7, sp, #0x10
	add r6, sp, #4
	mov r4, #0xc
	b _0204D744
	arm_func_end FUN_0204d6a8
_0204D6FC:
	ldr r0, [r5]
	mov r1, sl
	bl FUN_020552dc
	movs r8, r0
	beq _0204D740
	bl FUN_0205430c
	mul r2, sl, r4
	ldr r3, [r0]
	ldr r1, [r0, #4]
	ldrh ip, [r8, #0x6a]
	lsl r8, sl, #1
	str r3, [r7, r2]
	add r2, r7, r2
	ldr r0, [r0, #8]
	str r1, [r2, #4]
	str r0, [r2, #8]
	strh ip, [r6, r8]
_0204D740:
	add sl, sl, #1
_0204D744:
	ldr r0, [sb, #0x10]
	cmp sl, r0
	blt _0204D6FC
	ldr r0, _0204D7F4 ; =0x02099ED8
	ldr r0, [r0]
	bl FUN_02055310
	movs r4, r0
	beq _0204D788
	bl FUN_0205430c
	ldrh r1, [r4, #0x6a]
	ldr r3, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r0, #8]
	str r3, [sp, #0x40]
	str r2, [sp, #0x44]
	str r0, [sp, #0x48]
	strh r1, [sp, #0xc]
_0204D788:
	ldr r4, _0204D7F4 ; =0x02099ED8
	mov r5, #1
	ldr r0, [r4]
	ldr r1, [sp]
	mov r2, r5
	bl FUN_02055938
	ldr r0, [r4]
	ldr r1, [sp]
	bl FUN_02055274
	ldr r4, _0204D7F8 ; =0x02099EC0
	mov r1, fp
	ldr r0, [r4]
	mov r2, #0
	bl FUN_02056a88
	mov r1, r0
	ldr r0, [r4]
	mov r2, r5
	bl FUN_02056e04
	ldr r0, [r4]
	mov r1, r5
	bl FUN_02057020
	add sp, sp, #0x4c
	mov r0, r5
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204D7E8:
	mov r0, sl
	add sp, sp, #0x4c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204D7F4: .word 0x02099ED8
_0204D7F8: .word 0x02099EC0

	arm_func_start FUN_0204d7fc
FUN_0204d7fc: ; 0x0204D7FC
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r3
	cmp r2, #0
	beq _0204D834
	bl FUN_020731a4
	cmp r0, #0
	ldrne r0, _0204D860 ; =0x0209A454
	movne r1, #1
	strbne r1, [r0, #0x30]
	ldreq r0, _0204D860 ; =0x0209A454
	moveq r1, #0
	strbeq r1, [r0, #0x30]
	arm_func_end FUN_0204d7fc
_0204D834:
	ldrb r0, [r6, #0x889]
	cmp r0, #0
	cmpeq r4, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_0204da5c
	mov r0, r6
	mov r1, r5
	bl FUN_0204d8cc
	pop {r4, r5, r6, pc}
	.align 2, 0_0204D860: .word 0x0209A454

	arm_func_start FUN_0204d864
FUN_0204d864: ; 0x0204D864
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r1
	mov r7, r2
	mov r6, #0
	mov r4, #0x400
	arm_func_end FUN_0204d864
_0204D878:
	mov r0, r6
	bl FUN_020EFA80
	movs r5, r0
	beq _0204D8A0
	bl FUN_0206d5f0
	cmp r8, r0
	bne _0204D8A0
	mov r0, r5
	mov r1, r4
	bl FUN_0206d634
_0204D8A0:
	add r6, r6, #1
	cmp r6, #0x64
	blt _0204D878
	mov r0, r7
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r1, #0x400
	bl FUN_0206d620
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204d8cc
FUN_0204d8cc: ; 0x0204D8CC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov sl, r1
	bl FUN_0207249c
	add r1, sp, #0
	mov r0, #5
	mov r6, #0
	arm_func_end FUN_0204d8cc
_0204D8E8:
	strb r6, [r1]
	strb r6, [r1, #1]
	strb r6, [r1, #2]
	strb r6, [r1, #3]
	add r1, r1, #4
	subs r0, r0, #1
	bne _0204D8E8
	mov r5, #1
	mov r8, #0
	add r4, sp, #0
	mov fp, r5
_0204D914:
	mov r0, r8
	bl FUN_020EFA80
	movs r7, r0
	beq _0204D990
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204D990
	mov r0, r7
	bl FUN_0206d5f0
	cmp sl, r0
	bne _0204D990
	mov r0, r7
	mov r1, r5
	bl FUN_0206d9b0
	mov sb, r0
	mov r0, r7
	bl FUN_0206d660
	cmp r0, #0
	cmpne sb, #0
	ble _0204D970
	cmp sb, #0x14
	addle r0, r4, sb
	strble r5, [r0, #-1]
_0204D970:
	cmp sb, #0
	blt _0204D980
	cmp sb, #0x14
	ble _0204D990
_0204D980:
	mov r0, r7
	mov r1, r6
	mov r2, fp
	bl FUN_0206d9cc
_0204D990:
	add r8, r8, #1
	cmp r8, #0x64
	blt _0204D914
	mov fp, #1
	mov r8, #0
	add r5, sp, #0
	mov r4, fp
_0204D9AC:
	mov r0, r8
	bl FUN_020EFA80
	movs sb, r0
	beq _0204DA48
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204DA48
	mov r0, sb
	bl FUN_0206d5f0
	cmp sl, r0
	bne _0204DA48
	mov r0, sb
	bl FUN_0206d660
	cmp r0, #0
	beq _0204DA48
	mov r0, sb
	mov r1, fp
	bl FUN_0206d9b0
	cmp r0, #0
	beq _0204DA10
	mov r0, sb
	mov r1, fp
	bl FUN_0206d9b0
	cmp r0, #0x14
	bls _0204DA48
_0204DA10:
	mov r7, r6
_0204DA14:
	ldrb r0, [r5, r7]
	cmp r0, #0
	bne _0204DA3C
	add r1, r7, #1
	mov r0, sb
	mov r2, r4
	and r1, r1, #0xff
	bl FUN_0206d9cc
	strb r4, [r5, r7]
	b _0204DA48
_0204DA3C:
	add r7, r7, #1
	cmp r7, #0x14
	blt _0204DA14
_0204DA48:
	add r8, r8, #1
	cmp r8, #0x64
	blt _0204D9AC
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0204da5c
FUN_0204da5c: ; 0x0204DA5C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x9c
	str r0, [sp, #8]
	add r2, sp, #0x10
	mov sl, r1
	mov r0, #4
	mov r4, #0
	arm_func_end FUN_0204da5c
_0204DA78:
	strh r4, [r2]
	strh r4, [r2, #2]
	strh r4, [r2, #4]
	strh r4, [r2, #6]
	add r2, r2, #8
	subs r0, r0, #1
	bne _0204DA78
	mov r5, #0
	mov fp, #0x4000
	add r8, sp, #0x30
	ldr r7, _0204DE5C ; =0x0000018E
	ldr r6, _0204DE60 ; =0x02099E91
	b _0204DB38
_0204DAAC:
	mov r0, r5
	bl FUN_020EFA80
	movs sb, r0
	beq _0204DB34
	bl FUN_0206d5f0
	cmp sl, r0
	bne _0204DB34
	mov r0, sb
	bl FUN_0206dcd4
	mov r1, r0
	mov r0, r8
	bl FUN_0206ed40
	mov r0, sb
	mov r1, r7
	bl FUN_0206d634
	mov r0, r8
	mov r1, r4
	bl FUN_0206e84c
	mov r0, r8
	mov r1, r4
	bl FUN_0206e984
	mov r0, r8
	mov r1, r4
	bl FUN_0206ea54
	mov r0, sb
	bl FUN_0206dcd4
	mov r1, r8
	bl FUN_0206ed40
	ldrb r0, [r6]
	cmp r0, #0
	beq _0204DB34
	mov r0, sb
	mov r1, fp
	bl FUN_0206dadc
_0204DB34:
	add r5, r5, #1
_0204DB38:
	cmp r5, #0x64
	blt _0204DAAC
	ldr r0, [sp, #8]
	bl FUN_020731b4
	cmp r0, #0
	beq _0204DC70
	ldr r0, [sp, #8]
	mov r1, sl
	bl FUN_0205106c
	mov fp, r0
	ldr r0, [sp, #8]
	mov r1, sl
	bl FUN_0205107c
	mov r8, r0
	ldr r0, [sp, #8]
	mov r1, sl
	bl FUN_0207249c
	mov r6, #0
	str r0, [sp, #0xc]
	mov r5, r6
	b _0204DC60
_0204DB8C:
	cmp sl, #1
	bne _0204DBB4
	mov r0, r8
	mov r1, r5
	bl FUN_0204fbe8
	mov r7, r0
	mov r0, r8
	mov r1, r7
	bl FUN_0204fd68
	b _0204DBD0
_0204DBB4:
	mov r0, fp
	mov r1, r5
	bl FUN_02050244
	mov r7, r0
	mov r0, fp
	mov r1, r7
	bl FUN_0205019c
_0204DBD0:
	mov sb, r0
	mov r0, r7
	mov r1, r4
	bl FUN_020EFA9C
	movs r7, r0
	cmpne sb, #0
	beq _0204DC5C
	mov r1, sb
	bl FUN_0206d968
	mov r0, r7
	mov r1, #0xe
	bl FUN_0206d620
	cmp sb, #1
	bne _0204DC3C
	mov r0, r7
	mov r1, #0x80
	bl FUN_0206d620
	mov r0, r7
	bl FUN_0206d6c4
	cmp r0, #0
	beq _0204DC3C
	mov r0, r7
	bl FUN_0206dcd4
	ldr r2, [sp, #0xc]
	mov r1, r4
	ldrh r2, [r2, #0x32]
	bl FUN_0206def8
_0204DC3C:
	mov r0, #7
	stm sp, {r0, r4}
	ldr r0, _0204DE64 ; =0x0209BA20
	mov r1, r7
	mov r2, #1
	mov r3, r4
	bl FUN_0204e79c
	add r6, r6, #1
_0204DC5C:
	add r5, r5, #1
_0204DC60:
	cmp r5, #4
	blt _0204DB8C
	add sp, sp, #0x9c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204DC70:
	ldr r0, _0204DE68 ; =0x020A0640
	mov r5, #0
	ldrb r0, [r0, #0x1a]
	cmp r0, #0
	bne _0204DC94
	ldr r0, [sp, #8]
	bl FUN_020731d0
	cmp r0, #0
	movne r5, #1
_0204DC94:
	mov sb, #2
	cmp r5, #0
	moveq sb, sl
	ldr r0, [sp, #8]
	mov r1, sb
	bl FUN_0205107c
	mov r8, r0
	ldr r0, [sp, #8]
	mov r1, sl
	bl FUN_0207249c
	mov r6, #0
	mov fp, r0
	mov r5, r6
	b _0204DD1C
_0204DCCC:
	mov r0, r8
	mov r1, r5
	bl FUN_0204fbe8
	cmp r0, #0
	bne _0204DD18
	mov r7, r4
	b _0204DD10
_0204DCE8:
	mov r0, r8
	mov r1, r5
	bl FUN_0204fbe8
	movs r2, r0
	beq _0204DD0C
	mov r0, r8
	mov r1, r5
	bl FUN_0204fb8c
	b _0204DD18
_0204DD0C:
	add r7, r7, #1
_0204DD10:
	cmp r7, #5
	blt _0204DCE8
_0204DD18:
	add r5, r5, #1
_0204DD1C:
	cmp r5, #0x10
	blt _0204DCCC
	mov r5, #0
	b _0204DE4C
_0204DD2C:
	mov r0, r8
	mov r1, r5
	bl FUN_0204fbe8
	movs sl, r0
	beq _0204DE48
	mov r1, r4
	bl FUN_020EFA9C
	movs r7, r0
	beq _0204DE48
	ldr r0, _0204DE68 ; =0x020A0640
	mov r1, sl
	ldrb r0, [r0, #0x1b]
	cmp r0, #0
	mov r0, r8
	bne _0204DD70
	bl FUN_0204fd20
	b _0204DD74
_0204DD70:
	bl FUN_0204fd68
_0204DD74:
	movs sl, r0
	beq _0204DE48
	cmp sb, #2
	mov r0, r7
	mov r1, sl
	bne _0204DD94
	bl FUN_0206d998
	b _0204DD98
_0204DD94:
	bl FUN_0206d980
_0204DD98:
	mov r0, r7
	mov r1, #2
	bl FUN_0206d620
	cmp sl, #0xc
	bge _0204DDB8
	mov r0, r7
	mov r1, #0xc
	bl FUN_0206d620
_0204DDB8:
	cmp sl, #1
	bne _0204DDF0
	mov r0, r7
	mov r1, #0x80
	bl FUN_0206d620
	mov r0, r7
	bl FUN_0206d6c4
	cmp r0, #0
	beq _0204DDF0
	mov r0, r7
	bl FUN_0206dcd4
	mov r1, r4
	ldrh r2, [fp, #0x32]
	bl FUN_0206def8
_0204DDF0:
	mov r0, #7
	stm sp, {r0, r4}
	ldr r0, _0204DE64 ; =0x0209BA20
	mov r1, r7
	mov r2, #1
	mov r3, r4
	bl FUN_0204e79c
	ldr r0, _0204DE60 ; =0x02099E91
	ldrb r0, [r0]
	cmp r0, #0
	ldrne r0, _0204DE6C ; =0x02099E97
	ldrbne r0, [r0]
	cmpne r0, #0
	beq _0204DE44
	mov r0, r7
	bl FUN_0206d6c4
	cmp r0, #0
	beq _0204DE44
	mov r0, r7
	mov r1, #0x4000
	bl FUN_0206dac4
_0204DE44:
	add r6, r6, #1
_0204DE48:
	add r5, r5, #1
_0204DE4C:
	cmp r5, #0x10
	blt _0204DD2C
	add sp, sp, #0x9c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204DE5C: .word 0x0000018E
_0204DE60: .word 0x02099E91
_0204DE64: .word 0x0209BA20
_0204DE68: .word 0x020A0640
_0204DE6C: .word 0x02099E97

	arm_func_start FUN_0204de70
FUN_0204de70: ; 0x0204DE70
	push {r3, lr}
	cmp r2, #0
	ble _0204DE84
	cmp r2, #4
	ble _0204DE8C
	arm_func_end FUN_0204de70
_0204DE84:
	mov r0, #0
	pop {r3, pc}
_0204DE8C:
	add r0, r0, #0xcc
	add r0, r0, #0x400
	add r0, r0, r1, lsl #4
	sub r1, r2, #1
	bl FUN_02050244
	pop {r3, pc}

	arm_func_start FUN_0204dea4
FUN_0204dea4: ; 0x0204DEA4
	push {r3, lr}
	cmp r2, #0
	ble _0204DEB8
	cmp r2, #0x10
	ble _0204DEC0
	arm_func_end FUN_0204dea4
_0204DEB8:
	mov r0, #0
	pop {r3, pc}
_0204DEC0:
	add r0, r0, #0xc
	add r0, r0, #0x400
	add r0, r0, r1, lsl #5
	sub r1, r2, #1
	bl FUN_0204fbe8
	pop {r3, pc}

	arm_func_start FUN_0204ded8
FUN_0204ded8: ; 0x0204DED8
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r2
	mov r8, r1
	cmp r7, #0
	ble _0204DEF4
	cmp r7, #0x10
	ble _0204DEFC
	arm_func_end FUN_0204ded8
_0204DEF4:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_0204DEFC:
	mov r6, #0
	mov r4, r6
_0204DF04:
	mov r0, r6
	bl FUN_020EFA80
	movs r5, r0
	beq _0204DF50
	bl FUN_0206d64c
	cmp r0, #0
	beq _0204DF50
	mov r0, r5
	bl FUN_0206d5f0
	cmp r8, r0
	bne _0204DF50
	mov r0, r5
	mov r1, r4
	bl FUN_0206d824
	cmp r7, r0
	bne _0204DF50
	mov r0, r5
	bl FUN_0206cbf8
	pop {r4, r5, r6, r7, r8, pc}
_0204DF50:
	add r6, r6, #1
	cmp r6, #0x64
	blt _0204DF04
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204df64
FUN_0204df64: ; 0x0204DF64
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r6, r0
	mov r0, r5
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x4a]
	cmp r0, #0x63
	movhs r0, #0
	pophs {r4, r5, r6, pc}
	mov r0, r5
	bl FUN_0206dcd4
	ldr r4, [r0]
	mov r0, r5
	bl FUN_0206dcd4
	ldrb r2, [r0, #0x4a]
	mov r0, r6
	mov r1, r5
	add r2, r2, #1
	bl FUN_0204e000
	sub r0, r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0204df64

	arm_func_start FUN_0204dfb8
FUN_0204dfb8: ; 0x0204DFB8
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r1
	mov r8, r0
	mov r0, r7
	mov r6, r2
	mov r5, r3
	bl FUN_0206dcd4
	mov r4, r0
	mov r0, r7
	bl FUN_0206dcd4
	ldr r1, [r4]
	add r1, r6, r1
	bl FUN_0206dcf0
	mov r0, r8
	mov r1, r7
	mov r2, r5
	bl FUN_0204e118
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0204dfb8

	arm_func_start FUN_0204e000
FUN_0204e000: ; 0x0204E000
	push {r4, lr}
	ldrb r1, [r1, #0x4c]
	mov r4, r2
	bl FUN_02072054
	mov r1, r4
	bl FUN_020506dc
	pop {r4, pc}
	arm_func_end FUN_0204e000

	arm_func_start FUN_0204e01c
FUN_0204e01c: ; 0x0204E01C
	push {r4, lr}
	movs r4, r1
	moveq r0, #0
	popeq {r4, pc}
	ldrb r1, [r4, #2]
	ldr r3, [r0, #0x7e8]
	mov r0, #0x68
	mla r0, r1, r0, r3
	mov r1, r2
	bl FUN_02050708
	ldrb ip, [r4]
	ldrb r2, [r4, #1]
	ldr r1, _0204E07C ; =0x51EB851F
	sub r2, r2, ip
	mul r2, r0, r2
	smull r0, r3, r1, r2
	lsr r0, r2, #0x1f
	add r3, r0, r3, asr #5
	adds r0, ip, r3
	movmi r0, #0
	cmp r0, #0xff
	movgt r0, #0xff
	and r0, r0, #0xff
	pop {r4, pc}
	.align 2, 0_0204E07C: .word 0x51EB851F
	arm_func_end FUN_0204e01c

	arm_func_start FUN_0204e080
FUN_0204e080: ; 0x0204E080
	push {r4, lr}
	movs r4, r1
	moveq r0, #0
	popeq {r4, pc}
	ldrb r1, [r4, #4]
	ldr r3, [r0, #0x7e8]
	mov r0, #0x68
	mla r0, r1, r0, r3
	mov r1, r2
	bl FUN_02050708
	ldrh ip, [r4]
	ldrh r2, [r4, #2]
	ldr r1, _0204E0E8 ; =0x51EB851F
	sub r2, r2, ip
	mul r2, r0, r2
	smull r0, r3, r1, r2
	lsr r0, r2, #0x1f
	add r3, r0, r3, asr #5
	adds r1, ip, r3
	ldr r0, _0204E0EC ; =0x000003E7
	movmi r1, #0
	cmp r1, r0
	movgt r1, r0
	lsl r0, r1, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
	.align 2, 0_0204E0E8: .word 0x51EB851F
_0204E0EC: .word 0x000003E7
	arm_func_end FUN_0204e080

	arm_func_start FUN_0204e0f0
FUN_0204e0f0: ; 0x0204E0F0
	push {r3, lr}
	sub sp, sp, #8
	mov ip, #0
	mov r3, r2
	str ip, [sp]
	mov r2, #1
	str ip, [sp, #4]
	bl FUN_0204e79c
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_0204e0f0

	arm_func_start FUN_0204e118
FUN_0204e118: ; 0x0204E118
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc8
	mov sb, r1
	add r3, sp, #4
	mov r1, #0
	movs r8, r2
	mov sl, r0
	str r1, [r3]
	str r1, [r3, #4]
	str r1, [r3, #8]
	str r1, [r3, #0xc]
	beq _0204E154
	mov r0, r8
	mov r2, #0x10
	bl MemWrite
	arm_func_end FUN_0204e118
_0204E154:
	mov r0, sb
	bl FUN_0206dcdc
	cmp r0, #0
	addne sp, sp, #0xc8
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sb
	bl FUN_0206dcd4
	add r4, sp, #0x5c
	str r0, [sp]
	mov r1, r0
	mov r0, r4
	bl FUN_0206ed40
	str r4, [sb, #0x68]
	ldrb r5, [sp, #0xa6]
	mov r7, #1
	ldr r6, [sp, #0x5c]
	mov r0, sl
	mov r1, sb
	mov r2, r7
	mov fp, r5
	bl FUN_0204e000
	cmp r6, r0
	bhs _0204E1D0
	mov r0, sl
	mov r1, sb
	mov r2, r7
	bl FUN_0204e000
	mov r1, r0
	mov r0, r4
	bl FUN_0206dcf0
_0204E1D0:
	cmp r5, #0x63
	bge _0204E314
_0204E1D8:
	ldr r6, [r4]
	mov r0, sl
	mov r1, sb
	add r2, r5, #1
	bl FUN_0204e000
	cmp r6, r0
	blo _0204E314
	add r1, r5, #1
	mov r0, r4
	and r1, r1, #0xff
	bl FUN_0206e43c
	add r6, sp, #4
	mov r0, sl
	mov r1, sb
	mov r2, r6
	bl FUN_0204e0f0
	cmp r8, #0
	beq _0204E268
	mov r1, #0
	mov r2, r1
_0204E228:
	ldr r7, [r6, r2, lsl #2]
	cmp r7, #0
	beq _0204E25C
	mov r3, r1
_0204E238:
	ldr r0, [r8, r3, lsl #2]
	cmp r0, #0
	bgt _0204E250
	cmp r0, r7
	strne r7, [r8, r3, lsl #2]
	bne _0204E25C
_0204E250:
	add r3, r3, #1
	cmp r3, #4
	blt _0204E238
_0204E25C:
	add r2, r2, #1
	cmp r2, #4
	blt _0204E228
_0204E268:
	cmp sb, #0
	beq _0204E308
	mov r0, sb
	bl FUN_0206cbf8
	mov r1, r0
	add r2, sp, #0x14
	mov r0, sl
	bl FUN_0204c078
	cmp r0, #0
	beq _0204E308
	ldrsb r1, [r4, #0x60]
	ldrsb r0, [sp, #0x53]
	ldrsb r6, [r4, #0x61]
	ldrsb r7, [r4, #0x62]
	add r0, r1, r0
	lsl r0, r0, #0x18
	asr r1, r0, #0x18
	ldrsb r0, [sp, #0x55]
	cmp r1, #0x64
	movge r1, #0x64
	add r0, r6, r0
	lsl r0, r0, #0x18
	asr r6, r0, #0x18
	ldrsb r0, [sp, #0x57]
	cmp r6, #0x64
	movge r6, #0x64
	add r0, r7, r0
	lsl r0, r0, #0x18
	asr r7, r0, #0x18
	cmp r7, #0x64
	mov r0, r4
	and r1, r1, #0xff
	movge r7, #0x64
	bl FUN_0206eb24
	mov r0, r4
	and r1, r6, #0xff
	bl FUN_0206eb8c
	mov r0, r4
	and r1, r7, #0xff
	bl FUN_0206ebf4
_0204E308:
	add r5, r5, #1
	cmp r5, #0x63
	blt _0204E1D8
_0204E314:
	ldr r1, [sp]
	mov r0, sb
	str r1, [sb, #0x68]
	bl FUN_0206dcd4
	mov r1, r4
	bl FUN_0206ed40
	ldrb r0, [r4, #0x4a]
	cmp fp, r0
	addeq sp, sp, #0xc8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sb
	bl FUN_0206d5f0
	mov r4, r0
	bl FUN_020F081C
	cmp r4, r0
	bne _0204E378
	mov r0, sb
	bl FUN_0206cbf8
	cmp r0, #1
	bne _0204E378
	mov r0, sl
	bl FUN_02073384
	mov r0, #1
	strb r0, [sl, #0x88b]
_0204E378:
	mov r0, #1
	add sp, sp, #0xc8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0204e384
FUN_0204e384: ; 0x0204E384
	push {r3, r4, r5, lr}
	cmp r3, #0
	add lr, r1, #0x6c
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x14]
	cmpne r2, #0
	pople {r3, r4, r5, pc}
	mov r4, #0
	mov r5, r4
	arm_func_end FUN_0204e384
_0204E3A8:
	add ip, lr, r5
	ldrb ip, [ip, #0xf]
	add r5, r5, #1
	cmp r5, #7
	add r4, r4, ip
	blt _0204E3A8
	sub r3, r4, r3
	cmp r3, #0
	pople {r3, r4, r5, pc}
	cmp r3, r2
	movgt r3, r2
	ldrsb r2, [r1]
	sub r2, r2, r3
	cmp r2, #0x7f
	ble _0204E3F4
	subs r2, r2, #0x7f
	rsbmi r2, r2, #0
	sub r3, r3, r2
	mov r2, #0x7f
_0204E3F4:
	cmn r2, #0x7f
	bge _0204E40C
	adds r2, r2, #0x7f
	rsbmi r2, r2, #0
	sub r3, r3, r2
	mvn r2, #0x7e
_0204E40C:
	strb r2, [r1]
	ldrb r1, [r0]
	sub r1, r1, r3
	strb r1, [r0]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0204e420
FUN_0204e420: ; 0x0204E420
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x44
	mov sb, r1
	mov sl, r0
	mov r0, sb
	mov r8, r2
	str r3, [sp, #8]
	bl FUN_0206dcd4
	mov r5, r0
	mov r0, sb
	bl FUN_0206cc34
	ldr r1, _0204E794 ; =0x020A1540
	ldrb r2, [r8, #0x46]
	ldrh r1, [r1, #0xd0]
	mov fp, r0
	ldrh r7, [r8, #0x3c]
	asr r0, r1, r2
	tst r0, #1
	movne ip, #1
	moveq ip, #0
	mov r3, #0x14
	cmp r7, #0
	ldrsh r6, [r5, #0x18]
	mov r0, sl
	mov r1, r8
	mov r2, fp
	ldreq r7, _0204E798 ; =0x00007FFF
	mul r4, ip, r3
	bl FUN_0204e080
	add r0, r0, r6
	strh r0, [sb, #0x70]
	ldrsh r6, [r5, #0x1a]
	mov r0, sl
	mov r2, fp
	add r1, r8, #8
	bl FUN_0204e080
	add r0, r0, r6
	strh r0, [sb, #0x72]
	add r6, sb, #0x7b
	mov r0, #0
	add r1, sp, #0x28
	b _0204E4D4
	arm_func_end FUN_0204e420
_0204E4C8:
	ldrb r2, [r6, r0]
	str r2, [r1, r0, lsl #2]
	add r0, r0, #1
_0204E4D4:
	cmp r0, #7
	blt _0204E4C8
	ldrsb r0, [r5, #0x4f]
	mov r2, fp
	add r1, r8, #0x10
	str r0, [sp, #0x20]
	mov r0, sl
	bl FUN_0204e01c
	ldr r1, [sp, #0x20]
	mov r2, fp
	add r0, r0, r1
	strb r0, [r6]
	ldrsb r0, [r5, #0x50]
	add r1, r8, #0x14
	str r0, [sp, #0x1c]
	mov r0, sl
	bl FUN_0204e01c
	ldr r1, [sp, #0x1c]
	mov r2, fp
	add r0, r0, r1
	strb r0, [r6, #1]
	ldrsb r0, [r5, #0x51]
	add r1, r8, #0x18
	str r0, [sp, #0x18]
	mov r0, sl
	bl FUN_0204e01c
	ldr r1, [sp, #0x18]
	mov r2, fp
	add r0, r0, r1
	strb r0, [r6, #3]
	ldrsb r0, [r5, #0x52]
	add r1, r8, #0x1c
	str r0, [sp, #0x14]
	mov r0, sl
	bl FUN_0204e01c
	ldr r1, [sp, #0x14]
	mov r2, fp
	add r0, r0, r1
	strb r0, [r6, #2]
	ldrsb r0, [r5, #0x53]
	add r1, r8, #0x20
	str r0, [sp, #0x10]
	mov r0, sl
	bl FUN_0204e01c
	ldr r1, [sp, #0x10]
	mov r2, fp
	add r0, r0, r1
	strb r0, [r6, #4]
	ldrsb r0, [r5, #0x54]
	add r1, r8, #0x24
	str r0, [sp, #0xc]
	mov r0, sl
	bl FUN_0204e01c
	ldr r1, [sp, #0xc]
	mov r2, fp
	add r0, r0, r1
	strb r0, [r6, #6]
	add r1, r8, #0x28
	ldrsb r8, [r5, #0x55]
	mov r0, sl
	bl FUN_0204e01c
	add r0, r0, r8
	strb r0, [r6, #5]
	ldr r0, [sp, #8]
	cmp r0, #0
	beq _0204E780
	mov r0, #0
	add r2, sp, #0x28
	b _0204E5FC
_0204E5E8:
	ldrb r3, [r6, r0]
	ldr r1, [r2, r0, lsl #2]
	sub r1, r3, r1
	str r1, [r2, r0, lsl #2]
	add r0, r0, #1
_0204E5FC:
	cmp r0, #7
	blt _0204E5E8
	mov r0, sb
	bl FUN_0206d6c4
	cmp r0, #0
	bne _0204E780
	ldrsb r0, [r5, #0x4f]
	add r8, sp, #0x24
	ldr r2, [sp, #0x28]
	strb r0, [sp, #0x24]
	str r8, [sp]
	mov r0, sl
	mov r1, sb
	str r6, [sp, #4]
	add r3, r4, r7
	bl FUN_0204e384
	ldrsb r1, [sp, #0x24]
	mov r0, r5
	bl FUN_0206e50c
	ldrsb r2, [r5, #0x50]
	add r1, r6, #1
	mov r0, sl
	strb r2, [sp, #0x24]
	str r8, [sp]
	str r1, [sp, #4]
	ldr r2, [sp, #0x2c]
	mov r1, sb
	add r3, r4, r7
	bl FUN_0204e384
	ldrsb r1, [sp, #0x24]
	mov r0, r5
	bl FUN_0206e574
	ldrsb r2, [r5, #0x51]
	add r1, r6, #3
	mov r0, sl
	strb r2, [sp, #0x24]
	str r8, [sp]
	str r1, [sp, #4]
	ldr r2, [sp, #0x34]
	mov r1, sb
	add r3, r4, r7
	bl FUN_0204e384
	ldrsb r1, [sp, #0x24]
	mov r0, r5
	bl FUN_0206e5dc
	ldrsb r2, [r5, #0x52]
	add r1, r6, #2
	mov r0, sl
	strb r2, [sp, #0x24]
	str r8, [sp]
	str r1, [sp, #4]
	ldr r2, [sp, #0x30]
	mov r1, sb
	add r3, r4, r7
	bl FUN_0204e384
	ldrsb r1, [sp, #0x24]
	mov r0, r5
	bl FUN_0206e644
	ldrsb r2, [r5, #0x53]
	add r1, r6, #4
	mov r0, sl
	strb r2, [sp, #0x24]
	str r8, [sp]
	str r1, [sp, #4]
	ldr r2, [sp, #0x38]
	mov r1, sb
	add r3, r4, r7
	bl FUN_0204e384
	ldrsb r1, [sp, #0x24]
	mov r0, r5
	bl FUN_0206e6ac
	ldrsb r2, [r5, #0x54]
	add r1, r6, #6
	mov r0, sl
	strb r2, [sp, #0x24]
	str r8, [sp]
	str r1, [sp, #4]
	ldr r2, [sp, #0x40]
	mov r1, sb
	add r3, r4, r7
	bl FUN_0204e384
	ldrsb r1, [sp, #0x24]
	mov r0, r5
	bl FUN_0206e714
	ldrsb r0, [r5, #0x55]
	add r3, r6, #5
	ldr r2, [sp, #0x3c]
	strb r0, [sp, #0x24]
	str r8, [sp]
	mov r0, sl
	mov r1, sb
	str r3, [sp, #4]
	add r3, r4, r7
	bl FUN_0204e384
	ldrsb r1, [sp, #0x24]
	mov r0, r5
	bl FUN_0206e77c
_0204E780:
	add r0, sb, #0x6c
	bl FUN_02050cb4
	mov r0, #1
	add sp, sp, #0x44
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204E794: .word 0x020A1540
_0204E798: .word 0x00007FFF

	arm_func_start FUN_0204e79c
FUN_0204e79c: ; 0x0204E79C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc8
	mov sl, r0
	mov sb, r1
	mov fp, r2
	mov r8, r3
	ldr r4, [sp, #0xf0]
	mov r5, #0
	bl FUN_0204fb20
	mov r0, r5
	arm_func_end FUN_0204e79c
_0204E7C4:
	cmp r8, #0
	strne r5, [r8, r0, lsl #2]
	add r0, r0, #1
	cmp r0, #4
	blt _0204E7C4
	cmp r4, #3
	beq _0204E824
	ldr r0, [sp, #0xf4]
	cmp r0, #0
	beq _0204E7FC
	add r1, sp, #0x80
	mov r2, #0x48
	bl _memcpy
	b _0204E824
_0204E7FC:
	mov r0, sb
	bl FUN_0206cbf8
	mov r1, r0
	add r2, sp, #0x80
	mov r0, sl
	bl FUN_0204c078
	cmp r0, #0
	addeq sp, sp, #0xc8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0204E824:
	mov r0, sb
	bl FUN_0206dcd4
	add r5, sp, #0x14
	str r0, [sp]
	mov r1, r0
	mov r0, r5
	bl FUN_0206ed40
	str r5, [sb, #0x68]
	tst r4, #1
	bne _0204E878
	tst r4, #4
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	mov r3, #1
	moveq r3, #0
	add r2, sp, #0x80
	mov r0, sl
	mov r1, sb
	bl FUN_0204e420
	b _0204E880
_0204E878:
	add r0, sb, #0x6c
	bl FUN_02050cb4
_0204E880:
	tst r4, #2
	bne _0204E8E8
	mov r6, #0
	mov r7, r6
	mov r4, #1
	add r5, sp, #0x80
_0204E898:
	mov r0, sb
	bl FUN_0206cc34
	add r2, r5, r7, lsl #2
	ldrb r1, [r2, #0x2e]
	cmp r0, r1
	blt _0204E8DC
	ldrh r2, [r2, #0x2c]
	mov r0, sl
	mov r1, sb
	mov r3, r4
	bl FUN_02049e14
	cmp r0, #0
	cmpne r8, #0
	addne r0, r5, r7, lsl #2
	ldrhne r0, [r0, #0x2c]
	strne r0, [r8, r6, lsl #2]
	addne r6, r6, #1
_0204E8DC:
	add r7, r7, #1
	cmp r7, #4
	blt _0204E898
_0204E8E8:
	mov r6, #0
	add r4, sp, #4
_0204E8F0:
	mov r0, sb
	mov r1, r6
	bl FUN_0206cd90
	movs r1, r0
	beq _0204E944
	mov r0, sl
	bl FUN_020EE034
	movs r5, r0
	beq _0204E944
	bl FUN_020EEF1C
	cmp r0, #0
	beq _0204E944
	mov r0, sl
	mov r1, r5
	mov r2, r4
	bl FUN_020EEE80
	cmp r0, #0
	bne _0204E944
	mov r1, r4
	add r0, sb, #0x6c
	bl FUN_02050ce0
_0204E944:
	add r6, r6, #1
	cmp r6, #4
	blt _0204E8F0
	cmp fp, #0
	beq _0204E9C8
	mov r0, sb
	bl FUN_0206d5f0
	mov r1, r0
	mov r0, sl
	bl FUN_020EE468
	mov r4, r0
	mov r0, sb
	bl FUN_0206d6d8
	cmp r0, #0
	cmpne r4, #0
	beq _0204E9C8
	mov r0, sl
	mov r1, r4
	bl FUN_020EE034
	mov r5, r0
	bl FUN_020EEF1C
	cmp r0, #0
	beq _0204E9C8
	add r4, sp, #4
	mov r0, sl
	mov r1, r5
	mov r2, r4
	bl FUN_020EEE80
	cmp r0, #0
	bne _0204E9C8
	mov r1, r4
	add r0, sb, #0x6c
	bl FUN_02050ce0
_0204E9C8:
	mov r0, sb
	bl FUN_0206ccdc
	mov r4, r0
	mov r0, sb
	bl FUN_0206ccec
	cmp r4, r0
	ble _0204E9F8
	mov r0, sb
	bl FUN_0206ccec
	mov r1, r0
	mov r0, sb
	bl FUN_0206cc9c
_0204E9F8:
	mov r0, sb
	bl FUN_0206cc84
	mov r4, r0
	mov r0, sb
	bl FUN_0206cc94
	cmp r4, r0
	ble _0204EA28
	mov r0, sb
	bl FUN_0206cc94
	mov r1, r0
	mov r0, sb
	bl FUN_0206cc44
_0204EA28:
	ldr r1, [sp]
	mov r0, sb
	str r1, [sb, #0x68]
	bl FUN_0206dcd4
	add r1, sp, #0x14
	bl FUN_0206ed40
	mov r0, #1
	add sp, sp, #0xc8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0204ea4c
FUN_0204ea4c: ; 0x0204EA4C
	push {r4, r5, r6, r7, r8, lr}
	movs r7, r1
	mov r8, r0
	mov r6, r2
	mov r5, r3
	popeq {r4, r5, r6, r7, r8, pc}
	cmp r6, #0
	movle r6, #1
	ble _0204EA78
	cmp r6, #0x63
	movgt r6, #0x63
	arm_func_end FUN_0204ea4c
_0204EA78:
	mov r0, r7
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x4a]
	cmp r6, r0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r7
	bl FUN_0206dcd4
	mov r4, r0
	mov r0, r8
	mov r1, r7
	mov r2, r6
	bl FUN_0204e000
	mov r1, r0
	mov r0, r4
	bl FUN_0206dcf0
	mov r0, r8
	mov r1, r7
	mov r2, r5
	bl FUN_0204e118
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0204eac8
FUN_0204eac8: ; 0x0204EAC8
	ldr r0, _0204EAD4 ; =0x020A0640
	ldrb r0, [r0, #0x4ed]
	bx lr
	.align 2, 0_0204EAD4: .word 0x020A0640
	arm_func_end FUN_0204eac8

	arm_func_start FUN_0204ead8
FUN_0204ead8: ; 0x0204EAD8
	cmp r1, #0
	movlt r1, #0
	cmp r1, #0xff
	movgt r1, #0xff
	ldr r0, _0204EAF8 ; =0x020A0B00
	ldr ip, _0204EAFC ; =FUN_020747b8
	and r1, r1, #0xff
	bx ip
	.align 2, 0_0204EAF8: .word 0x020A0B00
_0204EAFC: .word FUN_020747b8
	arm_func_end FUN_0204ead8

	arm_func_start FUN_0204eb00
FUN_0204eb00: ; 0x0204EB00
	push {r3, lr}
	tst r1, #0x8000
	bne _0204EB1C
	add r0, r0, #0xc
	add r0, r0, #0x400
	bl FUN_0204fd68
	pop {r3, pc}
	arm_func_end FUN_0204eb00
_0204EB1C:
	add r0, r0, #0x2c
	add r0, r0, #0x400
	bl FUN_0204fd68
	pop {r3, pc}

	arm_func_start FUN_0204eb2c
FUN_0204eb2c: ; 0x0204EB2C
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	bl FUN_0206dca4
	pop {r3, pc}
	arm_func_end FUN_0204eb2c

	arm_func_start FUN_0204eb4c
FUN_0204eb4c: ; 0x0204EB4C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, #0
	arm_func_end FUN_0204eb4c
_0204EB5C:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	beq _0204EB80
	bl FUN_0206d5f0
	cmp r6, r0
	bne _0204EB80
	mov r0, r4
	bl FUN_0206dca4
_0204EB80:
	add r5, r5, #1
	cmp r5, #0x64
	blt _0204EB5C
	mov r0, r7
	mov r1, r6
	mov r2, #1
	bl FUN_02072560
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204eba0
FUN_0204eba0: ; 0x0204EBA0
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r6, r0
	ldr r0, [r6, #0x7ec]
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #1
	popne {r4, r5, r6, pc}
	add r0, r6, #0x3ec
	mvn r4, #0
	ldr r1, _0204EC34 ; =0x02090548
	add r2, sp, #4
	add r0, r0, #0x400
	mov r3, #0
	str r4, [sp]
	bl FUN_02085d7c
	mov r5, r0
	mov r4, #1
	arm_func_end FUN_0204eba0
_0204EBE8:
	ldrsb r0, [sp, #4]
	bl FUN_02086480
	cmp r0, #0
	beq _0204EC04
	mov r0, r4
	bl FUN_02001eb0
	b _0204EBE8
_0204EC04:
	cmp r5, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, _0204EC38 ; =0xBA2E8BA3
	add r1, r6, #0x800
	umull r0, r2, r5, r0
	lsr r2, r2, #5
	strh r2, [r1, #0x6a]
	mov r0, #1
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_0204EC34: .word 0x02090548
_0204EC38: .word 0xBA2E8BA3

	arm_func_start FUN_0204ec3c
FUN_0204ec3c: ; 0x0204EC3C
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x7ec]
	cmp r1, #0
	moveq r0, #1
	popeq {r4, pc}
	ldr r0, _0204EC6C ; =0x0209A250
	bl FUN_0202e1c0
	mov r0, #0
	str r0, [r4, #0x7ec]
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_0204EC6C: .word 0x0209A250
	arm_func_end FUN_0204ec3c

	arm_func_start FUN_0204ec70
FUN_0204ec70: ; 0x0204EC70
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r2, [r5, #0x7ec]
	mov r4, r1
	cmp r2, #0
	mov r1, #0
	bne _0204EC94
	bl FUN_0204eba0
	mov r1, #1
	arm_func_end FUN_0204ec70
_0204EC94:
	add r0, r5, #0x800
	ldrh ip, [r0, #0x6a]
	ldr r2, [r5, #0x7ec]
	mov r3, #0
	cmp ip, #0
	ble _0204ECEC
_0204ECAC:
	ldrh r0, [r2, #0x24]
	cmp r0, r4
	bne _0204ECDC
	ldrb r0, [r2, #0x2b]
	tst r0, #2
	beq _0204ECDC
	cmp r1, #0
	beq _0204ECD4
	mov r0, r5
	bl FUN_0204ec3c
_0204ECD4:
	mov r0, #1
	pop {r3, r4, r5, pc}
_0204ECDC:
	add r3, r3, #1
	cmp r3, ip
	add r2, r2, #0x2c
	blt _0204ECAC
_0204ECEC:
	cmp r1, #0
	beq _0204ECFC
	mov r0, r5
	bl FUN_0204ec3c
_0204ECFC:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0204ed04
FUN_0204ed04: ; 0x0204ED04
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov r8, #1
	mov sb, r8
	b _0204EDFC
	arm_func_end FUN_0204ed04
_0204ED18:
	sub sl, r2, #1
	cmp sl, #0
	mov sb, #0
	ble _0204EDF4
	mov fp, sb
_0204ED2C:
	add r5, r1, sl, lsl #3
	ldrh r0, [r5, #4]
	cmp r0, #0
	beq _0204EDE8
	cmp r3, #0
	ldrh r0, [r5, #-4]
	beq _0204ED70
	cmp r0, #0
	beq _0204ED60
	ldr r4, [r1, sl, lsl #3]
	ldr r0, [r5, #-8]
	cmp r4, r0
	bge _0204ED68
_0204ED60:
	mov r0, r8
	b _0204ED90
_0204ED68:
	mov r0, fp
	b _0204ED90
_0204ED70:
	cmp r0, #0
	beq _0204ED88
	ldr r4, [r1, sl, lsl #3]
	ldr r0, [r5, #-8]
	cmp r4, r0
	ble _0204ED8C
_0204ED88:
	b _0204ED60
_0204ED8C:
	mov r0, #0
_0204ED90:
	cmp r0, #0
	beq _0204EDE8
	add r6, r1, sl, lsl #3
	ldrb r4, [r6, #6]
	ldrb lr, [r6, #7]
	ldrh r5, [r6, #4]
	ldr r7, [r1, sl, lsl #3]
	ldr r0, [r6, #-8]
	strb r4, [sp, #6]
	str r0, [r1, sl, lsl #3]
	ldrh r0, [r6, #-4]
	strb lr, [sp, #7]
	mov sb, r8
	strh r0, [r6, #4]
	ldrb ip, [r6, #-2]
	ldrb r0, [r6, #-1]
	strb ip, [r6, #6]
	strb r0, [r6, #7]
	str r7, [r6, #-8]
	strh r5, [r6, #-4]
	strb r4, [r6, #-2]
	strb lr, [r6, #-1]
_0204EDE8:
	sub sl, sl, #1
	cmp sl, #0
	bgt _0204ED2C
_0204EDF4:
	add r1, r1, #8
	sub r2, r2, #1
_0204EDFC:
	cmp sb, #0
	beq _0204EE0C
	cmp r2, #0
	bgt _0204ED18
_0204EE0C:
	mov r0, #1
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0204ee18
FUN_0204ee18: ; 0x0204EE18
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r2
	mov r7, r1
	mov r0, r6
	mov r4, #1
	bl GetStrLen
	cmp r7, #0
	cmpne r6, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r5, r0, #1
	cmp r5, #0x1c
	movhs r4, #0
	bhs _0204EE5C
	mov r0, r7
	mov r1, r6
	bl _strcpy
	arm_func_end FUN_0204ee18
_0204EE5C:
	cmp r5, #0x20
	movhs r4, #0
	bhs _0204EE74
	mov r1, r6
	add r0, r7, #0x2c
	bl _strcpy
_0204EE74:
	cmp r5, #0x10
	movhs r4, #0
	bhs _0204EE8C
	mov r1, r6
	add r0, r7, #0x1c
	bl _strcpy
_0204EE8C:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204ee94
FUN_0204ee94: ; 0x0204EE94
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	movs sb, r1
	mov r8, r2
	mov sl, r0
	cmpne r8, #0
	mov fp, r3
	mov r4, #0
	movle r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _0204EF8C ; =0x0209A250
	lsl r1, r8, #3
	bl FUN_0202de44
	str r0, [sp]
	cmp r0, #0
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r8, #0
	mov r5, r0
	mov r6, sb
	mov r7, r4
	cmpgt r8, #0
	ble _0204EF34
	arm_func_end FUN_0204ee94
_0204EEEC:
	ldrh r0, [r6]
	mov r1, r4
	bl FUN_020EFA9C
	ldrh r2, [r6]
	movs r1, r0
	strh r2, [r5, #4]
	streq r4, [r5]
	beq _0204EF20
	mov r0, sl
	mov r2, fp
	mov r3, r4
	bl FUN_0204f02c
	str r0, [r5]
_0204EF20:
	add r7, r7, #1
	cmp r7, r8
	add r5, r5, #8
	add r6, r6, #2
	blt _0204EEEC
_0204EF34:
	ldrb r3, [sp, #0x28]
	ldr r1, [sp]
	mov r0, sl
	mov r2, r8
	bl FUN_0204ed04
	cmp r8, #0
	mov r4, r0
	ldr r1, [sp]
	mov r2, #0
	cmpgt r8, #0
	ble _0204EF78
_0204EF60:
	ldrh r0, [r1, #4]
	add r2, r2, #1
	cmp r2, r8
	strh r0, [sb], #2
	add r1, r1, #8
	blt _0204EF60
_0204EF78:
	ldr r0, _0204EF8C ; =0x0209A250
	ldr r1, [sp]
	bl FUN_0202e1c0
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204EF8C: .word 0x0209A250

	arm_func_start FUN_0204ef90
FUN_0204ef90: ; 0x0204EF90
	cmp r1, #0x46
	bgt _0204EFE8
	bge _0204F01C
	cmp r1, #0xf
	arm_func_end FUN_0204ef90

	arm_func_start switchD
switchD: ; 0x0204EFA0
	addls pc, pc, r1, lsl #2
	b _0204F024
	arm_func_end switchD
_0204EFA8: ; jump table
	b _0204F024 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0204EFAC
	b _0204F004
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0204EFB0
	b _0204F004
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0204EFB4
	b _0204F004
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0204EFB8
	b _0204F004
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0204EFBC
	b _0204F004
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0204EFC0
	b _0204F024
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0204EFC4
	b _0204F024
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0204EFC8
	b _0204F024
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0204EFCC
	b _0204F024
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0204EFD0
	b _0204F00C
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0204EFD4
	b _0204F00C
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0204EFD8
	b _0204F00C
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0204EFDC
	b _0204F014
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0204EFE0
	b _0204F014
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0204EFE4
	b _0204F00C
	arm_func_end caseD_f
_0204EFE8:
	cmp r1, #0x47
	bgt _0204EFF8
	beq _0204F01C
	b _0204F024
_0204EFF8:
	cmp r1, #0x48
	beq _0204F01C
	b _0204F024
_0204F004:
	mov r0, #1
	bx lr
_0204F00C:
	mov r0, #1
	bx lr
_0204F014:
	mov r0, #1
	bx lr
_0204F01C:
	mov r0, #1
	bx lr
_0204F024:
	mov r0, #0
	bx lr

	arm_func_start FUN_0204f02c
FUN_0204f02c: ; 0x0204F02C
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	movs r6, r1
	mov r7, r0
	mov r4, #0
	addeq sp, sp, #0xc
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, pc}
	cmp r2, #0x84
	bgt _0204F1E8
	bge _0204F718
	cmp r2, #0x81
	bgt _0204F1CC
	bge _0204F64C
	cmp r2, #0x51
	bgt _0204F1C0
	cmp r2, #0
	arm_func_end FUN_0204f02c

	arm_func_start switchD
switchD: ; 0x0204F070
	addge pc, pc, r2, lsl #2
	b _0204F7B0
	arm_func_end switchD
_0204F078: ; jump table
	b LAB_0204f22c ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0204F07C
	b _0204F238
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0204F080
	b _0204F248
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0204F084
	b _0204F258
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0204F088
	b _0204F268
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0204F08C
	b _0204F27C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0204F090
	b _0204F7B0
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0204F094
	b _0204F7B0
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0204F098
	b _0204F7B0
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0204F09C
	b _0204F7B0
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0204F0A0
	b _0204F288
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0204F0A4
	b _0204F294
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0204F0A8
	b _0204F2A4
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0204F0AC
	b _0204F408
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0204F0B0
	b _0204F3E4
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0204F0B4
	b _0204F2B4
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x0204F0B8
	b _0204F2C4
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x0204F0BC
	b _0204F7B0
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x0204F0C0
	b _0204F7B0
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0204F0C4
	b _0204F7B0
	arm_func_end caseD_13

	arm_func_start caseD_14
caseD_14: ; 0x0204F0C8
	b _0204F2D0
	arm_func_end caseD_14

	arm_func_start caseD_15
caseD_15: ; 0x0204F0CC
	b _0204F2E0
	arm_func_end caseD_15

	arm_func_start caseD_16
caseD_16: ; 0x0204F0D0
	b _0204F2F0
	arm_func_end caseD_16

	arm_func_start caseD_17
caseD_17: ; 0x0204F0D4
	b _0204F300
	arm_func_end caseD_17

	arm_func_start caseD_18
caseD_18: ; 0x0204F0D8
	b _0204F7B0
	arm_func_end caseD_18

	arm_func_start caseD_19
caseD_19: ; 0x0204F0DC
	b _0204F7B0
	arm_func_end caseD_19

	arm_func_start caseD_1a
caseD_1a: ; 0x0204F0E0
	b _0204F7B0
	arm_func_end caseD_1a

	arm_func_start caseD_1b
caseD_1b: ; 0x0204F0E4
	b _0204F7B0
	arm_func_end caseD_1b

	arm_func_start caseD_1c
caseD_1c: ; 0x0204F0E8
	b _0204F7B0
	arm_func_end caseD_1c

	arm_func_start caseD_1d
caseD_1d: ; 0x0204F0EC
	b _0204F7B0
	arm_func_end caseD_1d

	arm_func_start caseD_1e
caseD_1e: ; 0x0204F0F0
	b _0204F310
	arm_func_end caseD_1e

	arm_func_start caseD_1f
caseD_1f: ; 0x0204F0F4
	b _0204F320
	arm_func_end caseD_1f

	arm_func_start caseD_20
caseD_20: ; 0x0204F0F8
	b _0204F330
	arm_func_end caseD_20

	arm_func_start caseD_21
caseD_21: ; 0x0204F0FC
	b _0204F340
	arm_func_end caseD_21

	arm_func_start caseD_22
caseD_22: ; 0x0204F100
	b _0204F350
	arm_func_end caseD_22

	arm_func_start caseD_23
caseD_23: ; 0x0204F104
	b _0204F360
	arm_func_end caseD_23

	arm_func_start caseD_24
caseD_24: ; 0x0204F108
	b _0204F370
	arm_func_end caseD_24

	arm_func_start caseD_25
caseD_25: ; 0x0204F10C
	b _0204F380
	arm_func_end caseD_25

	arm_func_start caseD_26
caseD_26: ; 0x0204F110
	b _0204F390
	arm_func_end caseD_26

	arm_func_start caseD_27
caseD_27: ; 0x0204F114
	b _0204F39C
	arm_func_end caseD_27

	arm_func_start caseD_28
caseD_28: ; 0x0204F118
	b _0204F3A8
	arm_func_end caseD_28

	arm_func_start caseD_29
caseD_29: ; 0x0204F11C
	b _0204F3B4
	arm_func_end caseD_29

	arm_func_start caseD_2a
caseD_2a: ; 0x0204F120
	b _0204F3C0
	arm_func_end caseD_2a

	arm_func_start caseD_2b
caseD_2b: ; 0x0204F124
	b _0204F3CC
	arm_func_end caseD_2b

	arm_func_start caseD_2c
caseD_2c: ; 0x0204F128
	b _0204F3D8
	arm_func_end caseD_2c

	arm_func_start caseD_2d
caseD_2d: ; 0x0204F12C
	b _0204F7B0
	arm_func_end caseD_2d

	arm_func_start caseD_2e
caseD_2e: ; 0x0204F130
	b _0204F7B0
	arm_func_end caseD_2e

	arm_func_start caseD_2f
caseD_2f: ; 0x0204F134
	b _0204F7B0
	arm_func_end caseD_2f

	arm_func_start caseD_30
caseD_30: ; 0x0204F138
	b _0204F7B0
	arm_func_end caseD_30

	arm_func_start caseD_31
caseD_31: ; 0x0204F13C
	b _0204F7B0
	arm_func_end caseD_31

	arm_func_start caseD_32
caseD_32: ; 0x0204F140
	b _0204F7B0
	arm_func_end caseD_32

	arm_func_start caseD_33
caseD_33: ; 0x0204F144
	b _0204F7B0
	arm_func_end caseD_33

	arm_func_start caseD_34
caseD_34: ; 0x0204F148
	b _0204F7B0
	arm_func_end caseD_34

	arm_func_start caseD_35
caseD_35: ; 0x0204F14C
	b _0204F7B0
	arm_func_end caseD_35

	arm_func_start caseD_36
caseD_36: ; 0x0204F150
	b _0204F7B0
	arm_func_end caseD_36

	arm_func_start caseD_37
caseD_37: ; 0x0204F154
	b _0204F7B0
	arm_func_end caseD_37

	arm_func_start caseD_38
caseD_38: ; 0x0204F158
	b _0204F7B0
	arm_func_end caseD_38

	arm_func_start caseD_39
caseD_39: ; 0x0204F15C
	b _0204F7B0
	arm_func_end caseD_39

	arm_func_start caseD_3a
caseD_3a: ; 0x0204F160
	b _0204F7B0
	arm_func_end caseD_3a

	arm_func_start caseD_3b
caseD_3b: ; 0x0204F164
	b _0204F7B0
	arm_func_end caseD_3b

	arm_func_start caseD_3c
caseD_3c: ; 0x0204F168
	b _0204F7B0
	arm_func_end caseD_3c

	arm_func_start caseD_3d
caseD_3d: ; 0x0204F16C
	b _0204F7B0
	arm_func_end caseD_3d

	arm_func_start caseD_3e
caseD_3e: ; 0x0204F170
	b _0204F7B0
	arm_func_end caseD_3e

	arm_func_start caseD_3f
caseD_3f: ; 0x0204F174
	b _0204F7B0
	arm_func_end caseD_3f

	arm_func_start caseD_40
caseD_40: ; 0x0204F178
	b _0204F7B0
	arm_func_end caseD_40

	arm_func_start caseD_41
caseD_41: ; 0x0204F17C
	b _0204F7B0
	arm_func_end caseD_41

	arm_func_start caseD_42
caseD_42: ; 0x0204F180
	b _0204F7B0
	arm_func_end caseD_42

	arm_func_start caseD_43
caseD_43: ; 0x0204F184
	b _0204F7B0
	arm_func_end caseD_43

	arm_func_start caseD_44
caseD_44: ; 0x0204F188
	b _0204F7B0
	arm_func_end caseD_44

	arm_func_start caseD_45
caseD_45: ; 0x0204F18C
	b _0204F7B0
	arm_func_end caseD_45

	arm_func_start caseD_46
caseD_46: ; 0x0204F190
	b _0204F580
	arm_func_end caseD_46

	arm_func_start caseD_47
caseD_47: ; 0x0204F194
	b _0204F594
	arm_func_end caseD_47

	arm_func_start caseD_48
caseD_48: ; 0x0204F198
	b _0204F5A4
	arm_func_end caseD_48

	arm_func_start caseD_49
caseD_49: ; 0x0204F19C
	b _0204F7B0
	arm_func_end caseD_49

	arm_func_start caseD_4a
caseD_4a: ; 0x0204F1A0
	b _0204F7B0
	arm_func_end caseD_4a

	arm_func_start caseD_4b
caseD_4b: ; 0x0204F1A4
	b _0204F7B0
	arm_func_end caseD_4b

	arm_func_start caseD_4c
caseD_4c: ; 0x0204F1A8
	b _0204F7B0
	arm_func_end caseD_4c

	arm_func_start caseD_4d
caseD_4d: ; 0x0204F1AC
	b _0204F7B0
	arm_func_end caseD_4d

	arm_func_start caseD_4e
caseD_4e: ; 0x0204F1B0
	b _0204F7B0
	arm_func_end caseD_4e

	arm_func_start caseD_4f
caseD_4f: ; 0x0204F1B4
	b _0204F7B0
	arm_func_end caseD_4f

	arm_func_start caseD_50
caseD_50: ; 0x0204F1B8
	b _0204F44C
	arm_func_end caseD_50

	arm_func_start caseD_51
caseD_51: ; 0x0204F1BC
	b _0204F458
	arm_func_end caseD_51
_0204F1C0:
	cmp r2, #0x80
	beq _0204F5B4
	b _0204F7B0
_0204F1CC:
	cmp r2, #0x82
	bgt _0204F1DC
	beq _0204F6EC
	b _0204F7B0
_0204F1DC:
	cmp r2, #0x83
	beq _0204F6F8
	b _0204F7B0
_0204F1E8:
	cmp r2, #0x87
	bgt _0204F210
	bge _0204F778
	cmp r2, #0x85
	bgt _0204F204
	beq _0204F738
	b _0204F7B0
_0204F204:
	cmp r2, #0x86
	beq _0204F758
	b _0204F7B0
_0204F210:
	cmp r2, #0xa0
	bgt _0204F220
	beq _0204F4F4
	b _0204F7B0
_0204F220:
	cmp r2, #0xa1
	beq _0204F508
	b _0204F7B0
LAB_0204f22c:
	add sp, sp, #0xc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F238:
	mov r0, r6
	bl FUN_0206cc00
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F248:
	mov r0, r6
	bl FUN_0206cbf8
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F258:
	mov r0, r6
	bl FUN_0206d5d4
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F268:
	mov r0, r6
	bl FUN_0206dcd4
	add sp, sp, #0xc
	ldrb r0, [r0, #0x4b]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F27C:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x4d]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F288:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x5c]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F294:
	mov r0, r6
	bl thunk_FUN_0204fb60
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F2A4:
	mov r0, r6
	bl thunk_FUN_0204fb6c
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F2B4:
	mov r0, r6
	bl FUN_0206cd88
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F2C4:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x5a]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F2D0:
	mov r0, r6
	bl FUN_0206ccdc
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F2E0:
	mov r0, r6
	bl FUN_0206ccec
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F2F0:
	mov r0, r6
	bl FUN_0206cc84
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F300:
	mov r0, r6
	bl FUN_0206cc94
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F310:
	mov r0, r6
	bl FUN_0206cd50
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F320:
	mov r0, r6
	bl FUN_0206cd10
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F330:
	mov r0, r6
	bl FUN_0206cd00
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F340:
	mov r0, r6
	bl FUN_0206cd40
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F350:
	mov r0, r6
	bl FUN_0206cd60
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F360:
	mov r0, r6
	bl FUN_0206cd20
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F370:
	mov r0, r6
	bl FUN_0206cd30
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F380:
	mov r0, r6
	bl FUN_0206cc34
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F390:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x7b]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F39C:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x7c]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F3A8:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x7e]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F3B4:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x7d]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F3C0:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x7f]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F3CC:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x81]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F3D8:
	add sp, sp, #0xc
	ldrb r0, [r6, #0x80]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F3E4:
	cmp r3, #6
	addhs sp, sp, #0xc
	movhs r0, #0
	pophs {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r6
	mov r1, r3
	bl FUN_0206cdf8
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F408:
	mov r0, r6
	mov r1, r3
	bl FUN_0206cdf8
	movs r4, r0
	beq _0204F440
	mov r0, r7
	mov r1, r6
	mov r2, r4
	mov r3, #0
	bl FUN_0204a0b4
	cmp r0, #0
	addne sp, sp, #0xc
	movne r0, r4
	popne {r3, r4, r5, r6, r7, r8, pc}
_0204F440:
	add sp, sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F44C:
	add sp, sp, #0xc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F458:
	add r1, sp, #0
	mov r2, r3
	bl FUN_0204a1e0
	cmp r0, #0
	addeq sp, sp, #0xc
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldrb r0, [sp, #2]
	cmp r0, #1
	addne sp, sp, #0xc
	movne r0, r4
	popne {r3, r4, r5, r6, r7, r8, pc}
	ldrb r1, [sp]
	mov r0, r7
	bl FUN_02049a40
	mov r5, r0
	add r7, sp, #4
	b _0204F4E0
_0204F4A0:
	mov r0, r6
	bl FUN_0206cc00
	lsl r1, r4, #1
	ldrh r1, [r7, r1]
	cmp r1, r0
	beq _0204F4D0
	mov r0, r6
	bl FUN_0206cc00
	lsl r1, r4, #1
	ldrh r1, [r7, r1]
	cmp r1, r0
	bne _0204F4DC
_0204F4D0:
	add sp, sp, #0xc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F4DC:
	add r4, r4, #1
_0204F4E0:
	cmp r4, r5
	blt _0204F4A0
	add sp, sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F4F4:
	ldr r1, [r6, #0x84]
	ldr r2, _0204F7BC ; =0x0209A2C0
	bl FUN_0207237c
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F508:
	ldr r1, [r6, #0x84]
	mov r0, r6
	ldr r5, [r1, #4]
	bl FUN_02040128
	mov r1, r0
	mov r0, r7
	mov r2, r4
	bl FUN_020723c4
	subs r0, r5, r0
	ldr r1, [r6, #0x84]
	mov r0, r6
	ldr r5, [r1, #4]
	bpl _0204F560
	bl FUN_02040128
	mov r1, r0
	mov r0, r7
	mov r2, r4
	bl FUN_020723c4
	sub r0, r5, r0
	add sp, sp, #0xc
	rsb r0, r0, #0
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F560:
	bl FUN_02040128
	mov r1, r0
	mov r0, r7
	mov r2, r4
	bl FUN_020723c4
	add sp, sp, #0xc
	sub r0, r5, r0
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F580:
	mov r0, r6
	mov r1, r4
	bl FUN_0206d824
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F594:
	mov r0, r6
	bl FUN_0206d8b8
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F5A4:
	mov r0, r6
	bl FUN_0206d8a8
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F5B4:
	mov r0, r6
	bl FUN_0206d5f0
	add r1, r7, #0xc
	add r1, r1, #0x400
	add r8, r1, r0, lsl #5
	mov r0, r6
	bl FUN_0206cbf8
	mov r5, r0
	mov r0, r6
	bl FUN_0206cc00
	mov r4, r0
	mov r0, r8
	mov r1, r5
	bl FUN_0204fca0
	cmp r0, #0
	mov r0, r8
	mov r1, r5
	subne r4, r4, #0x10000
	bl FUN_0204fd20
	cmp r0, #0
	ble _0204F61C
	mov r0, r8
	mov r1, r5
	bl FUN_0204fd20
	cmp r0, #0xb
	suble r4, r4, #0x20000
_0204F61C:
	mov r0, r6
	bl FUN_0206d5f0
	add r1, r7, #0xcc
	add r2, r1, #0x400
	mov r1, r5
	add r0, r2, r0, lsl #4
	bl FUN_020502a8
	cmp r0, #0
	subne r4, r4, #0x40000
	add sp, sp, #0xc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F64C:
	mov r0, r6
	bl FUN_0206d5f0
	add r1, r7, #0xc
	add r1, r1, #0x400
	add r8, r1, r0, lsl #5
	mov r0, r6
	bl FUN_0206cbf8
	mov r5, r0
	ldrsh r4, [r6, #0x94]
	mov r0, r8
	mov r1, r5
	bl FUN_0204fca0
	cmp r0, #0
	addeq sp, sp, #0xc
	addeq r0, r4, #0x70000000
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r8
	mov r1, r5
	bl FUN_0204fd20
	cmp r0, #0
	bne _0204F6BC
	mov r0, r8
	mov r1, r5
	bl FUN_0204fd20
	cmp r0, #0xb
	addgt sp, sp, #0xc
	addgt r0, r4, #0x60000000
	popgt {r3, r4, r5, r6, r7, r8, pc}
_0204F6BC:
	mov r0, r6
	bl FUN_0206d5f0
	add r1, r7, #0xcc
	add r2, r1, #0x400
	mov r1, r5
	add r0, r2, r0, lsl #4
	bl FUN_020502a8
	cmp r0, #0
	subne r4, r4, #0x40000
	add sp, sp, #0xc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F6EC:
	add sp, sp, #0xc
	ldrsh r0, [r6, #0x94]
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F6F8:
	mov r0, r6
	mov r1, r4
	bl FUN_0206d824
	movs r4, r0
	moveq r4, #0x20
	add sp, sp, #0xc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F718:
	mov r0, r6
	mov r1, #1
	bl FUN_0206d824
	movs r4, r0
	moveq r4, #0x20
	add sp, sp, #0xc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F738:
	mov r0, r6
	mov r1, #2
	bl FUN_0206d824
	movs r4, r0
	moveq r4, #0x20
	add sp, sp, #0xc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F758:
	mov r0, r6
	mov r1, #3
	bl FUN_0206d824
	movs r4, r0
	moveq r4, #0x20
	add sp, sp, #0xc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F778:
	mvn r5, #0xc0000000
	mov r0, r5
	bl FUN_020EF8D4
	mov r4, r0
	mov r0, r6
	bl FUN_0206cc00
	add r1, r7, #0x800
	ldrh r1, [r1, #0x76]
	add sp, sp, #0xc
	and r1, r1, r5, lsr #18
	cmp r1, r0
	addeq r4, r4, #0x40000000
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_0204F7B0:
	mov r0, #0x80000000
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0204F7BC: .word 0x0209A2C0

	arm_func_start FUN_0204f7c0
FUN_0204f7c0: ; 0x0204F7C0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, r2
	mov r8, r3
	mov r6, #0
	bl FUN_0205107c
	ldr fp, _0204F880 ; =0x0209BA20
	mov r7, r0
	mov r5, r6
	mov r4, r6
	arm_func_end FUN_0204f7c0
_0204F7E8:
	mov r0, r7
	mov r1, r4
	bl FUN_0204fbe8
	cmp r0, #0
	beq _0204F854
	mov r0, fp
	bl FUN_020731a4
	cmp r0, #0
	mov r0, r7
	mov r1, r4
	beq _0204F828
	bl FUN_0204fbe8
	mov r1, r0
	ldr r0, _0204F884 ; =0x0209A0AC
	bl FUN_0206c718
	b _0204F834
_0204F828:
	bl FUN_0204fbe8
	mov r1, #0
	bl FUN_020EFA9C
_0204F834:
	movs r1, r0
	beq _0204F854
	mov r0, sl
	mov r2, sb
	mov r3, r8
	bl FUN_0204f02c
	add r6, r6, r0
	add r5, r5, #1
_0204F854:
	add r4, r4, #1
	cmp r4, #0x10
	blt _0204F7E8
	cmp r5, #0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, r5, r5, lsr #31
	mov r1, r5
	add r0, r6, r0, asr #1
	bl FUN_0201f9bc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0204F880: .word 0x0209BA20
_0204F884: .word 0x0209A0AC

	arm_func_start FUN_0204f888
FUN_0204f888: ; 0x0204F888
	push {r3, lr}
	ldr lr, _0204FB14 ; =0x020A0640
	mov r3, r2
	cmp r1, #0x2b
	mov ip, #0
	arm_func_end FUN_0204f888

	arm_func_start switchD
switchD: ; 0x0204F89C
	addls pc, pc, r1, lsl #2
	b _0204FB0C
	arm_func_end switchD
_0204F8A4: ; jump table
	b LAB_0204f954 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0204F8A8
	b _0204F95C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0204F8AC
	b _0204F96C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0204F8B0
	b _0204F97C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0204F8B4
	b _0204F98C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0204F8B8
	b _0204F99C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0204F8BC
	b _0204F9AC
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0204F8C0
	b _0204F9BC
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0204F8C4
	b _0204FB0C
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x0204F8C8
	b _0204FB0C
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x0204F8CC
	b _0204FB0C
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0204F8D0
	b _0204FB0C
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x0204F8D4
	b _0204FB0C
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x0204F8D8
	b _0204FB0C
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x0204F8DC
	b _0204FB0C
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0204F8E0
	b _0204FB0C
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x0204F8E4
	b _0204FB0C
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x0204F8E8
	b _0204FB0C
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x0204F8EC
	b _0204FB0C
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0204F8F0
	b _0204FB0C
	arm_func_end caseD_13

	arm_func_start caseD_14
caseD_14: ; 0x0204F8F4
	b _0204F9CC
	arm_func_end caseD_14

	arm_func_start caseD_15
caseD_15: ; 0x0204F8F8
	b _0204F9D4
	arm_func_end caseD_15

	arm_func_start caseD_16
caseD_16: ; 0x0204F8FC
	b _0204FB0C
	arm_func_end caseD_16

	arm_func_start caseD_17
caseD_17: ; 0x0204F900
	b _0204FB0C
	arm_func_end caseD_17

	arm_func_start caseD_18
caseD_18: ; 0x0204F904
	b _0204FB0C
	arm_func_end caseD_18

	arm_func_start caseD_19
caseD_19: ; 0x0204F908
	b _0204F9DC
	arm_func_end caseD_19

	arm_func_start caseD_1a
caseD_1a: ; 0x0204F90C
	b _0204F9E8
	arm_func_end caseD_1a

	arm_func_start caseD_1b
caseD_1b: ; 0x0204F910
	b _0204FB0C
	arm_func_end caseD_1b

	arm_func_start caseD_1c
caseD_1c: ; 0x0204F914
	b _0204FB0C
	arm_func_end caseD_1c

	arm_func_start caseD_1d
caseD_1d: ; 0x0204F918
	b _0204FB0C
	arm_func_end caseD_1d

	arm_func_start caseD_1e
caseD_1e: ; 0x0204F91C
	b _0204F9F4
	arm_func_end caseD_1e

	arm_func_start caseD_1f
caseD_1f: ; 0x0204F920
	b _0204F9FC
	arm_func_end caseD_1f

	arm_func_start caseD_20
caseD_20: ; 0x0204F924
	b _0204FA04
	arm_func_end caseD_20

	arm_func_start caseD_21
caseD_21: ; 0x0204F928
	b _0204FA0C
	arm_func_end caseD_21

	arm_func_start caseD_22
caseD_22: ; 0x0204F92C
	b _0204FA14
	arm_func_end caseD_22

	arm_func_start caseD_23
caseD_23: ; 0x0204F930
	b _0204FA4C
	arm_func_end caseD_23

	arm_func_start caseD_24
caseD_24: ; 0x0204F934
	b _0204FA84
	arm_func_end caseD_24

	arm_func_start caseD_25
caseD_25: ; 0x0204F938
	b _0204FB0C
	arm_func_end caseD_25

	arm_func_start caseD_26
caseD_26: ; 0x0204F93C
	b _0204FB0C
	arm_func_end caseD_26

	arm_func_start caseD_27
caseD_27: ; 0x0204F940
	b _0204FB0C
	arm_func_end caseD_27

	arm_func_start caseD_28
caseD_28: ; 0x0204F944
	b _0204FABC
	arm_func_end caseD_28

	arm_func_start caseD_29
caseD_29: ; 0x0204F948
	b _0204FAC4
	arm_func_end caseD_29

	arm_func_start caseD_2a
caseD_2a: ; 0x0204F94C
	b _0204FAD0
	arm_func_end caseD_2a

	arm_func_start caseD_2b
caseD_2b: ; 0x0204F950
	b _0204FAE4
	arm_func_end caseD_2b
LAB_0204f954:
	mov r0, ip
	pop {r3, pc}
_0204F95C:
	mov r1, ip
	mov r2, #0x22
	bl FUN_0204f7c0
	pop {r3, pc}
_0204F96C:
	mov r1, ip
	mov r2, #0x23
	bl FUN_0204f7c0
	pop {r3, pc}
_0204F97C:
	mov r1, ip
	mov r2, #0x21
	bl FUN_0204f7c0
	pop {r3, pc}
_0204F98C:
	mov r1, ip
	mov r2, #0x20
	bl FUN_0204f7c0
	pop {r3, pc}
_0204F99C:
	mov r1, ip
	mov r2, #0x24
	bl FUN_0204f7c0
	pop {r3, pc}
_0204F9AC:
	mov r1, ip
	mov r2, #0x1e
	bl FUN_0204f7c0
	pop {r3, pc}
_0204F9BC:
	mov r1, ip
	mov r2, #0x1f
	bl FUN_0204f7c0
	pop {r3, pc}
_0204F9CC:
	ldr r0, [lr, #0x4d4]
	pop {r3, pc}
_0204F9D4:
	ldr r0, [lr, #0x4d8]
	pop {r3, pc}
_0204F9DC:
	mov r1, ip
	bl FUN_0207371c
	pop {r3, pc}
_0204F9E8:
	mov r1, #1
	bl FUN_0207371c
	pop {r3, pc}
_0204F9F4:
	ldr r0, [lr, #0x550]
	pop {r3, pc}
_0204F9FC:
	ldr r0, [lr, #0x554]
	pop {r3, pc}
_0204FA04:
	ldr r0, [lr, #0x558]
	pop {r3, pc}
_0204FA0C:
	ldr r0, [lr, #0x55c]
	pop {r3, pc}
_0204FA14:
	ldr r0, [lr, #0x550]
	ldr lr, [lr, #0x55c]
	adds r2, r0, lr
	moveq r0, ip
	popeq {r3, pc}
	mov r3, #0x64
	umull r0, r1, lr, r3
	mla r1, lr, ip, r1
	asr ip, lr, #0x1f
	mla r1, ip, r3, r1
	asr r3, r2, #0x1f
	bl FUN_0201f954
	and r0, r0, #0xff
	pop {r3, pc}
_0204FA4C:
	ldr r2, [lr, #0x550]
	cmp r2, #0
	moveq r0, ip
	popeq {r3, pc}
	ldr lr, [lr, #0x554]
	mov r3, #0x64
	umull r0, r1, lr, r3
	mla r1, lr, ip, r1
	asr ip, lr, #0x1f
	mla r1, ip, r3, r1
	asr r3, r2, #0x1f
	bl FUN_0201f954
	and r0, r0, #0xff
	pop {r3, pc}
_0204FA84:
	ldr r2, [lr, #0x550]
	cmp r2, #0
	moveq r0, ip
	popeq {r3, pc}
	ldr lr, [lr, #0x558]
	mov r3, #0x64
	umull r0, r1, lr, r3
	mla r1, lr, ip, r1
	asr ip, lr, #0x1f
	mla r1, ip, r3, r1
	asr r3, r2, #0x1f
	bl FUN_0201f954
	and r0, r0, #0xff
	pop {r3, pc}
_0204FABC:
	ldrb r0, [lr, #0x50b]
	pop {r3, pc}
_0204FAC4:
	ldr r0, _0204FB18 ; =0x020A0B40
	ldrh r0, [r0, #0x4e]
	pop {r3, pc}
_0204FAD0:
	ldr r2, [lr, #0x4dc]
	ldr r0, _0204FB1C ; =0x91A2B3C5
	umull r1, r0, r2, r0
	lsr r0, r0, #0xb
	pop {r3, pc}
_0204FAE4:
	ldr r2, [lr, #0x550]
	cmp r2, #0
	moveq r0, ip
	popeq {r3, pc}
	ldr r0, [lr, #0x560]
	asr r3, r2, #0x1f
	asr r1, r0, #0x1f
	bl FUN_0201f954
	and r0, r0, #0xff
	pop {r3, pc}
_0204FB0C:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_0204FB14: .word 0x020A0640
_0204FB18: .word 0x020A0B40
_0204FB1C: .word 0x91A2B3C5

	arm_func_start FUN_0204fb20
FUN_0204fb20: ; 0x0204FB20
	ldr r2, [r0, #0x820]
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	ldr r0, _0204FB54 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	moveq r0, #0
	bxeq lr
	ldrsh r1, [r1, #0x94]
	mov r0, #0x44
	smlabb r0, r1, r0, r2
	bx lr
	.align 2, 0_0204FB54: .word 0x02099EF0
	arm_func_end FUN_0204fb20

	arm_func_start FUN_0204fb58
FUN_0204fb58: ; 0x0204FB58
	ldr r0, [r0, #0x820]
	bx lr
	arm_func_end FUN_0204fb58

	arm_func_start FUN_0204fb60
FUN_0204fb60: ; 0x0204FB60
	ldrb r0, [r0, #0x5d]
	asr r0, r0, #5
	bx lr
	arm_func_end FUN_0204fb60

	arm_func_start FUN_0204fb6c
FUN_0204fb6c: ; 0x0204FB6C
	ldrb r0, [r0, #0x5d]
	and r0, r0, #0x1f
	bx lr
	arm_func_end FUN_0204fb6c

	arm_func_start FUN_0204fb78
FUN_0204fb78: ; 0x0204FB78
	ldr ip, _0204FB88 ; =MemWrite
	mov r1, #0
	mov r2, #0x20
	bx ip
	.align 2, 0_0204FB88: .word MemWrite
	arm_func_end FUN_0204fb78

	arm_func_start FUN_0204fb8c
FUN_0204fb8c: ; 0x0204FB8C
	push {r4, lr}
	cmp r1, #0
	poplt {r4, pc}
	cmp r1, #0x10
	popge {r4, pc}
	ldr r3, _0204FBE4 ; =0x00000FFF
	tst r2, r3
	moveq r2, #0
	cmp r2, #0
	beq _0204FBD8
	mov r4, #0
	mov r3, r4
	arm_func_end FUN_0204fb8c
_0204FBBC:
	lsl lr, r4, #1
	ldrh ip, [r0, lr]
	add r4, r4, #1
	cmp r2, ip
	strheq r3, [r0, lr]
	cmp r4, #0x10
	blt _0204FBBC
_0204FBD8:
	lsl r1, r1, #1
	strh r2, [r0, r1]
	pop {r4, pc}
	.align 2, 0_0204FBE4: .word 0x00000FFF

	arm_func_start FUN_0204fbe8
FUN_0204fbe8: ; 0x0204FBE8
	cmp r1, #0x10
	movhs r0, #0
	lsllo r1, r1, #1
	ldrhlo r0, [r0, r1]
	bx lr
	arm_func_end FUN_0204fbe8

	arm_func_start FUN_0204fbfc
FUN_0204fbfc: ; 0x0204FBFC
	cmp r1, #0x10
	movhs r0, #0
	bxhs lr
	lsl r1, r1, #1
	ldrh r1, [r0, r1]
	ldr r0, _0204FC24 ; =0x00000FFF
	and r0, r1, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0_0204FC24: .word 0x00000FFF
	arm_func_end FUN_0204fbfc

	arm_func_start FUN_0204fc28
FUN_0204fc28: ; 0x0204FC28
	push {r3, r4, r5, r6, r7, lr}
	sub r4, r1, #1
	mov r7, r0
	mov r1, r4
	sub r5, r2, #1
	bl FUN_0204fbe8
	mov r6, r0
	mov r0, r7
	mov r1, r5
	bl FUN_0204fbe8
	mov r2, r0
	cmp r4, #0x10
	movhs r0, #0
	pophs {r3, r4, r5, r6, r7, pc}
	cmp r5, #0x10
	movhs r0, #0
	pophs {r3, r4, r5, r6, r7, pc}
	cmp r6, #0
	cmpeq r2, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	mov r1, r4
	bl FUN_0204fb8c
	mov r0, r7
	mov r1, r5
	mov r2, r6
	bl FUN_0204fb8c
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0204fc28

	arm_func_start FUN_0204fca0
FUN_0204fca0: ; 0x0204FCA0
	mov r3, #0
	arm_func_end FUN_0204fca0
_0204FCA4:
	lsl r2, r3, #1
	ldrh r2, [r0, r2]
	cmp r2, #0
	beq _0204FCC0
	cmp r1, r2
	moveq r0, #1
	bxeq lr
_0204FCC0:
	add r3, r3, #1
	cmp r3, #0x10
	blt _0204FCA4
	mov r0, #0
	bx lr

	arm_func_start FUN_0204fcd4
FUN_0204fcd4: ; 0x0204FCD4
	ldr r2, _0204FD1C ; =0x00000FFF
	mov r3, #0
	and r1, r1, r2
	lsl r1, r1, #0x10
	lsr ip, r1, #0x10
	arm_func_end FUN_0204fcd4
_0204FCE8:
	lsl r1, r3, #1
	ldrh r1, [r0, r1]
	cmp r1, #0
	beq _0204FD08
	and r1, r1, r2
	cmp ip, r1
	moveq r0, #1
	bxeq lr
_0204FD08:
	add r3, r3, #1
	cmp r3, #0x10
	blt _0204FCE8
	mov r0, #0
	bx lr
	.align 2, 0_0204FD1C: .word 0x00000FFF

	arm_func_start FUN_0204fd20
FUN_0204fd20: ; 0x0204FD20
	ldr r2, _0204FD64 ; =0x00000FFF
	mov r3, #0
	and r1, r1, r2
	lsl r1, r1, #0x10
	lsr ip, r1, #0x10
	arm_func_end FUN_0204fd20
_0204FD34:
	lsl r1, r3, #1
	ldrh r1, [r0, r1]
	ands r1, r1, r2
	beq _0204FD50
	cmp ip, r1
	addeq r0, r3, #1
	bxeq lr
_0204FD50:
	add r3, r3, #1
	cmp r3, #0x10
	blt _0204FD34
	mov r0, #0
	bx lr
	.align 2, 0_0204FD64: .word 0x00000FFF

	arm_func_start FUN_0204fd68
FUN_0204fd68: ; 0x0204FD68
	ldr r2, _0204FDA0 ; =0x00000FFF
	mov ip, #0
	arm_func_end FUN_0204fd68
_0204FD70:
	lsl r3, ip, #1
	ldrh r3, [r0, r3]
	tst r3, r2
	beq _0204FD8C
	cmp r1, r3
	addeq r0, ip, #1
	bxeq lr
_0204FD8C:
	add ip, ip, #1
	cmp ip, #0x10
	blt _0204FD70
	mov r0, #0
	bx lr
	.align 2, 0_0204FDA0: .word 0x00000FFF

	arm_func_start FUN_0204fda4
FUN_0204fda4: ; 0x0204FDA4
	push {r4, r5, r6, lr}
	mov r5, #0
	mov r6, r0
	mov r4, r5
	arm_func_end FUN_0204fda4
_0204FDB4:
	lsl r0, r5, #1
	ldrh r0, [r6, r0]
	cmp r0, #0
	beq _0204FDD8
	mov r1, r4
	bl FUN_020EFA9C
	cmp r0, #0
	lsleq r0, r5, #1
	strheq r4, [r6, r0]
_0204FDD8:
	lsl r0, r5, #1
	ldrh r0, [r6, r0]
	cmp r0, #0
	addeq r0, r5, #1
	popeq {r4, r5, r6, pc}
	add r5, r5, #1
	cmp r5, #0x10
	blt _0204FDB4
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0204fe00
FUN_0204fe00: ; 0x0204FE00
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	mov r7, r0
	mov r5, r6
	mov r4, r6
	arm_func_end FUN_0204fe00
_0204FE14:
	mov r0, r7
	mov r1, r5
	bl FUN_0204fbe8
	mov r1, r4
	bl FUN_020EFA9C
	cmp r0, #0
	addne r0, r6, #1
	add r5, r5, #1
	andne r6, r0, #0xff
	cmp r5, #0xb
	blt _0204FE14
	mov r0, r6
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204fe48
FUN_0204fe48: ; 0x0204FE48
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	mov r7, r0
	mov r5, r6
	mov r4, r6
	arm_func_end FUN_0204fe48
_0204FE5C:
	mov r0, r7
	mov r1, r5
	bl FUN_0204fbe8
	mov r1, r4
	bl FUN_020EFA9C
	cmp r0, #0
	addne r0, r6, #1
	add r5, r5, #1
	andne r6, r0, #0xff
	cmp r5, #0x10
	blt _0204FE5C
	mov r0, r6
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204fe90
FUN_0204fe90: ; 0x0204FE90
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	mov r7, r0
	mov r5, r6
	mov r4, r6
	arm_func_end FUN_0204fe90
_0204FEA4:
	mov r0, r7
	mov r1, r5
	bl FUN_02050244
	mov r1, r4
	bl FUN_020EFA9C
	cmp r0, #0
	addne r0, r6, #1
	add r5, r5, #1
	andne r6, r0, #0xff
	cmp r5, #4
	blt _0204FEA4
	mov r0, r6
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0204fed8
FUN_0204fed8: ; 0x0204FED8
	mov r3, #0
	arm_func_end FUN_0204fed8
_0204FEDC:
	add r2, r0, r3
	ldrb r2, [r2, #0xa]
	cmp r1, r2
	lsleq r1, r3, #1
	ldrheq r0, [r0, r1]
	bxeq lr
	add r3, r3, #1
	cmp r3, #0x10
	blt _0204FEDC
	mov r0, #0
	bx lr

	arm_func_start FUN_0204ff08
FUN_0204ff08: ; 0x0204FF08
	stmdb sp!, {r3}
	sub sp, sp, #4
	mov r3, #0
	add r1, sp, #0
	strb r3, [r1]
	strb r3, [r1, #1]
	strb r3, [r1, #2]
	strb r3, [r1, #3]
	mov r2, r3
	arm_func_end FUN_0204ff08
_0204FF2C:
	lsl r1, r3, #1
	ldrh r1, [r0, r1]
	cmp r1, #0
	addeq r1, r0, r3
	add r3, r3, #1
	strbeq r2, [r1, #0xa]
	cmp r3, #4
	blt _0204FF2C
	mov ip, #0
	mov r3, #1
	add r2, sp, #0
_0204FF58:
	add r1, r0, ip
	ldrb r1, [r1, #0xa]
	add ip, ip, #1
	cmp r1, #0
	addne r1, r2, r1
	strbne r3, [r1, #-1]
	cmp ip, #4
	blt _0204FF58
	mov r2, #0
	add r1, sp, #0
_0204FF80:
	ldrb r0, [r1, r2]
	cmp r0, #0
	addeq sp, sp, #4
	addeq r0, r2, #1
	ldmeq sp!, {r3}
	bxeq lr
	add r2, r2, #1
	cmp r2, #4
	blt _0204FF80
	mov r0, #0
	add sp, sp, #4
	ldm sp!, {r3}
	bx lr

	arm_func_start FUN_0204ffb4
FUN_0204ffb4: ; 0x0204FFB4
	cmp r1, #0
	ble _0204FFC4
	cmp r1, #5
	blt _0204FFCC
	arm_func_end FUN_0204ffb4
_0204FFC4:
	mov r0, #0
	bx lr
_0204FFCC:
	mov r3, #0
_0204FFD0:
	add r2, r0, r3
	ldrb r2, [r2, #0xa]
	cmp r1, r2
	moveq r0, #0
	bxeq lr
	add r3, r3, #1
	cmp r3, #4
	blt _0204FFD0
	mov r0, #1
	bx lr

	arm_func_start FUN_0204fff8
FUN_0204fff8: ; 0x0204FFF8
	ldr r2, _02050034 ; =0x00000FFF
	tst r1, r2
	subeq r0, r2, #0x1000
	bxeq lr
	mov r3, #0
	arm_func_end FUN_0204fff8
_0205000C:
	lsl r2, r3, #1
	ldrh r2, [r0, r2]
	cmp r1, r2
	moveq r0, r3
	bxeq lr
	add r3, r3, #1
	cmp r3, #4
	blt _0205000C
	mvn r0, #0
	bx lr
	.align 2, 0_02050034: .word 0x00000FFF

	arm_func_start FUN_02050038
FUN_02050038: ; 0x02050038
	mov r2, #0
	arm_func_end FUN_02050038
_0205003C:
	lsl r1, r2, #1
	ldrh r1, [r0, r1]
	cmp r1, #0
	moveq r0, r2
	bxeq lr
	add r2, r2, #1
	cmp r2, #4
	blt _0205003C
	mvn r0, #0
	bx lr

	arm_func_start FUN_02050064
FUN_02050064: ; 0x02050064
	push {r4, r5, r6, r7, r8, lr}
	mvn r4, #0
	mov r7, r1
	mov r8, r0
	mov r6, r2
	mov r5, r4
	mov r1, #0
	arm_func_end FUN_02050064
_02050080:
	add r0, r8, r1
	ldrb r0, [r0, #0xa]
	cmp r7, r0
	moveq r4, r1
	add r1, r1, #1
	cmp r1, #4
	blt _02050080
	mov r1, #0
_020500A0:
	add r0, r8, r1
	ldrb r0, [r0, #0xa]
	cmp r6, r0
	moveq r5, r1
	add r1, r1, #1
	cmp r1, #4
	blt _020500A0
	mvn r0, #0
	cmp r4, r0
	bne _020500F4
	cmp r5, r0
	beq _020500F4
	mov r0, r8
	mov r1, r5
	bl FUN_02050244
	mov r2, r0
	mov r0, r8
	mov r1, r5
	mov r3, r7
_020500EC:
	bl FUN_020501bc
	b _0205013C
_020500F4:
	mvn r0, #0
	cmp r4, r0
	beq _02050128
	cmp r5, r0
	bne _02050128
	mov r0, r8
	mov r1, r4
	bl FUN_02050244
	mov r2, r0
	mov r0, r8
	mov r1, r4
	mov r3, r6
	b _020500EC
_02050128:
	add r2, r8, #0xa
	ldrb r1, [r2, r4]
	ldrb r0, [r2, r5]
	strb r0, [r2, r4]
	strb r1, [r2, r5]
_0205013C:
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02050144
FUN_02050144: ; 0x02050144
	push {r4, r5, r6, lr}
	movs r5, r1
	mov r6, r0
	mov r4, r2
	popmi {r4, r5, r6, pc}
	cmp r5, #4
	popge {r4, r5, r6, pc}
	lsl r1, r5, #1
	ldrh r1, [r6, r1]
	cmp r1, #0
	popeq {r4, r5, r6, pc}
	mov r1, r4
	bl FUN_0204ffb4
	cmp r0, #0
	add r0, r6, r5
	strbne r4, [r0, #0xa]
	popne {r4, r5, r6, pc}
	ldrb r1, [r0, #0xa]
	mov r0, r6
	mov r2, r4
	bl FUN_02050064
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02050144

	arm_func_start FUN_0205019c
FUN_0205019c: ; 0x0205019C
	push {r4, lr}
	mov r4, r0
	bl FUN_0204fff8
	cmp r0, #0
	movlt r0, #0
	addge r0, r4, r0
	ldrbge r0, [r0, #0xa]
	pop {r4, pc}
	arm_func_end FUN_0205019c

	arm_func_start FUN_020501bc
FUN_020501bc: ; 0x020501BC
	push {r4, r5, r6, lr}
	movs r5, r1
	mov r6, r0
	mov r4, r2
	popmi {r4, r5, r6, pc}
	cmp r5, #4
	popge {r4, r5, r6, pc}
	ldr r0, _02050240 ; =0x00000FFF
	mov r2, #0
	tst r4, r0
	moveq r4, #0
	arm_func_end FUN_020501bc
_020501E8:
	lsl r1, r2, #1
	ldrh r0, [r6, r1]
	cmp r4, r0
	moveq r0, #0
	strheq r0, [r6, r1]
	beq _0205020C
	add r2, r2, #1
	cmp r2, #4
	blt _020501E8
_0205020C:
	cmp r3, #0
	bne _0205022C
	mov r0, r6
	lsl r1, r5, #1
	mov r2, #0
	strh r2, [r6, r1]
	bl FUN_0204ff08
	mov r3, r0
_0205022C:
	lsl r0, r5, #1
	strh r4, [r6, r0]
	add r0, r6, r5
	strb r3, [r0, #0xa]
	pop {r4, r5, r6, pc}
	.align 2, 0_02050240: .word 0x00000FFF

	arm_func_start FUN_02050244
FUN_02050244: ; 0x02050244
	cmp r1, #4
	movhs r0, #0
	lsllo r1, r1, #1
	ldrhlo r0, [r0, r1]
	bx lr
	arm_func_end FUN_02050244

	arm_func_start FUN_02050258
FUN_02050258: ; 0x02050258
	cmp r1, #4
	movhs r0, #0
	bxhs lr
	lsl r1, r1, #1
	ldrh r1, [r0, r1]
	ldr r0, _02050280 ; =0x00000FFF
	and r0, r1, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0_02050280: .word 0x00000FFF
	arm_func_end FUN_02050258

	arm_func_start FUN_02050284
FUN_02050284: ; 0x02050284
	ldrh r0, [r0, #8]
	bx lr
	arm_func_end FUN_02050284

	arm_func_start FUN_0205028c
FUN_0205028c: ; 0x0205028C
	ldrh r1, [r0, #8]
	ldr r0, _020502A4 ; =0x00000FFF
	and r0, r1, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0_020502A4: .word 0x00000FFF
	arm_func_end FUN_0205028c

	arm_func_start FUN_020502a8
FUN_020502a8: ; 0x020502A8
	mov r3, #0
	arm_func_end FUN_020502a8
_020502AC:
	lsl r2, r3, #1
	ldrh r2, [r0, r2]
	cmp r2, #0
	beq _020502C8
	cmp r1, r2
	moveq r0, #1
	bxeq lr
_020502C8:
	add r3, r3, #1
	cmp r3, #4
	blt _020502AC
	mov r0, #0
	bx lr

	arm_func_start FUN_020502dc
FUN_020502dc: ; 0x020502DC
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x20
	bl FUN_0206d3c8
	pop {r3, pc}
	arm_func_end FUN_020502dc

	arm_func_start FUN_02050300
FUN_02050300: ; 0x02050300
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x20
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_02050300

	arm_func_start FUN_02050324
FUN_02050324: ; 0x02050324
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r5, #0
	mov r7, r0
	mov r0, r6
	mov r1, r5
	bl FUN_020EFA9C
	movs r4, r0
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_0206d4b4
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	mov r1, #0x40
	bl FUN_0206d3c8
	mov r0, r7
	mov r1, r5
	mov r2, r6
	bl FUN_0204d2a4
	mov r0, r7
	mov r1, r6
	bl FUN_0204d6a8
	mov r0, r7
	mov r2, r6
	mov r1, r5
	bl FUN_0204d354
	mov r0, r4
	mov r1, r5
	mov r2, r5
	bl FUN_0206d9cc
	mov r1, r5
	mov r0, r7
	bl FUN_0204d0b4
	mov r0, r7
	mov r1, #2
	bl FUN_0204d0b4
	mov r0, r7
	bl FUN_0204ce50
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02050324

	arm_func_start FUN_020503c0
FUN_020503c0: ; 0x020503C0
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x40
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_020503c0

	arm_func_start FUN_020503e4
FUN_020503e4: ; 0x020503E4
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r4, #0
	mov r7, r0
	mov r0, r6
	mov r1, r4
	bl FUN_020EFA9C
	mov r5, r0
	mov r0, r7
	mov r1, r4
	bl FUN_0205107c
	cmp r5, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, r6
	bl FUN_0204fca0
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r5
	bl FUN_0206d4a4
	cmp r0, #0
	beq _02050444
	mov r0, r5
	mov r1, #0x400
	bl FUN_0206d3fc
	arm_func_end FUN_020503e4
_02050444:
	mov r0, r5
	bl FUN_0206d484
	cmp r0, #0
	beq _02050460
	mov r0, r5
	mov r1, #0x100
	bl FUN_0206d3fc
_02050460:
	mov r0, r5
	mov r1, #0x80
	bl FUN_0206d3c8
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02050470
FUN_02050470: ; 0x02050470
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x80
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_02050470

	arm_func_start FUN_02050494
FUN_02050494: ; 0x02050494
	push {r4, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	movs r4, r0
	popeq {r4, pc}
	bl FUN_0206d474
	cmp r0, #0
	beq _020504C4
	mov r0, r4
	mov r1, #0x80
	bl FUN_0206d3fc
	arm_func_end FUN_02050494
_020504C4:
	mov r0, r4
	mov r1, #0x100
	bl FUN_0206d3c8
	pop {r4, pc}

	arm_func_start FUN_020504d4
FUN_020504d4: ; 0x020504D4
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x100
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_020504d4

	arm_func_start FUN_020504f8
FUN_020504f8: ; 0x020504F8
	push {r4, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	movs r4, r0
	popeq {r4, pc}
	bl FUN_0206d484
	cmp r0, #0
	popeq {r4, pc}
	mov r0, r4
	mov r1, #0x200
	bl FUN_0206d3c8
	pop {r4, pc}
	arm_func_end FUN_020504f8

	arm_func_start FUN_0205052c
FUN_0205052c: ; 0x0205052C
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x200
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_0205052c

	arm_func_start FUN_02050550
FUN_02050550: ; 0x02050550
	push {r4, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	movs r4, r0
	popeq {r4, pc}
	bl FUN_0206d484
	cmp r0, #0
	popeq {r4, pc}
	mov r0, r4
	mov r1, #1
	bl FUN_0206d3c8
	pop {r4, pc}
	arm_func_end FUN_02050550

	arm_func_start FUN_02050584
FUN_02050584: ; 0x02050584
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #1
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_02050584

	arm_func_start FUN_020505a8
FUN_020505a8: ; 0x020505A8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r4, #0
	mov r7, r0
	mov r0, r6
	mov r1, r4
	bl FUN_020EFA9C
	mov r5, r0
	mov r0, r7
	mov r1, r4
	bl FUN_0205106c
	cmp r5, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, r6
	bl FUN_020502a8
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r5
	bl FUN_0206d474
	cmp r0, #0
	beq _02050608
	mov r0, r5
	mov r1, #0x80
	bl FUN_0206d3fc
	arm_func_end FUN_020505a8
_02050608:
	mov r0, r5
	mov r1, #0x400
	bl FUN_0206d3c8
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02050618
FUN_02050618: ; 0x02050618
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x400
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_02050618

	arm_func_start FUN_0205063c
FUN_0205063c: ; 0x0205063C
	push {r4, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	movs r4, r0
	popeq {r4, pc}
	bl FUN_0206d4a4
	cmp r0, #0
	popeq {r4, pc}
	mov r0, r4
	mov r1, #0x800
	bl FUN_0206d3c8
	pop {r4, pc}
	arm_func_end FUN_0205063c

	arm_func_start FUN_02050670
FUN_02050670: ; 0x02050670
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x800
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_02050670

	arm_func_start FUN_02050694
FUN_02050694: ; 0x02050694
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x1000
	bl FUN_0206d3c8
	pop {r3, pc}
	arm_func_end FUN_02050694

	arm_func_start FUN_020506b8
FUN_020506b8: ; 0x020506B8
	push {r3, lr}
	mov r0, r1
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	popeq {r3, pc}
	mov r1, #0x1000
	bl FUN_0206d3fc
	pop {r3, pc}
	arm_func_end FUN_020506b8

	arm_func_start FUN_020506dc
FUN_020506dc: ; 0x020506DC
	cmp r1, #0
	ble _020506EC
	cmp r1, #0x63
	ble _020506F4
	arm_func_end FUN_020506dc
_020506EC:
	mov r0, #0
	bx lr
_020506F4:
	cmp r1, #1
	moveq r0, #0
	subne r1, r1, #2
	ldrne r0, [r0, r1, lsl #2]
	bx lr

	arm_func_start FUN_02050708
FUN_02050708: ; 0x02050708
	cmp r1, #0
	ble _02050718
	cmp r1, #0x63
	ble _02050720
	arm_func_end FUN_02050708
_02050718:
	mov r0, #0
	bx lr
_02050720:
	sub r1, r1, #1
	ldrb r0, [r0, r1]
	bx lr

	arm_func_start FUN_0205072c
FUN_0205072c: ; 0x0205072C
	ldr ip, _0205073C ; =MemWrite
	mov r1, #0
	mov r2, #0x148
	bx ip
	.align 2, 0_0205073C: .word MemWrite
	arm_func_end FUN_0205072c

	arm_func_start FUN_02050740
FUN_02050740: ; 0x02050740
	and r2, r1, #7
	mov r3, #1
	cmp r1, #0
	lsl r2, r3, r2
	bxlt lr
	cmp r1, #0xa40
	ldrbls r3, [r0, r1, asr #3]
	andls r2, r2, #0xff
	orrls r2, r3, r2
	strbls r2, [r0, r1, asr #3]
	bx lr
	arm_func_end FUN_02050740

	arm_func_start FUN_0205076c
FUN_0205076c: ; 0x0205076C
	and r2, r1, #7
	mov r3, #1
	cmp r1, #0
	lsl r2, r3, r2
	bxlt lr
	cmp r1, #0xa40
	eorls r2, r2, #0xff
	ldrbls r3, [r0, r1, asr #3]
	andls r2, r2, #0xff
	andls r2, r3, r2
	strbls r2, [r0, r1, asr #3]
	bx lr
	arm_func_end FUN_0205076c

	arm_func_start FUN_0205079c
FUN_0205079c: ; 0x0205079C
	cmp r1, #0
	and r2, r1, #7
	mov r3, #1
	blt _020507B4
	cmp r1, #0xa40
	bls _020507BC
	arm_func_end FUN_0205079c
_020507B4:
	mov r0, #0
	bx lr
_020507BC:
	ldrb r0, [r0, r1, asr #3]
	tst r0, r3, lsl r2
	moveq r3, #0
	mov r0, r3
	bx lr

	arm_func_start FUN_020507d0
FUN_020507d0: ; 0x020507D0
	push {r4, lr}
	mov r4, r0
	lsl r1, r1, #0x10
	ldr r0, _0205081C ; =0x0209BA20
	lsr r1, r1, #0x10
	bl FUN_0204bc4c
	and r1, r0, #7
	mov r2, #1
	cmp r0, #0
	lsl r2, r2, r1
	poplt {r4, pc}
	cmp r0, #0xa40
	pophi {r4, pc}
	ldrb r1, [r4, r0, asr #3]
	and r2, r2, #0xff
	tst r2, r1
	orreq r1, r1, r2
	strbeq r1, [r4, r0, asr #3]
	pop {r4, pc}
	.align 2, 0_0205081C: .word 0x0209BA20
	arm_func_end FUN_020507d0

	arm_func_start FUN_02050820
FUN_02050820: ; 0x02050820
	cmp r1, #0
	and r2, r1, #7
	mov r3, #1
	blt _02050838
	cmp r1, #0xa40
	bls _02050840
	arm_func_end FUN_02050820
_02050838:
	mov r0, #0
	bx lr
_02050840:
	ldrb r0, [r0, r1, asr #3]
	tst r0, r3, lsl r2
	moveq r3, #0
	mov r0, r3
	bx lr

	arm_func_start FUN_02050854
FUN_02050854: ; 0x02050854
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x68
	mov r6, r1
	lsl r1, r6, #0x10
	ldr r5, _020508F4 ; =0x0209BA20
	mov r7, r0
	mov r0, r5
	lsr r1, r1, #0x10
	bl FUN_0204bc4c
	cmp r0, #0
	and r1, r0, #7
	mov r4, #1
	addlt sp, sp, #0x68
	lsl r2, r4, r1
	poplt {r3, r4, r5, r6, r7, pc}
	cmp r0, #0xa40
	addhi sp, sp, #0x68
	pophi {r3, r4, r5, r6, r7, pc}
	ldrb r1, [r7, r0, asr #3]
	and r2, r2, #0xff
	tst r2, r1
	addne sp, sp, #0x68
	popne {r3, r4, r5, r6, r7, pc}
	orr r2, r1, r2
	strb r2, [r7, r0, asr #3]
	lsl r1, r6, #0x10
	add r2, sp, #0
	mov r0, r5
	lsr r1, r1, #0x10
	bl FUN_0204bd64
	ldrb r0, [sp, #0x4d]
	cmp r0, #1
	addne sp, sp, #0x68
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, _020508F8 ; =0x020A0EF8
	mov r1, r6
	mov r2, r4
	bl FUN_02050a0c
	add sp, sp, #0x68
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020508F4: .word 0x0209BA20
_020508F8: .word 0x020A0EF8
	arm_func_end FUN_02050854

	arm_func_start FUN_020508fc
FUN_020508fc: ; 0x020508FC
	cmp r1, #0
	and r2, r1, #7
	mov r3, #1
	blt _02050914
	cmp r1, #0xa40
	bls _0205091C
	arm_func_end FUN_020508fc
_02050914:
	mov r0, #0
	bx lr
_0205091C:
	ldrb r0, [r0, r1, asr #3]
	tst r0, r3, lsl r2
	moveq r3, #0
	mov r0, r3
	bx lr

	arm_func_start FUN_02050930
FUN_02050930: ; 0x02050930
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x68
	mov r6, r1
	lsl r1, r6, #0x10
	ldr r5, _020509D0 ; =0x0209BA20
	mov r7, r0
	mov r0, r5
	lsr r1, r1, #0x10
	bl FUN_0204bc4c
	cmp r0, #0
	and r1, r0, #7
	mov r4, #1
	addlt sp, sp, #0x68
	lsl r2, r4, r1
	poplt {r3, r4, r5, r6, r7, pc}
	cmp r0, #0xa40
	addhi sp, sp, #0x68
	pophi {r3, r4, r5, r6, r7, pc}
	ldrb r1, [r7, r0, asr #3]
	and r2, r2, #0xff
	tst r2, r1
	addne sp, sp, #0x68
	popne {r3, r4, r5, r6, r7, pc}
	orr r2, r1, r2
	strb r2, [r7, r0, asr #3]
	lsl r1, r6, #0x10
	add r2, sp, #0
	mov r0, r5
	lsr r1, r1, #0x10
	bl FUN_0204bd64
	ldrb r0, [sp, #0x4d]
	cmp r0, #1
	addne sp, sp, #0x68
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, _020509D4 ; =0x020A0EF8
	mov r1, r6
	mov r2, r4
	bl FUN_02050a0c
	add sp, sp, #0x68
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020509D0: .word 0x0209BA20
_020509D4: .word 0x020A0EF8
	arm_func_end FUN_02050930

	arm_func_start FUN_020509d8
FUN_020509d8: ; 0x020509D8
	cmp r1, #0
	and r2, r1, #7
	mov r3, #1
	blt _020509F0
	cmp r1, #0xa40
	bls _020509F8
	arm_func_end FUN_020509d8
_020509F0:
	mov r0, #0
	bx lr
_020509F8:
	ldrb r0, [r0, r1, asr #3]
	tst r0, r3, lsl r2
	moveq r3, #0
	mov r0, r3
	bx lr

	arm_func_start FUN_02050a0c
FUN_02050a0c: ; 0x02050A0C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x68
	mov sb, r1
	lsl r1, sb, #0x10
	ldr r6, _02050B14 ; =0x0209BA20
	mov sl, r0
	mov r0, r6
	lsr r1, r1, #0x10
	mov r8, r2
	bl FUN_0204bc4c
	movs r5, r0
	and r0, r5, #7
	mov r1, #1
	lsl r7, r1, r0
	addmi sp, sp, #0x68
	popmi {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r5, #0xa40
	addhi sp, sp, #0x68
	pophi {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrb r0, [sl, r5, asr #3]
	and r1, r7, #0xff
	ldr r4, _02050B18 ; =0x020A108A
	tst r1, r0
	addne sp, sp, #0x68
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	lsl r1, sb, #0x10
	add r2, sp, #0
	mov r0, r6
	lsr r1, r1, #0x10
	bl FUN_0204bd64
	ldrb r0, [sp, #0x4d]
	lsl r1, sb, #0x10
	lsr r1, r1, #0x10
	cmp r0, #1
	mov r0, r6
	bne _02050AE4
	bl FUN_0204ec70
	cmp r0, #0
	beq _02050AFC
	add r1, sp, #0x1c
	mov r0, r6
	bl FUN_02073a1c
	and r6, r0, #0xff
	mov r0, r4
	mov r1, r5
	bl FUN_020509d8
	cmp r0, #0
	bne _02050AD4
	cmp r8, #0
	beq _02050AFC
	arm_func_end FUN_02050a0c
_02050AD4:
	mov r0, sl
	mov r1, r6
	bl FUN_02050c10
	b _02050AFC
_02050AE4:
	bl FUN_0204ec70
	cmp r0, #0
	beq _02050AFC
	ldrb r1, [sp, #0x4d]
	mov r0, sl
	bl FUN_02050c30
_02050AFC:
	ldrb r1, [sl, r5, asr #3]
	and r0, r7, #0xff
	orr r0, r1, r0
	strb r0, [sl, r5, asr #3]
	add sp, sp, #0x68
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02050B14: .word 0x0209BA20
_02050B18: .word 0x020A108A

	arm_func_start FUN_02050b1c
FUN_02050b1c: ; 0x02050B1C
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x68
	mov r7, r1
	lsl r1, r7, #0x10
	ldr r5, _02050BD8 ; =0x0209BA20
	mov r8, r0
	mov r0, r5
	lsr r1, r1, #0x10
	bl FUN_0204bc4c
	movs r4, r0
	and r0, r4, #7
	mov r1, #1
	lsl r6, r1, r0
	addmi sp, sp, #0x68
	popmi {r4, r5, r6, r7, r8, pc}
	cmp r4, #0xa40
	addhi sp, sp, #0x68
	pophi {r4, r5, r6, r7, r8, pc}
	ldrb r0, [r8, r4, asr #3]
	and r1, r6, #0xff
	tst r1, r0
	addeq sp, sp, #0x68
	popeq {r4, r5, r6, r7, r8, pc}
	lsl r1, r7, #0x10
	add r2, sp, #0
	mov r0, r5
	lsr r1, r1, #0x10
	bl FUN_0204bd64
	ldrb r1, [sp, #0x4d]
	cmp r1, #1
	bne _02050BB4
	add r1, sp, #0x1c
	mov r0, r5
	bl FUN_02073a1c
	and r1, r0, #0xff
	mov r0, r8
	bl FUN_02050c54
	b _02050BBC
	arm_func_end FUN_02050b1c
_02050BB4:
	mov r0, r8
	bl FUN_02050c74
_02050BBC:
	ldrb r1, [r8, r4, asr #3]
	eor r0, r6, #0xff
	and r0, r0, #0xff
	and r0, r1, r0
	strb r0, [r8, r4, asr #3]
	add sp, sp, #0x68
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02050BD8: .word 0x0209BA20

	arm_func_start FUN_02050bdc
FUN_02050bdc: ; 0x02050BDC
	cmp r1, #0
	and r2, r1, #7
	mov r3, #1
	blt _02050BF4
	cmp r1, #0xa40
	bls _02050BFC
	arm_func_end FUN_02050bdc
_02050BF4:
	mov r0, #0
	bx lr
_02050BFC:
	ldrb r0, [r0, r1, asr #3]
	tst r0, r3, lsl r2
	moveq r3, #0
	mov r0, r3
	bx lr

	arm_func_start FUN_02050c10
FUN_02050c10: ; 0x02050C10
	add r2, r0, #0x148
	ldrb r0, [r2, r1]
	cmp r0, #0xff
	bxhs lr
	cmp r1, #0xa
	addle r0, r0, #1
	strble r0, [r2, r1]
	bx lr
	arm_func_end FUN_02050c10

	arm_func_start FUN_02050c30
FUN_02050c30: ; 0x02050C30
	add r0, r0, #0x52
	add r2, r0, #0x100
	ldrb r0, [r2, r1]
	cmp r0, #0xff
	bxhs lr
	cmp r1, #0x40
	addlt r0, r0, #1
	strblt r0, [r2, r1]
	bx lr
	arm_func_end FUN_02050c30

	arm_func_start FUN_02050c54
FUN_02050c54: ; 0x02050C54
	add r2, r0, #0x148
	ldrb r0, [r2, r1]
	cmp r0, #0
	bxeq lr
	cmp r1, #0xa
	suble r0, r0, #1
	strble r0, [r2, r1]
	bx lr
	arm_func_end FUN_02050c54

	arm_func_start FUN_02050c74
FUN_02050c74: ; 0x02050C74
	add r0, r0, #0x52
	add r2, r0, #0x100
	ldrb r0, [r2, r1]
	cmp r0, #0
	cmpne r1, #0x40
	sublt r0, r0, #1
	strblt r0, [r2, r1]
	bx lr
	arm_func_end FUN_02050c74

	arm_func_start FUN_02050c94
FUN_02050c94: ; 0x02050C94
	add r3, r0, #8
	ldrb r0, [r3, r1]
	adds r0, r2, r0
	movmi r0, #0
	cmp r0, #0xff
	movgt r0, #0xff
	strb r0, [r3, r1]
	bx lr
	arm_func_end FUN_02050c94

	arm_func_start FUN_02050cb4
FUN_02050cb4: ; 0x02050CB4
	push {r3, lr}
	mov lr, r0
	ldrh ip, [lr, #4]
	ldrh r3, [lr, #6]
	add r0, lr, #0xf
	add r1, lr, #8
	mov r2, #7
	strh ip, [lr]
	strh r3, [lr, #2]
	bl _memcpy
	pop {r3, pc}
	arm_func_end FUN_02050cb4

	arm_func_start FUN_02050ce0
FUN_02050ce0: ; 0x02050CE0
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r4, r1
	ldrh r2, [r5]
	ldrh r1, [r4]
	ldr r0, _02050DA8 ; =0x000003E7
	add r1, r2, r1
	strh r1, [r5]
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	cmp r1, r0
	strhhi r0, [r5]
	ldrh r1, [r4, #2]
	ldr r0, _02050DA8 ; =0x000003E7
	add r1, r2, r1
	strh r1, [r5, #2]
	ldrh r1, [r5, #2]
	cmp r1, r0
	strhhi r0, [r5, #2]
	ldrsb r2, [r4, #4]
	mov r0, r5
	mov r1, #0
	bl FUN_02050c94
	mov r6, #1
	ldrsb r2, [r4, #5]
	mov r0, r5
	mov r1, r6
	bl FUN_02050c94
	ldrsb r2, [r4, #6]
	mov r0, r5
	mov r1, #3
	bl FUN_02050c94
	ldrsb r2, [r4, #7]
	mov r0, r5
	mov r1, #2
	bl FUN_02050c94
	ldrsb r2, [r4, #8]
	mov r0, r5
	mov r1, #4
	bl FUN_02050c94
	ldrsb r2, [r4, #9]
	mov r0, r5
	mov r1, #6
	bl FUN_02050c94
	ldrsb r2, [r4, #0xa]
	mov r0, r5
	mov r1, #5
	bl FUN_02050c94
	mov r0, r6
	pop {r4, r5, r6, pc}
	.align 2, 0_02050DA8: .word 0x000003E7
	arm_func_end FUN_02050ce0

	arm_func_start FUN_02050dac
FUN_02050dac: ; 0x02050DAC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, r1
	mov r0, #0x4c
	mla r1, sb, r0, sl
	mov r4, r2
	add r0, r4, #0x394
	add r5, r0, #0x400
	add r3, r1, #0x24
	mov r2, #0x10
	arm_func_end FUN_02050dac
_02050DD4:
	ldrh r0, [r5, #2]
	ldrh r1, [r5], #4
	subs r2, r2, #1
	strh r0, [r3, #2]
	strh r1, [r3], #4
	bne _02050DD4
	mov r0, #0x4c
	mla r0, sb, r0, sl
	add r1, r4, #0x700
	ldrh r3, [r1, #0xd4]
	ldrb r2, [r4, #0x7d6]
	ldrb r5, [r4, #0x7d7]
	strh r3, [r0, #0x64]
	strb r2, [r0, #0x66]
	strb r5, [r0, #0x67]
	ldrh r3, [r1, #0xd8]
	add r2, sl, sb, lsl #5
	ldrh r5, [r1, #0xda]
	strh r3, [r0, #0x68]
	ldrh r3, [r1, #0xdc]
	strh r5, [r0, #0x6a]
	ldrh r1, [r1, #0xde]
	strh r3, [r0, #0x6c]
	add r2, r2, #0xc
	add r3, r2, #0x400
	add r5, r4, #0x7e0
	strh r1, [r0, #0x6e]
	mov r2, #8
_02050E44:
	ldrh r0, [r5, #2]
	ldrh r1, [r5], #4
	subs r2, r2, #1
	strh r0, [r3, #2]
	strh r1, [r3], #4
	bne _02050E44
	ldrh r2, [r4, #0xd2]
	add r0, sl, #0xc
	add r3, r0, #0x400
	ldr r0, _02050F44 ; =0x020A06BC
	lsl r1, sb, #1
	strh r2, [r0, r1]
	cmp sb, #1
	add r5, r3, sb, lsl #5
	bne _02050EC0
	mov r6, #0
	b _02050EB8
_02050E88:
	mov r0, r5
	mov r1, r6
	bl FUN_0204fbe8
	cmp r0, #0
	beq _02050EB4
	orr r0, r0, #0x8000
	lsl r2, r0, #0x10
	mov r0, r5
	mov r1, r6
	lsr r2, r2, #0x10
	bl FUN_0204fb8c
_02050EB4:
	add r6, r6, #1
_02050EB8:
	cmp r6, #0x10
	blt _02050E88
_02050EC0:
	mov r8, #0
	add r7, r4, #0xd4
	mov fp, #0x40
	mov r6, r8
	ldr r4, _02050F48 ; =0x0209A11C
	b _02050F38
_02050ED8:
	mov r0, sl
	mov r1, r7
	mov r2, r8
	mov r3, r6
	str r6, [sp]
	bl FUN_02071c20
	ldr r0, [r4]
	mov r1, r8
	bl FUN_0206c6fc
	movs r5, r0
	beq _02050F30
	mov r1, sb
	bl FUN_0206d600
	mov r0, r5
	mov r1, sb
	bl FUN_0206cc1c
	mov r0, r5
	mov r1, fp
	bl FUN_0206d620
	mov r0, r5
	mov r1, #0x20
	bl FUN_0206d634
_02050F30:
	add r8, r8, #1
	add r7, r7, #0x6c
_02050F38:
	cmp r8, #0x10
	blt _02050ED8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02050F44: .word 0x020A06BC
_02050F48: .word 0x0209A11C

	arm_func_start FUN_02050f4c
FUN_02050f4c: ; 0x02050F4C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r2
	mov r7, #0x2000
	cmp sb, #2
	mov sl, r1
	mov r6, #0
	moveq r7, #0x4000
	beq _02050F74
	cmp sb, #3
	moveq r7, #0x8000
	arm_func_end FUN_02050f4c
_02050F74:
	ldr r4, _02051068 ; =0x0209BA20
	mov r8, #0
	mov fp, #2
_02050F80:
	mov r0, r8
	bl FUN_020EFA80
	movs r5, r0
	beq _02051058
	bl FUN_0206d64c
	cmp r0, #0
	beq _02051058
	mov r0, r5
	bl FUN_0206d5f0
	cmp sl, r0
	bne _02051058
	mov r0, r5
	bl FUN_0206dcd4
	ldrh r0, [r0, #0x5a]
	tst r7, r0
	beq _02051058
	cmp r6, #0
	bne _02051040
	cmp sb, #1
	bne _02050FF0
	mov r0, r5
	bl FUN_0206cbf8
	mov r2, r0
	mov r0, r4
	mov r1, sl
	bl FUN_0204c6f0
	cmp r0, #0
	beq _02051040
_02050FF0:
	cmp sb, #2
	bne _02051018
	mov r0, r5
	bl FUN_0206cbf8
	mov r2, r0
	mov r0, r4
	mov r1, sl
	bl FUN_0204c680
	cmp r0, #0
	beq _02051040
_02051018:
	cmp sb, #3
	bne _02051054
	mov r0, r5
	bl FUN_0206cbf8
	mov r2, r0
	mov r0, r4
	mov r1, fp
	bl FUN_0204c6f0
	cmp r0, #0
	bne _02051054
_02051040:
	mov r0, r5
	bl FUN_0206dcd4
	mov r1, r7
	bl FUN_0206e20c
	b _02051058
_02051054:
	mov r6, #1
_02051058:
	add r8, r8, #1
	cmp r8, #0x64
	blt _02050F80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02051068: .word 0x0209BA20

	arm_func_start FUN_0205106c
FUN_0205106c: ; 0x0205106C
	add r0, r0, #0xcc
	add r0, r0, #0x400
	add r0, r0, r1, lsl #4
	bx lr
	arm_func_end FUN_0205106c

	arm_func_start FUN_0205107c
FUN_0205107c: ; 0x0205107C
	add r0, r0, #0xc
	add r0, r0, #0x400
	add r0, r0, r1, lsl #5
	bx lr
	arm_func_end FUN_0205107c

	arm_func_start FUN_0205108c
FUN_0205108c: ; 0x0205108C
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r3, _020510E0 ; =0x0209057C
	mov r4, #0
	mov r0, r4
	add r1, r5, #8
	mov r2, #4
	str r3, [r5]
	bl FUN_0200787c
	mov r0, r4
	add r1, r5, #0xc
	mov r2, #0x10
	bl FUN_0200787c
	mov r0, r4
	add r1, r5, #0x1c
	mov r2, #0x28
	bl FUN_0200787c
	mov r0, r5
	strb r4, [r5, #0x44]
	strb r4, [r5, #0x45]
	pop {r3, r4, r5, pc}
	.align 2, 0_020510E0: .word 0x0209057C
	arm_func_end FUN_0205108c

	arm_func_start FUN_020510e4
FUN_020510e4: ; 0x020510E4
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r3, _02051140 ; =0x0209057C
	mov r4, #0
	mov r0, r4
	add r1, r5, #8
	mov r2, #4
	str r3, [r5]
	bl FUN_0200787c
	mov r0, r4
	add r1, r5, #0xc
	mov r2, #0x10
	bl FUN_0200787c
	mov r0, r4
	add r1, r5, #0x1c
	mov r2, #0x28
	bl FUN_0200787c
	mov r0, r5
	strb r4, [r5, #0x44]
	strb r4, [r5, #0x45]
	bl FUN_0201e078
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_02051140: .word 0x0209057C
	arm_func_end FUN_020510e4

	arm_func_start FUN_02051144
FUN_02051144: ; 0x02051144
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x64
	mov r4, #0
	mov r5, r0
	ldr ip, _02051298 ; =0x04000060
	strb r4, [r5, #4]
	ldrh r3, [ip]
	ldr r2, _0205129C ; =0x0000CFFB
	mov r1, r4
	and r2, r3, r2
	strh r2, [ip]
	ldrh r6, [ip]
	mov r2, r4
	mov r3, r4
	bic r6, r6, #0x3000
	orr r6, r6, #8
	strh r6, [ip]
	bl FUN_020512a8
	mov r6, #1
	mov r0, r5
	mov r1, r6
	bl FUN_0205131c
	mov r0, r5
	mov r1, r4
	bl FUN_0205135c
	mov r0, r5
	mov r1, r6
	bl FUN_020512dc
	add r6, sp, #0x44
	arm_func_end FUN_02051144
_020511B8:
	lsl r2, r4, #4
	add r0, r2, #4
	add r1, r2, #8
	orr r0, r2, r0, lsl #8
	add r2, r2, #0xc
	orr r0, r0, r1, lsl #16
	orr r0, r0, r2, lsl #24
	str r0, [r6, r4, lsl #2]
	add r4, r4, #1
	cmp r4, #8
	blt _020511B8
	mov r4, #0
	mov r0, r5
	mov r1, r4
	bl FUN_02051384
	mov r0, r5
	mov r1, #1
	mov r2, #2
	mov r3, #0x5800
	bl FUN_020513a8
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_020513ec
	mov r0, r5
	mov r1, r6
	bl FUN_02051408
	add r0, sp, #4
_02051228:
	orr r1, r4, r4, lsl #5
	orr r2, r1, r4, lsl #10
	lsl r1, r4, #1
	add r4, r4, #1
	strh r2, [r0, r1]
	cmp r4, #0x20
	blt _02051228
	ldr r3, _02051298 ; =0x04000060
	ldr r1, _020512A0 ; =0xFFFFCFFD
	ldrh r2, [r3]
	and r1, r2, r1
	orr r1, r1, #2
	strh r1, [r3]
	bl FUN_02004a84
	ldr r3, _020512A4 ; =0xBFFF0000
	mov r4, #1
	add r1, sp, #0
	mov r2, r4
	mov r0, #0x60
	str r3, [sp]
	bl FUN_020672b4
	mov r0, #8
	bl FUN_020EF624
	mov r0, #0
	bl FUN_020671ec
	mov r0, r4
	add sp, sp, #0x64
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02051298: .word 0x04000060
_0205129C: .word 0x0000CFFB
_020512A0: .word 0xFFFFCFFD
_020512A4: .word 0xBFFF0000

	arm_func_start FUN_020512a8
FUN_020512a8: ; 0x020512A8
	push {r3, lr}
	mov ip, r0
	strb r2, [ip, #0xa]
	strh r1, [ip, #8]
	strb r3, [ip, #0xb]
	str r3, [sp]
	ldrh r0, [ip, #8]
	ldrb r1, [ip, #0xa]
	ldr r2, _020512D8 ; =0x00007FFF
	mov r3, #0x3f
	bl FUN_02004a9c
	pop {r3, pc}
	.align 2, 0_020512D8: .word 0x00007FFF
	arm_func_end FUN_020512a8

	arm_func_start FUN_020512dc
FUN_020512dc: ; 0x020512DC
	cmp r1, #0
	ldreq r2, _02051314 ; =0x04000060
	strb r1, [r0, #0x44]
	ldrheq r1, [r2]
	ldreq r0, _02051318 ; =0x0000CFEF
	andeq r0, r1, r0
	strheq r0, [r2]
	bxeq lr
	ldr r1, _02051314 ; =0x04000060
	ldrh r0, [r1]
	bic r0, r0, #0x3000
	orr r0, r0, #0x10
	strh r0, [r1]
	bx lr
	.align 2, 0_02051314: .word 0x04000060
_02051318: .word 0x0000CFEF
	arm_func_end FUN_020512dc

	arm_func_start FUN_0205131c
FUN_0205131c: ; 0x0205131C
	cmp r1, #0
	ldreq r2, _02051354 ; =0x04000060
	strb r1, [r0, #0x45]
	ldrheq r1, [r2]
	ldreq r0, _02051358 ; =0x0000CFDF
	andeq r0, r1, r0
	strheq r0, [r2]
	bxeq lr
	ldr r1, _02051354 ; =0x04000060
	ldrh r0, [r1]
	bic r0, r0, #0x3000
	orr r0, r0, #0x20
	strh r0, [r1]
	bx lr
	.align 2, 0_02051354: .word 0x04000060
_02051358: .word 0x0000CFDF
	arm_func_end FUN_0205131c

	arm_func_start FUN_0205135c
FUN_0205135c: ; 0x0205135C
	mov r3, #0
	arm_func_end FUN_0205135c
_02051360:
	add r2, r0, r3, lsl #1
	add r3, r3, #1
	strh r1, [r2, #0xc]
	cmp r3, #8
	blt _02051360
	ldr ip, _02051380 ; =LAB_02004a58
	add r0, r0, #0xc
	bx ip
	.align 2, 0_02051380: .word LAB_02004a58

	arm_func_start FUN_02051384
FUN_02051384: ; 0x02051384
	mov r3, r0
	strb r1, [r3, #0x1f]
	and r0, r1, #0xff
	ldrb r1, [r3, #0x20]
	ldrb r2, [r3, #0x21]
	ldrh r3, [r3, #0x22]
	ldr ip, _020513A4 ; =LAB_020049a4
	bx ip
	.align 2, 0_020513A4: .word LAB_020049a4
	arm_func_end FUN_02051384

	arm_func_start FUN_020513a8
FUN_020513a8: ; 0x020513A8
	push {r3, lr}
	cmp r1, #0
	movne r1, #0
	moveq r1, #1
	strb r1, [r0, #0x20]
	ldr r1, _020513E8 ; =0x00007FFF
	strb r2, [r0, #0x21]
	cmp r3, r1
	movhi r3, r1
	ldrb r1, [r0, #0x1f]
	strh r3, [r0, #0x22]
	cmp r1, #0
	popeq {r3, pc}
	mov r1, #1
	bl FUN_02051384
	pop {r3, pc}
	.align 2, 0_020513E8: .word 0x00007FFF
	arm_func_end FUN_020513a8

	arm_func_start FUN_020513ec
FUN_020513ec: ; 0x020513EC
	ldr r3, _02051404 ; =0x04000358
	strh r1, [r0, #0x1c]
	strb r2, [r0, #0x1e]
	orr r0, r1, r2, lsl #16
	str r0, [r3]
	bx lr
	.align 2, 0_02051404: .word 0x04000358
	arm_func_end FUN_020513ec

	arm_func_start FUN_02051408
FUN_02051408: ; 0x02051408
	push {r4, lr}
	movs r4, r1
	mov r1, r0
	popeq {r4, pc}
	mov r0, r4
	add r1, r1, #0x24
	mov r2, #0x20
	bl FUN_020078c8
	mov r0, r4
	bl FUN_02004a70
	pop {r4, pc}
	arm_func_end FUN_02051408

	arm_func_start FUN_02051434
FUN_02051434: ; 0x02051434
	push {r3, lr}
	bl FUN_02004858
	bl FUN_020047ec
	bl FUN_02004914
	pop {r3, pc}
	arm_func_end FUN_02051434

	arm_func_start FUN_02051448
FUN_02051448: ; 0x02051448
	push {r3, lr}
	ldr r0, _020514E0 ; =0x0208EC7C
	ldr r0, [r0]
	cmp r0, #3
	mvnhi r0, #0
	bl FUN_02007350
	ldr r1, _020514E4 ; =0x04000060
	mov r3, #0
	ldrh r0, [r1]
	mov r2, r3
	tst r0, #0x1000
	ldrhne r0, [r1]
	orrne r0, r0, #0x1000
	strhne r0, [r1]
	ldr r1, _020514E4 ; =0x04000060
	ldrh r0, [r1]
	tst r0, #0x2000
	ldrhne r0, [r1]
	orrne r0, r0, #0x2000
	strhne r0, [r1]
	ldr r1, _020514E8 ; =0x04000600
	ldr r0, [r1]
	tst r0, #0x4000
	ldreq r0, [r1]
	subne r3, r3, #1
	andeq r2, r0, #0x8000
	cmp r3, #0
	bne _020514CC
	cmp r2, #0
	ldrne r1, _020514E8 ; =0x04000600
	ldrne r0, [r1]
	orrne r0, r0, #0x8000
	strne r0, [r1]
	arm_func_end FUN_02051448
_020514CC:
	bl FUN_02067170
	ldr r0, _020514EC ; =0x04000540
	mov r1, #1
	str r1, [r0]
	pop {r3, pc}
	.align 2, 0_020514E0: .word 0x0208EC7C
_020514E4: .word 0x04000060
_020514E8: .word 0x04000600
_020514EC: .word 0x04000540

	arm_func_start FUN_020514f0
FUN_020514f0: ; 0x020514F0
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r4, r0
	bl FUN_02006ea0
	mov r5, r0
	bl FUN_02006eb8
	mov r6, r0
	cmp r5, #0
	beq _0205153C
	mov r0, #1
	str r0, [sp]
	ldr r2, [r4]
	ldr r3, [r4, #0x24]
	mov r0, r5
	mov r1, #0
	bl FUN_0201a328
	ldr r0, [r4, #0x2c]
	orr r0, r0, #1
	str r0, [r4, #0x2c]
	arm_func_end FUN_020514f0
_0205153C:
	cmp r6, #0
	beq _02051564
	ldr r1, [r4, #4]
	ldr r2, [r4, #0x28]
	mov r0, r6
	mov r3, #1
	bl FUN_0201a690
	ldr r0, [r4, #0x2c]
	orr r0, r0, #2
	str r0, [r4, #0x2c]
_02051564:
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}

	arm_func_start FUN_02051570
FUN_02051570: ; 0x02051570
	push {r3, lr}
	mov r0, r1
	mov r1, r3
	ldr ip, [sp, #0xc]
	ldr r3, [sp, #8]
	str ip, [sp]
	bl FUN_02040f14
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_02051570

	arm_func_start FUN_0205159c
FUN_0205159c: ; 0x0205159C
	push {r3, lr}
	mov r0, r1
	mov r1, r3
	ldr ip, [sp, #0xc]
	ldr r3, [sp, #8]
	str ip, [sp]
	bl FUN_02041074
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_0205159c

	arm_func_start FUN_020515c8
FUN_020515c8: ; 0x020515C8
	mov r3, #8
	lsl ip, r3, r0
	lsl r0, r3, r1
	mul r0, ip, r0
	cmp r2, #7
	arm_func_end FUN_020515c8

	arm_func_start switchD
switchD: ; 0x020515DC
	addls pc, pc, r2, lsl #2
	b _02051624
	arm_func_end switchD
_020515E4: ; jump table
	b _02051624 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020515E8
	bx lr
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020515EC
	b _02051604
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020515F0
	b _02051610
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020515F4
	bx lr
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020515F8
	b _02051624
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020515FC
	bx lr
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02051600
	b _0205161C
	arm_func_end caseD_7
_02051604:
	add r0, r0, #3
	asr r0, r0, #2
	bx lr
_02051610:
	add r0, r0, #1
	asr r0, r0, #1
	bx lr
_0205161C:
	lsl r0, r0, #1
	bx lr
_02051624:
	mov r0, #0
	bx lr

	arm_func_start FUN_0205162c
FUN_0205162c: ; 0x0205162C
	cmp r0, #7
	arm_func_end FUN_0205162c

	arm_func_start switchD
switchD: ; 0x02051630
	addls pc, pc, r0, lsl #2
	b _02051688
	arm_func_end switchD
_02051638: ; jump table
	b _02051688 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0205163C
	b _02051658
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02051640
	b _02051660
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02051644
	b _02051668
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02051648
	b _02051670
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0205164C
	b _02051688
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02051650
	b _02051678
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02051654
	b _02051680
	arm_func_end caseD_7
_02051658:
	mov r0, #0
	bx lr
_02051660:
	mov r0, #0x20
	bx lr
_02051668:
	mov r0, #0x20
	bx lr
_02051670:
	mov r0, #0x200
	bx lr
_02051678:
	mov r0, #0
	bx lr
_02051680:
	mov r0, #0
	bx lr
_02051688:
	mov r0, #0
	bx lr

	arm_func_start FUN_02051690
FUN_02051690: ; 0x02051690
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r5, #0
	mov r4, r1
	add r0, r8, #8
	mov r7, r2
	mov r6, r3
	str r5, [r8]
	str r5, [r8, #4]
	str r5, [r8, #0x20]
	str r5, [r8, #0x24]
	str r5, [r8, #0x28]
	str r5, [r8, #0x2c]
	str r5, [r8, #0x30]
	str r5, [r8, #0x34]
	bl FUN_020023e4
	cmp r4, #0
	cmpgt r7, #0
	str r5, [r8, #0x38]
	movle r0, #0
	pople {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	bl FUN_0201a320
	mov r1, r0
	ldr r4, _02051774 ; =0x0209A250
	str r1, [r8, #0x24]
	mov r0, r4
	bl FUN_0202de44
	str r0, [r8]
	mov r0, r7
	bl FUN_0201a688
	mov r1, r0
	mov r0, r4
	str r1, [r8, #0x28]
	bl FUN_0202de44
	ldr r1, [r8]
	str r0, [r8, #4]
	cmp r1, #0
	cmpne r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r2, [r8, #0x24]
	mov r0, r5
	bl FUN_0200787c
	ldr r1, [r8, #4]
	ldr r2, [r8, #0x28]
	mov r0, r5
	bl FUN_0200787c
	mov r0, r8
	bl FUN_020514f0
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r6
	bl FUN_02040ea0
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02051774: .word 0x0209A250
	arm_func_end FUN_02051690

	arm_func_start FUN_02051778
FUN_02051778: ; 0x02051778
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x2c]
	tst r0, #1
	beq _02051790
	bl FUN_0201a470
	arm_func_end FUN_02051778
_02051790:
	ldr r0, [r4, #0x2c]
	tst r0, #2
	beq _020517A0
	bl FUN_0201a7fc
_020517A0:
	mov r0, r4
	bl FUN_020514f0
	pop {r4, pc}

	arm_func_start FUN_020517ac
FUN_020517ac: ; 0x020517AC
	push {r4, r5, r6, lr}
	mov r5, r2
	mov r6, r1
	bl FUN_02051858
	cmp r5, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	add r0, r5, #0x1f
	mov r4, #0
	bic r5, r0, #0x1f
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_0201a380
	cmp r0, #0
	moveq r0, r4
	strne r0, [r6, #4]
	movne r0, #1
	strne r5, [r6]
	strbne r0, [r6, #8]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020517ac

	arm_func_start FUN_02051800
FUN_02051800: ; 0x02051800
	push {r4, r5, r6, lr}
	mov r5, r2
	mov r6, r1
	bl FUN_02051858
	cmp r5, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	add r0, r5, #0x1f
	mov r4, #0
	bic r5, r0, #0x1f
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_0201a6e4
	cmp r0, #0
	moveq r0, r4
	movne r1, #2
	strne r0, [r6, #4]
	strne r5, [r6]
	strbne r1, [r6, #8]
	movne r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02051800

	arm_func_start FUN_02051858
FUN_02051858: ; 0x02051858
	push {r4, lr}
	mov r4, r1
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _02051890
	ldrb r1, [r4, #8]
	cmp r1, #1
	beq _02051884
	cmp r1, #2
	beq _0205188C
	pop {r4, pc}
	arm_func_end FUN_02051858
_02051884:
	bl FUN_0201a404
	b _02051890
_0205188C:
	bl FUN_0201a7b8
_02051890:
	mov r0, #0
	str r0, [r4]
	str r0, [r4, #4]
	strb r0, [r4, #8]
	strb r0, [r4, #9]
	pop {r4, pc}

	arm_func_start FUN_020518a8
FUN_020518a8: ; 0x020518A8
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	ldr r4, [sp, #0x20]
	mov r6, r0
	add r4, r4, #3
	ldrb r0, [r1, #8]
	ldr lr, [r1]
	bic r4, r4, #3
	cmp lr, r4
	movlt r4, lr
	mov r5, r3
	ldr ip, [sp, #0x2c]
	cmp r0, #1
	beq _020518EC
	cmp r0, #2
	beq _0205195C
	b _020519CC
	arm_func_end FUN_020518a8
_020518EC:
	ldr r1, [r1, #4]
	ldr r0, [sp, #0x24]
	lsl r1, r1, #0x10
	cmp r0, #0
	add r7, r2, r1, lsr #13
	beq _02051934
	cmp ip, #0
	movne r0, #0
	strbne r0, [ip]
	mov r0, r6
	bl FUN_02051c7c
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_02005d50
	mov r0, r6
	bl FUN_02051ca8
	b _020519D8
_02051934:
	ldr r1, [sp, #0x28]
	mov r0, r6
	str r1, [sp]
	mov r1, r7
	mov r2, r4
	mov r3, r5
	str ip, [sp, #4]
	bl FUN_02051570
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_0205195C:
	ldr r1, [r1, #4]
	ldr r0, [sp, #0x24]
	lsl r1, r1, #0x10
	cmp r0, #0
	add r7, r2, r1, lsr #13
	beq _020519A4
	cmp ip, #0
	movne r0, #0
	strbne r0, [ip]
	mov r0, r6
	bl FUN_02051cdc
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_02005f14
	mov r0, r6
	bl FUN_02051d08
	b _020519D8
_020519A4:
	ldr r1, [sp, #0x28]
	mov r0, r6
	str r1, [sp]
	mov r1, r7
	mov r2, r4
	mov r3, r5
	str ip, [sp, #4]
	bl FUN_0205159c
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
_020519CC:
	add sp, sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020519D8:
	mov r0, #1
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020519e4
FUN_020519e4: ; 0x020519E4
	push {r4, lr}
	sub sp, sp, #8
	ldr ip, [sp, #0x10]
	ldr r4, [r1]
	add ip, ip, #3
	bic ip, ip, #3
	cmp r4, ip
	movlt ip, r4
	ldrb r4, [r1, #8]
	cmp r4, #1
	beq _02051A1C
	cmp r4, #2
	beq _02051A48
	b _02051A70
	arm_func_end FUN_020519e4
_02051A1C:
	ldr r1, [r1, #4]
	ldr lr, [sp, #0x14]
	lsl r1, r1, #0x10
	add r1, r2, r1, lsr #13
	ldr r4, [sp, #0x18]
	str lr, [sp]
	mov r2, ip
	str r4, [sp, #4]
	bl FUN_02051570
	add sp, sp, #8
	pop {r4, pc}
_02051A48:
	ldr r1, [r1, #4]
	ldr r4, [sp, #0x14]
	lsl r1, r1, #0x10
	ldr lr, [sp, #0x18]
	add r1, r2, r1, lsr #13
	mov r2, ip
	stm sp, {r4, lr}
	bl FUN_0205159c
	add sp, sp, #8
	pop {r4, pc}
_02051A70:
	mov r0, #0
	add sp, sp, #8
	pop {r4, pc}

	arm_func_start FUN_02051a7c
FUN_02051a7c: ; 0x02051A7C
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, [sp, #0x18]
	mov r6, r0
	add r4, r4, #3
	ldrb r0, [r1, #8]
	ldr ip, [r1]
	bic r4, r4, #3
	cmp ip, r4
	movlt r4, ip
	mov r5, r3
	cmp r0, #1
	beq _02051AB8
	cmp r0, #2
	beq _02051AE8
	b _02051B18
	arm_func_end FUN_02051a7c
_02051AB8:
	ldr r1, [r1, #4]
	mov r0, r6
	lsl r1, r1, #0x10
	add r7, r2, r1, lsr #13
	bl FUN_02051c7c
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_02005d50
	mov r0, r6
	bl FUN_02051ca8
	b _02051B20
_02051AE8:
	ldr r1, [r1, #4]
	mov r0, r6
	lsl r1, r1, #0x10
	add r7, r2, r1, lsr #13
	bl FUN_02051cdc
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_02005f14
	mov r0, r6
	bl FUN_02051d08
	b _02051B20
_02051B18:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02051B20:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02051b28
FUN_02051b28: ; 0x02051B28
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r0, r5, #8
	bl FUN_02002408
	mov r0, r4
	bl FUN_02067444
	mov r4, r0
	add r0, r5, #8
	bl FUN_02002458
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02051b28

	arm_func_start FUN_02051b58
FUN_02051b58: ; 0x02051B58
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r0, r5, #8
	bl FUN_02002408
	mov r0, r4
	bl FUN_02067684
	add r0, r5, #8
	bl FUN_02002458
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02051b58

	arm_func_start FUN_02051b84
FUN_02051b84: ; 0x02051B84
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r0, r5, #8
	bl FUN_02002408
	mov r0, r5
	mov r1, r4
	bl FUN_02051e70
	mov r4, r0
	add r0, r5, #8
	bl FUN_02002458
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02051b84

	arm_func_start FUN_02051bb8
FUN_02051bb8: ; 0x02051BB8
	ldr r3, [r1, #4]
	cmp r3, #0
	moveq r0, #0
	bxeq lr
	ldrb r0, [r1, #8]
	cmp r0, #1
	beq _02051BE0
	cmp r0, #2
	beq _02051BF4
	b _02051C08
	arm_func_end FUN_02051bb8
_02051BE0:
	lsl r0, r3, #0x10
	lsr r0, r0, #0xd
	str r0, [r2]
	mov r0, #1
	bx lr
_02051BF4:
	lsl r0, r3, #0x10
	lsr r0, r0, #0xd
	str r0, [r2]
	mov r0, #1
	bx lr
_02051C08:
	mov r0, #0
	bx lr

	arm_func_start FUN_02051c10
FUN_02051c10: ; 0x02051C10
	push {r4, lr}
	mov r4, r0
	bl FUN_02006e3c
	cmp r0, #0
	popeq {r4, pc}
	ldr r0, _02051C74 ; =0x04000006
	ldrh r0, [r0]
	cmp r0, #0xc1
	bgt _02051C3C
	mov r0, #0x188
	bl FUN_02003e24
	arm_func_end FUN_02051c10
_02051C3C:
	ldr r0, _02051C78 ; =0x04000600
	ldr r0, [r0]
	tst r0, #0x8000000
	popne {r4, pc}
	ldr r0, [r4, #0x38]
	cmp r0, #0
	popeq {r4, pc}
	mov r0, #0
	str r0, [r4, #0x38]
	bl FUN_020413b8
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_020411d4
	pop {r4, pc}
	.align 2, 0_02051C74: .word 0x04000006
_02051C78: .word 0x04000600

	arm_func_start FUN_02051c7c
FUN_02051c7c: ; 0x02051C7C
	push {r4, lr}
	mov r4, r0
	add r0, r4, #8
	bl FUN_02002408
	ldr r1, [r4, #0x30]
	add r0, r1, #1
	str r0, [r4, #0x30]
	cmp r1, #0
	popgt {r4, pc}
	bl FUN_02005cf4
	pop {r4, pc}
	arm_func_end FUN_02051c7c

	arm_func_start FUN_02051ca8
FUN_02051ca8: ; 0x02051CA8
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x30]
	cmp r0, #0
	ble _02051CD0
	sub r0, r0, #1
	str r0, [r4, #0x30]
	cmp r0, #0
	bgt _02051CD0
	bl FUN_02005e9c
	arm_func_end FUN_02051ca8
_02051CD0:
	add r0, r4, #8
	bl FUN_02002458
	pop {r4, pc}

	arm_func_start FUN_02051cdc
FUN_02051cdc: ; 0x02051CDC
	push {r4, lr}
	mov r4, r0
	add r0, r4, #8
	bl FUN_02002408
	ldr r1, [r4, #0x34]
	add r0, r1, #1
	str r0, [r4, #0x34]
	cmp r1, #0
	popgt {r4, pc}
	bl FUN_02005ee0
	pop {r4, pc}
	arm_func_end FUN_02051cdc

	arm_func_start FUN_02051d08
FUN_02051d08: ; 0x02051D08
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	ble _02051D30
	sub r0, r0, #1
	str r0, [r4, #0x34]
	cmp r0, #0
	bgt _02051D30
	bl FUN_02005f84
	arm_func_end FUN_02051d08
_02051D30:
	add r0, r4, #8
	bl FUN_02002458
	pop {r4, pc}

	arm_func_start FUN_02051d3c
FUN_02051d3c: ; 0x02051D3C
	push {r3, r4, r5, lr}
	mov r4, r1
	ldrb r1, [r4, #9]
	mov r5, r0
	cmp r1, #0
	movne r0, #1
	popne {r3, r4, r5, pc}
	add r0, r5, #8
	bl FUN_02002408
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _02051DB4
	ldrb r1, [r4, #8]
	cmp r1, #1
	beq _02051D84
	cmp r1, #2
	beq _02051D8C
	b _02051D94
	arm_func_end FUN_02051d3c
_02051D84:
	bl FUN_0201a404
	b _02051DA4
_02051D8C:
	bl FUN_0201a7b8
	b _02051DA4
_02051D94:
	add r0, r5, #8
	bl FUN_02002458
	mov r0, #0
	pop {r3, r4, r5, pc}
_02051DA4:
	mov r1, #0
	mov r0, #1
	str r1, [r4, #4]
	strb r0, [r4, #9]
_02051DB4:
	add r0, r5, #8
	bl FUN_02002458
	mov r0, #1
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02051dc4
FUN_02051dc4: ; 0x02051DC4
	push {r3, r4, r5, lr}
	mov r4, r1
	ldrb r1, [r4, #9]
	mov r5, r0
	cmp r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	add r0, r5, #8
	bl FUN_02002408
	ldrb r0, [r4, #8]
	cmp r0, #1
	beq _02051E00
	cmp r0, #2
	beq _02051E14
	b _02051E28
	arm_func_end FUN_02051dc4
_02051E00:
	ldr r2, [r4]
	mov r0, r5
	mov r1, r4
	bl FUN_020517ac
	b _02051E38
_02051E14:
	ldr r2, [r4]
	mov r0, r5
	mov r1, r4
	bl FUN_02051800
	b _02051E38
_02051E28:
	add r0, r5, #8
	bl FUN_02002458
	mov r0, #0
	pop {r3, r4, r5, pc}
_02051E38:
	mov r1, #0
	add r0, r5, #8
	strb r1, [r4, #9]
	bl FUN_02002458
	mov r0, #1
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02051e50
FUN_02051e50: ; 0x02051E50
	push {r4, lr}
	mov r4, r0
	add r0, r4, #8
	bl FUN_02002408
	bl FUN_0204142c
	add r0, r4, #8
	bl FUN_02002458
	pop {r4, pc}
	arm_func_end FUN_02051e50

	arm_func_start FUN_02051e70
FUN_02051e70: ; 0x02051E70
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r4, r1
	ldr r2, [r4]
	ldr r1, _02052088 ; =0x30415642
	mov fp, r0
	cmp r2, r1
	bhi _02051EC0
	bhs _02052078
	sub r0, r1, #0x900
	cmp r2, r0
	bhi _02051EB0
	bhs _02052078
	sub r0, r1, #0x1300
	cmp r2, r0
	beq _02052078
	b _02052080
	arm_func_end FUN_02051e70
_02051EB0:
	sub r0, r1, #0x200
	cmp r2, r0
	beq _02052078
	b _02052080
_02051EC0:
	ldr r0, _0205208C ; =0x30505442
	cmp r2, r0
	bhi _02051EE0
	bhs _02052078
	ldr r0, _02052090 ; =0x30444D42
	cmp r2, r0
	beq _02051EEC
	b _02052080
_02051EE0:
	add r0, r0, #0x80000
	cmp r2, r0
	bne _02052080
_02051EEC:
	mov r0, #1
	str r0, [sp]
	ldr sb, [sp]
	mov r0, r4
	mov sl, sb
	bl FUN_02067dd8
	movs r6, r0
	beq _02052048
	bl FUN_02063978
	mov r5, r0
	mov r0, r6
	bl FUN_0206398c
	mov r7, r0
	mov r0, r6
	bl FUN_02063abc
	mov r8, r0
	cmp r5, #0
	beq _02051F5C
	ldr r0, _02052094 ; =0x0208EEA0
	mov r1, #0
	ldr r3, [r0]
	mov r0, r5
	mov r2, r1
	blx r3
	movs r5, r0
	moveq r0, #0
	streq r0, [sp]
	b _02051F60
_02051F5C:
	mov r5, #0
_02051F60:
	cmp r7, #0
	beq _02051F8C
	ldr r0, _02052094 ; =0x0208EEA0
	mov r2, #0
	ldr r3, [r0]
	mov r0, r7
	mov r1, #1
	blx r3
	movs r7, r0
	moveq sb, #0
	b _02051F90
_02051F8C:
	mov r7, #0
_02051F90:
	cmp r8, #0
	beq _02051FC0
	ldrh r1, [r6, #0x20]
	ldr r0, _02052098 ; =0x0208EEA8
	mov r2, #0
	ldr r3, [r0]
	mov r0, r8
	and r1, r1, #0x8000
	blx r3
	movs r8, r0
	moveq sl, #0
	b _02051FC4
_02051FC0:
	mov r8, #0
_02051FC4:
	ldr r0, [sp]
	cmp r0, #0
	cmpne sb, #0
	cmpne sl, #0
	bne _0205200C
	ldr r1, _0205209C ; =0x0208EEAC
	mov r0, r8
	ldr r1, [r1]
	blx r1
	ldr r4, _020520A0 ; =0x0208EEA4
	mov r0, r7
	ldr r1, [r4]
	blx r1
	ldr r1, [r4]
	mov r0, r5
	blx r1
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0205200C:
	mov r0, r6
	mov r1, r5
	mov r2, r7
	bl FUN_020639a0
	mov r0, r6
	mov r1, r8
	bl FUN_02063ad0
	mov r0, fp
	mov r1, r6
	mov r2, #1
	bl FUN_020520a4
	mov r0, fp
	mov r1, r6
	mov r2, #1
	bl FUN_020520f8
_02052048:
	ldr r1, [r4]
	ldr r0, _02052090 ; =0x30444D42
	cmp r1, r0
	bne _02052070
	mov r0, r4
	bl FUN_02067dc8
	cmp r6, #0
	beq _02052070
	mov r1, r6
	bl FUN_0206410c
_02052070:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02052078:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02052080:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02052088: .word 0x30415642
_0205208C: .word 0x30505442
_02052090: .word 0x30444D42
_02052094: .word 0x0208EEA0
_02052098: .word 0x0208EEA8
_0205209C: .word 0x0208EEAC
_020520A0: .word 0x0208EEA4

	arm_func_start FUN_020520a4
FUN_020520a4: ; 0x020520A4
	push {r4, lr}
	sub sp, sp, #8
	mov r4, r1
	ldrh r1, [r4, #0xc]
	lsls r2, r1, #3
	addeq sp, sp, #8
	popeq {r4, pc}
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	ldr r1, [r4, #8]
	ldr r3, [r4, #0x14]
	lsl r1, r1, #0x10
	lsr r1, r1, #0xd
	add r3, r4, r3
	bl FUN_02051570
	ldrh r0, [r4, #0x10]
	orr r0, r0, #1
	strh r0, [r4, #0x10]
	add sp, sp, #8
	pop {r4, pc}
	arm_func_end FUN_020520a4

	arm_func_start FUN_020520f8
FUN_020520f8: ; 0x020520F8
	push {r4, lr}
	sub sp, sp, #8
	mov r2, #0
	str r2, [sp]
	mov r4, r1
	str r2, [sp, #4]
	ldr r1, [r4, #0x2c]
	ldrh r2, [r4, #0x30]
	ldr r3, [r4, #0x38]
	lsl r1, r1, #0x10
	lsr r1, r1, #0xd
	lsl r2, r2, #3
	add r3, r4, r3
	bl FUN_0205159c
	ldrh r0, [r4, #0x32]
	orr r0, r0, #1
	strh r0, [r4, #0x32]
	add sp, sp, #8
	pop {r4, pc}
	arm_func_end FUN_020520f8

	arm_func_start FUN_02052144
FUN_02052144: ; 0x02052144
	ldr r2, _02052164 ; =0x020905D4
	mov r1, #0
	str r2, [r0]
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	str r1, [r0, #0x10]
	bx lr
	.align 2, 0_02052164: .word 0x020905D4
	arm_func_end FUN_02052144

	arm_func_start FUN_02052168
FUN_02052168: ; 0x02052168
	push {r3, r4, r5, lr}
	mov r2, #0xc
	mul r4, r1, r2
	mov r5, r0
	str r1, [r5, #4]
	ldr r0, _0205219C ; =0x0209A250
	mov r1, r4
	bl FUN_0202de44
	mov r2, r4
	mov r1, #0
	str r0, [r5, #8]
	bl MemWrite
	pop {r3, r4, r5, pc}
	.align 2, 0_0205219C: .word 0x0209A250
	arm_func_end FUN_02052168

	arm_func_start FUN_020521a0
FUN_020521a0: ; 0x020521A0
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #8]
	cmp r1, #0
	beq _020521BC
	ldr r0, _020521CC ; =0x0209A250
	bl FUN_0202e1c0
	arm_func_end FUN_020521a0
_020521BC:
	mov r0, #0
	str r0, [r4, #8]
	str r0, [r4, #4]
	pop {r4, pc}
	.align 2, 0_020521CC: .word 0x0209A250

	arm_func_start FUN_020521d0
FUN_020521d0: ; 0x020521D0
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r0
	ldr r3, [r6, #4]
	mov r5, r1
	cmp r5, r3
	mov r4, r2
	movge r0, #0
	popge {r4, r5, r6, r7, r8, pc}
	cmp r5, #0
	bge _02052258
	cmp r3, #0
	mov r5, #0
	ble _02052250
	mov r7, #0xc
	mov r8, r7
	arm_func_end FUN_020521d0
_0205220C:
	mov r0, r6
	ldr r2, [r0]
	mov r1, r5
	ldr r2, [r2]
	blx r2
	cmp r4, #0
	ldr r1, [r6, #8]
	beq _02052238
	mla r1, r5, r8, r1
	bl FUN_020F316C
	b _02052240
_02052238:
	mla r1, r5, r7, r1
	bl FUN_020F3054
_02052240:
	ldr r0, [r6, #4]
	add r5, r5, #1
	cmp r5, r0
	blt _0205220C
_02052250:
	ldr r0, [r6, #0xc]
	pop {r4, r5, r6, r7, r8, pc}
_02052258:
	ldr r2, [r0]
	ldr r2, [r2]
	blx r2
	ldr r2, [r6, #8]
	mov r1, #0xc
	mla r1, r5, r1, r2
	cmp r4, #0
	beq _02052280
	bl FUN_020F316C
	b _02052284
_02052280:
	bl FUN_020F3054
_02052284:
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0205228c
FUN_0205228c: ; 0x0205228C
	push {r3, lr}
	ldr r2, [r0, #4]
	cmp r1, r2
	mvnge r0, #0
	popge {r3, pc}
	cmp r1, #0
	bge _020522C4
	ldr r0, [r0, #8]
	mov r1, r2
	bl FUN_020F330C
	cmp r0, #0
	beq _020522E4
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_0205228c
_020522C4:
	ldr r2, [r0, #8]
	mov r0, #0xc
	mla r0, r1, r0, r2
	mov r1, #1
	bl FUN_020F330C
	cmp r0, #0
	movne r0, #0
	popne {r3, pc}
_020522E4:
	mov r0, #1
	pop {r3, pc}

	arm_func_start FUN_020522ec
FUN_020522ec: ; 0x020522EC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r0, [sl, #4]
	mov sb, r1
	cmp sb, r0
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp sb, #0
	bge _0205236C
	mov sb, #0
	cmp r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov fp, #1
	mov r5, sb
	mov r4, #0xc
	arm_func_end FUN_020522ec
_02052324:
	mul r6, sb, r4
	ldr r7, [sl, #8]
	mov r1, fp
	add r8, r7, r6
	mov r0, r8
	bl FUN_020F338C
	mov r0, r8
	bl FUN_020F33FC
	str r5, [r7, r6]
	str r5, [r8, #4]
	strb r5, [r8, #8]
	strb r5, [r8, #9]
	strb r5, [r8, #0xa]
	ldr r0, [sl, #4]
	add sb, sb, #1
	cmp sb, r0
	blt _02052324
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0205236C:
	mov r0, #0xc
	mul r4, sb, r0
	ldr r5, [sl, #8]
	mov r1, #1
	add r6, r5, r4
	mov r0, r6
	bl FUN_020F338C
	mov r0, r6
	bl FUN_020F33FC
	mov r0, #0
	str r0, [r5, r4]
	str r0, [r6, #4]
	strb r0, [r6, #8]
	strb r0, [r6, #9]
	strb r0, [r6, #0xa]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_020523ac
FUN_020523ac: ; 0x020523AC
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #0x10]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #0xc]
	mov r5, #0
	cmp r0, #0
	ble _020523F4
	mov r4, #0x1bc
	arm_func_end FUN_020523ac
_020523D8:
	ldr r0, [r6, #0x10]
	mla r0, r5, r4, r0
	bl FUN_020FAAC4
	ldr r0, [r6, #0xc]
	add r5, r5, #1
	cmp r5, r0
	blt _020523D8
_020523F4:
	mov r0, #1
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020523fc
FUN_020523fc: ; 0x020523FC
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #0x10]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #0xc]
	mov r5, #0
	cmp r0, #0
	ble _02052444
	mov r4, #0x1bc
	arm_func_end FUN_020523fc
_02052428:
	ldr r0, [r6, #0x10]
	mla r0, r5, r4, r0
	bl FUN_020FAB94
	ldr r0, [r6, #0xc]
	add r5, r5, #1
	cmp r5, r0
	blt _02052428
_02052444:
	mov r0, #1
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205244c
FUN_0205244c: ; 0x0205244C
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #8]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #4]
	mov r5, #0
	cmp r0, #0
	ble _02052494
	ldr r4, _0205249C ; =0x000009A4
	arm_func_end FUN_0205244c
_02052478:
	ldr r0, [r6, #8]
	mla r0, r5, r4, r0
	bl FUN_020FC4BC
	ldr r0, [r6, #4]
	add r5, r5, #1
	cmp r5, r0
	blt _02052478
_02052494:
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_0205249C: .word 0x000009A4

	arm_func_start FUN_020524a0
FUN_020524a0: ; 0x020524A0
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #8]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #4]
	mov r5, #0
	cmp r0, #0
	ble _020524E8
	ldr r4, _020524F0 ; =0x000009A4
	arm_func_end FUN_020524a0
_020524CC:
	ldr r0, [r6, #8]
	mla r0, r5, r4, r0
	bl FUN_020FC4F0
	ldr r0, [r6, #4]
	add r5, r5, #1
	cmp r5, r0
	blt _020524CC
_020524E8:
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_020524F0: .word 0x000009A4

	arm_func_start FUN_020524f4
FUN_020524f4: ; 0x020524F4
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x70
	bl FUN_020FA638
	movs r4, r0
	popeq {r3, r4, r5, pc}
	ldr r1, _0205253C ; =0x02090630
	bl FUN_02053c20
	strh r0, [r5, #0x16]
	ldr r1, _02052540 ; =0x02090634
	mov r0, r4
	bl FUN_02053c20
	strh r0, [r5, #0x18]
	ldr r1, _02052544 ; =0x0209063C
	mov r0, r4
	bl FUN_02053c20
	strh r0, [r5, #0x1a]
	pop {r3, r4, r5, pc}
	.align 2, 0_0205253C: .word 0x02090630
_02052540: .word 0x02090634
_02052544: .word 0x0209063C
	arm_func_end FUN_020524f4

	arm_func_start FUN_02052548
FUN_02052548: ; 0x02052548
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x70
	bl FUN_020FA154
	add r0, r5, #0x22c
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	ldr r1, [r5, #0x340]
	cmp r1, #0
	beq _0205257C
	ldr r0, _020525E4 ; =0x0209A250
	bl FUN_0202e1c0
	arm_func_end FUN_02052548
_0205257C:
	mov r4, #0
	sub r3, r4, #1
	mov r0, r4
	add r1, r5, #0x2c
	mov r2, #0x40
	str r4, [r5, #0x1c]
	str r4, [r5, #0x20]
	str r4, [r5, #0x24]
	strb r4, [r5, #0x15]
	strh r3, [r5, #0x16]
	strh r3, [r5, #0x18]
	strh r3, [r5, #0x1a]
	str r4, [r5, #0x28]
	bl FUN_0200787c
	add r0, r5, #0x70
	str r4, [r5, #0x6c]
	bl FUN_020F9CDC
	add r0, r5, #0x22c
	ldr r1, [r0]
	ldr r1, [r1, #8]
	blx r1
	str r4, [r5, #0x340]
	str r4, [r5, #0x344]
	str r4, [r5, #0x348]
	str r4, [r5, #0x34c]
	pop {r3, r4, r5, pc}
	.align 2, 0_020525E4: .word 0x0209A250

	arm_func_start FUN_020525e8
FUN_020525e8: ; 0x020525E8
	push {r4, lr}
	ldr r1, _02052614 ; =0x02118880
	mov r4, r0
	str r1, [r4]
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	add r0, r4, #0xc
	bl FUN_0202fd44
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02052614: .word 0x02118880
	arm_func_end FUN_020525e8

	arm_func_start FUN_02052618
FUN_02052618: ; 0x02052618
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	ldr r2, _02052724 ; =0x02090608
	mov r4, r0
	ldr r0, _02052728 ; =0x02118854
	mov r6, #5
	ldr r5, _0205272C ; =LAB_02052760
	ldr r3, _02052730 ; =LAB_02052740
	mov r1, r6
	str r2, [r4]
	str r0, [r4, #0x70]
	add r0, r4, #0xbc
	mov r2, #0x14
	str r5, [sp]
	bl FUN_0201e1f8
	ldr r5, _02052734 ; =LAB_020527ac
	ldr r3, _02052738 ; =FUN_02052780
	mov r1, r6
	add r0, r4, #0x120
	mov r2, #0x30
	str r5, [sp]
	bl FUN_0201e1f8
	add r0, r4, #0x210
	bl FUN_021110FC
	ldr r1, _0205273C ; =0x02118880
	add r0, r4, #0x238
	str r1, [r4, #0x22c]
	bl FUN_0202fd38
	add r0, r4, #0x22c
	ldr r1, [r0]
	ldr r1, [r1, #8]
	blx r1
	add r0, r4, #4
	mov r6, #0
	mov r1, r6
	mov r5, #0xc
	mov r2, r5
	bl MemWrite
	sub r0, r5, #0xd
	str r6, [r4, #0x10]
	strb r6, [r4, #0x14]
	str r6, [r4, #0x1c]
	str r6, [r4, #0x20]
	str r6, [r4, #0x24]
	strb r6, [r4, #0x15]
	strh r0, [r4, #0x16]
	strh r0, [r4, #0x18]
	strh r0, [r4, #0x1a]
	str r6, [r4, #0x28]
	mov r0, r6
	add r1, r4, #0x2c
	mov r2, #0x40
	bl FUN_0200787c
	str r6, [r4, #0x6c]
	add r0, r4, #0x70
	bl FUN_020F9CDC
	add r0, r4, #0x22c
	ldr r1, [r0]
	ldr r1, [r1, #8]
	blx r1
	str r6, [r4, #0x340]
	str r6, [r4, #0x344]
	str r6, [r4, #0x348]
	str r6, [r4, #0x34c]
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_02052724: .word 0x02090608
_02052728: .word 0x02118854
_0205272C: .word LAB_02052760
_02052730: .word LAB_02052740
_02052734: .word LAB_020527ac
_02052738: .word FUN_02052780
_0205273C: .word 0x02118880
	arm_func_end FUN_02052618

	arm_func_start LAB_02052740
LAB_02052740: ; 0x02052740
	push {r4, lr}
	ldr r1, _0205275C ; =0x02090628
	mov r4, r0
	str r1, [r4]
	bl FUN_020FC538
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205275C: .word 0x02090628
	arm_func_end LAB_02052740

	arm_func_start LAB_02052760
LAB_02052760: ; 0x02052760
	push {r4, lr}
	ldr r1, _0205277C ; =0x02090628
	mov r4, r0
	str r1, [r4]
	bl FUN_020FC550
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205277C: .word 0x02090628
	arm_func_end LAB_02052760

	arm_func_start FUN_02052780
FUN_02052780: ; 0x02052780
	push {r4, lr}
	mov r4, r0
	ldr r1, _020527A8 ; =0x02090618
	add r0, r4, #0x14
	str r1, [r4]
	bl FUN_021110FC
	mov r0, r4
	bl FUN_02110B80
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_020527A8: .word 0x02090618
	arm_func_end FUN_02052780

	arm_func_start LAB_020527ac
LAB_020527ac: ; 0x020527AC
	push {r4, lr}
	ldr r1, _020527D0 ; =0x02090618
	mov r4, r0
	str r1, [r4]
	bl FUN_02110BB0
	add r0, r4, #0x14
	bl FUN_0211111C
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_020527D0: .word 0x02090618
	arm_func_end LAB_020527ac

	arm_func_start FUN_020527d4
FUN_020527d4: ; 0x020527D4
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x1a0
	bl FUN_0211111C
	mov r4, #5
	ldr r3, _02052818 ; =LAB_020527ac
	mov r1, r4
	add r0, r5, #0xb0
	mov r2, #0x30
	bl FUN_0201e338
	ldr r3, _0205281C ; =LAB_02052760
	mov r1, r4
	add r0, r5, #0x4c
	mov r2, #0x14
	bl FUN_0201e338
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_02052818: .word LAB_020527ac
_0205281C: .word LAB_02052760
	arm_func_end FUN_020527d4

	arm_func_start FUN_02052820
FUN_02052820: ; 0x02052820
	push {r3, r4, r5, lr}
	ldr r1, _02052890 ; =0x02090608
	mov r5, r0
	str r1, [r5]
	bl FUN_02052548
	ldr r1, _02052894 ; =0x02118880
	add r0, r5, #0x22c
	str r1, [r5, #0x22c]
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	add r0, r5, #0x238
	bl FUN_0202fd44
	add r0, r5, #0x210
	bl FUN_0211111C
	add r0, r5, #0x120
	mov r4, #5
	mov r1, r4
	mov r2, #0x30
	ldr r3, _02052898 ; =LAB_020527ac
	bl FUN_0201e338
	mov r1, r4
	add r0, r5, #0xbc
	mov r2, #0x14
	ldr r3, _0205289C ; =LAB_02052760
	bl FUN_0201e338
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_02052890: .word 0x02090608
_02052894: .word 0x02118880
_02052898: .word LAB_020527ac
_0205289C: .word LAB_02052760
	arm_func_end FUN_02052820

	arm_func_start FUN_020528a0
FUN_020528a0: ; 0x020528A0
	push {r3, r4, r5, lr}
	ldr r1, _02052918 ; =0x02090608
	mov r5, r0
	str r1, [r5]
	bl FUN_02052548
	ldr r1, _0205291C ; =0x02118880
	add r0, r5, #0x22c
	str r1, [r5, #0x22c]
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	add r0, r5, #0x238
	bl FUN_0202fd44
	add r0, r5, #0x210
	bl FUN_0211111C
	add r0, r5, #0x120
	mov r4, #5
	mov r1, r4
	mov r2, #0x30
	ldr r3, _02052920 ; =LAB_020527ac
	bl FUN_0201e338
	mov r1, r4
	add r0, r5, #0xbc
	mov r2, #0x14
	ldr r3, _02052924 ; =LAB_02052760
	bl FUN_0201e338
	mov r0, r5
	bl FUN_0201e078
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_02052918: .word 0x02090608
_0205291C: .word 0x02118880
_02052920: .word LAB_020527ac
_02052924: .word LAB_02052760
	arm_func_end FUN_020528a0

	arm_func_start FUN_02052928
FUN_02052928: ; 0x02052928
	push {r4, lr}
	mov r4, r0
	bl FUN_02052548
	mov r0, r4
	bl FUN_0205296c
	pop {r4, pc}
	arm_func_end FUN_02052928

	arm_func_start FUN_02052940
FUN_02052940: ; 0x02052940
	push {r3, lr}
	mov r1, r0
	ldr r0, [r1, #4]
	cmp r0, #0
	movne r0, #1
	popne {r3, pc}
	ldr r0, _02052968 ; =0x02090644
	add r1, r1, #4
	bl FUN_020F316C
	pop {r3, pc}
	.align 2, 0_02052968: .word 0x02090644
	arm_func_end FUN_02052940

	arm_func_start FUN_0205296c
FUN_0205296c: ; 0x0205296C
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	mov r1, #1
	bl FUN_020F338C
	add r0, r4, #4
	bl FUN_020F33FC
	mov r0, #0
	str r0, [r4, #4]
	str r0, [r4, #8]
	strb r0, [r4, #0xc]
	strb r0, [r4, #0xd]
	strb r0, [r4, #0xe]
	pop {r4, pc}
	arm_func_end FUN_0205296c

	arm_func_start FUN_020529a4
FUN_020529a4: ; 0x020529A4
	push {r3, lr}
	ldr r1, [r0, #4]
	cmp r1, #0
	moveq r0, #0
	popeq {r3, pc}
	ldrb r1, [r0, #0xc]
	cmp r1, #0
	movne r0, #1
	popne {r3, pc}
	add r0, r0, #4
	mov r1, #1
	bl FUN_020F330C
	pop {r3, pc}
	arm_func_end FUN_020529a4

	arm_func_start FUN_020529d8
FUN_020529d8: ; 0x020529D8
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x18
	mov r7, r0
	mov r8, r1
	mov r6, r2
	mov r4, #1
	bl FUN_020529a4
	cmp r0, #0
	ldr r0, [r7, #4]
	bne _02052A34
	cmp r0, #0
	bne _02052A10
	mov r0, r7
	bl FUN_02052940
	arm_func_end FUN_020529d8
_02052A10:
	cmp r6, #0
	andne r0, r4, #0xff
	strb r4, [r7, #0x14]
	orrne r0, r0, #2
	strbne r0, [r7, #0x14]
	add sp, sp, #0x18
	str r8, [r7, #0x10]
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
_02052A34:
	mov r5, #0
	add r2, sp, #0x14
	add r3, sp, #0x10
	mov r1, r8
	str r5, [r7, #0x10]
	strb r5, [r7, #0x14]
	bl FUN_020F34F0
	cmp r0, #0
	addeq sp, sp, #0x18
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r7
	bl FUN_02052548
	str r5, [r7, #0x340]
	cmp r6, #0
	beq _02052AAC
	ldr r3, _02052B14 ; =0x0209A250
	ldr ip, [sp, #0x10]
	ldr r0, [r3]
	ldr r2, [sp, #0x14]
	cmp r0, #0
	ldr r1, _02052B18 ; =0x02090660
	beq _02052AA8
	stm sp, {r2, ip}
	str r4, [sp, #8]
	add r2, r7, #0x340
	str r4, [sp, #0xc]
	bl FUN_0202f294
	mov r5, r0
_02052AA8:
	b _02052AE0
_02052AAC:
	ldr r3, _02052B14 ; =0x0209A250
	ldr ip, [sp, #0x10]
	ldr r0, [r3]
	ldr r2, [sp, #0x14]
	cmp r0, #0
	ldr r1, _02052B1C ; =0x0209067C
	beq _02052AE0
	stm sp, {r2, ip}
	str r4, [sp, #8]
	add r2, r7, #0x340
	str r4, [sp, #0xc]
	bl FUN_0202eff0
	mov r5, r0
_02052AE0:
	str r5, [r7, #0x344]
	ldr r0, [r7, #0x344]
	cmp r0, #0
	addle sp, sp, #0x18
	movle r0, #0
	pople {r4, r5, r6, r7, r8, pc}
	mov r0, #1
	cmp r6, #0
	movne r0, #0
	str r0, [r7, #0x348]
	mov r0, #1
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02052B14: .word 0x0209A250
_02052B18: .word 0x02090660
_02052B1C: .word 0x0209067C

	arm_func_start FUN_02052b20
FUN_02052b20: ; 0x02052B20
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020529a4
	cmp r0, #0
	bne _02052B4C
	ldr r0, [r5, #4]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	rsb r0, r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02052b20
_02052B4C:
	ldrb r0, [r5, #0x14]
	cmp r0, #0
	beq _02052B80
	tst r0, #2
	movne r2, #1
	ldr r1, [r5, #0x10]
	moveq r2, #0
	mov r0, r5
	bl FUN_020529d8
	cmp r0, #0
	movne r0, #1
	mvneq r0, #0
	pop {r3, r4, r5, pc}
_02052B80:
	mov r0, r5
	bl FUN_02052c0c
	movs r4, r0
	popne {r3, r4, r5, pc}
	add r0, r5, #0x70
	bl FUN_020FA924
	cmp r0, #0
	beq _02052BBC
	ldr r0, [r5, #0x230]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
_02052BBC:
	add r0, r5, #0x70
	bl FUN_020FA924
	cmp r0, #0
	bne _02052BDC
	add r0, r5, #0x70
	bl FUN_020FA93C
	movs r4, r0
	popne {r3, r4, r5, pc}
_02052BDC:
	ldr r0, [r5, #0x230]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	cmp r0, #0
	bne _02052C04
	add r0, r5, #0x22c
	bl FUN_020FB2AC
	movs r4, r0
	popne {r3, r4, r5, pc}
_02052C04:
	mov r0, r4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02052c0c
FUN_02052c0c: ; 0x02052C0C
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x348]
	cmp r0, #0
	movne r0, #1
	popne {r4, pc}
	ldr r1, [r4, #0x340]
	cmp r1, #0
	beq _02052C3C
	ldr r0, [r4, #0x344]
	cmp r0, #0
	bge _02052C44
	arm_func_end FUN_02052c0c
_02052C3C:
	mov r0, #0
	pop {r4, pc}
_02052C44:
	ldr r0, _02052C6C ; =0x0209A250
	ldr r0, [r0]
	cmp r0, #0
	mvneq r0, #0
	beq _02052C5C
	bl FUN_0202f57c
_02052C5C:
	cmp r0, #0
	moveq r1, #1
	streq r1, [r4, #0x348]
	pop {r4, pc}
	.align 2, 0_02052C6C: .word 0x0209A250

	arm_func_start FUN_02052c70
FUN_02052c70: ; 0x02052C70
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	add r0, sl, #0x70
	bl FUN_020FA930
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sl, #0x348]
	cmp r0, #0
	bne _02052CAC
	mov r0, sl
	bl FUN_02052c0c
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02052c70
_02052CAC:
	ldr r0, [sl, #0x340]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r1, #0
	bl FUN_020539c8
	mov sb, r0
	mov fp, #1
	ldr r0, [sl, #0x340]
	mov r1, fp
	bl FUN_020539c8
	mov r8, r0
	mov r4, #2
	ldr r0, [sl, #0x340]
	mov r1, r4
	bl FUN_020539c8
	mov r7, r0
	ldr r0, [sl, #0x340]
	mov r1, #0
	bl FUN_02053994
	mov r6, r0
	ldr r0, [sl, #0x340]
	mov r1, fp
	bl FUN_02053994
	mov r5, r0
	ldr r0, [sl, #0x340]
	mov r1, r4
	bl FUN_02053994
	cmp sb, #0
	cmpne r8, #0
	mov r4, r0
	cmpne r7, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r1, sb
	mov r2, r6
	add r0, sl, #0x70
	bl FUN_020F9F40
	mov r1, r8
	mov r2, r5
	mov r3, #0
	add r0, sl, #0x70
	bl FUN_020FA814
	add r0, sl, #0x22c
	ldr r3, [r0]
	mov r1, r7
	ldr r3, [r3, #0x1c]
	mov r2, r4
	blx r3
	add r0, sl, #0x70
	mov r1, #0
	mov r2, fp
	bl FUN_020F9F7C
	mov r1, #0
	add r0, sl, #0x70
	mov r2, r1
	bl FUN_020FA838
	mov r1, #0
	add r0, sl, #0x70
	bl FUN_020FA8B8
	ldr r1, _02052DC4 ; =0x0208F6F0
	add r0, sl, #0x70
	ldr r1, [r1, #0x24]
	mov r2, r1
	mov r3, r1
	bl FUN_020FA504
	mov r0, sl
	bl FUN_020524f4
	mov r0, fp
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02052DC4: .word 0x0208F6F0

	arm_func_start FUN_02052dc8
FUN_02052dc8: ; 0x02052DC8
	ldrsh r1, [r0, #0x16]
	cmp r1, #0
	ldrshge r0, [r0, #0x18]
	cmpge r0, #0
	movge r0, #1
	movlt r0, #0
	bx lr
	arm_func_end FUN_02052dc8

	arm_func_start FUN_02052de4
FUN_02052de4: ; 0x02052DE4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	mov sl, r0
	ldr r4, [sl, #0x84]
	cmp r4, #0
	addeq sp, sp, #0x24
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_02052dc8
	cmp r0, #0
	ldrne r0, [sl, #0x34c]
	cmpne r0, #0
	addeq sp, sp, #0x24
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsh r2, [sl, #0x16]
	ldrsh r1, [sl, #0x18]
	mov r0, #0x30
	smlabb r6, r2, r0, r4
	smlabb r7, r1, r0, r4
	ldrsh r5, [sl, #0x1a]
	ldr r1, _02052F98 ; =0x02099F24
	ldr r3, [r6, #0x24]
	ldr r2, [r7, #0x24]
	smlabb r8, r5, r0, r4
	cmp r3, r2
	ldr sb, [r1]
	ldreq r1, [r6, #0x28]
	ldreq r0, [r7, #0x28]
	cmpeq r1, r0
	bne _02052E6C
	ldr r1, [r6, #0x2c]
	ldr r0, [r7, #0x2c]
	cmp r1, r0
	addeq sp, sp, #0x24
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02052de4
_02052E6C:
	add r5, sp, #0x18
	ldr fp, [r6, #0x2c]
	ldr r4, [r6, #0x28]
	ldr r3, [r6, #0x24]
	add r0, sp, #0xc
	mov r2, r5
	add r1, sl, #0x1c
	str r3, [sp, #0xc]
	str r4, [sp, #0x10]
	str fp, [sp, #0x14]
	bl FUN_02009734
	mov r0, #2
	str r0, [sp]
	mov r4, #0
	str r4, [sp, #4]
	mov fp, #0x1000
	str fp, [sp, #8]
	mov r0, sb
	ldm r5, {r1, r2, r3}
	bl FUN_020F794C
	ldr r3, [r7, #0x2c]
	ldr r2, [r7, #0x28]
	ldr r1, [r7, #0x24]
	mov r0, r5
	str r1, [sp, #0x18]
	str r2, [sp, #0x1c]
	add r1, sl, #0x1c
	mov r2, r5
	str r3, [sp, #0x20]
	bl FUN_02009734
	mov r7, #1
	str r7, [sp]
	stmib sp, {r4, fp}
	mov r0, sb
	ldm r5, {r1, r2, r3}
	bl FUN_020F79EC
	ldrsh r1, [sl, #0x1a]
	sub r0, r7, #2
	cmp r1, r0
	addeq sp, sp, #0x24
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [r6, #0x24]
	ldr r0, [r8, #0x24]
	cmp r1, r0
	ldreq r1, [r6, #0x28]
	ldreq r0, [r8, #0x28]
	cmpeq r1, r0
	ldreq r1, [r6, #0x2c]
	ldreq r0, [r8, #0x2c]
	cmpeq r1, r0
	bne _02052F58
	mov r0, sb
	str r4, [sp, #0x18]
	str fp, [sp, #0x1c]
	str r4, [sp, #0x20]
	ldm r5, {r1, r2, r3}
	bl FUN_020F7BB0
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02052F58:
	add r4, sp, #0x18
	ldr r6, [r8, #0x2c]
	ldr r5, [r8, #0x28]
	ldr r3, [r8, #0x24]
	add r1, sp, #0xc
	mov r0, r4
	mov r2, r4
	str r3, [sp, #0x18]
	str r5, [sp, #0x1c]
	str r6, [sp, #0x20]
	bl FUN_02009764
	mov r0, sb
	ldm r4, {r1, r2, r3}
	bl FUN_020F7BB0
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02052F98: .word 0x02099F24

	arm_func_start FUN_02052f9c
FUN_02052f9c: ; 0x02052F9C
	push {r4, lr}
	ldr r2, _02053028 ; =0x02099F18
	mov r4, r0
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	cmp r0, #0
	popne {r4, pc}
	ldr r0, [r4, #0x34c]
	cmp r0, #0
	popeq {r4, pc}
	add r0, r4, #0x22c
	ldr r2, [r0]
	ldr r2, [r2, #0x24]
	blx r2
	ldr r1, [r4, #0x250]
	add r0, r4, #0x70
	mvn r2, #0
	bl FUN_020FA340
	add r0, r4, #0x70
	bl FUN_020FA300
	add r0, r4, #0x22c
	bl FUN_020FB02C
	cmp r0, #0
	ldrne r0, [r4, #0x6c]
	ldrne r1, [r4, #0x28]
	cmpne r0, r1
	addlt r0, r0, #1
	strlt r0, [r4, #0x6c]
	cmplt r0, r1
	popge {r4, pc}
	add r0, r4, r0, lsl #2
	ldr r1, [r0, #0x2c]
	add r0, r4, #0x22c
	bl FUN_020FAF5C
	pop {r4, pc}
	.align 2, 0_02053028: .word 0x02099F18
	arm_func_end FUN_02052f9c

	arm_func_start FUN_0205302c
FUN_0205302c: ; 0x0205302C
	mov r1, #0
	str r1, [r0, #0x6c]
	str r1, [r0, #0x28]
	str r1, [r0, #0x34c]
	bx lr
	arm_func_end FUN_0205302c

	arm_func_start FUN_02053040
FUN_02053040: ; 0x02053040
	cmp r1, #0
	movlt r0, #0
	bxlt lr
	ldr r3, [r0, #0x28]
	cmp r3, #0x10
	movge r0, #0
	bxge lr
	lsl r1, r1, #0x10
	asr r2, r1, #0x10
	add r1, r0, r3, lsl #2
	str r2, [r1, #0x2c]
	ldr r1, [r0, #0x28]
	add r1, r1, #1
	str r1, [r0, #0x28]
	mov r0, #1
	bx lr
	arm_func_end FUN_02053040

	arm_func_start FUN_02053080
FUN_02053080: ; 0x02053080
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x22c
	bl FUN_020FB110
	mov r1, r0
	mov r0, r4
	bl FUN_02053040
	pop {r4, pc}
	arm_func_end FUN_02053080

	arm_func_start FUN_020530a0
FUN_020530a0: ; 0x020530A0
	push {r4, lr}
	mov r4, r0
	bl FUN_02052dc8
	cmp r0, #0
	popeq {r4, pc}
	ldr r0, [r4, #0x34c]
	cmp r0, #0
	popne {r4, pc}
	ldr r1, [r4, #0x2c]
	mov r3, #0
	mov r2, #1
	add r0, r4, #0x22c
	str r3, [r4, #0x6c]
	str r2, [r4, #0x34c]
	bl FUN_020FAF5C
	pop {r4, pc}
	arm_func_end FUN_020530a0

	arm_func_start FUN_020530e0
FUN_020530e0: ; 0x020530E0
	push {r4, lr}
	mov r4, r0
	bl FUN_02052dc8
	cmp r0, #0
	moveq r0, #1
	popeq {r4, pc}
	ldr r0, [r4, #0x34c]
	cmp r0, #0
	moveq r0, #1
	popeq {r4, pc}
	ldr r1, [r4, #0x6c]
	ldr r0, [r4, #0x28]
	cmp r1, r0
	blt _0205312C
	add r0, r4, #0x22c
	bl FUN_020FB02C
	cmp r0, #0
	movne r0, #1
	popne {r4, pc}
	arm_func_end FUN_020530e0
_0205312C:
	mov r0, #0
	pop {r4, pc}

	arm_func_start FUN_02053134
FUN_02053134: ; 0x02053134
	push {r4, lr}
	ldr r1, _02053160 ; =0x02090618
	mov r4, r0
	str r1, [r4]
	bl FUN_02110BB0
	add r0, r4, #0x14
	bl FUN_0211111C
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02053160: .word 0x02090618
	arm_func_end FUN_02053134

	arm_func_start LAB_02053164
LAB_02053164: ; 0x02053164
	push {r4, lr}
	ldr r1, _02053188 ; =0x02090628
	mov r4, r0
	str r1, [r4]
	bl FUN_020FC550
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02053188: .word 0x02090628
	arm_func_end LAB_02053164

	arm_func_start FUN_0205318c
FUN_0205318c: ; 0x0205318C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x18
	mov r6, r2
	movs r7, r0
	cmpne r1, #0
	cmpne r6, #0
	addeq sp, sp, #0x18
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r3, sp, #0xc
	bl FUN_02053214
	ldr r0, [sp, #0xc]
	cmp r0, #0
	ldreq r0, [sp, #0x10]
	cmpeq r0, #0
	ldreq r0, [sp, #0x14]
	cmpeq r0, #0
	addeq sp, sp, #0x18
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r5, sp, #0xc
	mov r0, r5
	mov r1, r5
	bl FUN_020098b0
	add r4, sp, #0
	mov r0, r7
	mov r1, r6
	mov r2, r4
	bl FUN_02009764
	mov r0, r5
	mov r1, r4
	bl FUN_02009794
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0205318c

	arm_func_start FUN_02053214
FUN_02053214: ; 0x02053214
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x18
	mov r7, r2
	movs r8, r0
	cmpne r1, #0
	mov r6, r3
	cmpne r7, #0
	cmpne r6, #0
	addeq sp, sp, #0x18
	popeq {r4, r5, r6, r7, r8, pc}
	add r5, sp, #0xc
	mov r0, r1
	mov r1, r8
	mov r2, r5
	bl FUN_02009764
	add r4, sp, #0
	mov r0, r7
	mov r1, r8
	mov r2, r4
	bl FUN_02009764
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_020097d0
	mov r0, r5
	mov r1, r4
	mov r2, r6
	bl FUN_020097d0
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02053214

	arm_func_start FUN_0205328c
FUN_0205328c: ; 0x0205328C
	ldr ip, [r0]
	ldr r3, [r1, #4]
	ldr r2, [r0, #4]
	ldr r0, [r1]
	smull r1, r3, ip, r3
	adds ip, r1, #0x800
	smull r1, r0, r2, r0
	adc r2, r3, #0
	adds r1, r1, #0x800
	lsr r3, ip, #0xc
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	sub r0, r3, r1
	bx lr
	arm_func_end FUN_0205328c

	arm_func_start FUN_020532cc
FUN_020532cc: ; 0x020532CC
	ldr ip, [r0]
	ldr r3, [r1]
	ldr r2, [r0, #4]
	ldr r0, [r1, #4]
	smull r1, r3, ip, r3
	adds ip, r1, #0x800
	smull r1, r0, r2, r0
	adc r2, r3, #0
	adds r1, r1, #0x800
	lsr r3, ip, #0xc
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	add r0, r3, r1
	bx lr
	arm_func_end FUN_020532cc

	arm_func_start FUN_0205330c
FUN_0205330c: ; 0x0205330C
	push {r3, lr}
	bl FUN_0205328c
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_0205330c

	arm_func_start FUN_02053324
FUN_02053324: ; 0x02053324
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x24
	mov r7, r0
	mov r0, r1
	add sb, sp, #0x18
	mov r5, r2
	mov r1, r7
	mov r2, sb
	mov r4, r3
	ldr r6, [sp, #0x40]
	bl FUN_02009764
	add r8, sp, #0xc
	mov r0, r4
	mov r1, r5
	mov r2, r8
	bl FUN_02009764
	mov r0, sb
	mov r1, r8
	bl FUN_0205330c
	cmp r0, #0
	addne sp, sp, #0x24
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, pc}
	add r4, sp, #0
	mov r0, r5
	mov r1, r7
	mov r2, r4
	bl FUN_02009764
	mov r0, r8
	mov r1, r4
	bl FUN_0205328c
	mov r5, r0
	mov r0, r8
	mov r1, sb
	bl FUN_0205328c
	ldr r1, [sp, #0x18]
	mov r4, r0
	smull r2, r0, r1, r5
	adds r1, r2, #0x800
	adc r2, r0, #0
	lsr r0, r1, #0xc
	mov r1, r4
	orr r0, r0, r2, lsl #20
	mov r8, #0
	bl FUN_0200958c
	ldr r2, [r7]
	mov r1, r4
	add r0, r2, r0
	str r0, [r6]
	ldr r0, [sp, #0x1c]
	smull r3, r2, r0, r5
	adds r0, r3, #0x800
	adc r2, r2, #0
	lsr r0, r0, #0xc
	orr r0, r0, r2, lsl #20
	bl FUN_0200958c
	ldr r1, [r7, #4]
	add r0, r1, r0
	stmib r6, {r0, r8}
	mov r0, #1
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02053324

	arm_func_start FUN_0205341c
FUN_0205341c: ; 0x0205341C
	ldr r2, [r0, #4]
	ldr r3, [r0]
	rsb r2, r2, #0
	stm r1, {r2, r3}
	mov r0, #0
	str r0, [r1, #8]
	bx lr
	arm_func_end FUN_0205341c

	arm_func_start FUN_02053438
FUN_02053438: ; 0x02053438
	mov r1, #0x1000
	rsb r1, r1, #0
	and r0, r0, r1
	add r0, r0, #0x1000
	bx lr
	arm_func_end FUN_02053438

	arm_func_start FUN_0205344c
FUN_0205344c: ; 0x0205344C
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x30
	add r7, sp, #0x24
	mov r4, r2
	mov r5, r0
	mov r8, r1
	mov r0, r8
	mov r1, r5
	mov r2, r7
	bl FUN_02009764
	add r6, sp, #0x18
	mov r0, r4
	mov r1, r5
	mov r2, r6
	bl FUN_02009764
	mov r0, r5
	add r5, sp, #0xc
	mov r1, r8
	mov r2, r5
	bl FUN_02009764
	mov r0, r4
	add r4, sp, #0
	mov r1, r8
	mov r2, r4
	bl FUN_02009764
	mov r0, r7
	mov r1, r6
	bl FUN_0205328c
	cmp r0, #0
	bne _020534F4
	mov r0, r7
	mov r1, r6
	bl FUN_020532cc
	cmp r0, #0
	ble _020534F4
	mov r0, r5
	mov r1, r4
	bl FUN_020532cc
	cmp r0, #0
	addgt sp, sp, #0x30
	movgt r0, #1
	popgt {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0205344c
_020534F4:
	mov r0, #0
	add sp, sp, #0x30
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02053500
FUN_02053500: ; 0x02053500
	push {r4, lr}
	mov r3, r0
	ldr r0, [r1]
	ldr r1, [r3]
	mov r4, r2
	bl FUN_02009a98
	strh r0, [r4]
	pop {r4, pc}
	arm_func_end FUN_02053500

	arm_func_start FUN_02053520
FUN_02053520: ; 0x02053520
	push {r3, lr}
	asr r0, r0, #4
	lsl lr, r0, #1
	add r0, lr, #1
	ldr ip, _02053550 ; =0x02087874
	lsl r3, r0, #1
	lsl r0, lr, #1
	ldrsh r3, [ip, r3]
	ldrsh r0, [ip, r0]
	str r3, [r1]
	str r0, [r2]
	pop {r3, pc}
	.align 2, 0_02053550: .word 0x02087874
	arm_func_end FUN_02053520

	arm_func_start FUN_02053554
FUN_02053554: ; 0x02053554
	push {r4, r5, lr}
	sub sp, sp, #0xc
	mov r5, r2
	mov r3, r0
	mov r0, r1
	add r2, sp, #0
	mov r4, #0
	mov r1, r3
	str r4, [r2]
	str r4, [r2, #4]
	str r4, [r2, #8]
	bl FUN_02009764
	ldr r0, [sp]
	cmp r0, #0
	ldreq r0, [sp, #8]
	cmpeq r0, #0
	addeq sp, sp, #0xc
	moveq r0, r4
	popeq {r4, r5, pc}
	add r0, sp, #0
	add r1, sp, #8
	mov r2, r5
	bl FUN_02053500
	mov r0, #1
	add sp, sp, #0xc
	pop {r4, r5, pc}
	arm_func_end FUN_02053554

	arm_func_start FUN_020535bc
FUN_020535bc: ; 0x020535BC
	push {r3, lr}
	sub sp, sp, #0x18
	ldr r2, [r0, #8]
	ldr r0, [r0]
	mov ip, #0
	str r0, [sp]
	str ip, [sp, #4]
	str r2, [sp, #8]
	ldr r3, [r1, #8]
	ldr r2, [r1]
	add r0, sp, #0
	add r1, sp, #0xc
	str r2, [sp, #0xc]
	str ip, [sp, #0x10]
	str r3, [sp, #0x14]
	bl FUN_02009a1c
	add sp, sp, #0x18
	pop {r3, pc}
	arm_func_end FUN_020535bc

	arm_func_start FUN_02053604
FUN_02053604: ; 0x02053604
	subs r1, r1, r3
	rsbmi r1, r1, #0
	subs r0, r0, r2
	rsbmi r0, r0, #0
	add r0, r0, r1
	bx lr
	arm_func_end FUN_02053604

	arm_func_start FUN_0205361c
FUN_0205361c: ; 0x0205361C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x28
	ldr r4, [r0]
	ldr r0, [r0, #8]
	str r4, [sp]
	str r0, [sp, #0xc]
	ldr r0, [r3, #8]
	ldr r4, [r3]
	str r0, [sp, #0x14]
	ldr r0, [sp]
	ldr lr, [r1, #8]
	ldr ip, [r1]
	mov r1, r4
	sub sb, r1, r0
	ldr r8, [r2, #8]
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #0x14]
	ldr r5, [r2]
	sub r6, r1, r0
	sub r7, r8, r0
	ldr r1, [sp]
	ldr r0, [sp]
	str r4, [sp, #4]
	sub r4, r5, r0
	sub r3, ip, r1
	smull r2, r1, r4, r6
	ldr r0, [sp, #0xc]
	adds r2, r2, #0x800
	sub fp, lr, r0
	asr r0, sb, #0x1f
	str r0, [sp, #8]
	asr r0, r7, #0x1f
	str r0, [sp, #0x10]
	asr r0, r6, #0x1f
	str r0, [sp, #0x18]
	asr r0, r4, #0x1f
	str r0, [sp, #0x1c]
	mov r0, #0
	adc r1, r1, r0
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	smull r1, sl, r7, sb
	adds r1, r1, #0x800
	adc sl, sl, r0
	lsr r1, r1, #0xc
	orr r1, r1, sl, lsl #20
	sub r1, r2, r1
	smull r2, sl, r6, r3
	adds r2, r2, #0x800
	adc sl, sl, r0
	lsr r2, r2, #0xc
	orr r2, r2, sl, lsl #20
	smull sl, r3, r7, r3
	str r3, [sp, #0x24]
	str sl, [sp, #0x20]
	smull r3, sl, sb, fp
	adds r3, r3, #0x800
	adc sl, sl, r0
	lsr r3, r3, #0xc
	orr r3, r3, sl, lsl #20
	sub r3, r2, r3
	smull r2, sl, r4, fp
	adds r2, r2, #0x800
	adc sl, sl, r0
	lsr r2, r2, #0xc
	orr r2, r2, sl, lsl #20
	ldr sl, [sp, #0x20]
	adds fp, sl, #0x800
	ldr sl, [sp, #0x24]
	lsr fp, fp, #0xc
	adc sl, sl, r0
	orr fp, fp, sl, lsl #20
	sub r2, r2, fp
	cmp r1, #0
	bge _02053778
	cmp r3, #0
	cmple r2, #0
	bgt _0205376C
	add r0, r3, r2
	bl FUN_0201f9bc
	cmp r0, #1
	addge sp, sp, #0x28
	movge r0, #1
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0205361c
_0205376C:
	add sp, sp, #0x28
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02053778:
	ble _020537AC
	cmp r3, #0
	cmpge r2, #0
	blt _020537A0
	add r0, r3, r2
	bl FUN_0201f9bc
	cmp r0, #1
	addge sp, sp, #0x28
	movge r0, #1
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020537A0:
	add sp, sp, #0x28
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020537AC:
	ldr r3, [sp, #8]
	umull r2, r1, r4, sb
	mla r1, r4, r3, r1
	ldr r3, [sp, #0x1c]
	mla r1, r3, sb, r1
	adds r3, r2, #0x800
	adc r2, r1, r0
	lsr r1, r3, #0xc
	orr r1, r1, r2, lsl #20
	umull r4, r3, r7, r6
	ldr r2, [sp, #0x18]
	adds r4, r4, #0x800
	mla r3, r7, r2, r3
	ldr r2, [sp, #0x10]
	mla r3, r2, r6, r3
	adc r2, r3, r0
	lsr r3, r4, #0xc
	orr r3, r3, r2, lsl #20
	add r1, r1, r3
	cmp r1, #0
	addle sp, sp, #0x28
	movle r0, #1
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #4]
	sub r2, r5, ip
	sub r1, r1, ip
	smull r3, r1, r2, r1
	adds r2, r3, #0x800
	ldr r3, [sp, #0x14]
	sub r4, r8, lr
	sub r3, r3, lr
	smull r6, r3, r4, r3
	adc r7, r1, r0
	adds r4, r6, #0x800
	lsr r6, r2, #0xc
	adc r1, r3, r0
	lsr r2, r4, #0xc
	orr r6, r6, r7, lsl #20
	orr r2, r2, r1, lsl #20
	add r1, r6, r2
	cmp r1, #0
	addle sp, sp, #0x28
	movle r0, #1
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp]
	sub r2, r1, r5
	sub r1, ip, r5
	smull r3, r5, r2, r1
	ldr r1, [sp, #0xc]
	adds r6, r3, #0x800
	sub r2, r1, r8
	sub r1, lr, r8
	smull r4, r3, r2, r1
	adc r5, r5, r0
	adds r2, r4, #0x800
	lsr r4, r6, #0xc
	adc r1, r3, r0
	lsr r2, r2, #0xc
	orr r4, r4, r5, lsl #20
	orr r2, r2, r1, lsl #20
	add r1, r4, r2
	cmp r1, #0
	movle r0, #1
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_020538b0
FUN_020538b0: ; 0x020538B0
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r1
	mov r7, r0
	mov r5, r2
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	mov r1, #0x5c
	bl FUN_02024160
	movs r4, r0
	mov r1, #0x2f
	bne _020538E4
	mov r0, r6
	b _020538E4
	arm_func_end FUN_020538b0
_020538E4:
	bl FUN_02024160
	cmp r0, #0
	bne _020538FC
	cmp r4, #0
	addne r6, r4, #1
	b _02053900
_020538FC:
	add r6, r0, #1
_02053900:
	mov r0, r7
	mov r1, r6
	mov r2, r5
	bl _strncpy
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02053914
FUN_02053914: ; 0x02053914
	ldrsb r2, [r1]
	mov ip, #0
	cmp r2, #0
	beq _02053950
	ldr r3, _0205395C ; =0x0208BFB8
	arm_func_end FUN_02053914
_02053928:
	ldrsb r2, [r1, ip]
	cmp r2, #0
	blt _0205393C
	cmp r2, #0x80
	ldrblt r2, [r3, r2]
_0205393C:
	strb r2, [r0, ip]
	add ip, ip, #1
	ldrsb r2, [r1, ip]
	cmp r2, #0
	bne _02053928
_02053950:
	mov r1, #0
	strb r1, [r0, ip]
	bx lr
	.align 2, 0_0205395C: .word 0x0208BFB8

	arm_func_start FUN_02053960
FUN_02053960: ; 0x02053960
	cmp r0, #0
	moveq r0, #0
	bxeq lr
	cmp r1, #0
	blt _02053980
	ldr r2, [r0]
	cmp r1, r2
	blo _02053988
	arm_func_end FUN_02053960
_02053980:
	mov r0, #0
	bx lr
_02053988:
	add r0, r0, r1, lsl #3
	ldr r0, [r0, #4]
	bx lr

	arm_func_start FUN_02053994
FUN_02053994: ; 0x02053994
	cmp r0, #0
	moveq r0, #0
	bxeq lr
	cmp r1, #0
	blt _020539B4
	ldr r2, [r0]
	cmp r1, r2
	blo _020539BC
	arm_func_end FUN_02053994
_020539B4:
	mov r0, #0
	bx lr
_020539BC:
	add r0, r0, r1, lsl #3
	ldr r0, [r0, #8]
	bx lr

	arm_func_start FUN_020539c8
FUN_020539c8: ; 0x020539C8
	push {r4, lr}
	mov r4, r0
	bl FUN_02053960
	cmp r0, #0
	moveq r0, #0
	addne r0, r4, r0
	pop {r4, pc}
	arm_func_end FUN_020539c8

	arm_func_start FUN_020539e4
FUN_020539e4: ; 0x020539E4
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r1
	mov r7, r0
	mov r5, r2
	mov r4, r3
	beq _02053A08
	mov r1, #0
	bl FUN_02053994
	str r0, [r6]
	arm_func_end FUN_020539e4
_02053A08:
	cmp r5, #0
	beq _02053A20
	mov r0, r7
	mov r1, #0
	bl FUN_020539c8
	str r0, [r5]
_02053A20:
	cmp r4, #0
	beq _02053A38
	mov r0, r7
	mov r1, #1
	bl FUN_02053994
	str r0, [r4]
_02053A38:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	mov r1, #1
	bl FUN_020539c8
	ldr r1, [sp, #0x18]
	str r0, [r1]
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02053a5c
FUN_02053a5c: ; 0x02053A5C
	ldr r1, _02053A6C ; =0x00000F3C
	add r0, r0, r0, lsl #1
	sub r0, r1, r0
	bx lr
	.align 2, 0_02053A6C: .word 0x00000F3C
	arm_func_end FUN_02053a5c

	arm_func_start FUN_02053a70
FUN_02053a70: ; 0x02053A70
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x30
	ldr r1, [sp, #0x5c]
	ldr r2, [sp, #0x54]
	asr r1, r1, #4
	asr r3, r2, #4
	ldr r4, [sp, #0x58]
	lsl r8, r1, #1
	asr r2, r4, #4
	mov sb, r0
	lsl r6, r3, #1
	lsl r7, r2, #1
	bl FUN_020085cc
	add r0, r8, #1
	ldr r4, _02053B44 ; =0x02087874
	lsl r1, r8, #1
	lsl r0, r0, #1
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r0]
	add r5, sp, #0
	mov r0, r5
	blx FUN_02008698
	mov r0, sb
	mov r1, r5
	mov r2, sb
	bl FUN_02008a28
	add r2, r7, #1
	lsl r1, r7, #1
	lsl r2, r2, #1
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r2]
	mov r0, r5
	blx FUN_0200867c
	mov r0, sb
	mov r1, r5
	mov r2, sb
	bl FUN_02008a28
	add r2, r6, #1
	lsl r1, r6, #1
	lsl r2, r2, #1
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r2]
	mov r0, r5
	blx FUN_0200865c
	mov r1, r5
	mov r0, sb
	mov r2, sb
	bl FUN_02008a28
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02053B44: .word 0x02087874
	arm_func_end FUN_02053a70

	arm_func_start FUN_02053b48
FUN_02053b48: ; 0x02053B48
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x30
	ldr r1, [sp, #0x54]
	ldr r2, [sp, #0x58]
	asr r3, r1, #4
	ldr r4, [sp, #0x5c]
	asr r2, r2, #4
	asr r1, r4, #4
	lsl r6, r3, #1
	mov sb, r0
	lsl r7, r2, #1
	lsl r8, r1, #1
	bl FUN_020085cc
	add r0, r6, #1
	ldr r4, _02053C1C ; =0x02087874
	lsl r1, r6, #1
	lsl r0, r0, #1
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r0]
	add r5, sp, #0
	mov r0, r5
	blx FUN_0200865c
	mov r0, sb
	mov r1, r5
	mov r2, sb
	bl FUN_02008a28
	add r2, r7, #1
	lsl r1, r7, #1
	lsl r2, r2, #1
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r2]
	mov r0, r5
	blx FUN_0200867c
	mov r0, sb
	mov r1, r5
	mov r2, sb
	bl FUN_02008a28
	add r2, r8, #1
	lsl r1, r8, #1
	lsl r2, r2, #1
	ldrsh r1, [r4, r1]
	ldrsh r2, [r4, r2]
	mov r0, r5
	blx FUN_02008698
	mov r1, r5
	mov r0, sb
	mov r2, sb
	bl FUN_02008a28
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02053C1C: .word 0x02087874
	arm_func_end FUN_02053b48

	arm_func_start FUN_02053c20
FUN_02053c20: ; 0x02053C20
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	mov r6, r1
	movs r7, r0
	cmpne r6, #0
	addeq sp, sp, #0x10
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r4, sp, #0
	mov r5, #0
	mov r0, r6
	str r5, [r4]
	str r5, [r4, #4]
	str r5, [r4, #8]
	str r5, [r4, #0xc]
	bl _strlen
	mov r2, r0
	mov r0, r4
	mov r1, r6
	bl FUN_020218d4
	cmp r7, #0
	addne r5, r7, #0x40
	cmp r5, #0
	addeq sp, sp, #0x10
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r1, sp, #0
	mov r0, r5
	bl FUN_02067c64
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02053c20

	arm_func_start FUN_02053c9c
FUN_02053c9c: ; 0x02053C9C
	cmp r0, #0
	moveq r0, #0
	ldrne r1, [r0, #0x38]
	addne r0, r0, r1
	bx lr
	arm_func_end FUN_02053c9c

	arm_func_start FUN_02053cb0
FUN_02053cb0: ; 0x02053CB0
	push {r3, lr}
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_02067dd8
	bl FUN_02053c9c
	pop {r3, pc}
	arm_func_end FUN_02053cb0

	arm_func_start FUN_02053ccc
FUN_02053ccc: ; 0x02053CCC
	push {r3, lr}
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_02067dd8
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_02063abc
	pop {r3, pc}
	arm_func_end FUN_02053ccc

	arm_func_start FUN_02053cf4
FUN_02053cf4: ; 0x02053CF4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x18
	mov r8, r1
	movs sb, r0
	mov r7, r3
	cmpne r8, #0
	cmpne r7, #0
	addeq sp, sp, #0x18
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	asr r2, r2, #4
	lsl r3, r2, #1
	add r2, r3, #1
	lsl r5, r3, #1
	ldr r6, _02053DEC ; =0x02087874
	add r4, sp, #0xc
	lsl r3, r2, #1
	ldrsh r5, [r6, r5]
	mov r2, r4
	ldrsh r6, [r6, r3]
	bl FUN_02009764
	ldr lr, [sp, #0x14]
	ldr ip, [sp, #0xc]
	mov r1, r8
	smull r3, r0, lr, r5
	mov r2, r4
	smull sl, r8, ip, r6
	smull r5, r4, ip, r5
	smull ip, r6, lr, r6
	adds lr, sl, #0x800
	adc sl, r8, #0
	adds r3, r3, #0x800
	lsr r8, lr, #0xc
	adc r0, r0, #0
	lsr r3, r3, #0xc
	orr r8, r8, sl, lsl #20
	orr r3, r3, r0, lsl #20
	sub r0, r8, r3
	adds r3, r5, #0x800
	str r0, [sp]
	adc r0, r4, #0
	lsr r4, r3, #0xc
	adds r3, ip, #0x800
	orr r4, r4, r0, lsl #20
	adc r0, r6, #0
	lsr r3, r3, #0xc
	orr r3, r3, r0, lsl #20
	add r3, r4, r3
	add r0, sp, #0
	str r3, [sp, #8]
	bl FUN_02009734
	ldr r1, [sb, #4]
	ldr r0, [sp, #0xc]
	str r1, [sp, #0x10]
	str r0, [r7]
	ldr r1, [sp, #0x10]
	mov r0, #1
	str r1, [r7, #4]
	ldr r1, [sp, #0x14]
	str r1, [r7, #8]
	add sp, sp, #0x18
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02053DEC: .word 0x02087874
	arm_func_end FUN_02053cf4

	arm_func_start FUN_02053df0
FUN_02053df0: ; 0x02053DF0
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	add r7, sp, #0
	cmp r3, #0
	mov r6, r1
	mov r5, r2
	ldm r0, {r0, r1, r2}
	stm r7, {r0, r1, r2}
	ldr r4, [sp, #0x30]
	cmpne r3, #0x8000
	beq _02053E34
	lsl r2, r3, #0x10
	mov r0, r7
	mov r1, r6
	mov r3, r7
	lsr r2, r2, #0x10
	bl FUN_02053cf4
	arm_func_end FUN_02053df0
_02053E34:
	ldr r7, [r5]
	ldr r3, [r6]
	ldr r1, [r6, #4]
	sub r3, r3, r7, asr #1
	sub ip, r3, r4
	add r3, ip, r7
	ldr r2, [r5, #4]
	mov r0, #0
	ldr r7, [r5, #8]
	ldr r6, [r6, #8]
	sub r1, r1, r2, asr #1
	sub r8, r1, r4
	sub r6, r6, r7, asr #1
	sub sb, r6, r4
	ldr r1, [sp]
	add sl, sb, r7
	add r2, r8, r2
	mov r7, r0
	add r3, r3, r4, lsl #1
	cmp ip, r1
	cmple r1, r3
	movle r7, #1
	add r2, r2, r4, lsl #1
	mov r5, r0
	mov r6, r0
	mov lr, r0
	add r4, sl, r4, lsl #1
	cmp r7, #0
	beq _02053EB4
	ldr r1, [sp, #4]
	cmp r8, r1
	movle lr, #1
_02053EB4:
	cmp lr, #0
	beq _02053EC8
	ldr r1, [sp, #4]
	cmp r1, r2
	movle r6, #1
_02053EC8:
	cmp r6, #0
	beq _02053EDC
	ldr r1, [sp, #8]
	cmp sb, r1
	movle r5, #1
_02053EDC:
	cmp r5, #0
	addeq sp, sp, #0xc
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r1, [sp, #8]
	cmp r1, r4
	movle r0, #1
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02053efc
FUN_02053efc: ; 0x02053EFC
	push {r3, r4, r5, lr}
	sub sp, sp, #0x18
	ldr ip, [r1, #4]
	ldr r4, [r0, #4]
	mov r5, r2
	subs r2, ip, r4
	rsbmi r2, r2, #0
	cmp r2, r3, asr #1
	addgt sp, sp, #0x18
	movgt r0, #0
	popgt {r3, r4, r5, pc}
	ldr r2, [r1, #8]
	ldr r1, [r1]
	mov r4, #0
	str r1, [sp]
	str r4, [sp, #4]
	str r2, [sp, #8]
	ldr r3, [r0, #8]
	ldr r2, [r0]
	add r0, sp, #0
	add r1, sp, #0xc
	str r2, [sp, #0xc]
	str r4, [sp, #0x10]
	str r3, [sp, #0x14]
	bl FUN_02009a1c
	ldr r1, [sp, #0x28]
	add r1, r5, r1
	cmp r0, r1
	movle r4, #1
	mov r0, r4
	add sp, sp, #0x18
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02053efc

	arm_func_start FUN_02053f7c
FUN_02053f7c: ; 0x02053F7C
	push {r3, lr}
	ldr r1, _02053FB8 ; =0x0209A1A8
	ldr r2, _02053FBC ; =0x04000320
	ldrb r3, [r1, #1]
	ldrh r1, [r2]
	cmp r3, #0
	ble _02053FB0
	cmp r1, r3
	poplt {r3, pc}
	sub r1, r2, #0x2c0
	ldrh r1, [r1]
	tst r1, #0x1000
	popne {r3, pc}
	arm_func_end FUN_02053f7c
_02053FB0:
	bl FUN_02064d40
	pop {r3, pc}
	.align 2, 0_02053FB8: .word 0x0209A1A8
_02053FBC: .word 0x04000320

	arm_func_start FUN_02053fc0
FUN_02053fc0: ; 0x02053FC0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r2
	mov r8, r3
	mov sl, r1
	ldr r1, [r8]
	ldrh r7, [sb]
	add r5, sl, #8
	cmp r1, #0
	add r6, r5, r7, lsl #3
	bgt _02054060
	mov fp, #0x3f000000
	mov r4, fp
	arm_func_end FUN_02053fc0
_02053FF0:
	ldrh r0, [r6, #2]
	mov r6, r5
	strh r0, [sb]
	add r0, sl, r0, lsl #3
	ldr r0, [r0, #0xc]
	cmp r0, #0
	lsl r0, r0, #0xc
	beq _02054024
	bl FUN_0201f74c
	mov r1, r0
	mov r0, r4
	bl FUN_02020274
	b _02054030
_02054024:
	bl FUN_0201f74c
	mov r1, fp
	bl FUN_020204a4
_02054030:
	bl FUN_0201fdac
	str r0, [r8]
	ldrh r1, [sb]
	cmp r1, #0
	moveq r0, #2
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r7, r1
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r0, #0
	ble _02053FF0
	b _02054068
_02054060:
	sub r0, r1, r0
	str r0, [r8]
_02054068:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02054070
FUN_02054070: ; 0x02054070
	push {r3, lr}
	asr ip, r0, #3
	cmp ip, #1
	mov lr, #0
	ble _02054094
	arm_func_end FUN_02054070
_02054084:
	asr ip, ip, #1
	cmp ip, #1
	add lr, lr, #1
	bgt _02054084
_02054094:
	mov ip, #8
	mvn ip, ip, lsl lr
	tst r0, ip
	addne lr, lr, #1
	asr r0, r1, #3
	str lr, [r2]
	cmp r0, #1
	mov r2, #0
	ble _020540C8
_020540B8:
	asr r0, r0, #1
	cmp r0, #1
	add r2, r2, #1
	bgt _020540B8
_020540C8:
	mov r0, #8
	mvn r0, r0, lsl r2
	tst r1, r0
	addne r2, r2, #1
	str r2, [r3]
	pop {r3, pc}

	arm_func_start FUN_020540e0
FUN_020540e0: ; 0x020540E0
	mov r1, #0
	str r1, [r0, #4]
	str r1, [r0, #0xc]
	bx lr
	arm_func_end FUN_020540e0

	arm_func_start FUN_020540f0
FUN_020540f0: ; 0x020540F0
	bx lr
	arm_func_end FUN_020540f0

	arm_func_start FUN_020540f4
FUN_020540f4: ; 0x020540F4
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0xc]
	cmp r0, #0
	beq _02054114
	bl FUN_02086738
	mov r0, #0
	str r0, [r4, #0xc]
	arm_func_end FUN_020540f4
_02054114:
	ldr r0, [r4, #4]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_02086738
	ldr r0, [r4, #8]
	bl FUN_02086738
	mov r0, #0
	str r0, [r4, #4]
	str r0, [r4, #8]
	pop {r4, pc}

	arm_func_start FUN_0205413c
FUN_0205413c: ; 0x0205413C
	push {r0, r1, r2, r3}
	push {r4, r5, r6, lr}
	ldr r5, [sp, #0x18]
	mov r6, #0
	ldr r4, [sp, #0x1c]
	ldr lr, [sp, #0x20]
	strb r1, [r0, #0xc]
	strb r6, [r0, #0xd]
	str r5, [r0]
	ldr ip, [sp, #0x24]
	stmib r0, {r4, lr}
	sub r2, r6, #1
	ldr r3, [sp, #0x28]
	str ip, [r0, #0x10]
	str r3, [r0, #0x14]
	str r2, [r0, #0x18]
	str r2, [r0, #0x1c]
	str r2, [r0, #0x20]
	str r2, [r0, #0x24]
	pop {r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_0205413c

	arm_func_start FUN_02054194
FUN_02054194: ; 0x02054194
	ldrsb r2, [r0, #0xd]
	orr r1, r2, r1
	strb r1, [r0, #0xd]
	bx lr
	arm_func_end FUN_02054194

	arm_func_start FUN_020541a4
FUN_020541a4: ; 0x020541A4
	ldrsb r2, [r0, #0xd]
	mvn r1, r1
	lsl r1, r1, #0x18
	and r1, r2, r1, asr #24
	strb r1, [r0, #0xd]
	bx lr
	arm_func_end FUN_020541a4

	arm_func_start FUN_020541bc
FUN_020541bc: ; 0x020541BC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r0, r4
	mov r1, r5
	mov r2, #0x1c
	bl FUN_020078c8
	ldrh r0, [r4, #0x4e]
	strh r0, [r5, #0x20]
	ldrb r0, [r4, #0x5c]
	strb r0, [r5, #0x23]
	ldrh r0, [r4, #0x54]
	strh r0, [r5, #0x24]
	ldrh r0, [r4, #0x56]
	strh r0, [r5, #0x26]
	ldrb r0, [r4, #0x53]
	strb r0, [r5, #0x28]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020541bc

	arm_func_start FUN_02054204
FUN_02054204: ; 0x02054204
	push {r3, r4, r5, lr}
	mov r5, #0
	cmp r1, #0
	cmpeq r3, #0
	subne r4, r3, r1
	mov lr, r5
	addne ip, r4, r4, lsr #31
	asrne lr, ip, #1
	cmp r2, #0
	ldreq r4, [sp, #0x10]
	str r1, [r0, #0x20]
	cmpeq r4, #0
	ldrne r4, [sp, #0x10]
	str r2, [r0, #0x24]
	subne r4, r4, r2
	addne ip, r4, r4, lsr #31
	asrne r5, ip, #1
	add r4, r1, lr
	ldr ip, [sp, #0x10]
	add lr, r2, r5
	str r4, [r0, #0x14]
	str lr, [r0, #0x1c]
	str r3, [r0, #0x28]
	str ip, [r0, #0x2c]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02054204

	arm_func_start FUN_02054268
FUN_02054268: ; 0x02054268
	push {r4, lr}
	mov r4, r0
	mov r1, r4
	mov r0, #0
	mov r2, #0xd4
	bl FUN_0200787c
	mov r2, #1
	mov r3, #0x1e
	mov r1, #0x100
	mov r0, #2
	strb r3, [r4, #0x68]
	strb r2, [r4, #0x69]
	str r1, [r4, #0xa0]
	strb r2, [r4, #0xa6]
	strb r0, [r4, #0xa7]
	pop {r4, pc}
	arm_func_end FUN_02054268

	arm_func_start FUN_020542a8
FUN_020542a8: ; 0x020542A8
	ldr r0, [r0, #0x5c]
	bx lr
	arm_func_end FUN_020542a8

	arm_func_start FUN_020542b0
FUN_020542b0: ; 0x020542B0
	ldr r0, [r0, #0x5c]
	asr r0, r0, #8
	bx lr
	arm_func_end FUN_020542b0

	arm_func_start FUN_020542bc
FUN_020542bc: ; 0x020542BC
	ldr r0, [r0, #0x5c]
	and r0, r0, #0xff
	bx lr
	arm_func_end FUN_020542bc

	arm_func_start FUN_020542c8
FUN_020542c8: ; 0x020542C8
	push {r0, r1, r2, r3}
	push {r4, lr}
	ldr r4, [r0, #0x84]
	ldr lr, [r0, #0x88]
	ldr ip, [r0, #0x8c]
	ldr r3, [sp, #0xc]
	ldr r2, [sp, #0x10]
	ldr r1, [sp, #0x14]
	str r4, [r0, #0x78]
	str lr, [r0, #0x7c]
	str ip, [r0, #0x80]
	str r3, [r0, #0x84]
	str r2, [r0, #0x88]
	str r1, [r0, #0x8c]
	pop {r4, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020542c8

	arm_func_start FUN_0205430c
FUN_0205430c: ; 0x0205430C
	add r0, r0, #0x84
	bx lr
	arm_func_end FUN_0205430c

	arm_func_start FUN_02054314
FUN_02054314: ; 0x02054314
	add r0, r0, #0x78
	bx lr
	arm_func_end FUN_02054314

	arm_func_start FUN_0205431c
FUN_0205431c: ; 0x0205431C
	push {r0, r1, r2, r3}
	ldr r3, [sp, #4]
	ldr r2, [sp, #8]
	ldr r1, [sp, #0xc]
	str r3, [r0, #0x6c]
	str r2, [r0, #0x70]
	str r1, [r0, #0x74]
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_0205431c

	arm_func_start FUN_02054340
FUN_02054340: ; 0x02054340
	str r1, [r0, #0x90]
	str r2, [r0, #0x94]
	str r3, [r0, #0x98]
	bx lr
	arm_func_end FUN_02054340

	arm_func_start FUN_02054350
FUN_02054350: ; 0x02054350
	cmp r1, #0
	movlt r1, #0
	blt _02054364
	cmp r1, #0x1f
	movge r1, #0x1e
	arm_func_end FUN_02054350
_02054364:
	strb r1, [r0, #0x68]
	bx lr

	arm_func_start FUN_0205436c
FUN_0205436c: ; 0x0205436C
	str r1, [r0, #0xa0]
	cmp r2, #0
	bxeq lr
	cmp r1, #0xef
	movge r1, #1
	strbge r1, [r0, #0xa6]
	movlt r1, #0
	strblt r1, [r0, #0xa6]
	bx lr
	arm_func_end FUN_0205436c

	arm_func_start FUN_02054390
FUN_02054390: ; 0x02054390
	strb r1, [r0, #0xa6]
	bx lr
	arm_func_end FUN_02054390

	arm_func_start FUN_02054398
FUN_02054398: ; 0x02054398
	ldrh r2, [r0, #0x6a]
	cmp r2, r1
	movne r2, #1
	strbne r2, [r0, #0x69]
	strh r1, [r0, #0x6a]
	bx lr
	arm_func_end FUN_02054398

	arm_func_start FUN_020543b0
FUN_020543b0: ; 0x020543B0
	ldrh r0, [r0, #0xa4]
	and r0, r1, r0
	cmp r1, r0
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_020543b0

	arm_func_start FUN_020543c8
FUN_020543c8: ; 0x020543C8
	ldrh r2, [r0, #0xa4]
	lsl r1, r1, #0x10
	orr r1, r2, r1, lsr #16
	strh r1, [r0, #0xa4]
	bx lr
	arm_func_end FUN_020543c8

	arm_func_start FUN_020543dc
FUN_020543dc: ; 0x020543DC
	ldrh r2, [r0, #0xa4]
	mvn r1, r1
	lsl r1, r1, #0x10
	and r1, r2, r1, lsr #16
	strh r1, [r0, #0xa4]
	bx lr
	arm_func_end FUN_020543dc

	arm_func_start FUN_020543f4
FUN_020543f4: ; 0x020543F4
	ldr ip, _02054400 ; =FUN_020543b0
	mov r1, #2
	bx ip
	.align 2, 0_02054400: .word FUN_020543b0
	arm_func_end FUN_020543f4

	arm_func_start FUN_02054404
FUN_02054404: ; 0x02054404
	push {r4, lr}
	mov r4, #1
	mov r1, r4
	bl FUN_020543b0
	cmp r0, #0
	movne r4, #0
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02054404

	arm_func_start FUN_02054424
FUN_02054424: ; 0x02054424
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02054404
	cmp r0, #0
	popne {r3, r4, r5, pc}
	cmp r4, #0
	mov r0, r5
	mov r1, #2
	beq _02054454
	bl FUN_020543c8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02054424
_02054454:
	bl FUN_020543dc
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0205445c
FUN_0205445c: ; 0x0205445C
	ldr ip, _02054468 ; =FUN_020543b0
	mov r1, #0x40
	bx ip
	.align 2, 0_02054468: .word FUN_020543b0
	arm_func_end FUN_0205445c

	arm_func_start FUN_0205446c
FUN_0205446c: ; 0x0205446C
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r4, r2
	mov r5, r1
	ldr r2, _02054498 ; =0x000004C8
	mov r1, r6
	mov r0, #0
	bl FUN_0200787c
	str r5, [r6, #0x490]
	str r4, [r6, #0x494]
	pop {r4, r5, r6, pc}
	.align 2, 0_02054498: .word 0x000004C8
	arm_func_end FUN_0205446c

	arm_func_start FUN_0205449c
FUN_0205449c: ; 0x0205449C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, r0
	ldr r5, [r4, #0x48c]
	mov r0, #0xc
	mul r0, r5, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	add r1, r4, #0xc
	str r7, [r4]
	str r6, [r4, #4]
	str r5, [r4, #8]
	add r2, r1, r0
	ldm r2, {r0, r1}
	mov r2, r7
	mov r3, r6
	bl FUN_02053604
	ldrb r1, [sp, #0x20]
	cmp r1, #0
	bne _020544FC
	ldr r1, [r4, #0x490]
	cmp r0, r1
	movlt r0, #0
	poplt {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_0205449c
_020544FC:
	ldr r1, [r4, #0x48c]
	ldr r0, _020545AC ; =0x2AAAAAAB
	add r8, r1, #1
	smull r2, sb, r0, r8
	lsr r1, r8, #0x1f
	add sb, r1, sb, asr #4
	mov r3, #0x60
	smull r1, r2, r3, sb
	sub sb, r8, r1
	mov r1, #0xc
	mla r2, sb, r1, r4
	str sb, [r4, #0x48c]
	str r7, [r2, #0xc]
	ldr r7, [r4, #0x48c]
	mov lr, #0xc
	mla r3, r7, r1, r4
	str r6, [r3, #0x10]
	ldr r3, [r4, #0x48c]
	mov r2, #0
	mla r1, r3, r1, r4
	str r5, [r1, #0x14]
	ldr r1, [r4, #0x48c]
	mov ip, #0x60
	add r3, r1, #0x60
	mov r8, lr
_02054560:
	ldr r6, [r4, #0x494]
	mla r1, r2, r8, r4
	sub r3, r3, r6
	lsr r6, r3, #0x1f
	smull r7, sb, r0, r3
	add sb, r6, sb, asr #4
	smull r6, r7, ip, sb
	sub sb, r3, r6
	mla r7, sb, lr, r4
	ldr r6, [r7, #0xc]
	add r2, r2, #1
	str r6, [r1, #0x498]
	ldr r6, [r7, #0x10]
	cmp r2, #4
	str r6, [r1, #0x49c]
	str r5, [r1, #0x4a0]
	blt _02054560
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020545AC: .word 0x2AAAAAAB

	arm_func_start FUN_020545b0
FUN_020545b0: ; 0x020545B0
	push {r4, lr}
	stm r0, {r1, r2, r3}
	mov r4, #0
	mov ip, #0xc
	arm_func_end FUN_020545b0
_020545C0:
	mla lr, r4, ip, r0
	str r1, [lr, #0xc]
	str r2, [lr, #0x10]
	add r4, r4, #1
	str r3, [lr, #0x14]
	cmp r4, #0x60
	blt _020545C0
	mov r4, #0
	str r4, [r0, #0x48c]
	mov ip, #0xc
_020545E8:
	mla lr, r4, ip, r0
	str r1, [lr, #0x498]
	str r2, [lr, #0x49c]
	add r4, r4, #1
	str r3, [lr, #0x4a0]
	cmp r4, #4
	blt _020545E8
	pop {r4, pc}

	arm_func_start FUN_02054608
FUN_02054608: ; 0x02054608
	ldr ip, _0205461C ; =FUN_0200787c
	mov r1, r0
	mov r0, #0
	mov r2, #0x18
	bx ip
	.align 2, 0_0205461C: .word FUN_0200787c
	arm_func_end FUN_02054608

	arm_func_start FUN_02054620
FUN_02054620: ; 0x02054620
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	mov r4, r1
	mov r7, r2
	bl FUN_020547bc
	mov r6, r0
	mov r0, r5
	mov r1, r4
	bl FUN_02054834
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	cmn r6, #1
	beq _02054678
	cmp r7, #0
	blt _02054670
	ldr r2, [r5, r7, lsl #2]
	mov r0, r5
	mov r1, r4
	bl FUN_02054780
	arm_func_end FUN_02054620
_02054670:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
_02054678:
	ldr r0, [r5, #0x10]
	cmp r0, #4
	movge r0, #0
	popge {r3, r4, r5, r6, r7, pc}
	cmp r7, #0
	blt _020546D4
	cmp r7, #4
	bge _02054708
_02054698:
	ldr r0, [r5, r7, lsl #2]
	cmp r0, #0
	bne _020546BC
	str r4, [r5, r7, lsl #2]
	ldr r1, [r5, #0x10]
	mov r0, #1
	add r1, r1, #1
	str r1, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_020546BC:
	str r4, [r5, r7, lsl #2]
	add r7, r7, #1
	mov r4, r0
	cmp r7, #4
	blt _02054698
	b _02054708
_020546D4:
	mov r1, #0
_020546D8:
	ldr r0, [r5, r1, lsl #2]
	cmp r0, #0
	bne _020546FC
	str r4, [r5, r1, lsl #2]
	ldr r1, [r5, #0x10]
	mov r0, #1
	add r1, r1, #1
	str r1, [r5, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_020546FC:
	add r1, r1, #1
	cmp r1, #4
	blt _020546D8
_02054708:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02054710
FUN_02054710: ; 0x02054710
	push {r4, lr}
	mov r4, r0
	bl FUN_020547bc
	cmn r0, #1
	moveq r0, #0
	popeq {r4, pc}
	ldr r1, [r4, #0x10]
	cmp r1, #0
	movle r0, #0
	pople {r4, pc}
	sub r1, r1, #1
	cmp r0, r1
	bge _02054764
	arm_func_end FUN_02054710
_02054744:
	add r1, r4, r0, lsl #2
	ldr r1, [r1, #4]
	str r1, [r4, r0, lsl #2]
	ldr r1, [r4, #0x10]
	add r0, r0, #1
	sub r1, r1, #1
	cmp r0, r1
	blt _02054744
_02054764:
	mov r0, #0
	str r0, [r4, r1, lsl #2]
	ldr r1, [r4, #0x10]
	mov r0, #1
	sub r1, r1, #1
	str r1, [r4, #0x10]
	pop {r4, pc}

	arm_func_start FUN_02054780
FUN_02054780: ; 0x02054780
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r5, r2
	mov r6, r1
	bl FUN_020547bc
	mov r4, r0
	mov r0, r7
	mov r1, r5
	bl FUN_020547bc
	mvn r1, #0
	cmp r4, r1
	cmpne r0, r1
	strne r5, [r7, r4, lsl #2]
	strne r6, [r7, r0, lsl #2]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02054780

	arm_func_start FUN_020547bc
FUN_020547bc: ; 0x020547BC
	ldr r2, [r0, #0x10]
	mov r3, #0
	cmp r2, #0
	ble _020547EC
	arm_func_end FUN_020547bc
_020547CC:
	ldr r2, [r0, r3, lsl #2]
	cmp r1, r2
	moveq r0, r3
	bxeq lr
	ldr r2, [r0, #0x10]
	add r3, r3, #1
	cmp r3, r2
	blt _020547CC
_020547EC:
	mvn r0, #0
	bx lr

	arm_func_start FUN_020547f4
FUN_020547f4: ; 0x020547F4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020547bc
	cmp r0, #0
	movge r0, #0
	popge {r3, r4, r5, pc}
	ldr r0, [r5, #0x14]
	cmp r0, #0
	movgt r0, #0
	strle r4, [r5, #0x14]
	movle r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020547f4

	arm_func_start FUN_02054828
FUN_02054828: ; 0x02054828
	mov r1, #0
	str r1, [r0, #0x14]
	bx lr
	arm_func_end FUN_02054828

	arm_func_start FUN_02054834
FUN_02054834: ; 0x02054834
	cmp r1, #0
	ble _0205484C
	ldr r0, [r0, #0x14]
	cmp r0, r1
	moveq r0, #1
	bxeq lr
	arm_func_end FUN_02054834
_0205484C:
	mov r0, #0
	bx lr

	arm_func_start FUN_02054854
FUN_02054854: ; 0x02054854
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_020547bc
	mvn r4, #0
	cmp r0, r4
	popne {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_02054834
	cmp r0, #0
	ldrne r4, [r6, #0x10]
	mov r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02054854

	arm_func_start FUN_0205488c
FUN_0205488c: ; 0x0205488C
	cmp r1, #0
	ble _0205489C
	cmp r2, #0
	bge _020548A4
	arm_func_end FUN_0205488c
_0205489C:
	mvn r0, #0
	bx lr
_020548A4:
	and r0, r2, #0xff
	orr r0, r0, r1, lsl #8
	bx lr

	arm_func_start FUN_020548b0
FUN_020548b0: ; 0x020548B0
	cmp r1, #0
	cmnne r1, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_020548b0

	arm_func_start FUN_020548c4
FUN_020548c4: ; 0x020548C4
	push {r4, r5, r6, r7, r8, lr}
	mov r5, #0
	mov r7, r1
	mov r8, r0
	mov r1, r5
	mov r6, r2
	bl FUN_02054938
	mov r4, r0
	mov r0, r8
	ldr r2, [r0]
	mov r1, r7
	ldr r2, [r2, #4]
	blx r2
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020548c4
_02054904:
	ldr r0, [r4, #0x5c]
	cmp r7, r0
	bne _02054920
	cmp r6, #0
	strne r5, [r6]
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
_02054920:
	add r5, r5, #1
	cmp r5, #0x18
	add r4, r4, #0xd4
	blt _02054904
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02054938
FUN_02054938: ; 0x02054938
	cmp r1, #0x18
	movhs r0, #0
	addlo r2, r0, #0x40
	movlo r0, #0xd4
	mlalo r0, r1, r0, r2
	bx lr
	arm_func_end FUN_02054938

	arm_func_start FUN_02054950
FUN_02054950: ; 0x02054950
	push {r4, r5, r6, lr}
	mov r5, #0
	mov r6, r1
	mov r1, r5
	bl FUN_02054938
	mov r4, r0
	arm_func_end FUN_02054950
_02054968:
	mov r0, r4
	bl FUN_02054404
	cmp r0, #0
	beq _02054988
	cmp r6, #0
	strne r5, [r6]
	mov r0, r4
	pop {r4, r5, r6, pc}
_02054988:
	add r5, r5, #1
	cmp r5, #0x18
	add r4, r4, #0xd4
	blt _02054968
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020549a0
FUN_020549a0: ; 0x020549A0
	push {r3, lr}
	cmp r1, #0
	beq _020549C0
	mov r0, r1
	bl FUN_02054404
	cmp r0, #0
	moveq r0, #1
	popeq {r3, pc}
	arm_func_end FUN_020549a0
_020549C0:
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_020549c8
FUN_020549c8: ; 0x020549C8
	push {r3, lr}
	cmp r1, #0
	beq _020549F0
	ldr r1, [r1, #0x5c]
	add r0, r0, #0x28
	bl FUN_020547bc
	cmp r0, #0
	movgt r0, #1
	movle r0, #0
	pop {r3, pc}
	arm_func_end FUN_020549c8
_020549F0:
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_020549f8
FUN_020549f8: ; 0x020549F8
	push {r3, lr}
	cmp r1, #0
	moveq r0, #0
	popeq {r3, pc}
	ldr r1, [r1, #0x5c]
	add r0, r0, #0x28
	bl FUN_02054834
	pop {r3, pc}
	arm_func_end FUN_020549f8

	arm_func_start FUN_02054a18
FUN_02054a18: ; 0x02054A18
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020549c8
	cmp r0, #0
	bne _02054A44
	mov r0, r5
	mov r1, r4
	bl FUN_020549f8
	cmp r0, #0
	beq _02054A4C
	arm_func_end FUN_02054a18
_02054A44:
	mov r0, #0
	pop {r3, r4, r5, pc}
_02054A4C:
	mov r0, r4
	mov r1, #8
	bl FUN_020543b0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02054a5c
FUN_02054a5c: ; 0x02054A5C
	ldr ip, _02054A6C ; =FUN_020543b0
	mov r0, r1
	mov r1, #0x20
	bx ip
	.align 2, 0_02054A6C: .word FUN_020543b0
	arm_func_end FUN_02054a5c

	arm_func_start FUN_02054a70
FUN_02054a70: ; 0x02054A70
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020549c8
	cmp r0, #0
	bne _02054A9C
	mov r0, r5
	mov r1, r4
	bl FUN_020549f8
	cmp r0, #0
	beq _02054AA4
	arm_func_end FUN_02054a70
_02054A9C:
	mov r0, #0
	pop {r3, r4, r5, pc}
_02054AA4:
	mov r0, r4
	mov r1, #0x10
	bl FUN_020543b0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02054ab4
FUN_02054ab4: ; 0x02054AB4
	push {r3, lr}
	cmp r1, #0
	moveq r0, #0
	popeq {r3, pc}
	mov r0, r1
	mov r1, #0x8000
	bl FUN_020543b0
	pop {r3, pc}
	arm_func_end FUN_02054ab4

	arm_func_start FUN_02054ad4
FUN_02054ad4: ; 0x02054AD4
	cmp r1, #0
	moveq r0, #0
	bxeq lr
	ldr r1, [r1, #0x5c]
	mov r2, #0
	cmp r1, #0
	ble _02054AFC
	ldr r0, [r0, #0x28]
	cmp r0, r1
	moveq r2, #1
	arm_func_end FUN_02054ad4
_02054AFC:
	mov r0, r2
	bx lr

	arm_func_start FUN_02054b04
FUN_02054b04: ; 0x02054B04
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	mov sb, r3
	ldr r3, [sb]
	mov r6, r0
	str r3, [sp]
	ldr r3, [sb, #4]
	mov r5, r1
	str r3, [sp, #4]
	ldr r3, [sb, #8]
	mov r4, r2
	str r3, [sp, #8]
	ldr sl, [sp, #0x30]
	mov r7, #1
	bl FUN_02054a5c
	cmp r0, #0
	bne _02054B6C
	ldr r1, [sb]
	add sp, sp, #0xc
	str r1, [sl]
	ldr r1, [sb, #4]
	mov r0, r7
	str r1, [sl, #4]
	ldr r1, [sb, #8]
	str r1, [sl, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02054b04
_02054B6C:
	mov r0, r6
	mov r1, r5
	bl FUN_02054a18
	cmp r0, #0
	add r0, r5, #0xac
	mov r1, #0x20
	beq _02054BC0
	bl FUN_020541a4
	ldr r0, _02054D48 ; =0x02099EE8
	add r1, sp, #0
	ldr r0, [r0]
	mov r2, r4
	add r3, r5, #0xac
	bl FUN_020CD2A8
	ands r8, r0, #0xff
	ldrsb r0, [r5, #0xb9]
	orrne r0, r0, #4
	strbne r0, [r5, #0xb9]
	biceq r0, r0, #4
	strbeq r0, [r5, #0xb9]
	b _02054BC4
_02054BC0:
	bl FUN_02054194
_02054BC4:
	ldr r0, _02054D4C ; =0x02099EB0
	add r1, sp, #0
	ldr r0, [r0]
	add r2, r5, #0xac
	bl FUN_020CD1F0
	cmp r0, #0
	bne _02054C04
	ldr r1, [r4]
	add sp, sp, #0xc
	str r1, [sl]
	ldr r1, [r4, #4]
	mov r0, #0
	str r1, [sl, #4]
	ldr r1, [r4, #8]
	str r1, [sl, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02054C04:
	ldrsb r0, [r5, #0xb9]
	tst r0, #2
	movne sb, #1
	moveq sb, #0
	cmp r8, #0
	bne _02054C40
	cmp sb, #0
	beq _02054C40
	ldr r0, _02054D48 ; =0x02099EE8
	add r1, sp, #0
	ldr r0, [r0]
	mov r2, r4
	add r3, r5, #0xac
	bl FUN_020CD2A8
	and r8, r0, #0xff
_02054C40:
	cmp r8, #0
	cmpne sb, #0
	beq _02054C80
	ldrb r0, [sp, #0x34]
	add sp, sp, #0xc
	cmp r0, #0
	addne r0, r6, #0x1000
	strbne r7, [r0, #0x908]
	ldr r1, [r4]
	mov r0, #4
	str r1, [sl]
	ldr r1, [r4, #4]
	str r1, [sl, #4]
	ldr r1, [r4, #8]
	str r1, [sl, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02054C80:
	cmp sb, #0
	bne _02054C90
	cmp r8, #0
	beq _02054D24
_02054C90:
	add r1, sp, #0
	mov r0, r4
	bl FUN_020535bc
	ldrb r1, [sp, #0x34]
	cmp r1, #0
	beq _02054CD0
	cmp sb, #0
	cmpne r0, #0xc8
	addlt r1, r6, #0x1000
	strblt r7, [r1, #0x908]
	blt _02054CD0
	cmp r8, #0
	ldrne r1, _02054D50 ; =0x000005DC
	cmpne r0, r1
	addlt r1, r6, #0x1000
	strblt r7, [r1, #0x908]
_02054CD0:
	ldr r1, [r6, #0x14]
	cmp r0, r1
	bge _02054D00
	ldr r1, [r4]
	mov r0, #4
	str r1, [sl]
	ldr r1, [sp, #4]
	add sp, sp, #0xc
	str r1, [sl, #4]
	ldr r1, [r4, #8]
	str r1, [sl, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02054D00:
	ldr r1, [sp]
	mov r0, #5
	str r1, [sl]
	ldr r1, [sp, #4]
	str r1, [sl, #4]
	ldr r1, [sp, #8]
	add sp, sp, #0xc
	str r1, [sl, #8]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02054D24:
	ldr r1, [sp]
	mov r0, #1
	str r1, [sl]
	ldr r1, [sp, #4]
	str r1, [sl, #4]
	ldr r1, [sp, #8]
	str r1, [sl, #8]
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02054D48: .word 0x02099EE8
_02054D4C: .word 0x02099EB0
_02054D50: .word 0x000005DC

	arm_func_start FUN_02054d54
FUN_02054d54: ; 0x02054D54
	push {r3, r4, r5, lr}
	movs r4, r1
	mov r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_02054ab4
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_02054e6c
	mov r1, r4
	mov r0, #0
	mov r2, #0xd4
	bl FUN_0200787c
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02054d54

	arm_func_start FUN_02054d9c
FUN_02054d9c: ; 0x02054D9C
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_020549a0
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r5
	str r5, [r6, #0x60]
	strb r4, [r6, #0x65]
	bl FUN_02055be0
	strb r0, [r6, #0x67]
	mov r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02054d9c

	arm_func_start FUN_02054dd8
FUN_02054dd8: ; 0x02054DD8
	push {r3, lr}
	ldrb r3, [r1, #0xa6]
	cmp r3, #3
	arm_func_end FUN_02054dd8

	arm_func_start switchD
switchD: ; 0x02054DE4
	addls pc, pc, r3, lsl #2
	b _02054E44
	arm_func_end switchD
_02054DEC: ; jump table
	b LAB_02054dfc ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02054DF0
	b _02054E0C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02054DF4
	b _02054E44
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02054DF8
	b _02054E1C
	arm_func_end caseD_3
LAB_02054dfc:
	ldr r2, _02054E4C ; =0x0000C352
	mov r3, #3
	bl FUN_02054d9c
	pop {r3, pc}
_02054E0C:
	ldr r2, _02054E50 ; =0x0000C351
	mov r3, #3
	bl FUN_02054d9c
	pop {r3, pc}
_02054E1C:
	cmp r2, #0
	ldr ip, _02054E50 ; =0x0000C351
	ble _02054E34
	ldr r3, [r0, #0x10]
	cmp r2, r3
	suble ip, ip, #1
_02054E34:
	mov r2, ip
	mov r3, #3
	bl FUN_02054d9c
	pop {r3, pc}
_02054E44:
	mov r0, #1
	pop {r3, pc}
	.align 2, 0_02054E4C: .word 0x0000C352
_02054E50: .word 0x0000C351

	arm_func_start FUN_02054e54
FUN_02054e54: ; 0x02054E54
	ldr r2, _02054E64 ; =0x0000C350
	ldr ip, _02054E68 ; =FUN_02054d9c
	mov r3, #3
	bx ip
	.align 2, 0_02054E64: .word 0x0000C350
_02054E68: .word FUN_02054d9c
	arm_func_end FUN_02054e54

	arm_func_start FUN_02054e6c
FUN_02054e6c: ; 0x02054E6C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020549a0
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [r4, #0x5c]
	add r0, r5, #0x28
	bl FUN_020547bc
	cmp r0, #0
	movlt r0, #0
	poplt {r3, r4, r5, pc}
	mov r0, r4
	mov r1, #0x8000
	bl FUN_020543dc
	ldr r1, [r4, #0x5c]
	add r0, r5, #0x28
	bl FUN_02054710
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [r4, #0x5c]
	mov r0, r5
	mov r2, #0
	bl FUN_020557d8
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02054e6c

	arm_func_start FUN_02054edc
FUN_02054edc: ; 0x02054EDC
	cmp r1, #0
	ldrbne r0, [r1, #0x2d]
	cmpne r0, #0
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02054edc

	arm_func_start FUN_02054ef4
FUN_02054ef4: ; 0x02054EF4
	push {r3, lr}
	cmp r1, #0
	popeq {r3, pc}
	ldrsh r3, [r1, #0x2e]
	cmp r3, #0
	movgt r3, #1
	movle r3, #0
	strhle r3, [r1, #0x2e]
	strb r3, [r1, #0x2d]
	cmp r2, #0
	popeq {r3, pc}
	bl FUN_02054e54
	pop {r3, pc}
	arm_func_end FUN_02054ef4

	arm_func_start FUN_02054f28
FUN_02054f28: ; 0x02054F28
	push {r4, lr}
	ldr r1, _02054F44 ; =0x020906E8
	mov r4, r0
	str r1, [r4]
	bl FUN_02054f60
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02054F44: .word 0x020906E8
	arm_func_end FUN_02054f28

	arm_func_start FUN_02054f48
FUN_02054f48: ; 0x02054F48
	bx lr
	arm_func_end FUN_02054f48

	arm_func_start FUN_02054f4c
FUN_02054f4c: ; 0x02054F4C
	push {r4, lr}
	mov r4, r0
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02054f4c

	arm_func_start FUN_02054f60
FUN_02054f60: ; 0x02054F60
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x28
	bl FUN_02054608
	mov r4, #0
	ldr r2, _02055000 ; =0x000013E0
	mov r1, r4
	add r0, r5, #0x40
	bl MemWrite
	add r0, r5, #0x420
	mov r1, r4
	add r0, r0, #0x1000
	mov r2, #0x10
	bl MemWrite
	add r0, r5, #0x430
	add r0, r0, #0x1000
	mov r1, #0x200
	mov r2, #6
	bl FUN_0205446c
	add r0, r5, #0x1000
	str r4, [r0, #0x8f8]
	str r4, [r0, #0x8fc]
	strb r4, [r0, #0x908]
	add r0, r5, #0x1900
	mov r1, r4
	mov r2, #8
	bl MemWrite
	str r4, [r5, #0x10]
	str r4, [r5, #0x14]
	str r4, [r5, #4]
	str r4, [r5, #8]
	str r4, [r5, #0xc]
	add r0, r5, #0x1000
	strb r4, [r0, #0x913]
	strb r4, [r0, #0x916]
	strb r4, [r0, #0x917]
	str r4, [r0, #0x918]
	strb r4, [r0, #0x91c]
	strb r4, [r0, #0x91d]
	pop {r3, r4, r5, pc}
	.align 2, 0_02055000: .word 0x000013E0
	arm_func_end FUN_02054f60

	arm_func_start FUN_02055004
FUN_02055004: ; 0x02055004
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x74
	mov r4, r1
	cmp r4, #0
	mov r8, r0
	mov r6, r2
	mov r7, r3
	addle sp, sp, #0x74
	mvnle r0, #0
	pople {r3, r4, r5, r6, r7, r8, pc}
	ldr r5, _02055194 ; =0x00000FFF
	ldr r0, _02055198 ; =0x0209BA20
	and r4, r4, r5
	lsl r1, r4, #0x10
	add r2, sp, #0xc
	lsr r1, r1, #0x10
	bl FUN_0204bd64
	cmp r0, #0
	addeq sp, sp, #0x74
	subeq r0, r5, #0x1000
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r8
	ldr r3, [r0]
	mov r1, r4
	ldr r3, [r3]
	mov r2, r6
	blx r3
	mov r6, r0
	mov r0, r8
	ldr r2, [r0]
	mov r1, r6
	ldr r2, [r2, #4]
	blx r2
	cmp r0, #0
	addeq sp, sp, #0x74
	subeq r0, r5, #0x1000
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r4
	mov r1, #0
	bl FUN_020EFA9C
	cmp r0, #0
	beq _020550BC
	bl FUN_0206dcd4
	lsl r1, r7, #0x10
	lsr r1, r1, #0x10
	bl FUN_0206de90
	arm_func_end FUN_02055004
_020550BC:
	mov r5, #0
	mov r0, r8
	mov r1, r6
	mov r2, r5
	bl FUN_020548c4
	cmp r0, #0
	ldrne r1, [sp, #0x90]
	addne sp, sp, #0x74
	strbne r1, [r0, #0x67]
	strhne r7, [r0, #0xa8]
	movne r0, r6
	popne {r3, r4, r5, r6, r7, r8, pc}
	mov r0, r8
	mov r1, r5
	bl FUN_02054950
	movs r4, r0
	addeq sp, sp, #0x74
	subeq r0, r5, #1
	popeq {r3, r4, r5, r6, r7, r8, pc}
	bl FUN_02054268
	add r1, sp, #0xc
	mov r0, r4
	bl FUN_020541bc
	ldr r0, [sp, #0x90]
	mov r1, r5
	str r6, [r4, #0x5c]
	bl FUN_02055bd4
	str r0, [r4, #0x60]
	strb r5, [r4, #0x64]
	ldr r1, [sp, #0x90]
	strb r5, [r4, #0x65]
	strb r1, [r4, #0x67]
	ldr r0, _0205519C ; =0x00000555
	strh r7, [r4, #0xa8]
	str r0, [r4, #0x9c]
	mov r0, r4
	mov r1, #0x39
	bl FUN_020543c8
	ldr r0, [r4, #0x9c]
	sub r3, sp, #8
	stmib sp, {r0, r5}
	add r0, r4, #0x84
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	add r0, r4, #0xac
	mov r1, #1
	ldm r3, {r2, r3}
	bl FUN_0205413c
	ldrsb r0, [r4, #0xb9]
	orr r0, r0, #0x10
	strb r0, [r4, #0xb9]
	ldr r0, [r4, #0x5c]
	add sp, sp, #0x74
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02055194: .word 0x00000FFF
_02055198: .word 0x0209BA20
_0205519C: .word 0x00000555

	arm_func_start FUN_020551a0
FUN_020551a0: ; 0x020551A0
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x68
	mov r5, r1
	cmp r5, #0
	mov r6, r0
	mov r7, r2
	mov r4, r3
	addle sp, sp, #0x68
	pople {r4, r5, r6, r7, r8, pc}
	ldr r1, _0205526C ; =0x00000FFF
	ldr r0, _02055270 ; =0x0209BA20
	and r5, r5, r1
	lsl r1, r5, #0x10
	add r2, sp, #0
	lsr r1, r1, #0x10
	bl FUN_0204bd64
	cmp r0, #0
	addeq sp, sp, #0x68
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r6
	ldr r3, [r0]
	mov r1, r5
	ldr r3, [r3]
	mov r2, r7
	blx r3
	mov r8, r0
	mov r0, r6
	ldr r2, [r0]
	mov r1, r8
	ldr r2, [r2, #4]
	blx r2
	cmp r0, #0
	addeq sp, sp, #0x68
	popeq {r4, r5, r6, r7, r8, pc}
	mov r7, #0
	mov r0, r5
	mov r1, r7
	bl FUN_020EFA9C
	mov r0, r6
	mov r1, r8
	mov r2, r7
	bl FUN_020548c4
	cmp r4, #0
	mov r1, #0x40
	beq _02055260
	bl FUN_020543c8
	add sp, sp, #0x68
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020551a0
_02055260:
	bl FUN_020543dc
	add sp, sp, #0x68
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0205526C: .word 0x00000FFF
_02055270: .word 0x0209BA20

	arm_func_start FUN_02055274
FUN_02055274: ; 0x02055274
	push {r4, lr}
	mov r4, r0
	mov r2, #0
	bl FUN_020548c4
	mov r1, r0
	mov r0, r4
	bl FUN_02054d54
	pop {r4, pc}
	arm_func_end FUN_02055274

	arm_func_start FUN_02055294
FUN_02055294: ; 0x02055294
	push {r4, r5, r6, lr}
	mov r5, #0
	mov r1, r5
	mov r6, r0
	bl FUN_02054938
	mov r4, r0
	arm_func_end FUN_02055294
_020552AC:
	mov r0, r6
	mov r1, r4
	bl FUN_02054d54
	add r5, r5, #1
	cmp r5, #0x18
	add r4, r4, #0xd4
	blt _020552AC
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020552cc
FUN_020552cc: ; 0x020552CC
	ldr ip, _020552D8 ; =FUN_020548c4
	mov r2, #0
	bx ip
	.align 2, 0_020552D8: .word FUN_020548c4
	arm_func_end FUN_020552cc

	arm_func_start FUN_020552dc
FUN_020552dc: ; 0x020552DC
	push {r3, lr}
	cmp r1, #0
	blt _020552F4
	ldr r2, [r0, #0x38]
	cmp r1, r2
	blt _020552FC
	arm_func_end FUN_020552dc
_020552F4:
	mov r0, #0
	pop {r3, pc}
_020552FC:
	add r1, r0, r1, lsl #2
	ldr r1, [r1, #0x28]
	mov r2, #0
	bl FUN_020548c4
	pop {r3, pc}

	arm_func_start FUN_02055310
FUN_02055310: ; 0x02055310
	ldr r1, [r0, #0x3c]
	ldr ip, _02055320 ; =FUN_020548c4
	mov r2, #0
	bx ip
	.align 2, 0_02055320: .word FUN_020548c4
	arm_func_end FUN_02055310

	arm_func_start FUN_02055324
FUN_02055324: ; 0x02055324
	push {r3, r4, r5, r6, r7, lr}
	mov r4, #0
	mov r6, r1
	mov r1, r4
	mov r7, r0
	bl FUN_02054938
	movs r5, r0
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, pc}
	mov r4, #1
	arm_func_end FUN_02055324
_0205534C:
	mov r0, r7
	mov r1, r5
	bl FUN_020549a0
	cmp r0, #0
	beq _02055370
	ldr r0, [r5, #0x5c]
	cmp r0, r6
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, pc}
_02055370:
	add r4, r4, #1
	cmp r4, #0x18
	add r5, r5, #0xd4
	ble _0205534C
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02055388
FUN_02055388: ; 0x02055388
	push {r3, r4, r5, lr}
	sub r1, r1, #1
	mov r5, r0
	bl FUN_02054938
	movs r4, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	moveq r4, #0
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02055388

	arm_func_start FUN_020553c0
FUN_020553c0: ; 0x020553C0
	push {r3, r4, r5, r6, r7, lr}
	mov r5, #0
	mov r1, r5
	mov r7, r0
	bl FUN_02054938
	mov r4, r0
	mov r6, r5
	arm_func_end FUN_020553c0
_020553DC:
	mov r0, r7
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	add r6, r6, #1
	addne r5, r5, #1
	cmp r6, #0x18
	add r4, r4, #0xd4
	blt _020553DC
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02055408
FUN_02055408: ; 0x02055408
	push {r3, r4, r5, r6, r7, lr}
	mov r5, #0
	mov r6, r1
	mov r1, r5
	mov r7, r0
	bl FUN_02054938
	mov r4, r0
	arm_func_end FUN_02055408
_02055424:
	mov r0, r7
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	beq _02055444
	subs r6, r6, #1
	ldrmi r0, [r4, #0x5c]
	popmi {r3, r4, r5, r6, r7, pc}
_02055444:
	add r5, r5, #1
	cmp r5, #0x18
	add r4, r4, #0xd4
	blt _02055424
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0205545c
FUN_0205545c: ; 0x0205545C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, #0
	mov r6, r1
	mov r1, r5
	mov r7, r0
	bl FUN_02054938
	mov r4, r0
	arm_func_end FUN_0205545c
_02055478:
	mov r0, r7
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	beq _02055498
	subs r6, r6, #1
	movmi r0, r4
	popmi {r3, r4, r5, r6, r7, pc}
_02055498:
	add r5, r5, #1
	cmp r5, #0x18
	add r4, r4, #0xd4
	blt _02055478
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020554b0
FUN_020554b0: ; 0x020554B0
	push {r3, r4, r5, lr}
	ldr r4, [r0]
	ldr r3, _02055510 ; =0x00000FFF
	ldr r4, [r4]
	mov r5, r0
	and r1, r1, r3
	blx r4
	mov r4, r0
	mov r0, r5
	ldr r2, [r0]
	mov r1, r4
	ldr r2, [r2, #4]
	blx r2
	cmp r0, #0
	beq _02055508
	mov r0, r5
	mov r1, r4
	mov r2, #0
	bl FUN_020548c4
	cmp r0, #0
	movne r0, r4
	popne {r3, r4, r5, pc}
	arm_func_end FUN_020554b0
_02055508:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_02055510: .word 0x00000FFF

	arm_func_start FUN_02055514
FUN_02055514: ; 0x02055514
	asr r0, r1, #8
	str r0, [r2]
	and r0, r1, #0xff
	str r0, [r3]
	bx lr
	arm_func_end FUN_02055514

	arm_func_start FUN_02055528
FUN_02055528: ; 0x02055528
	push {r4, r5, r6, lr}
	mov r5, r2
	mov r6, r0
	mov r4, r3
	mov r2, #0
	bl FUN_020548c4
	mov r1, r0
	mov r0, r6
	mov r2, r5
	mov r3, r4
	bl FUN_02054d9c
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02055528

	arm_func_start FUN_02055558
FUN_02055558: ; 0x02055558
	push {r3, r4, r5, r6, r7, lr}
	mov r5, #0
	mov r6, r2
	mov r2, r5
	mov r7, r0
	bl FUN_020548c4
	mov r4, r0
	mov r0, r7
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	mov r1, r6
	bl FUN_02054398
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02055558

	arm_func_start FUN_020555a0
FUN_020555a0: ; 0x020555A0
	push {r4, r5, r6, r7, r8, lr}
	mov r5, #0
	mov r7, r1
	mov r1, r5
	mov r8, r0
	mov r6, r2
	bl FUN_02054938
	mov r4, r0
	arm_func_end FUN_020555a0
_020555C0:
	mov r0, r8
	mov r1, r4
	mov r2, r7
	mov r3, r6
	bl FUN_02054d9c
	add r5, r5, #1
	cmp r5, #0x18
	add r4, r4, #0xd4
	blt _020555C0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020555e8
FUN_020555e8: ; 0x020555E8
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x14
	mov r5, r1
	mov r6, r0
	mov r4, #0
	add r7, sp, #8
	mov r1, r2
	mov r0, r5
	mov r2, r4
	mov r8, r3
	str r4, [r7]
	str r4, [r7, #4]
	str r4, [r7, #8]
	bl FUN_020548c4
	mov r4, r0
	mov r0, r5
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	ldmeq r7, {r0, r1, r2}
	addeq sp, sp, #0x14
	stmeq r6, {r0, r1, r2}
	popeq {r3, r4, r5, r6, r7, r8, pc}
	ldr r1, [sp, #0x30]
	str r8, [r4, #0x84]
	ldr r0, [sp, #0x34]
	str r1, [r4, #0x88]
	str r0, [r4, #0x8c]
	cmp r4, #0
	beq _02055690
	ldr r1, [r4, #0x5c]
	add r0, r5, #0x28
	bl FUN_02054854
	cmp r0, #0
	blt _02055690
	ldr r1, [sp, #0x40]
	cmp r1, #0
	movne r1, #0x55
	mulne r1, r0, r1
	ldrne r0, [r4, #0x8c]
	subne r0, r0, r1
	strne r0, [r4, #0x8c]
	arm_func_end FUN_020555e8
_02055690:
	add r2, r4, #0x84
	str r2, [sp]
	mov ip, #0
	mov r0, r5
	mov r1, r4
	mov r3, r2
	str ip, [sp, #4]
	bl FUN_02054b04
	ldr r0, [r4, #0x84]
	ldr r2, [sp, #0x3c]
	str r0, [r4, #0x78]
	ldr r1, [r4, #0x88]
	mov r0, r5
	str r1, [r4, #0x7c]
	ldr r3, [r4, #0x8c]
	mov r1, r4
	str r3, [r4, #0x80]
	bl FUN_02054ef4
	mov r0, r5
	mov r1, r4
	bl FUN_02054ad4
	cmp r0, #0
	ldrne r0, [sp, #0x38]
	cmpne r0, #0
	beq _0205570C
	ldrh r3, [r4, #0x6a]
	add r0, r5, #0x430
	ldr r1, [r4, #0x84]
	ldr r2, [r4, #0x8c]
	add r0, r0, #0x1000
	bl FUN_020545b0
_0205570C:
	add r0, r4, #0x84
	ldm r0, {r0, r1, r2}
	stm r6, {r0, r1, r2}
	add sp, sp, #0x14
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02055720
FUN_02055720: ; 0x02055720
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r4, #0
	mov r6, r2
	mov r2, r4
	mov r7, r0
	bl FUN_020548c4
	mov r5, r0
	mov r0, r7
	mov r1, r5
	bl FUN_020549a0
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r6, #0
	beq _02055778
	add r2, r5, #0x84
	mov r0, r7
	mov r1, r5
	mov r3, r2
	stm sp, {r2, r4}
	bl FUN_02054b04
	arm_func_end FUN_02055720
_02055778:
	ldr r0, [r5, #0x84]
	str r0, [r5, #0x78]
	ldr r0, [r5, #0x88]
	str r0, [r5, #0x7c]
	ldr r0, [r5, #0x8c]
	str r0, [r5, #0x80]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02055798
FUN_02055798: ; 0x02055798
	push {r4, r5, r6, lr}
	mov r6, #0
	mov r4, r1
	mov r1, r6
	bl FUN_02054938
	movs r5, r0
	popeq {r4, r5, r6, pc}
	and r4, r4, #0xff
	arm_func_end FUN_02055798
_020557B8:
	mov r0, r5
	mov r1, r4
	bl FUN_02054424
	add r6, r6, #1
	cmp r6, #0x18
	add r5, r5, #0xd4
	blt _020557B8
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020557d8
FUN_020557d8: ; 0x020557D8
	push {r4, r5, r6, lr}
	mov r5, r2
	mov r2, #0
	mov r6, r0
	bl FUN_020548c4
	mov r4, r0
	mov r0, r6
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r4
	mov r2, #1
	strb r5, [r4, #0x2c]
	bl FUN_02054ef4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020557d8

	arm_func_start FUN_0205581c
FUN_0205581c: ; 0x0205581C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r2
	mov r2, #0
	mov r7, r0
	mov r5, r3
	bl FUN_020548c4
	mov r4, r0
	mov r0, r7
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr ip, [sp, #0x1c]
	ldr r3, [sp, #0x18]
	mov r1, r6
	mov r2, r5
	add r0, r4, #0x2c
	str ip, [sp]
	bl FUN_02054204
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0205581c

	arm_func_start FUN_0205586c
FUN_0205586c: ; 0x0205586C
	push {r4, lr}
	mov r4, r0
	mov r2, #0
	bl FUN_020548c4
	mov r1, r0
	mov r0, r4
	mov r2, #1
	bl FUN_02054ef4
	pop {r4, pc}
	arm_func_end FUN_0205586c

	arm_func_start FUN_02055890
FUN_02055890: ; 0x02055890
	push {r4, r5, r6, r7, r8, lr}
	mov r5, #0
	mov r6, r2
	mov r2, r5
	mov r8, r0
	mov r7, r1
	bl FUN_020548c4
	mov r4, r0
	mov r0, r8
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, pc}
	mov r1, r7
	add r0, r8, #0x28
	bl FUN_020547bc
	cmp r0, #0
	movge r0, r5
	popge {r4, r5, r6, r7, r8, pc}
	mov r1, r7
	add r0, r8, #0x28
	bl FUN_02054834
	cmp r0, #0
	movne r0, r5
	popne {r4, r5, r6, r7, r8, pc}
	mov r1, r7
	mov r2, r6
	add r0, r8, #0x28
	bl FUN_02054620
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	mov r1, #0x8000
	bl FUN_020543c8
	mov r0, r8
	mov r1, r7
	mov r2, #2
	bl FUN_020557d8
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02055890

	arm_func_start FUN_02055938
FUN_02055938: ; 0x02055938
	push {r4, r5, r6, r7, r8, lr}
	mov r5, #0
	mov r6, r2
	mov r2, r5
	mov r8, r0
	mov r7, r1
	bl FUN_020548c4
	movs r4, r0
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r8
	mov r1, r4
	bl FUN_02054e6c
	cmp r0, #0
	movne r0, #1
	popne {r4, r5, r6, r7, r8, pc}
	cmp r6, #0
	beq _02055998
	ldr r0, [r4, #0x5c]
	cmp r0, r7
	bne _02055998
	mov r0, r8
	bl FUN_02055af0
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02055938
_02055998:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020559a0
FUN_020559a0: ; 0x020559A0
	push {r4, lr}
	mov r4, r0
	mov r2, #0
	bl FUN_020548c4
	mov r1, r0
	mov r0, r4
	bl FUN_02054ab4
	pop {r4, pc}
	arm_func_end FUN_020559a0

	arm_func_start FUN_020559c0
FUN_020559c0: ; 0x020559C0
	push {r4, r5, r6, lr}
	mov r6, r0
	add r0, r6, #0x28
	mov r5, r1
	bl FUN_020547bc
	cmp r0, #0
	movlt r0, #0
	poplt {r4, r5, r6, pc}
	ldr r4, [r6, #0x28]
	cmp r4, r5
	moveq r0, #1
	popeq {r4, r5, r6, pc}
	mov r1, r4
	mov r2, r5
	add r0, r6, #0x28
	bl FUN_02054780
	mov r0, r6
	mov r1, r4
	mov r2, #2
	bl FUN_020557d8
	mov r0, r6
	mov r1, r5
	mov r2, #0
	bl FUN_020557d8
	mov r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020559c0

	arm_func_start FUN_02055a28
FUN_02055a28: ; 0x02055A28
	push {r4, lr}
	mov r4, r0
	mov r2, #0
	bl FUN_020548c4
	mov r1, r0
	mov r0, r4
	bl FUN_02054ad4
	pop {r4, pc}
	arm_func_end FUN_02055a28

	arm_func_start FUN_02055a48
FUN_02055a48: ; 0x02055A48
	push {r4, lr}
	mov r4, r0
	mov r2, #0
	bl FUN_020548c4
	mov r1, r0
	mov r0, r4
	bl FUN_020549c8
	pop {r4, pc}
	arm_func_end FUN_02055a48

	arm_func_start FUN_02055a68
FUN_02055a68: ; 0x02055A68
	push {r3, r4, r5, r6, r7, lr}
	mov r5, #0
	mov r2, r5
	mov r7, r0
	mov r6, r1
	bl FUN_020548c4
	mov r4, r0
	mov r0, r7
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, pc}
	mov r1, r6
	add r0, r7, #0x28
	bl FUN_020547bc
	cmp r0, #0
	movge r0, r5
	popge {r3, r4, r5, r6, r7, pc}
	mov r1, r6
	add r0, r7, #0x28
	bl FUN_020547f4
	cmp r0, #0
	moveq r0, r5
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	mov r1, #0x8000
	bl FUN_020543c8
	mov r0, r7
	mov r1, r6
	mov r2, #2
	bl FUN_020557d8
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02055a68

	arm_func_start FUN_02055af0
FUN_02055af0: ; 0x02055AF0
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r1, [r6, #0x3c]
	cmp r1, #0
	movle r0, #0
	pople {r4, r5, r6, pc}
	mov r5, #0
	mov r2, r5
	bl FUN_020548c4
	mov r4, r0
	mov r0, r6
	mov r1, r4
	bl FUN_020549a0
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, pc}
	mov r0, r4
	mov r1, #0x8000
	bl FUN_020543dc
	add r0, r6, #0x28
	bl FUN_02054828
	ldr r1, [r4, #0x5c]
	mov r0, r6
	mov r2, r5
	bl FUN_020557d8
	mov r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02055af0

	arm_func_start FUN_02055b5c
FUN_02055b5c: ; 0x02055B5C
	ldr ip, _02055B68 ; =FUN_02054834
	add r0, r0, #0x28
	bx ip
	.align 2, 0_02055B68: .word FUN_02054834
	arm_func_end FUN_02055b5c

	arm_func_start FUN_02055b6c
FUN_02055b6c: ; 0x02055B6C
	push {r4, lr}
	mov r4, r0
	mov r2, #0
	bl FUN_020548c4
	mov r1, r0
	mov r0, r4
	bl FUN_02054edc
	pop {r4, pc}
	arm_func_end FUN_02055b6c

	arm_func_start FUN_02055b8c
FUN_02055b8c: ; 0x02055B8C
	push {r4, lr}
	mov r4, r2
	mov r2, #0
	bl FUN_020548c4
	cmp r0, #0
	popeq {r4, pc}
	and r1, r4, #0x5e
	bl FUN_020543c8
	pop {r4, pc}
	arm_func_end FUN_02055b8c

	arm_func_start FUN_02055bb0
FUN_02055bb0: ; 0x02055BB0
	push {r4, lr}
	mov r4, r2
	mov r2, #0
	bl FUN_020548c4
	cmp r0, #0
	popeq {r4, pc}
	and r1, r4, #0x5e
	bl FUN_020543dc
	pop {r4, pc}
	arm_func_end FUN_02055bb0

	arm_func_start FUN_02055bd4
FUN_02055bd4: ; 0x02055BD4
	mov r2, #0x3e8
	mla r0, r2, r0, r1
	bx lr
	arm_func_end FUN_02055bd4

	arm_func_start FUN_02055be0
FUN_02055be0: ; 0x02055BE0
	ldr r3, _02055BF4 ; =0x10624DD3
	lsr r1, r0, #0x1f
	smull r2, r0, r3, r0
	add r0, r1, r0, asr #6
	bx lr
	.align 2, 0_02055BF4: .word 0x10624DD3
	arm_func_end FUN_02055be0

	arm_func_start FUN_02055bf8
FUN_02055bf8: ; 0x02055BF8
	ldr r3, _02055C1C ; =0x10624DD3
	lsr r1, r0, #0x1f
	smull r2, ip, r3, r0
	add ip, r1, ip, asr #6
	mov r3, #0x3e8
	smull r1, r2, r3, ip
	sub ip, r0, r1
	mov r0, ip
	bx lr
	.align 2, 0_02055C1C: .word 0x10624DD3
	arm_func_end FUN_02055bf8

	arm_func_start FUN_02055c20
FUN_02055c20: ; 0x02055C20
	add r0, r0, #0x28
	bx lr
	arm_func_end FUN_02055c20

	arm_func_start FUN_02055c28
FUN_02055c28: ; 0x02055C28
	stmdb sp!, {lr}
	sub sp, sp, #0xc
	mov ip, #0
	add lr, sp, #0
	cmp r2, #0
	movlt r2, ip
	mov r3, r0
	str ip, [lr]
	str ip, [lr, #4]
	str ip, [lr, #8]
	cmp r2, #0
	bne _02055C6C
	add r0, r1, #0x1000
	ldr r2, [r0, #0x430]
	ldr r1, [r0, #0x434]
	ldr r0, [r0, #0x438]
	b _02055C90
	arm_func_end FUN_02055c28
_02055C6C:
	cmp r2, #4
	bgt _02055C9C
	sub r2, r2, #1
	mov r0, #0xc
	mla r0, r2, r0, r1
	add r0, r0, #0x1000
	ldr r2, [r0, #0x8c8]
	ldr r1, [r0, #0x8cc]
	ldr r0, [r0, #0x8d0]
_02055C90:
	str r2, [sp]
	str r1, [sp, #4]
	str r0, [sp, #8]
_02055C9C:
	add r0, sp, #0
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	add sp, sp, #0xc
	ldm sp!, {pc}

	arm_func_start FUN_02055cb0
FUN_02055cb0: ; 0x02055CB0
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, #0
	mov r2, r7
	ldr sb, [sp, #0x2c]
	ldr r8, [sp, #0x30]
	mov r4, r0
	bl FUN_020548c4
	movs r6, r0
	moveq r0, r7
	popeq {r3, r4, r5, r6, r7, r8, sb, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r1, [sp, #0x28]
	mov r5, #1
	str r1, [r6, #0x30]
	str sb, [r6, #0x34]
	ldr r1, [sp, #0x34]
	mov r2, r5
	str r8, [r6, #0x38]
	mov r3, #2
	strb r3, [r6, #0x2d]
	bl FUN_0205436c
	mov r0, r4
	mov r1, r6
	mov r2, r7
	bl FUN_02054dd8
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02055cb0

	arm_func_start FUN_02055d2c
FUN_02055d2c: ; 0x02055D2C
	push {r4, lr}
	mov r4, r2
	mov r2, #0
	bl FUN_020548c4
	cmp r0, #0
	strbne r4, [r0, #0xa7]
	pop {r4, pc}
	arm_func_end FUN_02055d2c

	arm_func_start FUN_02055d48
FUN_02055d48: ; 0x02055D48
	push {r4, lr}
	mov r4, #0
	mov r2, r4
	bl FUN_020548c4
	cmp r0, #0
	ldrbne r4, [r0, #0xa7]
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02055d48

	arm_func_start FUN_02055d68
FUN_02055d68: ; 0x02055D68
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x54
	str r0, [sp, #4]
	mov r7, r1
	mov r5, #0
	bl FUN_02054f60
	mov r6, r5
	mov r4, #1
	arm_func_end FUN_02055d68
_02055D88:
	lsl r0, r6, #6
	ldrh r1, [r7, r0]
	cmp r1, #0
	beq _02055E74
	add r3, r7, r0
	ldrb r2, [r3, #0x39]
	ldr r0, [sp, #4]
	str r2, [sp]
	ldrb r2, [r3, #2]
	ldrh r3, [r3, #0x3a]
	bl FUN_02055004
	mov r1, r0
	ldr r0, [sp, #4]
	mov r2, r5
	bl FUN_020548c4
	cmp r0, #0
	addeq sp, sp, #0x54
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, r7, r6, lsl #6
	ldrb r2, [r1, #3]
	strb r2, [r0, #0x2c]
	ldr r2, [r1, #4]
	str r2, [r0, #0x40]
	ldr r2, [r1, #8]
	str r2, [r0, #0x44]
	ldr r2, [r1, #0xc]
	str r2, [r0, #0x48]
	ldr r2, [r1, #0x1c]
	str r2, [r0, #0x4c]
	ldr r2, [r1, #0x20]
	str r2, [r0, #0x50]
	ldr r2, [r1, #0x24]
	str r2, [r0, #0x54]
	ldr r2, [r1, #0x28]
	str r2, [r0, #0x58]
	ldr r2, [r1, #0x10]
	str r2, [r0, #0x84]
	ldr r2, [r1, #0x14]
	str r2, [r0, #0x88]
	ldr r2, [r1, #0x18]
	str r2, [r0, #0x8c]
	strb r4, [r0, #0x69]
	ldrh r2, [r1, #0x2c]
	strh r2, [r0, #0x6a]
	ldrh r2, [r1, #0x2e]
	strh r2, [r0, #0xa4]
	ldr r2, [r1, #0x30]
	str r2, [r0, #0x9c]
	ldr r2, [r1, #0x34]
	str r2, [r0, #0x60]
	ldrb r2, [r1, #0x38]
	strb r2, [r0, #0x65]
	ldrb r2, [r1, #0x39]
	strb r2, [r0, #0x67]
	ldrh r2, [r1, #0x3a]
	strh r2, [r0, #0xa8]
	ldrb r1, [r1, #0x3c]
	strb r1, [r0, #0xa7]
_02055E74:
	add r6, r6, #1
	cmp r6, #0x18
	blt _02055D88
	mov r2, #0
_02055E84:
	add r0, r7, r2, lsl #2
	ldr r1, [r0, #0x600]
	ldr r0, [sp, #4]
	add r0, r0, r2, lsl #2
	add r2, r2, #1
	str r1, [r0, #0x28]
	cmp r2, #4
	blt _02055E84
	add r0, r7, #0x600
	ldrsb r3, [r0, #0x14]
	ldr r0, [sp, #4]
	mov r2, r0
	str r3, [r2, #0x38]
	ldr r1, [r0, #0x28]
	ldr r4, [r7, #0x610]
	mov r3, r0
	mov r2, #0
	str r4, [r3, #0x3c]
	bl FUN_020548c4
	cmp r0, #0
	beq _02055EF4
	ldr r1, [sp, #4]
	ldrh r3, [r0, #0x6a]
	add r4, r1, #0x430
	ldr r1, [r0, #0x84]
	ldr r2, [r0, #0x8c]
	add r0, r4, #0x1000
	bl FUN_020545b0
_02055EF4:
	mov r6, #0
	mov r7, r6
	add r4, sp, #0x18
	mov r8, #0xc
_02055F04:
	ldr r0, [sp, #4]
	mov r2, r5
	add r0, r0, r7, lsl #2
	ldr r1, [r0, #0x28]
	ldr r0, [sp, #4]
	bl FUN_020548c4
	cmp r0, #0
	beq _02055F48
	mul r3, r7, r8
	ldr r2, [r0, #0x84]
	ldr r1, [r0, #0x8c]
	ldrh r0, [r0, #0x6a]
	str r2, [r4, r3]
	add r2, r4, r3
	str r1, [r2, #4]
	str r0, [r2, #8]
	add r6, r6, #1
_02055F48:
	add r7, r7, #1
	cmp r7, #4
	blt _02055F04
	ldr r0, [sp, #4]
	mov r2, #0
	ldr r1, [r0, #0x3c]
	bl FUN_020548c4
	cmp r0, #0
	beq _02055F9C
	mov r1, #0xc
	mul r7, r6, r1
	ldr r5, [r0, #0x84]
	add r4, sp, #0x18
	ldr r3, [r0, #0x8c]
	ldrh r1, [r0, #0x6a]
	add r2, sp, #0x1c
	str r5, [r4, r7]
	add r0, sp, #0x20
	str r3, [r2, r7]
	str r1, [r0, r7]
	add r6, r6, #1
_02055F9C:
	sub r0, r6, #1
	str r0, [sp, #8]
	cmp r0, #0
	ble _02056084
	ldr r0, [sp, #4]
	add r0, r0, #0x430
	str r0, [sp, #0x10]
_02055FB8:
	ldr r0, [sp, #4]
	add r0, r0, #0x1000
	ldr r6, [r0, #0x8c4]
	str r0, [sp, #0x14]
	cmp r6, #0
	ble _02056070
	ldr r0, [sp, #8]
	mov r1, #0xc
	mul r1, r0, r1
	add r0, sp, #0x18
	add r0, r0, r1
	ldr r7, [r0, #-4]
	ldr r8, [r0, #-8]
	ldmib r0, {r2, r3}
	ldr sb, [r0, #-0xc]
	add r0, sp, #0x18
	ldr r1, [r0, r1]
	sub r0, r3, r7
	str r0, [sp, #0xc]
	sub fp, r2, r8
	sub sl, r1, sb
_0205600C:
	mul r0, r6, sl
	ldr r1, [sp, #0x14]
	ldr r4, [r1, #0x8c4]
	mov r1, r4
	bl FUN_0201f9bc
	mov r5, r0
	mul r0, r6, fp
	mov r1, r4
	bl FUN_0201f9bc
	mov r1, r4
	mov r4, r0
	ldr r0, [sp, #0xc]
	mul r0, r6, r0
	bl FUN_0201fbc8
	mov r3, #1
	str r3, [sp]
	add r3, r7, r0
	ldr r0, [sp, #0x10]
	add r1, sb, r5
	add r2, r8, r4
	add r0, r0, #0x1000
	bl FUN_0205449c
	sub r6, r6, #1
	cmp r6, #0
	bgt _0205600C
_02056070:
	ldr r0, [sp, #8]
	sub r0, r0, #1
	str r0, [sp, #8]
	cmp r0, #0
	bgt _02055FB8
_02056084:
	ldr r0, [sp, #4]
	mov r4, #1
	add r0, r0, #0x430
	ldr r1, [sp, #0x18]
	ldr r2, [sp, #0x1c]
	ldr r3, [sp, #0x20]
	add r0, r0, #0x1000
	str r4, [sp]
	bl FUN_0205449c
	mov r0, r4
	add sp, sp, #0x54
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_020560b4
FUN_020560b4: ; 0x020560B4
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r5, #0
	mov r7, r0
	mov r0, r6
	mov r1, r5
	mov r2, #0x620
	bl MemWrite
	arm_func_end FUN_020560b4
_020560D4:
	mov r0, r7
	mov r1, r5
	bl FUN_02054938
	movs r4, r0
	beq _0205619C
	bl FUN_020542b0
	lsl r1, r5, #6
	strh r0, [r6, r1]
	mov r0, r4
	bl FUN_020542bc
	add r1, r6, r5, lsl #6
	strb r0, [r1, #2]
	ldrb r0, [r4, #0x2c]
	strb r0, [r1, #3]
	ldr r0, [r4, #0x40]
	str r0, [r1, #4]
	ldr r0, [r4, #0x44]
	str r0, [r1, #8]
	ldr r0, [r4, #0x48]
	str r0, [r1, #0xc]
	ldr r0, [r4, #0x4c]
	str r0, [r1, #0x1c]
	ldr r0, [r4, #0x50]
	str r0, [r1, #0x20]
	ldr r0, [r4, #0x54]
	str r0, [r1, #0x24]
	ldr r0, [r4, #0x58]
	str r0, [r1, #0x28]
	ldr r0, [r4, #0x84]
	str r0, [r1, #0x10]
	ldr r0, [r4, #0x88]
	str r0, [r1, #0x14]
	ldr r0, [r4, #0x8c]
	str r0, [r1, #0x18]
	ldrh r0, [r4, #0x6a]
	strh r0, [r1, #0x2c]
	ldrh r0, [r4, #0xa4]
	strh r0, [r1, #0x2e]
	ldr r0, [r4, #0x9c]
	str r0, [r1, #0x30]
	ldr r0, [r4, #0x60]
	str r0, [r1, #0x34]
	ldrb r0, [r4, #0x65]
	strb r0, [r1, #0x38]
	ldrb r0, [r4, #0x67]
	strb r0, [r1, #0x39]
	ldrh r0, [r4, #0xa8]
	strh r0, [r1, #0x3a]
	ldrb r0, [r4, #0xa7]
	strb r0, [r1, #0x3c]
_0205619C:
	add r5, r5, #1
	cmp r5, #0x18
	blt _020560D4
	mov r2, #0
_020561AC:
	add r0, r7, r2, lsl #2
	ldr r1, [r0, #0x28]
	add r0, r6, r2, lsl #2
	add r2, r2, #1
	str r1, [r0, #0x600]
	cmp r2, #4
	blt _020561AC
	ldr r0, [r7, #0x38]
	add r1, r7, #0x1000
	strb r0, [r6, #0x614]
	ldr r2, [r7, #0x3c]
	mov r0, #1
	str r2, [r6, #0x610]
	ldr r2, [r1, #0x900]
	str r2, [r6, #0x618]
	ldr r1, [r1, #0x904]
	str r1, [r6, #0x61c]
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020561f4
FUN_020561f4: ; 0x020561F4
	cmp r1, #0
	addge r3, r0, #0x1000
	strge r1, [r3, #0x900]
	cmp r2, #0
	addge r0, r0, #0x1000
	strge r2, [r0, #0x904]
	bx lr
	arm_func_end FUN_020561f4

	arm_func_start FUN_02056210
FUN_02056210: ; 0x02056210
	add r0, r0, #0x1000
	ldr r3, [r0, #0x900]
	str r3, [r1]
	ldr r0, [r0, #0x904]
	str r0, [r2]
	bx lr
	arm_func_end FUN_02056210

	arm_func_start FUN_02056228
FUN_02056228: ; 0x02056228
	ldr r2, [r0, #4]
	cmp r2, #0
	cmpne r1, #0
	ble _02056244
	ldr r0, [r0, #8]
	cmp r1, r0
	ble _0205624C
	arm_func_end FUN_02056228
_02056244:
	mov r0, #0
	bx lr
_0205624C:
	sub r0, r1, #1
	add r0, r2, r0, lsl #3
	bx lr

	arm_func_start FUN_02056258
FUN_02056258: ; 0x02056258
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov r7, r3
	mov sb, r1
	mov r6, #0
	mov r8, r2
	mov r1, r7
	mov r2, r6
	mov sl, r0
	bl FUN_0205649c
	cmp r0, #0
	addne sp, sp, #0xc
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov fp, #1
	mov r0, sl
	mov r1, r6
	mov r2, fp
	bl FUN_0205649c
	mov r5, r0
	mov r0, sl
	mov r1, r5
	bl FUN_02056228
	mov r4, r0
	cmp r5, #0
	cmpne r4, #0
	addeq sp, sp, #0xc
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _02056338 ; =0x02099F58
	ldr r2, [sl, #0x20]
	ldr r0, [r0]
	mov r1, sb
	str fp, [sp]
	str r6, [sp, #4]
	mov r3, r8
	add r0, r0, #4
	str r6, [sp, #8]
	bl FUN_02058684
	mov r8, r0
	cmp r8, #0
	addle sp, sp, #0xc
	movle r0, r6
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _02056338 ; =0x02099F58
	mov r1, r8
	ldr r0, [r0]
	bl FUN_02116920
	mov r0, sl
	mov r1, r5
	bl FUN_02056520
	strh r8, [r4]
	str r7, [r4, #4]
	mov r0, r5
	str fp, [sl, #0x10]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02056338: .word 0x02099F58
	arm_func_end FUN_02056258

	arm_func_start LAB_0205633c
LAB_0205633c: ; 0x0205633C
	push {r4, lr}
	ldr r1, _02056358 ; =0x0209072C
	mov r4, r0
	str r1, [r4]
	bl FUN_020563a4
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02056358: .word 0x0209072C
	arm_func_end LAB_0205633c

	arm_func_start LAB_0205635c
LAB_0205635c: ; 0x0205635C
	push {r4, lr}
	ldr r1, _02056378 ; =0x0209072C
	mov r4, r0
	str r1, [r4]
	bl FUN_02056418
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02056378: .word 0x0209072C
	arm_func_end LAB_0205635c

	arm_func_start LAB_0205637c
LAB_0205637c: ; 0x0205637C
	push {r4, lr}
	ldr r1, _020563A0 ; =0x0209072C
	mov r4, r0
	str r1, [r4]
	bl FUN_02056418
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_020563A0: .word 0x0209072C
	arm_func_end LAB_0205637c

	arm_func_start FUN_020563a4
FUN_020563a4: ; 0x020563A4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, #0
	mov r4, #0xc
	mov r2, r4
	add r1, r5, #0x14
	str r0, [r5, #4]
	str r0, [r5, #8]
	str r0, [r5, #0xc]
	str r0, [r5, #0x10]
	bl FUN_0200787c
	sub r0, r4, #0xd
	str r0, [r5, #0x20]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020563a4

	arm_func_start FUN_020563dc
FUN_020563dc: ; 0x020563DC
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r6, r0
	mov r4, r2
	bl FUN_020563a4
	lsl r0, r5, #3
	mvn r1, #0
	bl FUN_0208670c
	cmp r0, #0
	str r0, [r6, #4]
	moveq r0, #0
	strne r5, [r6, #8]
	strne r4, [r6, #0xc]
	movne r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020563dc

	arm_func_start FUN_02056418
FUN_02056418: ; 0x02056418
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	ldr r7, [r8, #4]
	cmp r7, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r6, #1
	mov r5, #0
	ldr r4, _02056498 ; =0x02099F58
	b _02056470
	arm_func_end FUN_02056418
_0205643C:
	ldrh r1, [r7]
	cmp r1, #0
	beq _02056460
	ldr r0, [r4]
	bl FUN_02116910
	ldr r0, [r4]
	ldrh r1, [r7]
	add r0, r0, #4
	bl FUN_02058ee0
_02056460:
	strh r5, [r7]
	str r5, [r7, #4]
	add r6, r6, #1
	add r7, r7, #8
_02056470:
	ldr r0, [r8, #8]
	cmp r6, r0
	ble _0205643C
	ldr r0, [r8, #4]
	bl FUN_02086738
	mov r0, r8
	bl FUN_02056684
	mov r0, r8
	bl FUN_020563a4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02056498: .word 0x02099F58

	arm_func_start FUN_0205649c
FUN_0205649c: ; 0x0205649C
	ldr r3, [r0, #4]
	cmp r3, #0
	moveq r0, #0
	bxeq lr
	cmp r2, #0
	cmpeq r1, #0
	moveq r0, #0
	bxeq lr
	ldr ip, [r0, #8]
	mov r0, #1
	cmp ip, #1
	blt _020564E8
	arm_func_end FUN_0205649c
_020564CC:
	ldr r2, [r3, #4]
	cmp r2, r1
	bxeq lr
	add r0, r0, #1
	cmp r0, ip
	add r3, r3, #8
	ble _020564CC
_020564E8:
	mov r0, #0
	bx lr

	arm_func_start FUN_020564f0
FUN_020564f0: ; 0x020564F0
	push {r3, lr}
	bl FUN_02056228
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, pc}
	ldr r2, _0205651C ; =0x02099F58
	ldrh r1, [r0]
	ldr r0, [r2]
	add r0, r0, #4
	bl FUN_02058e30
	pop {r3, pc}
	.align 2, 0_0205651C: .word 0x02099F58
	arm_func_end FUN_020564f0

	arm_func_start FUN_02056520
FUN_02056520: ; 0x02056520
	push {r4, r5, r6, lr}
	mov r5, #0
	bl FUN_02056228
	movs r6, r0
	beq _02056570
	ldrh r0, [r6]
	ldr r4, _02056578 ; =0x02099F58
	ldrh r1, [r6]
	cmp r0, #0
	ldr r0, [r4]
	movne r5, #1
	bl FUN_02116910
	ldr r0, [r4]
	ldrh r1, [r6]
	add r0, r0, #4
	bl FUN_02058ee0
	mov r1, r6
	mov r0, #0
	mov r2, #8
	bl FUN_0200787c
	arm_func_end FUN_02056520
_02056570:
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0_02056578: .word 0x02099F58

	arm_func_start FUN_0205657c
FUN_0205657c: ; 0x0205657C
	push {r3, lr}
	bl FUN_02056228
	cmp r0, #0
	moveq r0, #0
	ldrhne r0, [r0]
	pop {r3, pc}
	arm_func_end FUN_0205657c

	arm_func_start FUN_02056594
FUN_02056594: ; 0x02056594
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #0x10]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #8]
	mov r5, #0
	cmp r0, #1
	mov r4, #1
	blt _020565E4
	arm_func_end FUN_02056594
_020565C0:
	mov r0, r6
	mov r1, r4
	bl FUN_020564f0
	cmp r0, #1
	ldr r0, [r6, #8]
	add r4, r4, #1
	addeq r5, r5, #1
	cmp r4, r0
	ble _020565C0
_020565E4:
	cmp r5, #0
	moveq r0, #0
	streq r0, [r6, #0x10]
	mov r0, r5
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020565f8
FUN_020565f8: ; 0x020565F8
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #8]
	mov r5, #0
	cmp r0, #1
	mov r4, #1
	blt _02056638
	arm_func_end FUN_020565f8
_02056614:
	mov r0, r6
	mov r1, r4
	bl FUN_02056520
	cmp r0, #0
	ldr r0, [r6, #8]
	add r4, r4, #1
	addne r5, r5, #1
	cmp r4, r0
	ble _02056614
_02056638:
	mov r0, r5
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02056640
FUN_02056640: ; 0x02056640
	push {r4, lr}
	mov r4, r0
	mov r0, #0
	bl FUN_02085f50
	str r0, [r4, #0x20]
	mov r0, #1
	pop {r4, pc}
	arm_func_end FUN_02056640

	arm_func_start FUN_0205665c
FUN_0205665c: ; 0x0205665C
	push {r3, lr}
	ldr r0, [r0, #0x20]
	cmp r0, #0
	blt _0205667C
	bl FUN_02086080
	cmp r0, #0
	moveq r0, #1
	popeq {r3, pc}
	arm_func_end FUN_0205665c
_0205667C:
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_02056684
FUN_02056684: ; 0x02056684
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x20]
	cmp r0, #0
	poplt {r4, pc}
	bl FUN_02086040
	mvn r0, #0
	str r0, [r4, #0x20]
	pop {r4, pc}
	arm_func_end FUN_02056684

	arm_func_start FUN_020566a8
FUN_020566a8: ; 0x020566A8
	ldr r2, [r0, #0x94]
	cmp r2, #0
	cmpne r1, #0
	ble _020566C4
	ldr r0, [r0, #0x98]
	cmp r1, r0
	ble _020566CC
	arm_func_end FUN_020566a8
_020566C4:
	mov r0, #0
	bx lr
_020566CC:
	sub r1, r1, #1
	mov r0, #0x18
	mla r0, r1, r0, r2
	bx lr

	arm_func_start FUN_020566dc
FUN_020566dc: ; 0x020566DC
	push {r4, r5, r6, r7, r8, lr}
	mov r4, #1
	mov r7, r1
	mov r1, r4
	mov r8, r0
	mov r6, r2
	mov r5, #0
	bl FUN_020566a8
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r2, [r8, #0x98]
	cmp r2, #1
	blt _02056730
	arm_func_end FUN_020566dc
_02056714:
	ldrb r1, [r7, r0]
	add r4, r4, #1
	add r0, r0, #0x18
	cmp r6, r1
	addeq r5, r5, #1
	cmp r4, r2
	ble _02056714
_02056730:
	mov r0, r5
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02056738
FUN_02056738: ; 0x02056738
	push {r4, lr}
	mov r4, r1
	bl FUN_020414fc
	mov r0, r4
	mov r1, #0x200
	bl FUN_02041518
	pop {r4, pc}
	arm_func_end FUN_02056738

	arm_func_start thunk_FUN_02041618
thunk_FUN_02041618: ; 0x02056754
	ldr ip, _0205675C ; =FUN_02041618
	bx ip
	.align 2, 0_0205675C: .word FUN_02041618
	arm_func_end thunk_FUN_02041618

	arm_func_start FUN_02056760
FUN_02056760: ; 0x02056760
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r1, _020567A4 ; =0x0209071C
	mov r4, r0
	ldr ip, _020567A8 ; =LAB_0205635c
	str r1, [r4]
	ldr r3, _020567AC ; =LAB_0205633c
	add r0, r4, #4
	mov r1, #4
	mov r2, #0x24
	str ip, [sp]
	bl FUN_0201e1f8
	mov r0, r4
	bl FUN_02056828
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_020567A4: .word 0x0209071C
_020567A8: .word LAB_0205635c
_020567AC: .word LAB_0205633c
	arm_func_end FUN_02056760

	arm_func_start FUN_020567b0
FUN_020567b0: ; 0x020567B0
	push {r4, lr}
	ldr r1, _020567E0 ; =0x0209071C
	mov r4, r0
	str r1, [r4]
	bl FUN_020568a4
	ldr r3, _020567E4 ; =LAB_0205635c
	add r0, r4, #4
	mov r1, #4
	mov r2, #0x24
	bl FUN_0201e338
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_020567E0: .word 0x0209071C
_020567E4: .word LAB_0205635c
	arm_func_end FUN_020567b0

	arm_func_start FUN_020567e8
FUN_020567e8: ; 0x020567E8
	push {r4, lr}
	ldr r1, _02056820 ; =0x0209071C
	mov r4, r0
	str r1, [r4]
	bl FUN_020568a4
	ldr r3, _02056824 ; =LAB_0205635c
	add r0, r4, #4
	mov r1, #4
	mov r2, #0x24
	bl FUN_0201e338
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02056820: .word 0x0209071C
_02056824: .word LAB_0205635c
	arm_func_end FUN_020567e8

	arm_func_start FUN_02056828
FUN_02056828: ; 0x02056828
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	mov r7, #0
	add r6, r4, #4
	mov r5, #0x24
	arm_func_end FUN_02056828
_0205683C:
	mla r0, r7, r5, r6
	bl FUN_020563a4
	add r7, r7, #1
	cmp r7, #4
	blt _0205683C
	ldr r0, _0205689C ; =0x02099F78
	mov r2, #0
	ldr r1, _020568A0 ; =0x02090734
	str r2, [r4, #0x94]
	str r2, [r4, #0x98]
	str r2, [r4, #0x9c]
	str r2, [r4, #0xa0]
	str r2, [r4, #0xa4]
	bl FUN_020418b0
	str r0, [r4, #0xa8]
	cmp r0, #0
	moveq r0, #0xaa
	asrne r1, r0, #4
	addne r0, r0, r1, lsr #27
	asrne r0, r0, #5
	str r0, [r4, #0xa8]
	mov r0, #0
	str r0, [r4, #0xac]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0205689C: .word 0x02099F78
_020568A0: .word 0x02090734

	arm_func_start FUN_020568a4
FUN_020568a4: ; 0x020568A4
	push {r4, lr}
	mov r4, r0
	bl FUN_020569c0
	mov r0, r4
	bl FUN_02057c38
	mov r0, r4
	bl FUN_02056828
	pop {r4, pc}
	arm_func_end FUN_020568a4

	arm_func_start FUN_020568c4
FUN_020568c4: ; 0x020568C4
	push {r4, r5, r6, r7, r8, lr}
	ldr r1, [sp, #0x18]
	ldr r7, [sp, #0x20]
	mov r6, r0
	mov r4, r3
	add r0, r1, #3
	add r3, r7, #3
	mov r5, r2
	bic r2, r0, #3
	mov r1, r4
	add r0, r6, #0x28
	bic r7, r3, #3
	bl FUN_020563dc
	ldr r1, [sp, #0x1c]
	mov r2, r7
	add r0, r6, #4
	bl FUN_020563dc
	mov r7, #0x20
	mov r1, r4
	mov r2, r7
	add r0, r6, #0x70
	bl FUN_020563dc
	ldr r1, [sp, #0x1c]
	mov r2, r7
	add r0, r6, #0x4c
	bl FUN_020563dc
	mov r4, #0x18
	mul r1, r5, r4
	ldr r0, _020569B8 ; =0x0209A250
	bl FUN_0202de44
	ldr r7, _020569BC ; =0x02099F58
	str r0, [r6, #0x94]
	ldr r0, [r7]
	mov r1, #3
	lsl r2, r5, #1
	add r0, r0, #4
	bl FUN_020596ec
	mov r1, r0
	ldr r0, [r6, #0x94]
	str r1, [r6, #0x9c]
	cmp r0, #0
	str r5, [r6, #0x98]
	cmpne r1, #0
	bgt _02056984
	mov r0, r6
	bl FUN_020568a4
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020568c4
_02056984:
	mov r8, #1
	ldr r0, [r7]
	mov r2, r8
	bl FUN_021168F8
	mul r2, r5, r4
	ldr r1, [r6, #0x94]
	mov r0, #0
	bl FUN_0200787c
	mov r0, r6
	lsl r1, r5, #1
	bl FUN_02056738
	mov r0, r8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020569B8: .word 0x0209A250
_020569BC: .word 0x02099F58

	arm_func_start FUN_020569c0
FUN_020569c0: ; 0x020569C0
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	ldr r1, [r4, #0x94]
	cmp r1, #0
	beq _02056A20
	mov r7, #1
	mov r1, r7
	bl FUN_020566a8
	mov r6, r0
	ldr r5, _02056A80 ; =0x02099F58
	b _02056A00
	arm_func_end FUN_020569c0
_020569EC:
	ldrh r1, [r6, #4]
	ldr r0, [r5]
	bl FUN_02116AA8
	add r7, r7, #1
	add r6, r6, #0x18
_02056A00:
	ldr r0, [r4, #0x98]
	cmp r7, r0
	ble _020569EC
	ldr r1, [r4, #0x94]
	ldr r0, _02056A84 ; =0x0209A250
	bl FUN_0202e1c0
	mov r0, #0
	str r0, [r4, #0x94]
_02056A20:
	mov r7, #0
	add r6, r4, #4
	mov r5, #0x24
	b _02056A3C
_02056A30:
	mla r0, r7, r5, r6
	bl FUN_02056418
	add r7, r7, #1
_02056A3C:
	cmp r7, #4
	blt _02056A30
	ldr r1, [r4, #0x9c]
	cmp r1, #0
	ble _02056A74
	ldr r5, _02056A80 ; =0x02099F58
	ldr r0, [r5]
	bl FUN_02116910
	ldr r0, [r5]
	ldr r1, [r4, #0x9c]
	add r0, r0, #4
	bl FUN_02058ee0
	mov r0, #0
	str r0, [r4, #0x9c]
_02056A74:
	mov r0, r4
	bl thunk_FUN_02041618
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02056A80: .word 0x02099F58
_02056A84: .word 0x0209A250

	arm_func_start FUN_02056a88
FUN_02056a88: ; 0x02056A88
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldr r3, [r7, #0x94]
	mov r6, r1
	cmp r3, #0
	mov r5, r2
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r4, #1
	mov r1, r4
	bl FUN_020566a8
	ldr r2, [r7, #0x98]
	cmp r2, #1
	blt _02056AE8
	arm_func_end FUN_02056a88
_02056AC0:
	ldrh r1, [r0, #6]
	cmp r1, r6
	ldrbeq r1, [r0, #8]
	cmpeq r1, r5
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, pc}
	add r4, r4, #1
	cmp r4, r2
	add r0, r0, #0x18
	ble _02056AC0
_02056AE8:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02056af0
FUN_02056af0: ; 0x02056AF0
	push {r3, r4, lr}
	sub sp, sp, #0xc
	ldr lr, [sp, #0x18]
	mov r4, r2
	stm sp, {r3, lr}
	ldr ip, [sp, #0x1c]
	mov r2, r1
	mov r3, r4
	mov r1, #0
	str ip, [sp, #8]
	bl FUN_02056b24
	add sp, sp, #0xc
	pop {r3, r4, pc}
	arm_func_end FUN_02056af0

	arm_func_start FUN_02056b24
FUN_02056b24: ; 0x02056B24
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x70
	mov sl, r2
	mov r5, r0
	lsl r6, sl, #0x10
	mov r4, r1
	lsr r1, r6, #0x10
	ldr r0, _02056DFC ; =0x0209BA20
	add r2, sp, #8
	mov r6, r3
	mov r8, #0
	bl FUN_0204bd64
	cmp r0, #0
	addeq sp, sp, #0x70
	moveq r0, r8
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r4, #0
	mov r0, r5
	mov r1, sl
	mov r2, r6
	beq _02056B80
	bl FUN_02056a88
	b _02056BAC
	arm_func_end FUN_02056b24
_02056B80:
	bl FUN_02056a88
	movs r4, r0
	bne _02056BAC
	mov r0, r5
	mov r1, r8
	mov r2, r8
	bl FUN_02056a88
	movs r4, r0
	addeq sp, sp, #0x70
	moveq r0, r8
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
_02056BAC:
	mov r0, r5
	mov r1, r4
	bl FUN_020566a8
	movs sb, r0
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, sl
	mov r1, r8
	bl FUN_020EFA9C
	movs r7, r0
	beq _02056C14
	ldr r0, _02056DFC ; =0x0209BA20
	mov r1, r7
	bl FUN_020EE064
	cmp r0, #0
	ldrhne r0, [r0, #0x26]
	mov r1, r7
	strhne r0, [sb, #0x10]
	ldr r0, _02056DFC ; =0x0209BA20
	strheq r8, [sb, #0x10]
	bl FUN_020EE478
	cmp r0, #0
	ldrhne r0, [r0, #0x26]
	strhne r0, [sb, #0xe]
	strheq r8, [sb, #0xe]
_02056C14:
	mov r7, #1
	strb r7, [sb, #0x14]
	strb r7, [sb, #0x15]
	strb r7, [sb, #0x16]
	strb r7, [sb, #0x17]
	ldrh r0, [sp, #0x5c]
	ldr r1, [sp, #0x98]
	bl FUN_020F3BA4
	mov r1, r0
	mov r2, r8
	add r0, r5, #0x28
	bl FUN_0205649c
	strb r0, [sb, #1]
	ldrh r0, [sp, #0x5e]
	bl FUN_020F3BB0
	mov r1, r0
	add r0, r5, #0x70
	mov r2, r8
	bl FUN_0205649c
	strb r0, [sb, #3]
	ldrb r0, [sp, #0x64]
	ldr r1, [sp, #0x90]
	ldr r2, [sp, #0x94]
	ldr r3, [sp, #0x98]
	bl FUN_020F3BB4
	mov r1, r0
	add r0, r5, #4
	mov r2, r8
	bl FUN_0205649c
	strb r0, [sb]
	ldr r0, [sp, #0x90]
	ldr r1, [sp, #0x94]
	bl FUN_020F3C08
	mov r1, r0
	add r0, r5, #0x4c
	mov r2, r8
	bl FUN_0205649c
	strb r0, [sb, #2]
	strh sl, [sb, #6]
	ldr r1, [sp, #0x90]
	strb r6, [sb, #8]
	ldr r0, [sp, #0x94]
	strh r1, [sb, #0xa]
	strb r0, [sb, #0xc]
	ldr r0, [sp, #0x98]
	strb r0, [sb, #0xd]
	ldrb r0, [sp, #0x5b]
	strb r0, [sb, #0x12]
	ldrh r0, [sb, #4]
	cmp r0, #0
	bne _02056DA4
	ldr sl, _02056E00 ; =0x02099F58
	mov r6, #2
	ldr r0, [sl]
	mov r1, r6
	bl FUN_021169B0
	strh r0, [sb, #4]
	ldrh r1, [sb, #4]
	cmp r1, #0
	addeq sp, sp, #0x70
	moveq r0, r8
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, [sl]
	mov r2, r6
	bl FUN_021175DC
	ldr r0, [r5, #0xa0]
	ldrh r1, [sb, #4]
	orr r2, r0, #2
	ldr r0, [sl]
	mov r3, r7
	orr r2, r2, #0x200
	bl FUN_02116CB4
	sub r0, r4, #1
	lsl r0, r0, #1
	bl FUN_02041708
	mov r8, r0
	sub r0, r4, #1
	lsl r0, r0, #1
	bl FUN_020416d4
	mov r2, r7
	mov r3, r8
	str r0, [sp]
	ldr r0, [sl]
	ldrh r1, [sb, #4]
	bl FUN_02117160
	sub r0, r4, #1
	lsl r0, r0, #1
	add r0, r0, #1
	bl FUN_02041708
	mov r7, r0
	sub r0, r4, #1
	lsl r0, r0, #1
	add r0, r0, #1
	bl FUN_020416d4
	mov r2, r6
	mov r3, r7
	str r0, [sp]
	ldr r0, [sl]
	ldrh r1, [sb, #4]
	bl FUN_02117160
_02056DA4:
	ldrb r0, [sp, #0x64]
	mov r3, #0
	mov r2, #1
	cmp r0, #1
	bne _02056DD8
	ldr r0, [r5, #0xa4]
	cmp r0, #0
	mov r0, #0x1000
	bne _02056DD0
	rsb r0, r0, #0
	b _02056DD0
_02056DD0:
	stm sp, {r0, r3}
	b _02056DE0
_02056DD8:
	str r3, [sp]
	str r3, [sp, #4]
_02056DE0:
	ldr r0, _02056E00 ; =0x02099F58
	ldrh r1, [sb, #4]
	ldr r0, [r0]
	bl FUN_0211771C
	mov r0, r4
	add sp, sp, #0x70
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02056DFC: .word 0x0209BA20
_02056E00: .word 0x02099F58

	arm_func_start FUN_02056e04
FUN_02056e04: ; 0x02056E04
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r4, r2
	bl FUN_020566a8
	movs r7, r0
	popeq {r4, r5, r6, r7, r8, pc}
	ldrh r1, [r7, #4]
	cmp r1, #0
	beq _02056E34
	ldr r0, _02056E90 ; =0x02099F58
	ldr r0, [r0]
	bl FUN_02116AA8
	arm_func_end FUN_02056e04
_02056E34:
	cmp r4, #0
	beq _02056E7C
	mov r6, #0
	add r5, r8, #4
	mov r4, #0x24
	b _02056E74
_02056E4C:
	ldrb r2, [r7, r6]
	mov r0, r8
	mov r1, r6
	bl FUN_020566dc
	cmp r0, #1
	bgt _02056E70
	mla r0, r6, r4, r5
	ldrb r1, [r7, r6]
	bl FUN_02056520
_02056E70:
	add r6, r6, #1
_02056E74:
	cmp r6, #4
	blt _02056E4C
_02056E7C:
	mov r1, r7
	mov r0, #0
	mov r2, #0x18
	bl FUN_0200787c
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02056E90: .word 0x02099F58

	arm_func_start FUN_02056e94
FUN_02056e94: ; 0x02056E94
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #0x98]
	mov r5, r1
	mov r4, #1
	cmp r0, #1
	poplt {r4, r5, r6, pc}
	arm_func_end FUN_02056e94
_02056EB0:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_02056e04
	ldr r0, [r6, #0x98]
	add r4, r4, #1
	cmp r4, r0
	ble _02056EB0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02056ed4
FUN_02056ed4: ; 0x02056ED4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x168
	mov sl, r0
	lsl r1, r1, #0x10
	add r7, sp, #0
	mov sb, r2
	ldr r0, _0205700C ; =0x0209BA20
	mov r2, r7
	lsr r1, r1, #0x10
	mov r8, r3
	bl FUN_0204bd64
	cmp r0, #0
	addeq sp, sp, #0x168
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrh r0, [sp, #0x54]
	ldr r1, [sp, #0x188]
	bl FUN_020F3BA4
	mov r4, r0
	add r6, sp, #0x68
	ldr r1, _02057010 ; =0x02090744
	mov r0, r6
	mov r2, r4
	bl FUN_02015184
	mov r5, #2
	mov r3, r4
	add r0, sl, #0x28
	mov r1, r5
	mov r2, r6
	bl FUN_02056258
	ldrh r0, [sp, #0x56]
	bl FUN_020F3BB0
	mov r4, r0
	ldr r1, _02057014 ; =0x02090754
	mov r0, r6
	mov r2, r4
	bl FUN_02015184
	mov r3, r4
	mov r4, #3
	add r0, sl, #0x70
	mov r1, r4
	mov r2, r6
	bl FUN_02056258
	mov r0, r7
	mov r1, sb
	bl FUN_020F0AF4
	mov sb, r0
	ldrb r0, [sp, #0x5c]
	ldr r3, [sp, #0x188]
	mov r1, sb
	mov r2, r8
	bl FUN_020F3BB4
	mov r7, r0
	ldr r1, _02057018 ; =0x02090760
	mov r0, r6
	mov r2, r7
	bl FUN_02015184
	mov r1, r5
	mov r3, r7
	add r0, sl, #4
	mov r2, r6
	bl FUN_02056258
	mov r0, sb
	mov r1, r8
	bl FUN_020F3C08
	mov r5, r0
	ldr r1, _0205701C ; =0x02090770
	mov r0, r6
	mov r2, r5
	bl FUN_02015184
	add r0, sl, #0x4c
	mov r1, r4
	mov r2, r6
	mov r3, r5
	bl FUN_02056258
	mov r0, #1
	add sp, sp, #0x168
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0205700C: .word 0x0209BA20
_02057010: .word 0x02090744
_02057014: .word 0x02090754
_02057018: .word 0x02090760
_0205701C: .word 0x02090770
	arm_func_end FUN_02056ed4

	arm_func_start FUN_02057020
FUN_02057020: ; 0x02057020
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x200
	add r4, sp, #0
	mov r6, #0
	mov fp, r0
	mov r0, r6
	mov r1, r4
	mov r2, #0x200
	bl FUN_0200787c
	mov r5, #1
	mov r0, fp
	mov r1, r5
	bl FUN_020566a8
	cmp r0, #0
	addeq sp, sp, #0x200
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [fp, #0x98]
	cmp r1, #1
	blt _020570A8
	arm_func_end FUN_02057020
_02057070:
	mov r7, r6
_02057074:
	ldrb r2, [r0, r7]
	add r3, r4, r7, lsl #7
	add r7, r7, #1
	ldr r1, [r3, r2, lsl #2]
	cmp r7, #4
	add r1, r1, #1
	str r1, [r3, r2, lsl #2]
	blt _02057074
	ldr r1, [fp, #0x98]
	add r5, r5, #1
	cmp r5, r1
	add r0, r0, #0x18
	ble _02057070
_020570A8:
	mov r8, #0
	mov sl, r8
	add r5, fp, #4
_020570B4:
	mov r0, #0x24
	mul r6, sl, r0
	add r0, fp, r6
	ldr r7, [r0, #0xc]
	mov sb, #1
	cmp r7, #1
	blt _02057104
	add r0, sp, #0
	add r4, r0, sl, lsl #7
_020570D8:
	ldr r0, [r4, sb, lsl #2]
	cmp r0, #0
	bgt _020570F8
	mov r1, sb
	add r0, r5, r6
	bl FUN_02056520
	cmp r0, #0
	addne r8, r8, #1
_020570F8:
	add sb, sb, #1
	cmp sb, r7
	ble _020570D8
_02057104:
	add sl, sl, #1
	cmp sl, #4
	blt _020570B4
	mov r0, r8
	add sp, sp, #0x200
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0205711c
FUN_0205711c: ; 0x0205711C
	push {r4, r5, r6, r7, r8, lr}
	mov r4, #0
	mov r6, r0
	mov r8, r4
	add r7, r6, #4
	mov r5, #0x24
	arm_func_end FUN_0205711c
_02057134:
	mla r0, r8, r5, r7
	bl FUN_020565f8
	add r8, r8, #1
	cmp r8, #4
	add r4, r4, r0
	blt _02057134
	ldr r0, [r6, #0x94]
	cmp r0, #0
	beq _020571A4
	mov r5, #1
	mov r0, r6
	mov r1, r5
	bl FUN_020566a8
	ldr r1, [r6, #0x98]
	cmp r1, #1
	blt _020571A4
	mov r2, #0
	mov r3, r2
_0205717C:
	mov r1, r3
_02057180:
	strb r2, [r0, r1]
	add r1, r1, #1
	cmp r1, #4
	blt _02057180
	ldr r1, [r6, #0x98]
	add r5, r5, #1
	cmp r5, r1
	add r0, r0, #0x18
	ble _0205717C
_020571A4:
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020571ac
FUN_020571ac: ; 0x020571AC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, #0
	mov r6, r7
	add r5, r0, #4
	mov r4, #0x24
	arm_func_end FUN_020571ac
_020571C0:
	mla r0, r6, r4, r5
	bl FUN_02056594
	add r6, r6, #1
	cmp r6, #4
	add r7, r7, r0
	blt _020571C0
	mov r0, r7
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020571e0
FUN_020571e0: ; 0x020571E0
	push {r3, lr}
	bl FUN_020566a8
	cmp r0, #0
	moveq r0, #0
	ldrhne r0, [r0, #4]
	pop {r3, pc}
	arm_func_end FUN_020571e0

	arm_func_start FUN_020571f8
FUN_020571f8: ; 0x020571F8
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	bl FUN_020566a8
	movs r2, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	add r1, r5, #4
	mov r0, #0x24
	mla r0, r4, r0, r1
	ldrb r1, [r2, r4]
	bl FUN_0205657c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020571f8

	arm_func_start thunk_FUN_02041668
thunk_FUN_02041668: ; 0x0205722C
	ldr ip, _02057234 ; =FUN_02041668
	bx ip
	.align 2, 0_02057234: .word FUN_02041668
	arm_func_end thunk_FUN_02041668

	arm_func_start FUN_02057238
FUN_02057238: ; 0x02057238
	push {r3, lr}
	bl FUN_02041760
	cmp r0, #1
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_02057238

	arm_func_start FUN_02057250
FUN_02057250: ; 0x02057250
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #4
	mov r6, r0
	bl FUN_02041780
	mov r4, #1
	mov r0, r6
	mov r1, r4
	bl FUN_020566a8
	movs r5, r0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov sl, r4
	mov r8, #2
	ldr r7, _02057330 ; =0x02099F58
	b _02057310
	arm_func_end FUN_02057250
_02057290:
	sub r0, r4, #1
	lsl r0, r0, #1
	bl FUN_02041708
	sub r1, r4, #1
	mov sb, r0
	lsl r0, r1, #1
	bl FUN_020416d4
	mov r3, sb
	str r0, [sp]
	ldr r0, [r7]
	ldrh r1, [r5, #4]
	mov r2, sl
	bl FUN_02117160
	sub r0, r4, #1
	lsl r0, r0, #1
	add r0, r0, #1
	bl FUN_02041708
	mov sb, r0
	sub r0, r4, #1
	lsl r0, r0, #1
	add r0, r0, #1
	bl FUN_020416d4
	mov r3, sb
	str r0, [sp]
	ldr r0, [r7]
	ldrh r1, [r5, #4]
	mov r2, r8
	bl FUN_02117160
	strb sl, [r5, #0x16]
	strb sl, [r5, #0x17]
	add r4, r4, #1
	add r5, r5, #0x18
_02057310:
	ldr r0, [r6, #0x98]
	cmp r4, r0
	ble _02057290
	mov r0, r6
	bl thunk_FUN_02041668
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02057330: .word 0x02099F58

	arm_func_start FUN_02057334
FUN_02057334: ; 0x02057334
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov sl, r0
	mov sb, r1
	bl FUN_020566a8
	movs r6, r0
	addeq sp, sp, #0x14
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [r6, #0x14]
	cmp r0, #0
	ldrbeq r0, [r6, #0x15]
	cmpeq r0, #0
	ldrbeq r0, [r6, #0x16]
	cmpeq r0, #0
	ldrbeq r0, [r6, #0x17]
	cmpeq r0, #0
	addeq sp, sp, #0x14
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r7, #0
	add r5, sl, #4
	mov r4, #0x24
	b _020573BC
	arm_func_end FUN_02057334
_02057394:
	ldrb r1, [r6, r7]
	cmp r1, #0
	beq _020573B8
	mla r0, r7, r4, r5
	bl FUN_020564f0
	cmp r0, #0
	addne sp, sp, #0x14
	movne r0, #1
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020573B8:
	add r7, r7, #1
_020573BC:
	cmp r7, #4
	blt _02057394
	ldrb r0, [r6, #0x14]
	cmp r0, #0
	beq _02057428
	ldrb r1, [r6, #1]
	add r0, sl, #0x28
	strb r1, [r6, #1]
	bl FUN_0205657c
	ldr r1, [sl, #0x9c]
	lsl r0, r0, #0x10
	str r1, [sp]
	ldr r4, _02057690 ; =0x02099F58
	lsr r3, r0, #0x10
	ldrh r1, [r6, #4]
	ldr r0, [r4]
	mov r2, #1
	bl FUN_02117180
	lsl r3, sb, #1
	sub r3, r3, #2
	ldrh r1, [r6, #4]
	ldr r0, [r4]
	mov r2, #1
	and r3, r3, #0xff
	bl FUN_0211726C
	mov r0, #0
	strb r0, [r6, #0x14]
_02057428:
	ldrb r0, [r6, #0x15]
	cmp r0, #0
	beq _02057490
	ldrb r1, [r6]
	add r0, sl, #4
	strb r1, [r6]
	bl FUN_0205657c
	ldr r1, [sl, #0x9c]
	lsl r0, r0, #0x10
	str r1, [sp]
	mov r5, #2
	ldr r4, _02057690 ; =0x02099F58
	lsr r3, r0, #0x10
	ldrh r1, [r6, #4]
	ldr r0, [r4]
	mov r2, r5
	bl FUN_02117180
	lsl r3, sb, #1
	sub r3, r3, #1
	ldrh r1, [r6, #4]
	ldr r0, [r4]
	mov r2, r5
	and r3, r3, #0xff
	bl FUN_0211726C
	mov r0, #0
	strb r0, [r6, #0x15]
_02057490:
	ldrb r0, [r6, #0x16]
	cmp r0, #0
	beq _02057558
	ldrb r1, [r6, #3]
	add r0, sl, #0x70
	strb r1, [r6, #3]
	bl FUN_0205657c
	ldr r1, _02057690 ; =0x02099F58
	mov r2, #0
	ldr r5, [r1]
	mov r1, r0
	add r0, r5, #4
	bl FUN_02059a78
	movs r4, r0
	beq _02057550
	mov r7, #0x20
	add r2, sp, #0x10
	mov r1, r7
	mov r3, #0
	add r0, r5, #4
	bl FUN_020594f4
	ldr r1, [sp, #0x10]
	cmp r1, #0
	moveq r0, #0
	strbeq r0, [r6, #0x16]
	addeq sp, sp, #0x14
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r4
	mov r2, r7
	bl FUN_020078c8
	ldr r1, _02057694 ; =0x02099F00
	ldr r0, [sp, #0x10]
	ldr r2, [r1]
	ldrb r1, [r6, #0x12]
	bl FUN_020F0D58
	mov r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	lsl r1, sb, #1
	sub r1, r1, #2
	lsl r1, r1, #5
	str r1, [sp, #8]
	ldr r1, [sl, #0x9c]
	ldr r2, [sp, #0x10]
	add r0, r5, #4
	mov r3, r7
	bl FUN_020592d8
_02057550:
	mov r0, #0
	strb r0, [r6, #0x16]
_02057558:
	ldrb r0, [r6, #0x17]
	cmp r0, #0
	beq _02057684
	ldrb r1, [r6, #2]
	add r0, sl, #0x4c
	strb r1, [r6, #2]
	bl FUN_0205657c
	ldr r1, _02057690 ; =0x02099F58
	mov r2, #0
	ldr r4, [r1]
	mov r1, r0
	add r0, r4, #4
	bl FUN_02059a78
	movs r5, r0
	beq _0205767C
	add r2, sp, #0x10
	mov r3, #0
	add r0, r4, #4
	mov r1, #0x20
	bl FUN_020594f4
	ldr r0, [sp, #0x10]
	cmp r0, #0
	addeq sp, sp, #0x14
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sl, #0xac]
	mov r7, #0
	cmp r0, #0
	beq _020575F0
	cmp r0, #1
	beq _020575FC
	cmp r0, #2
	moveq r0, r7
	strheq r0, [r6, #0xe]
	moveq fp, r7
	moveq r8, r7
	strheq r0, [r6, #0x10]
	b _02057604
_020575F0:
	ldrh fp, [r6, #0xe]
	ldrh r8, [r6, #0x10]
	b _02057604
_020575FC:
	ldrh fp, [r6, #0xe]
	mov r8, #0x17
_02057604:
	ldr r1, [sp, #0x10]
	mov r0, r5
	mov r2, #0x20
	bl FUN_020078c8
	ldr r0, _02057694 ; =0x02099F00
	str r8, [sp]
	ldr r1, [r0]
	ldr r0, _02057698 ; =0x02099F2C
	str r1, [sp, #4]
	ldr r1, [r0]
	ldr r0, _0205769C ; =0x02099EF8
	str r1, [sp, #8]
	ldr r0, [r0]
	mov r3, fp
	str r0, [sp, #0xc]
	ldrb r1, [r6, #0x13]
	ldrb r2, [r6, #0x12]
	ldr r0, [sp, #0x10]
	bl FUN_020F0D7C
	lsl r0, sb, #1
	sub r0, r0, #1
	str r7, [sp]
	lsl r1, r0, #5
	str r7, [sp, #4]
	str r1, [sp, #8]
	ldr r1, [sl, #0x9c]
	ldr r2, [sp, #0x10]
	add r0, r4, #4
	mov r3, #0x20
	bl FUN_020592d8
_0205767C:
	mov r0, #0
	strb r0, [r6, #0x17]
_02057684:
	mov r0, #1
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02057690: .word 0x02099F58
_02057694: .word 0x02099F00
_02057698: .word 0x02099F2C
_0205769C: .word 0x02099EF8

	arm_func_start FUN_020576a0
FUN_020576a0: ; 0x020576A0
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #0x98]
	mov r5, #0
	cmp r0, #1
	mov r4, #1
	blt _020576E0
	arm_func_end FUN_020576a0
_020576BC:
	mov r0, r6
	mov r1, r4
	bl FUN_02057334
	cmp r0, #0
	ldr r0, [r6, #0x98]
	add r4, r4, #1
	addne r5, r5, #1
	cmp r4, r0
	ble _020576BC
_020576E0:
	mov r0, r5
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020576e8
FUN_020576e8: ; 0x020576E8
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r7, #1
	mov r4, #2
	mov sb, r0
	mov r8, r1
	mov r6, r4
	mov r5, r7
	ldr sl, _02057754 ; =0x02099F58
	b _02057744
	arm_func_end FUN_020576e8
_0205770C:
	mov r0, sb
	mov r1, r7
	bl FUN_020566a8
	ldrh r1, [r0, #4]
	cmp r8, #0
	ldr r0, [sl]
	beq _02057738
	mov r2, r6
	mov r3, r5
	bl FUN_02117598
	b _02057740
_02057738:
	mov r2, r4
	bl FUN_021175DC
_02057740:
	add r7, r7, #1
_02057744:
	ldr r0, [sb, #0x98]
	cmp r7, r0
	ble _0205770C
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02057754: .word 0x02099F58

	arm_func_start FUN_02057758
FUN_02057758: ; 0x02057758
	push {r4, lr}
	mov r4, r2
	bl FUN_020566a8
	cmp r4, #0
	beq _02057788
	ldr r2, _020577A0 ; =0x02099F58
	ldrh r1, [r0, #4]
	ldr r0, [r2]
	mov r2, #2
	mov r3, #1
	bl FUN_02117598
	pop {r4, pc}
	arm_func_end FUN_02057758
_02057788:
	ldr r2, _020577A0 ; =0x02099F58
	ldrh r1, [r0, #4]
	ldr r0, [r2]
	mov r2, #2
	bl FUN_021175DC
	pop {r4, pc}
	.align 2, 0_020577A0: .word 0x02099F58

	arm_func_start FUN_020577a4
FUN_020577a4: ; 0x020577A4
	push {r3, r4, r5, r6, r7, lr}
	bl FUN_020566a8
	movs r6, r0
	movne r0, #1
	popne {r3, r4, r5, r6, r7, pc}
	ldr r4, _020577FC ; =0x02099F58
	ldrh r1, [r6, #4]
	mov r5, #1
	ldr r0, [r4]
	mov r2, r5
	mov r7, #0
	bl FUN_02117744
	cmp r0, #0
	beq _020577F4
	ldrh r1, [r6, #4]
	ldr r0, [r4]
	mov r2, #2
	bl FUN_02117744
	cmp r0, #0
	movne r7, r5
	arm_func_end FUN_020577a4
_020577F4:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020577FC: .word 0x02099F58

	arm_func_start FUN_02057800
FUN_02057800: ; 0x02057800
	str r1, [r0, #0xa0]
	bx lr
	arm_func_end FUN_02057800

	arm_func_start FUN_02057808
FUN_02057808: ; 0x02057808
	str r1, [r0, #0xa4]
	bx lr
	arm_func_end FUN_02057808

	arm_func_start FUN_02057810
FUN_02057810: ; 0x02057810
	push {r3, lr}
	ldr r2, [r0, #0xa4]
	cmp r2, #0
	bne _02057828
	bl FUN_02057b90
	pop {r3, pc}
	arm_func_end FUN_02057810
_02057828:
	bl FUN_02057830
	pop {r3, pc}

	arm_func_start FUN_02057830
FUN_02057830: ; 0x02057830
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	mov sl, r0
	mov r5, #1
	b _02057B6C
	arm_func_end FUN_02057830
_02057844:
	mov r0, sl
	mov r1, r5
	bl FUN_020566a8
	movs r7, r0
	ldrhne r1, [r7, #6]
	cmpne r1, #0
	beq _02057B68
	ldr r4, _02057B80 ; =0x02099ED8
	ldrb r2, [r7, #8]
	ldr r0, [r4]
	bl FUN_020554b0
	mov r1, r0
	ldr r0, [r4]
	bl FUN_020552cc
	mov r8, r0
	ldr r0, _02057B84 ; =0x02099F58
	ldrh r1, [r7, #4]
	ldr r0, [r0]
	mov r2, #1
	bl FUN_0211689C
	mov fp, r0
	ldr r0, _02057B84 ; =0x02099F58
	mov r6, #2
	ldrh r1, [r7, #4]
	ldr r0, [r0]
	mov r2, r6
	bl FUN_0211689C
	mov sb, r0
	ldr r0, _02057B84 ; =0x02099F58
	ldrh r1, [r7, #4]
	ldr r0, [r0]
	bl FUN_0211685C
	cmp r8, #0
	cmpne r0, #0
	beq _02057B68
	bl FUN_02114BF8
	mov r4, r0
	mov r0, r8
	bl FUN_020543f4
	cmp r4, r0
	beq _02057924
	mov r0, r8
	bl FUN_020543f4
	cmp r0, #0
	ldrh r1, [r7, #4]
	bne _02057910
	ldr r0, _02057B84 ; =0x02099F58
	mov r2, r6
	ldr r0, [r0]
	bl FUN_021175DC
	b _02057924
_02057910:
	ldr r0, _02057B84 ; =0x02099F58
	mov r2, r6
	ldr r0, [r0]
	mov r3, #1
	bl FUN_02117598
_02057924:
	mov r0, r8
	ldr r4, _02057B84 ; =0x02099F58
	bl FUN_020543f4
	cmp r0, #0
	beq _02057B68
	ldr r0, [r8, #0x60]
	bl FUN_02055bf8
	ldrsb r1, [r8, #0x64]
	cmp fp, #0
	add r6, r1, r0, lsl #3
	ldrshne r1, [fp, #0x10]
	movne r0, #0
	cmpne r1, r6
	beq _02057984
	ldrb r1, [r8, #0x65]
	lsl r3, r6, #0x10
	mov r2, #1
	str r1, [sp]
	str r0, [sp, #4]
	str r2, [sp, #8]
	ldrh r1, [r7, #4]
	ldr r0, [r4]
	asr r3, r3, #0x10
	bl FUN_02117414
_02057984:
	cmp sb, #0
	ldrshne r0, [sb, #0x10]
	mov r1, #1
	cmpne r0, r6
	beq _020579C0
	ldrb r0, [r8, #0x65]
	lsl r2, r6, #0x10
	asr r3, r2, #0x10
	str r0, [sp]
	mov r0, #0
	stmib sp, {r0, r1}
	ldrh r1, [r7, #4]
	ldr r0, [r4]
	mov r2, #2
	bl FUN_02117414
_020579C0:
	ldrh r1, [r7, #4]
	ldrb r2, [r8, #0x68]
	ldr r0, [r4]
	bl FUN_0211748C
	mov r3, #2
	mov r1, #6
	mov r0, #0xd
	str r1, [sp, #0x10]
	str r3, [sp, #0xc]
	str r0, [sp, #0x14]
	mov r6, #0
	add r1, sp, #0x18
	b _02057A04
_020579F4:
	add r2, r6, #8
	add r0, r6, #1
	strb r2, [r1, r6]
	and r6, r0, #0xff
_02057A04:
	cmp r6, r3
	blt _020579F4
	mov r1, #0
	ldr r3, [sp, #0xc]
	ldr r0, [sp, #0x10]
	add r2, sp, #0x18
	b _02057A34
_02057A20:
	add sb, r1, #0xa
	add r6, r3, r1
	add r1, r1, #1
	strb sb, [r2, r6]
	and r1, r1, #0xff
_02057A34:
	cmp r1, r0
	blt _02057A20
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	mov fp, #0
	add r3, r1, r0
	ldr r0, [sp, #0x14]
	add r2, sp, #0x18
	b _02057A6C
_02057A58:
	add sb, fp, #0x31
	add r6, fp, r3
	add r1, fp, #1
	strb sb, [r2, r6]
	and fp, r1, #0xff
_02057A6C:
	cmp fp, r0
	blt _02057A58
	cmp r5, #0x15
	bhi _02057A90
	add r0, sp, #0x18
	ldrb r2, [r0, r5]
	ldrh r1, [r7, #4]
	ldr r0, [r4]
	bl FUN_021177C4
_02057A90:
	ldrb r0, [r8, #0xa7]
	mov r6, #0x800
	ldrh r1, [r7, #4]
	cmp r0, #2
	mov r3, #1
	ldr r0, [r4]
	movne r3, #0
	mov r2, r6
	bl FUN_02116CB4
	ldrh r1, [r7, #4]
	ldr r0, [r4]
	ldr r2, [r8, #0x88]
	bl FUN_02117770
	ldr r1, [r8, #0x8c]
	ldr r0, [r8, #0x98]
	add r0, r1, r0
	str r0, [sp]
	ldr r3, [r8, #0x84]
	ldr r2, [r8, #0x90]
	ldrh r1, [r7, #4]
	add r2, r3, r2
	ldr sb, [r8, #0x88]
	ldr r3, [r8, #0x94]
	ldr r0, [r4]
	add r3, sb, r3
	bl FUN_021176C4
	ldr r0, _02057B88 ; =0x020A9C40
	bl FUN_02046358
	cmp r0, #0
	bne _02057B58
	ldr r0, _02057B8C ; =0x02099F24
	add r1, r8, #0x84
	ldr sb, [r0]
	mov r0, sb
	bl FUN_020F81A4
	mov r8, r0
	mov r0, sb
	bl FUN_020F7C44
	mov r1, r0
	mov r0, r8
	bl FUN_0200958c
	ldrh r1, [r7, #4]
	ldr r3, [sl, #0xa8]
	smull r2, r0, r3, r0
	adds r2, r2, r6
	adc r0, r0, #0
	lsr r2, r2, #0xc
	orr r2, r2, r0, lsl #20
	ldr r0, [r4]
	b _02057B64
_02057B58:
	ldrh r1, [r7, #4]
	ldr r0, [r4]
	ldr r2, [sl, #0xa8]
_02057B64:
	bl FUN_02117818
_02057B68:
	add r5, r5, #1
_02057B6C:
	ldr r0, [sl, #0x98]
	cmp r5, r0
	ble _02057844
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02057B80: .word 0x02099ED8
_02057B84: .word 0x02099F58
_02057B88: .word 0x020A9C40
_02057B8C: .word 0x02099F24

	arm_func_start FUN_02057b90
FUN_02057b90: ; 0x02057B90
	bx lr
	arm_func_end FUN_02057b90

	arm_func_start FUN_02057b94
FUN_02057b94: ; 0x02057B94
	push {r4, lr}
	mov r4, r0
	ldr r1, _02057BD4 ; =0x0209077C
	add r0, r4, #4
	bl FUN_02056640
	ldr r1, _02057BD8 ; =0x0209078C
	add r0, r4, #0x28
	bl FUN_02056640
	ldr r1, _02057BDC ; =0x0209079C
	add r0, r4, #0x4c
	bl FUN_02056640
	ldr r1, _02057BE0 ; =0x020907AC
	add r0, r4, #0x70
	bl FUN_02056640
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_02057BD4: .word 0x0209077C
_02057BD8: .word 0x0209078C
_02057BDC: .word 0x0209079C
_02057BE0: .word 0x020907AC
	arm_func_end FUN_02057b94

	arm_func_start FUN_02057be4
FUN_02057be4: ; 0x02057BE4
	push {r3, lr}
	bl FUN_02057b94
	and r0, r0, #0xff
	pop {r3, pc}
	arm_func_end FUN_02057be4

	arm_func_start FUN_02057bf4
FUN_02057bf4: ; 0x02057BF4
	push {r4, r5, r6, lr}
	mov r6, #0
	add r5, r0, #4
	mov r4, #0x24
	arm_func_end FUN_02057bf4
_02057C04:
	mla r0, r6, r4, r5
	bl FUN_0205665c
	cmp r0, #0
	movne r0, #1
	popne {r4, r5, r6, pc}
	add r6, r6, #1
	cmp r6, #4
	blt _02057C04
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start thunk_FUN_02057bf4
thunk_FUN_02057bf4: ; 0x02057C2C
	ldr ip, _02057C34 ; =FUN_02057bf4
	bx ip
	.align 2, 0_02057C34: .word FUN_02057bf4
	arm_func_end thunk_FUN_02057bf4

	arm_func_start FUN_02057c38
FUN_02057c38: ; 0x02057C38
	push {r4, r5, r6, lr}
	mov r6, #0
	add r5, r0, #4
	mov r4, #0x24
	arm_func_end FUN_02057c38
_02057C48:
	mla r0, r6, r4, r5
	bl FUN_02056684
	add r6, r6, #1
	cmp r6, #4
	blt _02057C48
	pop {r4, r5, r6, pc}

	arm_func_start thunk_FUN_02057c38
thunk_FUN_02057c38: ; 0x02057C60
	ldr ip, _02057C68 ; =FUN_02057c38
	bx ip
	.align 2, 0_02057C68: .word FUN_02057c38
	arm_func_end thunk_FUN_02057c38

	arm_func_start FUN_02057c6c
FUN_02057c6c: ; 0x02057C6C
	ldrh r1, [r0, #0xc]
	cmp r1, #0
	ldrbeq r0, [r0, #0xf]
	cmpeq r0, #0
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02057c6c

	arm_func_start FUN_02057c88
FUN_02057c88: ; 0x02057C88
	ldrsh r2, [r0, #0x10]
	lsl r1, r1, #0x10
	add r1, r2, r1, asr #16
	strh r1, [r0, #0x10]
	ldrsh r1, [r0, #0x10]
	cmp r1, #0
	movlt r1, #0
	strhlt r1, [r0, #0x10]
	bx lr
	arm_func_end FUN_02057c88

	arm_func_start FUN_02057cac
FUN_02057cac: ; 0x02057CAC
	push {r4, r5, r6, lr}
	mov r5, r1
	mov r6, r0
	cmp r5, #0
	movle r0, #0
	pople {r4, r5, r6, pc}
	mov r1, #0x34
	mul r0, r5, r1
	add r0, r0, #3
	bic r0, r0, #3
	sub r1, r1, #0x35
	bl FUN_0208670c
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	bl FUN_02057d08
	mov r0, #0
	str r4, [r6]
	strh r5, [r6, #4]
	strh r0, [r6, #6]
	mov r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02057cac

	arm_func_start FUN_02057d08
FUN_02057d08: ; 0x02057D08
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	cmp r0, #0
	beq _02057D20
	bl FUN_02086738
	arm_func_end FUN_02057d08
_02057D20:
	mov r0, #0
	str r0, [r4]
	pop {r4, pc}

	arm_func_start FUN_02057d2c
FUN_02057d2c: ; 0x02057D2C
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r1
	mov r7, r0
	movne r0, #0
	strne r0, [r6]
	ldr r4, [r7]
	cmp r4, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrsh r0, [r7, #4]
	mov r5, #0
	cmp r0, #0
	ble _02057D94
	arm_func_end FUN_02057d2c
_02057D60:
	mov r0, r4
	bl FUN_02057c6c
	cmp r0, #0
	beq _02057D80
	cmp r6, #0
	strne r4, [r6]
	add r0, r5, #1
	pop {r3, r4, r5, r6, r7, pc}
_02057D80:
	ldrsh r0, [r7, #4]
	add r5, r5, #1
	add r4, r4, #0x34
	cmp r5, r0
	blt _02057D60
_02057D94:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02057d9c
FUN_02057d9c: ; 0x02057D9C
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x28
	add r5, sp, #0
	mov r8, r1
	mov r4, #0x28
	mov r7, r2
	mov r1, r5
	mov r2, r4
	mov r0, #0
	mov r6, r3
	bl FUN_0200787c
	mov r0, r5
	mov r1, r8
	bl _strcpy
	mov r0, r5
	mov r1, r4
	str r7, [sp, #0x20]
	str r6, [sp, #0x24]
	bl FUN_020859d8
	add sp, sp, #0x28
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02057d9c

	arm_func_start FUN_02057df0
FUN_02057df0: ; 0x02057DF0
	push {r4, lr}
	mov r4, r1
	mov r1, r2
	mov r2, r3
	ldr r3, [sp, #8]
	bl FUN_02057d9c
	str r0, [r4]
	pop {r4, pc}
	arm_func_end FUN_02057df0

	arm_func_start FUN_02057e10
FUN_02057e10: ; 0x02057E10
	push {r4, r5, r6, r7, r8, lr}
	ldr r5, [sp, #0x18]
	mov r6, r0
	cmp r5, #0
	movne r0, #0
	strne r0, [r5]
	ldr r0, [r6]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r6
	bl FUN_02057d9c
	ldrsh r1, [r6, #4]
	mov r4, r0
	ldr r7, [r6]
	cmp r1, #0
	mov r8, #0
	ble _02057E94
	arm_func_end FUN_02057e10
_02057E58:
	mov r0, r7
	bl FUN_02057c6c
	cmp r0, #0
	ldreq r0, [r7]
	cmpeq r4, r0
	bne _02057E80
	cmp r5, #0
	strne r7, [r5]
	add r0, r8, #1
	pop {r4, r5, r6, r7, r8, pc}
_02057E80:
	ldrsh r0, [r6, #4]
	add r8, r8, #1
	add r7, r7, #0x34
	cmp r8, r0
	blt _02057E58
_02057E94:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02057e9c
FUN_02057e9c: ; 0x02057E9C
	cmp r1, #0
	ble _02057EB0
	ldrsh r2, [r0, #4]
	cmp r1, r2
	ble _02057EB8
	arm_func_end FUN_02057e9c
_02057EB0:
	mov r0, #0
	bx lr
_02057EB8:
	ldr r2, [r0]
	sub r1, r1, #1
	mov r0, #0x34
	mla r0, r1, r0, r2
	bx lr

	arm_func_start FUN_02057ecc
FUN_02057ecc: ; 0x02057ECC
	push {r3, r4, r5, lr}
	mov r4, r1
	ldrh r2, [r4, #0xc]
	mov r5, r0
	tst r2, #0x10
	beq _02057EF0
	mov r2, #1
	mov r3, #0
	bl FUN_02058220
	arm_func_end FUN_02057ecc
_02057EF0:
	ldrh r0, [r4, #0xc]
	tst r0, #0x20
	popeq {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	mov r2, #1
	mov r3, #0
	bl FUN_020583cc
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02057f14
FUN_02057f14: ; 0x02057F14
	cmp r1, #0
	moveq r0, #0
	bxeq lr
	ldrb r0, [r1, #0xe]
	cmp r0, #8
	arm_func_end FUN_02057f14

	arm_func_start switchD
switchD: ; 0x02057F28
	addls pc, pc, r0, lsl #2
	b _02057F5C
	arm_func_end switchD
_02057F30: ; jump table
	b _02057F5C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02057F34
	b _02057F5C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02057F38
	b _02057F54
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02057F3C
	b _02057F5C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02057F40
	b _02057F54
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02057F44
	b _02057F54
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02057F48
	b _02057F5C
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02057F4C
	b _02057F54
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02057F50
	b _02057F54
	arm_func_end caseD_8
_02057F54:
	mov r0, #1
	bx lr
_02057F5C:
	mov r0, #0
	bx lr

	arm_func_start FUN_02057f64
FUN_02057f64: ; 0x02057F64
	cmp r1, #0
	moveq r0, #0
	bxeq lr
	ldrb r0, [r1, #0xe]
	cmp r0, #8
	arm_func_end FUN_02057f64

	arm_func_start switchD
switchD: ; 0x02057F78
	addls pc, pc, r0, lsl #2
	b _02057FAC
	arm_func_end switchD
_02057F80: ; jump table
	b _02057FAC ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02057F84
	b _02057FAC
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02057F88
	b _02057FAC
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02057F8C
	b _02057FA4
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02057F90
	b _02057FA4
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02057F94
	b _02057FA4
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02057F98
	b _02057FAC
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02057F9C
	b _02057FAC
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02057FA0
	b _02057FA4
	arm_func_end caseD_8
_02057FA4:
	mov r0, #1
	bx lr
_02057FAC:
	mov r0, #0
	bx lr

	arm_func_start FUN_02057fb4
FUN_02057fb4: ; 0x02057FB4
	push {r4, r5, r6, lr}
	mov r4, r1
	mov r5, #0
	bl FUN_02058e50
	cmp r0, #0
	movne r0, r5
	popne {r4, r5, r6, pc}
	ldrh r1, [r4, #0xc]
	tst r1, #0x10
	movne r0, #1
	popne {r4, r5, r6, pc}
	ldrb r0, [r4, #0xe]
	cmp r0, #8
	arm_func_end FUN_02057fb4

	arm_func_start switchD
switchD: ; 0x02057FE8
	addls pc, pc, r0, lsl #2
	b _02058090
	arm_func_end switchD
_02057FF0: ; jump table
	b _02058090 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02057FF4
	b _02058090
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02057FF8
	b _02058014
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02057FFC
	b _02058090
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02058000
	b _02058014
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02058004
	b _02058014
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02058008
	b _02058090
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0205800C
	b _0205807C
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02058010
	b _0205807C
	arm_func_end caseD_8
_02058014:
	tst r1, #2
	movne r0, r5
	popne {r4, r5, r6, pc}
	cmp r0, #5
	ldr r0, [r4, #4]
	bne _0205806C
	mov r1, r5
	bl FUN_02053994
	mov r6, r0
	ldr r0, [r4, #4]
	mov r1, #2
	bl FUN_020539c8
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, pc}
	ldrb r1, [r0, #2]
	strb r1, [r4, #0x12]
	ldrb r1, [r0, #3]
	strb r1, [r4, #0x13]
	ldrb r0, [r0, #4]
	strb r0, [r4, #0x14]
	b _02058098
_0205806C:
	mov r1, #1
	bl FUN_02053994
_02058074:
	mov r6, r0
	b _02058098
_0205807C:
	ldrb r0, [r4, #0x12]
	ldrb r1, [r4, #0x13]
	ldrb r2, [r4, #0x14]
	bl FUN_020515c8
	b _02058074
_02058090:
	mov r0, #0
	pop {r4, r5, r6, pc}
_02058098:
	cmp r6, #0
	movle r0, #0
	pople {r4, r5, r6, pc}
	ldr r5, _020580E4 ; =0x02099F30
	mov r2, r6
	ldr r0, [r5]
	add r1, r4, #0x18
	bl FUN_020517ac
	cmp r0, #0
	ldrhne r1, [r4, #0xc]
	movne r0, #1
	orrne r1, r1, #0x10
	strhne r1, [r4, #0xc]
	popne {r4, r5, r6, pc}
	ldr r0, [r5]
	add r1, r4, #0x18
	bl FUN_02051858
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_020580E4: .word 0x02099F30

	arm_func_start FUN_020580e8
FUN_020580e8: ; 0x020580E8
	push {r4, r5, r6, lr}
	mov r4, r1
	bl FUN_02058e50
	cmp r0, #0
	movne r0, #0
	popne {r4, r5, r6, pc}
	ldrh r1, [r4, #0xc]
	tst r1, #0x20
	movne r0, #1
	popne {r4, r5, r6, pc}
	ldrb r0, [r4, #0xe]
	cmp r0, #8
	arm_func_end FUN_020580e8

	arm_func_start switchD
switchD: ; 0x02058118
	addls pc, pc, r0, lsl #2
	b _020581C8
	arm_func_end switchD
_02058120: ; jump table
	b _020581C8 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02058124
	b _020581C8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02058128
	b _020581C8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0205812C
	b _02058144
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02058130
	b _0205814C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02058134
	b _0205814C
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02058138
	b _020581C8
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0205813C
	b _020581B4
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02058140
	b _020581BC
	arm_func_end caseD_8
_02058144:
	ldr r6, [r4, #8]
	b _020581D0
_0205814C:
	tst r1, #2
	movne r0, #0
	popne {r4, r5, r6, pc}
	cmp r0, #5
	ldr r0, [r4, #4]
	bne _020581A4
	mov r1, #1
	bl FUN_02053994
	mov r6, r0
	ldr r0, [r4, #4]
	mov r1, #2
	bl FUN_020539c8
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldrb r1, [r0, #2]
	strb r1, [r4, #0x12]
	ldrb r1, [r0, #3]
	strb r1, [r4, #0x13]
	ldrb r0, [r0, #4]
	strb r0, [r4, #0x14]
	b _020581D0
_020581A4:
	mov r1, #2
	bl FUN_02053994
_020581AC:
	mov r6, r0
	b _020581D0
_020581B4:
	mov r0, #1
	pop {r4, r5, r6, pc}
_020581BC:
	ldrb r0, [r4, #0x14]
	bl FUN_0205162c
	b _020581AC
_020581C8:
	mov r0, #0
	pop {r4, r5, r6, pc}
_020581D0:
	cmp r6, #0
	movle r0, #0
	pople {r4, r5, r6, pc}
	ldr r5, _0205821C ; =0x02099F30
	mov r2, r6
	ldr r0, [r5]
	add r1, r4, #0x24
	bl FUN_02051800
	cmp r0, #0
	ldrhne r1, [r4, #0xc]
	movne r0, #1
	orrne r1, r1, #0x20
	strhne r1, [r4, #0xc]
	popne {r4, r5, r6, pc}
	ldr r0, [r5]
	add r1, r4, #0x24
	bl FUN_02051858
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_0205821C: .word 0x02099F30

	arm_func_start FUN_02058220
FUN_02058220: ; 0x02058220
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	mov sb, #0
	bl FUN_02058e50
	cmp r0, #0
	bne _02058254
	ldrh r1, [r6, #0xc]
	tst r1, #0x10
	bne _02058260
	arm_func_end FUN_02058220
_02058254:
	add sp, sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02058260:
	ldrb r0, [r6, #0xe]
	cmp r0, #8

	arm_func_start switchD
switchD: ; 0x02058268
	addls pc, pc, r0, lsl #2
	b _02058344
	arm_func_end switchD
_02058270: ; jump table
	b _02058344 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02058274
	b _02058344
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02058278
	b _02058294
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0205827C
	b _02058344
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02058280
	b _02058294
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02058284
	b _020582E8
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02058288
	b _02058344
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0205828C
	b _02058338
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02058290
	b _02058338
	arm_func_end caseD_8
_02058294:
	tst r1, #2
	addne sp, sp, #0xc
	movne r0, sb
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov sl, #1
	ldr r0, [r6, #4]
	mov r1, sl
	bl FUN_020539c8
	mov r8, r0
	ldr r0, [r6, #4]
	mov r1, sl
	bl FUN_02053994
	str r5, [sp]
	mov r3, r0
	mov r0, r7
	mov r1, r6
	mov r2, r8
	stmib sp, {r4, sb}
	bl FUN_02058350
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020582E8:
	tst r1, #2
	addne sp, sp, #0xc
	movne r0, sb
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, [r6, #4]
	mov r1, sb
	bl FUN_020539c8
	mov r8, r0
	ldr r0, [r6, #4]
	mov r1, sb
	bl FUN_02053994
	str r5, [sp]
	mov r3, r0
	mov r0, r7
	mov r1, r6
	mov r2, r8
	stmib sp, {r4, sb}
	bl FUN_02058350
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02058338:
	add sp, sp, #0xc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02058344:
	mov r0, #0
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02058350
FUN_02058350: ; 0x02058350
	push {r4, r5, r6, lr}
	sub sp, sp, #0x10
	mov r5, r1
	mov r4, r2
	mov r6, r3
	bl FUN_02058e50
	cmp r0, #0
	bne _0205837C
	ldrh r0, [r5, #0xc]
	tst r0, #0x10
	bne _02058388
	arm_func_end FUN_02058350
_0205837C:
	add sp, sp, #0x10
	mov r0, #0
	pop {r4, r5, r6, pc}
_02058388:
	ldrb r1, [sp, #0x20]
	str r6, [sp]
	ldr r0, [sp, #0x24]
	str r1, [sp, #4]
	str r0, [sp, #8]
	add r1, r5, #0x30
	ldr r0, _020583C8 ; =0x02099F30
	str r1, [sp, #0xc]
	ldr r0, [r0]
	ldr r2, [sp, #0x28]
	mov r3, r4
	add r1, r5, #0x18
	bl FUN_020518a8
	and r0, r0, #0xff
	add sp, sp, #0x10
	pop {r4, r5, r6, pc}
	.align 2, 0_020583C8: .word 0x02099F30

	arm_func_start FUN_020583cc
FUN_020583cc: ; 0x020583CC
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xc
	mov r8, r0
	mov r7, r1
	mov r6, r2
	mov r5, r3
	mov r4, #0
	bl FUN_02058e50
	cmp r0, #0
	bne _02058400
	ldrh r1, [r7, #0xc]
	tst r1, #0x20
	bne _0205840C
	arm_func_end FUN_020583cc
_02058400:
	add sp, sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0205840C:
	ldrb r0, [r7, #0xe]
	cmp r0, #8

	arm_func_start switchD
switchD: ; 0x02058414
	addls pc, pc, r0, lsl #2
	b _02058534
	arm_func_end switchD
_0205841C: ; jump table
	b _02058534 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02058420
	b _02058534
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02058424
	b _02058534
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02058428
	b _020584F0
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0205842C
	b _02058440
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02058430
	b _02058498
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02058434
	b _02058534
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02058438
	b _02058528
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0205843C
	b _02058528
	arm_func_end caseD_8
_02058440:
	tst r1, #2
	addne sp, sp, #0xc
	movne r0, r4
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov sl, #2
	ldr r0, [r7, #4]
	mov r1, sl
	bl FUN_020539c8
	mov sb, r0
	ldr r0, [r7, #4]
	mov r1, sl
	bl FUN_02053994
	str r6, [sp]
	mov r3, r0
	str r5, [sp, #4]
	mov r0, r8
	mov r1, r7
	mov r2, sb
	str r4, [sp, #8]
	bl FUN_02058540
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02058498:
	tst r1, #2
	addne sp, sp, #0xc
	movne r0, r4
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	mov sl, #1
	ldr r0, [r7, #4]
	mov r1, sl
	bl FUN_020539c8
	mov sb, r0
	ldr r0, [r7, #4]
	mov r1, sl
	bl FUN_02053994
	str r6, [sp]
	mov r3, r0
	str r5, [sp, #4]
	mov r0, r8
	mov r1, r7
	mov r2, sb
	str r4, [sp, #8]
	bl FUN_02058540
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_020584F0:
	ldr r2, [r7, #4]
	ldr r3, [r7, #8]
	cmp r2, #0
	addeq sp, sp, #0xc
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	str r6, [sp]
	str r5, [sp, #4]
	mov r0, r8
	mov r1, r7
	str r4, [sp, #8]
	bl FUN_02058540
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02058528:
	add sp, sp, #0xc
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_02058534:
	mov r0, #0
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02058540
FUN_02058540: ; 0x02058540
	push {r4, r5, r6, lr}
	sub sp, sp, #0x10
	mov r5, r1
	mov r4, r2
	mov r6, r3
	bl FUN_02058e50
	cmp r0, #0
	bne _0205856C
	ldrh r0, [r5, #0xc]
	tst r0, #0x20
	bne _02058578
	arm_func_end FUN_02058540
_0205856C:
	add sp, sp, #0x10
	mov r0, #0
	pop {r4, r5, r6, pc}
_02058578:
	ldrb r1, [sp, #0x20]
	str r6, [sp]
	ldr r0, [sp, #0x24]
	str r1, [sp, #4]
	str r0, [sp, #8]
	add r1, r5, #0x31
	ldr r0, _020585B8 ; =0x02099F30
	str r1, [sp, #0xc]
	ldr r0, [r0]
	ldr r2, [sp, #0x28]
	mov r3, r4
	add r1, r5, #0x24
	bl FUN_020518a8
	and r0, r0, #0xff
	add sp, sp, #0x10
	pop {r4, r5, r6, pc}
	.align 2, 0_020585B8: .word 0x02099F30

	arm_func_start FUN_020585bc
FUN_020585bc: ; 0x020585BC
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r3, _020585F8 ; =0x020907FC
	mov r4, #0
	mov r0, r4
	add r1, r5, #4
	mov r2, #8
	str r3, [r5]
	bl FUN_0200787c
	mov r0, r4
	add r1, r5, #0xc
	mov r2, #0x10
	bl FUN_0200787c
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_020585F8: .word 0x020907FC
	arm_func_end FUN_020585bc

	arm_func_start LAB_020585fc
LAB_020585fc: ; 0x020585FC
	push {r4, lr}
	ldr r1, _02058618 ; =0x020907FC
	mov r4, r0
	str r1, [r4]
	bl FUN_0205866c
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02058618: .word 0x020907FC
	arm_func_end LAB_020585fc

	arm_func_start LAB_0205861c
LAB_0205861c: ; 0x0205861C
	push {r4, lr}
	ldr r1, _02058640 ; =0x020907FC
	mov r4, r0
	str r1, [r4]
	bl FUN_0205866c
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02058640: .word 0x020907FC
	arm_func_end LAB_0205861c

	arm_func_start FUN_02058644
FUN_02058644: ; 0x02058644
	push {r4, lr}
	add r0, r0, #4
	mov r4, #0
	bl FUN_02057cac
	cmp r0, #0
	addeq r4, r4, #1
	mov r0, #0
	cmp r4, #0
	movle r0, #1
	pop {r4, pc}
	arm_func_end FUN_02058644

	arm_func_start FUN_0205866c
FUN_0205866c: ; 0x0205866C
	push {r4, lr}
	mov r4, r0
	bl FUN_02058fb4
	add r0, r4, #4
	bl FUN_02057d08
	pop {r4, pc}
	arm_func_end FUN_0205866c

	arm_func_start FUN_02058684
FUN_02058684: ; 0x02058684
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #8
	mov r8, r1
	mov sb, r0
	mov r4, r2
	mov r7, r3
	cmp r8, #1
	blt _020586AC
	cmp r8, #6
	ble _020586B8
	arm_func_end FUN_02058684
_020586AC:
	add sp, sp, #8
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020586B8:
	mov r6, #0
	add sl, sp, #4
	mov r1, r7
	mov r2, r6
	mov r3, r6
	add r0, sb, #4
	str sl, [sp]
	bl FUN_02057e10
	movs r5, r0
	beq _020586F8
	ldr r0, [sp, #4]
	mov r1, #1
	bl FUN_02057c88
	add sp, sp, #8
	mov r0, r5
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_020586F8:
	mov r1, sl
	add r0, sb, #4
	bl FUN_02057d2c
	movs r5, r0
	addeq sp, sp, #8
	moveq r0, r6
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r1, [sp, #4]
	mov r0, r6
	mov r2, #0x34
	bl FUN_0200787c
	ldr r0, [sp, #0x28]
	cmp r0, #0
	add r0, sp, #0x30
	beq _0205874C
	ldr r3, [sp, #4]
	mov r1, r4
	mov r2, r7
	add r3, r3, #0x15
	bl FUN_02086390
	b _02058758
_0205874C:
	mov r1, r4
	mov r2, r7
	bl FUN_0208622c
_02058758:
	mov r6, r0
	cmp r6, #0
	addle sp, sp, #8
	movle r0, #0
	pople {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r4, #0
	str r4, [sp]
	ldr r1, [sp, #4]
	mov r2, r7
	mov r3, r4
	add r0, sb, #4
	bl FUN_02057df0
	ldr r0, [sp, #0x2c]
	ldr r2, [sp, #0x30]
	ldr r1, [sp, #4]
	cmp r0, #0
	str r2, [r1, #4]
	ldr r1, [sp, #4]
	str r6, [r1, #8]
	ldr r0, [sp, #4]
	movne r1, #1
	strh r4, [r0, #0xc]
	ldrne r0, [sp, #4]
	strhne r1, [r0, #0xc]
	ldr r1, [sp, #4]
	ldr r0, [sp, #0x28]
	strb r8, [r1, #0xe]
	cmp r0, #0
	ldrne r0, [sp, #4]
	movne r1, #1
	ldreq r0, [sp, #4]
	moveq r1, #2
	strb r1, [r0, #0xf]
	ldr r0, [sp, #4]
	mov r1, #1
	bl FUN_02057c88
	ldrsh r1, [sb, #0xa]
	mov r0, r5
	add r1, r1, #1
	strh r1, [sb, #0xa]
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02058800
FUN_02058800: ; 0x02058800
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	mov sb, r1
	mov sl, r0
	mov r8, r2
	mov r7, r3
	cmp sb, #1
	ldr r6, [sp, #0x4c]
	ldr r5, [sp, #0x50]
	blt _02058838
	cmp sb, #6
	bgt _02058838
	cmp r8, #0
	bne _02058844
	arm_func_end FUN_02058800
_02058838:
	add sp, sp, #0x18
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02058844:
	mov r0, r8
	mov r1, #0x2f
	mov fp, r8
	bl FUN_02024160
	cmp r0, #0
	addne fp, r0, #1
	mov r0, r8
	mov r1, #0x5c
	bl FUN_02024160
	cmp r0, #0
	addne fp, r0, #1
	add r4, sp, #0x14
	mov r1, fp
	mov r2, r6
	mov r3, r5
	add r0, sl, #4
	str r4, [sp]
	bl FUN_02057e10
	movs r4, r0
	beq _020588AC
	ldr r0, [sp, #0x14]
	mov r1, #1
	bl FUN_02057c88
	add sp, sp, #0x18
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020588AC:
	add r1, sp, #0x14
	add r0, sl, #4
	bl FUN_02057d2c
	str r0, [sp, #0x10]
	cmp r0, #0
	addeq sp, sp, #0x18
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r4, #0
	ldr r1, [sp, #0x14]
	mov r0, r4
	mov r2, #0x34
	bl FUN_0200787c
	cmp r7, #0
	beq _02058920
	ldr r3, _02058A0C ; =0x0209A250
	ldr r0, [r3]
	cmp r0, #0
	beq _02058958
	ldrb r4, [sp, #0x44]
	str r6, [sp]
	str r5, [sp, #4]
	str r4, [sp, #8]
	mov r4, #1
	add r2, sp, #0x48
	mov r1, r8
	str r4, [sp, #0xc]
	bl FUN_0202f294
	b _02058954
_02058920:
	ldr r3, _02058A0C ; =0x0209A250
	ldr r0, [r3]
	cmp r0, #0
	beq _02058958
	ldrb r4, [sp, #0x44]
	str r6, [sp]
	str r5, [sp, #4]
	str r4, [sp, #8]
	mov r4, #1
	add r2, sp, #0x48
	mov r1, r8
	str r4, [sp, #0xc]
	bl FUN_0202eff0
_02058954:
	mov r4, r0
_02058958:
	cmp r4, #0
	mov r8, #1
	addle sp, sp, #0x18
	movle r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	str r6, [sp]
	ldr r1, [sp, #0x14]
	mov r2, fp
	mov r3, r5
	add r0, sl, #4
	bl FUN_02057df0
	ldrb r0, [sp, #0x40]
	ldr r2, [sp, #0x48]
	ldr r1, [sp, #0x14]
	cmp r0, #0
	str r2, [r1, #4]
	ldr r1, [sp, #0x14]
	mov r0, #0
	str r4, [r1, #8]
	ldr r1, [sp, #0x14]
	strh r0, [r1, #0xc]
	ldrne r0, [sp, #0x14]
	movne r1, r8
	strhne r1, [r0, #0xc]
	ldr r0, [sp, #0x14]
	cmp r7, #0
	strb sb, [r0, #0xe]
	ldreq r0, [sp, #0x14]
	moveq r1, #2
	strbeq r1, [r0, #0xf]
	beq _020589E8
	ldr r0, [sp, #0x14]
	sub r1, r8, #2
	strb r8, [r0, #0xf]
	ldr r0, [sp, #0x14]
	strb r1, [r0, #0x15]
_020589E8:
	ldr r0, [sp, #0x14]
	mov r1, #1
	bl FUN_02057c88
	ldrsh r1, [sl, #0xa]
	ldr r0, [sp, #0x10]
	add r1, r1, #1
	strh r1, [sl, #0xa]
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02058A0C: .word 0x0209A250

	arm_func_start FUN_02058a10
FUN_02058a10: ; 0x02058A10
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sb, r2
	mov sl, r0
	mov r4, r1
	mov r6, r3
	cmp sb, #1
	ldr r7, [sp, #0x3c]
	blt _02058A44
	cmp sb, #6
	bgt _02058A44
	cmp r6, #0
	bne _02058A50
	arm_func_end FUN_02058a10
_02058A44:
	add sp, sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02058A50:
	mov r0, r6
	mov r1, #0x2f
	mov r5, r6
	bl FUN_02024160
	cmp r0, #0
	addne r5, r0, #1
	mov r0, r6
	mov r1, #0x5c
	bl FUN_02024160
	cmp r0, #0
	addne r5, r0, #1
	add r8, sp, #4
	ldr r2, [sp, #0x38]
	mov r1, r5
	mov r3, r7
	add r0, sl, #4
	str r8, [sp]
	bl FUN_02057e10
	movs r6, r0
	beq _02058AB8
	ldr r0, [sp, #4]
	mov r1, #1
	bl FUN_02057c88
	add sp, sp, #8
	mov r0, r6
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02058AB8:
	mov r1, r8
	add r0, sl, #4
	bl FUN_02057d2c
	movs fp, r0
	addeq sp, sp, #8
	mov r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r6, #0x34
	ldr r1, [sp, #4]
	mov r2, r6
	bl FUN_0200787c
	ldr r1, [sp, #0x38]
	mov r0, r4
	mov r2, #0
	bl FUN_0200ded0
	ldr r8, _02058C5C ; =0x0209A250
	add r1, r6, #0xcd
	mov r0, r8
	bl FUN_0202e19c
	mov r0, r8
	mov r1, r7
	bl FUN_0202de44
	movs r6, r0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r4
	mov r1, r6
	mov r2, r7
	bl FUN_0200defc
	cmp r0, #0
	bge _02058B50
	mov r0, r8
	mov r1, r6
	bl FUN_0202e1c0
	add sp, sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02058B50:
	ldr r0, [r6]
	mov r2, #1
	lsr r4, r0, #8
	mov r0, r8
	mov r1, r4
	mov r3, r2
	bl FUN_0202de58
	movs r8, r0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r6]
	and r0, r0, #0xf0
	cmp r0, #0x10
	beq _02058B98
	cmp r0, #0x20
	beq _02058BA8
	b _02058BB8
_02058B98:
	mov r0, r6
	mov r1, r8
	bl LzPkbDecompression
	b _02058BBC
_02058BA8:
	mov r0, r6
	mov r1, r8
	bl UnkPkbDecompression
	b _02058BBC
_02058BB8:
	bl FUN_02004160
_02058BBC:
	ldr r0, _02058C5C ; =0x0209A250
	mov r1, r6
	mov r6, #0
	bl FUN_0202e1c0
	cmp r4, #0
	addle sp, sp, #8
	movle r0, r6
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x38]
	mov r2, r5
	str r0, [sp]
	ldr r1, [sp, #4]
	mov r3, r7
	add r0, sl, #4
	bl FUN_02057df0
	ldr r1, [sp, #4]
	ldrb r0, [sp, #0x30]
	str r8, [r1, #4]
	ldr r1, [sp, #4]
	cmp r0, #0
	str r4, [r1, #8]
	ldr r1, [sp, #4]
	mov r2, #2
	strh r6, [r1, #0xc]
	ldrne r0, [sp, #4]
	movne r1, #1
	strhne r1, [r0, #0xc]
	ldr r0, [sp, #4]
	mov r1, #1
	strb sb, [r0, #0xe]
	ldr r0, [sp, #4]
	strb r2, [r0, #0xf]
	ldr r0, [sp, #4]
	bl FUN_02057c88
	ldrsh r1, [sl, #0xa]
	mov r0, fp
	add r1, r1, #1
	strh r1, [sl, #0xa]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02058C5C: .word 0x0209A250

	arm_func_start FUN_02058c60
FUN_02058c60: ; 0x02058C60
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov r8, r2
	mov sl, r0
	mov sb, r1
	mov r4, r3
	cmp r8, #1
	blt _02058C90
	cmp r8, #6
	bgt _02058C90
	cmp r4, #0
	bne _02058C9C
	arm_func_end FUN_02058c60
_02058C90:
	add sp, sp, #8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02058C9C:
	mov r0, r4
	mov r1, #0x2f
	mov r6, r4
	bl FUN_02024160
	cmp r0, #0
	addne r6, r0, #1
	mov r0, r4
	mov r1, #0x5c
	bl FUN_02024160
	cmp r0, #0
	addne r6, r0, #1
	add r5, sp, #4
	ldr r2, [sp, #0x38]
	ldr r3, [sp, #0x3c]
	mov r1, r6
	add r0, sl, #4
	str r5, [sp]
	bl FUN_02057e10
	movs r4, r0
	beq _02058D04
	ldr r0, [sp, #4]
	mov r1, #1
	bl FUN_02057c88
	add sp, sp, #8
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02058D04:
	mov r1, r5
	add r0, sl, #4
	bl FUN_02057d2c
	movs fp, r0
	addeq sp, sp, #8
	mov r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #4]
	mov r2, #0x34
	bl FUN_0200787c
	ldr r4, [sp, #0x38]
	mov r2, #1
	ldr r1, [sb, r4]
	ldr r0, _02058E2C ; =0x0209A250
	lsr r5, r1, #8
	mov r1, r5
	mov r3, r2
	bl FUN_0202de58
	movs r7, r0
	bne _02058D58
	bl FUN_02004160
_02058D58:
	ldr r0, [sb, r4]
	and r0, r0, #0xf0
	cmp r0, #0x10
	beq _02058D74
	cmp r0, #0x20
	beq _02058D84
	b _02058D94
_02058D74:
	mov r1, r7
	add r0, sb, r4
	bl LzPkbDecompression
	b _02058D98
_02058D84:
	mov r1, r7
	add r0, sb, r4
	bl UnkPkbDecompression
	b _02058D98
_02058D94:
	bl FUN_02004160
_02058D98:
	cmp r5, #0
	addle sp, sp, #8
	movle r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x38]
	ldr r3, [sp, #0x3c]
	str r0, [sp]
	ldr r1, [sp, #4]
	mov r2, r6
	add r0, sl, #4
	bl FUN_02057df0
	ldr r1, [sp, #4]
	ldrb r0, [sp, #0x30]
	str r7, [r1, #4]
	ldr r1, [sp, #4]
	cmp r0, #0
	str r5, [r1, #8]
	ldr r1, [sp, #4]
	mov r0, #0
	strh r0, [r1, #0xc]
	ldrne r0, [sp, #4]
	movne r1, #1
	strhne r1, [r0, #0xc]
	ldr r0, [sp, #4]
	mov r2, #2
	strb r8, [r0, #0xe]
	ldr r0, [sp, #4]
	mov r1, #1
	strb r2, [r0, #0xf]
	ldr r0, [sp, #4]
	bl FUN_02057c88
	ldrsh r1, [sl, #0xa]
	mov r0, fp
	add r1, r1, #1
	strh r1, [sl, #0xa]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02058E2C: .word 0x0209A250

	arm_func_start FUN_02058e30
FUN_02058e30: ; 0x02058E30
	push {r4, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_02057e9c
	mov r1, r0
	mov r0, r4
	bl FUN_02058e50
	pop {r4, pc}
	arm_func_end FUN_02058e30

	arm_func_start FUN_02058e50
FUN_02058e50: ; 0x02058E50
	push {r4, lr}
	movs r4, r1
	beq _02058E6C
	mov r0, r4
	bl FUN_02057c6c
	cmp r0, #0
	beq _02058E74
	arm_func_end FUN_02058e50
_02058E6C:
	mvn r0, #0
	pop {r4, pc}
_02058E74:
	ldrb r0, [r4, #0xf]
	cmp r0, #1
	beq _02058E8C
	cmp r0, #2
	beq _02058ECC
	b _02058ED4
_02058E8C:
	ldrsb r0, [r4, #0x15]
	cmp r0, #0
	blt _02058EA0
	bl FUN_02086480
	b _02058EBC
_02058EA0:
	ldr r0, _02058EDC ; =0x0209A250
	ldr r1, [r4, #4]
	ldr r0, [r0]
	cmp r0, #0
	mvneq r0, #0
	beq _02058EBC
	bl FUN_0202f57c
_02058EBC:
	cmp r0, #0
	moveq r1, #2
	strbeq r1, [r4, #0xf]
	pop {r4, pc}
_02058ECC:
	mov r0, #0
	pop {r4, pc}
_02058ED4:
	mvn r0, #0
	pop {r4, pc}
	.align 2, 0_02058EDC: .word 0x0209A250

	arm_func_start FUN_02058ee0
FUN_02058ee0: ; 0x02058EE0
	push {r4, r5, r6, lr}
	mov r4, r0
	add r0, r4, #4
	bl FUN_02057e9c
	movs r6, r0
	beq _02058F04
	bl FUN_02057c6c
	cmp r0, #0
	beq _02058F0C
	arm_func_end FUN_02058ee0
_02058F04:
	mov r0, #0
	pop {r4, r5, r6, pc}
_02058F0C:
	mov r0, r6
	mvn r1, #0
	bl FUN_02057c88
	ldrsh r0, [r6, #0x10]
	cmp r0, #0
	bgt _02058FA4
	ldr r1, [r6, #4]
	cmp r1, #0
	beq _02058F6C
	ldrh r0, [r6, #0xc]
	tst r0, #1
	bne _02058F6C
	ldrb r0, [r6, #0xf]
	cmp r0, #1
	bne _02058F64
	ldr r0, _02058FAC ; =0x0209A250
	ldr r0, [r0]
	cmp r0, #0
	beq _02058F6C
	mov r2, #1
	bl FUN_0202f678
	b _02058F6C
_02058F64:
	ldr r0, _02058FAC ; =0x0209A250
	bl FUN_0202e1c0
_02058F6C:
	ldr r5, _02058FB0 ; =0x02099F30
	add r1, r6, #0x18
	ldr r0, [r5]
	bl FUN_02051858
	ldr r0, [r5]
	add r1, r6, #0x24
	bl FUN_02051858
	mov r1, r6
	mov r0, #0
	mov r2, #0x34
	bl FUN_0200787c
	ldrsh r0, [r4, #0xa]
	sub r0, r0, #1
	strh r0, [r4, #0xa]
_02058FA4:
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_02058FAC: .word 0x0209A250
_02058FB0: .word 0x02099F30

	arm_func_start FUN_02058fb4
FUN_02058fb4: ; 0x02058FB4
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrsh r0, [r6, #8]
	mov r5, #0
	mov r4, r5
	cmp r0, #0
	ble _02058FF4
	arm_func_end FUN_02058fb4
_02058FD0:
	mov r0, r6
	add r1, r4, #1
	bl FUN_02058ee0
	cmp r0, #0
	ldrsh r0, [r6, #8]
	add r4, r4, #1
	addne r5, r5, #1
	cmp r4, r0
	blt _02058FD0
_02058FF4:
	mov r0, #1
	cmp r5, #0
	movle r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02059004
FUN_02059004: ; 0x02059004
	push {r3, lr}
	add r0, r0, #4
	bl FUN_02057e9c
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	ldrh r1, [r0, #0xc]
	mov r0, #1
	tst r1, #0x10
	popne {r3, pc}
	tst r1, #0x20
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_02059004

	arm_func_start FUN_02059038
FUN_02059038: ; 0x02059038
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, r1
	add r0, r8, #4
	mov r6, r2
	mov r5, r3
	bl FUN_02057e9c
	mov r4, r0
	mov r0, r8
	mov r1, r7
	bl FUN_02058e30
	cmp r0, #0
	movne r0, #0
	popne {r4, r5, r6, r7, r8, pc}
	mov r0, r8
	mov r1, r4
	bl FUN_02057f14
	cmp r0, #0
	beq _020590B4
	mov r0, r8
	mov r1, r7
	mov r2, r6
	mov r3, r5
	bl FUN_02059100
	cmp r0, #0
	bne _020590B4
	mov r0, r8
	mov r1, r7
	bl FUN_020591e8
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02059038
_020590B4:
	mov r0, r8
	mov r1, r4
	bl FUN_02057f64
	cmp r0, #0
	beq _020590F8
	mov r0, r8
	mov r1, r7
	mov r2, r6
	mov r3, r5
	bl FUN_02059174
	cmp r0, #0
	bne _020590F8
	mov r0, r8
	mov r1, r7
	bl FUN_020591e8
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_020590F8:
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02059100
FUN_02059100: ; 0x02059100
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	add r0, r7, #4
	mov r6, r2
	mov r5, r3
	bl FUN_02057e9c
	mov r4, r0
	mov r0, r7
	mov r1, r4
	bl FUN_02058e50
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldrh r0, [r4, #0xc]
	tst r0, #0x10
	bne _0205916C
	mov r0, r7
	mov r1, r4
	bl FUN_02057fb4
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	mov r1, r4
	mov r2, r6
	mov r3, r5
	bl FUN_02058220
	arm_func_end FUN_02059100
_0205916C:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02059174
FUN_02059174: ; 0x02059174
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	add r0, r7, #4
	mov r6, r2
	mov r5, r3
	bl FUN_02057e9c
	mov r4, r0
	mov r0, r7
	mov r1, r4
	bl FUN_02058e50
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldrh r0, [r4, #0xc]
	tst r0, #0x20
	bne _020591E0
	mov r0, r7
	mov r1, r4
	bl FUN_020580e8
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	mov r1, r4
	mov r2, r6
	mov r3, r5
	bl FUN_020583cc
	arm_func_end FUN_02059174
_020591E0:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020591e8
FUN_020591e8: ; 0x020591E8
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02059208
	mov r0, r5
	mov r1, r4
	bl FUN_02059248
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020591e8

	arm_func_start FUN_02059208
FUN_02059208: ; 0x02059208
	push {r4, lr}
	add r0, r0, #4
	bl FUN_02057e9c
	movs r4, r0
	popeq {r4, pc}
	ldr r0, _02059240 ; =0x02099F30
	add r1, r4, #0x18
	ldr r0, [r0]
	bl FUN_02051858
	ldrh r1, [r4, #0xc]
	ldr r0, _02059244 ; =0x0000FFEF
	and r0, r1, r0
	strh r0, [r4, #0xc]
	pop {r4, pc}
	.align 2, 0_02059240: .word 0x02099F30
_02059244: .word 0x0000FFEF
	arm_func_end FUN_02059208

	arm_func_start FUN_02059248
FUN_02059248: ; 0x02059248
	push {r4, lr}
	add r0, r0, #4
	bl FUN_02057e9c
	movs r4, r0
	popeq {r4, pc}
	ldr r0, _02059280 ; =0x02099F30
	add r1, r4, #0x24
	ldr r0, [r0]
	bl FUN_02051858
	ldrh r1, [r4, #0xc]
	ldr r0, _02059284 ; =0x0000FFDF
	and r0, r1, r0
	strh r0, [r4, #0xc]
	pop {r4, pc}
	.align 2, 0_02059280: .word 0x02099F30
_02059284: .word 0x0000FFDF
	arm_func_end FUN_02059248

	arm_func_start FUN_02059288
FUN_02059288: ; 0x02059288
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	mov r6, r0
	add r0, r6, #4
	mov r5, r2
	mov r4, r3
	bl FUN_02057e9c
	ldrb r2, [sp, #0x20]
	mov r1, r0
	ldr r0, [sp, #0x24]
	str r2, [sp]
	ldr ip, [sp, #0x28]
	str r0, [sp, #4]
	mov r0, r6
	mov r2, r5
	mov r3, r4
	str ip, [sp, #8]
	bl FUN_02058350
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_02059288

	arm_func_start FUN_020592d8
FUN_020592d8: ; 0x020592D8
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	mov r6, r0
	add r0, r6, #4
	mov r5, r2
	mov r4, r3
	bl FUN_02057e9c
	ldrb r2, [sp, #0x20]
	mov r1, r0
	ldr r0, [sp, #0x24]
	str r2, [sp]
	ldr ip, [sp, #0x28]
	str r0, [sp, #4]
	mov r0, r6
	mov r2, r5
	mov r3, r4
	str ip, [sp, #8]
	bl FUN_02058540
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_020592d8

	arm_func_start FUN_02059328
FUN_02059328: ; 0x02059328
	push {r3, lr}
	add r0, r0, #4
	bl FUN_02057e9c
	cmp r0, #0
	moveq r0, #1
	popeq {r3, pc}
	ldrb r1, [r0, #0x30]
	cmp r1, #0
	ldrbeq r0, [r0, #0x31]
	cmpeq r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_02059328

	arm_func_start FUN_0205935c
FUN_0205935c: ; 0x0205935C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	movs r6, r2
	mov r5, r3
	mov r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	str r0, [r6]
	cmp r5, #0
	strne r0, [r5]
	add r0, r7, #4
	bl FUN_02057e9c
	mov r4, r0
	mov r0, r7
	mov r1, r4
	bl FUN_02058e50
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldrb r0, [r4, #0xe]
	cmp r0, #8
	arm_func_end FUN_0205935c

	arm_func_start switchD
switchD: ; 0x020593AC
	addls pc, pc, r0, lsl #2
	b _0205940C
	arm_func_end switchD
_020593B4: ; jump table
	b _0205940C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020593B8
	b _0205940C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020593BC
	b _020593D8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020593C0
	b _0205940C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020593C4
	b _020593D8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020593C8
	b _020593EC
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020593CC
	b _0205940C
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x020593D0
	b _020593F8
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x020593D4
	b _020593F8
	arm_func_end caseD_8
_020593D8:
	ldr r0, [r4, #4]
	mov r1, #1
_020593E0:
	bl FUN_02053994
_020593E4:
	mov r1, r0
	b _02059414
_020593EC:
	ldr r0, [r4, #4]
	mov r1, #0
	b _020593E0
_020593F8:
	ldrb r0, [r4, #0x12]
	ldrb r1, [r4, #0x13]
	ldrb r2, [r4, #0x14]
	bl FUN_020515c8
	b _020593E4
_0205940C:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02059414:
	mov r0, r7
	mov r2, r6
	mov r3, r5
	bl FUN_020594f4
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02059428
FUN_02059428: ; 0x02059428
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	movs r6, r2
	mov r5, r3
	mov r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	str r0, [r6]
	cmp r5, #0
	strne r0, [r5]
	add r0, r7, #4
	bl FUN_02057e9c
	mov r4, r0
	mov r0, r7
	mov r1, r4
	bl FUN_02058e50
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldrb r0, [r4, #0xe]
	cmp r0, #8
	arm_func_end FUN_02059428

	arm_func_start switchD
switchD: ; 0x02059478
	addls pc, pc, r0, lsl #2
	b _020594D8
	arm_func_end switchD
_02059480: ; jump table
	b _020594D8 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02059484
	b _020594D8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02059488
	b _020594D8
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0205948C
	b _020594A4
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02059490
	b _020594B8
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02059494
	b _020594CC
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02059498
	b _020594D8
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0205949C
	b _020594D8
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x020594A0
	b _020594AC
	arm_func_end caseD_8
_020594A4:
	ldr r1, [r4, #8]
	b _020594E0
_020594AC:
	ldrb r0, [r4, #0x14]
	bl FUN_0205162c
	b _020594C4
_020594B8:
	ldr r0, [r4, #4]
	mov r1, #2
_020594C0:
	bl FUN_02053994
_020594C4:
	mov r1, r0
	b _020594E0
_020594CC:
	ldr r0, [r4, #4]
	mov r1, #1
	b _020594C0
_020594D8:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020594E0:
	mov r0, r7
	mov r2, r6
	mov r3, r5
	bl FUN_020594f4
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020594f4
FUN_020594f4: ; 0x020594F4
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	ldr r0, [sp, #0x14]
	mov r5, r2
	mov r4, r3
	cmp r0, #0
	ble _02059518
	cmp r5, #0
	bne _02059528
	arm_func_end FUN_020594f4
_02059518:
	mov r0, #0
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
_02059528:
	mov r0, #0
	str r0, [r5]
	cmp r4, #0
	strne r0, [r4]
	add r0, sp, #0x14
	bl FUN_02041498
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, lr}
	addeq sp, sp, #0x10
	bxeq lr
	str r0, [r5]
	cmp r4, #0
	ldrne r0, [sp, #0x14]
	strne r0, [r4]
	mov r0, #1
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr

	arm_func_start FUN_02059574
FUN_02059574: ; 0x02059574
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	mov r8, r1
	add r1, sp, #0
	add r0, sb, #4
	mov r7, r2
	mov r6, r3
	bl FUN_02057d2c
	movs r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r4, #0
	ldr r1, [sp]
	mov r0, r4
	mov r2, #0x34
	bl FUN_0200787c
	mov r0, r8
	mov r1, r7
	mov r2, r6
	bl FUN_020515c8
	cmp r0, #0
	movle r0, r4
	pople {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r2, [sp]
	mov r1, #8
	str r0, [r2, #8]
	ldr r0, [sp]
	mov r3, #2
	strh r4, [r0, #0xc]
	ldr r0, [sp]
	mov r2, #1
	strb r1, [r0, #0xe]
	ldr r1, [sp]
	mov r0, r5
	strb r3, [r1, #0xf]
	ldr r1, [sp]
	strh r2, [r1, #0x10]
	ldr r1, [sp]
	strb r8, [r1, #0x12]
	ldr r1, [sp]
	strb r7, [r1, #0x13]
	ldr r1, [sp]
	strb r6, [r1, #0x14]
	ldrsh r1, [sb, #0xa]
	add r1, r1, #1
	strh r1, [sb, #0xa]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02059574

	arm_func_start FUN_02059630
FUN_02059630: ; 0x02059630
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	mov r8, r1
	add r1, sp, #0
	add r0, sb, #4
	mov r7, r2
	bl FUN_02057d2c
	movs r6, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r5, #0
	ldr r1, [sp]
	mov r0, r5
	mov r2, #0x34
	bl FUN_0200787c
	mov r4, #3
	mov r0, r8
	mov r1, r7
	mov r2, r4
	bl FUN_020515c8
	cmp r0, #0
	movle r0, r5
	pople {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r2, [sp]
	mov r1, #7
	str r0, [r2, #8]
	ldr r0, [sp]
	mov r3, #2
	strh r5, [r0, #0xc]
	ldr r0, [sp]
	mov r2, #1
	strb r1, [r0, #0xe]
	ldr r1, [sp]
	mov r0, r6
	strb r3, [r1, #0xf]
	ldr r1, [sp]
	strh r2, [r1, #0x10]
	ldr r1, [sp]
	strb r8, [r1, #0x12]
	ldr r1, [sp]
	strb r7, [r1, #0x13]
	ldr r1, [sp]
	strb r4, [r1, #0x14]
	ldrsh r1, [sb, #0xa]
	add r1, r1, #1
	strh r1, [sb, #0xa]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02059630

	arm_func_start FUN_020596ec
FUN_020596ec: ; 0x020596EC
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r7, r0
	mov r6, r1
	add r1, sp, #0
	add r0, r7, #4
	mov r8, r2
	bl FUN_02057d2c
	movs r5, r0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	mov r4, #0
	ldr r1, [sp]
	mov r0, r4
	mov r2, #0x34
	bl FUN_0200787c
	mov r0, r6
	bl FUN_0205162c
	mul r2, r8, r0
	cmp r2, #0
	addle sp, sp, #4
	movle r0, r4
	pople {r3, r4, r5, r6, r7, r8, pc}
	ldr r0, [sp]
	mov r1, #3
	str r2, [r0, #8]
	ldr r0, [sp]
	mov r3, #2
	strh r4, [r0, #0xc]
	ldr r0, [sp]
	mov r2, #1
	strb r1, [r0, #0xe]
	ldr r1, [sp]
	mov r0, r5
	strb r3, [r1, #0xf]
	ldr r1, [sp]
	strh r2, [r1, #0x10]
	ldr r1, [sp]
	strb r6, [r1, #0x14]
	ldrsh r1, [r7, #0xa]
	add r1, r1, #1
	strh r1, [r7, #0xa]
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_020596ec

	arm_func_start FUN_020597a0
FUN_020597a0: ; 0x020597A0
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r0
	ldr r0, [r4, #0x18]
	cmp r0, #0
	addgt r0, r0, #1
	strgt r0, [r4, #0x18]
	movgt r0, #1
	popgt {r3, r4, r5, r6, r7, pc}
	mov r7, #0
	ldr r5, _02059830 ; =0x02099F30
	mov r6, #0x20
	str r7, [r4, #0xc]
	str r7, [r4, #0x10]
	strb r7, [r4, #0x14]
	strb r7, [r4, #0x15]
	str r7, [r4, #0x18]
	ldr r0, [r5]
	mov r2, r6
	add r1, r4, #0xc
	bl FUN_02051800
	cmp r0, #0
	moveq r0, r7
	popeq {r3, r4, r5, r6, r7, pc}
	str r6, [sp]
	ldr r0, [r5]
	ldr r3, _02059834 ; =0x020907D4
	mov r2, r7
	add r1, r4, #0xc
	bl FUN_02051a7c
	cmp r0, #0
	ldrne r1, [r4, #0x18]
	moveq r0, r7
	addne r1, r1, #1
	movne r0, #1
	strne r1, [r4, #0x18]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02059830: .word 0x02099F30
_02059834: .word 0x020907D4
	arm_func_end FUN_020597a0

	arm_func_start FUN_02059838
FUN_02059838: ; 0x02059838
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x18]
	sub r0, r0, #1
	str r0, [r4, #0x18]
	cmp r0, #0
	ble _0205985C
	cmp r1, #0
	beq _02059874
	arm_func_end FUN_02059838
_0205985C:
	ldr r0, _0205987C ; =0x02099F30
	add r1, r4, #0xc
	ldr r0, [r0]
	bl FUN_02051858
	mov r0, #0
	str r0, [r4, #0x18]
_02059874:
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_0205987C: .word 0x02099F30

	arm_func_start FUN_02059880
FUN_02059880: ; 0x02059880
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, #0
	ldr r4, _020598E8 ; =0x02099F30
	b _020598C4
	arm_func_end FUN_02059880
_02059894:
	add r0, r7, #4
	add r1, r6, #1
	bl FUN_02057e9c
	movs r5, r0
	beq _020598C0
	ldr r0, [r4]
	add r1, r5, #0x18
	bl FUN_02051d3c
	ldr r0, [r4]
	add r1, r5, #0x24
	bl FUN_02051d3c
_020598C0:
	add r6, r6, #1
_020598C4:
	ldrsh r0, [r7, #8]
	cmp r6, r0
	blt _02059894
	ldr r0, _020598E8 ; =0x02099F30
	add r1, r7, #0xc
	ldr r0, [r0]
	bl FUN_02051d3c
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020598E8: .word 0x02099F30

	arm_func_start FUN_020598ec
FUN_020598ec: ; 0x020598EC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, #0
	ldr r4, _02059984 ; =0x02099F30
	b _0205993C
	arm_func_end FUN_020598ec
_02059900:
	add r0, r7, #4
	add r1, r6, #1
	bl FUN_02057e9c
	movs r5, r0
	beq _02059938
	ldr r0, [r4]
	add r1, r5, #0x18
	bl FUN_02051dc4
	ldr r0, [r4]
	add r1, r5, #0x24
	bl FUN_02051dc4
	mov r0, r7
	mov r1, r5
	bl FUN_02057ecc
_02059938:
	add r6, r6, #1
_0205993C:
	ldrsh r0, [r7, #8]
	cmp r6, r0
	blt _02059900
	ldr r4, _02059984 ; =0x02099F30
	add r1, r7, #0xc
	ldr r0, [r4]
	bl FUN_02051dc4
	cmp r0, #0
	beq _0205997C
	mov r0, #0x20
	str r0, [sp]
	ldr r0, [r4]
	ldr r3, _02059988 ; =0x020907D4
	add r1, r7, #0xc
	mov r2, #0
	bl FUN_02051a7c
_0205997C:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02059984: .word 0x02099F30
_02059988: .word 0x020907D4

	arm_func_start FUN_0205998c
FUN_0205998c: ; 0x0205998C
	ldr ip, _02059998 ; =FUN_02057e9c
	add r0, r0, #4
	bx ip
	.align 2, 0_02059998: .word FUN_02057e9c
	arm_func_end FUN_0205998c

	arm_func_start FUN_0205999c
FUN_0205999c: ; 0x0205999C
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r5, r2
	mov r4, #0
	bl FUN_02058e50
	cmp r0, #0
	movne r0, r4
	popne {r4, r5, r6, pc}
	ldrb r0, [r6, #0xe]
	cmp r0, #8
	arm_func_end FUN_0205999c

	arm_func_start switchD
switchD: ; 0x020599C4
	addls pc, pc, r0, lsl #2
	b _02059A70
	arm_func_end switchD
_020599CC: ; jump table
	b _02059A70 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020599D0
	b _02059A70
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020599D4
	b _020599F0
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020599D8
	b _02059A70
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x020599DC
	b _020599F0
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x020599E0
	b _02059A30
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x020599E4
	b _02059A70
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x020599E8
	b _02059A70
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x020599EC
	b _02059A70
	arm_func_end caseD_8
_020599F0:
	ldrh r0, [r6, #0xc]
	tst r0, #2
	movne r0, r4
	popne {r4, r5, r6, pc}
	ldr r0, [r6, #4]
	mov r1, #1
	bl FUN_02053994
	cmp r0, #0
	movle r0, r4
	pople {r4, r5, r6, pc}
	cmp r5, #0
	strne r0, [r5]
	ldr r0, [r6, #4]
	mov r1, #1
	bl FUN_020539c8
	pop {r4, r5, r6, pc}
_02059A30:
	ldrh r0, [r6, #0xc]
	tst r0, #2
	movne r0, r4
	popne {r4, r5, r6, pc}
	ldr r0, [r6, #4]
	mov r1, r4
	bl FUN_02053994
	cmp r0, #0
	movle r0, r4
	pople {r4, r5, r6, pc}
	cmp r5, #0
	strne r0, [r5]
	ldr r0, [r6, #4]
	mov r1, #0
	bl FUN_020539c8
	pop {r4, r5, r6, pc}
_02059A70:
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02059a78
FUN_02059a78: ; 0x02059A78
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	add r0, r5, #4
	bl FUN_02057e9c
	mov r1, r0
	mov r0, r5
	mov r2, r4
	bl FUN_02059aa0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02059a78

	arm_func_start FUN_02059aa0
FUN_02059aa0: ; 0x02059AA0
	push {r3, r4, r5, lr}
	mov r5, r1
	mov r4, r2
	bl FUN_02058e50
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldrb r0, [r5, #0xe]
	cmp r0, #8
	arm_func_end FUN_02059aa0

	arm_func_start switchD
switchD: ; 0x02059AC4
	addls pc, pc, r0, lsl #2
	b _02059B84
	arm_func_end switchD
_02059ACC: ; jump table
	b _02059B84 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02059AD0
	b _02059B84
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02059AD4
	b _02059B84
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02059AD8
	b _02059AF0
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02059ADC
	b _02059B04
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02059AE0
	b _02059B44
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02059AE4
	b _02059B84
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02059AE8
	b _02059B84
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02059AEC
	b _02059B84
	arm_func_end caseD_8
_02059AF0:
	cmp r4, #0
	ldrne r0, [r5, #8]
	strne r0, [r4]
	ldr r0, [r5, #4]
	pop {r3, r4, r5, pc}
_02059B04:
	ldrh r0, [r5, #0xc]
	tst r0, #2
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r5, #4]
	mov r1, #2
	bl FUN_02053994
	cmp r0, #0
	movle r0, #0
	pople {r3, r4, r5, pc}
	cmp r4, #0
	strne r0, [r4]
	ldr r0, [r5, #4]
	mov r1, #2
	bl FUN_020539c8
	pop {r3, r4, r5, pc}
_02059B44:
	ldrh r0, [r5, #0xc]
	tst r0, #2
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r5, #4]
	mov r1, #1
	bl FUN_02053994
	cmp r0, #0
	movle r0, #0
	pople {r3, r4, r5, pc}
	cmp r4, #0
	strne r0, [r4]
	ldr r0, [r5, #4]
	mov r1, #1
	bl FUN_020539c8
	pop {r3, r4, r5, pc}
_02059B84:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02059b8c
FUN_02059b8c: ; 0x02059B8C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	add r0, r5, #4
	bl FUN_02057e9c
	mov r1, r0
	mov r0, r5
	mov r2, r4
	bl FUN_02059bb4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02059b8c

	arm_func_start FUN_02059bb4
FUN_02059bb4: ; 0x02059BB4
	push {r4, r5, r6, lr}
	mov r6, r1
	mov r5, r2
	mov r4, #0
	bl FUN_02058e50
	cmp r0, #0
	movne r0, r4
	popne {r4, r5, r6, pc}
	ldrb r0, [r6, #0xe]
	cmp r0, #8
	arm_func_end FUN_02059bb4

	arm_func_start switchD
switchD: ; 0x02059BDC
	addls pc, pc, r0, lsl #2
	b _02059C88
	arm_func_end switchD
_02059BE4: ; jump table
	b _02059C88 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02059BE8
	b _02059C88
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02059BEC
	b _02059C08
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02059BF0
	b _02059C88
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02059BF4
	b _02059C08
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02059BF8
	b _02059C48
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02059BFC
	b _02059C88
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02059C00
	b _02059C88
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02059C04
	b _02059C88
	arm_func_end caseD_8
_02059C08:
	ldrh r0, [r6, #0xc]
	tst r0, #2
	movne r0, r4
	popne {r4, r5, r6, pc}
	ldr r0, [r6, #4]
	mov r1, r4
	bl FUN_02053994
	cmp r0, #0
	movle r0, r4
	pople {r4, r5, r6, pc}
	cmp r5, #0
	strne r0, [r5]
	ldr r0, [r6, #4]
	mov r1, #0
	bl FUN_020539c8
	pop {r4, r5, r6, pc}
_02059C48:
	ldrh r0, [r6, #0xc]
	tst r0, #2
	movne r0, r4
	popne {r4, r5, r6, pc}
	ldr r0, [r6, #4]
	mov r1, #2
	bl FUN_02053994
	cmp r0, #0
	movle r0, r4
	pople {r4, r5, r6, pc}
	cmp r5, #0
	strne r0, [r5]
	ldr r0, [r6, #4]
	mov r1, #2
	bl FUN_020539c8
	pop {r4, r5, r6, pc}
_02059C88:
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02059c90
FUN_02059c90: ; 0x02059C90
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r2
	mov r4, r3
	add r0, r6, #4
	bl FUN_02057e9c
	mov r1, r0
	mov r0, r6
	mov r2, r5
	mov r3, r4
	bl FUN_02059cc0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02059c90

	arm_func_start FUN_02059cc0
FUN_02059cc0: ; 0x02059CC0
	push {r3, r4, r5, r6, r7, lr}
	movs r7, r2
	mov r4, r3
	mov r6, r0
	cmpeq r4, #0
	mov r5, r1
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r7, #0
	mvnne r0, #0
	strne r0, [r7]
	cmp r4, #0
	mvnne r0, #0
	strne r0, [r4]
	mov r0, r6
	mov r1, r5
	bl FUN_02058e50
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	cmp r7, #0
	beq _02059D38
	ldr r0, _02059D98 ; =0x02099F30
	mov r2, r7
	ldr r0, [r0]
	add r1, r5, #0x18
	bl FUN_02051bb8
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02059cc0
_02059D38:
	cmp r4, #0
	beq _02059D90
	ldrb r0, [r5, #0xe]
	cmp r0, #7
	bne _02059D70
	ldr r0, _02059D98 ; =0x02099F30
	mov r2, r4
	ldr r0, [r0]
	add r1, r6, #0xc
	bl FUN_02051bb8
	cmp r0, #0
	bne _02059D90
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02059D70:
	ldr r0, _02059D98 ; =0x02099F30
	mov r2, r4
	ldr r0, [r0]
	add r1, r5, #0x24
	bl FUN_02051bb8
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
_02059D90:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02059D98: .word 0x02099F30

	arm_func_start FUN_02059d9c
FUN_02059d9c: ; 0x02059D9C
	push {r4, lr}
	sub sp, sp, #8
	ldr r4, _02059E38 ; =0x02099F78
	ldr r1, _02059E3C ; =0x0209081C
	mov r0, r4
	bl FUN_020418b0
	cmp r0, #0
	ble _02059DE0
	ldr r1, _02059E40 ; =0x0209082C
	mov r0, r4
	bl FUN_020418b0
	lsl r0, r0, #0xc
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _02059DFC
	arm_func_end FUN_02059d9c
_02059DE0:
	ldr r1, _02059E44 ; =0x0209083C
	mov r0, r4
	bl FUN_020418b0
	lsl r0, r0, #0xc
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_02059DFC:
	bl FUN_0201fdac
	cmp r0, #0
	ldreq r0, _02059E48 ; =0x01001000
	mov r2, #0x1000
	str r2, [sp]
	add r1, r0, #0x1000
	str r1, [sp, #4]
	ldr r0, _02059E4C ; =0x02099F24
	ldr r1, _02059E50 ; =0x00000536
	ldr r0, [r0]
	ldr r3, _02059E54 ; =0x00001555
	sub r2, r2, #0xdf
	bl FUN_020F77B0
	add sp, sp, #8
	pop {r4, pc}
	.align 2, 0_02059E38: .word 0x02099F78
_02059E3C: .word 0x0209081C
_02059E40: .word 0x0209082C
_02059E44: .word 0x0209083C
_02059E48: .word 0x01001000
_02059E4C: .word 0x02099F24
_02059E50: .word 0x00000536
_02059E54: .word 0x00001555

	arm_func_start FUN_02059e58
FUN_02059e58: ; 0x02059E58
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	ldr r5, _02059F80 ; =0x02099F78
	ldr r1, _02059F84 ; =0x0209084C
	mov r0, r5
	mov r4, #0x1000
	bl FUN_020418b0
	cmp r0, #0
	ble _02059EA0
	ldr r1, _02059F88 ; =0x02090860
	mov r0, r5
	bl FUN_020418b0
	lsl r0, r0, #0xc
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _02059EBC
	arm_func_end FUN_02059e58
_02059EA0:
	ldr r1, _02059F8C ; =0x02090874
	mov r0, r5
	bl FUN_020418b0
	lsl r0, r0, #0xc
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_02059EBC:
	bl FUN_0201fdac
	movs r5, r0
	ldr r0, _02059F80 ; =0x02099F78
	ldr r1, _02059F90 ; =0x02090888
	ldreq r5, _02059F94 ; =0x01001000
	bl FUN_020418b0
	cmp r0, #0
	moveq r1, #0x800
	ldreq r2, _02059F98 ; =0x00000DDB
	beq _02059F5C
	cmp r0, #0
	lsl r0, r0, #0xc
	ble _02059F04
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _02059F10
_02059F04:
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_02059F10:
	bl FUN_0201fdac
	ldr r1, _02059F9C ; =0x0B60B60B
	mov r2, #0xb6
	umull ip, r3, r0, r1
	mla r3, r0, r2, r3
	asr r0, r0, #0x1f
	mla r3, r0, r1, r3
	adds r0, ip, #0
	adc r0, r3, #0x800
	lsl r0, r0, #4
	lsr r0, r0, #0x10
	asr r0, r0, #4
	lsl r1, r0, #1
	add r0, r1, #1
	ldr r2, _02059FA0 ; =0x02087874
	lsl r1, r1, #1
	lsl r0, r0, #1
	ldrsh r1, [r2, r1]
	ldrsh r2, [r2, r0]
_02059F5C:
	str r4, [sp]
	add r3, r5, r4
	ldr r0, _02059FA4 ; =0x02099F24
	str r3, [sp, #4]
	ldr r0, [r0]
	ldr r3, _02059FA8 ; =0x00001555
	bl FUN_020F77B0
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0_02059F80: .word 0x02099F78
_02059F84: .word 0x0209084C
_02059F88: .word 0x02090860
_02059F8C: .word 0x02090874
_02059F90: .word 0x02090888
_02059F94: .word 0x01001000
_02059F98: .word 0x00000DDB
_02059F9C: .word 0x0B60B60B
_02059FA0: .word 0x02087874
_02059FA4: .word 0x02099F24
_02059FA8: .word 0x00001555

	arm_func_start FUN_02059fac
FUN_02059fac: ; 0x02059FAC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_020F77E4
	mov r0, r5
	mov r1, r4
	bl FUN_020F74DC
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02059fac

	arm_func_start FUN_02059fcc
FUN_02059fcc: ; 0x02059FCC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	mov r0, r4
	add r1, r5, #0x18
	mov r2, #0x78
	str r4, [r5, #0xc]
	str r4, [r5, #8]
	str r4, [r5, #0x10]
	str r4, [r5, #4]
	bl FUN_0200787c
	str r4, [r5, #0x90]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02059fcc

	arm_func_start FUN_0205a000
FUN_0205a000: ; 0x0205A000
	ldr r3, [r0, #0xc]
	cmp r1, #0
	movne r2, #0
	strne r2, [r1]
	ldr ip, [r0, #4]
	mov r2, #0
	cmp ip, #0
	ble _0205A04C
	arm_func_end FUN_0205a000
_0205A020:
	ldr r0, [r3, #8]
	tst r0, #1
	bne _0205A03C
	cmp r1, #0
	strne r3, [r1]
	add r0, r2, #1
	bx lr
_0205A03C:
	add r2, r2, #1
	cmp r2, ip
	add r3, r3, #0x1c
	blt _0205A020
_0205A04C:
	mov r0, #0
	bx lr

	arm_func_start FUN_0205a054
FUN_0205a054: ; 0x0205A054
	push {r4, lr}
	ldr lr, [r0, #0xc]
	cmp r3, #0
	movne ip, #0
	strne ip, [r3]
	ldr r4, [r0, #4]
	mov ip, #0
	cmp r4, #0
	ble _0205A0B8
	arm_func_end FUN_0205a054
_0205A078:
	ldr r0, [lr, #8]
	tst r0, #1
	beq _0205A0A8
	ldr r0, [lr]
	cmp r0, r1
	ldreq r0, [lr, #4]
	cmpeq r0, r2
	bne _0205A0A8
	cmp r3, #0
	strne lr, [r3]
	add r0, ip, #1
	pop {r4, pc}
_0205A0A8:
	add ip, ip, #1
	cmp ip, r4
	add lr, lr, #0x1c
	blt _0205A078
_0205A0B8:
	mov r0, #0
	pop {r4, pc}

	arm_func_start FUN_0205a0c0
FUN_0205a0c0: ; 0x0205A0C0
	push {r4, r5, r6, lr}
	movs r6, r1
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #0x10]
	cmp r0, #0
	beq _0205A0DC
	bl FUN_020FB7AC
	arm_func_end FUN_0205a0c0
_0205A0DC:
	ldr r0, [r6, #0x14]
	cmp r0, #0
	beq _0205A0F4
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
_0205A0F4:
	ldr r1, [r6, #0x18]
	cmp r1, #0
	beq _0205A10C
	ldr r0, _0205A130 ; =0x02099EE4
	ldr r0, [r0]
	bl FUN_020FD350
_0205A10C:
	mov r0, r6
	mov r1, #0
	mov r2, #0x1c
	ldr r5, [r6, #0x14]
	ldr r4, [r6, #0x10]
	bl MemWrite
	str r4, [r6, #0x10]
	str r5, [r6, #0x14]
	pop {r4, r5, r6, pc}
	.align 2, 0_0205A130: .word 0x02099EE4

	arm_func_start FUN_0205a134
FUN_0205a134: ; 0x0205A134
	push {r4, r5, r6, lr}
	movs r5, r1
	mov r6, r0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r5, #8]
	tst r0, #1
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	ldrb r0, [r5, #0xd]
	cmp r0, #3
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, [r5, #0x10]
	bl FUN_020FBA10
	movs r4, r0
	beq _0205A19C
	cmp r4, #1
	moveq r1, #1
	strbeq r1, [r5, #0xd]
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_0205a0c0
	mov r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0205a134
_0205A19C:
	mov r0, #2
	strb r0, [r5, #0xd]
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205a1ac
FUN_0205a1ac: ; 0x0205A1AC
	ldr r0, [r1, #0x10]
	ldr ip, _0205A1B8 ; =FUN_020FBCDC
	bx ip
	.align 2, 0_0205A1B8: .word FUN_020FBCDC
	arm_func_end FUN_0205a1ac

	arm_func_start FUN_0205a1bc
FUN_0205a1bc: ; 0x0205A1BC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, r1
	bl FUN_02059fcc
	mov r4, #8
	ldr r5, _0205A2D8 ; =FUN_0205a460
	str sb, [sl, #4]
	ldr r3, _0205A2DC ; =FUN_0205a324
	ldr r1, _0205A2E0 ; =0x000009A4
	mov r0, sb
	mov r2, r4
	str r5, [sp]
	bl FUN_0201e140
	str r0, [sl, #8]
	ldr r0, _0205A2E4 ; =FUN_020525e8
	ldr r3, _0205A2E8 ; =FUN_0205a2f0
	str r0, [sp]
	mov r2, r4
	mov r0, sb
	mov r1, #0x114
	bl FUN_0201e140
	mov r1, #0x1c
	str r0, [sl, #0x10]
	mul r1, sb, r1
	ldr r0, _0205A2EC ; =0x0209A250
	bl FUN_0202de44
	ldr r1, [sl, #8]
	str r0, [sl, #0xc]
	cmp r1, #0
	ldrne r1, [sl, #0x10]
	cmpne r1, #0
	cmpne r0, #0
	bne _0205A250
	mov r0, sl
	bl FUN_0205a504
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0205a1bc
_0205A250:
	cmp sb, #0
	mov r5, #0
	ble _0205A2C8
	mov fp, #0x114
	mov r4, #0x1c
_0205A264:
	ldr r0, _0205A2E0 ; =0x000009A4
	mul r6, r5, r0
	ldr r0, [sl, #8]
	add r0, r0, r6
	bl FUN_020FB448
	mul r7, r5, fp
	ldr r0, [sl, #0x10]
	ldr r1, [r0, r7]!
	ldr r1, [r1, #8]
	blx r1
	ldr r1, [sl, #0x10]
	ldr r0, [sl, #8]
	add r8, r1, r7
	add r7, r0, r6
	ldr r0, [sl, #0xc]
	mov r1, #0
	mla r6, r5, r4, r0
	mov r0, r6
	mov r2, #0x1c
	bl MemWrite
	str r7, [r6, #0x10]
	add r5, r5, #1
	str r8, [r6, #0x14]
	cmp r5, sb
	blt _0205A264
_0205A2C8:
	mov r0, #0
	strb r0, [sl, #0x14]
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0205A2D8: .word FUN_0205a460
_0205A2DC: .word FUN_0205a324
_0205A2E0: .word 0x000009A4
_0205A2E4: .word FUN_020525e8
_0205A2E8: .word FUN_0205a2f0
_0205A2EC: .word 0x0209A250

	arm_func_start FUN_0205a2f0
FUN_0205a2f0: ; 0x0205A2F0
	push {r4, lr}
	mov r4, r0
	ldr r1, _0205A320 ; =0x02118880
	add r0, r4, #0xc
	str r1, [r4]
	bl FUN_0202fd38
	mov r0, r4
	ldr r1, [r0]
	ldr r1, [r1, #8]
	blx r1
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205A320: .word 0x02118880
	arm_func_end FUN_0205a2f0

	arm_func_start FUN_0205a324
FUN_0205a324: ; 0x0205A324
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	ldr r5, _0205A3D4 ; =FUN_020527d4
	ldr r3, _0205A3D8 ; =FUN_0205a3f0
	mov r1, #4
	mov r2, #0x1bc
	mov r4, r0
	str r5, [sp]
	bl FUN_0201e1f8
	ldr r5, _0205A3DC ; =LAB_020527ac
	ldr r3, _0205A3E0 ; =FUN_02052780
	add r0, r4, #0x6f0
	mov r1, #1
	mov r2, #0x30
	str r5, [sp]
	bl FUN_0201e1f8
	ldr r5, _0205A3E4 ; =LAB_02052760
	ldr r3, _0205A3E8 ; =LAB_02052740
	add r0, r4, #0x720
	mov r1, #2
	mov r2, #0x14
	str r5, [sp]
	bl FUN_0201e1f8
	add r0, r4, #0x348
	add r6, r0, #0x400
	ldr r5, _0205A3EC ; =0x02118880
	add r0, r6, #0xc
	str r5, [r4, #0x748]
	bl FUN_0202fd38
	mov r0, r6
	ldr r1, [r0]
	ldr r1, [r1, #8]
	blx r1
	str r5, [r4, #0x860]
	add r5, r4, #0x860
	add r0, r5, #0xc
	bl FUN_0202fd38
	mov r0, r5
	ldr r1, [r0]
	ldr r1, [r1, #8]
	blx r1
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_0205A3D4: .word FUN_020527d4
_0205A3D8: .word FUN_0205a3f0
_0205A3DC: .word LAB_020527ac
_0205A3E0: .word FUN_02052780
_0205A3E4: .word LAB_02052760
_0205A3E8: .word LAB_02052740
_0205A3EC: .word 0x02118880
	arm_func_end FUN_0205a324

	arm_func_start FUN_0205a3f0
FUN_0205a3f0: ; 0x0205A3F0
	push {r3, r4, r5, lr}
	ldr r1, _0205A44C ; =0x02118854
	mov r5, r0
	mov r4, #5
	ldr ip, _0205A450 ; =LAB_02052760
	str r1, [r5]
	ldr r3, _0205A454 ; =LAB_02052740
	mov r1, r4
	add r0, r5, #0x4c
	mov r2, #0x14
	str ip, [sp]
	bl FUN_0201e1f8
	ldr ip, _0205A458 ; =LAB_020527ac
	ldr r3, _0205A45C ; =FUN_02052780
	mov r1, r4
	add r0, r5, #0xb0
	mov r2, #0x30
	str ip, [sp]
	bl FUN_0201e1f8
	add r0, r5, #0x1a0
	bl FUN_021110FC
	mov r0, r5
	pop {r3, r4, r5, pc}
	.align 2, 0_0205A44C: .word 0x02118854
_0205A450: .word LAB_02052760
_0205A454: .word LAB_02052740
_0205A458: .word LAB_020527ac
_0205A45C: .word FUN_02052780
	arm_func_end FUN_0205a3f0

	arm_func_start FUN_0205a460
FUN_0205a460: ; 0x0205A460
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r4, _0205A4F4 ; =0x02118880
	add r5, r6, #0x860
	mov r0, r5
	str r4, [r6, #0x860]
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	add r0, r5, #0xc
	bl FUN_0202fd44
	add r0, r6, #0x348
	add r5, r0, #0x400
	mov r0, r5
	str r4, [r6, #0x748]
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	add r0, r5, #0xc
	bl FUN_0202fd44
	add r0, r6, #0x720
	mov r1, #2
	mov r2, #0x14
	ldr r3, _0205A4F8 ; =LAB_02052760
	bl FUN_0201e338
	add r0, r6, #0x6f0
	mov r1, #1
	mov r2, #0x30
	ldr r3, _0205A4FC ; =LAB_020527ac
	bl FUN_0201e338
	mov r0, r6
	mov r1, #4
	mov r2, #0x1bc
	ldr r3, _0205A500 ; =FUN_020527d4
	bl FUN_0201e338
	mov r0, r6
	pop {r4, r5, r6, pc}
	.align 2, 0_0205A4F4: .word 0x02118880
_0205A4F8: .word LAB_02052760
_0205A4FC: .word LAB_020527ac
_0205A500: .word FUN_020527d4
	arm_func_end FUN_0205a460

	arm_func_start FUN_0205a504
FUN_0205a504: ; 0x0205A504
	push {r4, r5, r6, lr}
	mov r4, r0
	bl FUN_0205aac0
	ldr r1, [r4, #0xc]
	cmp r1, #0
	beq _0205A524
	ldr r0, _0205A5D8 ; =0x0209A250
	bl FUN_0202e1c0
	arm_func_end FUN_0205a504
_0205A524:
	ldr r0, [r4, #0x10]
	cmp r0, #0
	beq _0205A57C
	ldr r0, [r4, #4]
	mov r6, #0
	cmp r0, #0
	ble _0205A568
	mov r5, #0x114
_0205A544:
	ldr r0, [r4, #0x10]
	mla r0, r6, r5, r0
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	ldr r0, [r4, #4]
	add r6, r6, #1
	cmp r6, r0
	blt _0205A544
_0205A568:
	ldr r0, [r4, #0x10]
	ldr r3, _0205A5DC ; =FUN_020525e8
	mov r1, #0x114
	mov r2, #8
	bl FUN_0201e394
_0205A57C:
	ldr r0, [r4, #8]
	cmp r0, #0
	beq _0205A5CC
	ldr r0, [r4, #4]
	mov r6, #0
	cmp r0, #0
	ble _0205A5B8
	ldr r5, _0205A5E0 ; =0x000009A4
_0205A59C:
	ldr r0, [r4, #8]
	mla r0, r6, r5, r0
	bl FUN_020FB4F8
	ldr r0, [r4, #4]
	add r6, r6, #1
	cmp r6, r0
	blt _0205A59C
_0205A5B8:
	ldr r0, [r4, #8]
	ldr r1, _0205A5E0 ; =0x000009A4
	ldr r3, _0205A5E4 ; =FUN_0205a460
	mov r2, #8
	bl FUN_0201e394
_0205A5CC:
	mov r0, r4
	bl FUN_02059fcc
	pop {r4, r5, r6, pc}
	.align 2, 0_0205A5D8: .word 0x0209A250
_0205A5DC: .word FUN_020525e8
_0205A5E0: .word 0x000009A4
_0205A5E4: .word FUN_0205a460

	arm_func_start FUN_0205a5e8
FUN_0205a5e8: ; 0x0205A5E8
	strb r1, [r0, #0x14]
	mov r0, #1
	bx lr
	arm_func_end FUN_0205a5e8

	arm_func_start FUN_0205a5f4
FUN_0205a5f4: ; 0x0205A5F4
	push {r4, lr}
	mov r4, r0
	bl FUN_0205aac0
	mov r0, r4
	bl FUN_0205b398
	pop {r4, pc}
	arm_func_end FUN_0205a5f4

	arm_func_start FUN_0205a60c
FUN_0205a60c: ; 0x0205A60C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	ldr r0, [sb, #4]
	mov r8, r1
	cmp r0, #1
	blt _0205A630
	ldr r0, [sb, #0xc]
	cmp r0, #0
	bne _0205A638
	arm_func_end FUN_0205a60c
_0205A630:
	mov r7, #0
	b _0205A640
_0205A638:
	add r0, r0, #0x1c
	sub r7, r0, #0x1c
_0205A640:
	cmp r7, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, _0205A738 ; =0x02099F18
	mov r6, #0
	ldr r0, [r0]
	mov r5, r6
	ldrb r0, [r0, #4]
	mov r4, #3
	cmp r0, #0
	movne r8, #0
	b _0205A728
_0205A66C:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	ldrne r0, [r7, #0x14]
	cmpne r0, #0
	beq _0205A720
	ldr r1, [r7, #8]
	tst r1, #1
	beq _0205A720
	ldrb r0, [r7, #0xd]
	cmp r0, #1
	beq _0205A6AC
	cmp r0, #2
	beq _0205A6BC
	cmp r0, #3
	beq _0205A708
	b _0205A720
_0205A6AC:
	mov r0, sb
	mov r1, r7
	bl FUN_0205a134
	b _0205A720
_0205A6BC:
	tst r1, #2
	bne _0205A720
	mov r0, sb
	mov r1, r7
	bl FUN_0205a1ac
	cmp r0, #0
	bne _0205A6E8
	mov r0, sb
	mov r1, r7
	bl FUN_0205a0c0
	b _0205A720
_0205A6E8:
	ldr r0, [r7]
	mov r1, r5
	bl FUN_020EFA9C
	mov r1, r0
	ldrb r2, [r7, #0xf]
	ldr r0, [r7, #0x10]
	bl FUN_020FC288
	strb r4, [r7, #0xd]
_0205A708:
	ldr r0, [r7, #8]
	tst r0, #0x100
	beq _0205A720
	ldr r0, [r7, #0x10]
	mov r1, r8
	bl FUN_020FB504
_0205A720:
	add r6, r6, #1
	add r7, r7, #0x1c
_0205A728:
	ldr r0, [sb, #4]
	cmp r6, r0
	blt _0205A66C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205A738: .word 0x02099F18

	arm_func_start FUN_0205a73c
FUN_0205a73c: ; 0x0205A73C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r0
	ldr r0, [r8, #4]
	mov r7, r1
	cmp r0, #1
	blt _0205A760
	ldr r6, [r8, #0xc]
	cmp r6, #0
	bne _0205A764
	arm_func_end FUN_0205a73c
_0205A760:
	mov r6, #0
_0205A764:
	cmp r6, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r4, #0
	mov r5, r4
	cmp r0, #0
	ble _0205A7EC
	ldr sb, _0205A824 ; =0x00000101
_0205A780:
	ldr r0, [r6, #0x10]
	cmp r0, #0
	beq _0205A7D8
	ldr r1, [r6, #8]
	and r1, r1, sb
	cmp r1, sb
	ldrbeq r1, [r6, #0xd]
	cmpeq r1, #3
	bne _0205A7D8
	cmp r7, #0
	beq _0205A7B8
	ldrb r1, [r6, #0xe]
	cmp r1, #0
	beq _0205A7D8
_0205A7B8:
	cmp r7, #0
	bne _0205A7CC
	ldrb r1, [r6, #0xe]
	cmp r1, #0
	bne _0205A7D8
_0205A7CC:
	bl FUN_020FB564
	cmp r0, #0
	addne r4, r4, #1
_0205A7D8:
	ldr r0, [r8, #4]
	add r5, r5, #1
	cmp r5, r0
	add r6, r6, #0x1c
	blt _0205A780
_0205A7EC:
	cmp r4, #0
	pople {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r3, #3
	add r1, sp, #0
	mov r0, #0x10
	mov r2, #1
	str r3, [sp]
	bl FUN_020672b4
	mov r1, #0
	mov r2, r1
	mov r0, #0x15
	bl FUN_020672b4
	bl FUN_02064390
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205A824: .word 0x00000101

	arm_func_start FUN_0205a828
FUN_0205a828: ; 0x0205A828
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	mov r6, r0
	mov r0, r1
	mov r1, #0
	mov r5, r2
	mov r4, r3
	bl FUN_020EFA9C
	ldrb r2, [sp, #0x20]
	mov r1, r0
	ldrb r0, [sp, #0x24]
	str r2, [sp]
	ldrb ip, [sp, #0x28]
	str r0, [sp, #4]
	mov r0, r6
	mov r2, r5
	mov r3, r4
	str ip, [sp, #8]
	bl FUN_0205a87c
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0205a828

	arm_func_start FUN_0205a87c
FUN_0205a87c: ; 0x0205A87C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x10
	mov sl, #0
	movs r8, r1
	mov r4, r0
	str sl, [sp, #0xc]
	mov r7, r2
	mov r6, r3
	addeq sp, sp, #0x10
	subeq r0, sl, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	bl FUN_0205b340
	cmp r0, #0
	addne sp, sp, #0x10
	subne r0, sl, #1
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, r8
	bl FUN_0206cbf8
	add sb, sp, #0xc
	mov r1, r0
	mov r0, r4
	mov r2, r7
	mov r3, sb
	bl FUN_0205a054
	mov r5, r0
	cmp r5, #0
	bgt _0205A908
	mov r0, r4
	mov r1, sb
	bl FUN_0205a000
	mov r5, r0
	cmp r5, #0
	addle sp, sp, #0x10
	suble r0, sl, #1
	pople {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_0205a87c
_0205A908:
	ldrb r1, [sp, #0x34]
	add r0, r4, #0x18
	str r0, [sp]
	ldrb r0, [sp, #0x38]
	str r1, [sp, #4]
	mov r1, r8
	str r0, [sp, #8]
	ldr r0, [sp, #0xc]
	ldrb r3, [r4, #0x14]
	ldr r0, [r0, #0x10]
	mov r2, r6
	bl FUN_020FBF60
	cmp r0, #0
	bne _0205A958
	ldr r1, [sp, #0xc]
	mov r0, r4
	bl FUN_0205a0c0
	add sp, sp, #0x10
	mvn r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0205A958:
	ldr r0, _0205A9F4 ; =0x0208F6F0
	ldr r2, [sp, #0xc]
	ldr r1, [r0, #0x14]
	ldr r0, [r2, #0x10]
	mov r2, r1
	mov r3, r1
	bl FUN_020FBE94
	ldr r0, [sp, #0xc]
	mov r4, #1
	ldr r0, [r0, #0x10]
	mov r3, r4
	mov r1, #0x7000
	mov r2, #8
	bl FUN_020FBEE8
	mov r0, r8
	bl FUN_0206cbf8
	ldr r2, [sp, #0xc]
	ldrb r1, [sp, #0x30]
	str r0, [r2]
	ldr r0, [sp, #0xc]
	cmp r1, #0
	str r7, [r0, #4]
	ldr r0, [sp, #0xc]
	ldrb r2, [sp, #0x34]
	str r4, [r0, #8]
	ldreq r1, [sp, #0xc]
	ldreq r0, [r1, #8]
	orreq r0, r0, #2
	streq r0, [r1, #8]
	ldr r0, [sp, #0xc]
	mov r1, #1
	strb r1, [r0, #0xd]
	ldr r0, [sp, #0xc]
	strb r6, [r0, #0xc]
	ldr r1, [sp, #0xc]
	mov r0, r5
	strb r2, [r1, #0xf]
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0205A9F4: .word 0x0208F6F0

	arm_func_start FUN_0205a9f8
FUN_0205a9f8: ; 0x0205A9F8
	push {r4, lr}
	cmp r1, #0
	ble _0205AA1C
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205AA1C
	ldr r3, [r0, #0xc]
	cmp r3, #0
	bne _0205AA24
	arm_func_end FUN_0205a9f8
_0205AA1C:
	mov r4, #0
	b _0205AA30
_0205AA24:
	mov r2, #0x1c
	mla r2, r1, r2, r3
	sub r4, r2, #0x1c
_0205AA30:
	cmp r4, #0
	moveq r0, #0
	popeq {r4, pc}
	ldr r1, [r4, #8]
	bic r1, r1, #2
	str r1, [r4, #8]
	ldrb r1, [r4, #0xd]
	cmp r1, #3
	moveq r0, #1
	popeq {r4, pc}
	mov r1, r4
	bl FUN_0205a134
	cmp r0, #0
	movne r0, #0
	popne {r4, pc}
	ldrb r0, [r4, #0xd]
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	pop {r4, pc}

	arm_func_start FUN_0205aa80
FUN_0205aa80: ; 0x0205AA80
	cmp r1, #0
	ble _0205AAA0
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205AAA0
	ldr r3, [r0, #0xc]
	cmp r3, #0
	bne _0205AAA8
	arm_func_end FUN_0205aa80
_0205AAA0:
	mov r1, #0
	b _0205AAB4
_0205AAA8:
	mov r2, #0x1c
	mla r2, r1, r2, r3
	sub r1, r2, #0x1c
_0205AAB4:
	ldr ip, _0205AABC ; =FUN_0205a0c0
	bx ip
	.align 2, 0_0205AABC: .word FUN_0205a0c0

	arm_func_start FUN_0205aac0
FUN_0205aac0: ; 0x0205AAC0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov r6, #0
	ldr r5, _0205AB60 ; =0x02099EE4
	ldr r4, _0205AB64 ; =0x000009A4
	mov fp, #0x114
	b _0205AB50
	arm_func_end FUN_0205aac0
_0205AADC:
	ldr r2, [sl, #0xc]
	mov r1, #0x1c
	mla r1, r6, r1, r2
	ldr r0, [r5]
	ldr r1, [r1, #0x18]
	bl FUN_020FD350
	ldr r1, [sl, #0xc]
	mov r0, #0x1c
	mla r7, r6, r0, r1
	ldr r1, [sl, #8]
	ldr r2, [sl, #0x10]
	mov r0, #0x114
	mla sb, r6, r0, r2
	mla r8, r6, r4, r1
	mov r0, r7
	mov r1, #0
	mov r2, #0x1c
	bl MemWrite
	str r8, [r7, #0x10]
	str sb, [r7, #0x14]
	ldr r0, [sl, #0x10]
	mla r0, r6, fp, r0
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	ldr r0, [sl, #8]
	mla r0, r6, r4, r0
	bl FUN_020FB4F8
	add r6, r6, #1
_0205AB50:
	ldr r0, [sl, #4]
	cmp r6, r0
	blt _0205AADC
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0205AB60: .word 0x02099EE4
_0205AB64: .word 0x000009A4

	arm_func_start FUN_0205ab68
FUN_0205ab68: ; 0x0205AB68
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x10c
	mov sl, r0
	mov sb, r2
	cmp r1, #0
	ble _0205AB98
	ldr r0, [sl, #4]
	cmp r1, r0
	bgt _0205AB98
	ldr r2, [sl, #0xc]
	cmp r2, #0
	bne _0205ABA0
	arm_func_end FUN_0205ab68
_0205AB98:
	mov r8, #0
	b _0205ABAC
_0205ABA0:
	mov r0, #0x1c
	mla r0, r1, r0, r2
	sub r8, r0, #0x1c
_0205ABAC:
	mov r0, sl
	bl FUN_0205b340
	cmp r0, #0
	addne sp, sp, #0x10c
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r8, #0
	beq _0205ABD8
	ldr r0, [r8, #8]
	tst r0, #1
	bne _0205ABE4
_0205ABD8:
	add sp, sp, #0x10c
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0205ABE4:
	mov r7, #0
	ldr r0, [r8]
	mov r1, r7
	bl FUN_020EFA9C
	add r5, sp, #0xc
	add r4, sp, #0x8c
	mov r1, sb
	mov r2, r5
	mov r3, r4
	mov r6, r0
	bl FUN_020F395C
	add r0, sp, #4
	str r0, [sp]
	ldrb r1, [r6, #0x5c]
	ldr r0, [sl, #0x84]
	mov r2, sb
	add r3, sp, #8
	bl FUN_020F3AFC
	cmp r0, #0
	addeq sp, sp, #0x10c
	moveq r0, r7
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, [sp, #4]
	mov r1, r5
	str r0, [sp]
	ldr r0, [r8, #0x10]
	ldr r3, [sp, #8]
	mov r2, r4
	bl FUN_020FB94C
	cmp r0, #0
	moveq r0, r7
	movne r0, #1
	strbne r0, [r8, #0xd]
	add sp, sp, #0x10c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0205ac70
FUN_0205ac70: ; 0x0205AC70
	cmp r1, #0
	ble _0205AC90
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205AC90
	ldr r3, [r0, #0xc]
	cmp r3, #0
	bne _0205AC98
	arm_func_end FUN_0205ac70
_0205AC90:
	mov r1, #0
	b _0205ACA4
_0205AC98:
	mov r2, #0x1c
	mla r2, r1, r2, r3
	sub r1, r2, #0x1c
_0205ACA4:
	ldr ip, _0205ACAC ; =FUN_0205a134
	bx ip
	.align 2, 0_0205ACAC: .word FUN_0205a134

	arm_func_start FUN_0205acb0
FUN_0205acb0: ; 0x0205ACB0
	cmp r1, #0
	ble _0205ACD0
	ldr r3, [r0, #4]
	cmp r1, r3
	bgt _0205ACD0
	ldr r3, [r0, #0xc]
	cmp r3, #0
	bne _0205ACD8
	arm_func_end FUN_0205acb0
_0205ACD0:
	mov r1, #0
	b _0205ACE4
_0205ACD8:
	mov r0, #0x1c
	mla r0, r1, r0, r3
	sub r1, r0, #0x1c
_0205ACE4:
	cmp r1, #0
	bxeq lr
	ldr r0, [r1, #8]
	tst r0, #1
	bxeq lr
	cmp r2, #0
	orrne r0, r0, #0x100
	strne r0, [r1, #8]
	biceq r0, r0, #0x100
	streq r0, [r1, #8]
	bx lr

	arm_func_start FUN_0205ad10
FUN_0205ad10: ; 0x0205AD10
	push {r3, lr}
	cmp r1, #0
	ble _0205AD34
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205AD34
	ldr r2, [r0, #0xc]
	cmp r2, #0
	bne _0205AD3C
	arm_func_end FUN_0205ad10
_0205AD34:
	mov r0, #0
	b _0205AD48
_0205AD3C:
	mov r0, #0x1c
	mla r0, r1, r0, r2
	sub r0, r0, #0x1c
_0205AD48:
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	ldr r0, [r0, #0x10]
	bl FUN_020FB348
	pop {r3, pc}

	arm_func_start FUN_0205ad60
FUN_0205ad60: ; 0x0205AD60
	cmp r1, #0
	ble _0205AD80
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205AD80
	ldr r2, [r0, #0xc]
	cmp r2, #0
	bne _0205AD88
	arm_func_end FUN_0205ad60
_0205AD80:
	mov r0, #0
	b _0205AD94
_0205AD88:
	mov r0, #0x1c
	mla r0, r1, r0, r2
	sub r0, r0, #0x1c
_0205AD94:
	cmp r0, #0
	ldrne r0, [r0, #0x10]
	moveq r0, #0
	bx lr

	arm_func_start FUN_0205ada4
FUN_0205ada4: ; 0x0205ADA4
	push {r3, lr}
	cmp r1, #0
	ble _0205ADC8
	ldr r3, [r0, #4]
	cmp r1, r3
	bgt _0205ADC8
	ldr r3, [r0, #0xc]
	cmp r3, #0
	bne _0205ADD0
	arm_func_end FUN_0205ada4
_0205ADC8:
	mov r0, #0
	b _0205ADDC
_0205ADD0:
	mov r0, #0x1c
	mla r0, r1, r0, r3
	sub r0, r0, #0x1c
_0205ADDC:
	cmp r0, #0
	ldrne r0, [r0, #0x10]
	cmpne r0, #0
	popeq {r3, pc}
	mov r1, r2
	bl FUN_020FBF0C
	pop {r3, pc}

	arm_func_start FUN_0205adf8
FUN_0205adf8: ; 0x0205ADF8
	push {r3, lr}
	cmp r1, #0
	ble _0205AE1C
	ldr r3, [r0, #4]
	cmp r1, r3
	bgt _0205AE1C
	ldr r3, [r0, #0xc]
	cmp r3, #0
	bne _0205AE24
	arm_func_end FUN_0205adf8
_0205AE1C:
	mov r0, #0
	b _0205AE30
_0205AE24:
	mov r0, #0x1c
	mla r0, r1, r0, r3
	sub r0, r0, #0x1c
_0205AE30:
	cmp r0, #0
	ldrne r0, [r0, #0x10]
	cmpne r0, #0
	popeq {r3, pc}
	mov r1, r2
	bl FUN_020FBF30
	pop {r3, pc}

	arm_func_start FUN_0205ae4c
FUN_0205ae4c: ; 0x0205AE4C
	push {r3, lr}
	cmp r1, #0
	ble _0205AE70
	ldr r3, [r0, #4]
	cmp r1, r3
	bgt _0205AE70
	ldr r3, [r0, #0xc]
	cmp r3, #0
	bne _0205AE78
	arm_func_end FUN_0205ae4c
_0205AE70:
	mov r0, #0
	b _0205AE84
_0205AE78:
	mov r0, #0x1c
	mla r0, r1, r0, r3
	sub r0, r0, #0x1c
_0205AE84:
	cmp r0, #0
	ldrne r0, [r0, #0x10]
	cmpne r0, #0
	popeq {r3, pc}
	mov r1, r2
	bl FUN_020FBF3C
	pop {r3, pc}

	arm_func_start FUN_0205aea0
FUN_0205aea0: ; 0x0205AEA0
	push {r3, lr}
	cmp r1, #0
	ble _0205AEC4
	ldr ip, [r0, #4]
	cmp r1, ip
	bgt _0205AEC4
	ldr ip, [r0, #0xc]
	cmp ip, #0
	bne _0205AECC
	arm_func_end FUN_0205aea0
_0205AEC4:
	mov r0, #0
	b _0205AED8
_0205AECC:
	mov r0, #0x1c
	mla r0, r1, r0, ip
	sub r0, r0, #0x1c
_0205AED8:
	cmp r0, #0
	ldrne r0, [r0, #0x10]
	cmpne r0, #0
	popeq {r3, pc}
	mov r1, r2
	mov r2, r3
	ldr r3, [sp, #8]
	bl FUN_020FBE5C
	pop {r3, pc}

	arm_func_start FUN_0205aefc
FUN_0205aefc: ; 0x0205AEFC
	push {r3, lr}
	cmp r1, #0
	ble _0205AF20
	ldr ip, [r0, #4]
	cmp r1, ip
	bgt _0205AF20
	ldr ip, [r0, #0xc]
	cmp ip, #0
	bne _0205AF28
	arm_func_end FUN_0205aefc
_0205AF20:
	mov r0, #0
	b _0205AF34
_0205AF28:
	mov r0, #0x1c
	mla r0, r1, r0, ip
	sub r0, r0, #0x1c
_0205AF34:
	cmp r0, #0
	ldrne r0, [r0, #0x10]
	cmpne r0, #0
	popeq {r3, pc}
	mov r1, r2
	mov r2, r3
	ldr r3, [sp, #8]
	bl FUN_020FBE6C
	pop {r3, pc}

	arm_func_start FUN_0205af58
FUN_0205af58: ; 0x0205AF58
	push {r3, lr}
	cmp r1, #0
	ble _0205AF7C
	ldr ip, [r0, #4]
	cmp r1, ip
	bgt _0205AF7C
	ldr ip, [r0, #0xc]
	cmp ip, #0
	bne _0205AF84
	arm_func_end FUN_0205af58
_0205AF7C:
	mov r0, #0
	b _0205AF90
_0205AF84:
	mov r0, #0x1c
	mla r0, r1, r0, ip
	sub r0, r0, #0x1c
_0205AF90:
	cmp r0, #0
	ldrne r0, [r0, #0x10]
	cmpne r0, #0
	popeq {r3, pc}
	mov r1, r2
	mov r2, r3
	ldr r3, [sp, #8]
	bl FUN_020FBE94
	pop {r3, pc}

	arm_func_start FUN_0205afb4
FUN_0205afb4: ; 0x0205AFB4
	push {r4, lr}
	sub sp, sp, #0x18
	add ip, sp, #0xc
	mov r3, #0
	mov r4, r0
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	cmp r2, #0
	ble _0205AFF4
	ldr r0, [r1, #4]
	cmp r2, r0
	bgt _0205AFF4
	ldr r1, [r1, #0xc]
	cmp r1, #0
	bne _0205AFFC
	arm_func_end FUN_0205afb4
_0205AFF4:
	mov r0, #0
	b _0205B008
_0205AFFC:
	mov r0, #0x1c
	mla r0, r2, r0, r1
	sub r0, r0, #0x1c
_0205B008:
	cmp r0, #0
	ldrne r1, [r0, #0x10]
	cmpne r1, #0
	beq _0205B038
	add r0, sp, #0
	bl FUN_020FBEA4
	ldr r2, [sp]
	ldr r1, [sp, #4]
	ldr r0, [sp, #8]
	str r2, [sp, #0xc]
	str r1, [sp, #0x10]
	str r0, [sp, #0x14]
_0205B038:
	add r0, sp, #0xc
	ldm r0, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add sp, sp, #0x18
	pop {r4, pc}

	arm_func_start FUN_0205b04c
FUN_0205b04c: ; 0x0205B04C
	push {r4, lr}
	sub sp, sp, #0x18
	add ip, sp, #0xc
	mov r3, #0
	mov r4, r0
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	cmp r2, #0
	ble _0205B08C
	ldr r0, [r1, #4]
	cmp r2, r0
	bgt _0205B08C
	ldr r1, [r1, #0xc]
	cmp r1, #0
	bne _0205B094
	arm_func_end FUN_0205b04c
_0205B08C:
	mov r0, #0
	b _0205B0A0
_0205B094:
	mov r0, #0x1c
	mla r0, r2, r0, r1
	sub r0, r0, #0x1c
_0205B0A0:
	cmp r0, #0
	ldrne r1, [r0, #0x10]
	cmpne r1, #0
	beq _0205B0D0
	add r0, sp, #0
	bl FUN_020FBEB8
	ldr r2, [sp]
	ldr r1, [sp, #4]
	ldr r0, [sp, #8]
	str r2, [sp, #0xc]
	str r1, [sp, #0x10]
	str r0, [sp, #0x14]
_0205B0D0:
	add r0, sp, #0xc
	ldm r0, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add sp, sp, #0x18
	pop {r4, pc}

	arm_func_start FUN_0205b0e4
FUN_0205b0e4: ; 0x0205B0E4
	push {r4, r5, r6, lr}
	mov r5, r2
	mov r4, r3
	cmp r1, #0
	ble _0205B110
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205B110
	ldr r2, [r0, #0xc]
	cmp r2, #0
	bne _0205B118
	arm_func_end FUN_0205b0e4
_0205B110:
	mov r0, #0
	b _0205B124
_0205B118:
	mov r0, #0x1c
	mla r0, r1, r0, r2
	sub r0, r0, #0x1c
_0205B124:
	cmp r0, #0
	moveq r6, #0
	beq _0205B13C
	ldr r0, [r0, #0x10]
	bl FUN_020FB348
	mov r6, r0
_0205B13C:
	cmp r6, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_020FAF80
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r4
	bl FUN_020FB040
	mov r0, #1
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205b174
FUN_0205b174: ; 0x0205B174
	push {r4, r5, r6, lr}
	mov r5, r2
	mov r4, r3
	cmp r1, #0
	ble _0205B1A0
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205B1A0
	ldr r2, [r0, #0xc]
	cmp r2, #0
	bne _0205B1A8
	arm_func_end FUN_0205b174
_0205B1A0:
	mov r0, #0
	b _0205B1B4
_0205B1A8:
	mov r0, #0x1c
	mla r0, r1, r0, r2
	sub r0, r0, #0x1c
_0205B1B4:
	cmp r0, #0
	moveq r6, #0
	beq _0205B1CC
	ldr r0, [r0, #0x10]
	bl FUN_020FB348
	mov r6, r0
_0205B1CC:
	cmp r6, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_020FAF5C
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r4
	bl FUN_020FB040
	mov r0, #1
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205b204
FUN_0205b204: ; 0x0205B204
	push {r3, lr}
	cmp r1, #0
	ble _0205B228
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205B228
	ldr r2, [r0, #0xc]
	cmp r2, #0
	bne _0205B230
	arm_func_end FUN_0205b204
_0205B228:
	mov r0, #0
	b _0205B23C
_0205B230:
	mov r0, #0x1c
	mla r0, r1, r0, r2
	sub r0, r0, #0x1c
_0205B23C:
	cmp r0, #0
	moveq r0, #0
	beq _0205B250
	ldr r0, [r0, #0x10]
	bl FUN_020FB348
_0205B250:
	cmp r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_020FB02C
	pop {r3, pc}

	arm_func_start FUN_0205b264
FUN_0205b264: ; 0x0205B264
	cmp r1, #0
	ble _0205B284
	ldr r2, [r0, #4]
	cmp r1, r2
	bgt _0205B284
	ldr r2, [r0, #0xc]
	cmp r2, #0
	bne _0205B28C
	arm_func_end FUN_0205b264
_0205B284:
	mov r0, #0
	b _0205B298
_0205B28C:
	mov r0, #0x1c
	mla r0, r1, r0, r2
	sub r0, r0, #0x1c
_0205B298:
	cmp r0, #0
	moveq r0, #0
	bxeq lr
	ldrb r0, [r0, #0xd]
	cmp r0, #3
	moveq r0, #1
	movne r0, #0
	bx lr

	arm_func_start FUN_0205b2b8
FUN_0205b2b8: ; 0x0205B2B8
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x128
	ldr r6, _0205B338 ; =0x020908FC
	add r5, sp, #0
	mov r4, r0
	mov r8, r5
	ldm r6!, {r0, r1, r2, r3}
	stm r5!, {r0, r1, r2, r3}
	ldm r6!, {r0, r1, r2, r3}
	stm r5!, {r0, r1, r2, r3}
	ldm r6, {r0, r1}
	stm r5, {r0, r1}
	ldr r5, _0205B33C ; =0x02090924
	add sb, r4, #0x84
	mov sl, #9
	mov r7, #0
	add r6, sp, #0x28
	arm_func_end FUN_0205b2b8
_0205B2FC:
	str r7, [sb]
	ldr r2, [r8, sl, lsl #2]
	mov r0, r6
	mov r1, r5
	bl FUN_02023c40
	mov r0, r6
	mov r1, sb
	bl FUN_020F316C
	sub sb, sb, #0xc
	subs sl, sl, #1
	bpl _0205B2FC
	mov r0, #1
	str r0, [r4, #0x90]
	add sp, sp, #0x128
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0205B338: .word 0x020908FC
_0205B33C: .word 0x02090924

	arm_func_start FUN_0205b340
FUN_0205b340: ; 0x0205B340
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x90]
	cmp r0, #0
	beq _0205B390
	cmp r0, #1
	beq _0205B36C
	cmp r0, #2
	bne _0205B390
	mov r0, #0
	pop {r4, pc}
	arm_func_end FUN_0205b340
_0205B36C:
	add r0, r4, #0x18
	mov r1, #0xa
	bl FUN_020F330C
	cmp r0, #0
	moveq r0, #1
	movne r0, #2
	strne r0, [r4, #0x90]
	movne r0, #0
	pop {r4, pc}
_0205B390:
	mvn r0, #0
	pop {r4, pc}

	arm_func_start FUN_0205b398
FUN_0205b398: ; 0x0205B398
	push {r3, r4, r5, lr}
	mov r4, r0
	add r0, r4, #0x18
	mov r1, #0xa
	bl FUN_020F338C
	add r4, r4, #0x84
	mov r5, #9
	arm_func_end FUN_0205b398
_0205B3B4:
	mov r0, r4
	bl FUN_020F33FC
	sub r4, r4, #0xc
	subs r5, r5, #1
	bpl _0205B3B4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0205b3cc
FUN_0205b3cc: ; 0x0205B3CC
	stmdb sp!, {r3}
	sub sp, sp, #0xc
	add ip, sp, #0
	mov r3, #0
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	cmp r1, #0
	ble _0205B408
	ldr r3, [r0, #4]
	cmp r1, r3
	bgt _0205B408
	ldr r3, [r0, #0xc]
	cmp r3, #0
	bne _0205B410
	arm_func_end FUN_0205b3cc
_0205B408:
	mov r1, #0
	b _0205B41C
_0205B410:
	mov r0, #0x1c
	mla r0, r1, r0, r3
	sub r1, r0, #0x1c
_0205B41C:
	cmp r1, #0
	ldrne r0, [r1, #0x10]
	cmpne r0, #0
	strbne r2, [r1, #0xe]
	add sp, sp, #0xc
	ldm sp!, {r3}
	bx lr

	arm_func_start FUN_0205b438
FUN_0205b438: ; 0x0205B438
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r6, #0
	mov sb, r0
	mov r5, r6
	mov r4, r6
	arm_func_end FUN_0205b438
_0205B44C:
	ldr r0, [sb, #4]
	cmp r0, #1
	blt _0205B464
	ldr r8, [sb, #0xc]
	cmp r8, #0
	bne _0205B468
_0205B464:
	mov r8, r5
_0205B468:
	cmp r8, #0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r7, r4
	cmp r0, #0
	ble _0205B4DC
_0205B480:
	ldr r0, [r8, #0x10]
	cmp r0, #0
	ldrne r1, [r8, #0x14]
	cmpne r1, #0
	beq _0205B4C8
	ldr r1, [r8, #8]
	tst r1, #1
	beq _0205B4C8
	cmp r6, #0
	bne _0205B4BC
	bl FUN_020FC4A8
	cmp r0, #0
	bne _0205B4C8
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0205B4BC:
	cmp r6, #1
	bne _0205B4C8
	bl FUN_020FC48C
_0205B4C8:
	ldr r0, [sb, #4]
	add r7, r7, #1
	cmp r7, r0
	add r8, r8, #0x1c
	blt _0205B480
_0205B4DC:
	add r6, r6, #1
	cmp r6, #2
	blt _0205B44C
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0205b4f0
FUN_0205b4f0: ; 0x0205B4F0
	ldr r0, _0205B500 ; =0x02090978
	cmp r1, #0
	movne r0, #0
	bx lr
	.align 2, 0_0205B500: .word 0x02090978
	arm_func_end FUN_0205b4f0

	arm_func_start FUN_0205b504
FUN_0205b504: ; 0x0205B504
	ldr r0, _0205B514 ; =0x02090994
	cmp r1, #0
	movne r0, #0
	bx lr
	.align 2, 0_0205B514: .word 0x02090994
	arm_func_end FUN_0205b504

	arm_func_start FUN_0205b518
FUN_0205b518: ; 0x0205B518
	mov r1, #0
	str r1, [r0, #0x14]
	str r1, [r0, #0x10]
	str r1, [r0, #0x18]
	str r1, [r0, #0xc]
	bx lr
	arm_func_end FUN_0205b518

	arm_func_start FUN_0205b530
FUN_0205b530: ; 0x0205B530
	cmp r1, #0
	cmpge r2, #0
	mvnlt r0, #0
	addge r0, r2, #1
	andge r0, r0, #0xff
	bx lr
	arm_func_end FUN_0205b530

	arm_func_start FUN_0205b548
FUN_0205b548: ; 0x0205B548
	cmp r1, #0
	mvnlt r0, #0
	bxlt lr
	ands r0, r1, #0xff
	mvneq r0, #0
	subne r0, r0, #1
	bx lr
	arm_func_end FUN_0205b548

	arm_func_start FUN_0205b564
FUN_0205b564: ; 0x0205B564
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	bl FUN_0205b548
	cmp r0, #0
	blt _0205B594
	ldr r1, [r5, #0xc]
	cmp r0, r1
	bge _0205B594
	ldr r2, [r5, #0x14]
	cmp r2, #0
	bne _0205B59C
	arm_func_end FUN_0205b564
_0205B594:
	mov r2, #0
	b _0205B5A4
_0205B59C:
	mov r1, #0x3c
	mla r2, r0, r1, r2
_0205B5A4:
	cmp r2, #0
	beq _0205B5B8
	ldrh r1, [r2, #8]
	tst r1, #1
	bne _0205B5C0
_0205B5B8:
	mvn r0, #0
	pop {r3, r4, r5, pc}
_0205B5C0:
	cmp r4, #0
	strne r2, [r4]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0205b5cc
FUN_0205b5cc: ; 0x0205B5CC
	ldr ip, [r0, #0xc]
	cmp ip, #0
	ble _0205B5E4
	ldr r3, [r0, #0x14]
	cmp r3, #0
	bne _0205B5E8
	arm_func_end FUN_0205b5cc
_0205B5E4:
	mov r3, #0
_0205B5E8:
	cmp ip, #0
	mov r0, #0
	ble _0205B61C
_0205B5F4:
	ldrh r2, [r3, #8]
	tst r2, #1
	bne _0205B60C
	cmp r1, #0
	strne r3, [r1]
	bx lr
_0205B60C:
	add r0, r0, #1
	cmp r0, ip
	add r3, r3, #0x3c
	blt _0205B5F4
_0205B61C:
	mvn r0, #0
	bx lr

	arm_func_start FUN_0205b624
FUN_0205b624: ; 0x0205B624
	push {r4, lr}
	movs r4, r1
	popeq {r4, pc}
	ldr r0, [r4, #0x30]
	cmp r0, #0
	beq _0205B640
	bl FUN_020FA154
	arm_func_end FUN_0205b624
_0205B640:
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq _0205B658
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
_0205B658:
	ldr r1, [r4, #0x38]
	cmp r1, #0
	beq _0205B670
	ldr r0, _0205B6C8 ; =0x02099EE4
	ldr r0, [r0]
	bl FUN_020FD350
_0205B670:
	mov r3, #0
	sub r0, r3, #1
	ldr r2, [r4, #0x34]
	ldr r1, [r4, #0x30]
	str r0, [r4]
	str r0, [r4, #4]
	strh r3, [r4, #8]
	strb r3, [r4, #0xa]
	strb r3, [r4, #0xb]
	str r3, [r4, #0xc]
	str r3, [r4, #0x10]
	str r3, [r4, #0x14]
	str r3, [r4, #0x18]
	str r3, [r4, #0x1c]
	str r3, [r4, #0x20]
	str r3, [r4, #0x24]
	str r3, [r4, #0x28]
	str r3, [r4, #0x2c]
	str r1, [r4, #0x30]
	str r2, [r4, #0x34]
	str r3, [r4, #0x38]
	pop {r4, pc}
	.align 2, 0_0205B6C8: .word 0x02099EE4

	arm_func_start FUN_0205b6cc
FUN_0205b6cc: ; 0x0205B6CC
	push {r4, r5, r6, lr}
	movs r4, r1
	mov r5, r0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r1, [r4, #0x30]
	ldr r0, [r4, #0x34]
	cmp r1, #0
	cmpne r0, #0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	ldrh r0, [r4, #8]
	tst r0, #1
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	ldrb r0, [r4, #0xb]
	cmp r0, #3
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r0, _0205B764 ; =0x02099EE4
	ldr r1, [r4, #0x38]
	ldr r0, [r0]
	bl FUN_020FD278
	movs r6, r0
	beq _0205B754
	cmp r6, #1
	moveq r1, #1
	strbeq r1, [r4, #0xb]
	popeq {r4, r5, r6, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_0205b624
	mov r0, r6
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0205b6cc
_0205B754:
	mov r0, #2
	strb r0, [r4, #0xb]
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_0205B764: .word 0x02099EE4

	arm_func_start FUN_0205b768
FUN_0205b768: ; 0x0205B768
	push {r3, r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x1c
	movs r6, r1
	mov r5, r0
	mov r4, #0
	addeq sp, sp, #0x1c
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldrb r2, [r6, #0xb]
	cmp r2, #3
	addeq sp, sp, #0x1c
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r2, #2
	addne sp, sp, #0x1c
	movne r0, r4
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	bl FUN_0205b6cc
	cmp r0, #0
	addne sp, sp, #0x1c
	movne r0, r4
	popne {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r8, _0205B9AC ; =0x0208C460
	add r7, sp, #0
	ldm r8!, {r0, r1, r2, r3}
	stm r7!, {r0, r1, r2, r3}
	ldm r8, {r0, r1, r2}
	stm r7, {r0, r1, r2}
	ldr r0, [r6, #0x30]
	bl FUN_020FA930
	cmp r0, #0
	bne _0205B894
	ldr r7, _0205B9B0 ; =0x02099EE4
	ldr r1, [r6, #0x38]
	ldr r0, [r7]
	mov r2, #1
	mov r3, #4
	bl FUN_020FD6D8
	movs r8, r0
	bne _0205B820
	mov r0, r5
	mov r1, r6
	bl FUN_0205b624
	add sp, sp, #0x1c
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_0205b768
_0205B820:
	ldr r0, [r6, #0x30]
	mov r1, r8
	bl FUN_020F9DDC
	ldr r0, [r7]
	mov r1, r8
	bl FUN_020FD350
	ldr r0, [r6, #0x30]
	mov r1, r4
	mov r2, r4
	bl FUN_020F9F7C
	cmp r0, #0
	bne _0205B868
	mov r0, r5
	mov r1, r6
	bl FUN_0205b624
	add sp, sp, #0x1c
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0205B868:
	ldr r0, [r6, #0x24]
	cmp r0, #0
	ldreq r0, [r6, #0x28]
	cmpeq r0, #0
	ldreq r0, [r6, #0x2c]
	cmpeq r0, #0
	ldreq r0, _0205B9B4 ; =0x0208F6F0
	ldreq r0, [r0, #0x18]
	streq r0, [r6, #0x24]
	streq r0, [r6, #0x28]
	streq r0, [r6, #0x2c]
_0205B894:
	ldr r7, _0205B9B0 ; =0x02099EE4
	mov r2, #2
	ldr r0, [r7]
	ldr r1, [r6, #0x38]
	mov r3, r2
	bl FUN_020FD6D8
	movs r8, r0
	bne _0205B8CC
	mov r0, r5
	mov r1, r6
	bl FUN_0205b624
	add sp, sp, #0x1c
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0205B8CC:
	ldr r0, [r6, #0x34]
	mov r1, r8
	ldr r2, [r0]
	ldr r2, [r2, #0xc]
	blx r2
	ldr r0, [r7]
	mov r1, r8
	bl FUN_020FD350
	mov r5, #0
	mov sl, #1
	add sb, sp, #0
	b _0205B998
_0205B8FC:
	ldr r0, [r6, #0x30]
	mov r1, r5
	bl FUN_020FAA1C
	ldr r0, [r0, #4]
	cmp r0, #0
	moveq r0, sl
	movne r0, r4
	cmp r0, #0
	beq _0205B994
	add r2, r5, #3
	ldr r0, [r7]
	ldr r1, [r6, #0x38]
	ldr r3, [sb, r2, lsl #2]
	bl FUN_020FD6D8
	movs r8, r0
	beq _0205B994
	ldr r0, [r6, #0x30]
	mov r1, r8
	mov r2, r5
	bl FUN_020FA7F0
	ldr r0, [r7]
	mov r1, r8
	bl FUN_020FD350
	ldr r0, [r6, #0x30]
	mov r1, r5
	mov r2, r4
	bl FUN_020FA838
	cmp r0, #0
	bne _0205B988
	ldr r0, [r6, #0x30]
	mov r1, r5
	bl FUN_020FA8A0
	add sp, sp, #0x1c
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
_0205B988:
	ldr r0, [r6, #0x30]
	mov r1, r5
	bl FUN_020FA8B8
_0205B994:
	add r5, r5, #1
_0205B998:
	cmp r5, #5
	blt _0205B8FC
	mov r0, #1
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0205B9AC: .word 0x0208C460
_0205B9B0: .word 0x02099EE4
_0205B9B4: .word 0x0208F6F0

	arm_func_start FUN_0205b9b8
FUN_0205b9b8: ; 0x0205B9B8
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x74
	movs r5, r1
	ldrne r0, [r5, #0x30]
	cmpne r0, #0
	addeq sp, sp, #0x74
	moveq r0, #0
	popeq {r4, r5, r6, r7, pc}
	ldrb r1, [r5, #0xa]
	cmp r1, #4
	arm_func_end FUN_0205b9b8

	arm_func_start switchD
switchD: ; 0x0205B9E0
	addls pc, pc, r1, lsl #2
	b _0205BC7C
	arm_func_end switchD
_0205B9E8: ; jump table
	b _0205BC7C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0205B9EC
	b _0205B9FC
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0205B9F0
	b _0205BA20
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0205B9F4
	b _0205BAB8
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0205B9F8
	b _0205BC58
	arm_func_end caseD_4
_0205B9FC:
	add r1, r5, #0xc
_0205BA00:
	bl FUN_020FA448
	ldr r0, [r5, #0x30]
	add r1, r5, #0x18
_0205BA0C:
	bl FUN_020FA464
	ldr r0, [r5, #0x30]
	add r1, r5, #0x24
	bl FUN_020FA4A0
	b _0205BC88
_0205BA20:
	ldr r4, _0205BC94 ; =0x02099EB0
	mov r7, #1
	ldr r1, [r4]
	add r0, sp, #0x2c
	mov r2, r7
	bl FUN_0205e084
	ldr ip, [sp, #0x2c]
	ldr r6, [sp, #0x30]
	ldr r3, [sp, #0x34]
	ldr r1, [r4]
	add r0, sp, #0x20
	mov r2, r7
	str ip, [sp, #0x68]
	str r6, [sp, #0x6c]
	str r3, [sp, #0x70]
	bl FUN_0205e0f4
	add r6, sp, #0x68
	ldr ip, [sp, #0x20]
	ldr r4, [sp, #0x24]
	ldr r3, [sp, #0x28]
	mov r0, r6
	mov r2, r6
	add r1, r5, #0xc
	str ip, [sp, #0x5c]
	str r4, [sp, #0x60]
	str r3, [sp, #0x64]
	bl FUN_02009734
	add r4, sp, #0x5c
	add r1, r5, #0x18
	mov r0, r4
	mov r2, r4
	bl FUN_02009734
	ldr r0, [r5, #0x30]
	mov r1, r6
	bl FUN_020FA448
	ldr r0, [r5, #0x30]
	mov r1, r4
_0205BAB4:
	b _0205BA0C
_0205BAB8:
	ldr r0, _0205BC98 ; =0x02099EF0
	ldr r0, [r0]
	cmp r0, #0
	beq _0205BAD4
	bl FUN_02148398
	cmp r0, #0
	bne _0205BB38
_0205BAD4:
	ldr r4, _0205BC9C ; =0x02099EEC
	ldr r2, [r5, #4]
	ldr r1, [r4]
	add r0, sp, #0x14
	bl FUN_0205afb4
	ldr r2, [sp, #0x14]
	ldr r1, [sp, #0x18]
	ldr r0, [sp, #0x1c]
	str r2, [sp, #0x50]
	str r1, [sp, #0x54]
	str r0, [sp, #0x58]
	ldrh r0, [r5, #8]
	tst r0, #0x2000
	bne _0205BB34
	ldr r1, [r4]
	ldr r2, [r5, #4]
	add r0, sp, #8
	bl FUN_0205b04c
	ldr r2, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	str r2, [sp, #0x44]
	str r1, [sp, #0x48]
	b _0205BC3C
_0205BB34:
	b _0205BC28
_0205BB38:
	ldr r0, [r5, #4]
	bl FUN_020EFA80
	movs r4, r0
	beq _0205BC88
	ldr r6, [r4, #0x84]
	ldr r1, [r6, #4]
	asr r0, r1, #0xb
	add r0, r1, r0, lsr #20
	asr r0, r0, #0xc
	bl FUN_02053a5c
	add r2, sp, #4
	add r3, sp, #0
	ldm r6, {r0, r1}
	bl FUN_020EFE30
	ldr r0, [sp]
	ldr r7, [r5, #0x14]
	rsb r0, r0, #0
	cmp r0, #0
	lsl r0, r0, #0xc
	ble _0205BB9C
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _0205BBA8
_0205BB9C:
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_0205BBA8:
	bl FUN_0201fdac
	ldr r1, [sp, #4]
	mov r6, r0
	cmp r1, #0
	lsl r0, r1, #0xc
	ble _0205BBD4
	bl FUN_0201f704
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_02020274
	b _0205BBE0
_0205BBD4:
	bl FUN_0201f704
	mov r1, #0x3f000000
	bl FUN_020204a4
_0205BBE0:
	bl FUN_0201fdac
	str r0, [sp, #0x50]
	str r6, [sp, #0x54]
	str r7, [sp, #0x58]
	ldrh r0, [r5, #8]
	tst r0, #0x2000
	bne _0205BC28
	ldr r0, [r4, #0x84]
	ldr r1, _0205BCA0 ; =0x02087874
	ldrh r2, [r0, #0x18]
	mov r0, #0
	asr r2, r2, #4
	lsl r2, r2, #2
	ldrsh r1, [r1, r2]
	str r0, [sp, #0x44]
	str r0, [sp, #0x48]
	str r1, [sp, #0x4c]
	b _0205BC40
_0205BC28:
	ldr r0, [r5, #0x18]
	str r0, [sp, #0x44]
	ldr r0, [r5, #0x1c]
	str r0, [sp, #0x48]
	ldr r0, [r5, #0x20]
_0205BC3C:
	str r0, [sp, #0x4c]
_0205BC40:
	ldr r0, [r5, #0x30]
	add r1, sp, #0x50
	bl FUN_020FA448
	ldr r0, [r5, #0x30]
	add r1, sp, #0x44
	b _0205BAB4
_0205BC58:
	ldr r1, [r5, #0x10]
	ldr r4, [r5, #0x14]
	ldr r2, [r5, #0xc]
	rsb r3, r1, #0
	add r1, sp, #0x38
	str r2, [sp, #0x38]
	str r3, [sp, #0x3c]
	str r4, [sp, #0x40]
	b _0205BA00
_0205BC7C:
	add sp, sp, #0x74
	mov r0, #0
	pop {r4, r5, r6, r7, pc}
_0205BC88:
	mov r0, #1
	add sp, sp, #0x74
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0205BC94: .word 0x02099EB0
_0205BC98: .word 0x02099EF0
_0205BC9C: .word 0x02099EEC
_0205BCA0: .word 0x02087874

	arm_func_start FUN_0205bca4
FUN_0205bca4: ; 0x0205BCA4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, r1
	bl FUN_0205b518
	mov r0, sl
	mov r1, #1
	str sb, [sl, #0xc]
	bl FUN_02052168
	ldr r0, _0205BE0C ; =FUN_020527d4
	mov r4, #8
	str r0, [sp]
	ldr r3, _0205BE10 ; =FUN_0205a3f0
	mov r0, sb
	mov r1, #0x1bc
	mov r2, r4
	bl FUN_0201e140
	str r0, [sl, #0x10]
	ldr r1, _0205BE14 ; =FUN_020525e8
	ldr r3, _0205BE18 ; =FUN_0205a2f0
	str r1, [sp]
	mov r2, r4
	mov r0, sb
	mov r1, #0x114
	bl FUN_0201e140
	mov r1, #0x3c
	str r0, [sl, #0x18]
	mul r1, sb, r1
	ldr r0, _0205BE1C ; =0x0209A250
	bl FUN_0202de44
	ldr r1, [sl, #0x10]
	str r0, [sl, #0x14]
	cmp r1, #0
	ldrne r1, [sl, #0x18]
	cmpne r1, #0
	cmpne r0, #0
	bne _0205BD44
	mov r0, sl
	bl FUN_0205be20
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0205bca4
_0205BD44:
	cmp sb, #0
	mov r6, #0
	ble _0205BDF4
	mvn r5, #0
	mov r4, r6
	mov fp, #0x3c
_0205BD5C:
	mov r0, #0x1bc
	mul r8, r6, r0
	ldr r0, [sl, #0x10]
	add r0, r0, r8
	bl FUN_020F9CDC
	mov r0, #0x114
	mul r7, r6, r0
	ldr r0, [sl, #0x18]
	ldr r1, [r0, r7]!
	ldr r1, [r1, #8]
	blx r1
	mul r0, r6, fp
	ldr r2, [sl, #0x18]
	ldr r1, [sl, #0x10]
	add r3, r2, r7
	add r2, r1, r8
	ldr r1, [sl, #0x14]
	add r6, r6, #1
	str r5, [r1, r0]
	add r0, r1, r0
	str r5, [r0, #4]
	strh r4, [r0, #8]
	strb r4, [r0, #0xa]
	strb r4, [r0, #0xb]
	str r4, [r0, #0xc]
	str r4, [r0, #0x10]
	str r4, [r0, #0x14]
	str r4, [r0, #0x18]
	str r4, [r0, #0x1c]
	str r4, [r0, #0x20]
	str r4, [r0, #0x24]
	str r4, [r0, #0x28]
	str r4, [r0, #0x2c]
	str r2, [r0, #0x30]
	str r3, [r0, #0x34]
	str r4, [r0, #0x38]
	cmp r6, sb
	blt _0205BD5C
_0205BDF4:
	mov r1, #0
	mov r0, sl
	mov r2, r1
	bl FUN_020521d0
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0205BE0C: .word FUN_020527d4
_0205BE10: .word FUN_0205a3f0
_0205BE14: .word FUN_020525e8
_0205BE18: .word FUN_0205a2f0
_0205BE1C: .word 0x0209A250

	arm_func_start FUN_0205be20
FUN_0205be20: ; 0x0205BE20
	push {r4, r5, r6, lr}
	mov r4, r0
	mvn r1, #0
	bl FUN_020522ec
	mov r0, r4
	bl FUN_020521a0
	mov r0, r4
	bl FUN_0205c468
	ldr r1, [r4, #0x14]
	cmp r1, #0
	beq _0205BE54
	ldr r0, _0205BF08 ; =0x0209A250
	bl FUN_0202e1c0
	arm_func_end FUN_0205be20
_0205BE54:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _0205BEAC
	ldr r0, [r4, #0xc]
	mov r6, #0
	cmp r0, #0
	ble _0205BE98
	mov r5, #0x114
_0205BE74:
	ldr r0, [r4, #0x18]
	mla r0, r6, r5, r0
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	ldr r0, [r4, #0xc]
	add r6, r6, #1
	cmp r6, r0
	blt _0205BE74
_0205BE98:
	ldr r0, [r4, #0x18]
	ldr r3, _0205BF0C ; =FUN_020525e8
	mov r1, #0x114
	mov r2, #8
	bl FUN_0201e394
_0205BEAC:
	ldr r0, [r4, #0x10]
	cmp r0, #0
	beq _0205BEFC
	ldr r0, [r4, #0xc]
	mov r6, #0
	cmp r0, #0
	ble _0205BEE8
	mov r5, #0x1bc
_0205BECC:
	ldr r0, [r4, #0x10]
	mla r0, r6, r5, r0
	bl FUN_020F9D80
	ldr r0, [r4, #0xc]
	add r6, r6, #1
	cmp r6, r0
	blt _0205BECC
_0205BEE8:
	ldr r0, [r4, #0x10]
	ldr r3, _0205BF10 ; =FUN_020527d4
	mov r1, #0x1bc
	mov r2, #8
	bl FUN_0201e394
_0205BEFC:
	mov r0, r4
	bl FUN_0205b518
	pop {r4, r5, r6, pc}
	.align 2, 0_0205BF08: .word 0x0209A250
_0205BF0C: .word FUN_020525e8
_0205BF10: .word FUN_020527d4

	arm_func_start FUN_0205bf14
FUN_0205bf14: ; 0x0205BF14
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sb, r0
	ldr r0, [sb, #0xc]
	mov r8, r1
	cmp r0, #0
	ble _0205BF38
	ldr r0, [sb, #0x14]
	cmp r0, #0
	bne _0205BF40
	arm_func_end FUN_0205bf14
_0205BF38:
	mov r7, #0
	b _0205BF44
_0205BF40:
	add r7, r0, #0
_0205BF44:
	cmp r7, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, _0205C05C ; =0x02099F18
	mvn r4, #0
	ldr r0, [r0]
	mov r6, #0
	ldrb r0, [r0, #4]
	add sl, r4, #0xff00
	mov r5, #3
	cmp r0, #0
	movne r8, #0
	b _0205C04C
_0205BF74:
	ldrh r1, [r7, #8]
	tst r1, #1
	beq _0205C044
	ldrb r0, [r7, #0xb]
	cmp r0, #1
	beq _0205BFA0
	cmp r0, #2
	beq _0205BFB0
	cmp r0, #3
	beq _0205BFE0
	b _0205C044
_0205BFA0:
	mov r0, sb
	mov r1, r7
	bl FUN_0205b6cc
	b _0205C044
_0205BFB0:
	tst r1, #2
	bne _0205C044
	mov r0, sb
	mov r1, r7
	bl FUN_0205b768
	cmp r0, #0
	strbne r5, [r7, #0xb]
	bne _0205C044
	mov r0, sb
	mov r1, r7
	bl FUN_0205b624
	b _0205C044
_0205BFE0:
	tst r1, #0x100
	beq _0205C044
	mov r0, sb
	mov r1, r7
	bl FUN_0205b9b8
	ldr r0, [r7, #0x34]
	mov r1, r8
	ldr r2, [r0]
	ldr r2, [r2, #0x24]
	blx r2
	ldr r1, [r7, #0x34]
	ldr r0, [r7, #0x30]
	ldr r1, [r1, #0x24]
	mov r2, r4
	bl FUN_020FA340
	ldr r0, [r7, #0x34]
	bl FUN_020FB02C
	cmp r0, #0
	beq _0205C044
	ldr r0, [r7, #0x34]
	bl FUN_020FB048
	cmp r0, #0
	ldrheq r0, [r7, #8]
	andeq r0, r0, sl
	strheq r0, [r7, #8]
_0205C044:
	add r6, r6, #1
	add r7, r7, #0x3c
_0205C04C:
	ldr r0, [sb, #0xc]
	cmp r6, r0
	blt _0205BF74
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0205C05C: .word 0x02099F18

	arm_func_start FUN_0205c060
FUN_0205c060: ; 0x0205C060
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	ldr r0, [r7, #0xc]
	mov r4, #0
	cmp r0, #0
	ble _0205C084
	ldr r6, [r7, #0x14]
	cmp r6, #0
	bne _0205C088
	arm_func_end FUN_0205c060
_0205C084:
	mov r6, #0
_0205C088:
	cmp r6, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r0, #0
	mov r5, #0
	ble _0205C110
	ldr sb, _0205C148 ; =0x02099EF0
	ldr r8, _0205C14C ; =0x00000101
_0205C0A4:
	ldrh r0, [r6, #8]
	and r0, r0, r8
	cmp r0, r8
	ldrbeq r0, [r6, #0xb]
	cmpeq r0, #3
	bne _0205C0FC
	ldrb r0, [r6, #0xa]
	cmp r0, #1
	cmpne r0, #2
	beq _0205C0EC
	cmp r0, #3
	bne _0205C0FC
	ldr r0, [sb]
	cmp r0, #0
	beq _0205C0EC
	bl FUN_02148398
	cmp r0, #0
	bne _0205C0FC
_0205C0EC:
	ldr r0, [r6, #0x30]
	bl FUN_020FA300
	cmp r0, #0
	addne r4, r4, #1
_0205C0FC:
	ldr r0, [r7, #0xc]
	add r5, r5, #1
	cmp r5, r0
	add r6, r6, #0x3c
	blt _0205C0A4
_0205C110:
	cmp r4, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r3, #3
	add r1, sp, #0
	mov r0, #0x10
	mov r2, #1
	str r3, [sp]
	bl FUN_020672b4
	mov r1, #0
	mov r2, r1
	mov r0, #0x15
	bl FUN_020672b4
	bl FUN_02064390
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205C148: .word 0x02099EF0
_0205C14C: .word 0x00000101

	arm_func_start FUN_0205c150
FUN_0205c150: ; 0x0205C150
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	ldr r0, [r7, #0xc]
	mov r4, #0
	cmp r0, #0
	ble _0205C174
	ldr r6, [r7, #0x14]
	cmp r6, #0
	bne _0205C178
	arm_func_end FUN_0205c150
_0205C174:
	mov r6, #0
_0205C178:
	cmp r6, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r0, #0
	mov r5, #0
	ble _0205C200
	ldr sb, _0205C238 ; =0x02099EF0
	ldr r8, _0205C23C ; =0x00000101
_0205C194:
	ldrh r0, [r6, #8]
	and r0, r0, r8
	cmp r0, r8
	ldrbeq r0, [r6, #0xb]
	cmpeq r0, #3
	bne _0205C1EC
	ldrb r0, [r6, #0xa]
	cmp r0, #3
	beq _0205C1C4
	cmp r0, #4
	beq _0205C1DC
	b _0205C1EC
_0205C1C4:
	ldr r0, [sb]
	cmp r0, #0
	beq _0205C1EC
	bl FUN_02148398
	cmp r0, #0
	beq _0205C1EC
_0205C1DC:
	ldr r0, [r6, #0x30]
	bl FUN_020FA300
	cmp r0, #0
	addne r4, r4, #1
_0205C1EC:
	ldr r0, [r7, #0xc]
	add r5, r5, #1
	cmp r5, r0
	add r6, r6, #0x3c
	blt _0205C194
_0205C200:
	cmp r4, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r3, #3
	add r1, sp, #0
	mov r0, #0x10
	mov r2, #1
	str r3, [sp]
	bl FUN_020672b4
	mov r1, #0
	mov r2, r1
	mov r0, #0x15
	bl FUN_020672b4
	bl FUN_02064390
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205C238: .word 0x02099EF0
_0205C23C: .word 0x00000101

	arm_func_start LAB_0205c240
LAB_0205c240: ; 0x0205C240
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x1c
	mov r4, #0
	mov r8, r1
	add r1, sp, #0x18
	str r4, [sp, #0x18]
	mov sb, r0
	mov r7, r2
	bl FUN_0205b5cc
	ldr r1, [sp, #0x18]
	mov r6, r0
	cmp r1, #0
	addeq sp, sp, #0x1c
	subeq r0, r4, #1
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r1, #0x30]
	cmp r0, #0
	ldrne r0, [r1, #0x34]
	cmpne r0, #0
	addeq sp, sp, #0x1c
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, pc}
	mov r0, sb
	bl FUN_0205b624
	mov r0, sb
	mov r1, r4
	bl FUN_0205228c
	cmp r0, #0
	addne sp, sp, #0x1c
	subne r0, r4, #1
	popne {r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sb, #8]
	add r2, sp, #0x14
	ldr r0, [r0]
	add r3, sp, #0x10
	mov r1, r8
	bl FUN_020F34F0
	cmp r0, #0
	addeq sp, sp, #0x1c
	subeq r0, r4, #1
	popeq {r4, r5, r6, r7, r8, sb, pc}
	mov r0, sb
	ldr r2, [r0]
	mov r1, r4
	ldr r2, [r2, #4]
	blx r2
	ldr r1, [sp, #0x14]
	mov r5, #1
	str r1, [sp]
	ldr r1, [sp, #0x10]
	ldr r2, _0205C390 ; =0x02099EE4
	stmib sp, {r1, r5}
	str r5, [sp, #0xc]
	mov r1, r0
	mov r4, #0xd
	ldr r0, [r2]
	mov r2, r4
	mov r3, r7
	bl FUN_020FCD08
	ldr r2, [sp, #0x18]
	sub r1, r4, #0xe
	str r0, [r2, #0x38]
	ldr r0, [sp, #0x18]
	cmp r7, #0
	str r8, [r0]
	ldr r0, [sp, #0x18]
	str r1, [r0, #4]
	ldrne r0, [sp, #0x18]
	strhne r5, [r0, #8]
	ldrne r0, [sp, #0x18]
	strbne r5, [r0, #0xb]
	bne _0205C378
	ldr r0, [sp, #0x18]
	mov r1, #3
	strh r1, [r0, #8]
	ldr r0, [sp, #0x18]
	mov r1, #2
	strb r1, [r0, #0xb]
	arm_func_end LAB_0205c240
_0205C378:
	mov r0, sb
	mov r1, r8
	mov r2, r6
	bl FUN_0205b530
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205C390: .word 0x02099EE4

	arm_func_start FUN_0205c394
FUN_0205c394: ; 0x0205C394
	ldr ip, _0205C3A0 ; =LAB_0205c240
	mov r2, #1
	bx ip
	.align 2, 0_0205C3A0: .word LAB_0205c240
	arm_func_end FUN_0205c394

	arm_func_start FUN_0205c3a4
FUN_0205c3a4: ; 0x0205C3A4
	push {r3, r4, r5, lr}
	mov r4, #0
	add r2, sp, #0
	str r4, [sp]
	mov r5, r0
	bl FUN_0205b564
	ldr r2, [sp]
	cmp r2, #0
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	ldr r0, [r2, #0x30]
	cmp r0, #0
	ldrne r0, [r2, #0x34]
	cmpne r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldrh r1, [r2, #8]
	ldr r0, _0205C434 ; =0x0000FFFD
	and r0, r1, r0
	strh r0, [r2, #8]
	ldr r1, [sp]
	ldrb r0, [r1, #0xb]
	cmp r0, #3
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_0205b6cc
	cmp r0, #0
	movne r0, r4
	popne {r3, r4, r5, pc}
	ldr r0, [sp]
	ldrb r0, [r0, #0xb]
	cmp r0, #2
	moveq r4, #1
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_0205C434: .word 0x0000FFFD
	arm_func_end FUN_0205c3a4

	arm_func_start FUN_0205c438
FUN_0205c438: ; 0x0205C438
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	add r2, sp, #0
	str r3, [sp]
	mov r4, r0
	bl FUN_0205b564
	ldr r1, [sp]
	mov r0, r4
	bl FUN_0205b624
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205c438

	arm_func_start FUN_0205c468
FUN_0205c468: ; 0x0205C468
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #0xc]
	cmp r0, #0
	ble _0205C488
	ldr r5, [r6, #0x14]
	cmp r5, #0
	bne _0205C48C
	arm_func_end FUN_0205c468
_0205C488:
	mov r5, #0
_0205C48C:
	mov r4, #0
	cmp r0, #0
	pople {r4, r5, r6, pc}
_0205C498:
	mov r0, r6
	mov r1, r5
	bl FUN_0205b624
	ldr r0, [r6, #0xc]
	add r4, r4, #1
	cmp r4, r0
	add r5, r5, #0x3c
	blt _0205C498
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205c4bc
FUN_0205c4bc: ; 0x0205C4BC
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	add r2, sp, #0
	str r3, [sp]
	mov r4, r0
	bl FUN_0205b564
	ldr r1, [sp]
	mov r0, r4
	bl FUN_0205b6cc
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205c4bc

	arm_func_start FUN_0205c4ec
FUN_0205c4ec: ; 0x0205C4EC
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r0, [r6, #0xc]
	cmp r0, #0
	ble _0205C50C
	ldr r5, [r6, #0x14]
	cmp r5, #0
	bne _0205C510
	arm_func_end FUN_0205c4ec
_0205C50C:
	mov r5, #0
_0205C510:
	cmp r0, #0
	mov r4, #0
	ble _0205C550
_0205C51C:
	ldrh r0, [r5, #8]
	tst r0, #1
	beq _0205C53C
	mov r0, r6
	mov r1, r5
	bl FUN_0205b6cc
	cmp r0, #0
	popne {r4, r5, r6, pc}
_0205C53C:
	ldr r0, [r6, #0xc]
	add r4, r4, #1
	cmp r4, r0
	add r5, r5, #0x3c
	blt _0205C51C
_0205C550:
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205c558
FUN_0205c558: ; 0x0205C558
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205b564
	ldr r2, [sp]
	cmp r2, #0
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	ldrh r1, [r2, #8]
	tst r1, #1
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	cmp r4, #0
	orrne r0, r1, #0x100
	strhne r0, [r2, #8]
	ldreq r0, _0205C5B4 ; =0x0000FEFF
	andeq r0, r1, r0
	strheq r0, [r2, #8]
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_0205C5B4: .word 0x0000FEFF
	arm_func_end FUN_0205c558

	arm_func_start FUN_0205c5b8
FUN_0205c5b8: ; 0x0205C5B8
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205b564
	ldr r0, [sp]
	cmp r0, #0
	strbne r4, [r0, #0xa]
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205c5b8

	arm_func_start FUN_0205c5e8
FUN_0205c5e8: ; 0x0205C5E8
	push {r3, r4, r5, lr}
	mov ip, #0
	mov r5, r2
	add r2, sp, #0
	str ip, [sp]
	mov r4, r3
	bl FUN_0205b564
	ldr r1, [sp]
	cmp r1, #0
	strne r5, [r1, #0xc]
	ldrne r0, [sp, #0x10]
	strne r4, [r1, #0x10]
	strne r0, [r1, #0x14]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205c5e8

	arm_func_start FUN_0205c620
FUN_0205c620: ; 0x0205C620
	push {r3, r4, r5, lr}
	mov ip, #0
	mov r5, r2
	add r2, sp, #0
	str ip, [sp]
	mov r4, r3
	bl FUN_0205b564
	ldr r1, [sp]
	cmp r1, #0
	strne r5, [r1, #0x18]
	ldrne r0, [sp, #0x10]
	strne r4, [r1, #0x1c]
	strne r0, [r1, #0x20]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205c620

	arm_func_start FUN_0205c658
FUN_0205c658: ; 0x0205C658
	push {r3, r4, r5, lr}
	mov ip, #0
	mov r5, r2
	add r2, sp, #0
	str ip, [sp]
	mov r4, r3
	bl FUN_0205b564
	ldr r1, [sp]
	cmp r1, #0
	strne r5, [r1, #0x24]
	ldrne r0, [sp, #0x10]
	strne r4, [r1, #0x28]
	strne r0, [r1, #0x2c]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205c658

	arm_func_start FUN_0205c690
FUN_0205c690: ; 0x0205C690
	push {r3, r4, lr}
	sub sp, sp, #0x1c
	mov r3, #0
	add ip, sp, #0x10
	mov r4, r0
	mov r0, r1
	mov r1, r2
	add r2, sp, #0
	str r3, [sp]
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	bl FUN_0205b564
	ldr r0, [sp]
	cmp r0, #0
	ldrne r1, [r0, #0x30]
	cmpne r1, #0
	beq _0205C6F8
	add r0, sp, #4
	bl FUN_020FA538
	ldr r2, [sp, #4]
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	str r0, [sp, #0x18]
	arm_func_end FUN_0205c690
_0205C6F8:
	add r0, sp, #0x10
	ldm r0, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add sp, sp, #0x1c
	pop {r3, r4, pc}

	arm_func_start FUN_0205c70c
FUN_0205c70c: ; 0x0205C70C
	push {r3, r4, lr}
	sub sp, sp, #0x1c
	mov r3, #0
	add ip, sp, #0x10
	mov r4, r0
	mov r0, r1
	mov r1, r2
	add r2, sp, #0
	str r3, [sp]
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	bl FUN_0205b564
	ldr r0, [sp]
	cmp r0, #0
	ldrne r1, [r0, #0x30]
	cmpne r1, #0
	beq _0205C774
	add r0, sp, #4
	bl FUN_020FA54C
	ldr r2, [sp, #4]
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	str r0, [sp, #0x18]
	arm_func_end FUN_0205c70c
_0205C774:
	add r0, sp, #0x10
	ldm r0, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add sp, sp, #0x1c
	pop {r3, r4, pc}

	arm_func_start FUN_0205c788
FUN_0205c788: ; 0x0205C788
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r4, #0
	mov r6, r2
	add r2, sp, #0
	str r4, [sp]
	mov r5, r3
	bl FUN_0205b564
	ldr r0, [sp]
	cmp r0, #0
	ldrne r0, [r0, #0x34]
	cmpne r0, #0
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	mov r1, r6
	bl FUN_020FAF80
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, r4
	popeq {r3, r4, r5, r6, pc}
	ldr r0, [sp]
	mov r1, r5
	ldr r0, [r0, #0x34]
	bl FUN_020FB040
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0205c788

	arm_func_start FUN_0205c7f8
FUN_0205c7f8: ; 0x0205C7F8
	push {r3, lr}
	mov r3, #0
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205b564
	ldr r0, [sp]
	cmp r0, #0
	ldrne r0, [r0, #0x34]
	cmpne r0, #0
	moveq r0, #0
	popeq {r3, pc}
	bl FUN_020FB02C
	pop {r3, pc}
	arm_func_end FUN_0205c7f8

	arm_func_start FUN_0205c82c
FUN_0205c82c: ; 0x0205C82C
	push {r4, lr}
	sub sp, sp, #0x10
	mov r3, #0
	add ip, sp, #4
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	bl FUN_0205b564
	ldr r0, [sp]
	cmp r0, #0
	strne r4, [r0, #4]
	add sp, sp, #0x10
	pop {r4, pc}
	arm_func_end FUN_0205c82c

	arm_func_start FUN_0205c86c
FUN_0205c86c: ; 0x0205C86C
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, r2
	tst r4, #0x6000
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	cmp r3, #0
	bne _0205C898
	bl FUN_0205c8d0
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205c86c
_0205C898:
	mov r3, #0
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205b564
	ldr r2, [sp]
	cmp r2, #0
	ldrne r0, [r2, #0x34]
	cmpne r0, #0
	ldrhne r1, [r2, #8]
	lslne r0, r4, #0x10
	orrne r0, r1, r0, lsr #16
	strhne r0, [r2, #8]
	add sp, sp, #4
	pop {r3, r4, pc}

	arm_func_start FUN_0205c8d0
FUN_0205c8d0: ; 0x0205C8D0
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, r2
	tst r4, #0x6000
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	mov r3, #0
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205b564
	ldr r2, [sp]
	cmp r2, #0
	ldrne r0, [r2, #0x34]
	cmpne r0, #0
	mvnne r0, r4
	ldrhne r1, [r2, #8]
	lslne r0, r0, #0x10
	andne r0, r1, r0, lsr #16
	strhne r0, [r2, #8]
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205c8d0

	arm_func_start FUN_0205c924
FUN_0205c924: ; 0x0205C924
	push {r3, lr}
	mov r3, #0
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205b564
	ldr r1, [sp]
	cmp r1, #0
	ldrne r0, [r1, #0x34]
	cmpne r0, #0
	moveq r0, #0
	ldrhne r0, [r1, #8]
	pop {r3, pc}
	arm_func_end FUN_0205c924

	arm_func_start FUN_0205c954
FUN_0205c954: ; 0x0205C954
	push {r4, lr}
	ldr r1, _0205C978 ; =0x0209095C
	mov r4, r0
	str r1, [r4]
	bl FUN_0205be20
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205C978: .word 0x0209095C
	arm_func_end FUN_0205c954

	arm_func_start FUN_0205c97c
FUN_0205c97c: ; 0x0205C97C
	push {r4, lr}
	ldr r1, _0205C998 ; =0x0209095C
	mov r4, r0
	str r1, [r4]
	bl FUN_0205be20
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205C998: .word 0x0209095C
	arm_func_end FUN_0205c97c

	arm_func_start FUN_0205c99c
FUN_0205c99c: ; 0x0205C99C
	mov r0, #0
	bx lr
	arm_func_end FUN_0205c99c

	arm_func_start FUN_0205c9a4
FUN_0205c9a4: ; 0x0205C9A4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r1, r5
	mov r0, #0
	mov r2, #0x8c
	bl FUN_0200787c
	add r0, r5, #0x2c
	str r4, [r5, #0x5c]
	bl FUN_020085cc
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205c9a4

	arm_func_start FUN_0205c9d0
FUN_0205c9d0: ; 0x0205C9D0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	mov r8, #0
	mov fp, #0x3f000000
	mov sl, r0
	lsl r7, sb, #0xc
	mov r6, fp
	mov r4, r8
	arm_func_end FUN_0205c9d0
_0205C9F0:
	add r0, sl, r8, lsl #3
	ldr r0, [r0, #0x68]
	cmp r0, #0
	beq _0205CA68
	cmp sb, #0
	mov r0, r7
	ble _0205CA20
	bl FUN_0201f704
	mov r1, r0
	mov r0, r6
	bl FUN_02020274
	b _0205CA2C
_0205CA20:
	bl FUN_0201f704
	mov r1, fp
	bl FUN_020204a4
_0205CA2C:
	add r5, sl, r8, lsl #3
	bl FUN_0201fdac
	ldr r1, [r5, #0x64]
	mov r2, r5
	add r0, r1, r0
	str r0, [r5, #0x64]
	ldr r1, [r2, #0x64]
	ldr r0, [r2, #0x68]
	cmp r1, r0
	strgt r4, [r2, #0x64]
	add r1, sl, r8, lsl #3
	ldr r0, [sl, #0x5c]
	ldr r1, [r1, #0x64]
	mov r2, r8
	bl FUN_020FA340
_0205CA68:
	add r8, r8, #1
	cmp r8, #5
	blt _0205C9F0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0205ca78
FUN_0205ca78: ; 0x0205CA78
	cmp r1, #5
	arm_func_end FUN_0205ca78

	arm_func_start switchD
switchD: ; 0x0205CA7C
	addls pc, pc, r1, lsl #2
	b _0205CAB4
	arm_func_end switchD
_0205CA84: ; jump table
	b _0205CAB4 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0205CA88
	b _0205CA9C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0205CA8C
	b _0205CAB4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0205CA90
	b _0205CAAC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0205CA94
	b _0205CAB4
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0205CA98
	b _0205CAA4
	arm_func_end caseD_5
_0205CA9C:
	ldr r0, _0205CABC ; =0x02090A4C
	bx lr
_0205CAA4:
	ldr r0, _0205CAC0 ; =0x02090A6C
	bx lr
_0205CAAC:
	ldr r0, _0205CAC4 ; =0x02090A8C
	bx lr
_0205CAB4:
	mov r0, #0
	bx lr
	.align 2, 0_0205CABC: .word 0x02090A4C
_0205CAC0: .word 0x02090A6C
_0205CAC4: .word 0x02090A8C

	arm_func_start FUN_0205cac8
FUN_0205cac8: ; 0x0205CAC8
	cmp r1, #5
	arm_func_end FUN_0205cac8

	arm_func_start switchD
switchD: ; 0x0205CACC
	addls pc, pc, r1, lsl #2
	b _0205CB04
	arm_func_end switchD
_0205CAD4: ; jump table
	b _0205CB04 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0205CAD8
	b _0205CAEC
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0205CADC
	b _0205CB04
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0205CAE0
	b _0205CAFC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0205CAE4
	b _0205CB04
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0205CAE8
	b _0205CAF4
	arm_func_end caseD_5
_0205CAEC:
	ldr r0, _0205CB0C ; =0x02090AAC
	bx lr
_0205CAF4:
	ldr r0, _0205CB10 ; =0x02090ACC
	bx lr
_0205CAFC:
	ldr r0, _0205CB14 ; =0x02090AEC
	bx lr
_0205CB04:
	mov r0, #0
	bx lr
	.align 2, 0_0205CB0C: .word 0x02090AAC
_0205CB10: .word 0x02090ACC
_0205CB14: .word 0x02090AEC

	arm_func_start FUN_0205cb18
FUN_0205cb18: ; 0x0205CB18
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	mov r7, r0
	mov r6, r1
	add ip, sp, #0
	mov r5, r2
	mov r4, r3
	mov r1, #4
	mov r0, #0
	arm_func_end FUN_0205cb18
_0205CB3C:
	strb r0, [ip]
	strb r0, [ip, #1]
	strb r0, [ip, #2]
	strb r0, [ip, #3]
	add ip, ip, #4
	subs r1, r1, #1
	bne _0205CB3C
	cmp r6, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r5]
	cmp r0, #7
	cmpne r0, #8
	cmpne r0, #9
	addne sp, sp, #0x10
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldr r1, _0205CC58 ; =0x02090B0C
	mov r0, r6
	mov r2, #2
	bl FUN_02014fc4
	cmp r0, #0
	bne _0205CC04
	ldr r0, [r5]
	cmp r0, #7
	beq _0205CBBC
	cmp r0, #8
	beq _0205CBEC
	cmp r0, #9
	beq _0205CBD8
	b _0205CBF8
_0205CBBC:
	add r0, sp, #0
	mov r3, #1
_0205CBC4:
	add r1, r6, #2
	mov r2, #5
	str r3, [r5]
_0205CBD0:
	bl _strncpy
	b _0205CC10
_0205CBD8:
	mov r2, #5
	add r0, sp, #0
	add r1, r6, #2
	str r2, [r5]
	b _0205CBD0
_0205CBEC:
	add r0, sp, #0
	mov r3, #3
	b _0205CBC4
_0205CBF8:
	add sp, sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0205CC04:
	add sp, sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0205CC10:
	ldr r1, [r5]
	mov r0, #0xc
	mul r2, r1, r0
	ldr r1, [r7, #8]
	ldr r0, [r1, r2]
	cmp r0, #0
	addne r1, r1, r2
	ldrbne r1, [r1, #8]
	cmpne r1, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	add r1, sp, #0
	bl FUN_020F3C28
	str r0, [r4]
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0205CC58: .word 0x02090B0C

	arm_func_start FUN_0205cc5c
FUN_0205cc5c: ; 0x0205CC5C
	subs r2, r1, #1
	bmi _0205CC7C
	ldr r1, [r0, #0xc]
	cmp r2, r1
	bge _0205CC7C
	ldr r1, [r0, #0x18]
	cmp r1, #0
	bne _0205CC84
	arm_func_end FUN_0205cc5c
_0205CC7C:
	mov r0, #0
	bx lr
_0205CC84:
	mov r0, #0x8c
	mla r0, r2, r0, r1
	bx lr

	arm_func_start FUN_0205cc90
FUN_0205cc90: ; 0x0205CC90
	push {r4, r5, r6, r7, r8, lr}
	movs r7, r1
	mov r6, r0
	mov r4, #0
	mov r8, #1
	moveq r0, r4
	popeq {r4, r5, r6, r7, r8, pc}
	ldrb r0, [r7, #0x24]
	cmp r0, #3
	moveq r0, r8
	popeq {r4, r5, r6, r7, r8, pc}
	cmp r0, #2
	movne r0, r4
	popne {r4, r5, r6, r7, r8, pc}
	ldr r0, [r7, #0x5c]
	bl FUN_020FA964
	cmp r0, #0
	movne r0, r4
	popne {r4, r5, r6, r7, r8, pc}
	ldr r0, [r7, #0x5c]
	bl FUN_020FA930
	cmp r0, #0
	bne _0205CD30
	ldr r0, [r7, #0x5c]
	mov r1, r4
	mov r2, r4
	bl FUN_020F9F7C
	cmp r0, #0
	bne _0205CD18
	mov r0, r6
	mov r1, r7
	bl FUN_0205d04c
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0205cc90
_0205CD18:
	ldr r0, [r7, #0x5c]
	mov r1, #2
	bl FUN_020FABDC
	ldr r0, [r7, #0x5c]
	mov r1, #0x20
	bl FUN_020FA6D4
_0205CD30:
	mov r5, #0
_0205CD34:
	ldr r0, [r7, #0x5c]
	mov r1, r5
	bl FUN_020FAA34
	ldr r0, [r0, #4]
	cmp r0, #0
	moveq r0, r8
	movne r0, r4
	cmp r0, #0
	bne _0205CDC4
	ldr r0, [r7, #0x5c]
	mov r1, r5
	bl FUN_020FAA34
	ldr r1, [r0, #4]
	cmp r1, #0
	moveq r1, r8
	movne r1, r4
	cmp r1, #0
	bne _0205CD8C
	ldr r0, [r0, #0xc]
	tst r0, #1
	movne r0, r8
	bne _0205CD90
_0205CD8C:
	mov r0, r4
_0205CD90:
	cmp r0, #0
	bne _0205CDC4
	ldr r0, [r7, #0x5c]
	mov r1, r5
	mov r2, r4
	bl FUN_020FA610
	cmp r0, #0
	bne _0205CDC4
	ldr r0, [r7, #0x5c]
	mov r1, r5
	bl FUN_020FA5F4
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
_0205CDC4:
	add r5, r5, #1
	cmp r5, #5
	blt _0205CD34
	ldr r0, [r7, #0x5c]
	mov r1, #1
	mov r4, r1
	mov r5, #0
	bl FUN_020FAC0C
	ldr r0, [r6, #0x18]
	ldrb r0, [r0, #0x28]
	cmp r0, #0
	beq _0205CE14
	ldr r0, [r7, #0x5c]
	mov r1, r5
	bl FUN_020FAA34
	cmp r0, #0
	beq _0205CE0C
	bl FUN_02110FFC
_0205CE0C:
	ldr r0, [r6, #0x18]
	strb r5, [r0, #0x28]
_0205CE14:
	mov r6, #0
_0205CE18:
	ldr r0, [r7, #0x5c]
	mov r1, r6
	bl FUN_020FAA1C
	ldr r0, [r0, #4]
	cmp r0, #0
	moveq r0, r4
	movne r0, r5
	cmp r0, #0
	bne _0205CEC8
	ldr r0, [r7, #0x5c]
	mov r1, r6
	bl FUN_020FAA1C
	ldr r1, [r0, #4]
	cmp r1, #0
	ldrne r0, [r0, #0xc]
	cmpne r0, #0
	movne r0, r4
	moveq r0, r5
	cmp r0, #0
	bne _0205CEC8
	ldr r0, [r7, #0x5c]
	mov r1, r6
	mov r2, r5
	bl FUN_020FA838
	cmp r0, #0
	bne _0205CE94
	ldr r0, [r7, #0x5c]
	mov r1, r6
	bl FUN_020FA8A0
	mov r0, r5
	pop {r4, r5, r6, r7, r8, pc}
_0205CE94:
	ldr r0, [r7, #0x5c]
	mov r1, r6
	bl FUN_020FA8B8
	ldr r0, [r7, #0x5c]
	mov r1, r6
	bl FUN_020FAA1C
	cmp r0, #0
	beq _0205CEC8
	add r1, r7, r6, lsl #3
	str r5, [r1, #0x64]
	bl FUN_020FC788
	add r1, r7, r6, lsl #3
	str r0, [r1, #0x68]
_0205CEC8:
	add r6, r6, #1
	cmp r6, #5
	blt _0205CE18
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0205cedc
FUN_0205cedc: ; 0x0205CEDC
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10
	movs r5, r1
	mov r6, r0
	addeq sp, sp, #0x10
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r0, _0205D044 ; =0x0208C47C
	add r4, sp, #0
	ldm r0, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldr r0, [r5, #0x20]
	tst r0, #1
	addeq sp, sp, #0x10
	mvneq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldrb r0, [r5, #0x24]
	cmp r0, #3
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r0, [r5, #0x5c]
	bl FUN_020FA964
	movs r7, r0
	beq _0205CF6C
	cmp r7, #1
	moveq r1, #1
	addeq sp, sp, #0x10
	strbeq r1, [r5, #0x24]
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_0205d04c
	add sp, sp, #0x10
	mov r0, r7
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0205cedc
_0205CF6C:
	ldr r1, [r5, #0x60]
	cmp r1, #0
	beq _0205D030
	ldr r7, _0205D048 ; =0x02099EE4
	ldr r0, [r7]
	bl FUN_020FD278
	movs r8, r0
	beq _0205CFB8
	cmp r8, #1
	moveq r1, #1
	addeq sp, sp, #0x10
	strbeq r1, [r5, #0x24]
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_0205d04c
	add sp, sp, #0x10
	mov r0, r8
	pop {r4, r5, r6, r7, r8, pc}
_0205CFB8:
	ldr r0, [r5, #0x5c]
	bl FUN_020FA8FC
	mov r8, #0
	b _0205D010
_0205CFC8:
	ldr r0, [r7]
	ldr r1, [r5, #0x60]
	ldr r3, [r4, r8, lsl #2]
	mov r2, r8
	bl FUN_020FD6D8
	movs r6, r0
	beq _0205D00C
	ldr r0, [r5, #0x5c]
	mov r1, r6
	mov r2, r8
	bl FUN_020FA7F0
	cmp r0, #0
	ldr r0, [r7]
	mov r1, r6
	bne _0205D008
	b _0205D008
_0205D008:
	bl FUN_020FD350
_0205D00C:
	add r8, r8, #1
_0205D010:
	cmp r8, #5
	blt _0205CFC8
	ldr r0, _0205D048 ; =0x02099EE4
	ldr r1, [r5, #0x60]
	ldr r0, [r0]
	bl FUN_020FD350
	mov r0, #0
	str r0, [r5, #0x60]
_0205D030:
	mov r0, #2
	strb r0, [r5, #0x24]
	mov r0, #0
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0205D044: .word 0x0208C47C
_0205D048: .word 0x02099EE4

	arm_func_start FUN_0205d04c
FUN_0205d04c: ; 0x0205D04C
	push {r3, r4, r5, lr}
	movs r5, r1
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r4, [r5, #0x5c]
	cmp r4, #0
	beq _0205D070
	mov r0, r4
	bl FUN_020FA154
	arm_func_end FUN_0205d04c
_0205D070:
	ldr r1, [r5, #0x60]
	cmp r1, #0
	beq _0205D088
	ldr r0, _0205D09C ; =0x02099EE4
	ldr r0, [r0]
	bl FUN_020FD350
_0205D088:
	mov r0, r5
	mov r1, r4
	bl FUN_0205c9a4
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_0205D09C: .word 0x02099EE4

	arm_func_start FUN_0205d0a0
FUN_0205d0a0: ; 0x0205D0A0
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r1, #1
	mov r5, r0
	bl FUN_0205cc5c
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r3, [r5, #0xc]
	mov r2, #0
	cmp r3, #0
	ble _0205D0FC
	arm_func_end FUN_0205d0a0
_0205D0D0:
	ldr r1, [r0, #0x20]
	tst r1, #1
	bne _0205D0EC
	cmp r4, #0
	strne r0, [r4]
	add r0, r2, #1
	pop {r3, r4, r5, pc}
_0205D0EC:
	add r2, r2, #1
	cmp r2, r3
	add r0, r0, #0x8c
	blt _0205D0D0
_0205D0FC:
	mvn r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0205d104
FUN_0205d104: ; 0x0205D104
	push {r4, lr}
	mov r4, r0
	bl FUN_02052144
	mov r1, #0
	ldr r2, _0205D134 ; =0x02090A30
	mov r0, r4
	str r2, [r4]
	str r1, [r4, #0xc]
	str r1, [r4, #0x10]
	str r1, [r4, #0x18]
	str r1, [r4, #0x14]
	pop {r4, pc}
	.align 2, 0_0205D134: .word 0x02090A30
	arm_func_end FUN_0205d104

	arm_func_start LAB_0205d138
LAB_0205d138: ; 0x0205D138
	push {r4, lr}
	ldr r1, _0205D154 ; =0x02090A30
	mov r4, r0
	str r1, [r4]
	bl FUN_0205d28c
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205D154: .word 0x02090A30
	arm_func_end LAB_0205d138

	arm_func_start LAB_0205d158
LAB_0205d158: ; 0x0205D158
	push {r4, lr}
	ldr r1, _0205D17C ; =0x02090A30
	mov r4, r0
	str r1, [r4]
	bl FUN_0205d28c
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205D17C: .word 0x02090A30
	arm_func_end LAB_0205d158

	arm_func_start FUN_0205d180
FUN_0205d180: ; 0x0205D180
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r6, r1
	mov r7, r0
	mov r1, #6
	str r6, [r7, #0xc]
	bl FUN_02052168
	ldr r1, _0205D280 ; =FUN_020527d4
	ldr r3, _0205D284 ; =FUN_0205a3f0
	mov r0, r6
	str r1, [sp]
	mov r1, #0x1bc
	mov r2, #8
	bl FUN_0201e140
	str r0, [r7, #0x10]
	mov r0, #0x10
	bl FUN_0201e014
	cmp r0, #0
	beq _0205D1CC
	bl FUN_020540e0
	arm_func_end FUN_0205d180
_0205D1CC:
	mov r1, #0x8c
	mul r1, r6, r1
	str r0, [r7, #0x14]
	ldr r0, _0205D288 ; =0x0209A250
	bl FUN_0202de44
	ldr r1, [r7, #0x10]
	str r0, [r7, #0x18]
	cmp r1, #0
	ldrne r1, [r7, #0x14]
	cmpne r1, #0
	cmpne r0, #0
	bne _0205D20C
	mov r0, r7
	bl FUN_0205d28c
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0205D20C:
	mov r0, r1
	bl FUN_020540f4
	cmp r6, #0
	mov r4, #0
	ble _0205D258
	mov r8, #0x1bc
	mov sb, #0x8c
_0205D228:
	ldr r0, [r7, #0x18]
	mul r5, r4, r8
	ldr r1, [r7, #0x10]
	mla r0, r4, sb, r0
	add r1, r1, r5
	bl FUN_0205c9a4
	ldr r0, [r7, #0x10]
	add r0, r0, r5
	bl FUN_020F9CDC
	add r4, r4, #1
	cmp r4, r6
	blt _0205D228
_0205D258:
	mov r2, #0
	str r2, [r7, #0x1c]
	mvn r1, #0
_0205D264:
	add r0, r7, r2, lsl #2
	add r2, r2, #1
	str r1, [r0, #0x20]
	cmp r2, #6
	blt _0205D264
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205D280: .word FUN_020527d4
_0205D284: .word FUN_0205a3f0
_0205D288: .word 0x0209A250

	arm_func_start FUN_0205d28c
FUN_0205d28c: ; 0x0205D28C
	push {r4, r5, r6, lr}
	mov r6, r0
	mvn r1, #0
	bl FUN_020522ec
	mov r0, r6
	bl FUN_020521a0
	mov r0, r6
	bl FUN_0205ddb8
	ldr r1, [r6, #0x18]
	cmp r1, #0
	beq _0205D2C0
	ldr r0, _0205D340 ; =0x0209A250
	bl FUN_0202e1c0
	arm_func_end FUN_0205d28c
_0205D2C0:
	ldr r0, [r6, #0x10]
	cmp r0, #0
	beq _0205D310
	ldr r0, [r6, #0xc]
	mov r5, #0
	cmp r0, #0
	ble _0205D2FC
	mov r4, #0x1bc
_0205D2E0:
	ldr r0, [r6, #0x10]
	mla r0, r5, r4, r0
	bl FUN_020F9D80
	ldr r0, [r6, #0xc]
	add r5, r5, #1
	cmp r5, r0
	blt _0205D2E0
_0205D2FC:
	ldr r0, [r6, #0x10]
	ldr r3, _0205D344 ; =FUN_020527d4
	mov r1, #0x1bc
	mov r2, #8
	bl FUN_0201e394
_0205D310:
	ldr r0, [r6, #0x14]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	bl FUN_020540f4
	ldr r4, [r6, #0x14]
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	mov r0, r4
	bl FUN_020540f0
	mov r0, r4
	bl FUN_0201e078
	pop {r4, r5, r6, pc}
	.align 2, 0_0205D340: .word 0x0209A250
_0205D344: .word FUN_020527d4

	arm_func_start FUN_0205d348
FUN_0205d348: ; 0x0205D348
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r1
	mov r1, #1
	mov r7, r0
	bl FUN_0205cc5c
	movs r4, r0
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r0, _0205D41C ; =0x02099F18
	mov r5, #0
	ldr r0, [r0]
	mov r8, #3
	ldrb r0, [r0, #4]
	cmp r0, #0
	movne r6, #0
	b _0205D40C
	arm_func_end FUN_0205d348
_0205D384:
	ldr r1, [r4, #0x20]
	tst r1, #1
	beq _0205D404
	ldrb r0, [r4, #0x24]
	cmp r0, #1
	beq _0205D3B0
	cmp r0, #2
	beq _0205D3C0
	cmp r0, #3
	beq _0205D3F0
	b _0205D404
_0205D3B0:
	mov r0, r7
	mov r1, r4
	bl FUN_0205cedc
	b _0205D404
_0205D3C0:
	tst r1, #2
	bne _0205D404
	mov r0, r7
	mov r1, r4
	bl FUN_0205cc90
	cmp r0, #0
	strbne r8, [r4, #0x24]
	bne _0205D404
	mov r0, r7
	mov r1, r4
	bl FUN_0205d04c
	b _0205D404
_0205D3F0:
	tst r1, #0x100
	beq _0205D404
	mov r0, r4
	mov r1, r6
	bl FUN_0205c9d0
_0205D404:
	add r5, r5, #1
	add r4, r4, #0x8c
_0205D40C:
	ldr r0, [r7, #0xc]
	cmp r5, r0
	blt _0205D384
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0205D41C: .word 0x02099F18

	arm_func_start FUN_0205d420
FUN_0205d420: ; 0x0205D420
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov r8, #0
	mov sl, r0
	mov r1, r8
	mov r2, r8
	mov r0, #0x11
	bl FUN_020672b4
	ldr r0, [sl, #0xc]
	mov r7, #1
	cmp r0, #1
	blt _0205D510
	ldr r4, _0205D568 ; =0x0208F6F0
	mov r6, #0x15
	mov r5, #0x1b
	add fp, sp, #8
	arm_func_end FUN_0205d420
_0205D460:
	mov r0, sl
	mov r1, r7
	bl FUN_0205cc5c
	movs sb, r0
	ldrne r0, [sb, #0x5c]
	cmpne r0, #0
	beq _0205D500
	ldr r0, [sb, #0x20]
	tst r0, #0x100
	beq _0205D500
	mov r1, #0
	mov r0, r6
	mov r2, r1
	bl FUN_020672b4
	bl FUN_020643c0
	ldr r0, [sb, #0x5c]
	bl FUN_020FA1E4
	ldr r0, [sb, #0x5c]
	bl FUN_020FA1FC
	ldr r0, [sb, #0x5c]
	bl FUN_020FA230
	ldr r1, [r4, #0x1c]
	mov r0, r5
	str r1, [sp, #8]
	str r1, [sp, #0xc]
	str r1, [sp, #0x10]
	mov r1, fp
	mov r2, #3
	bl FUN_020672b4
	ldrb r0, [sb, #0x27]
	cmp r0, #0
	beq _0205D4F0
	mov r0, #0x19
	mov r2, #0xc
	add r1, sb, #0x2c
	bl FUN_020672b4
_0205D4F0:
	ldr r0, [sb, #0x5c]
	bl FUN_020FA2BC
	cmp r0, #0
	addne r8, r8, #1
_0205D500:
	ldr r0, [sl, #0xc]
	add r7, r7, #1
	cmp r7, r0
	ble _0205D460
_0205D510:
	mov r4, #1
	add r1, sp, #4
	mov r2, r4
	mov r0, #0x12
	str r4, [sp, #4]
	bl FUN_020672b4
	cmp r8, #0
	addle sp, sp, #0x14
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r3, #3
	add r1, sp, #0
	mov r2, r4
	mov r0, #0x10
	str r3, [sp]
	bl FUN_020672b4
	mov r1, #0
	mov r2, r1
	mov r0, #0x15
	bl FUN_020672b4
	bl FUN_02064390
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0205D568: .word 0x0208F6F0

	arm_func_start FUN_0205d56c
FUN_0205d56c: ; 0x0205D56C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x98
	ldr lr, _0205D5E0 ; =0x02090A10
	add r4, sp, #0
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov ip, r4
	ldm lr!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldm lr, {r0, r1}
	stm r4, {r0, r1}
	add r4, sp, #0x18
	ldr r2, [ip, r6, lsl #2]
	ldr r1, _0205D5E4 ; =0x02090B10
	mov r0, r4
	bl FUN_02015184
	cmp r5, #0
	mov r1, r4
	mov r0, #0
	beq _0205D5C8
	bl FUN_02085f50
	b _0205D5CC
	arm_func_end FUN_0205d56c
_0205D5C8:
	bl FUN_02085e4c
_0205D5CC:
	add r1, r7, r6, lsl #2
	str r0, [r1, #0x20]
	mov r0, #1
	add sp, sp, #0x98
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0205D5E0: .word 0x02090A10
_0205D5E4: .word 0x02090B10

	arm_func_start FUN_0205d5e8
FUN_0205d5e8: ; 0x0205D5E8
	push {r3, lr}
	add r0, r0, r1, lsl #2
	ldr r0, [r0, #0x20]
	bl FUN_02086080
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_0205d5e8

	arm_func_start FUN_0205d608
FUN_0205d608: ; 0x0205D608
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r0, r5, r4, lsl #2
	ldr r0, [r0, #0x20]
	bl FUN_02086040
	add r0, r5, r4, lsl #2
	mvn r1, #0
	str r1, [r0, #0x20]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205d608

	arm_func_start FUN_0205d630
FUN_0205d630: ; 0x0205D630
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x84
	mov r6, r1
	mov r4, #0
	add r1, sp, #0
	mov r7, r0
	str r4, [sp]
	bl FUN_0205d0a0
	movs r5, r0
	addmi sp, sp, #0x84
	submi r0, r4, #1
	popmi {r4, r5, r6, r7, pc}
	ldr r0, [sp]
	ldr r0, [r0, #0x5c]
	cmp r0, #0
	addeq sp, sp, #0x84
	subeq r0, r4, #1
	popeq {r4, r5, r6, r7, pc}
	ldr r1, _0205D72C ; =0x02090B1C
	add r0, sp, #4
	mov r2, r6
	bl FUN_02015184
	ldrsb r0, [r6, #1]
	cmp r0, #0x72
	beq _0205D698
	bl FUN_02004160
	arm_func_end FUN_0205d630
_0205D698:
	ldr r0, [sp]
	mov r4, #1
	ldr r0, [r0, #0x5c]
	ldr r1, [r7, #0x20]
	add r2, sp, #4
	mov r3, r4
	bl FUN_020F9E9C
	cmp r0, #0
	bne _0205D6D4
	ldr r1, [sp]
	mov r0, r7
	bl FUN_0205d04c
	add sp, sp, #0x84
	sub r0, r4, #2
	pop {r4, r5, r6, r7, pc}
_0205D6D4:
	ldr r0, _0205D730 ; =0x0208F6F0
	ldr r2, [sp]
	ldr r1, [r0, #0x1c]
	ldr r0, [r2, #0x5c]
	mov r2, r1
	mov r3, r1
	bl FUN_020FA504
	ldr r0, [sp]
	mov r1, r4
	ldr r0, [r0, #0x5c]
	bl FUN_020FADA4
	ldr r0, [sp]
	mov r1, r6
	bl FUN_02023e98
	ldr r0, [sp]
	mov r1, #3
	str r1, [r0, #0x20]
	ldr r1, [sp]
	mov r0, r5
	strb r4, [r1, #0x24]
	add sp, sp, #0x84
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0205D72C: .word 0x02090B1C
_0205D730: .word 0x0208F6F0

	arm_func_start FUN_0205d734
FUN_0205d734: ; 0x0205D734
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x9c
	mov r8, r1
	mov r6, #0
	add r1, sp, #0x18
	mov sb, r0
	mov r7, r2
	str r6, [sp, #0x18]
	bl FUN_0205d0a0
	movs r5, r0
	addmi sp, sp, #0x9c
	submi r0, r6, #1
	popmi {r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [sp, #0x18]
	ldr r0, [r0, #0x5c]
	cmp r0, #0
	addeq sp, sp, #0x9c
	subeq r0, r6, #1
	popeq {r4, r5, r6, r7, r8, sb, pc}
	add r4, sp, #0x1c
	mov r0, r8
	mov r1, r4
	bl FUN_020F3B18
	mov r1, #7
	str r1, [sp, #0x14]
	mov r0, sb
	ldr ip, [r0]
	add r2, sp, #0x14
	ldr ip, [ip, #8]
	mov r1, r8
	add r3, sp, #0x10
	blx ip
	cmp r0, #0
	beq _0205D824
	ldr r1, [sp, #0x14]
	mov r0, #0xc
	mul r0, r1, r0
	ldr r2, [sb, #8]
	ldr r1, [sp, #0x10]
	ldr r0, [r2, r0]
	add r2, sp, #0xc
	add r3, sp, #8
	bl FUN_020F34F0
	cmp r0, #0
	beq _0205D848
	mov r0, sb
	ldr r2, [r0]
	ldr r1, [sp, #0x14]
	ldr r2, [r2, #4]
	blx r2
	ldr r2, [sp, #8]
	mov r1, #1
	str r2, [sp]
	str r1, [sp, #4]
	ldr r2, [sp, #0x18]
	mov r1, r0
	ldr r0, [r2, #0x5c]
	ldr r3, [sp, #0xc]
	mov r2, r7
	b _0205D840
	arm_func_end FUN_0205d734
_0205D824:
	str r6, [sp]
	str r6, [sp, #4]
	ldr r0, [sp, #0x18]
	mov r1, r4
	ldr r0, [r0, #0x5c]
	mov r2, r7
	mov r3, r6
_0205D840:
	bl FUN_020F9E24
	mov r6, r0
_0205D848:
	cmp r6, #0
	bne _0205D868
	ldr r1, [sp, #0x18]
	mov r0, sb
	bl FUN_0205d04c
	add sp, sp, #0x9c
	mvn r0, #0
	pop {r4, r5, r6, r7, r8, sb, pc}
_0205D868:
	ldr r0, _0205D8E0 ; =0x0208F6F0
	ldr r2, [sp, #0x18]
	ldr r1, [r0, #0x1c]
	ldr r0, [r2, #0x5c]
	mov r2, r1
	mov r3, r1
	bl FUN_020FA504
	ldr r0, [sp, #0x18]
	mov r4, #1
	ldr r0, [r0, #0x5c]
	mov r1, r4
	bl FUN_020FADA4
	ldr r0, [sp, #0x18]
	mov r1, r8
	bl FUN_02023e98
	ldr r0, [sp, #0x18]
	mov r1, #3
	str r1, [r0, #0x20]
	cmp r7, #0
	ldrne r0, [sp, #0x18]
	strbne r4, [r0, #0x24]
	bne _0205D8D4
	ldr r1, [sp, #0x18]
	ldrb r0, [r1, #0x24]
	cmp r0, #1
	movne r0, #2
	strbne r0, [r1, #0x24]
_0205D8D4:
	mov r0, r5
	add sp, sp, #0x9c
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205D8E0: .word 0x0208F6F0

	arm_func_start FUN_0205d8e4
FUN_0205d8e4: ; 0x0205D8E4
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x84
	mov r6, r0
	mov r5, r2
	mov r7, r3
	bl FUN_0205cc5c
	movs r4, r0
	ldrne r0, [r4, #0x5c]
	cmpne r0, #0
	addeq sp, sp, #0x84
	moveq r0, #0
	popeq {r4, r5, r6, r7, pc}
	ldr r1, _0205D9A0 ; =0x02090B28
	add r0, sp, #4
	mov r2, r7
	bl FUN_02015184
	ldrsb r0, [r7, #1]
	mov r7, #4
	cmp r0, #0x72
	mvnne r7, #0
	cmp r7, #0
	bge _0205D940
	bl FUN_02004160
	arm_func_end FUN_0205d8e4
_0205D940:
	ldrb r0, [sp, #0x98]
	add r1, r6, r7, lsl #2
	add r2, sp, #4
	str r0, [sp]
	ldr r0, [r4, #0x5c]
	ldr r1, [r1, #0x20]
	mov r3, r5
	bl FUN_020FA598
	cmp r0, #0
	beq _0205D98C
	ldrb r1, [sp, #0x98]
	cmp r1, #0
	movne r1, #1
	strbne r1, [r4, #0x24]
	bne _0205D98C
	ldrb r1, [r4, #0x24]
	cmp r1, #1
	movne r1, #2
	strbne r1, [r4, #0x24]
_0205D98C:
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	add sp, sp, #0x84
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0205D9A0: .word 0x02090B28

	arm_func_start FUN_0205d9a4
FUN_0205d9a4: ; 0x0205D9A4
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xa0
	mov r8, r0
	mov r7, r2
	mov r6, r3
	bl FUN_0205cc5c
	movs r5, r0
	ldrne r0, [r5, #0x5c]
	cmpne r0, #0
	addeq sp, sp, #0xa0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	add r4, sp, #0x20
	mov r0, r6
	mov r1, r4
	bl FUN_020F3B50
	mov r1, #9
	str r1, [sp, #0x1c]
	mov r0, r8
	ldr ip, [r0]
	mov r1, r6
	ldr ip, [ip, #8]
	add r2, sp, #0x1c
	add r3, sp, #0x18
	mov r6, #0
	blx ip
	cmp r0, #0
	beq _0205DA84
	ldr r1, [sp, #0x1c]
	mov r0, #0xc
	mul r0, r1, r0
	ldr r2, [r8, #8]
	ldr r1, [sp, #0x18]
	ldr r0, [r2, r0]
	add r2, sp, #0x14
	add r3, sp, #0x10
	bl FUN_020F34F0
	cmp r0, #0
	beq _0205DAB0
	mov r0, r8
	ldr r2, [r0]
	ldr r1, [sp, #0x1c]
	ldr r2, [r2, #4]
	blx r2
	ldr r2, [sp, #0x14]
	ldrb r1, [sp, #0xbc]
	str r2, [sp]
	ldr r3, [sp, #0x10]
	mov r2, #1
	str r3, [sp, #4]
	str r2, [sp, #8]
	str r1, [sp, #0xc]
	mov r1, r0
	ldrb r3, [sp, #0xb8]
	ldr r0, [r5, #0x5c]
	b _0205DAA4
	arm_func_end FUN_0205d9a4
_0205DA84:
	str r6, [sp]
	str r6, [sp, #4]
	str r6, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	ldrb r3, [sp, #0xb8]
	ldr r0, [r5, #0x5c]
	mov r1, r4
_0205DAA4:
	mov r2, r7
	bl FUN_020FA5B4
	mov r6, r0
_0205DAB0:
	cmp r6, #0
	beq _0205DADC
	ldrb r0, [sp, #0xb8]
	cmp r0, #0
	movne r0, #1
	strbne r0, [r5, #0x24]
	bne _0205DADC
	ldrb r0, [r5, #0x24]
	cmp r0, #1
	movne r0, #2
	strbne r0, [r5, #0x24]
_0205DADC:
	mov r0, #1
	cmp r6, #0
	moveq r0, #0
	add sp, sp, #0xa0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0205daf0
FUN_0205daf0: ; 0x0205DAF0
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x84
	mov r7, r0
	mov r6, r2
	mov r5, r3
	bl FUN_0205cc5c
	movs r4, r0
	ldrne r0, [r4, #0x5c]
	cmpne r0, #0
	addeq sp, sp, #0x84
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	add r8, sp, #4
	mov r0, r6
	mov r1, r8
	bl FUN_020F3B34
	ldr r1, _0205DBD4 ; =0x02090B34
	mov r0, r8
	mov r2, r6
	bl FUN_02015184
	ldr r0, _0205DBD8 ; =0x02099EE4
	ldr r1, [r4, #0x60]
	ldr r0, [r0]
	bl FUN_020FD350
	mov r1, #0
	str r1, [r4, #0x60]
	ldrsb r0, [r6, #1]
	mov r6, #2
	cmp r0, #0x72
	subne r6, r1, #1
	cmp r6, #0
	bge _0205DB74
	bl FUN_02004160
	arm_func_end FUN_0205daf0
_0205DB74:
	ldr r0, _0205DBD8 ; =0x02099EE4
	str r5, [sp]
	add r1, r7, r6, lsl #2
	ldr r0, [r0]
	ldr r1, [r1, #0x20]
	add r2, sp, #4
	mov r3, #0xf
	bl FUN_020FCB70
	cmp r0, #0
	str r0, [r4, #0x60]
	addeq sp, sp, #0x84
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	cmp r5, #0
	movne r0, #1
	strbne r0, [r4, #0x24]
	bne _0205DBC8
	ldrb r0, [r4, #0x24]
	cmp r0, #1
	movne r0, #2
	strbne r0, [r4, #0x24]
_0205DBC8:
	mov r0, #1
	add sp, sp, #0x84
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0205DBD4: .word 0x02090B34
_0205DBD8: .word 0x02099EE4

	arm_func_start FUN_0205dbdc
FUN_0205dbdc: ; 0x0205DBDC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0xa0
	mov r8, r0
	mov r4, r2
	mov r7, r3
	bl FUN_0205cc5c
	movs r6, r0
	ldrne r0, [r6, #0x5c]
	cmpne r0, #0
	addeq sp, sp, #0xa0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r5, sp, #0x20
	mov r0, r4
	mov r1, r5
	bl FUN_020F3B34
	ldr sb, _0205DD34 ; =0x02099EE4
	ldr r1, [r6, #0x60]
	ldr r0, [sb]
	bl FUN_020FD350
	mov r1, r4
	mov r4, #0
	str r4, [r6, #0x60]
	mov r0, #8
	str r0, [sp, #0x1c]
	mov r0, r8
	ldr ip, [r0]
	add r2, sp, #0x1c
	ldr ip, [ip, #8]
	add r3, sp, #0x18
	blx ip
	cmp r0, #0
	beq _0205DCC8
	ldr r1, [sp, #0x1c]
	mov r0, #0xc
	mul r0, r1, r0
	ldr r2, [r8, #8]
	ldr r1, [sp, #0x18]
	ldr r0, [r2, r0]
	add r2, sp, #0x14
	add r3, sp, #0x10
	bl FUN_020F34F0
	cmp r0, #0
	beq _0205DCF4
	mov r0, r8
	ldr r2, [r0]
	ldr r1, [sp, #0x1c]
	ldr r2, [r2, #4]
	blx r2
	ldr r1, [sp, #0x14]
	mov r2, #1
	str r1, [sp]
	ldr r3, [sp, #0x10]
	mov r1, r0
	str r3, [sp, #4]
	str r2, [sp, #8]
	str r2, [sp, #0xc]
	ldr r0, [sb]
	b _0205DCE4
	arm_func_end FUN_0205dbdc
_0205DCC8:
	str r4, [sp]
	str r4, [sp, #4]
	str r4, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	ldr r0, [sb]
	mov r1, r5
_0205DCE4:
	mov r3, r7
	mov r2, #0xf
	bl FUN_020FCD08
	str r0, [r6, #0x60]
_0205DCF4:
	ldr r0, [r6, #0x60]
	cmp r0, #0
	addeq sp, sp, #0xa0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r7, #0
	movne r0, #1
	strbne r0, [r6, #0x24]
	bne _0205DD28
	ldrb r0, [r6, #0x24]
	cmp r0, #1
	movne r0, #2
	strbne r0, [r6, #0x24]
_0205DD28:
	mov r0, #1
	add sp, sp, #0xa0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205DD34: .word 0x02099EE4

	arm_func_start FUN_0205dd38
FUN_0205dd38: ; 0x0205DD38
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_0205cc5c
	movs r4, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [r4, #0x20]
	bic r0, r0, #2
	str r0, [r4, #0x20]
	ldrb r0, [r4, #0x24]
	cmp r0, #3
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_0205cedc
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldrb r0, [r4, #0x24]
	cmp r0, #2
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205dd38

	arm_func_start FUN_0205dd98
FUN_0205dd98: ; 0x0205DD98
	push {r4, lr}
	mov r4, r0
	bl FUN_0205cc5c
	movs r1, r0
	popeq {r4, pc}
	mov r0, r4
	bl FUN_0205d04c
	pop {r4, pc}
	arm_func_end FUN_0205dd98

	arm_func_start FUN_0205ddb8
FUN_0205ddb8: ; 0x0205DDB8
	push {r4, r5, r6, lr}
	mov r1, #1
	mov r6, r0
	bl FUN_0205cc5c
	movs r4, r0
	popeq {r4, r5, r6, pc}
	ldr r0, [r6, #0xc]
	mov r5, #0
	cmp r0, #0
	ble _0205DE0C
	arm_func_end FUN_0205ddb8
_0205DDE0:
	ldr r0, [r4, #0x20]
	tst r0, #1
	beq _0205DDF8
	mov r0, r6
	mov r1, r4
	bl FUN_0205d04c
_0205DDF8:
	ldr r0, [r6, #0xc]
	add r5, r5, #1
	cmp r5, r0
	add r4, r4, #0x8c
	blt _0205DDE0
_0205DE0C:
	ldr r0, [r6, #0x14]
	bl FUN_020540f4
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205de18
FUN_0205de18: ; 0x0205DE18
	push {r4, lr}
	mov r4, r0
	bl FUN_0205cc5c
	mov r1, r0
	mov r0, r4
	bl FUN_0205cedc
	pop {r4, pc}
	arm_func_end FUN_0205de18

	arm_func_start FUN_0205de34
FUN_0205de34: ; 0x0205DE34
	push {r4, r5, r6, lr}
	mov r1, #1
	mov r6, r0
	bl FUN_0205cc5c
	movs r4, r0
	mov r0, #0
	subeq r0, r0, #1
	popeq {r4, r5, r6, pc}
	ldr r1, [r6, #0xc]
	mov r5, r0
	cmp r1, #0
	pople {r4, r5, r6, pc}
	arm_func_end FUN_0205de34
_0205DE64:
	ldr r1, [r4, #0x20]
	tst r1, #1
	beq _0205DE90
	cmp r4, #0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r4
	bl FUN_0205cedc
	cmp r0, #0
	popne {r4, r5, r6, pc}
_0205DE90:
	ldr r1, [r6, #0xc]
	add r5, r5, #1
	cmp r5, r1
	add r4, r4, #0x8c
	blt _0205DE64
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205dea8
FUN_0205dea8: ; 0x0205DEA8
	push {r4, lr}
	mov r4, r2
	bl FUN_0205cc5c
	cmp r0, #0
	ldrne r1, [r0, #0x20]
	orrne r1, r1, r4
	strne r1, [r0, #0x20]
	pop {r4, pc}
	arm_func_end FUN_0205dea8

	arm_func_start FUN_0205dec8
FUN_0205dec8: ; 0x0205DEC8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x48
	add r7, sp, #0x3c
	mov r6, #0
	add r4, sp, #0x30
	mov sb, r2
	mov r8, r3
	str r6, [r7]
	str r6, [r7, #4]
	str r6, [r7, #8]
	str r6, [r4]
	str r6, [r4, #4]
	str r6, [r4, #8]
	bl FUN_0205cc5c
	movs r5, r0
	cmpne sb, #0
	addeq sp, sp, #0x48
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r2, [sp, #0x6c]
	ldr r3, [sp, #0x70]
	mov r0, sb
	mov r1, r7
	bl FUN_020EFF18
	mov r0, r8
	mov r1, r4
	bl FUN_020F0238
	add r0, r5, #0x2c
	bl FUN_020085cc
	mov r1, #1
	ldr r0, _0205E010 ; =0x020A0640
	strb r1, [r5, #0x27]
	ldrb r0, [r0, #0x1a]
	cmp r0, #0
	beq _0205DF90
	bl FUN_020F081C
	mov r4, r0
	mov r0, r6
	bl FUN_020F085C
	cmp r4, r0
	beq _0205DF90
	ldr r0, _0205E014 ; =0x02089874
	add r4, sp, #0
	ldrsh r2, [r0, #2]
	ldrsh r1, [r0]
	mov r0, r4
	blx FUN_0200867c
	add r0, r5, #0x2c
	mov r1, r4
	mov r2, r0
	bl FUN_02008a28
	arm_func_end FUN_0205dec8
_0205DF90:
	add r4, sp, #0
	mov r0, r4
	bl FUN_020085cc
	ldr lr, [sp, #0x3c]
	ldr ip, [sp, #0x40]
	ldr r3, [sp, #0x44]
	add r0, r5, #0x2c
	mov r1, r4
	mov r2, r0
	str lr, [sp, #0x24]
	str ip, [sp, #0x28]
	str r3, [sp, #0x2c]
	bl FUN_02008a28
	ldr r0, [sp, #0x34]
	ldr r1, _0205E018 ; =0x02087874
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	asr r0, r0, #4
	lsl r0, r0, #1
	add r2, r0, #1
	lsl r2, r2, #1
	lsl r0, r0, #1
	ldrsh r2, [r1, r2]
	ldrsh r1, [r1, r0]
	mov r0, r4
	blx FUN_0200867c
	add r0, r5, #0x2c
	mov r1, r4
	mov r2, r0
	bl FUN_02008a28
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205E010: .word 0x020A0640
_0205E014: .word 0x02089874
_0205E018: .word 0x02087874

	arm_func_start FUN_0205e01c
FUN_0205e01c: ; 0x0205E01C
	push {r3, r4, r5, lr}
	mov r5, r2
	mov r4, r3
	bl FUN_0205cc5c
	cmp r0, #0
	ldrne r0, [r0, #0x5c]
	cmpne r0, #0
	popeq {r3, r4, r5, pc}
	ldr r3, [sp, #0x10]
	mov r1, r5
	mov r2, r4
	bl FUN_020FA4BC
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205e01c

	arm_func_start FUN_0205e050
FUN_0205e050: ; 0x0205E050
	push {r3, r4, r5, lr}
	mov r5, r2
	mov r4, r3
	bl FUN_0205cc5c
	cmp r0, #0
	ldrne r0, [r0, #0x5c]
	cmpne r0, #0
	popeq {r3, r4, r5, pc}
	ldr r3, [sp, #0x10]
	mov r1, r5
	mov r2, r4
	bl FUN_020FA4E0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205e050

	arm_func_start FUN_0205e084
FUN_0205e084: ; 0x0205E084
	push {r4, lr}
	sub sp, sp, #0x18
	mov r4, r0
	mov r0, r1
	add ip, sp, #0xc
	mov r3, #0
	mov r1, r2
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	bl FUN_0205cc5c
	cmp r0, #0
	ldrne r1, [r0, #0x5c]
	cmpne r1, #0
	beq _0205E0E0
	add r0, sp, #0
	bl FUN_020FA538
	ldr r2, [sp]
	ldr r1, [sp, #4]
	ldr r0, [sp, #8]
	str r2, [sp, #0xc]
	str r1, [sp, #0x10]
	str r0, [sp, #0x14]
	arm_func_end FUN_0205e084
_0205E0E0:
	add r0, sp, #0xc
	ldm r0, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add sp, sp, #0x18
	pop {r4, pc}

	arm_func_start FUN_0205e0f4
FUN_0205e0f4: ; 0x0205E0F4
	push {r4, lr}
	sub sp, sp, #0x18
	mov r4, r0
	mov r0, r1
	add ip, sp, #0xc
	mov r3, #0
	mov r1, r2
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	bl FUN_0205cc5c
	cmp r0, #0
	ldrne r1, [r0, #0x5c]
	cmpne r1, #0
	beq _0205E150
	add r0, sp, #0
	bl FUN_020FA54C
	ldr r2, [sp]
	ldr r1, [sp, #4]
	ldr r0, [sp, #8]
	str r2, [sp, #0xc]
	str r1, [sp, #0x10]
	str r0, [sp, #0x14]
	arm_func_end FUN_0205e0f4
_0205E150:
	add r0, sp, #0xc
	ldm r0, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add sp, sp, #0x18
	pop {r4, pc}

	arm_func_start FUN_0205e164
FUN_0205e164: ; 0x0205E164
	push {r4, r5, r6, r7, r8, lr}
	movs r5, r1
	mov r6, r0
	cmpne r5, #1
	beq _0205E1E0
	cmp r5, #2
	popne {r4, r5, r6, r7, r8, pc}
	ldr r0, [r6, #0x1c]
	cmp r0, #0
	bne _0205E1E0
	ldr r0, [r6, #0xc]
	mov r4, #1
	cmp r0, #1
	blt _0205E1E0
	mov r7, #0
	mov r8, r7
	arm_func_end FUN_0205e164
_0205E1A4:
	mov r0, r6
	mov r1, r4
	bl FUN_0205cc5c
	cmp r0, #0
	beq _0205E1D0
	mov r2, r8
_0205E1BC:
	add r1, r0, r2, lsl #3
	add r2, r2, #1
	str r7, [r1, #0x64]
	cmp r2, #5
	blt _0205E1BC
_0205E1D0:
	ldr r0, [r6, #0xc]
	add r4, r4, #1
	cmp r4, r0
	ble _0205E1A4
_0205E1E0:
	str r5, [r6, #0x1c]
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0205e1e8
FUN_0205e1e8: ; 0x0205E1E8
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r1
	mov r1, #1
	mov r5, r0
	bl FUN_0205cc5c
	movs r4, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r6, [r5, #0xc]
	mov r5, #0
	cmp r6, #0
	ble _0205E24C
	arm_func_end FUN_0205e1e8
_0205E218:
	ldr r0, [r4, #0x20]
	tst r0, #1
	beq _0205E23C
	mov r0, r7
	mov r1, r4
	bl FUN_020241a0
	cmp r0, #0
	addne r0, r5, #1
	popne {r3, r4, r5, r6, r7, pc}
_0205E23C:
	add r5, r5, #1
	cmp r5, r6
	add r4, r4, #0x8c
	blt _0205E218
_0205E24C:
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0205e254
FUN_0205e254: ; 0x0205E254
	push {r3, r4, r5, lr}
	mov r5, r2
	mov r4, r3
	bl FUN_0205cc5c
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [r0, #0x5c]
	mov r1, r5
	mov r2, r4
	bl FUN_020FAB0C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205e254

	arm_func_start FUN_0205e280
FUN_0205e280: ; 0x0205E280
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	bl FUN_020523fc
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r7, #0xc]
	mov r6, #0
	cmp r0, #0
	ble _0205E2D0
	mov r5, #1
	mov r4, #0x1bc
	arm_func_end FUN_0205e280
_0205E2B0:
	ldr r0, [r7, #0x10]
	mov r1, r5
	mla r0, r6, r4, r0
	bl FUN_020FAC0C
	ldr r0, [r7, #0xc]
	add r6, r6, #1
	cmp r6, r0
	blt _0205E2B0
_0205E2D0:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0205e2d8
FUN_0205e2d8: ; 0x0205E2D8
	push {r3, lr}
	cmp r1, #6
	arm_func_end FUN_0205e2d8

	arm_func_start switchD
switchD: ; 0x0205E2E0
	addls pc, pc, r1, lsl #2
	arm_func_end switchD

	arm_func_start caseD_7
caseD_7: ; 0x0205E2E4
	b _0205E330
	arm_func_end caseD_7
_0205E2E8: ; jump table
	b LAB_0205e304 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0205E2EC
	b _0205E30C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0205E2F0
	b _0205E310
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0205E2F4
	b _0205E318
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0205E2F8
	b _0205E30C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0205E2FC
	b _0205E320
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0205E300
	b _0205E328
	arm_func_end caseD_6
LAB_0205e304:
	ldr r0, _0205E338 ; =0x02090C14
	pop {r3, pc}
_0205E30C:
	bl FUN_02004160
_0205E310:
	ldr r0, _0205E33C ; =0x02090C34
	pop {r3, pc}
_0205E318:
	ldr r0, _0205E340 ; =0x02090C54
	pop {r3, pc}
_0205E320:
	ldr r0, _0205E344 ; =0x02090C78
	pop {r3, pc}
_0205E328:
	ldr r0, _0205E348 ; =0x02090C9C
	pop {r3, pc}
_0205E330:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_0205E338: .word 0x02090C14
_0205E33C: .word 0x02090C34
_0205E340: .word 0x02090C54
_0205E344: .word 0x02090C78
_0205E348: .word 0x02090C9C

	arm_func_start LAB_0205e34c
LAB_0205e34c: ; 0x0205E34C
	push {r3, lr}
	cmp r1, #6
	arm_func_end LAB_0205e34c

	arm_func_start switchD
switchD: ; 0x0205E354
	addls pc, pc, r1, lsl #2
	arm_func_end switchD

	arm_func_start caseD_7
caseD_7: ; 0x0205E358
	b _0205E3A4
	arm_func_end caseD_7
_0205E35C: ; jump table
	b LAB_0205e378 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0205E360
	b _0205E380
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0205E364
	b _0205E384
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0205E368
	b _0205E38C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0205E36C
	b _0205E380
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0205E370
	b _0205E394
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0205E374
	b _0205E39C
	arm_func_end caseD_6
LAB_0205e378:
	ldr r0, _0205E3AC ; =0x02090CBC
	pop {r3, pc}
_0205E380:
	bl FUN_02004160
_0205E384:
	ldr r0, _0205E3B0 ; =0x02090CDC
	pop {r3, pc}
_0205E38C:
	ldr r0, _0205E3B4 ; =0x02090CFC
	pop {r3, pc}
_0205E394:
	ldr r0, _0205E3B8 ; =0x02090D20
	pop {r3, pc}
_0205E39C:
	ldr r0, _0205E3BC ; =0x02090D44
	pop {r3, pc}
_0205E3A4:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_0205E3AC: .word 0x02090CBC
_0205E3B0: .word 0x02090CDC
_0205E3B4: .word 0x02090CFC
_0205E3B8: .word 0x02090D20
_0205E3BC: .word 0x02090D44

	arm_func_start FUN_0205e3c0
FUN_0205e3c0: ; 0x0205E3C0
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x10
	mov r4, r0
	add r6, sp, #0
	mov r7, r1
	mov sl, r2
	mov sb, r3
	mov r0, #4
	mov r5, #0
	arm_func_end FUN_0205e3c0
_0205E3E4:
	strb r5, [r6]
	strb r5, [r6, #1]
	strb r5, [r6, #2]
	strb r5, [r6, #3]
	add r6, r6, #4
	subs r0, r0, #1
	bne _0205E3E4
	cmp r7, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, r4
	mov r1, r7
	bl FUN_0205e634
	mov r6, r0
	mov r0, r7
	mov r1, #0x2e
	bl FUN_02024160
	mov r7, r0
	cmp r6, #0
	cmpne r7, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r1, _0205E5C0 ; =0x02090D64
	mov r2, #5
	bl FUN_02014fc4
	cmp r0, #0
	mov r8, #1
	ldr r1, _0205E5C4 ; =0x02090D6C
	movne r8, #0
	mov r0, r6
	mov r2, #4
	bl FUN_02014fc4
	cmp r0, #0
	cmpeq r8, #0
	bne _0205E494
	add r1, r6, #4
	mov r3, #3
_0205E480:
	add r0, sp, #0
	sub r2, r7, r1
	str r3, [sl]
_0205E48C:
	bl _strncpy
	b _0205E564
_0205E494:
	ldr r1, _0205E5C8 ; =0x02090D74
	mov r0, r6
	mov r2, #3
	bl FUN_02014fc4
	cmp r0, #0
	bne _0205E4C8
	cmp r8, #0
	beq _0205E4C8
	add r1, r6, #3
	add r0, sp, #0
	sub r2, r7, r1
	str r5, [sl]
	b _0205E530
_0205E4C8:
	mov r5, #2
	ldr r1, _0205E5CC ; =0x02090D78
	mov r0, r6
	mov r2, r5
	bl FUN_02014fc4
	cmp r0, #0
	bne _0205E4FC
	mov r0, #1
	cmp r8, #0
	moveq r0, #4
	str r0, [sl]
	add r1, r6, #2
	b _0205E528
_0205E4FC:
	ldr r1, _0205E5D0 ; =0x02090D7C
	mov r0, r6
	mov r2, #3
	bl FUN_02014fc4
	cmp r0, #0
	bne _0205E534
	cmp r8, #0
	strne r5, [sl]
	moveq r0, #5
	streq r0, [sl]
	add r1, r6, #3
_0205E528:
	add r0, sp, #0
	sub r2, r7, r1
_0205E530:
	b _0205E48C
_0205E534:
	ldr r1, _0205E5D4 ; =0x02090D80
	mov r0, r6
	mov r2, r5
	bl FUN_02014fc4
	cmp r0, #0
	bne _0205E558
	add r1, r6, #2
	mov r3, #6
	b _0205E480
_0205E558:
	add sp, sp, #0x10
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0205E564:
	ldr r3, [sl]
	mov r0, #0xc
	mul r2, r3, r0
	ldr r1, [r4, #8]
	ldr r0, [r1, r2]
	cmp r0, #0
	addne r1, r1, r2
	ldrbne r1, [r1, #8]
	cmpne r1, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r3, #6
	bne _0205E5A8
	add r1, sp, #0
	bl FUN_020F3C28
	b _0205E5B0
_0205E5A8:
	add r0, sp, #0
	bl FUN_02024640
_0205E5B0:
	str r0, [sb]
	mov r0, #1
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0205E5C0: .word 0x02090D64
_0205E5C4: .word 0x02090D6C
_0205E5C8: .word 0x02090D74
_0205E5CC: .word 0x02090D78
_0205E5D0: .word 0x02090D7C
_0205E5D4: .word 0x02090D80

	arm_func_start FUN_0205e5d8
FUN_0205e5d8: ; 0x0205E5D8
	mov r1, #0
	str r1, [r0, #0x14]
	str r1, [r0, #0x10]
	str r1, [r0, #0x18]
	str r1, [r0, #0xc]
	str r1, [r0, #0x1c]
	bx lr
	arm_func_end FUN_0205e5d8

	arm_func_start FUN_0205e5f4
FUN_0205e5f4: ; 0x0205E5F4
	mvn r0, #0
	cmp r1, #0
	addge r0, r1, #1
	bx lr
	arm_func_end FUN_0205e5f4

	arm_func_start FUN_0205e604
FUN_0205e604: ; 0x0205E604
	cmp r1, #0
	blt _0205E624
	ldr r2, [r0, #0xc]
	cmp r1, r2
	bge _0205E624
	ldr r0, [r0, #0x14]
	cmp r0, #0
	bne _0205E62C
	arm_func_end FUN_0205e604
_0205E624:
	mov r0, #0
	bx lr
_0205E62C:
	add r0, r0, r1, lsl #5
	bx lr

	arm_func_start FUN_0205e634
FUN_0205e634: ; 0x0205E634
	push {r4, lr}
	movs r4, r1
	moveq r0, #0
	popeq {r4, pc}
	mov r0, r4
	mov r1, #0x2f
	bl FUN_02024160
	cmp r0, #0
	bne _0205E664
	mov r0, r4
	mov r1, #0x5c
	bl FUN_02024160
	arm_func_end FUN_0205e634
_0205E664:
	cmp r0, #0
	moveq r0, r4
	addne r0, r0, #1
	pop {r4, pc}

	arm_func_start FUN_0205e674
FUN_0205e674: ; 0x0205E674
	push {r4, r5, r6, lr}
	sub sp, sp, #0x20
	mov lr, r1
	mov ip, r2
	mov r5, r3
	add r4, sp, #0
	mov r6, r0
	ldr r1, _0205E6BC ; =0x02090D84
	mov r0, r4
	mov r2, lr
	mov r3, ip
	bl FUN_02023c40
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_0205e71c
	add sp, sp, #0x20
	pop {r4, r5, r6, pc}
	.align 2, 0_0205E6BC: .word 0x02090D84
	arm_func_end FUN_0205e674

	arm_func_start FUN_0205e6c0
FUN_0205e6c0: ; 0x0205E6C0
	push {r4, r5, lr}
	sub sp, sp, #0x24
	movs ip, r2
	mov r5, r0
	mov r2, r1
	bpl _0205E6E8
	ldr r2, [sp, #0x30]
	bl FUN_0205e738
	add sp, sp, #0x24
	pop {r4, r5, pc}
	arm_func_end FUN_0205e6c0
_0205E6E8:
	add r4, sp, #4
	str r3, [sp]
	ldr r1, _0205E718 ; =0x02090D8C
	mov r0, r4
	mov r3, ip
	bl FUN_02023c40
	ldr r2, [sp, #0x30]
	mov r0, r5
	mov r1, r4
	bl FUN_0205e738
	add sp, sp, #0x24
	pop {r4, r5, pc}
	.align 2, 0_0205E718: .word 0x02090D8C

	arm_func_start FUN_0205e71c
FUN_0205e71c: ; 0x0205E71C
	push {r4, lr}
	mov r4, r2
	mov r0, r1
	mov r1, r4
	bl FUN_020F3B6C
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0205e71c

	arm_func_start FUN_0205e738
FUN_0205e738: ; 0x0205E738
	push {r4, lr}
	mov r4, r2
	mov r0, r1
	mov r1, r4
	bl FUN_020F3B88
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0205e738

	arm_func_start FUN_0205e754
FUN_0205e754: ; 0x0205E754
	push {r3, r4, r5, r6, r7, lr}
	mov r4, #0
	mov r6, r1
	mov r7, r0
	mov r1, r4
	mov r5, r2
	bl FUN_0205e604
	ldr r2, [r7, #0xc]
	cmp r2, #0
	ble _0205E7B4
	arm_func_end FUN_0205e754
_0205E77C:
	ldr r1, [r0, #8]
	tst r1, #1
	beq _0205E7A4
	ldr r1, [r0]
	cmp r1, r6
	bne _0205E7A4
	cmp r5, #0
	strne r0, [r5]
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
_0205E7A4:
	add r4, r4, #1
	cmp r4, r2
	add r0, r0, #0x20
	blt _0205E77C
_0205E7B4:
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0205e7bc
FUN_0205e7bc: ; 0x0205E7BC
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r5, r0
	mov r1, r4
	bl FUN_0205e604
	ldr r2, [r5, #0xc]
	cmp r2, #0
	ble _0205E7FC
	arm_func_end FUN_0205e7bc
_0205E7DC:
	ldr r1, [r0, #8]
	tst r1, #1
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	add r4, r4, #1
	cmp r4, r2
	add r0, r0, #0x20
	blt _0205E7DC
_0205E7FC:
	mvn r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0205e804
FUN_0205e804: ; 0x0205E804
	push {r4, r5, r6, r7, r8, lr}
	movs r4, r1
	popeq {r4, r5, r6, r7, r8, pc}
	ldr r0, [r4, #0x14]
	cmp r0, #0
	beq _0205E820
	bl FUN_020FA154
	arm_func_end FUN_0205e804
_0205E820:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _0205E838
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
_0205E838:
	ldr r1, [r4, #0x1c]
	cmp r1, #0
	beq _0205E850
	ldr r0, _0205E88C ; =0x02099EE4
	ldr r0, [r0]
	bl FUN_020FD350
_0205E850:
	mov r6, #0
	mov r5, #0x20
	mov r0, r4
	mov r1, r6
	mov r2, r5
	ldr r8, [r4, #0x18]
	ldr r7, [r4, #0x14]
	bl MemWrite
	sub r0, r5, #0x21
	str r7, [r4, #0x14]
	str r8, [r4, #0x18]
	strh r0, [r4, #4]
	strh r0, [r4, #6]
	strb r6, [r4, #0x10]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0205E88C: .word 0x02099EE4

	arm_func_start FUN_0205e890
FUN_0205e890: ; 0x0205E890
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x10
	ldr r2, _0205EA90 ; =0x0208C48C
	add r4, sp, #0
	movs r5, r1
	mov r6, r0
	ldm r2, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	mov r4, #1
	mov r8, #0
	addeq sp, sp, #0x10
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r5, #8]
	tst r0, #1
	addeq sp, sp, #0x10
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldrb r0, [r5, #0xc]
	cmp r0, #3
	addeq sp, sp, #0x10
	moveq r0, r8
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r5, #0x14]
	bl FUN_020FA964
	movs r7, r0
	beq _0205E924
	cmp r7, #1
	addeq sp, sp, #0x10
	strbeq r4, [r5, #0xc]
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_0205e804
	add sp, sp, #0x10
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_0205e890
_0205E924:
	ldr r0, [r5, #0x18]
	ldr r0, [r0, #4]
	cmp r0, #0
	moveq r0, r4
	movne r0, r8
	cmp r0, #0
	bne _0205E978
	ldr r0, [r5, #0x18]
	bl FUN_020FB2AC
	movs r7, r0
	beq _0205E978
	cmp r7, #1
	addeq sp, sp, #0x10
	strbeq r4, [r5, #0xc]
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_0205e804
	add sp, sp, #0x10
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0205E978:
	ldr r1, [r5, #0x1c]
	cmp r1, #0
	beq _0205EA7C
	ldr r7, _0205EA94 ; =0x02099EE4
	ldr r0, [r7]
	bl FUN_020FD278
	movs sb, r0
	beq _0205E9C0
	cmp sb, #1
	addeq sp, sp, #0x10
	strbeq r4, [r5, #0xc]
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_0205e804
	add sp, sp, #0x10
	mov r0, sb
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0205E9C0:
	ldr r0, [r7]
	ldr r1, [r5, #0x1c]
	mov r2, #1
	mov r3, #2
	bl FUN_020FD6D8
	movs r4, r0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r5, #0x18]
	mov r1, r4
	ldr r2, [r0]
	ldr r2, [r2, #0xc]
	blx r2
	ldr r0, [r7]
	mov r1, r4
	bl FUN_020FD350
	ldr r0, [r5, #0x14]
	bl FUN_020FA8FC
	mov sb, #0
	add r6, sp, #0
	b _0205EA60
_0205EA18:
	ldr r0, [r7]
	ldr r1, [r5, #0x1c]
	ldr r3, [r6, sb, lsl #2]
	add r2, sb, #2
	bl FUN_020FD6D8
	movs r4, r0
	beq _0205EA5C
	ldr r0, [r5, #0x14]
	mov r1, r4
	mov r2, sb
	bl FUN_020FA7F0
	cmp r0, #0
	ldr r0, [r7]
	mov r1, r4
	bne _0205EA58
	b _0205EA58
_0205EA58:
	bl FUN_020FD350
_0205EA5C:
	add sb, sb, #1
_0205EA60:
	cmp sb, #5
	blt _0205EA18
	ldr r0, _0205EA94 ; =0x02099EE4
	ldr r1, [r5, #0x1c]
	ldr r0, [r0]
	bl FUN_020FD350
	str r8, [r5, #0x1c]
_0205EA7C:
	mov r0, #2
	strb r0, [r5, #0xc]
	mov r0, #0
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205EA90: .word 0x0208C48C
_0205EA94: .word 0x02099EE4

	arm_func_start FUN_0205ea98
FUN_0205ea98: ; 0x0205EA98
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	movs r8, r1
	mov sb, r0
	mov r6, #0
	moveq r0, r6
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrb r0, [r8, #0xc]
	cmp r0, #3
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r0, #2
	movne r0, r6
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, [r8, #0x14]
	bl FUN_020FA964
	cmp r0, #0
	movne r0, r6
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	ldr r0, [r8, #0x14]
	mov r4, r6
	bl FUN_020FA930
	cmp r0, #0
	bne _0205EB2C
	ldrb r0, [r8, #0xe]
	mov r1, r6
	cmp r0, #0
	movne r4, #2
	ldr r0, [r8, #0x14]
	mov r2, r4
	bl FUN_020F9F7C
	cmp r0, #0
	bne _0205EB2C
	mov r0, sb
	mov r1, r8
	bl FUN_0205e804
	mov r0, r6
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_0205ea98
_0205EB2C:
	mov r5, #1
	mov r7, #0
	mov sl, r5
_0205EB38:
	ldr r0, [r8, #0x14]
	mov r1, r7
	bl FUN_020FAA1C
	ldr r0, [r0, #4]
	mov r4, #0
	cmp r0, #0
	moveq r0, r5
	movne r0, r6
	cmp r0, #0
	bne _0205EBC4
	ldr r0, [r8, #0x14]
	mov r1, r7
	bl FUN_020FAA1C
	ldr r1, [r0, #4]
	cmp r1, #0
	ldrne r0, [r0, #0xc]
	cmpne r0, #0
	movne r0, sl
	moveq r0, r6
	cmp r0, #0
	bne _0205EBB8
	ldr r0, [r8, #0x14]
	mov r1, r7
	mov r2, r6
	bl FUN_020FA838
	cmp r0, #0
	bne _0205EBB8
	ldr r0, [r8, #0x14]
	mov r1, r7
	bl FUN_020FA8A0
	mov r0, r6
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0205EBB8:
	ldr r0, [r8, #0x14]
	mov r1, r7
	bl FUN_020FA8B8
_0205EBC4:
	add r7, r7, #1
	cmp r7, #5
	blt _0205EB38
	ldrb r0, [r8, #0xf]
	cmp r0, #0
	beq _0205EC30
	ldr r0, [r8]
	ldr r5, [sb, #0x1c]
	sub r1, r0, #1
	mov r6, #0x30
	mla r0, r1, r6, r5
	ldrsh r1, [r0, #6]
	ldr r0, [r8, #0x18]
	bl FUN_020FAF5C
	ldr r1, [r8]
	ldr r0, [r8, #0x18]
	sub r2, r1, #1
	mla r1, r2, r6, r5
	ldr r1, [r1, #8]
	bl FUN_020FB024
	ldr r1, [r8]
	ldr r0, [r8, #0x18]
	sub r2, r1, #1
	mla r1, r2, r6, r5
	ldrb r1, [r1, #4]
	bl FUN_020FB040
	strb r4, [r8, #0xf]
_0205EC30:
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0205ec38
FUN_0205ec38: ; 0x0205EC38
	push {r4, lr}
	mov r4, r2
	cmp r1, #0
	moveq r0, #0
	popeq {r4, pc}
	bl FUN_0205e634
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	ldrsb r1, [r0]
	cmp r1, #0x6d
	cmpne r1, #0x4d
	bne _0205EC7C
	ldrsb r1, [r0, #1]
	cmp r1, #0x6f
	cmpne r1, #0x4f
	beq _0205EC84
	arm_func_end FUN_0205ec38
_0205EC7C:
	mov r0, #0
	pop {r4, pc}
_0205EC84:
	mov r2, #0
_0205EC88:
	add r1, r0, r2
	ldrsb r1, [r1, #2]
	cmp r1, #0x30
	blt _0205ECA0
	cmp r1, #0x39
	ble _0205ECA8
_0205ECA0:
	mov r0, #0
	pop {r4, pc}
_0205ECA8:
	add r2, r2, #1
	cmp r2, #4
	blt _0205EC88
	cmp r4, #0
	beq _0205ECC8
	add r0, r0, #2
	bl FUN_02024640
	str r0, [r4]
_0205ECC8:
	mov r0, #1
	pop {r4, pc}

	arm_func_start FUN_0205ecd0
FUN_0205ecd0: ; 0x0205ECD0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, r1
	bl FUN_0205e5d8
	mov r0, sl
	mov r1, #7
	str sb, [sl, #0xc]
	bl FUN_02052168
	ldr r0, _0205EE14 ; =FUN_020527d4
	mov r4, #8
	str r0, [sp]
	ldr r3, _0205EE18 ; =FUN_0205a3f0
	mov r0, sb
	mov r1, #0x1bc
	mov r2, r4
	bl FUN_0201e140
	str r0, [sl, #0x10]
	ldr r1, _0205EE1C ; =FUN_020525e8
	ldr r3, _0205EE20 ; =FUN_0205a2f0
	str r1, [sp]
	mov r2, r4
	mov r0, sb
	mov r1, #0x114
	bl FUN_0201e140
	ldr r4, _0205EE24 ; =0x0209A250
	str r0, [sl, #0x18]
	lsl r1, sb, #5
	mov r0, r4
	bl FUN_0202de44
	str r0, [sl, #0x14]
	mov r0, r4
	mov r1, #0x600
	bl FUN_0202de44
	str r0, [sl, #0x1c]
	ldr r0, [sl, #0x10]
	cmp r0, #0
	ldrne r0, [sl, #0x18]
	cmpne r0, #0
	ldrne r0, [sl, #0x14]
	cmpne r0, #0
	bne _0205ED84
	mov r0, sl
	bl FUN_0205ee28
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0205ecd0
_0205ED84:
	cmp sb, #0
	mov r5, #0
	ble _0205EE0C
	mov fp, r5
	mvn r4, #0
_0205ED98:
	mov r0, #0x1bc
	mul r6, r5, r0
	ldr r0, [sl, #0x10]
	add r0, r0, r6
	bl FUN_020F9CDC
	mov r0, #0x114
	mul r7, r5, r0
	ldr r0, [sl, #0x18]
	ldr r1, [r0, r7]!
	ldr r1, [r1, #8]
	blx r1
	ldr r1, [sl, #0x18]
	ldr r0, [sl, #0x10]
	add r8, r1, r7
	add r7, r0, r6
	ldr r0, [sl, #0x14]
	mov r1, fp
	add r6, r0, r5, lsl #5
	mov r0, r6
	mov r2, #0x20
	bl MemWrite
	str r7, [r6, #0x14]
	str r8, [r6, #0x18]
	strh r4, [r6, #4]
	strh r4, [r6, #6]
	add r5, r5, #1
	strb fp, [r6, #0x10]
	cmp r5, sb
	blt _0205ED98
_0205EE0C:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0205EE14: .word FUN_020527d4
_0205EE18: .word FUN_0205a3f0
_0205EE1C: .word FUN_020525e8
_0205EE20: .word FUN_0205a2f0
_0205EE24: .word 0x0209A250

	arm_func_start FUN_0205ee28
FUN_0205ee28: ; 0x0205EE28
	push {r4, r5, r6, lr}
	mov r4, r0
	mvn r1, #0
	bl FUN_020522ec
	mov r0, r4
	bl FUN_020521a0
	mov r0, r4
	bl FUN_0205f61c
	ldr r1, [r4, #0x14]
	cmp r1, #0
	beq _0205EE5C
	ldr r0, _0205EF24 ; =0x0209A250
	bl FUN_0202e1c0
	arm_func_end FUN_0205ee28
_0205EE5C:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _0205EEB4
	ldr r0, [r4, #0xc]
	mov r6, #0
	cmp r0, #0
	ble _0205EEA0
	mov r5, #0x114
_0205EE7C:
	ldr r0, [r4, #0x18]
	mla r0, r6, r5, r0
	ldr r1, [r0]
	ldr r1, [r1, #0x20]
	blx r1
	ldr r0, [r4, #0xc]
	add r6, r6, #1
	cmp r6, r0
	blt _0205EE7C
_0205EEA0:
	ldr r0, [r4, #0x18]
	ldr r3, _0205EF28 ; =FUN_020525e8
	mov r1, #0x114
	mov r2, #8
	bl FUN_0201e394
_0205EEB4:
	ldr r0, [r4, #0x10]
	cmp r0, #0
	beq _0205EF04
	ldr r0, [r4, #0xc]
	mov r6, #0
	cmp r0, #0
	ble _0205EEF0
	mov r5, #0x1bc
_0205EED4:
	ldr r0, [r4, #0x10]
	mla r0, r6, r5, r0
	bl FUN_020F9D80
	ldr r0, [r4, #0xc]
	add r6, r6, #1
	cmp r6, r0
	blt _0205EED4
_0205EEF0:
	ldr r0, [r4, #0x10]
	ldr r3, _0205EF2C ; =FUN_020527d4
	mov r1, #0x1bc
	mov r2, #8
	bl FUN_0201e394
_0205EF04:
	ldr r1, [r4, #0x1c]
	cmp r1, #0
	beq _0205EF18
	ldr r0, _0205EF24 ; =0x0209A250
	bl FUN_0202e1c0
_0205EF18:
	mov r0, r4
	bl FUN_0205e5d8
	pop {r4, r5, r6, pc}
	.align 2, 0_0205EF24: .word 0x0209A250
_0205EF28: .word FUN_020525e8
_0205EF2C: .word FUN_020527d4

	arm_func_start FUN_0205ef30
FUN_0205ef30: ; 0x0205EF30
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, #0
	mov r7, r1
	mov r1, r4
	mov r8, r0
	bl FUN_0205e604
	movs r5, r0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, _0205F028 ; =0x02099F18
	mov r6, #0
	ldr r0, [r0]
	mvn sb, #0
	ldrb r0, [r0, #4]
	cmp r0, #0
	movne r7, r4
	mov r4, #3
	b _0205F018
	arm_func_end FUN_0205ef30
_0205EF74:
	ldr r1, [r5, #8]
	tst r1, #1
	beq _0205F010
	ldrb r0, [r5, #0xc]
	cmp r0, #1
	beq _0205EFA0
	cmp r0, #2
	beq _0205EFB0
	cmp r0, #3
	beq _0205EFE0
	b _0205F010
_0205EFA0:
	mov r0, r8
	mov r1, r5
	bl FUN_0205e890
	b _0205F010
_0205EFB0:
	tst r1, #2
	bne _0205F010
	mov r0, r8
	mov r1, r5
	bl FUN_0205ea98
	cmp r0, #0
	strbne r4, [r5, #0xc]
	bne _0205F010
	mov r0, r8
	mov r1, r5
	bl FUN_0205e804
	b _0205F010
_0205EFE0:
	tst r1, #0x100
	beq _0205F010
	ldr r0, [r5, #0x18]
	mov r1, r7
	ldr r2, [r0]
	ldr r2, [r2, #0x24]
	blx r2
	ldr r1, [r5, #0x18]
	ldr r0, [r5, #0x14]
	ldr r1, [r1, #0x24]
	mov r2, sb
	bl FUN_020FA340
_0205F010:
	add r6, r6, #1
	add r5, r5, #0x20
_0205F018:
	ldr r0, [r8, #0xc]
	cmp r6, r0
	blt _0205EF74
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205F028: .word 0x02099F18

	arm_func_start FUN_0205f02c
FUN_0205f02c: ; 0x0205F02C
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	strbne r4, [r0, #0x10]
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205f02c

	arm_func_start FUN_0205f05c
FUN_0205f05c: ; 0x0205F05C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, #0
	mov r7, r1
	mov r1, r5
	mov r8, r0
	bl FUN_0205e604
	movs r6, r0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r8, #0xc]
	mov r4, r5
	cmp r0, #0
	ble _0205F0F4
	ldr sb, _0205F12C ; =0x00000101
	arm_func_end FUN_0205f05c
_0205F090:
	ldr r0, [r6, #8]
	and r0, r0, sb
	cmp r0, sb
	ldrbeq r0, [r6, #0xc]
	cmpeq r0, #3
	bne _0205F0E0
	cmp r7, #0
	beq _0205F0BC
	ldrb r0, [r6, #0xd]
	cmp r0, #0
	beq _0205F0E0
_0205F0BC:
	cmp r7, #0
	bne _0205F0D0
	ldrb r0, [r6, #0xd]
	cmp r0, #0
	bne _0205F0E0
_0205F0D0:
	ldr r0, [r6, #0x14]
	bl FUN_020FA300
	cmp r0, #0
	addne r5, r5, #1
_0205F0E0:
	ldr r0, [r8, #0xc]
	add r4, r4, #1
	cmp r4, r0
	add r6, r6, #0x20
	blt _0205F090
_0205F0F4:
	cmp r5, #0
	pople {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r3, #3
	add r1, sp, #0
	mov r0, #0x10
	mov r2, #1
	str r3, [sp]
	bl FUN_020672b4
	mov r1, #0
	mov r2, r1
	mov r0, #0x15
	bl FUN_020672b4
	bl FUN_02064390
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205F12C: .word 0x00000101

	arm_func_start FUN_0205f130
FUN_0205f130: ; 0x0205F130
	ldr ip, _0205F13C ; =FUN_0205f05c
	mov r1, #0
	bx ip
	.align 2, 0_0205F13C: .word FUN_0205f05c
	arm_func_end FUN_0205f130

	arm_func_start FUN_0205f140
FUN_0205f140: ; 0x0205F140
	ldr ip, _0205F14C ; =FUN_0205f05c
	mov r1, #1
	bx ip
	.align 2, 0_0205F14C: .word FUN_0205f05c
	arm_func_end FUN_0205f140

	arm_func_start FUN_0205f150
FUN_0205f150: ; 0x0205F150
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x9c
	ldr lr, _0205F1C4 ; =0x02090BD4
	add r4, sp, #0
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov ip, r4
	ldm lr!, {r0, r1, r2, r3}
	stm r4!, {r0, r1, r2, r3}
	ldm lr, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add r4, sp, #0x1c
	ldr r2, [ip, r6, lsl #2]
	ldr r1, _0205F1C8 ; =0x02090D98
	mov r0, r4
	bl FUN_02015184
	cmp r5, #0
	mov r1, r4
	mov r0, #0
	beq _0205F1AC
	bl FUN_02085f50
	b _0205F1B0
	arm_func_end FUN_0205f150
_0205F1AC:
	bl FUN_02085e4c
_0205F1B0:
	add r1, r7, r6, lsl #2
	str r0, [r1, #0x20]
	mov r0, #1
	add sp, sp, #0x9c
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0205F1C4: .word 0x02090BD4
_0205F1C8: .word 0x02090D98

	arm_func_start FUN_0205f1cc
FUN_0205f1cc: ; 0x0205F1CC
	push {r3, lr}
	add r0, r0, r1, lsl #2
	ldr r0, [r0, #0x20]
	bl FUN_02086080
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_0205f1cc

	arm_func_start FUN_0205f1ec
FUN_0205f1ec: ; 0x0205F1EC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	add r0, r5, r4, lsl #2
	ldr r0, [r0, #0x20]
	bl FUN_02086040
	add r0, r5, r4, lsl #2
	mvn r1, #0
	str r1, [r0, #0x20]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205f1ec

	arm_func_start FUN_0205f214
FUN_0205f214: ; 0x0205F214
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	mov r6, r0
	mov r5, r2
	mov r4, r3
	bl FUN_0205e7bc
	movs r1, r0
	addmi sp, sp, #0xc
	mvnmi r0, #0
	popmi {r3, r4, r5, r6, pc}
	ldr r2, [sp, #0x20]
	ldr r0, [sp, #0x24]
	str r2, [sp]
	ldr ip, [sp, #0x28]
	str r0, [sp, #4]
	mov r0, r6
	mov r2, r5
	mov r3, r4
	str ip, [sp, #8]
	bl FUN_0205f2b8
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0205f214

	arm_func_start FUN_0205f26c
FUN_0205f26c: ; 0x0205F26C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_0205e7bc
	movs r1, r0
	addmi sp, sp, #8
	mvnmi r0, #0
	popmi {r3, r4, r5, r6, r7, pc}
	ldrb ip, [sp, #0x20]
	mov r0, r7
	mov r2, r6
	mov r3, r5
	stm sp, {r4, ip}
	bl FUN_0205f3d0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0205f26c

	arm_func_start FUN_0205f2b8
FUN_0205f2b8: ; 0x0205F2B8
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x80
	mov r6, r2
	mov r8, r0
	mov r7, r1
	mov r5, r3
	cmp r6, #4
	bne _0205F2EC
	ldr r1, _0205F3C4 ; =0x02090DA4
	add r0, sp, #0
	mov r2, r5
	bl FUN_02015184
	b _0205F2F0
	arm_func_end FUN_0205f2b8
_0205F2EC:
	bl FUN_02004160
_0205F2F0:
	mov r0, r8
	mov r1, r7
	bl FUN_0205e604
	mov r4, r0
	add r1, r8, r6, lsl #2
	ldr r0, [r4, #0x14]
	ldr r1, [r1, #0x20]
	ldr r3, [sp, #0x9c]
	add r2, sp, #0
	bl FUN_020F9E9C
	cmp r0, #0
	bne _0205F338
	mov r0, r8
	mov r1, r4
	bl FUN_0205e804
	add sp, sp, #0x80
	mvn r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_0205F338:
	ldr r1, _0205F3C8 ; =0x0208F6F0
	ldr r0, [r4, #0x14]
	ldr r1, [r1, #0x20]
	mov r2, r1
	mov r3, r1
	bl FUN_020FA504
	ldr r1, _0205F3CC ; =0x00001001
	ldr r0, [sp, #0xa0]
	str r1, [r4, #8]
	cmp r0, #0
	ldreq r0, [r4, #8]
	orreq r0, r0, #2
	streq r0, [r4, #8]
	ldr r0, [sp, #0x9c]
	cmp r0, #0
	movne r0, #1
	strbne r0, [r4, #0xc]
	bne _0205F390
	ldrb r0, [r4, #0xc]
	cmp r0, #1
	movne r0, #2
	strbne r0, [r4, #0xc]
_0205F390:
	mov r0, r8
	mov r1, r7
	bl FUN_0205e5f4
	ldr r1, [sp, #0x98]
	str r0, [r4]
	cmp r6, #4
	strb r1, [r4, #0xe]
	strheq r5, [r4, #4]
	mvnne r0, #0
	strhne r0, [r4, #4]
	ldr r0, [r4]
	add sp, sp, #0x80
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0205F3C4: .word 0x02090DA4
_0205F3C8: .word 0x0208F6F0
_0205F3CC: .word 0x00001001

	arm_func_start FUN_0205f3d0
FUN_0205f3d0: ; 0x0205F3D0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x18
	mov r4, #0
	mov sb, r0
	mov r8, r1
	mov r7, r2
	mov r6, r3
	str r4, [sp, #0xc]
	str r4, [sp, #8]
	bl FUN_0205e604
	mov r4, r0
	mov r0, sb
	ldr ip, [r0]
	mov r1, r7
	ldr ip, [ip, #8]
	add r2, sp, #0x14
	add r3, sp, #0x10
	blx ip
	cmp r0, #0
	beq _0205F484
	ldr r1, [sp, #0x14]
	mov r0, #0xc
	mul r0, r1, r0
	ldr r2, [sb, #8]
	ldr r1, [sp, #0x10]
	ldr r0, [r2, r0]
	add r2, sp, #0xc
	add r3, sp, #8
	bl FUN_020F34F0
	cmp r0, #0
	beq _0205F4AC
	mov r0, sb
	ldr r2, [r0]
	ldr r1, [sp, #0x14]
	ldr r2, [r2, #4]
	blx r2
	ldr r2, [sp, #8]
	mov r1, #1
	str r2, [sp]
	str r1, [sp, #4]
	mov r1, r0
	ldrb r2, [sp, #0x38]
	ldr r0, [r4, #0x14]
	ldr r3, [sp, #0xc]
	b _0205F4A4
	arm_func_end FUN_0205f3d0
_0205F484:
	ldr r1, [sp, #8]
	mov r0, #1
	str r1, [sp]
	str r0, [sp, #4]
	ldrb r2, [sp, #0x38]
	ldr r0, [r4, #0x14]
	ldr r3, [sp, #0xc]
	mov r1, r7
_0205F4A4:
	bl FUN_020F9E24
	mov r5, r0
_0205F4AC:
	cmp r5, #0
	bne _0205F4CC
	mov r0, sb
	mov r1, r4
	bl FUN_0205e804
	add sp, sp, #0x18
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0205F4CC:
	ldr r1, _0205F564 ; =0x0208F6F0
	ldr r0, [r4, #0x14]
	ldr r1, [r1, #0x20]
	mov r2, r1
	mov r3, r1
	bl FUN_020FA504
	ldrb r0, [sp, #0x3c]
	ldr r1, _0205F568 ; =0x00001001
	str r1, [r4, #8]
	cmp r0, #0
	ldreq r0, [r4, #8]
	orreq r0, r0, #2
	streq r0, [r4, #8]
	ldrb r0, [sp, #0x38]
	cmp r0, #0
	movne r0, #1
	strbne r0, [r4, #0xc]
	bne _0205F524
	ldrb r0, [r4, #0xc]
	cmp r0, #1
	movne r0, #2
	strbne r0, [r4, #0xc]
_0205F524:
	mov r0, sb
	mov r1, r8
	bl FUN_0205e5f4
	str r0, [r4]
	add r2, sp, #0x10
	mov r0, sb
	mov r1, r7
	strb r6, [r4, #0xe]
	bl FUN_0205ec38
	cmp r0, #0
	ldrne r0, [sp, #0x10]
	mvneq r0, #0
	strh r0, [r4, #4]
	ldr r0, [r4]
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205F564: .word 0x0208F6F0
_0205F568: .word 0x00001001

	arm_func_start FUN_0205f56c
FUN_0205f56c: ; 0x0205F56C
	push {r3, r4, r5, lr}
	mov r4, #0
	add r2, sp, #0
	mov r5, r0
	str r4, [sp]
	bl FUN_0205e754
	cmp r0, #0
	movlt r0, r4
	poplt {r3, r4, r5, pc}
	ldr r1, [sp]
	cmp r1, #0
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	ldr r0, [r1, #8]
	bic r0, r0, #2
	str r0, [r1, #8]
	ldr r1, [sp]
	ldrb r0, [r1, #0xc]
	cmp r0, #3
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_0205e890
	cmp r0, #0
	movne r0, r4
	popne {r3, r4, r5, pc}
	ldr r0, [sp]
	ldrb r0, [r0, #0xc]
	cmp r0, #2
	moveq r4, #1
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205f56c

	arm_func_start FUN_0205f5ec
FUN_0205f5ec: ; 0x0205F5EC
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	add r2, sp, #0
	str r3, [sp]
	mov r4, r0
	bl FUN_0205e754
	ldr r1, [sp]
	mov r0, r4
	bl FUN_0205e804
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205f5ec

	arm_func_start FUN_0205f61c
FUN_0205f61c: ; 0x0205F61C
	push {r4, r5, r6, lr}
	mov r5, #0
	mov r6, r0
	mov r1, r5
	bl FUN_0205e604
	ldr r1, [r6, #0xc]
	mov r4, r0
	cmp r1, #0
	pople {r4, r5, r6, pc}
	arm_func_end FUN_0205f61c
_0205F640:
	mov r0, r6
	mov r1, r4
	bl FUN_0205e804
	ldr r0, [r6, #0xc]
	add r5, r5, #1
	cmp r5, r0
	add r4, r4, #0x20
	blt _0205F640
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205f664
FUN_0205f664: ; 0x0205F664
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0xc
	mov r4, #0
	mov r6, r2
	add r2, sp, #4
	str r4, [sp, #4]
	mov r7, r0
	mov r5, r3
	bl FUN_0205e754
	ldr r2, [sp, #4]
	cmp r2, #0
	beq _0205F6A8
	ldr r1, [r2, #8]
	tst r1, #1
	beq _0205F6A8
	cmp r0, #0
	bge _0205F6B4
	arm_func_end FUN_0205f664
_0205F6A8:
	add sp, sp, #0xc
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, pc}
_0205F6B4:
	ldr r0, _0205F78C ; =0x02099EE4
	ldr r1, [r2, #0x1c]
	ldr r0, [r0]
	bl FUN_020FD350
	ldr r0, [sp, #4]
	mov r8, #1
	str r4, [r0, #0x1c]
	ldrsb r0, [r6, #1]
	cmp r0, #0x6f
	subne r8, r4, #1
	cmp r8, #0
	bge _0205F6E8
	bl FUN_02004160
_0205F6E8:
	ldr r0, _0205F78C ; =0x02099EE4
	str r5, [sp]
	add r1, r7, r8, lsl #2
	ldr r0, [r0]
	ldr r1, [r1, #0x20]
	mov r2, r6
	mov r3, #0xf
	bl FUN_020FCB70
	ldr r1, [sp, #4]
	str r0, [r1, #0x1c]
	ldr r0, [sp, #4]
	ldr r0, [r0, #0x1c]
	cmp r0, #0
	moveq r4, #1
	cmp r4, #0
	bne _0205F744
	cmp r5, #0
	ldrne r0, [sp, #4]
	movne r1, #1
	strbne r1, [r0, #0xc]
	ldreq r0, [sp, #4]
	moveq r1, #2
	strbeq r1, [r0, #0xc]
_0205F744:
	ldr r0, [sp, #4]
	mvn r1, #0
	strh r1, [r0, #6]
	cmp r4, #0
	bne _0205F778
	add r2, sp, #8
	mov r0, r7
	mov r1, r6
	bl FUN_0205ec38
	cmp r0, #0
	ldrne r1, [sp, #8]
	ldrne r0, [sp, #4]
	strhne r1, [r0, #6]
_0205F778:
	mov r0, #1
	cmp r4, #0
	movne r0, #0
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0205F78C: .word 0x02099EE4

	arm_func_start FUN_0205f790
FUN_0205f790: ; 0x0205F790
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x24
	mov r4, #0
	mov r6, r2
	add r2, sp, #0x10
	str r4, [sp, #0x10]
	mov r7, r0
	mov r5, r3
	bl FUN_0205e754
	ldr r2, [sp, #0x10]
	cmp r2, #0
	beq _0205F7D4
	ldr r1, [r2, #8]
	tst r1, #1
	beq _0205F7D4
	cmp r0, #0
	bge _0205F7E0
	arm_func_end FUN_0205f790
_0205F7D4:
	add sp, sp, #0x24
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, pc}
_0205F7E0:
	ldr r8, _0205F92C ; =0x02099EE4
	ldr r1, [r2, #0x1c]
	ldr r0, [r8]
	bl FUN_020FD350
	ldr r1, [sp, #0x10]
	mov r0, r7
	str r4, [r1, #0x1c]
	ldr sb, [r0]
	add r2, sp, #0x20
	ldr sb, [sb, #8]
	add r3, sp, #0x1c
	mov r1, r6
	blx sb
	cmp r0, #0
	beq _0205F880
	ldr r1, [sp, #0x20]
	mov r0, #0xc
	mul r0, r1, r0
	ldr r2, [r7, #8]
	ldr r1, [sp, #0x1c]
	ldr r0, [r2, r0]
	add r2, sp, #0x18
	add r3, sp, #0x14
	mov sb, #1
	bl FUN_020F34F0
	cmp r0, #0
	beq _0205F8B0
	mov r0, r7
	ldr r2, [r0]
	ldr r1, [sp, #0x20]
	ldr r2, [r2, #4]
	blx r2
	ldr r1, [sp, #0x18]
	str r1, [sp]
	ldr r2, [sp, #0x14]
	mov r1, r0
	stmib sp, {r2, sb}
	str sb, [sp, #0xc]
	ldr r0, [r8]
	b _0205F89C
_0205F880:
	str r4, [sp]
	str r4, [sp, #4]
	str r4, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	ldr r0, [r8]
	mov r1, r6
_0205F89C:
	mov r3, r5
	mov r2, #0xf
	bl FUN_020FCD08
	ldr r1, [sp, #0x10]
	str r0, [r1, #0x1c]
_0205F8B0:
	ldr r0, [sp, #0x10]
	mov r1, #1
	ldr r0, [r0, #0x1c]
	cmp r0, #0
	moveq r4, r1
	cmp r4, #0
	bne _0205F8E4
	cmp r5, #0
	ldrne r0, [sp, #0x10]
	strbne r1, [r0, #0xc]
	ldreq r0, [sp, #0x10]
	moveq r1, #2
	strbeq r1, [r0, #0xc]
_0205F8E4:
	ldr r0, [sp, #0x10]
	mvn r1, #0
	strh r1, [r0, #6]
	cmp r4, #0
	bne _0205F918
	add r2, sp, #0x1c
	mov r0, r7
	mov r1, r6
	bl FUN_0205ec38
	cmp r0, #0
	ldrne r1, [sp, #0x1c]
	ldrne r0, [sp, #0x10]
	strhne r1, [r0, #6]
_0205F918:
	mov r0, #1
	cmp r4, #0
	movne r0, #0
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0205F92C: .word 0x02099EE4

	arm_func_start FUN_0205f930
FUN_0205f930: ; 0x0205F930
	push {r4, r5, r6, lr}
	mov r5, #0
	mov r6, r0
	mov r1, r5
	bl FUN_0205e604
	ldr r1, [r6, #0xc]
	mov r4, r0
	cmp r1, #0
	ble _0205F988
	arm_func_end FUN_0205f930
_0205F954:
	ldr r0, [r4, #8]
	tst r0, #1
	beq _0205F974
	mov r0, r6
	mov r1, r4
	bl FUN_0205e890
	cmp r0, #0
	popne {r4, r5, r6, pc}
_0205F974:
	ldr r0, [r6, #0xc]
	add r5, r5, #1
	cmp r5, r0
	add r4, r4, #0x20
	blt _0205F954
_0205F988:
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0205f990
FUN_0205f990: ; 0x0205F990
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	add r2, sp, #0
	str r3, [sp]
	mov r4, r0
	bl FUN_0205e754
	ldr r1, [sp]
	mov r0, r4
	bl FUN_0205e890
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205f990

	arm_func_start FUN_0205f9c0
FUN_0205f9c0: ; 0x0205F9C0
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205e754
	ldr r1, [sp]
	cmp r1, #0
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	ldr r0, [r1, #8]
	tst r0, #1
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	cmp r4, #0
	orrne r0, r0, #0x100
	strne r0, [r1, #8]
	biceq r0, r0, #0x100
	streq r0, [r1, #8]
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205f9c0

	arm_func_start FUN_0205fa18
FUN_0205fa18: ; 0x0205FA18
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, #0
	add r2, sp, #0
	str r4, [sp]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r4, [r0, #0x14]
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205fa18

	arm_func_start FUN_0205fa48
FUN_0205fa48: ; 0x0205FA48
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r4, #0
	mov r6, r2
	add r2, sp, #0
	str r4, [sp]
	mov r5, r3
	bl FUN_0205e754
	ldr r1, [sp]
	cmp r1, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, pc}
	ldrb r0, [r1, #0x10]
	cmp r0, #4
	subeq r0, r4, #1
	muleq r0, r5, r0
	moveq r5, r0
	ldr r0, [r1, #0x14]
	cmp r0, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, pc}
	ldr r3, [sp, #0x18]
	mov r1, r6
	mov r2, r5
	bl FUN_020FA4BC
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_0205fa48

	arm_func_start FUN_0205fab4
FUN_0205fab4: ; 0x0205FAB4
	push {r3, r4, r5, lr}
	mov ip, #0
	mov r5, r2
	add r2, sp, #0
	str ip, [sp]
	mov r4, r3
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r0, [r0, #0x14]
	cmpne r0, #0
	popeq {r3, r4, r5, pc}
	ldr r3, [sp, #0x10]
	mov r1, r5
	mov r2, r4
	bl FUN_020FA4E0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205fab4

	arm_func_start FUN_0205faf8
FUN_0205faf8: ; 0x0205FAF8
	push {r3, r4, r5, lr}
	mov ip, #0
	mov r5, r2
	add r2, sp, #0
	str ip, [sp]
	mov r4, r3
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r0, [r0, #0x14]
	cmpne r0, #0
	popeq {r3, r4, r5, pc}
	ldr r3, [sp, #0x10]
	mov r1, r5
	mov r2, r4
	bl FUN_020FA504
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205faf8

	arm_func_start FUN_0205fb3c
FUN_0205fb3c: ; 0x0205FB3C
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r0, [r0, #0x14]
	cmpne r0, #0
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	mov r1, r4
	bl FUN_020FA528
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205fb3c

	arm_func_start FUN_0205fb80
FUN_0205fb80: ; 0x0205FB80
	push {r3, r4, lr}
	sub sp, sp, #0x1c
	mov r3, #0
	add ip, sp, #0x10
	mov r4, r0
	mov r0, r1
	mov r1, r2
	add r2, sp, #0
	str r3, [sp]
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r1, [r0, #0x14]
	cmpne r1, #0
	beq _0205FBE8
	add r0, sp, #4
	bl FUN_020FA538
	ldr r2, [sp, #4]
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	str r0, [sp, #0x18]
	arm_func_end FUN_0205fb80
_0205FBE8:
	add r0, sp, #0x10
	ldm r0, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add sp, sp, #0x1c
	pop {r3, r4, pc}

	arm_func_start FUN_0205fbfc
FUN_0205fbfc: ; 0x0205FBFC
	push {r3, r4, lr}
	sub sp, sp, #0x1c
	mov r3, #0
	add ip, sp, #0x10
	mov r4, r0
	mov r0, r1
	mov r1, r2
	add r2, sp, #0
	str r3, [sp]
	str r3, [ip]
	str r3, [ip, #4]
	str r3, [ip, #8]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r1, [r0, #0x14]
	cmpne r1, #0
	beq _0205FC64
	add r0, sp, #4
	bl FUN_020FA54C
	ldr r2, [sp, #4]
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	str r2, [sp, #0x10]
	str r1, [sp, #0x14]
	str r0, [sp, #0x18]
	arm_func_end FUN_0205fbfc
_0205FC64:
	add r0, sp, #0x10
	ldm r0, {r0, r1, r2}
	stm r4, {r0, r1, r2}
	add sp, sp, #0x1c
	pop {r3, r4, pc}

	arm_func_start FUN_0205fc78
FUN_0205fc78: ; 0x0205FC78
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r4, #0
	mov r6, r2
	add r2, sp, #0
	str r4, [sp]
	mov r5, r3
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	beq _0205FD10
	ldr r0, [r0, #0x18]
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, r4
	popeq {r3, r4, r5, r6, pc}
	mov r1, r6
	bl FUN_020FAF80
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, r4
	popeq {r3, r4, r5, r6, pc}
	cmp r5, #0
	bge _0205FCF4
	ldr r0, [sp]
	sub r1, r4, #1
	ldr r0, [r0, #0x18]
	ldr r2, [r0]
	ldr r2, [r2, #0x24]
	blx r2
	mov r5, r4
	arm_func_end FUN_0205fc78
_0205FCF4:
	ldr r0, [sp]
	mov r1, r5
	ldr r0, [r0, #0x18]
	bl FUN_020FB040
	add sp, sp, #4
	mov r0, #1
	pop {r3, r4, r5, r6, pc}
_0205FD10:
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}

	arm_func_start FUN_0205fd1c
FUN_0205fd1c: ; 0x0205FD1C
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, #0
	add r2, sp, #0
	str r4, [sp]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	addeq sp, sp, #4
	moveq r0, r4
	popeq {r3, r4, pc}
	ldr r0, [r0, #0x18]
	cmp r0, #0
	beq _0205FD5C
	bl FUN_020FB02C
	mov r4, r0
	arm_func_end FUN_0205fd1c
_0205FD5C:
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, pc}

	arm_func_start FUN_0205fd68
FUN_0205fd68: ; 0x0205FD68
	push {r3, r4, r5, lr}
	mov ip, #0
	mov r5, r2
	add r2, sp, #0
	str ip, [sp]
	mov r4, r3
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r0, [r0, #0x14]
	cmpne r0, #0
	popeq {r3, r4, r5, pc}
	ldr r3, [sp, #0x10]
	mov r1, r5
	mov r2, r4
	bl FUN_020FAA4C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205fd68

	arm_func_start FUN_0205fdac
FUN_0205fdac: ; 0x0205FDAC
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r0, [r0, #0x14]
	cmpne r0, #0
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	mov r1, r4
	bl FUN_020FAA7C
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205fdac

	arm_func_start FUN_0205fdf0
FUN_0205fdf0: ; 0x0205FDF0
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	ldrne r0, [r0, #0x14]
	cmpne r0, #0
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	mov r1, r4
	bl FUN_020FAA8C
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205fdf0

	arm_func_start FUN_0205fe34
FUN_0205fe34: ; 0x0205FE34
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205e754
	ldr r0, [sp]
	cmp r0, #0
	strbne r4, [r0, #0xd]
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205fe34

	arm_func_start FUN_0205fe64
FUN_0205fe64: ; 0x0205FE64
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r3, #0
	mov r4, r2
	add r2, sp, #0
	str r3, [sp]
	bl FUN_0205e754
	ldr r1, [sp]
	cmp r1, #0
	ldrne r0, [r1, #0x14]
	cmpne r0, #0
	addeq sp, sp, #4
	popeq {r3, r4, pc}
	ldr r0, [r1, #8]
	cmp r4, #0
	orrne r0, r0, #0x1000
	strne r0, [r1, #8]
	biceq r0, r0, #0x1000
	streq r0, [r1, #8]
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_0205fe64

	arm_func_start FUN_0205feb8
FUN_0205feb8: ; 0x0205FEB8
	push {r3, r4, r5, lr}
	mov r4, #0x600
	ldr r0, [r0, #0x1c]
	mov r5, r1
	mov r2, r4
	bl _memcpy
	mov r0, r5
	mov r1, r4
	bl FUN_020026d0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205feb8

	arm_func_start FUN_0205fee0
FUN_0205fee0: ; 0x0205FEE0
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, r1
	mov r4, #0x600
	ldr r1, [r5, #0x1c]
	mov r2, r4
	bl _memcpy
	ldr r0, [r5, #0x1c]
	mov r1, r4
	bl FUN_020026d0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205fee0

	arm_func_start FUN_0205ff0c
FUN_0205ff0c: ; 0x0205FF0C
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0x600
	ldr r0, [r5, #0x1c]
	mov r2, r4
	mov r1, #0
	bl MemWrite
	ldr r0, [r5, #0x1c]
	mov r1, r4
	bl FUN_020026d0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0205ff0c

	arm_func_start FUN_0205ff38
FUN_0205ff38: ; 0x0205FF38
	push {r4, lr}
	ldr r1, _0205FF5C ; =0x02090BF8
	mov r4, r0
	str r1, [r4]
	bl FUN_0205ee28
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205FF5C: .word 0x02090BF8
	arm_func_end FUN_0205ff38

	arm_func_start LAB_0205ff60
LAB_0205ff60: ; 0x0205FF60
	push {r4, lr}
	ldr r1, _0205FF7C ; =0x02090BF8
	mov r4, r0
	str r1, [r4]
	bl FUN_0205ee28
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0205FF7C: .word 0x02090BF8
	arm_func_end LAB_0205ff60

	arm_func_start FUN_0205ff80
FUN_0205ff80: ; 0x0205FF80
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x4c
	bl FUN_02063400
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0205ff80

	arm_func_start FUN_0205ff98
FUN_0205ff98: ; 0x0205FF98
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x4c
	bl FUN_02063404
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0205ff98

	arm_func_start FUN_0205ffb0
FUN_0205ffb0: ; 0x0205FFB0
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x20c
	mov r5, r1
	cmp r0, #0
	sub r4, r2, #0xc
	ldr r6, _020603B8 ; =0x5D588B65
	ldr r7, _020603BC ; =0x00269EC3
	bne _020601A8
	lsl r0, r4, #0x10
	lsr r0, r0, #0x14
	lsl r1, r0, #0x10
	ldr r8, _020603C0 ; =0xB5BDCF5A
	lsrs r2, r1, #0x10
	lsrne r1, r8, #0x10
	mulne r1, r2, r1
	lsrne r1, r1, #0x10
	lsreq ip, r8, #0x10
	lslne r1, r1, #0x10
	lsrne ip, r1, #0x10
	add sb, r5, #0x20
	lsl r1, r0, #0x10
	add r0, sb, ip
	lsr sb, r1, #0x10
	add r3, r5, r4
	add r2, sp, #0
	mov r1, #0
	arm_func_end FUN_0205ffb0
_02060018:
	mla r8, r6, r8, r7
	lsr ip, r8, #0x10
	cmp sb, #0
	mulne lr, ip, sb
	lsrne ip, lr, #0x10
	lsl ip, ip, #0x10
	lsr ip, ip, #0x10
	add ip, ip, #2
	ldrb lr, [r0, ip]!
	ldrb ip, [r3], #1
	add r1, r1, #1
	cmp r1, #0xc
	strb ip, [r0]
	strb lr, [r2], #1
	blo _02060018
	ldr r8, [sp]
	ldr r0, _020603B8 ; =0x5D588B65
	ldr r1, _020603BC ; =0x00269EC3
	mov r7, #0
	add r2, sp, #0xc
_02060068:
	mla r8, r0, r8, r1
	lsl r3, r7, #1
	lsr r6, r8, #0x10
	add r7, r7, #1
	strh r6, [r2, r3]
	cmp r7, #0x100
	ldr sb, _020603BC ; =0x00269EC3
	blt _02060068
	cmp r4, #0
	ldr r8, _020603B8 ; =0x5D588B65
	mov r7, #0
	bls _020600FC
	add r6, sp, #0xc
_0206009C:
	lsr r1, r7, #0x1f
	rsb r0, r1, r7, lsl #24
	add r0, r1, r0, ror #24
	lsl r0, r0, #1
	ldrh r0, [r6, r0]
	mov r1, r4
	mul r0, r4, r0
	add r0, r7, r0, lsr #16
	bl FUN_0201fbc8
	cmp r7, #4
	blt _020600D0
	cmp r7, #0x13
	ble _020600F0
_020600D0:
	cmp r1, #4
	blo _020600E0
	cmp r1, #0x13
	bls _020600F0
_020600E0:
	ldrb r2, [r5, r7]
	ldrb r0, [r5, r1]
	strb r0, [r5, r7]
	strb r2, [r5, r1]
_020600F0:
	add r7, r7, #1
	cmp r7, r4
	blo _0206009C
_020600FC:
	cmp r4, #0
	ldr r3, [sp, #4]
	mov r2, #0
	bls _02060148
_0206010C:
	mla r3, r8, r3, sb
	lsr r0, r3, #0x10
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	cmp r2, #4
	lsl r0, r0, #0x10
	blt _02060130
	cmp r2, #0x13
	ble _0206013C
_02060130:
	ldrb r1, [r5, r2]
	eor r0, r1, r0, lsr #16
	strb r0, [r5, r2]
_0206013C:
	add r2, r2, #1
	cmp r2, r4
	blo _0206010C
_02060148:
	cmp r4, #0
	ldr r3, [sp, #8]
	addls sp, sp, #0x20c
	mov r1, #0
	popls {r4, r5, r6, r7, r8, sb, pc}
_0206015C:
	mla r3, r8, r3, sb
	lsr r0, r3, #0x10
	lsl r0, r0, #3
	lsr r0, r0, #0x10
	lsl r0, r0, #0x10
	cmp r1, #4
	lsr r2, r0, #0x10
	blt _02060184
	cmp r1, #0x13
	ble _02060194
_02060184:
	ldrb r0, [r5, r1]
	orr r0, r0, r0, lsl #8
	asr r0, r0, r2
	strb r0, [r5, r1]
_02060194:
	add r1, r1, #1
	cmp r1, r4
	blo _0206015C
	add sp, sp, #0x20c
	pop {r4, r5, r6, r7, r8, sb, pc}
_020601A8:
	bl FUN_020034b0
	mov r1, #0
	add r8, sp, #0
_020601B4:
	mla r2, r0, r6, r7
	mla r0, r2, r6, r7
	lsr r2, r2, #0x10
	lsr r3, r0, #0x10
	lsl r2, r2, #0x10
	lsl r3, r3, #0x10
	lsr sb, r2, #0x10
	lsr r2, r3, #0x10
	orr r2, r2, sb, lsl #16
	str r2, [r8, r1, lsl #2]
	add r1, r1, #1
	cmp r1, #3
	ldr r3, _020603BC ; =0x00269EC3
	blt _020601B4
	cmp r4, #0
	ldr r1, [sp, #8]
	ldr r2, _020603B8 ; =0x5D588B65
	mov r0, #0
	bls _02060248
_02060200:
	mla r1, r2, r1, r3
	lsr r6, r1, #0x10
	lsl r6, r6, #3
	lsr r6, r6, #0x10
	lsl r6, r6, #0x10
	cmp r0, #4
	lsr r6, r6, #0x10
	blt _02060228
	cmp r0, #0x13
	ble _0206023C
_02060228:
	ldrb r7, [r5, r0]
	rsb r6, r6, #8
	orr r7, r7, r7, lsl #8
	asr r6, r7, r6
	strb r6, [r5, r0]
_0206023C:
	add r0, r0, #1
	cmp r0, r4
	blo _02060200
_02060248:
	cmp r4, #0
	ldr r7, [sp, #4]
	mov r6, #0
	bls _02060294
_02060258:
	mla r7, r2, r7, r3
	lsr r0, r7, #0x10
	lsl r0, r0, #8
	lsr r0, r0, #0x10
	cmp r6, #4
	lsl r0, r0, #0x10
	blt _0206027C
	cmp r6, #0x13
	ble _02060288
_0206027C:
	ldrb r1, [r5, r6]
	eor r0, r1, r0, lsr #16
	strb r0, [r5, r6]
_02060288:
	add r6, r6, #1
	cmp r6, r4
	blo _02060258
_02060294:
	ldr sb, [sp]
	mov r8, #0
	add r0, sp, #0xc
_020602A0:
	mla sb, r2, sb, r3
	lsl r1, r8, #1
	lsr r6, sb, #0x10
	add r8, r8, #1
	strh r6, [r0, r1]
	cmp r8, #0x100
	ldr r7, _020603BC ; =0x00269EC3
	blt _020602A0
	subs sb, r4, #1
	ldr r6, _020603B8 ; =0x5D588B65
	bmi _0206032C
	add r8, sp, #0xc
_020602D0:
	lsr r1, sb, #0x1f
	rsb r0, r1, sb, lsl #24
	add r0, r1, r0, ror #24
	lsl r0, r0, #1
	ldrh r0, [r8, r0]
	mov r1, r4
	mul r0, r4, r0
	add r0, sb, r0, lsr #16
	bl FUN_0201fbc8
	cmp sb, #4
	blt _02060304
	cmp sb, #0x13
	ble _02060324
_02060304:
	cmp r1, #4
	blo _02060314
	cmp r1, #0x13
	bls _02060324
_02060314:
	ldrb r2, [r5, sb]
	ldrb r0, [r5, r1]
	strb r0, [r5, sb]
	strb r2, [r5, r1]
_02060324:
	subs sb, sb, #1
	bpl _020602D0
_0206032C:
	lsl r0, r4, #0x10
	lsr r3, r0, #0x14
	lsl r0, r3, #0x10
	ldr r8, _020603C0 ; =0xB5BDCF5A
	lsrs r1, r0, #0x10
	lsrne r0, r8, #0x10
	mulne r0, r1, r0
	lsrne r0, r0, #0x10
	add r2, r5, r4
	lsl r1, r3, #0x10
	lsreq r4, r8, #0x10
	lslne r0, r0, #0x10
	lsrne r4, r0, #0x10
	add r0, r5, #0x20
	add r0, r0, r4
	lsr r4, r1, #0x10
	add r3, sp, #0
	mov r1, #0
_02060374:
	mla r8, r6, r8, r7
	lsr r5, r8, #0x10
	cmp r4, #0
	mulne sb, r5, r4
	lsrne r5, sb, #0x10
	lsl r5, r5, #0x10
	lsr r5, r5, #0x10
	add r5, r5, #2
	ldrb sb, [r0, r5]!
	ldrb r5, [r3], #1
	add r1, r1, #1
	strb sb, [r2], #1
	strb r5, [r0]
	cmp r1, #0xc
	blo _02060374
	add sp, sp, #0x20c
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020603B8: .word 0x5D588B65
_020603BC: .word 0x00269EC3
_020603C0: .word 0xB5BDCF5A

	arm_func_start FUN_020603c4
FUN_020603c4: ; 0x020603C4
	mov ip, #0
	mov r2, #1
	arm_func_end FUN_020603c4
_020603CC:
	lsl r3, r2, ip
	cmp r1, r3, lsl #3
	bgt _020603FC
	cmp ip, #2
	movgt ip, #2
	mov r1, #1
	lsl r1, r1, ip
	sub r2, r1, #1
	mvn r1, r2
	add r0, r0, r2
	and r0, r1, r0
	bx lr
_020603FC:
	add ip, ip, #1
	cmp ip, #0x10
	blt _020603CC
	bx lr

	arm_func_start FUN_0206040c
FUN_0206040c: ; 0x0206040C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r8, r1
	ldrsb r1, [r8]
	mov sb, r0
	cmp r1, #0x2a
	moveq r0, #3
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r7, [sb, #0x18]
	ldr r4, [sb, #0x14]
	cmp r7, #0
	mov r5, #0
	ble _02060494
	arm_func_end FUN_0206040c
_0206043C:
	ldrb r0, [r4, #6]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	cmp r0, #0x7f
	bne _02060484
	ldrh r0, [r4]
	ldr r1, [sb, #0x1c]
	ldr r2, [sb, #0x20]
	lsl r0, r0, #0x13
	lsr r6, r0, #0x13
	lsl r0, r6, #1
	ldrh r0, [r1, r0]
	mov r1, r8
	add r0, r2, r0
	bl FUN_02023fe0
	cmp r0, #0
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
_02060484:
	add r5, r5, #1
	cmp r5, r7
	add r4, r4, #8
	blt _0206043C
_02060494:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0206049c
FUN_0206049c: ; 0x0206049C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x170
	mov sl, r0
	mov r0, r2
	cmp r0, #3
	ldr r0, [sp, #0x198]
	str r2, [sp, #8]
	str r0, [sp, #0x198]
	ldr r0, [sp, #0x19c]
	mov sb, r1
	str r3, [sp, #0xc]
	str r0, [sp, #0x19c]
	bne _020604E4
	cmp r0, #0
	ldrne r0, [r0]
	addne r2, r0, #8
	strne r2, [sp, #0x14]
	bne _02060558
	arm_func_end FUN_0206049c
_020604E4:
	ldr r2, [sb, #0x14]
	mov r3, #0
	str r2, [sp, #0x14]
	ldr r0, [sb, #0x18]
	mov r4, r3
	cmp r0, #0
	ble _02060540
_02060500:
	ldrb r0, [r2, #6]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	cmp r0, #0x7f
	ldrheq r0, [r2]
	lsleq r1, r0, #0x13
	ldreq r0, [sp, #8]
	cmpeq r0, r1, lsr #19
	moveq r3, #1
	beq _02060540
	add r2, r2, #8
	str r2, [sp, #0x14]
	ldr r0, [sb, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blt _02060500
_02060540:
	cmp r3, #0
	addeq sp, sp, #0x170
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r2, r2, #8
	str r2, [sp, #0x14]
_02060558:
	add r0, sb, #0x3c
	bl _strlen
	mov r2, r0
	mov r0, sl
	add r1, sb, #0x3c
	bl FUN_020240f4
	cmp r0, #0
	moveq r0, #1
	streq r0, [sp, #0x10]
	movne r0, #0
	strne r0, [sp, #0x10]
_02060584:
	ldr r8, [sp, #0x14]
	ldrh r3, [r8]
	lsl r0, r3, #0x13
	lsrs r4, r0, #0x13
	ldrbne r0, [r8, #6]
	lslne r0, r0, #0x19
	lsrne r0, r0, #0x19
	cmpne r0, #0x7f
	beq _02060884
	ldrh r2, [r8, #2]
	ldr r1, [sb, #0x1c]
	cmp r4, #2
	lsl r2, r2, #1
	ldr r5, [sb, #0x20]
	ldrh r4, [r1, r2]
	bne _020606C0
	lsl r1, r3, #0x11
	lsrs r1, r1, #0x1f
	beq _02060638
	ldr r1, [sp, #0xc]
	ldr r3, [r1, #0xc]
	cmp r3, #0
	beq _020605E8
	cmp r3, r0
	beq _02060604
_020605E8:
	ldr r1, [sp, #0xc]
	str r0, [r1, #0xc]
	ldr r0, [sp, #0x14]
	ldrb r1, [r0, #7]
	ldr r0, [sp, #0xc]
	str r1, [r0, #0x10]
	b _02060638
_02060604:
	ldrb r2, [r8, #7]
	ldr r1, [r1, #0x10]
	add r2, r1, r2
	ldr r1, [sp, #0xc]
	cmp r2, r3
	str r2, [r1, #0x10]
	subgt r1, r2, r0
	ldrgt r0, [sp, #0xc]
	strgt r1, [r0, #0x10]
	bgt _02060638
	ldreq r0, [sp, #0xc]
	moveq r1, #0
	streq r1, [r0, #0xc]
_02060638:
	ldr r7, [sp, #0x14]
	ldrh r0, [r7]
	ldrh r6, [r7, #4]
	lsl r0, r0, #0x12
	lsrs r0, r0, #0x1f
	bne _02060874
	ldr r0, [sp, #0x10]
	cmp r0, #0
	beq _020606AC
	add r0, sb, #0x3c
	bl _strlen
	ldrsb r1, [sl, r0]
	add r0, sl, r0
	cmp r1, #0x2e
	bne _020606AC
	add r0, r0, #1
	add r1, r5, r4
	bl FUN_02023fe0
	cmp r0, #0
	bne _020606AC
	ldr r1, _020608C8 ; =0x020B5BFC
	add sp, sp, #0x170
	str r7, [r1, #8]
	ldr r2, [sb, #0x2c]
	mov r0, #1
	str r2, [r1, #4]
	ldr r2, [sb, #0x38]
	str r2, [r1]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020606AC:
	ldrb r0, [r7, #7]
	ldr r1, [sb, #0x38]
	mla r1, r0, r6, r1
_020606B8:
	str r1, [sb, #0x38]
	b _02060874
_020606C0:
	add r2, sp, #0x58
	mov r0, #0
	str r0, [r2]
	str r0, [r2, #4]
	str r0, [r2, #8]
	str r0, [r2, #0xc]
	str r0, [r2, #0x10]
	str r0, [r2, #0x14]
	ldrh r2, [r8, #2]
	ldr r4, [sb, #0x14]
	add r0, sp, #0x18
	lsl r2, r2, #1
	ldrh r3, [r1, r2]
	sub r2, r8, r4
	asr r1, r2, #2
	add r2, r2, r1, lsr #29
	add r1, r5, r3
	asr r7, r2, #3
	bl FUN_02023e98
	ldr r0, [sp, #0x14]
	ldr r5, [sb, #0x1c]
	ldrh r2, [r0, #2]
	add r4, sp, #0x70
	ldr r6, [sb, #0x20]
	lsl r3, r2, #1
	ldrh r3, [r5, r3]
	ldr r1, _020608CC ; =0x02090F54
	mov r0, r4
	add r2, sb, #0x3c
	add r3, r6, r3
	bl FUN_02023c40
	ldr r0, _020608D0 ; =0x020B5DD8
	ldr r5, [r0, r7, lsl #2]
	cmp r5, #0
	beq _02060780
	mov r0, r4
	bl _strlen
	mov r1, r4
	mov r2, r0
	mov r0, sl
	bl FUN_020240f4
	cmp r0, #0
	beq _02060780
	ldr r0, [sp, #0x14]
	ldr r1, [sb, #0x38]
	ldrh r0, [r0, #4]
	mla r1, r0, r5, r1
	b _020606B8
_02060780:
	add r1, sb, #0x3c
	add r0, sp, #0xf0
	bl FUN_02023e98
	ldr r0, [sp, #0x14]
	mov r5, #0
	ldrh r0, [r0, #4]
	cmp r0, #0
	ble _02060868
	ldr r0, [sp, #0x198]
	lsl r6, r7, #3
	add fp, r0, #1
_020607AC:
	str r8, [sp, #0x14]
	ldrh r0, [r8, #4]
	add r2, sp, #0xf0
	add r3, sp, #0x18
	cmp r0, #1
	bls _020607D4
	str r5, [sp]
	add r0, sb, #0x3c
	ldr r1, _020608D4 ; =0x02090F5C
	b _020607DC
_020607D4:
	ldr r1, _020608D8 ; =0x02090F68
	add r0, sb, #0x3c
_020607DC:
	bl FUN_02023c40
	ldr r4, [sb, #0x38]
	add r1, sp, #0x14
	str fp, [sp]
	str r1, [sp, #4]
	ldr r2, [sp, #0x14]
	mov r0, sl
	ldrh r2, [r2]
	mov r1, sb
	add r3, sp, #0x58
	lsl r2, r2, #0x13
	lsr r2, r2, #0x13
	bl FUN_0206049c
	cmp r0, #0
	addne sp, sp, #0x170
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _020608D0 ; =0x020B5DD8
	ldr r0, [r0, r7, lsl #2]
	cmp r0, #0
	bne _02060854
	ldr r0, [sb, #0x14]
	ldrh r0, [r0, r6]
	lsl r0, r0, #0x13
	lsr r0, r0, #0x13
	cmp r0, #3
	ldrne r0, [sb, #0x38]
	subne r1, r0, r4
	ldrne r0, _020608D0 ; =0x020B5DD8
	strne r1, [r0, r7, lsl #2]
_02060854:
	add r5, r5, #1
	ldr r0, [sp, #0x14]
	ldrh r0, [r0, #4]
	cmp r5, r0
	blt _020607AC
_02060868:
	add r1, sp, #0xf0
	add r0, sb, #0x3c
	bl FUN_02023e98
_02060874:
	ldr r0, [sp, #0x14]
	add r2, r0, #8
	str r2, [sp, #0x14]
	b _02060584
_02060884:
	ldr r0, [sp, #8]
	mov r2, #0
	cmp r0, #3
	bne _020608A0
	ldr r0, [sp, #0x19c]
	cmp r0, #0
	strne r8, [r0]
_020608A0:
	ldr r0, [sp, #0x198]
	cmp r0, #0
	ldreq r0, _020608C8 ; =0x020B5BFC
	streq r2, [r0, #8]
	ldreq r1, [r0, #0x14]
	streq r1, [r0, #4]
	streq r2, [r0]
	mov r0, #0
	add sp, sp, #0x170
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020608C8: .word 0x020B5BFC
_020608CC: .word 0x02090F54
_020608D0: .word 0x020B5DD8
_020608D4: .word 0x02090F5C
_020608D8: .word 0x02090F68

	arm_func_start FUN_020608dc
FUN_020608dc: ; 0x020608DC
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x20
	ldr r6, _02060950 ; =0x020B5D1C
	mov r5, #0
	add r4, sp, #8
	mov r8, r0
	ldr r7, [r6, #0x38]
	ldr r1, _02060954 ; =0x020B5C20
	mov r0, r6
	str r5, [r6, #0x30]
	str r5, [r6, #0x34]
	str r5, [r4]
	str r5, [r4, #4]
	str r5, [r4, #8]
	str r5, [r4, #0xc]
	str r5, [r4, #0x10]
	str r5, [r4, #0x14]
	strb r5, [r6, #0x3c]
	bl FUN_0206040c
	mov r2, r0
	str r5, [sp]
	mov r0, r8
	mov r1, r6
	mov r3, r4
	str r5, [sp, #4]
	bl FUN_0206049c
	str r7, [r6, #0x38]
	add sp, sp, #0x20
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02060950: .word 0x020B5D1C
_02060954: .word 0x020B5C20
	arm_func_end FUN_020608dc

	arm_func_start FUN_02060958
FUN_02060958: ; 0x02060958
	ldr r2, [r0, #0x2c]
	mov r1, #0
	str r2, [r0, #8]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	str r1, [r0, #0x38]
	bx lr
	arm_func_end FUN_02060958

	arm_func_start FUN_02060974
FUN_02060974: ; 0x02060974
	push {r3, lr}
	mov r3, #1
	lsl r3, r3, r2
	sub ip, r3, #1
	ldr r3, [r0, #0x34]
	ldr lr, [r0, #0x30]
	add r2, r3, r2
	and r1, r1, ip
	orr r1, lr, r1, lsl r3
	str r1, [r0, #0x30]
	str r2, [r0, #0x34]
	cmp r2, #8
	poplo {r3, pc}
	arm_func_end FUN_02060974
_020609A8:
	ldr r1, [r0, #8]
	add r2, r1, #1
	mov r3, r1
	ldr r1, [r0, #0x30]
	str r2, [r0, #8]
	strb r1, [r3]
	ldr r2, [r0, #0x30]
	ldr r1, [r0, #0x34]
	lsr r2, r2, #8
	sub r1, r1, #8
	str r2, [r0, #0x30]
	str r1, [r0, #0x34]
	cmp r1, #8
	bhs _020609A8
	pop {r3, pc}

	arm_func_start FUN_020609e4
FUN_020609e4: ; 0x020609E4
	push {r3, lr}
	ldr r2, [r0, #0x34]
	cmp r2, r1
	bhs _02060A2C
	arm_func_end FUN_020609e4
_020609F4:
	ldr r2, [r0, #8]
	ldr lr, [r0, #0x30]
	mov r3, r2
	add r2, r2, #1
	str r2, [r0, #8]
	ldrb ip, [r3]
	ldr r3, [r0, #0x34]
	mov r2, r3
	add r2, r2, #8
	orr r3, lr, ip, lsl r3
	str r3, [r0, #0x30]
	str r2, [r0, #0x34]
	cmp r2, r1
	blo _020609F4
_02060A2C:
	mov r2, #1
	lsl r3, r2, r1
	ldr lr, [r0, #0x30]
	ldr r2, [r0, #0x34]
	sub ip, r3, #1
	lsr r3, lr, r1
	sub r1, r2, r1
	and r2, lr, ip
	str r3, [r0, #0x30]
	str r1, [r0, #0x34]
	mov r0, r2
	pop {r3, pc}

	arm_func_start FUN_02060a5c
FUN_02060a5c: ; 0x02060A5C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	mov sb, r2
	cmp r1, #3
	mov r4, #0
	bne _02060A80
	cmp sb, #0
	addne sb, sb, #8
	bne _02060B04
	arm_func_end FUN_02060a5c
_02060A80:
	ldr r8, [sl, #0x18]
	ldr r6, [sl, #0x1c]
	lsl r0, r1, #1
	cmp r8, #0
	ldr r7, [sl, #0x20]
	ldrh fp, [r6, r0]
	ldr sb, [sl, #0x14]
	mov r5, #0
	ble _02060B00
_02060AA4:
	ldrh r0, [sb]
	lsl r0, r0, #0x13
	lsrs r1, r0, #0x13
	ldrheq r0, [sb, #2]
	cmpeq r0, #0
	mvneq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [sb, #6]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	cmp r0, #0x7f
	bne _02060AF0
	lsl r0, r1, #1
	ldrh r0, [r6, r0]
	add r1, r7, fp
	add r0, r7, r0
	bl FUN_02023fe0
	cmp r0, #0
	beq _02060B00
_02060AF0:
	add r5, r5, #1
	cmp r5, r8
	add sb, sb, #8
	blt _02060AA4
_02060B00:
	add sb, sb, #8
_02060B04:
	mov r5, #1
_02060B08:
	ldrh r0, [sb]
	lsl r0, r0, #0x13
	lsrs r1, r0, #0x13
	beq _02060B2C
	ldrb r0, [sb, #6]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	cmp r0, #0x7f
	bne _02060B38
_02060B2C:
	subs r5, r5, #1
	beq _02060B68
	b _02060B60
_02060B38:
	cmp r1, #3
	addeq r5, r5, #1
	cmp r1, #2
	lsreq r0, r0, #3
	beq _02060B58
	mov r0, sl
	mov r2, sb
	bl FUN_02060a5c
_02060B58:
	cmp r0, r4
	movgt r4, r0
_02060B60:
	add sb, sb, #8
	b _02060B08
_02060B68:
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02060b70
FUN_02060b70: ; 0x02060B70
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x210
	mov sl, r0
	movs r0, r3
	ldr r0, [sp, #0x238]
	str r3, [sp, #0xc]
	str r0, [sp, #0x238]
	ldreq r0, [sl]
	str r1, [sp, #4]
	str r2, [sp, #8]
	cmpeq r0, #3
	bne _02060BA8
	ldr r0, _02061514 ; =0x020B5C20
	bl FUN_02023e98
	arm_func_end FUN_02060b70
_02060BA8:
	ldr r0, [sp, #4]
	ldrsb r1, [r0]
	ldr r0, [sp, #8]
	ldr r0, [r0, #8]
	cmp r1, #0x2a
	str r0, [sp, #0x30]
	ldr r0, [sp, #8]
	ldr r0, [r0, #4]
	str r0, [sp, #0x28]
	bne _02060BE8
	ldr r0, [sp, #0x238]
	cmp r0, #0
	ldrne r0, [r0]
	addne r2, r0, #8
	strne r2, [sp, #0x34]
	bne _02060C80
_02060BE8:
	ldr r1, [sl, #0x14]
	mov r4, #0
	str r1, [sp, #0x34]
	ldr r0, [sl, #0x18]
	cmp r0, #0
	ble _02060C74
_02060C00:
	ldrh r0, [r1]
	lsl r0, r0, #0x13
	lsrs r2, r0, #0x13
	bne _02060C20
	ldrh r0, [r1, #2]
	cmp r0, #0
	addeq sp, sp, #0x210
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02060C20:
	ldrb r0, [r1, #6]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	cmp r0, #0x7f
	bne _02060C58
	ldr r1, [sl, #0x1c]
	lsl r0, r2, #1
	ldrh r0, [r1, r0]
	ldr r2, [sl, #0x20]
	ldr r1, [sp, #4]
	add r0, r2, r0
	bl FUN_02023fe0
	cmp r0, #0
	beq _02060C74
_02060C58:
	ldr r0, [sp, #0x34]
	add r4, r4, #1
	add r1, r0, #8
	str r1, [sp, #0x34]
	ldr r0, [sl, #0x18]
	cmp r4, r0
	blt _02060C00
_02060C74:
	ldr r0, [sp, #0x34]
	add r2, r0, #8
_02060C7C:
	str r2, [sp, #0x34]
_02060C80:
	ldrh r0, [r2]
	lsl r0, r0, #0x13
	lsrs r1, r0, #0x13
	ldrhne r3, [r2, #2]
	cmpne r3, #0
	ldrbne r0, [r2, #6]
	lslne r0, r0, #0x19
	lsrne sb, r0, #0x19
	cmpne sb, #0x7f
	beq _020614C8
	lsl r0, r3, #1
	cmp r1, #2
	ldr r8, [sl, #0x20]
	ldr r3, [sl, #0x1c]
	ldrh r4, [r3, r0]
	bne _020612D8
	ldrb r0, [r2, #7]
	str r0, [sp, #0x10]
	lsr r0, sb, #3
	str r0, [sp, #0x2c]
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x30]
	lsl r1, r1, #3
	bl FUN_020603c4
	ldr r1, [sp, #0x34]
	str r0, [sp, #0x30]
	ldrh r0, [r1]
	lsl r0, r0, #0x11
	lsrs r0, r0, #0x1f
	beq _02060DAC
	ldrb r1, [r1, #6]
	ldr r0, [sp, #8]
	ldr r0, [r0, #0xc]
	lsl r1, r1, #0x19
	lsr r1, r1, #0x19
	cmp r0, #0
	beq _02060D1C
	cmp r0, r1
	beq _02060D60
_02060D1C:
	ldr r0, [sp, #8]
	str r1, [r0, #0xc]
	ldr r1, [sp, #0x10]
	str r1, [r0, #0x10]
	ldr r1, [sl, #0x28]
	ldr r0, [sp, #0x30]
	add sb, r1, r0
	ldrb r1, [r1, r0]
	ldrb r0, [sb, #1]
	ldrb r2, [sb, #2]
	ldrb r3, [sb, #3]
	orr r0, r1, r0, lsl #8
	orr r0, r0, r2, lsl #16
	orr r1, r0, r3, lsl #24
	ldr r0, [sp, #8]
	str r1, [r0, #0x14]
	b _02060DA0
_02060D60:
	ldr r2, [sp, #8]
	ldr r3, [r2, #0x10]
	ldr r2, [sp, #0x10]
	add r3, r3, r2
	ldr r2, [sp, #8]
	cmp r3, r0
	str r3, [r2, #0x10]
	subgt r1, r3, r1
	movgt r0, r2
	strgt r1, [r0, #0x10]
	bgt _02060DA0
	moveq r1, #0
	moveq r0, r2
	streq r1, [r0, #0xc]
	mov r0, #0
	str r0, [sp, #0x2c]
_02060DA0:
	ldr r0, [sp, #8]
	add r0, r0, #0x14
	b _02060DB8
_02060DAC:
	ldr r1, [sl, #0x28]
	ldr r0, [sp, #0x30]
	add r0, r1, r0
_02060DB8:
	str r0, [sp, #0x20]
	ldr r2, [sp, #0x34]
	ldr r1, [sl]
	ldrh r0, [r2, #4]
	cmp r1, #3
	str r0, [sp, #0x24]
	ldrh r0, [r2]
	lsl r0, r0, #0x12
	lsr r0, r0, #0x1f
	str r0, [sp, #0x1c]
	cmpeq r0, #0
	bne _02060E2C
	add r3, r8, r4
	add r4, sp, #0x90
	ldr r1, _02061518 ; =0x02090F70
	mov r0, r4
	add r2, sl, #0x3c
	bl FUN_02023c40
	mov r0, r4
	bl FUN_020608dc
	ldr r0, _0206151C ; =0x020B5BFC
	ldr r3, [r0]
	ldr r0, [r0, #4]
	and r1, r3, #7
	add r2, r0, r3, lsr #3
	ldrb r0, [r0, r3, lsr #3]
	add r7, r2, #1
	rsb r6, r1, #8
	asr r5, r0, r1
_02060E2C:
	ldr r0, [sp, #0x24]
	cmp r0, #0
	mov r0, #0
	str r0, [sp, #0x18]
	ble _020612A8
_02060E40:
	ldr r0, _02061520 ; =0x020B5C18
	mov r1, #0
	strb r1, [r0]
	strb r1, [r0, #1]
	strb r1, [r0, #2]
	strb r1, [r0, #3]
	strb r1, [r0, #4]
	strb r1, [r0, #5]
	strb r1, [r0, #6]
	strb r1, [r0, #7]
	ldr r3, [sp, #0x34]
	ldr r2, [sp, #0x2c]
	ldr r1, [sp, #0x18]
	ldr r0, [sp, #0x20]
	ldrb r8, [r3, #7]
	mla sb, r2, r1, r0
	ldr r0, [sl]
	cmp r0, #1
	ldrb r0, [r3, #6]
	lsl r0, r0, #0x18
	lsr r4, r0, #0x1f
	bne _02060F70
	cmp r8, #0
	cmpne r4, #0
	moveq r1, #0
	beq _02060EC8
	sub r2, r8, #1
	asr r1, r2, #2
	add r1, r2, r1, lsr #29
	and r0, r2, #7
	ldrb r2, [sb, r1, asr #3]
	mov r1, #1
	and r0, r2, r1, lsl r0
	and r1, r0, #0xff
_02060EC8:
	ldrb r0, [r3, #6]
	mov r2, #0
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	cmp r0, #0
	ble _02060F70
_02060EE0:
	ldrh r0, [r3]
	lsl r0, r0, #0x12
	lsrs r0, r0, #0x1f
	movne r0, #0xff
	bne _02060F20
	ldrb r0, [r3, #7]
	cmp r2, r0
	bgt _02060F1C
	sub r3, r0, r2
	cmp r3, #8
	movge r0, #0
	movlt r0, #0xff
	lsllt r0, r0, r3
	andlt r0, r0, #0xff
	b _02060F20
_02060F1C:
	mov r0, #0xff
_02060F20:
	cmp r1, #0
	asrne r3, r2, #2
	addne r3, r2, r3, lsr #29
	ldrbne fp, [sb, r3, asr #3]
	orrne r0, fp, r0
	strbne r0, [sb, r3, asr #3]
	bne _02060F58
	mvn r0, r0
	and r3, r0, #0xff
	asr r0, r2, #2
	add r0, r2, r0, lsr #29
	ldrb fp, [sb, r0, asr #3]
	and r3, fp, r3
	strb r3, [sb, r0, asr #3]
_02060F58:
	add r2, r2, #8
	ldr r3, [sp, #0x34]
	ldrb r0, [r3, #6]
	lsl r0, r0, #0x19
	cmp r2, r0, lsr #25
	blt _02060EE0
_02060F70:
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	bne _020611B8
	ldr r0, [sl]
	cmp r0, #3

	arm_func_start switchD
switchD: ; 0x02060F84
	addls pc, pc, r0, lsl #2
	b _020611B8
	arm_func_end switchD
_02060F8C: ; jump table
	b LAB_02060f9c ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02060F90
	b _020611B8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02060F94
	b _02060FCC
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02060F98
	b _020610B0
	arm_func_end caseD_3
LAB_02060f9c:
	cmp r8, #0
	ble _020611B8
_02060FA4:
	ldrb r1, [sb], #1
	mov r2, #8
	cmp r8, #8
	movle r2, r8
	mov r0, sl
	bl FUN_02060974
	sub r8, r8, #8
	cmp r8, #0
	bgt _02060FA4
	b _020611B8
_02060FCC:
	ldrh r0, [r3]
	lsl r0, r0, #0x11
	lsrs r0, r0, #0x1f
	beq _0206100C
	cmp r8, #0
	ble _020611B8
_02060FE4:
	mov r1, #8
	cmp r8, #8
	movle r1, r8
	mov r0, sl
	bl FUN_020609e4
	sub r8, r8, #8
	strb r0, [sb], #1
	cmp r8, #0
	bgt _02060FE4
	b _020611B8
_0206100C:
	ldr r0, [sp, #0x2c]
	cmp r8, #0
	moveq r4, #0
	cmp r0, #0
	mov r0, #0
	str r0, [sp, #0x14]
	ble _020611B8
_02061028:
	mov fp, #8
	cmp r8, #8
	movle fp, r8
	cmp r8, #0
	ble _02061084
	mov r0, sl
	mov r1, fp
	bl FUN_020609e4
	and r0, r0, #0xff
	cmp r4, #0
	beq _0206107C
	cmp r8, #8
	bgt _0206107C
	sub r2, fp, #1
	mov r1, #1
	tst r0, r1, lsl r2
	movne r1, #0xff
	lslne r1, r1, fp
	andne r1, r1, #0xff
	orrne r0, r0, r1
	moveq r4, #0
_0206107C:
	sub r8, r8, #8
	b _02061090
_02061084:
	mov r0, #0xff
	cmp r4, #0
	moveq r0, #0
_02061090:
	strb r0, [sb], #1
	ldr r0, [sp, #0x14]
	add r1, r0, #1
	ldr r0, [sp, #0x2c]
	str r1, [sp, #0x14]
	cmp r1, r0
	blt _02061028
	b _020611B8
_020610B0:
	ldr r0, _0206151C ; =0x020B5BFC
	ldr r8, _02061520 ; =0x020B5C18
	ldr r0, [r0, #8]
	mov ip, #0
	cmp r0, #0
	ldreq r0, _0206151C ; =0x020B5BFC
	streq r3, [r0, #8]
	moveq r0, r3
	ldrb fp, [r0, #7]
	ldr r0, [sp, #0x2c]
	cmp fp, #0
	moveq r4, #0
	cmp r0, #0
	ble _0206118C
_020610E8:
	cmp fp, #0
	ble _0206116C
	mov r3, #8
	cmp fp, #8
	movle r3, fp
	cmp r6, r3
	bhs _02061118
_02061104:
	ldrb r0, [r7], #1
	orr r5, r5, r0, lsl r6
	add r6, r6, #8
	cmp r6, r3
	blo _02061104
_02061118:
	mov r0, #1
	lsl r0, r0, r3
	sub r0, r0, #1
	and r0, r5, r0
	cmp r4, #0
	and r2, r0, #0xff
	beq _0206115C
	cmp fp, #8
	bgt _0206115C
	sub r1, r3, #1
	mov r0, #1
	tst r2, r0, lsl r1
	movne r0, #0xff
	lslne r0, r0, r3
	andne r0, r0, #0xff
	orrne r2, r2, r0
	moveq r4, #0
_0206115C:
	lsr r5, r5, r3
	sub r6, r6, r3
	sub fp, fp, #8
	b _02061178
_0206116C:
	mov r2, #0xff
	cmp r4, #0
	moveq r2, #0
_02061178:
	ldr r0, [sp, #0x2c]
	add ip, ip, #1
	strb r2, [r8], #1
	cmp ip, r0
	blt _020610E8
_0206118C:
	ldr r0, [sp, #0x2c]
	mov r2, #0
	cmp r0, #0
	ble _020611B8
_0206119C:
	ldr r0, _02061520 ; =0x020B5C18
	ldrb r1, [r0, r2]
	ldr r0, [sp, #0x2c]
	add r2, r2, #1
	cmp r2, r0
	strb r1, [sb], #1
	blt _0206119C
_020611B8:
	ldr r0, [sl]
	cmp r0, #3
	bne _02061260
	ldr r0, _0206151C ; =0x020B5BFC
	ldr r1, [r0, #0xc]
	ldr r0, [sp, #0x2c]
	add r1, r1, r0
	ldr r0, _0206151C ; =0x020B5BFC
	add r2, r1, r1, lsl #5
	str r1, [r0, #0xc]
	ldr r0, _02061524 ; =0x82529317
	umull r1, r0, r2, r0
	sub r1, r2, r0
	add r0, r0, r1, lsr #1
	ldr r1, _0206151C ; =0x020B5BFC
	lsr r0, r0, #0xf
	ldr r1, [r1, #0x10]
	cmp r1, r0
	bge _02061238
	ldr r1, _0206151C ; =0x020B5BFC
	cmp r0, #0
	str r0, [r1, #0x10]
	mov r3, #0
	ble _02061238
_02061218:
	lsl r1, r3, #1
	add r1, r1, #0x6000000
	add r2, r1, #0x500
	mov r1, #1
	add r3, r3, #1
	strh r1, [r2, #0xc0]
	cmp r3, r0
	blt _02061218
_02061238:
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	bne _02061260
	ldr r0, _0206151C ; =0x020B5BFC
	ldr r1, [r0]
	ldr r0, [r0, #8]
	ldrb r0, [r0, #7]
	add r1, r1, r0
	ldr r0, _0206151C ; =0x020B5BFC
	str r1, [r0]
_02061260:
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	ldreq r1, [sp, #0x28]
	ldreq r0, [sp, #0x10]
	addeq r0, r1, r0
	streq r0, [sp, #0x28]
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	ldreq r1, [sl, #0x38]
	ldreq r0, [sp, #0x10]
	addeq r0, r1, r0
	streq r0, [sl, #0x38]
	ldr r0, [sp, #0x18]
	add r1, r0, #1
	ldr r0, [sp, #0x24]
	str r1, [sp, #0x18]
	cmp r1, r0
	blt _02060E40
_020612A8:
	ldr r0, [sp, #0x34]
	ldrh r0, [r0]
	lsl r0, r0, #0x11
	lsrs r0, r0, #0x1f
	beq _020614A8
	ldr r0, [sp, #8]
	ldr r1, [r0, #0x14]
	ldr r0, [sp, #0x10]
	lsr r1, r1, r0
	ldr r0, [sp, #8]
	str r1, [r0, #0x14]
	b _020614A8
_020612D8:
	mov r0, sl
	bl FUN_02060a5c
	lsl r8, r0, #3
	ldr r0, [sp, #0x30]
	mov r1, r8
	bl FUN_020603c4
	str r0, [sp, #0x30]
	add r1, sp, #0x78
	mov r0, #0
	str r0, [r1]
	str r0, [r1, #4]
	str r0, [r1, #8]
	str r0, [r1, #0xc]
	str r0, [r1, #0x10]
	str r0, [r1, #0x14]
	ldr r0, [sp, #0x30]
	ldr r4, [sp, #0x34]
	str r0, [sp, #0x80]
	ldrh r2, [r4, #2]
	add fp, sp, #0x38
	ldr r3, [sl, #0x1c]
	lsl r2, r2, #1
	ldrh r2, [r3, r2]
	ldr r1, [sl, #0x20]
	mov r0, fp
	add r1, r1, r2
	bl FUN_02023e98
	ldr r0, [sp, #0x34]
	add sb, sp, #0x190
	ldrh r0, [r0, #4]
	add r1, sl, #0x3c
	str r0, [sp, #0x24]
	mov r0, sb
	bl FUN_02023e98
	ldr r0, [sp, #0x24]
	mov r2, sb
	cmp r0, #1
	mov r3, fp
	add r0, sl, #0x3c
	ble _02061380
	ldr r1, _02061528 ; =0x02090F78
	b _02061384
_02061380:
	ldr r1, _0206152C ; =0x02090F84
_02061384:
	bl FUN_02023c40
	add r1, sp, #0x34
	str r1, [sp]
	ldr r1, [sp, #0x34]
	ldr r3, [sp, #0xc]
	ldrh r1, [r1]
	ldr sb, [sl, #0x1c]
	ldr fp, [sl, #0x20]
	lsl r1, r1, #0x13
	lsr r1, r1, #0x12
	ldrh r1, [sb, r1]
	mov r0, sl
	add r2, sp, #0x78
	add r3, r3, #1
	add r1, fp, r1
	bl FUN_02060b70
	mov r1, r8
	ldr r8, [sp, #0x7c]
	ldr r3, [sp, #0x24]
	ldr r2, [sp, #0x28]
	ldr r0, [sp, #0x78]
	mla r2, r8, r3, r2
	str r2, [sp, #0x28]
	bl FUN_020603c4
	str r0, [sp, #0x2c]
	ldr r0, [sp, #0x24]
	cmp r0, #1
	ble _0206149C
	mov r8, #0
	ldr r0, [sp, #0x34]
	ldrh r0, [r0, #4]
	sub r0, r0, #1
	cmp r0, #0
	ble _02061494
_0206140C:
	ldr r1, [sp, #0x30]
	ldr r0, [sp, #0x2c]
	str r4, [sp, #0x34]
	add r0, r1, r0
	str r0, [sp, #0x30]
	str r0, [sp, #0x80]
	add r0, r8, #1
	str r0, [sp]
	ldr r1, _02061530 ; =0x02090F8C
	add r0, sl, #0x3c
	add r2, sp, #0x190
	add r3, sp, #0x38
	bl FUN_02023c40
	add r0, sp, #0x34
	str r0, [sp]
	ldr r1, [sp, #0x34]
	ldr r3, [sp, #0xc]
	ldrh r1, [r1]
	ldr sb, [sl, #0x1c]
	ldr fp, [sl, #0x20]
	lsl r1, r1, #0x13
	lsr r1, r1, #0x12
	ldrh r1, [sb, r1]
	mov r0, sl
	add r2, sp, #0x78
	add r3, r3, #1
	add r1, fp, r1
	bl FUN_02060b70
	ldr r0, [sp, #0x34]
	add r8, r8, #1
	ldrh r0, [r0, #4]
	sub r0, r0, #1
	cmp r8, r0
	blt _0206140C
_02061494:
	mov r0, #1
	str r0, [sp, #0x24]
_0206149C:
	add r1, sp, #0x190
	add r0, sl, #0x3c
	bl FUN_02023e98
_020614A8:
	ldr r2, [sp, #0x2c]
	ldr r1, [sp, #0x24]
	ldr r0, [sp, #0x30]
	ldr r3, [sp, #0x34]
	mla r0, r2, r1, r0
	str r0, [sp, #0x30]
	add r2, r3, #8
	b _02060C7C
_020614C8:
	ldr r0, [sp, #8]
	ldr r1, [sp, #0x28]
	ldr r2, [r0, #8]
	str r1, [r0, #4]
	ldr r0, [sp, #0x30]
	sub r1, r0, r2
	ldr r0, [sp, #8]
	str r1, [r0]
	ldr r0, [sp, #4]
	ldrsb r0, [r0]
	cmp r0, #0x2a
	addne sp, sp, #0x210
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0x238]
	cmp r0, #0
	ldrne r1, [sp, #0x34]
	strne r1, [r0]
	add sp, sp, #0x210
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02061514: .word 0x020B5C20
_02061518: .word 0x02090F70
_0206151C: .word 0x020B5BFC
_02061520: .word 0x020B5C18
_02061524: .word 0x82529317
_02061528: .word 0x02090F78
_0206152C: .word 0x02090F84
_02061530: .word 0x02090F8C

	arm_func_start FUN_02061534
FUN_02061534: ; 0x02061534
	push {r3, r4, r5, lr}
	sub sp, sp, #0x90
	mov r4, r0
	ldr r0, [r4, #0xc]
	mov r2, r1
	cmp r0, #0
	addne sp, sp, #0x90
	movne r0, #1
	popne {r3, r4, r5, pc}
	cmn r2, #1
	bne _02061590
	ldr r3, _0206161C ; =0x02090F98
	add r5, sp, #0x10
	mov r2, #0xc
	arm_func_end FUN_02061534
_0206156C:
	ldrb r0, [r3, #1]
	ldrb r1, [r3], #2
	subs r2, r2, #1
	strb r0, [r5, #1]
	strb r1, [r5], #2
	bne _0206156C
	ldrb r0, [r3]
	strb r0, [r5]
	b _0206159C
_02061590:
	ldr r1, _02061620 ; =0x02090FB4
	add r0, sp, #0x10
	bl FUN_02023c40
_0206159C:
	mov r5, #1
	ldr r0, _02061624 ; =0x0209A250
	mov r1, r5
	bl FUN_0202e19c
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	str r3, [sp, #8]
	ldr r0, _02061628 ; =0x0209C2C4
	add r1, sp, #0x10
	str r5, [sp, #0xc]
	add r2, r4, #0xc
	bl FUN_0202eff0
	ldr r0, [r4, #0xc]
	cmp r0, #0
	bne _020615E0
	bl FUN_02004160
_020615E0:
	ldr r2, [r4, #0xc]
	mov r0, #1
	str r2, [r4, #0x10]
	ldrh r1, [r2, #8]
	add r3, r2, #0x10
	str r1, [r4, #0x18]
	ldrh ip, [r2, #0xa]
	add r2, r3, r1, lsl #3
	add r1, r2, ip, lsl #1
	str ip, [r4, #0x24]
	str r3, [r4, #0x14]
	str r2, [r4, #0x1c]
	str r1, [r4, #0x20]
	add sp, sp, #0x90
	pop {r3, r4, r5, pc}
	.align 2, 0_0206161C: .word 0x02090F98
_02061620: .word 0x02090FB4
_02061624: .word 0x0209A250
_02061628: .word 0x0209C2C4

	arm_func_start FUN_0206162c
FUN_0206162c: ; 0x0206162C
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0x1c
	ldr r5, _020616A0 ; =0x020B5C60
	mov r4, r0
	mov r6, r1
	mov r0, r5
	mvn r1, #0
	bl FUN_02061534
	mov r0, #1
	str r0, [r5]
	str r4, [r5, #0x28]
	mov r4, #0
	mov r0, r5
	str r4, [r5, #0x2c]
	bl FUN_02060958
	add r2, sp, #4
	mov r0, r5
	mov r1, r6
	str r4, [r2]
	str r4, [r2, #4]
	str r4, [r2, #8]
	str r4, [r2, #0xc]
	str r4, [r2, #0x10]
	str r4, [r2, #0x14]
	mov r3, r4
	str r4, [sp]
	bl FUN_02060b70
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_020616A0: .word 0x020B5C60
	arm_func_end FUN_0206162c

	arm_func_start FUN_020616a4
FUN_020616a4: ; 0x020616A4
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x1c
	ldr r5, [sp, #0x38]
	mov r7, r1
	cmp r5, #0
	ldreq r5, _02061748 ; =0x020B5C60
	mov r8, r0
	mov r0, r5
	mov r1, r3
	mov r6, r2
	bl FUN_02061534
	mov r4, #0
	str r4, [r5]
	str r8, [r5, #0x28]
	mov r0, r5
	str r7, [r5, #0x2c]
	bl FUN_02060958
	add r2, sp, #4
	mov r0, r5
	mov r1, r6
	str r4, [r2]
	str r4, [r2, #4]
	str r4, [r2, #8]
	str r4, [r2, #0xc]
	str r4, [r2, #0x10]
	str r4, [r2, #0x14]
	mov r3, r4
	str r4, [sp]
	bl FUN_02060b70
	mov r0, r5
	mov r1, r4
	mov r2, #7
	bl FUN_02060974
	ldr r0, [sp, #8]
	ldr r2, [sp, #4]
	ldr r1, _0206174C ; =0x020B5BFC
	add r0, r0, #7
	lsr r0, r0, #3
	str r2, [r1, #0x18]
	add sp, sp, #0x1c
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02061748: .word 0x020B5C60
_0206174C: .word 0x020B5BFC
	arm_func_end FUN_020616a4

	arm_func_start FUN_02061750
FUN_02061750: ; 0x02061750
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x1c
	ldr r4, _020617D4 ; =0x020B5C60
	mov r7, r0
	mov r6, r1
	mov r0, r4
	mvn r1, #0
	mov r5, r2
	bl FUN_02061534
	mov r0, #2
	str r0, [r4]
	str r7, [r4, #0x2c]
	mov r0, r4
	str r6, [r4, #0x28]
	bl FUN_02060958
	mov r3, #0
	add r2, sp, #4
	strb r3, [r4, #0x3c]
	str r3, [r2]
	str r3, [r2, #4]
	str r3, [r2, #8]
	str r3, [r2, #0xc]
	str r3, [r2, #0x10]
	str r3, [r2, #0x14]
	mov r1, r5
	mov r0, r4
	str r3, [sp]
	bl FUN_02060b70
	ldr r0, [sp, #8]
	add r0, r0, #7
	lsr r0, r0, #3
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_020617D4: .word 0x020B5C60
	arm_func_end FUN_02061750

	arm_func_start FUN_020617d8
FUN_020617d8: ; 0x020617D8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	bl FUN_020F2DAC
	mov r5, #0
	mov r1, r5
	add r0, sl, #0x4c
	str r5, [sl, #0x44]
	str r5, [sl, #0x128]
	str r5, [sl, #0x12c]
	bl FUN_02063408
	cmp r0, #0
	addeq sp, sp, #0xc
	subeq r0, r5, #0x7e
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sl, #0x4c
	bl FUN_02063468
	cmp r0, #0
	addeq sp, sp, #0xc
	subeq r0, r5, #0x7d
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r4, _02061B20 ; =0x00005258
	mov r1, r5
	mov r0, r4
	bl FUN_020866d8
	ldr r1, _02061B24 ; =0x020A1640
	cmp r0, #0
	str r0, [r1, #0x230]
	beq _02061858
	mov r1, r5
	mov r2, r4
	bl MemWrite
	arm_func_end FUN_020617d8
_02061858:
	bl FUN_0200ff74
	mov r0, #0
	str r0, [sp]
	ldr r4, _02061B28 ; =0x020B5C60
	ldr r1, [sp]
	mov r0, r4
	mov r2, #0x178
	bl MemWrite
	ldr r1, [sp]
	mov r0, r4
	sub r1, r1, #1
	bl FUN_02061534
	ldr r0, [r4, #0x10]
	mov r4, #1
	ldr r0, [r0]
	mov r1, r4
	str r0, [sl, #0x40]
	mov r0, #0x8000
	bl FUN_020866d8
	mov r1, r4
	mov r4, r0
	mov r0, #0x10000
	bl FUN_020866d8
	ldr fp, [sp]
	mov r5, r0
	mov r0, sl
	mov r1, fp
	mov r2, #0x40
	mov r6, fp
	bl MemWrite
	ldr r7, [sp]
	b _02061A9C
_020618D8:
	add sb, sp, #8
	mov r3, r4
	lsl ip, r7, #1
	mov r8, #0
	add r0, sl, #0x4c
	lsl r1, r7, #0xf
	mov r2, #0x8000
	strh r8, [sb, ip]
	bl FUN_020634b0
	cmp r0, #0
	addeq sp, sp, #0xc
	subeq r0, r8, #0x7c
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, _02061B2C ; =0x02090FD0
	add r0, r4, #4
	bl _strcmp
	cmp r0, #0
	bne _02061A98
	mov r0, #1
	mov r1, r8
	mov sb, r8
	str r0, [sp]
	b _02061944
_02061934:
	add r0, r1, #0x80
	ldrb r0, [r4, r0]
	add r1, r1, #1
	orr r8, r8, r0
_02061944:
	cmp r1, #0x80
	blt _02061934
	cmp r8, #0
	bne _02061978
	mov r0, sb
	mov r1, r4
	mov r2, #0x80
	bl FUN_0205ffb0
	mov r0, sb
	add r1, r4, #0x100
	mov r2, #0x7f00
	bl FUN_0200787c
	b _02061988
_02061978:
	ldr r2, _02061B30 ; =0x00007F80
	mov r1, r4
	mov r0, #0
	bl FUN_0205ffb0
_02061988:
	mov sb, #0
	mov r0, sb
	mov r1, r5
	mov r2, #0x10000
	bl FUN_0200787c
	ldr r2, _02061B34 ; =0x02090DB4
	mov r0, r4
	ldr r2, [r2, #0x20]
	mov r1, r5
	bl FUN_02061750
	ldr r2, _02061B34 ; =0x02090DB4
	add r0, r4, r0
	ldr r2, [r2, #0x1c]
	str r0, [sp, #4]
	add r1, r5, #0x40
	bl FUN_02061750
	ldr r1, [sp, #4]
	add r0, r1, r0
	ldr r1, _02061B34 ; =0x02090DB4
	ldr r2, [r1, #0x18]
	add r1, r5, #0x1cc
	add r1, r1, #0x5800
	bl FUN_02061750
	ldr r1, [r5, #0x18]
	ldr r0, [sl, #0x40]
	cmp r1, r0
	bne _02061A28
	cmp r8, #0
	bne _02061A10
	mov r0, sl
	mov r1, r5
	mov r2, sb
	mov r3, sb
	b _02061A20
_02061A10:
	ldrb r3, [r5, #0x25]
	mov r0, sl
	mov r1, r5
	add r2, r5, #0x40
_02061A20:
	bl FUN_02061d24
	mov sb, r0
_02061A28:
	cmp sb, #0
	beq _02061A94
	ldr r2, [r5, #0x14]
	cmp r8, #0
	add r0, sp, #8
	addne fp, fp, #1
	orr r3, r2, #0x8000
	lsl r1, r7, #1
	strh r3, [r0, r1]
	cmp r7, #0
	bne _02061A78
_02061A54:
	mov r0, r5
	mov r1, sl
	mov r2, #0x40
	bl _memcpy
	ldr r1, _02061B38 ; =0x020A17F0
	add r0, r5, #0x40
	mov r2, #0x80
	bl _memcpy
	b _02061A98
_02061A78:
	ldrh r0, [sp, #8]
	cmp r0, #0
	beq _02061A90
	sub r0, r0, r2
	tst r0, #0x80
	beq _02061A98
_02061A90:
	b _02061A54
_02061A94:
	add r6, r6, #1
_02061A98:
	add r7, r7, #1
_02061A9C:
	cmp r7, #2
	blt _020618D8
	mov r0, sl
	mov r1, r5
	bl FUN_02062fc8
	mov r0, sl
	mov r1, r4
	bl FUN_02062fc8
	ldr r0, [sl, #0x18]
	cmp r0, #0
	bne _02061AF8
	mov r4, #0x40
	mov r0, sl
	mov r2, r4
	mov r1, #0
	bl MemWrite
	sub r1, r4, #0x41
	ldr r0, _02061B3C ; =0x020A11DC
	str r1, [sl, #0x14]
	bl FUN_021423A8
	ldr r0, _02061B40 ; =0x020A0640
	ldr r0, [r0, #0xba4]
	str r0, [sl, #0x20]
_02061AF8:
	ldr r0, [sp]
	cmp r0, #0
	cmpne r6, #0
	movgt r0, #2
	strbgt r0, [sl, #0x24]
	mov r0, sl
	bl FUN_02061b44
	mov r0, #0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02061B20: .word 0x00005258
_02061B24: .word 0x020A1640
_02061B28: .word 0x020B5C60
_02061B2C: .word 0x02090FD0
_02061B30: .word 0x00007F80
_02061B34: .word 0x02090DB4
_02061B38: .word 0x020A17F0
_02061B3C: .word 0x020A11DC
_02061B40: .word 0x020A0640

	arm_func_start FUN_02061b44
FUN_02061b44: ; 0x02061B44
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, #0
	ldr r6, _02061B88 ; =0x020B5C60
	mov sb, r0
	mov r5, r7
	mov r4, #0xbc
	arm_func_end FUN_02061b44
_02061B5C:
	mla r8, r7, r4, r6
	ldr r1, [r8, #0xc]
	cmp r1, #0
	beq _02061B78
	mov r0, sb
	bl FUN_02062fc8
	str r5, [r8, #0xc]
_02061B78:
	add r7, r7, #1
	cmp r7, #2
	blt _02061B5C
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02061B88: .word 0x020B5C60

	arm_func_start FUN_02061b8c
FUN_02061b8c: ; 0x02061B8C
	push {r3, lr}
	ldr ip, [r0, #0x14]
	add r0, r0, #0x4c
	tst ip, #1
	addne r1, r1, #0x8000
	bl FUN_020634b0
	pop {r3, pc}
	arm_func_end FUN_02061b8c

	arm_func_start FUN_02061ba8
FUN_02061ba8: ; 0x02061BA8
	push {r3, lr}
	ldr ip, [r0, #0x14]
	add r0, r0, #0x4c
	tst ip, #1
	addne r1, r1, #0x8000
	bl FUN_02063554
	pop {r3, pc}
	arm_func_end FUN_02061ba8

	arm_func_start FUN_02061bc4
FUN_02061bc4: ; 0x02061BC4
	push {r3, lr}
	ldr r1, [r0, #0x12c]
	cmp r1, #1
	ldrbeq r1, [r0, #0x131]
	cmpeq r1, #0
	moveq r0, #0
	popeq {r3, pc}
	add r0, r0, #0x4c
	bl FUN_02063498
	pop {r3, pc}
	arm_func_end FUN_02061bc4

	arm_func_start FUN_02061bec
FUN_02061bec: ; 0x02061BEC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	add r5, sp, #0
	mov r7, r0
	mov r0, r5
	mov r1, #0xfe
	mov r2, #0x10
	bl MemWrite
	mov r6, #0
	mov r4, #0x10
	arm_func_end FUN_02061bec
_02061C14:
	lsl r1, r6, #0xf
	mov r2, r4
	mov r3, r5
	add r0, r7, #0x4c
	add r1, r1, #4
	bl FUN_02063554
	add r6, r6, #1
	cmp r6, #2
	blt _02061C14
	mov r0, #0
	strb r0, [r7, #0x24]
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02061c48
FUN_02061c48: ; 0x02061C48
	push {r4, lr}
	mov r4, r0
	add r0, r4, #0x4c
	bl FUN_02063468
	cmp r0, #0
	ldrbne r0, [r4, #0x24]
	mvneq r0, #0x7c
	pop {r4, pc}
	arm_func_end FUN_02061c48

	arm_func_start FUN_02061c68
FUN_02061c68: ; 0x02061C68
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r1
	mov r5, r0
	mov r4, r2
	beq _02061CA4
	ldr r1, _02061D14 ; =0x02090FE0
	add r0, r6, #4
	bl _strcpy
	mov r3, #0x40
	mov r0, r5
	add r1, r6, #4
	mov r2, #0x3c
	str r3, [r6, #0x1c]
	bl FUN_02063018
	str r0, [r6]
	arm_func_end FUN_02061c68
_02061CA4:
	cmp r4, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr lr, _02061D18 ; =0x0000598C
	ldr r7, _02061D1C ; =0x19150A04
	ldr r6, _02061D20 ; =0x00004FD8
	mov r0, r5
	add r3, r4, #0x5000
	mov ip, #2
	add r1, r4, #0x80
	sub r2, lr, #0x80
	str r7, [r4, #8]
	str lr, [r4, #0xc]
	str r6, [r4, #0x50]
	str ip, [r3, #0x98c]
	bl FUN_02063018
	add r1, r4, #0x18c
	str r0, [r4, #4]
	mov r0, r5
	mov r2, r6
	add r1, r1, #0x5800
	bl FUN_02063018
	str r0, [r4, #0x4c]
	mov r0, r5
	add r1, r4, #4
	mov r2, #0x7c
	bl FUN_02063018
	str r0, [r4]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02061D14: .word 0x02090FE0
_02061D18: .word 0x0000598C
_02061D1C: .word 0x19150A04
_02061D20: .word 0x00004FD8

	arm_func_start FUN_02061d24
FUN_02061d24: ; 0x02061D24
	push {r4, r5, r6, r7, r8, lr}
	movs r8, r1
	mov r7, r0
	mov r6, r2
	mov r5, r3
	mov r4, #1
	beq _02061D7C
	ldr r1, _02061E1C ; =0x02090FF0
	add r0, r8, #4
	bl _strcmp
	cmp r0, #0
	ldr r0, [r8, #0x1c]
	movne r4, #0
	cmp r0, #0x40
	mov r0, r7
	add r1, r8, #4
	mov r2, #0x3c
	movne r4, #0
	bl FUN_02063018
	ldr r1, [r8]
	cmp r0, r1
	movne r4, #0
	arm_func_end FUN_02061d24
_02061D7C:
	cmp r6, #0
	beq _02061E14
	ldr r1, [r6, #8]
	ldr r0, _02061E20 ; =0x19150A04
	mov r2, #0x7c
	cmp r1, r0
	ldr r1, [r6, #0xc]
	ldr r0, _02061E24 ; =0x0000598C
	movne r4, #0
	cmp r1, r0
	ldr r1, [r6, #0x50]
	ldr r0, _02061E28 ; =0x00004FD8
	movne r4, #0
	cmp r1, r0
	mov r0, r7
	add r1, r6, #4
	movne r4, #0
	bl FUN_02063018
	ldr r1, [r6]
	ldr r2, _02061E2C ; =0x0000590C
	cmp r0, r1
	mov r0, r7
	add r1, r6, #0x80
	movne r4, #0
	bl FUN_02063018
	ldr r1, [r6, #4]
	cmp r0, r1
	movne r4, #0
	cmp r5, #0
	beq _02061E14
	add r1, r6, #0x18c
	ldr r2, _02061E28 ; =0x00004FD8
	mov r0, r7
	add r1, r1, #0x5800
	bl FUN_02063018
	ldr r1, [r6, #0x4c]
	cmp r0, r1
	movne r4, #0
_02061E14:
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02061E1C: .word 0x02090FF0
_02061E20: .word 0x19150A04
_02061E24: .word 0x0000598C
_02061E28: .word 0x00004FD8
_02061E2C: .word 0x0000590C

	arm_func_start FUN_02061e30
FUN_02061e30: ; 0x02061E30
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldrb r0, [sl, #0x25]
	mov sb, r1
	cmp r0, #0
	bne _02061E5C
	add r0, sb, #0x18c
	ldr r2, _02061FA0 ; =0x00004FD8
	add r0, r0, #0x5800
	mov r1, #0
	bl MemWrite
	arm_func_end FUN_02061e30
_02061E5C:
	ldr r1, [sl, #0x14]
	mov r6, #1
	ldr r0, [sl, #0x40]
	add r1, r1, #1
	str r0, [sl, #0x18]
	ldr r4, _02061FA4 ; =0x02090DB4
	strb r6, [sl, #0x25]
	strb r6, [sl, #0x24]
	str r1, [sl, #0x14]
	ldr r1, [r4, #0x20]
	mov r0, sl
	bl FUN_0206162c
	ldr r1, [r4, #0x1c]
	mov r0, sb
	bl FUN_0206162c
	add r0, sb, #0x18c
	ldr r1, [r4, #0x18]
	add r0, r0, #0x5800
	bl FUN_0206162c
	mov r0, sl
	mov r1, sl
	mov r2, sb
	bl FUN_02061c68
	ldr r1, _02061FA8 ; =0x00007F80
	mov r0, sl
	bl FUN_02062f94
	mov r8, r0
	sub r5, r6, #2
	ldr r2, _02061FA8 ; =0x00007F80
	mov r0, r5
	mov r1, r8
	bl FUN_0200787c
	mov r7, #0
	str r7, [sp]
	ldr r2, [r4, #0x20]
	mov r0, sl
	mov r1, r8
	mov r3, r5
	bl FUN_020616a4
	mov fp, r0
	str r7, [sp]
	ldr r2, [r4, #0x1c]
	mov r0, sb
	add r1, r8, fp
	mov r3, r5
	bl FUN_020616a4
	add r0, fp, r0
	str r7, [sp]
	add r1, r8, r0
	add r0, sb, #0x18c
	ldr r2, [r4, #0x18]
	mov r3, r5
	add r0, r0, #0x5800
	bl FUN_020616a4
	ldr r2, _02061FA8 ; =0x00007F80
	mov r0, r6
	mov r1, r8
	bl FUN_0205ffb0
	ldr r2, _02061FA8 ; =0x00007F80
	mov r0, sl
	mov r1, r7
	mov r3, r8
	bl FUN_02061ba8
	cmp r0, #0
	beq _02061F74
	ldr r1, _02061FAC ; =0x020A17F0
	mov r0, sb
	mov r2, #0x80
	bl _memcpy
	b _02061F8C
_02061F74:
	mov r4, #0x80
	ldr r0, _02061FAC ; =0x020A17F0
	mov r1, r7
	mov r2, r4
	bl MemWrite
	sub r7, r4, #0xfc
_02061F8C:
	mov r0, sl
	mov r1, r8
	bl FUN_02062fc8
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02061FA0: .word 0x00004FD8
_02061FA4: .word 0x02090DB4
_02061FA8: .word 0x00007F80
_02061FAC: .word 0x020A17F0

	arm_func_start FUN_02061fb0
FUN_02061fb0: ; 0x02061FB0
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x40
	ldr r7, _02062080 ; =0x00007F80
	mov r8, r1
	mov r1, r7
	mov r4, r0
	bl FUN_02062f94
	mov r6, r0
	mov r5, #0
	mov r0, r4
	mov r1, r5
	mov r2, r7
	mov r3, r6
	bl FUN_02061b8c
	cmp r0, #0
	bne _02062008
	mov r0, r4
	mov r1, r6
	bl FUN_02062fc8
	add sp, sp, #0x40
	sub r0, r5, #0x7c
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02061fb0
_02062008:
	mov r0, r5
	mov r1, r6
	mov r2, r7
	bl FUN_0205ffb0
	ldr r2, _02062084 ; =0x0000FFC0
	mov r0, r8
	mov r1, r5
	bl MemWrite
	ldr r5, _02062088 ; =0x02090DB4
	add r1, sp, #0
	ldr r2, [r5, #0x20]
	mov r0, r6
	bl FUN_02061750
	add r7, r6, r0
	ldr r2, [r5, #0x1c]
	mov r0, r7
	mov r1, r8
	bl FUN_02061750
	add r1, r8, #0x18c
	ldr r2, [r5, #0x18]
	add r0, r7, r0
	add r1, r1, #0x5800
	bl FUN_02061750
	mov r1, r6
	mov r0, r4
	bl FUN_02062fc8
	mov r0, r4
	bl FUN_0206296c
	add sp, sp, #0x40
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02062080: .word 0x00007F80
_02062084: .word 0x0000FFC0
_02062088: .word 0x02090DB4

	arm_func_start FUN_0206208c
FUN_0206208c: ; 0x0206208C
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r4, #0x4000
	mov r6, r0
	mov r5, #0
	mov r2, #1
	mov r1, r4
	strb r5, [r6, #0x131]
	strb r5, [r6, #0x130]
	str r2, [r6, #0x12c]
	bl FUN_02062f94
	str r0, [r6, #0x128]
	str r4, [sp]
	mov r0, #0x1e
	str r0, [sp, #4]
	ldr r3, [r6, #0x128]
	ldr r1, _020620F4 ; =LAB_020630d4
	mov r2, r6
	add r0, r6, #0x68
	add r3, r3, #0x4000
	bl FUN_02001948
	add r0, r6, #0x68
	bl FUN_02001ce0
	mov r0, r5
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_020620F4: .word LAB_020630d4
	arm_func_end FUN_0206208c

	arm_func_start FUN_020620f8
FUN_020620f8: ; 0x020620F8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x18
	mov r5, r0
	ldr r0, [r5, #0x12c]
	mov r4, r1
	cmp r0, #1
	addeq sp, sp, #0x18
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r5, #0x4c
	bl FUN_02063468
	cmp r0, #0
	addeq sp, sp, #0x18
	mvneq r0, #0x7c
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r2, _02062688 ; =0x0000FFC0
	mov r0, r4
	mov r1, #0
	str r4, [r5, #0x44]
	bl MemWrite
	add r7, r4, #0x80
	ldr r8, _0206268C ; =0x020A0700
	mov r3, r7
	add r6, r4, #0x18c
	mov r2, #0x200
	arm_func_end FUN_020620f8
_0206215C:
	ldrb r1, [r8]
	ldrb r0, [r8, #1]
	add r8, r8, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _0206215C
	ldr ip, _02062690 ; =0x020A0B00
	add sb, r7, #0x400
	mov r8, #0x13
_02062184:
	ldm ip!, {r0, r1, r2, r3}
	stm sb!, {r0, r1, r2, r3}
	subs r8, r8, #1
	bne _02062184
	ldm ip, {r0, r1, r2}
	stm sb, {r0, r1, r2}
	add r3, r7, #0x13c
	ldr r8, _02062694 ; =0x020A0C3C
	add r3, r3, #0x400
	mov r2, #0x14
_020621AC:
	ldrb r1, [r8]
	ldrb r0, [r8, #1]
	add r8, r8, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _020621AC
	ldr r1, _02062698 ; =0x020A0640
	add r0, r7, #0x168
	ldrb sb, [r1, #0x624]
	ldrb r2, [r1, #0x625]
	add r3, r0, #0x400
	ldr r8, _0206269C ; =0x020A0C68
	strb r2, [r7, #0x565]
	strb sb, [r7, #0x564]
	ldrb sb, [r1, #0x626]
	ldrb r0, [r1, #0x627]
	mov r2, #0xa4
	strb sb, [r7, #0x566]
	strb r0, [r7, #0x567]
_020621FC:
	ldrb r1, [r8]
	ldrb r0, [r8, #1]
	add r8, r8, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _020621FC
	ldr r8, _020626A0 ; =0x020A0DB0
	add r3, r7, #0x6b0
	mov r2, #0xa4
_02062224:
	ldrb r1, [r8]
	ldrb r0, [r8, #1]
	add r8, r8, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02062224
	add r0, r7, #0x3f8
	ldr r8, _020626A4 ; =0x020A0EF8
	add r3, r0, #0x400
	mov r2, #0xc9
_02062250:
	ldrb r1, [r8]
	ldrb r0, [r8, #1]
	add r8, r8, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02062250
	add r0, r7, #0x8a
	ldr r8, _020626A8 ; =0x020A108A
	add r3, r0, #0x900
	mov r2, #0xa4
_0206227C:
	ldrb r1, [r8]
	ldrb r0, [r8, #1]
	add r8, r8, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _0206227C
	ldr r2, _020626AC ; =0x020A1140
	add r1, r7, #0x2dc
	ldrh r8, [r2, #0x92]
	ldrh r3, [r2, #0x94]
	add r0, r7, #0xa00
	ldr ip, _020626B0 ; =0x020A11DC
	strh r8, [r0, #0xd2]
	strh r3, [r0, #0xd4]
	ldrh r3, [r2, #0x96]
	ldrh r2, [r2, #0x98]
	add sb, r1, #0x800
	mov r8, #9
	strh r3, [r0, #0xd6]
	strh r2, [r0, #0xd8]
_020622D0:
	ldm ip!, {r0, r1, r2, r3}
	stm sb!, {r0, r1, r2, r3}
	subs r8, r8, #1
	bne _020622D0
	ldm ip, {r0, r1, r2}
	stm sb, {r0, r1, r2}
	add r3, r7, #0x378
	ldr r8, _020626B4 ; =0x020A1278
	add r3, r3, #0x800
	mov r2, #0xe
_020622F8:
	ldrh r1, [r8]
	ldrh r0, [r8, #2]
	add r8, r8, #4
	subs r2, r2, #1
	strh r0, [r3, #2]
	strh r1, [r3], #4
	bne _020622F8
	ldrh r2, [r8]
	ldr r1, _020626B8 ; =0x020A1240
	add r0, r7, #0xb00
	strh r2, [r3]
	ldrh r3, [r1, #0x72]
	ldrh r2, [r1, #0x74]
	ldr ip, _020626BC ; =0x020A12C0
	add sb, r7, #0xbc0
	strh r3, [r0, #0xb2]
	strh r2, [r0, #0xb4]
	ldrh r3, [r1, #0x76]
	ldrh r2, [r1, #0x78]
	mov r8, #0x34
	strh r3, [r0, #0xb6]
	strh r2, [r0, #0xb8]
	ldrh r2, [r1, #0x7a]
	ldrh r1, [r1, #0x7c]
	strh r2, [r0, #0xba]
	strh r1, [r0, #0xbc]
_02062360:
	ldm ip!, {r0, r1, r2, r3}
	stm sb!, {r0, r1, r2, r3}
	subs r8, r8, #1
	bne _02062360
	ldm ip, {r0, r1}
	stm sb, {r0, r1}
	ldr r3, _02062698 ; =0x020A0640
	add r1, r7, #0x12
	ldrb sb, [r3, #0xfc8]
	ldrb r8, [r3, #0xfc9]
	ldr r2, _020626C0 ; =0x020A1540
	add r0, r7, #0xf00
	strb sb, [r7, #0xf08]
	strb r8, [r7, #0xf09]
	ldrb lr, [r3, #0xfca]
	ldrb r8, [r3, #0xfcb]
	add sb, r1, #0xf00
	ldr ip, _020626C4 ; =0x020A1612
	strb r8, [r7, #0xf0b]
	strb lr, [r7, #0xf0a]
	ldrb lr, [r3, #0xfcc]
	ldrb r1, [r3, #0xfcd]
	mov r8, #0x1e
	strb lr, [r7, #0xf0c]
	strb r1, [r7, #0xf0d]
	ldrb lr, [r3, #0xfce]
	ldrb r1, [r3, #0xfcf]
	strb lr, [r7, #0xf0e]
	strb r1, [r7, #0xf0f]
	ldrh r1, [r2, #0xd0]
	strh r1, [r0, #0x10]
_020623DC:
	ldrb r1, [ip]
	ldrb r0, [ip, #1]
	add ip, ip, #2
	subs r8, r8, #1
	strb r0, [sb, #1]
	strb r1, [sb], #2
	bne _020623DC
	ldr r2, _020626C8 ; =0x020A1640
	add r1, r7, #0x364
	ldrh r3, [r2, #0xe]
	add r0, r7, #0xf00
	add ip, r1, #0xc00
	strh r3, [r0, #0x4e]
	ldrh r3, [r2, #0x10]
	ldr lr, _020626CC ; =0x020A1664
	mov r8, #0x14
	strh r3, [r0, #0x50]
	ldrb r1, [r2, #0x12]
	strb r1, [r7, #0xf52]
	ldrb r1, [r2, #0x13]
	strb r1, [r7, #0xf53]
	ldrh r1, [r2, #0x14]
	strh r1, [r0, #0x54]
	ldrh r3, [r2, #0x16]
	ldrh r1, [r2, #0x18]
	strh r3, [r0, #0x56]
	strh r1, [r0, #0x58]
	ldrh r1, [r2, #0x1a]
	strh r1, [r0, #0x5a]
	ldrh r3, [r2, #0x1c]
	ldrh r1, [r2, #0x1e]
	strh r3, [r0, #0x5c]
	strh r1, [r0, #0x5e]
	ldrh r1, [r2, #0x20]
	strh r1, [r0, #0x60]
	ldrb r0, [r2, #0x22]
	strb r0, [r7, #0xf62]
	ldrb r0, [r2, #0x23]
	strb r0, [r7, #0xf63]
_02062478:
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	subs r8, r8, #1
	bne _02062478
	ldr r1, [lr]
	add r0, r7, #0xa8
	ldr sb, _020626D0 ; =0x020A17A8
	str r1, [ip]
	add r8, r0, #0x1000
	ldm sb!, {r0, r1, r2, r3}
	stm r8!, {r0, r1, r2, r3}
	add r1, r7, #8
	ldr r2, [sb]
	ldr r0, _020626D4 ; =0x020A9C40
	add r1, r1, #0x4800
	str r2, [r8]
	bl FUN_020455b8
	add r1, r7, #0xc4
	ldr r0, _020626D8 ; =0x020AF81C
	add r1, r1, #0x5000
	bl FUN_020444a0
	add r1, r7, #0x8d0
	ldr r0, _020626DC ; =0x0209AC44
	add r1, r1, #0x5000
	bl FUN_0202bcb0
	ldr r0, _020626E0 ; =0x0209BA20
	mov r1, r7
	bl FUN_02072b54
	ldr r0, _020626E4 ; =0x02099ED8
	add r1, r7, #0x3e8
	ldr r0, [r0]
	add r1, r1, #0x3800
	bl FUN_020560b4
	ldr r0, _020626E8 ; =0x02099EE8
	add r1, r7, #0x208
	ldr r0, [r0]
	add r1, r1, #0x4000
	bl FUN_0205feb8
	ldr r0, _02062698 ; =0x020A0640
	add r1, r6, #0x5800
	bl FUN_02063248
	ldr r2, _020626EC ; =0x020A1740
	add r0, r7, #0x5800
	ldrsh r6, [r2, #0x7c]
	ldr r3, _020626C8 ; =0x020A1640
	add r1, r7, #0x5000
	strh r6, [r0, #0xdc]
	ldrsh r8, [r2, #0x7e]
	ldr r6, _020626F0 ; =0x020A17C1
	add r2, r7, #0xe1
	strh r8, [r0, #0xde]
	ldrb r0, [r3, #0x180]
	add r3, r2, #0x5800
	mov r2, #0x15
	strb r0, [r1, #0x8e0]
_02062554:
	ldrb r1, [r6]
	ldrb r0, [r6, #1]
	add r6, r6, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02062554
	ldrb r2, [r6]
	ldr r1, _02062688 ; =0x0000FFC0
	mov r0, r7
	strb r2, [r3]
	bl FUN_020026d0
	ldr r6, _02062698 ; =0x020A0640
	ldr sb, _020626E0 ; =0x0209BA20
	ldr r0, [r6, #0x4dc]
	mov r8, #0
	str r0, [r4, #0x10]
	ldrb r2, [r6, #0x50a]
	mov r0, sb
	mov r1, r8
	strb r2, [r4, #0x14]
	bl FUN_020724c8
	strb r0, [r4, #0x15]
	mov r0, sb
	mov r1, r8
	bl FUN_0204c4cc
	strb r0, [r4, #0x16]
	mov r0, sb
	mov r1, r8
	bl FUN_0204c420
	strb r0, [r4, #0x17]
	mov r0, sb
	bl FUN_020EDF7C
	str r0, [r4, #0x18]
	ldr r1, [r6, #0x4e4]
	add r0, r6, #0x400
	str r1, [r4, #0x48]
	ldrsb r2, [r0, #0xec]
	ldr r1, _02062690 ; =0x020A0B00
	add r0, r4, #0x1c
	strb r2, [r4, #0x45]
	str r8, [r4, #0x54]
	bl _strcpy
	add r1, r7, #0x2ec
	add r0, r4, #0x34
	add r1, r1, #0x3800
	bl _strcpy
	mov r0, r8
	add r1, r4, #0x58
	mov r2, #8
	bl FUN_02007804
	add r0, r7, #0x1e8
	add ip, r0, #0x4000
	add r7, sp, #0
	ldm ip!, {r0, r1, r2, r3}
	mov r6, r7
	stm r7!, {r0, r1, r2, r3}
	ldm ip, {r0, r1}
	stm r7, {r0, r1}
	ldr r7, _020626E4 ; =0x02099ED8
	b _02062664
_02062648:
	ldr r1, [r6, r8, lsl #2]
	ldr r0, [r7]
	bl FUN_020552cc
	add r1, r4, r8, lsl #1
	ldrh r0, [r0, #0x20]
	add r8, r8, #1
	strh r0, [r1, #0x58]
_02062664:
	ldrsb r0, [sp, #0x14]
	cmp r8, r0
	blt _02062648
	mov r1, #0
	mov r0, r5
	str r1, [r5, #0x48]
	bl FUN_0206208c
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02062688: .word 0x0000FFC0
_0206268C: .word 0x020A0700
_02062690: .word 0x020A0B00
_02062694: .word 0x020A0C3C
_02062698: .word 0x020A0640
_0206269C: .word 0x020A0C68
_020626A0: .word 0x020A0DB0
_020626A4: .word 0x020A0EF8
_020626A8: .word 0x020A108A
_020626AC: .word 0x020A1140
_020626B0: .word 0x020A11DC
_020626B4: .word 0x020A1278
_020626B8: .word 0x020A1240
_020626BC: .word 0x020A12C0
_020626C0: .word 0x020A1540
_020626C4: .word 0x020A1612
_020626C8: .word 0x020A1640
_020626CC: .word 0x020A1664
_020626D0: .word 0x020A17A8
_020626D4: .word 0x020A9C40
_020626D8: .word 0x020AF81C
_020626DC: .word 0x0209AC44
_020626E0: .word 0x0209BA20
_020626E4: .word 0x02099ED8
_020626E8: .word 0x02099EE8
_020626EC: .word 0x020A1740
_020626F0: .word 0x020A17C1

	arm_func_start FUN_020626f4
FUN_020626f4: ; 0x020626F4
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x12c]
	mov r4, r2
	cmp r0, #1
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	add r0, r5, #0x4c
	bl FUN_02063468
	cmp r0, #0
	mvneq r0, #0x7c
	popeq {r3, r4, r5, pc}
	ldr r1, _02062798 ; =0x0000FFC0
	add r0, r4, #0x80
	str r4, [r5, #0x44]
	bl FUN_020026d0
	ldr r1, _0206279C ; =0x020A1640
	ldr r0, _020627A0 ; =0x020A0640
	ldr r3, [r1, #0x248]
	ldrb r2, [r4, #0x4ca]
	ldr r1, [r4, #0x494]
	str r3, [r4, #0x10]
	strb r2, [r4, #0x14]
	str r1, [r4, #0x18]
	ldr r1, [r0, #0x4e4]
	add r0, r0, #0x400
	str r1, [r4, #0x48]
	ldrsb r2, [r0, #0xec]
	add r0, r4, #0x1c
	add r1, r4, #0x480
	strb r2, [r4, #0x45]
	bl _strcpy
	add r1, r4, #0x36c
	add r0, r4, #0x34
	add r1, r1, #0x3800
	bl _strcpy
	mov r1, #1
	mov r0, r5
	str r1, [r5, #0x48]
	bl FUN_0206208c
	pop {r3, r4, r5, pc}
	.align 2, 0_02062798: .word 0x0000FFC0
_0206279C: .word 0x020A1640
_020627A0: .word 0x020A0640
	arm_func_end FUN_020626f4

	arm_func_start FUN_020627a4
FUN_020627a4: ; 0x020627A4
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x128]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	add r0, r4, #0x68
	bl FUN_02001c14
	cmp r0, #0
	moveq r0, #1
	popeq {r4, pc}
	ldr r1, [r4, #0x128]
	mov r0, r4
	bl FUN_02062fc8
	ldr r0, [r4, #0x12c]
	mov r1, #0
	cmp r0, #0
	ldrne r0, [r4, #0x14]
	str r1, [r4, #0x128]
	subne r0, r0, #1
	strne r0, [r4, #0x14]
	ldr r0, [r4, #0x12c]
	pop {r4, pc}
	arm_func_end FUN_020627a4

	arm_func_start FUN_02062800
FUN_02062800: ; 0x02062800
	push {r3, lr}
	ldr r0, _02062818 ; =0x020A17F0
	mov r2, #0x80
	bl _memcpy
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_02062818: .word 0x020A17F0
	arm_func_end FUN_02062800

	arm_func_start FUN_0206281c
FUN_0206281c: ; 0x0206281C
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	mov r4, #0x4000
	mov r6, r0
	mov r2, #1
	mov r5, #0
	mov r1, r4
	strb r2, [r6, #0x131]
	strb r5, [r6, #0x130]
	str r2, [r6, #0x12c]
	bl FUN_02062f94
	str r0, [r6, #0x128]
	str r4, [sp]
	mov r0, #0x1e
	str r0, [sp, #4]
	ldr r3, [r6, #0x128]
	ldr r1, _02062884 ; =LAB_020630d4
	mov r2, r6
	add r0, r6, #0x68
	add r3, r3, #0x4000
	bl FUN_02001948
	add r0, r6, #0x68
	bl FUN_02001ce0
	mov r0, r5
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_02062884: .word LAB_020630d4
	arm_func_end FUN_0206281c

	arm_func_start FUN_02062888
FUN_02062888: ; 0x02062888
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x12c]
	mov r4, r1
	cmp r0, #1
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	add r0, r5, #0x4c
	bl FUN_02063468
	cmp r0, #0
	mvneq r0, #0x7c
	popeq {r3, r4, r5, pc}
	cmp r4, #0
	str r4, [r5, #0x44]
	mvneq r0, #0x78
	popeq {r3, r4, r5, pc}
	mov r1, #0
	mov r0, r5
	str r1, [r5, #0x48]
	bl FUN_0206281c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02062888

	arm_func_start FUN_020628dc
FUN_020628dc: ; 0x020628DC
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5, #0x12c]
	mov r4, r2
	cmp r0, #1
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	add r0, r5, #0x4c
	bl FUN_02063468
	cmp r0, #0
	mvneq r0, #0x7c
	popeq {r3, r4, r5, pc}
	mov r1, #1
	mov r0, r5
	str r4, [r5, #0x44]
	str r1, [r5, #0x48]
	bl FUN_0206281c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020628dc

	arm_func_start FUN_02062924
FUN_02062924: ; 0x02062924
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x128]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, pc}
	add r0, r4, #0x68
	bl FUN_02001c14
	cmp r0, #0
	moveq r0, #1
	popeq {r4, pc}
	ldr r1, [r4, #0x128]
	mov r0, r4
	bl FUN_02062fc8
	mov r1, #0
	ldr r0, [r4, #0x12c]
	str r1, [r4, #0x128]
	pop {r4, pc}
	arm_func_end FUN_02062924

	arm_func_start FUN_0206296c
FUN_0206296c: ; 0x0206296C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, r0
	ldr r0, [r4, #0x44]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r4, #0x4c
	bl FUN_02063498
	cmp r0, #0
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r8, [r4, #0x44]
	ldr r1, _02062F18 ; =0x0000FFC0
	mov r0, r8
	add r7, r8, #0x80
	add r5, r8, #0x18c
	bl FUN_020026d0
	mov r6, #0
	ldrb r3, [r4, #0x25]
	mov r0, r4
	mov r1, r6
	mov r2, r8
	bl FUN_02061d24
	cmp r0, #0
	streq r6, [r4, #0x44]
	strbeq r6, [r4, #0x24]
	strbeq r6, [r4, #0x25]
	subeq r0, r6, #0x7a
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r0, r7, #0x5000
	ldr r1, [r0, #0x444]
	add r0, r7, #0x44
	cmp r1, #0
	add r1, r0, #0x5400
	ldreq r0, [r1, #4]
	add r2, r7, #0xd4
	cmpeq r0, #0
	moveq r0, #2
	stmeq r1, {r0, r6}
	add r0, r7, #0xd30
	ldr r1, _02062F1C ; =0x02091000
	add r0, r0, #0x4000
	add r6, r2, #0x5400
	bl FUN_02023fe0
	cmp r0, #0
	beq _02062A38
	ldr r0, [r6]
	cmp r0, #0
	ldreq r0, [r6, #4]
	cmpeq r0, #0
	bne _02062A48
	arm_func_end FUN_0206296c
_02062A38:
	mov r1, #1
	ldr r0, _02062F20 ; =0x01F76394
	str r1, [r6]
	str r0, [r6, #4]
_02062A48:
	ldr r0, [r4, #0x48]
	cmp r0, #0
	bne _02062EF8
	ldr r3, _02062F24 ; =0x020A0700
	mov r6, r7
	mov r2, #0x200
_02062A60:
	ldrb r1, [r6]
	ldrb r0, [r6, #1]
	add r6, r6, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02062A60
	ldr sb, _02062F28 ; =0x020A0B00
	add ip, r7, #0x400
	mov r6, #0x13
_02062A88:
	ldm ip!, {r0, r1, r2, r3}
	stm sb!, {r0, r1, r2, r3}
	subs r6, r6, #1
	bne _02062A88
	ldm ip, {r0, r1, r2}
	stm sb, {r0, r1, r2}
	add r3, r7, #0x13c
	ldr r6, _02062F2C ; =0x020A0C3C
	add r3, r3, #0x400
	mov r2, #0x14
_02062AB0:
	ldrb r1, [r3]
	ldrb r0, [r3, #1]
	add r3, r3, #2
	subs r2, r2, #1
	strb r0, [r6, #1]
	strb r1, [r6], #2
	bne _02062AB0
	ldrb r3, [r7, #0x564]
	ldrb r2, [r7, #0x565]
	ldr r1, _02062F30 ; =0x020A0640
	add r0, r7, #0x168
	strb r3, [r1, #0x624]
	strb r2, [r1, #0x625]
	ldrb sb, [r7, #0x566]
	ldrb r2, [r7, #0x567]
	ldr r3, _02062F34 ; =0x020A0C68
	add r6, r0, #0x400
	strb sb, [r1, #0x626]
	strb r2, [r1, #0x627]
	mov r2, #0xa4
_02062B00:
	ldrb r1, [r6]
	ldrb r0, [r6, #1]
	add r6, r6, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02062B00
	ldr r3, _02062F38 ; =0x020A0DB0
	add r6, r7, #0x6b0
	mov r2, #0xa4
_02062B28:
	ldrb r1, [r6]
	ldrb r0, [r6, #1]
	add r6, r6, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02062B28
	add r0, r7, #0x3f8
	ldr r3, _02062F3C ; =0x020A0EF8
	add r6, r0, #0x400
	mov r2, #0xc9
_02062B54:
	ldrb r1, [r6]
	ldrb r0, [r6, #1]
	add r6, r6, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02062B54
	add r0, r7, #0x8a
	ldr r3, _02062F40 ; =0x020A108A
	add r6, r0, #0x900
	mov r2, #0xa4
_02062B80:
	ldrb r1, [r6]
	ldrb r0, [r6, #1]
	add r6, r6, #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02062B80
	add r0, r7, #0xa00
	ldrh r6, [r0, #0xd2]
	ldrh r3, [r0, #0xd4]
	ldr r2, _02062F44 ; =0x020A1140
	add r1, r7, #0x2dc
	strh r6, [r2, #0x92]
	strh r3, [r2, #0x94]
	ldrh r3, [r0, #0xd6]
	ldrh r0, [r0, #0xd8]
	ldr sb, _02062F48 ; =0x020A11DC
	add ip, r1, #0x800
	strh r3, [r2, #0x96]
	strh r0, [r2, #0x98]
	mov r6, #9
_02062BD4:
	ldm ip!, {r0, r1, r2, r3}
	stm sb!, {r0, r1, r2, r3}
	subs r6, r6, #1
	bne _02062BD4
	ldm ip, {r0, r1, r2}
	stm sb, {r0, r1, r2}
	add r3, r7, #0x378
	ldr r6, _02062F4C ; =0x020A1278
	add r3, r3, #0x800
	mov r2, #0xe
_02062BFC:
	ldrh r1, [r3]
	ldrh r0, [r3, #2]
	add r3, r3, #4
	subs r2, r2, #1
	strh r0, [r6, #2]
	strh r1, [r6], #4
	bne _02062BFC
	ldrh r2, [r3]
	add r0, r7, #0xb00
	ldr r1, _02062F50 ; =0x020A1240
	strh r2, [r6]
	ldrh r3, [r0, #0xb2]
	ldrh r2, [r0, #0xb4]
	ldr sb, _02062F54 ; =0x020A12C0
	add ip, r7, #0xbc0
	strh r3, [r1, #0x72]
	strh r2, [r1, #0x74]
	ldrh r3, [r0, #0xb6]
	ldrh r2, [r0, #0xb8]
	mov r6, #0x34
	strh r3, [r1, #0x76]
	strh r2, [r1, #0x78]
	ldrh r2, [r0, #0xba]
	ldrh r0, [r0, #0xbc]
	strh r2, [r1, #0x7a]
	strh r0, [r1, #0x7c]
_02062C64:
	ldm ip!, {r0, r1, r2, r3}
	stm sb!, {r0, r1, r2, r3}
	subs r6, r6, #1
	bne _02062C64
	ldm ip, {r0, r1}
	stm sb, {r0, r1}
	ldrb r2, [r7, #0xf08]
	ldrb r0, [r7, #0xf09]
	ldr r3, _02062F30 ; =0x020A0640
	add r1, r7, #0x12
	strb r2, [r3, #0xfc8]
	strb r0, [r3, #0xfc9]
	ldrb sb, [r7, #0xf0a]
	ldrb r6, [r7, #0xf0b]
	add lr, r1, #0xf00
	add r0, r7, #0xf00
	strb sb, [r3, #0xfca]
	strb r6, [r3, #0xfcb]
	ldrb sb, [r7, #0xf0c]
	ldrb r6, [r7, #0xf0d]
	ldr r2, _02062F58 ; =0x020A1540
	ldr ip, _02062F5C ; =0x020A1612
	strb sb, [r3, #0xfcc]
	strb r6, [r3, #0xfcd]
	ldrb sb, [r7, #0xf0e]
	ldrb r1, [r7, #0xf0f]
	mov r6, #0x1e
	strb sb, [r3, #0xfce]
	strb r1, [r3, #0xfcf]
	ldrh r0, [r0, #0x10]
	strh r0, [r2, #0xd0]
_02062CE0:
	ldrb r1, [lr]
	ldrb r0, [lr, #1]
	add lr, lr, #2
	subs r6, r6, #1
	strb r0, [ip, #1]
	strb r1, [ip], #2
	bne _02062CE0
	add r0, r7, #0xf00
	ldrh r3, [r0, #0x4e]
	ldr r2, _02062F60 ; =0x020A1640
	add r1, r7, #0x364
	strh r3, [r2, #0xe]
	ldrh r3, [r0, #0x50]
	add lr, r1, #0xc00
	ldr ip, _02062F64 ; =0x020A1664
	strh r3, [r2, #0x10]
	ldrb r1, [r7, #0xf52]
	mov r6, #0x14
	strb r1, [r2, #0x12]
	ldrb r1, [r7, #0xf53]
	strb r1, [r2, #0x13]
	ldrh r1, [r0, #0x54]
	strh r1, [r2, #0x14]
	ldrh r3, [r0, #0x56]
	ldrh r1, [r0, #0x58]
	strh r3, [r2, #0x16]
	strh r1, [r2, #0x18]
	ldrh r1, [r0, #0x5a]
	strh r1, [r2, #0x1a]
	ldrh r3, [r0, #0x5c]
	ldrh r1, [r0, #0x5e]
	strh r3, [r2, #0x1c]
	strh r1, [r2, #0x1e]
	ldrh r0, [r0, #0x60]
	strh r0, [r2, #0x20]
	ldrb r0, [r7, #0xf62]
	strb r0, [r2, #0x22]
	ldrb r0, [r7, #0xf63]
	strb r0, [r2, #0x23]
_02062D7C:
	ldm lr!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	subs r6, r6, #1
	bne _02062D7C
	ldr r1, [lr]
	add r0, r7, #0xa8
	add r6, r0, #0x1000
	str r1, [ip]
	ldr lr, _02062F68 ; =0x020A17A8
	ldm r6!, {r0, r1, r2, r3}
	stm lr!, {r0, r1, r2, r3}
	ldr r0, [r6]
	ldr r6, _02062F60 ; =0x020A1640
	str r0, [lr]
	ldr r1, [r7, #0x41c]
	add r0, r7, #0x5800
	str r1, [r6, #0x248]
	ldrsh r1, [r0, #0xdc]
	ldr r3, _02062F6C ; =0x020A1740
	add r2, r7, #0x5000
	strh r1, [r3, #0x7c]
	ldrsh ip, [r0, #0xde]
	add r0, r7, #0xe1
	ldr r1, _02062F70 ; =0x020A17C1
	strh ip, [r3, #0x7e]
	ldrb r2, [r2, #0x8e0]
	add ip, r0, #0x5800
	mov r3, #0x15
	strb r2, [r6, #0x180]
_02062DF0:
	ldrb r2, [ip]
	ldrb r0, [ip, #1]
	add ip, ip, #2
	subs r3, r3, #1
	strb r0, [r1, #1]
	strb r2, [r1], #2
	bne _02062DF0
	ldrb r6, [ip]
	add r2, r7, #8
	ldr r3, _02062F60 ; =0x020A1640
	ldr r0, _02062F74 ; =0x020A9C40
	strb r6, [r1]
	mov r6, #0
	add r1, r2, #0x4800
	strb r6, [r3, #0x245]
	bl FUN_0204576c
	add r1, r7, #0xc4
	ldr r0, _02062F78 ; =0x020AF81C
	add r1, r1, #0x5000
	bl FUN_020444dc
	ldr r0, _02062F30 ; =0x020A0640
	ldrb r0, [r0, #0x1a]
	cmp r0, #0
	bne _02062E60
	add r1, r7, #0x8d0
	ldr r0, _02062F7C ; =0x0209AC44
	add r1, r1, #0x5000
	bl FUN_0202bd54
_02062E60:
	ldr r0, _02062F80 ; =0x0209BA20
	mov r1, r7
	bl FUN_02072dcc
	ldr r0, _02062F84 ; =0x02099ED8
	add r1, r7, #0x3e8
	ldr r0, [r0]
	add r1, r1, #0x3800
	bl FUN_02055d68
	ldr r0, _02062F88 ; =0x02099EE8
	add r1, r7, #0x208
	ldr r0, [r0]
	add r1, r1, #0x4000
	bl FUN_0205fee0
	ldr r6, _02062F30 ; =0x020A0640
	add r1, r5, #0x5800
	mov r0, r6
	bl FUN_020630e8
	ldr r1, _02062F60 ; =0x020A1640
	ldr r0, _02062F8C ; =0x02099E8E
	ldrb r1, [r1, #0x180]
	strb r1, [r0]
	ldrb r0, [r6, #0xb92]
	cmp r0, #0
	bne _02062EC8
	mov r0, #2
	b _02062ED4
_02062EC8:
	cmp r0, #1
	bne _02062ED8
	mov r0, #7
_02062ED4:
	bl FUN_02075698
_02062ED8:
	ldr r5, _02062F44 ; =0x020A1140
	ldr r6, _02062F7C ; =0x0209AC44
	ldrh r1, [r5, #0x94]
	mov r0, r6
	bl FUN_0202bb58
	ldrh r1, [r5, #0x96]
	mov r0, r6
	bl FUN_0202bb94
_02062EF8:
	ldr r1, _02062F90 ; =0x020A17F0
	mov r5, #0
	mov r0, r8
	mov r2, #0x80
	str r5, [r4, #0x44]
	bl _memcpy
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02062F18: .word 0x0000FFC0
_02062F1C: .word 0x02091000
_02062F20: .word 0x01F76394
_02062F24: .word 0x020A0700
_02062F28: .word 0x020A0B00
_02062F2C: .word 0x020A0C3C
_02062F30: .word 0x020A0640
_02062F34: .word 0x020A0C68
_02062F38: .word 0x020A0DB0
_02062F3C: .word 0x020A0EF8
_02062F40: .word 0x020A108A
_02062F44: .word 0x020A1140
_02062F48: .word 0x020A11DC
_02062F4C: .word 0x020A1278
_02062F50: .word 0x020A1240
_02062F54: .word 0x020A12C0
_02062F58: .word 0x020A1540
_02062F5C: .word 0x020A1612
_02062F60: .word 0x020A1640
_02062F64: .word 0x020A1664
_02062F68: .word 0x020A17A8
_02062F6C: .word 0x020A1740
_02062F70: .word 0x020A17C1
_02062F74: .word 0x020A9C40
_02062F78: .word 0x020AF81C
_02062F7C: .word 0x0209AC44
_02062F80: .word 0x0209BA20
_02062F84: .word 0x02099ED8
_02062F88: .word 0x02099EE8
_02062F8C: .word 0x02099E8E
_02062F90: .word 0x020A17F0

	arm_func_start FUN_02062f94
FUN_02062f94: ; 0x02062F94
	push {r4, lr}
	ldr r0, _02062FC4 ; =0x0209A250
	mov r4, r1
	mov r2, #0x10
	mov r3, #1
	bl FUN_0202de58
	mov r2, r4
	mov r1, #0
	mov r4, r0
	bl MemWrite
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02062FC4: .word 0x0209A250
	arm_func_end FUN_02062f94

	arm_func_start FUN_02062fc8
FUN_02062fc8: ; 0x02062FC8
	ldr r0, _02062FD4 ; =0x0209A250
	ldr ip, _02062FD8 ; =FUN_0202e1c0
	bx ip
	.align 2, 0_02062FD4: .word 0x0209A250
_02062FD8: .word FUN_0202e1c0
	arm_func_end FUN_02062fc8

	arm_func_start FUN_02062fdc
FUN_02062fdc: ; 0x02062FDC
	push {r4, lr}
	mov lr, #0
	mov r4, lr
	cmp r1, #0
	ble _02063010
	sub r2, r1, #1
	mov ip, #1
	arm_func_end FUN_02062fdc
_02062FF8:
	tst r0, ip, lsl r4
	subne r3, r2, r4
	add r4, r4, #1
	orrne lr, lr, ip, lsl r3
	cmp r4, r1
	blt _02062FF8
_02063010:
	mov r0, lr
	pop {r4, pc}

	arm_func_start FUN_02063018
FUN_02063018: ; 0x02063018
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r4, r2
	cmp r4, #0
	mov r5, r1
	mvn sb, #0
	mov sl, #0
	cmpgt r4, #0
	ble _02063080
	ldr r6, _0206309C ; =0x04C11DB7
	mov r8, #8
	mov r7, sl
	arm_func_end FUN_02063018
_02063044:
	ldrb r0, [r5]
	mov r1, r8
	bl FUN_02062fdc
	mov r1, r7
	eor sb, sb, r0, lsl #24
_02063058:
	tst sb, #0x80000000
	eorne sb, r6, sb, lsl #1
	add r1, r1, #1
	lsleq sb, sb, #1
	cmp r1, #8
	blt _02063058
	add sl, sl, #1
	cmp sl, r4
	add r5, r5, #1
	blt _02063044
_02063080:
	mov r4, #0x20
	mov r0, sb
	mov r1, r4
	bl FUN_02062fdc
	sub r1, r4, #0x21
	eor r0, r0, r1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0206309C: .word 0x04C11DB7

	arm_func_start LAB_020630a0
LAB_020630a0: ; 0x020630A0
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4, #0x131]
	cmp r1, #0
	ldr r1, [r4, #0x44]
	bne _020630C0
	bl FUN_02061e30
	b _020630C4
	arm_func_end LAB_020630a0
_020630C0:
	bl FUN_02061fb0
_020630C4:
	str r0, [r4, #0x12c]
	mov r0, #0
	str r0, [r4, #0x44]
	pop {r4, pc}

	arm_func_start LAB_020630d4
LAB_020630d4: ; 0x020630D4
	ldr ip, _020630DC ; =LAB_020630a0
	bx ip
	.align 2, 0_020630DC: .word LAB_020630a0
	arm_func_end LAB_020630d4

	arm_func_start FUN_020630e0
FUN_020630e0: ; 0x020630E0
	ldr r0, [r0, #0x20]
	bx lr
	arm_func_end FUN_020630e0

	arm_func_start FUN_020630e8
FUN_020630e8: ; 0x020630E8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	movs r5, r1
	mov fp, r0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r2, [r5]
	cmp r2, #2
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, fp, #0x1000
	ldr r1, [r0, #0x230]
	cmp r1, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	str r2, [r1]
	ldrh r2, [r5, #4]
	ldr r1, [r0, #0x230]
	add r8, r5, #8
	strh r2, [r1, #4]
	ldr r0, [r0, #0x230]
	mov r4, #0
	add r7, r0, #8
	arm_func_end FUN_020630e8
_02063134:
	mov r0, r8
	mov r1, r7
	mov r2, #0x4c
	bl _memcpy
	ldr r6, _02063240 ; =0x02090DB4
	ldr r0, [r6, #0x24]
	bl GetStrLen
	add r3, r8, #0x4c
	add sb, r7, #0x4c
	mov lr, #0
	mov r1, #3
	mov r2, #0x20
_02063164:
	ldrb sl, [r3, lr]
	cmp sl, #0
	bne _02063188
	lsl r1, lr, #1
	mov r0, sb
	rsb r2, r1, #0x80
	mov r1, #0
	bl MemWrite
	b _020631D0
_02063188:
	cmp sl, #1
	strbeq r2, [sb], #1
	beq _020631C4
	lsl sl, sl, #0x11
	cmp r0, sl, lsr #16
	lsr ip, sl, #0x10
	ldr sl, [r6, #0x24]
	movle ip, r1
	ldrsb sl, [sl, ip]
	strb sl, [sb]
	ldr sl, [r6, #0x24]
	add sl, sl, ip
	ldrsb sl, [sl, #1]
	strb sl, [sb, #1]
	add sb, sb, #2
_020631C4:
	add lr, lr, #1
	cmp lr, #0x40
	blo _02063164
_020631D0:
	ldr r2, _02063244 ; =0x0000073C
	add r0, r8, #0x8c
	add r1, r7, #0xcc
	bl _memcpy
	add r0, r7, #8
	add r1, r8, #0x3c8
	add r4, r4, #1
	cmp r4, #0xa
	add r7, r0, #0x800
	add r8, r1, #0x400
	blt _02063134
	add r0, fp, #0x1000
	ldr r1, [r0, #0x230]
	add r0, r5, #0x1d8
	add r1, r1, #0x58
	add r0, r0, #0x4c00
	add r1, r1, #0x5000
	mov r2, #0x190
	bl _memcpy
	add r0, fp, #0x1000
	ldr r1, [r0, #0x230]
	add r0, r5, #0x368
	add r1, r1, #0x1e8
	add r0, r0, #0x4c00
	add r1, r1, #0x5000
	mov r2, #0x70
	bl _memcpy
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02063240: .word 0x02090DB4
_02063244: .word 0x0000073C

	arm_func_start FUN_02063248
FUN_02063248: ; 0x02063248
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	str r0, [sp]
	movs r0, r1
	ldrne r0, [sp]
	str r1, [sp, #4]
	addne r1, r0, #0x1000
	ldrne r0, [r1, #0x230]
	cmpne r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r2, [r0]
	ldr r0, [sp, #4]
	str r2, [r0]
	ldr r2, [r1, #0x230]
	add r4, r0, #8
	mov r0, #0
	str r0, [sp, #8]
	ldrh r2, [r2, #4]
	ldr r0, [sp, #4]
	strh r2, [r0, #4]
	ldr r0, [r1, #0x230]
	add fp, r0, #8
	arm_func_end FUN_02063248
_020632A4:
	mov r0, fp
	mov r1, r4
	mov r2, #0x4c
	bl _memcpy
	ldr r0, _020633F8 ; =0x02090DB4
	ldr r0, [r0, #0x24]
	bl GetStrLen
	add r0, r0, r0, lsr #31
	asr ip, r0, #1
	add r3, fp, #0x4c
	add r0, r4, #0x4c
	mov r5, #0
	mov r1, #3
	mov r2, #1
_020632DC:
	ldrsb r8, [r3]
	cmp r8, #0
	bne _020632F8
	rsb r2, r5, #0x40
	mov r1, #0
	bl MemWrite
	b _02063360
_020632F8:
	cmp r8, #0x20
	moveq lr, r2
	addeq r3, r3, #1
	beq _02063350
	cmp ip, #0
	mov lr, r1
	mov r6, #0
	ble _0206334C
	ldr r7, _020633F8 ; =0x02090DB4
	ldr r7, [r7, #0x24]
_02063320:
	lsl sb, r6, #1
	ldrsb sb, [r7, sb]
	add sl, r7, r6, lsl #1
	cmp r8, sb
	ldrsbeq sb, [sl, #1]
	ldrsbeq sl, [r3, #1]
	cmpeq sl, sb
	andeq lr, r6, #0xff
	add r6, r6, #1
	cmp r6, ip
	blt _02063320
_0206334C:
	add r3, r3, #2
_02063350:
	strb lr, [r0], #1
	add r5, r5, #1
	cmp r5, #0x40
	blo _020632DC
_02063360:
	ldr r2, _020633FC ; =0x0000073C
	add r0, fp, #0xcc
	add r1, r4, #0x8c
	bl _memcpy
	ldr r0, [sp, #8]
	add r1, fp, #8
	add r0, r0, #1
	add r2, r4, #0x3c8
	str r0, [sp, #8]
	cmp r0, #0xa
	add fp, r1, #0x800
	add r4, r2, #0x400
	blt _020632A4
	ldr r0, [sp]
	add r0, r0, #0x1000
	ldr r2, [r0, #0x230]
	ldr r0, [sp, #4]
	add r1, r0, #0x1d8
	add r0, r2, #0x58
	add r0, r0, #0x5000
	add r1, r1, #0x4c00
	mov r2, #0x190
	bl _memcpy
	ldr r0, [sp]
	add r0, r0, #0x1000
	ldr r2, [r0, #0x230]
	ldr r0, [sp, #4]
	add r1, r0, #0x368
	add r0, r2, #0x1e8
	add r0, r0, #0x5000
	add r1, r1, #0x4c00
	mov r2, #0x70
	bl _memcpy
	ldr r0, [sp, #4]
	mov r1, #2
	str r1, [r0]
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020633F8: .word 0x02090DB4
_020633FC: .word 0x0000073C

	arm_func_start FUN_02063400
FUN_02063400: ; 0x02063400
	bx lr
	arm_func_end FUN_02063400

	arm_func_start FUN_02063404
FUN_02063404: ; 0x02063404
	bx lr
	arm_func_end FUN_02063404

	arm_func_start FUN_02063408
FUN_02063408: ; 0x02063408
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_0200fe34
	bl FUN_02001440
	strh r0, [r5, #4]
	cmp r4, #0
	ldreq r4, _02063460 ; =0x00001001
	ldr r0, _02063464 ; =0x00001004
	str r4, [r5]
	cmp r4, r0
	moveq r0, #1
	popeq {r3, r4, r5, pc}
	ldrh r0, [r5, #4]
	bl FUN_02010018
	ldr r0, [r5]
	bl FUN_02010c28
	mov r4, r0
	ldrh r0, [r5, #4]
	bl FUN_02010028
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_02063460: .word 0x00001001
_02063464: .word 0x00001004
	arm_func_end FUN_02063408

	arm_func_start FUN_02063468
FUN_02063468: ; 0x02063468
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, #0
	add r3, sp, #0
	mov r1, r4
	mov r2, #4
	bl FUN_020634b0
	cmp r0, #0
	movne r4, #1
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, pc}
	arm_func_end FUN_02063468

	arm_func_start FUN_02063498
FUN_02063498: ; 0x02063498
	push {r3, lr}
	bl thunk_FUN_02010180
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	arm_func_end FUN_02063498

	arm_func_start FUN_020634b0
FUN_020634b0: ; 0x020634B0
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x14
	mov r7, r0
	ldrh r0, [r7, #4]
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_02010018
	ldr r0, [r7]
	and r0, r0, #0xff
	cmp r0, #1
	beq _020634F4
	cmp r0, #2
	beq _020634F8
	cmp r0, #3
	beq _020634FC
	b _0206352C
	arm_func_end FUN_020634b0
_020634F4:
	b _020634FC
_020634F8:
	b _020634FC
_020634FC:
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	mov r0, #6
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	mov r0, r6
	mov r1, r4
	mov r2, r5
	str r3, [sp, #0x10]
	bl FUN_02010bbc
_0206352C:
	bl FUN_0200ff60
	str r0, [r7, #8]
	ldrh r0, [r7, #4]
	bl FUN_02010028
	ldr r0, [r7, #8]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, pc}

	arm_func_start FUN_02063554
FUN_02063554: ; 0x02063554
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x14
	mov r7, r0
	ldrh r0, [r7, #4]
	mov r6, r1
	mov r5, r2
	mov r4, r3
	bl FUN_02010018
	ldr r0, [r7]
	and r0, r0, #0xff
	cmp r0, #1
	beq _02063598
	cmp r0, #2
	beq _0206359C
	cmp r0, #3
	beq _020635B0
	b _020635E4
	arm_func_end FUN_02063554
_02063598:
	b _020635B0
_0206359C:
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	mov r0, #7
	b _020635C0
_020635B0:
	mov r3, #0
	str r3, [sp]
	str r3, [sp, #4]
	mov r0, #8
_020635C0:
	str r0, [sp, #8]
	mov ip, #0xa
	mov r0, r4
	mov r1, r6
	mov r2, r5
	str ip, [sp, #0xc]
	mov r4, #2
	str r4, [sp, #0x10]
	bl FUN_02010bbc
_020635E4:
	bl FUN_0200ff60
	str r0, [r7, #8]
	ldrh r0, [r7, #4]
	bl FUN_02010028
	ldr r0, [r7, #8]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, pc}

	arm_func_start FUN_0206360c
FUN_0206360c: ; 0x0206360C
	push {r4, r5, r6, lr}
	mov ip, #0
	mov r5, #0x7f
	mov r4, #0x1000
	ldr lr, _02063698 ; =0x0209100C
	str ip, [r0]
	str r1, [r0, #8]
	str ip, [r0, #0x10]
	strb r5, [r0, #0x18]
	str r4, [r0, #4]
	str r3, [r0, #0x14]
	strb ip, [r0, #0x19]
	str ip, [r0, #0xc]
	ldr r6, [lr]
	cmp r6, #0
	popls {r4, r5, r6, pc}
	ldrb r5, [r1]
	ldr r4, _0206369C ; =0x02091030
	arm_func_end FUN_0206360c
_02063654:
	ldrb r3, [r4, ip, lsl #3]
	cmp r5, r3
	addeq r3, r4, ip, lsl #3
	ldrheq lr, [r1, #2]
	ldrheq r3, [r3, #2]
	cmpeq lr, r3
	bne _02063688
	ldr r3, _020636A0 ; =0x02091034
	ldr r3, [r3, ip, lsl #3]
	cmp r3, #0
	popeq {r4, r5, r6, pc}
	blx r3
	pop {r4, r5, r6, pc}
_02063688:
	add ip, ip, #1
	cmp ip, r6
	blo _02063654
	pop {r4, r5, r6, pc}
	.align 2, 0_02063698: .word 0x0209100C
_0206369C: .word 0x02091030
_020636A0: .word 0x02091034

	arm_func_start FUN_020636a4
FUN_020636a4: ; 0x020636A4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r1, r5
	mov r0, #0
	mov r2, #0x54
	bl FUN_02007838
	ldr r0, _020636EC ; =0x0209102C
	ldr r1, _020636F0 ; =0x02091028
	ldr r2, [r0]
	ldr r0, _020636F4 ; =0x02091024
	str r2, [r5, #0xc]
	ldr r1, [r1]
	str r1, [r5, #0x14]
	ldr r0, [r0]
	str r0, [r5, #0x1c]
	str r4, [r5, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_020636EC: .word 0x0209102C
_020636F0: .word 0x02091028
_020636F4: .word 0x02091024
	arm_func_end FUN_020636a4

	arm_func_start FUN_020636f8
FUN_020636f8: ; 0x020636F8
	ldr ip, [r0]
	cmp ip, #0
	streq r1, [r0]
	bxeq lr
	ldr r2, [ip, #0x10]
	cmp r2, #0
	bne _02063758
	ldrb r3, [ip, #0x18]
	ldrb r2, [r1, #0x18]
	cmp r3, r2
	bls _02063750
	ldr r2, [r1, #0x10]
	mov r3, r1
	cmp r2, #0
	beq _02063744
	arm_func_end FUN_020636f8
_02063734:
	ldr r3, [r3, #0x10]
	ldr r2, [r3, #0x10]
	cmp r2, #0
	bne _02063734
_02063744:
	str ip, [r3, #0x10]
	str r1, [r0]
	bx lr
_02063750:
	str r1, [ip, #0x10]
	bx lr
_02063758:
	beq _020637A8
	ldrb r3, [r1, #0x18]
_02063760:
	ldrb r0, [r2, #0x18]
	cmp r0, r3
	blo _02063798
	ldr r0, [r1, #0x10]
	mov r3, r1
	cmp r0, #0
	beq _0206378C
_0206377C:
	ldr r3, [r3, #0x10]
	ldr r0, [r3, #0x10]
	cmp r0, #0
	bne _0206377C
_0206378C:
	str r1, [ip, #0x10]
	str r2, [r3, #0x10]
	bx lr
_02063798:
	mov ip, r2
	ldr r2, [r2, #0x10]
	cmp r2, #0
	bne _02063760
_020637A8:
	str r1, [ip, #0x10]
	bx lr

	arm_func_start FUN_020637b0
FUN_020637b0: ; 0x020637B0
	push {r3, r4, r5, lr}
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	mov r3, #1
	mov r4, #0
	arm_func_end FUN_020637b0
_020637C4:
	ldrb r2, [r1, #0x19]
	mov r5, r4
	cmp r2, #0
	ble _02063804
_020637D4:
	add r2, r1, r5, lsl #1
	ldrh r2, [r2, #0x1a]
	tst r2, #0x100
	asrne lr, r5, #5
	andne r2, r5, #0x1f
	ldrne ip, [r0, lr, lsl #2]
	add r5, r5, #1
	orrne r2, ip, r3, lsl r2
	strne r2, [r0, lr, lsl #2]
	ldrb r2, [r1, #0x19]
	cmp r5, r2
	blt _020637D4
_02063804:
	ldr r1, [r1, #0x10]
	cmp r1, #0
	bne _020637C4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02063814
FUN_02063814: ; 0x02063814
	push {r3, r4, r5, lr}
	movs r4, r1
	mov r5, r0
	ldrne r0, [r4, #8]
	cmpne r0, #0
	popeq {r3, r4, r5, pc}
	ldrb r0, [r0]
	cmp r0, #0x4a
	beq _02063864
	cmp r0, #0x4d
	beq _0206384C
	cmp r0, #0x56
	beq _0206387C
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02063814
_0206384C:
	add r0, r5, #0x3c
	bl FUN_020637b0
	mov r1, r4
	add r0, r5, #8
	bl FUN_020636f8
	pop {r3, r4, r5, pc}
_02063864:
	add r0, r5, #0x44
	bl FUN_020637b0
	mov r1, r4
	add r0, r5, #0x10
	bl FUN_020636f8
	pop {r3, r4, r5, pc}
_0206387C:
	add r0, r5, #0x4c
	bl FUN_020637b0
	mov r1, r4
	add r0, r5, #0x18
	bl FUN_020636f8
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02063894
FUN_02063894: ; 0x02063894
	ldr r3, [r0]
	cmp r3, #0
	moveq r0, #0
	bxeq lr
	cmp r3, r1
	bne _020638C4
	ldr r3, [r3, #0x10]
	mov r2, #0
	str r3, [r0]
	str r2, [r1, #0x10]
	mov r0, #1
	bx lr
	arm_func_end FUN_02063894
_020638C4:
	ldr r2, [r3, #0x10]
	cmp r2, #0
	beq _02063900
_020638D0:
	cmp r2, r1
	bne _020638F0
	ldr r1, [r2, #0x10]
	mov r0, #0
	str r1, [r3, #0x10]
	str r0, [r2, #0x10]
	mov r0, #1
	bx lr
_020638F0:
	mov r3, r2
	ldr r2, [r2, #0x10]
	cmp r2, #0
	bne _020638D0
_02063900:
	mov r0, #0
	bx lr

	arm_func_start FUN_02063908
FUN_02063908: ; 0x02063908
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #8
	mov r4, r1
	bl FUN_02063894
	cmp r0, #0
	bne _0206394C
	mov r1, r4
	add r0, r5, #0x10
	bl FUN_02063894
	cmp r0, #0
	bne _0206394C
	mov r1, r4
	add r0, r5, #0x18
	bl FUN_02063894
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	arm_func_end FUN_02063908
_0206394C:
	ldr r0, [r5]
	orr r0, r0, #0x10
	str r0, [r5]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206395c
FUN_0206395c: ; 0x0206395C
	mov r1, #0
	str r1, [r0, #0x20]
	strb r1, [r0, #0x24]
	strb r1, [r0, #0x25]
	bx lr
	arm_func_end FUN_0206395c

	arm_func_start FUN_02063970
FUN_02063970: ; 0x02063970
	str r1, [r0, #0x28]
	bx lr
	arm_func_end FUN_02063970

	arm_func_start FUN_02063978
FUN_02063978: ; 0x02063978
	cmp r0, #0
	ldrhne r0, [r0, #0xc]
	lslne r0, r0, #3
	moveq r0, #0
	bx lr
	arm_func_end FUN_02063978

	arm_func_start FUN_0206398c
FUN_0206398c: ; 0x0206398C
	cmp r0, #0
	ldrhne r0, [r0, #0x1c]
	lslne r0, r0, #3
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206398c

	arm_func_start FUN_020639a0
FUN_020639a0: ; 0x020639A0
	cmp r1, #0
	strne r1, [r0, #8]
	cmp r2, #0
	strne r2, [r0, #0x18]
	bx lr
	arm_func_end FUN_020639a0

	arm_func_start FUN_020639b4
FUN_020639b4: ; 0x020639B4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r8, r1
	mov sb, r0
	beq _020639C8
	bl FUN_02005cf4
	arm_func_end FUN_020639b4
_020639C8:
	ldrh r0, [sb, #0xc]
	lsls r2, r0, #3
	beq _020639F8
	ldr r0, [sb, #8]
	ldr r3, [sb, #0x14]
	lsl r1, r0, #0x10
	add r0, sb, r3
	lsr r1, r1, #0xd
	bl FUN_02005d50
	ldrh r0, [sb, #0x10]
	orr r0, r0, #1
	strh r0, [sb, #0x10]
_020639F8:
	ldrh r0, [sb, #0x1c]
	lsls r6, r0, #3
	beq _02063A58
	ldr r1, [sb, #0x18]
	ldr r0, [sb, #0x24]
	lsl r4, r1, #0x10
	lsr r7, r4, #0xd
	mov r1, r7
	mov r2, r6
	add r0, sb, r0
	ldr r5, [sb, #0x28]
	bl FUN_02005d50
	ldr r0, _02063A68 ; =0x0001FFFF
	and r1, r7, #0x40000
	and r0, r0, r4, lsr #13
	lsr r0, r0, #1
	add r2, r0, #0x20000
	add r0, sb, r5
	add r1, r2, r1, lsr #2
	lsr r2, r6, #1
	bl FUN_02005d50
	ldrh r0, [sb, #0x20]
	orr r0, r0, #1
	strh r0, [sb, #0x20]
_02063A58:
	cmp r8, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	bl FUN_02005e9c
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02063A68: .word 0x0001FFFF

	arm_func_start FUN_02063a6c
FUN_02063a6c: ; 0x02063A6C
	push {r3, lr}
	cmp r1, #0
	beq _02063A94
	ldrh lr, [r0, #0x10]
	ldr ip, [r0, #8]
	mov r3, #0
	bic lr, lr, #1
	strh lr, [r0, #0x10]
	str ip, [r1]
	str r3, [r0, #8]
	arm_func_end FUN_02063a6c
_02063A94:
	cmp r2, #0
	popeq {r3, pc}
	ldrh ip, [r0, #0x20]
	ldr r3, [r0, #0x18]
	mov r1, #0
	bic ip, ip, #1
	strh ip, [r0, #0x20]
	str r3, [r2]
	str r1, [r0, #0x18]
	pop {r3, pc}

	arm_func_start FUN_02063abc
FUN_02063abc: ; 0x02063ABC
	cmp r0, #0
	ldrhne r0, [r0, #0x30]
	lslne r0, r0, #3
	moveq r0, #0
	bx lr
	arm_func_end FUN_02063abc

	arm_func_start FUN_02063ad0
FUN_02063ad0: ; 0x02063AD0
	str r1, [r0, #0x2c]
	bx lr
	arm_func_end FUN_02063ad0

	arm_func_start FUN_02063ad8
FUN_02063ad8: ; 0x02063AD8
	push {r3, r4, r5, lr}
	movs r5, r1
	mov r4, r0
	beq _02063AEC
	bl FUN_02005ee0
	arm_func_end FUN_02063ad8
_02063AEC:
	ldr r0, [r4, #0x2c]
	ldrh r2, [r4, #0x30]
	lsl r1, r0, #0x10
	ldr r3, [r4, #0x38]
	lsr r1, r1, #0xd
	add r0, r4, r3
	lsl r2, r2, #3
	bl FUN_02005f14
	ldrh r0, [r4, #0x32]
	cmp r5, #0
	orr r0, r0, #1
	strh r0, [r4, #0x32]
	popeq {r3, r4, r5, pc}
	bl FUN_02005f84
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02063b28
FUN_02063b28: ; 0x02063B28
	ldrh r3, [r0, #0x32]
	ldr r2, [r0, #0x2c]
	mov r1, #0
	bic r3, r3, #1
	strh r3, [r0, #0x32]
	str r1, [r0, #0x2c]
	mov r0, r2
	bx lr
	arm_func_end FUN_02063b28

	arm_func_start FUN_02063b48
FUN_02063b48: ; 0x02063B48
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	mov r8, r3
	ldr r1, [r8]
	mov sl, r0
	and r0, r1, #0x1c000000
	ldrh r3, [sb]
	cmp r0, #0x14000000
	mov r5, #0
	add r0, sl, r3
	str r0, [sp]
	ldrne r0, [r2, #8]
	ldreq r0, [r2, #0x18]
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bic fp, r0, #0xe0000000
	ldrb r0, [sb, #2]
	cmp r0, #0
	bls _02063C64
	add r4, sl, #4
	arm_func_end FUN_02063b48
_02063B98:
	ldr r0, [sp]
	cmp sl, #0
	ldrb r2, [r0, r5]
	beq _02063BE8
	cmp r4, #0
	beq _02063BD4
	ldrb r0, [sl, #5]
	cmp r2, r0
	bhs _02063BD4
	ldrh r0, [sl, #0xa]
	add r1, r4, r0
	add r1, r1, #4
	ldrh r0, [r4, r0]
	mla r1, r0, r2, r1
	b _02063BD8
_02063BD4:
	mov r1, #0
_02063BD8:
	cmp r1, #0
	ldrne r0, [r1]
	addne r7, sl, r0
	bne _02063BEC
_02063BE8:
	mov r7, #0
_02063BEC:
	ldr r0, [r8]
	ldr r1, [r7, #0x14]
	add r0, r0, fp
	orr r0, r1, r0
	str r0, [r7, #0x14]
	ldr r3, [r8, #4]
	ldr r0, _02063C74 ; =0x000007FF
	ldrh r1, [r7, #0x20]
	and r2, r3, r0
	and r0, r3, r0, lsl #11
	lsr r6, r0, #0xb
	cmp r2, r1
	moveq r0, #0x1000
	beq _02063C30
	lsl r0, r2, #0xc
	lsl r1, r1, #0xc
	bl FUN_0200958c
_02063C30:
	str r0, [r7, #0x24]
	ldrh r1, [r7, #0x22]
	cmp r6, r1
	moveq r0, #0x1000
	beq _02063C50
	lsl r0, r6, #0xc
	lsl r1, r1, #0xc
	bl FUN_0200958c
_02063C50:
	str r0, [r7, #0x28]
	ldrb r0, [sb, #2]
	add r5, r5, #1
	cmp r5, r0
	blo _02063B98
_02063C64:
	ldrb r0, [sb, #3]
	orr r0, r0, #1
	strb r0, [sb, #3]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02063C74: .word 0x000007FF

	arm_func_start FUN_02063c78
FUN_02063c78: ; 0x02063C78
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrh r3, [r1]
	ldrb r2, [r1, #2]
	mov lr, #0
	add ip, r0, r3
	cmp r2, #0
	bls _02063D1C
	ldr r4, _02063D2C ; =0xC00F0000
	add r2, r0, #4
	mov r7, lr
	mov r6, lr
	mov r5, #0x1000
	arm_func_end FUN_02063c78
_02063CA8:
	cmp r0, #0
	ldrb r3, [ip, lr]
	beq _02063CF4
	cmp r2, #0
	beq _02063CE0
	ldrb r8, [r0, #5]
	cmp r3, r8
	bhs _02063CE0
	ldrh sb, [r0, #0xa]
	ldrh r8, [r2, sb]
	add sb, r2, sb
	add sb, sb, #4
	mla r3, r8, r3, sb
	b _02063CE4
_02063CE0:
	mov r3, r7
_02063CE4:
	cmp r3, #0
	ldrne r3, [r3]
	addne r8, r0, r3
	bne _02063CF8
_02063CF4:
	mov r8, r6
_02063CF8:
	ldr r3, [r8, #0x14]
	add lr, lr, #1
	and r3, r3, r4
	str r3, [r8, #0x14]
	str r5, [r8, #0x24]
	str r5, [r8, #0x28]
	ldrb r3, [r1, #2]
	cmp lr, r3
	blo _02063CA8
_02063D1C:
	ldrb r0, [r1, #3]
	bic r0, r0, #1
	strb r0, [r1, #3]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02063D2C: .word 0xC00F0000

	arm_func_start FUN_02063d30
FUN_02063d30: ; 0x02063D30
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r1
	cmp r0, #0
	ldrne r1, [r0, #8]
	mov r4, #0
	cmpne r1, #0
	addne r8, r0, r1
	moveq r8, #0
	ldrh r0, [r8]
	mov r7, #1
	mov r6, #0
	add r5, r8, r0
	ldrb r0, [r5, #1]
	cmp r0, #0
	bls _02063E1C
	arm_func_end FUN_02063d30
_02063D6C:
	cmp r5, #0
	beq _02063D98
	ldrb r0, [r5, #1]
	cmp r6, r0
	bhs _02063D98
	ldrh r0, [r5, #6]
	add r1, r5, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, r6, lsl #4
	b _02063D9C
_02063D98:
	mov r1, r4
_02063D9C:
	cmp sb, #0
	moveq r3, r4
	beq _02063DB4
	add r0, sb, #0x3c
	bl FUN_02067aa8
	mov r3, r0
_02063DB4:
	cmp r3, #0
	beq _02063E08
	cmp r5, #0
	beq _02063DE8
	ldrb r0, [r5, #1]
	cmp r6, r0
	bhs _02063DE8
	ldrh r1, [r5, #6]
	ldrh r0, [r5, r1]
	add r1, r5, r1
	add r1, r1, #4
	mla r1, r0, r6, r1
	b _02063DEC
_02063DE8:
	mov r1, r4
_02063DEC:
	ldrb r0, [r1, #3]
	tst r0, #1
	bne _02063E0C
	mov r0, r8
	mov r2, sb
	bl FUN_02063b48
	b _02063E0C
_02063E08:
	mov r7, r4
_02063E0C:
	ldrb r0, [r5, #1]
	add r6, r6, #1
	cmp r6, r0
	blo _02063D6C
_02063E1C:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02063e24
FUN_02063e24: ; 0x02063E24
	push {r3, r4, r5, r6, r7, lr}
	cmp r0, #0
	ldrne r1, [r0, #8]
	mov r5, #0
	cmpne r1, #0
	addne r6, r0, r1
	moveq r6, #0
	ldrh r0, [r6]
	add r4, r6, r0
	ldrb r0, [r4, #1]
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, pc}
	mov r7, r5
	arm_func_end FUN_02063e24
_02063E58:
	cmp r4, #0
	beq _02063E84
	ldrb r0, [r4, #1]
	cmp r5, r0
	bhs _02063E84
	ldrh r1, [r4, #6]
	ldrh r0, [r4, r1]
	add r1, r4, r1
	add r1, r1, #4
	mla r1, r0, r5, r1
	b _02063E88
_02063E84:
	mov r1, r7
_02063E88:
	ldrb r0, [r1, #3]
	tst r0, #1
	beq _02063E9C
	mov r0, r6
	bl FUN_02063c78
_02063E9C:
	ldrb r0, [r4, #1]
	add r5, r5, #1
	cmp r5, r0
	blo _02063E58
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02063eb0
FUN_02063eb0: ; 0x02063EB0
	push {r4, r5, r6, r7, r8, lr}
	ldr r2, [r2, #0x2c]
	ldrh r4, [r3, #2]
	lsl r2, r2, #0x10
	ldrh r5, [r1]
	lsr r2, r2, #0x10
	tst r4, #1
	bic r2, r2, #0xe0000000
	ldrh r4, [r3]
	lsl r2, r2, #0x10
	add ip, r0, r5
	lsr r5, r2, #0x10
	lsleq r2, r4, #0xf
	lsreq r4, r2, #0x10
	lsleq r3, r5, #0xf
	lsreq r5, r3, #0x10
	ldrb r2, [r1, #2]
	mov r3, #0
	cmp r2, #0
	bls _02063F7C
	add r2, r4, r5
	lsl lr, r2, #0x10
	add r2, r0, #4
	lsr r4, lr, #0x10
	mov r6, r3
	mov r5, r3
	arm_func_end FUN_02063eb0
_02063F18:
	cmp r0, #0
	ldrb r8, [ip, r3]
	beq _02063F64
	cmp r2, #0
	beq _02063F50
	ldrb r7, [r0, #5]
	cmp r8, r7
	bhs _02063F50
	ldrh r7, [r0, #0xa]
	ldrh lr, [r2, r7]
	add r7, r2, r7
	add r7, r7, #4
	mla r7, lr, r8, r7
	b _02063F54
_02063F50:
	mov r7, r6
_02063F54:
	cmp r7, #0
	ldrne lr, [r7]
	addne r7, r0, lr
	bne _02063F68
_02063F64:
	mov r7, r5
_02063F68:
	strh r4, [r7, #0x1c]
	ldrb lr, [r1, #2]
	add r3, r3, #1
	cmp r3, lr
	blo _02063F18
_02063F7C:
	ldrb r0, [r1, #3]
	orr r0, r0, #1
	strb r0, [r1, #3]
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02063f8c
FUN_02063f8c: ; 0x02063F8C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r1
	cmp r0, #0
	ldrne r1, [r0, #8]
	mov r4, #0
	cmpne r1, #0
	addne r8, r0, r1
	moveq r8, #0
	ldrh r0, [r8, #2]
	mov r7, #1
	mov r6, #0
	add r5, r8, r0
	ldrb r0, [r5, #1]
	cmp r0, #0
	bls _02064080
	arm_func_end FUN_02063f8c
_02063FC8:
	cmp r5, #0
	beq _02063FF4
	ldrb r0, [r5, #1]
	cmp r6, r0
	bhs _02063FF4
	ldrh r0, [r5, #6]
	add r1, r5, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, r6, lsl #4
	b _02063FF8
_02063FF4:
	mov r1, r4
_02063FF8:
	cmp sb, #0
	ldrhne r0, [sb, #0x34]
	cmpne r0, #0
	moveq r3, r4
	beq _02064018
	add r0, sb, r0
	bl FUN_02067aa8
	mov r3, r0
_02064018:
	cmp r3, #0
	beq _0206406C
	cmp r5, #0
	beq _0206404C
	ldrb r0, [r5, #1]
	cmp r6, r0
	bhs _0206404C
	ldrh r1, [r5, #6]
	ldrh r0, [r5, r1]
	add r1, r5, r1
	add r1, r1, #4
	mla r1, r0, r6, r1
	b _02064050
_0206404C:
	mov r1, r4
_02064050:
	ldrb r0, [r1, #3]
	tst r0, #1
	bne _02064070
	mov r0, r8
	mov r2, sb
	bl FUN_02063eb0
	b _02064070
_0206406C:
	mov r7, r4
_02064070:
	ldrb r0, [r5, #1]
	add r6, r6, #1
	cmp r6, r0
	blo _02063FC8
_02064080:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02064088
FUN_02064088: ; 0x02064088
	cmp r0, #0
	ldrne r1, [r0, #8]
	mov ip, #0
	cmpne r1, #0
	addne r1, r0, r1
	moveq r1, #0
	ldrh r0, [r1, #2]
	add r3, r1, r0
	ldrb r0, [r3, #1]
	cmp r0, #0
	bxls lr
	mov r1, ip
	arm_func_end FUN_02064088
_020640B8:
	cmp r3, #0
	beq _020640E4
	ldrb r0, [r3, #1]
	cmp ip, r0
	bhs _020640E4
	ldrh r2, [r3, #6]
	ldrh r0, [r3, r2]
	add r2, r3, r2
	add r2, r2, #4
	mla r2, r0, ip, r2
	b _020640E8
_020640E4:
	mov r2, r1
_020640E8:
	ldrb r0, [r2, #3]
	add ip, ip, #1
	tst r0, #1
	bicne r0, r0, #1
	strbne r0, [r2, #3]
	ldrb r0, [r3, #1]
	cmp ip, r0
	blo _020640B8
	bx lr

	arm_func_start FUN_0206410c
FUN_0206410c: ; 0x0206410C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldrb r0, [sl, #9]
	mov sb, r1
	mov r7, #1
	cmp r0, #0
	mov r6, #0
	bls _020641B4
	add r5, sl, #8
	mov r4, r6
	mov fp, r6
	arm_func_end FUN_0206410c
_02064138:
	cmp sl, #0
	beq _02064180
	cmp r5, #0
	beq _0206416C
	ldrb r0, [sl, #9]
	cmp r6, r0
	bhs _0206416C
	ldrh r1, [sl, #0xe]
	ldrh r0, [r5, r1]
	add r1, r5, r1
	add r1, r1, #4
	mla r1, r0, r6, r1
	b _02064170
_0206416C:
	mov r1, r4
_02064170:
	cmp r1, #0
	ldrne r0, [r1]
	addne r8, sl, r0
	bne _02064184
_02064180:
	mov r8, fp
_02064184:
	mov r0, r8
	mov r1, sb
	bl FUN_02063d30
	and r7, r7, r0
	mov r0, r8
	mov r1, sb
	bl FUN_02063f8c
	ldrb r1, [sl, #9]
	add r6, r6, #1
	and r7, r7, r0
	cmp r6, r1
	blo _02064138
_020641B4:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_020641bc
FUN_020641bc: ; 0x020641BC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r6, r0
	ldrb r0, [r6, #9]
	mov r5, #0
	cmp r0, #0
	popls {r3, r4, r5, r6, r7, r8, sb, pc}
	add r4, r6, #8
	mov r8, r5
	mov r7, r5
	arm_func_end FUN_020641bc
_020641E0:
	cmp r6, #0
	beq _02064228
	cmp r4, #0
	beq _02064214
	ldrb r0, [r6, #9]
	cmp r5, r0
	bhs _02064214
	ldrh r1, [r6, #0xe]
	ldrh r0, [r4, r1]
	add r1, r4, r1
	add r1, r1, #4
	mla r1, r0, r5, r1
	b _02064218
_02064214:
	mov r1, r8
_02064218:
	cmp r1, #0
	ldrne r0, [r1]
	addne sb, r6, r0
	bne _0206422C
_02064228:
	mov sb, r7
_0206422C:
	mov r0, sb
	bl FUN_02063e24
	mov r0, sb
	bl FUN_02064088
	ldrb r0, [r6, #9]
	add r5, r5, #1
	cmp r5, r0
	blo _020641E0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02064250
FUN_02064250: ; 0x02064250
	push {r3, r4, r5, lr}
	ldr r0, _02064350 ; =0x17101610
	ldr r5, _02064354 ; =0x020B6DD8
	mov r4, #0
	stm r5, {r0, r4}
	mov r1, #2
	str r1, [r5, #0x48]
	ldr r0, _02064358 ; =0x32323232
	ldr r1, _0206435C ; =0x60293130
	str r0, [r5, #0x7c]
	str r1, [r5, #0x90]
	ldr r0, _02064360 ; =0x33333333
	ldr r1, _02064364 ; =0x002A1B19
	str r0, [r5, #0xa4]
	ldr r0, _02064368 ; =0x020B6E24
	str r1, [r5, #0xb8]
	bl FUN_020085cc
	ldr r0, _0206436C ; =0x020B6DE0
	bl FUN_02008dec
	ldr r0, _02064370 ; =0x2D8B62D8
	ldr r3, _02064374 ; =0x40000200
	str r0, [r5, #0x80]
	ldr r2, _02064378 ; =0xC0080000
	str r3, [r5, #0x84]
	sub r0, r3, #0xc0000001
	str r0, [r5, #0x88]
	ldr r1, _0206437C ; =0x4210C210
	str r2, [r5, #0x8c]
	str r1, [r5, #0x94]
	str r1, [r5, #0x98]
	ldr r0, _02064380 ; =0x001F008F
	sub r1, r2, #0x90000
	str r0, [r5, #0x9c]
	str r1, [r5, #0xa0]
	ldr r0, _02064384 ; =0x00007FFF
	mov r1, #0x4000001f
	str r0, [r5, #0xa8]
	ldr r0, _02064388 ; =0x800003E0
	str r1, [r5, #0xac]
	str r0, [r5, #0xb0]
	rsb r0, r3, #0x7e00
	str r0, [r5, #0xb4]
	str r4, [r5, #0xe0]
	str r4, [r5, #0xe4]
	ldr r0, _0206438C ; =0x020B6E94
	str r4, [r5, #0xe8]
	bl FUN_020084e0
	mov r0, #0x1000
	str r0, [r5, #0xec]
	str r0, [r5, #0xf0]
	str r0, [r5, #0xf4]
	str r4, [r5, #0xf8]
	str r4, [r5, #0xfc]
	str r4, [r5, #0x248]
	str r4, [r5, #0x244]
	str r4, [r5, #0x240]
	str r4, [r5, #0x254]
	str r4, [r5, #0x24c]
	str r0, [r5, #0x250]
	str r4, [r5, #0x25c]
	str r4, [r5, #0x258]
	sub r0, r0, #0x2000
	str r0, [r5, #0x260]
	pop {r3, r4, r5, pc}
	.align 2, 0_02064350: .word 0x17101610
_02064354: .word 0x020B6DD8
_02064358: .word 0x32323232
_0206435C: .word 0x60293130
_02064360: .word 0x33333333
_02064364: .word 0x002A1B19
_02064368: .word 0x020B6E24
_0206436C: .word 0x020B6DE0
_02064370: .word 0x2D8B62D8
_02064374: .word 0x40000200
_02064378: .word 0xC0080000
_0206437C: .word 0x4210C210
_02064380: .word 0x001F008F
_02064384: .word 0x00007FFF
_02064388: .word 0x800003E0
_0206438C: .word 0x020B6E94
	arm_func_end FUN_02064250

	arm_func_start FUN_02064390
FUN_02064390: ; 0x02064390
	push {r4, lr}
	ldr r4, _020643BC ; =0x020B6DD8
	mov r2, #0x3e
	ldr r0, [r4]
	add r1, r4, #4
	bl FUN_020672b4
	ldr r0, [r4, #0xfc]
	bic r0, r0, #1
	bic r0, r0, #2
	str r0, [r4, #0xfc]
	pop {r4, pc}
	.align 2, 0_020643BC: .word 0x020B6DD8
	arm_func_end FUN_02064390

	arm_func_start FUN_020643c0
FUN_020643c0: ; 0x020643C0
	push {r3, lr}
	ldr r0, _02064424 ; =0x00001610
	ldr r1, _02064428 ; =0x020B6DDC
	mov r2, #0x11
	bl FUN_020672b4
	ldr r1, _0206442C ; =0x020B6E24
	mov r0, #0x19
	mov r2, #0xc
	bl FUN_020672b4
	mov r3, #2
	add r1, sp, #0
	mov r0, #0x10
	mov r2, #1
	str r3, [sp]
	bl FUN_020672b4
	ldr r1, _02064430 ; =0x020B6E54
	mov r0, #0x15
	mov r2, #0x20
	bl FUN_020672b4
	ldr r0, _02064434 ; =0x020B6DD8
	ldr r1, [r0, #0xfc]
	bic r1, r1, #1
	orr r1, r1, #2
	str r1, [r0, #0xfc]
	pop {r3, pc}
	.align 2, 0_02064424: .word 0x00001610
_02064428: .word 0x020B6DDC
_0206442C: .word 0x020B6E24
_02064430: .word 0x020B6E54
_02064434: .word 0x020B6DD8
	arm_func_end FUN_020643c0

	arm_func_start FUN_02064438
FUN_02064438: ; 0x02064438
	push {r4, lr}
	ldr r4, _0206446C ; =0x020B6DD8
	ldr r0, [r4, #0xfc]
	tst r0, #8
	bne _02064464
	ldr r0, _02064470 ; =0x020B6E24
	ldr r1, _02064474 ; =0x020B6ED8
	bl FUN_020086b4
	ldr r0, [r4, #0xfc]
	orr r0, r0, #8
	str r0, [r4, #0xfc]
	arm_func_end FUN_02064438
_02064464:
	ldr r0, _02064474 ; =0x020B6ED8
	pop {r4, pc}
	.align 2, 0_0206446C: .word 0x020B6DD8
_02064470: .word 0x020B6E24
_02064474: .word 0x020B6ED8

	arm_func_start FUN_02064478
FUN_02064478: ; 0x02064478
	push {r3, r4, lr}
	sub sp, sp, #4
	ldr r4, _020644C8 ; =0x020B6F08
	ldr r0, _020644CC ; =0x020B6E94
	ldr r1, _020644D0 ; =0x020B6E24
	mov r2, r4
	bl FUN_02008a28
	ldr r3, _020644D4 ; =0x020B6DD8
	mov r0, r4
	ldr r2, [r3, #0xf4]
	mov r1, r4
	str r2, [sp]
	ldr r2, [r3, #0xec]
	ldr r3, [r3, #0xf0]
	bl FUN_02008628
	ldr r1, _020644D8 ; =0x020B6F38
	mov r0, r4
	bl FUN_020086b4
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_020644C8: .word 0x020B6F08
_020644CC: .word 0x020B6E94
_020644D0: .word 0x020B6E24
_020644D4: .word 0x020B6DD8
_020644D8: .word 0x020B6F38
	arm_func_end FUN_02064478

	arm_func_start FUN_020644dc
FUN_020644dc: ; 0x020644DC
	push {r4, lr}
	ldr r4, _02064508 ; =0x020B6DD8
	ldr r0, [r4, #0xfc]
	tst r0, #0x80
	bne _02064500
	bl FUN_02064478
	ldr r0, [r4, #0xfc]
	orr r0, r0, #0x80
	str r0, [r4, #0xfc]
	arm_func_end FUN_020644dc
_02064500:
	ldr r0, _0206450C ; =0x020B6F08
	pop {r4, pc}
	.align 2, 0_02064508: .word 0x020B6DD8
_0206450C: .word 0x020B6F08

	arm_func_start FUN_02064510
FUN_02064510: ; 0x02064510
	push {r4, lr}
	ldr r4, _0206453C ; =0x020B6DD8
	ldr r0, [r4, #0xfc]
	tst r0, #0x80
	bne _02064534
	bl FUN_02064478
	ldr r0, [r4, #0xfc]
	orr r0, r0, #0x80
	str r0, [r4, #0xfc]
	arm_func_end FUN_02064510
_02064534:
	ldr r0, _02064540 ; =0x020B6F38
	pop {r4, pc}
	.align 2, 0_0206453C: .word 0x020B6DD8
_02064540: .word 0x020B6F38

	arm_func_start FUN_02064544
FUN_02064544: ; 0x02064544
	cmp r0, #0
	ldrne ip, _020645A4 ; =0x020B6DD8
	ldrne ip, [ip, #0xa0]
	andne ip, ip, #0xff
	strne ip, [r0]
	cmp r1, #0
	ldrne r0, _020645A4 ; =0x020B6DD8
	ldrne r0, [r0, #0xa0]
	lsrne r0, r0, #8
	andne r0, r0, #0xff
	strne r0, [r1]
	cmp r2, #0
	ldrne r0, _020645A4 ; =0x020B6DD8
	ldrne r0, [r0, #0xa0]
	lsrne r0, r0, #0x10
	andne r0, r0, #0xff
	strne r0, [r2]
	cmp r3, #0
	ldrne r0, _020645A4 ; =0x020B6DD8
	ldrne r0, [r0, #0xa0]
	lsrne r0, r0, #0x18
	andne r0, r0, #0xff
	strne r0, [r3]
	bx lr
	.align 2, 0_020645A4: .word 0x020B6DD8
	arm_func_end FUN_02064544

	arm_func_start FUN_020645a8
FUN_020645a8: ; 0x020645A8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	movs r5, r1
	mov r4, r2
	mov r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r7, #1
	arm_func_end FUN_020645a8
_020645C4:
	ldrb r1, [r5, #0x19]
	cmp r4, r1
	bhs _02064604
	add r1, r5, r4, lsl #1
	ldrh r2, [r1, #0x1a]
	and r1, r2, #0x300
	cmp r1, #0x100
	bne _02064604
	ldr r3, [r5, #0xc]
	cmp r3, #0
	beq _02064604
	mov r0, r6
	mov r1, r5
	and r2, r2, #0xff
	blx r3
	mov r0, r7
_02064604:
	ldr r5, [r5, #0x10]
	cmp r5, #0
	bne _020645C4
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02064614
FUN_02064614: ; 0x02064614
	push {r4, lr}
	cmp r3, #0
	beq _02064648
	ldr r3, [r0, #4]
	ldr r1, [r0, #8]
	ldr r4, [r0]
	add r3, r3, r2
	add r1, r1, r2
	add r4, r4, r2
	str r3, [r0, #4]
	str r1, [r0, #8]
	str r4, [r0]
	pop {r4, pc}
	arm_func_end FUN_02064614
_02064648:
	ldr ip, [r1]
	ldr r3, [r1, #4]
	ldr r1, [r1, #8]
	mul lr, r2, ip
	ldm r0, {r4, ip}
	mul r3, r2, r3
	mul r1, r2, r1
	ldr r2, [r0, #8]
	add r4, r4, lr, asr #12
	add r3, ip, r3, asr #12
	str r4, [r0]
	add r1, r2, r1, asr #12
	str r3, [r0, #4]
	str r1, [r0, #8]
	pop {r4, pc}

	arm_func_start FUN_02064684
FUN_02064684: ; 0x02064684
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x70
	movs sb, r1
	mov sl, r0
	mov r8, r2
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r2, [sb, #0x10]
	cmp r2, #0
	bne _02064710
	ldrb r2, [sb, #0x19]
	cmp r8, r2
	bhs _02064704
	add r2, sb, r8, lsl #1
	ldrh r4, [r2, #0x1a]
	and r2, r4, #0x300
	cmp r2, #0x100
	bne _020646F8
	ldr r3, [sb, #0xc]
	cmp r3, #0
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	and r2, r4, #0xff
	blx r3
	add sp, sp, #0x70
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02064684
_020646F8:
	add sp, sp, #0x70
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02064704:
	add sp, sp, #0x70
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02064710:
	mov r5, #0
	mov r3, r5
	mov r6, r5
	mov r2, sb
_02064720:
	ldrb r0, [r2, #0x19]
	cmp r8, r0
	bhs _02064760
	add r0, r2, r8, lsl #1
	ldrh r0, [r0, #0x1a]
	and r0, r0, #0x300
	cmp r0, #0x100
	bne _02064760
	ldr r0, [r2, #4]
	cmp r0, #0x1000
	addgt r5, r5, #0x1000
	bgt _02064758
	cmp r0, #0
	addgt r5, r5, r0
_02064758:
	mov r1, r2
	add r3, r3, #1
_02064760:
	ldr r2, [r2, #0x10]
	cmp r2, #0
	bne _02064720
	cmp r5, #0
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r3, #1
	bne _020647B8
	ldr r3, [r1, #0xc]
	add r0, r1, r8, lsl #1
	cmp r3, #0
	ldrh r2, [r0, #0x1a]
	addeq sp, sp, #0x70
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	and r2, r2, #0xff
	blx r3
	add sp, sp, #0x70
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020647B8:
	mov r4, #0x58
	mov r1, sl
	mov r2, r4
	mov r0, #0
	bl FUN_0200787c
	sub r0, r4, #0x59
	str r0, [sl]
	mov r4, #0xc
	add fp, sp, #0x18
_020647DC:
	ldrb r0, [sb, #0x19]
	cmp r8, r0
	bhs _020649C0
	add r0, sb, r8, lsl #1
	ldrh r1, [r0, #0x1a]
	and r0, r1, #0x300
	cmp r0, #0x100
	bne _020649C0
	ldr r0, [sb, #4]
	cmp r0, #0
	ble _020649C0
	ldr r3, [sb, #0xc]
	cmp r3, #0
	beq _020649C0
	and r2, r1, #0xff
	mov r0, fp
	mov r1, sb
	blx r3
	cmp r6, #0
	bne _0206484C
	add r0, sp, #0x40
	add r1, sp, #0xc
	mov r2, r4
	bl FUN_0200784c
	add r0, sp, #0x58
	add r1, sp, #0
	mov r2, r4
	bl FUN_0200784c
_0206484C:
	cmp r5, #0x1000
	ldreq r7, [sb, #4]
	beq _02064868
	ldr r0, [sb, #4]
	mov r1, r5
	bl FUN_0200958c
	mov r7, r0
_02064868:
	ldr r3, [sp, #0x18]
	add r0, sl, #4
	add r1, sp, #0x1c
	mov r2, r7
	and r3, r3, #1
	bl FUN_02064614
	ldr r3, [sp, #0x18]
	add r0, sl, #0x10
	add r1, sp, #0x28
	mov r2, r7
	and r3, r3, #8
	bl FUN_02064614
	ldr r3, [sp, #0x18]
	add r0, sl, #0x1c
	add r1, sp, #0x34
	mov r2, r7
	and r3, r3, #0x10
	bl FUN_02064614
	ldr r0, [sp, #0x18]
	tst r0, #4
	bne _02064910
	ldr r0, [sl, #0x4c]
	ldr r2, [sp, #0x64]
	ldr r1, [sl, #0x50]
	smull r3, r2, r7, r2
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	add r0, r0, r3
	str r0, [sl, #0x4c]
	ldr r2, [sp, #0x68]
	ldr r0, [sl, #0x54]
	smull r3, r2, r7, r2
	lsr r3, r3, #0xc
	orr r3, r3, r2, lsl #20
	add r1, r1, r3
	str r1, [sl, #0x50]
	ldr r1, [sp, #0x6c]
	smull r2, r1, r7, r1
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	add r0, r0, r2
	str r0, [sl, #0x54]
_02064910:
	ldr r0, [sp, #0x18]
	tst r0, #2
	bne _02064998
	ldr r2, [sl, #0x28]
	ldr r0, [sp, #0x40]
	ldr r1, [sl, #0x2c]
	mul r0, r7, r0
	add r0, r2, r0, asr #12
	str r0, [sl, #0x28]
	ldr r0, [sp, #0x44]
	ldr r2, [sl, #0x30]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x2c]
	ldr r0, [sp, #0x48]
	ldr r1, [sl, #0x34]
	mul r0, r7, r0
	add r0, r2, r0, asr #12
	str r0, [sl, #0x30]
	ldr r0, [sp, #0x4c]
	ldr r2, [sl, #0x38]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x34]
	ldr r0, [sp, #0x50]
	ldr r1, [sl, #0x3c]
	mul r0, r7, r0
	add r0, r2, r0, asr #12
	str r0, [sl, #0x38]
	ldr r0, [sp, #0x54]
	mul r0, r7, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x3c]
	b _020649B0
_02064998:
	ldr r1, [sl, #0x28]
	ldr r0, [sl, #0x38]
	add r1, r1, r7
	add r0, r0, r7
	str r1, [sl, #0x28]
	str r0, [sl, #0x38]
_020649B0:
	ldr r1, [sl]
	ldr r0, [sp, #0x18]
	and r0, r1, r0
	str r0, [sl]
_020649C0:
	ldr sb, [sb, #0x10]
	add r6, r6, #1
	cmp sb, #0
	bne _020647DC
	add r0, sl, #0x28
	add r1, sl, #0x34
	add r2, sl, #0x40
	bl FUN_020097d0
	ldr r0, [sl, #0x28]
	cmp r0, #0
	ldreq r0, [sl, #0x2c]
	cmpeq r0, #0
	ldreq r0, [sl, #0x30]
	cmpeq r0, #0
	bne _02064A10
	add r0, sp, #0xc
	add r1, sl, #0x28
	mov r2, #0xc
	bl FUN_0200784c
	b _02064A1C
_02064A10:
	add r0, sl, #0x28
	mov r1, r0
	bl FUN_020098b0
_02064A1C:
	ldr r0, [sl, #0x40]
	cmp r0, #0
	ldreq r0, [sl, #0x44]
	cmpeq r0, #0
	ldreq r0, [sl, #0x48]
	cmpeq r0, #0
	bne _02064A4C
	add r0, sp, #0
	add r1, sl, #0x40
	mov r2, #0xc
	bl FUN_0200784c
	b _02064A58
_02064A4C:
	add r0, sl, #0x40
	mov r1, r0
	bl FUN_020098b0
_02064A58:
	add r0, sl, #0x40
	add r1, sl, #0x28
	add r2, sl, #0x34
	bl FUN_020097d0
	mov r0, #1
	add sp, sp, #0x70
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02064a74
FUN_02064a74: ; 0x02064A74
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r7, r0
	mov r0, #0
	mov r6, r1
	mov r5, r2
	str r0, [r7]
	add r4, sp, #0
	mov r8, #1
	arm_func_end FUN_02064a74
_02064A98:
	ldrb r1, [r6, #0x19]
	cmp r5, r1
	bhs _02064AE8
	add r1, r6, r5, lsl #1
	ldrh r2, [r1, #0x1a]
	and r1, r2, #0x300
	cmp r1, #0x100
	bne _02064AE8
	ldr r3, [r6, #0xc]
	cmp r3, #0
	beq _02064AE8
	mov r0, r4
	mov r1, r6
	and r2, r2, #0xff
	blx r3
	ldr r2, [r7]
	ldr r1, [sp]
	mov r0, r8
	orr r1, r2, r1
	str r1, [r7]
_02064AE8:
	ldr r6, [r6, #0x10]
	cmp r6, #0
	bne _02064A98
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02064afc
FUN_02064afc: ; 0x02064AFC
	push {r3, r4, r5, lr}
	ldr r5, _02064B40 ; =0x020911A8
	mov r4, r0
	arm_func_end FUN_02064afc
_02064B08:
	ldr r1, [r4, #8]
	ldr r0, [r4]
	bic r1, r1, #0x40
	str r1, [r4, #8]
	ldrb r3, [r0]
	mov r0, r4
	and r1, r3, #0x1f
	ldr r2, [r5, r1, lsl #2]
	and r1, r3, #0xe0
	blx r2
	ldr r0, [r4, #8]
	tst r0, #0x20
	beq _02064B08
	pop {r3, r4, r5, pc}
	.align 2, 0_02064B40: .word 0x020911A8

	arm_func_start FUN_02064b44
FUN_02064b44: ; 0x02064B44
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	mov r1, r5
	mov r0, #0
	mov r2, #0x188
	bl FUN_0200787c
	mov r0, #1
	str r0, [r5, #0xc4]
	str r0, [r5, #8]
	ldr r0, [r4, #0x30]
	ldr r2, _02064CD0 ; =0x0209108C
	cmp r0, #0
	ldreq r1, [r4, #4]
	ldreq r0, [r1, #4]
	addeq r0, r1, r0
	stm r5, {r0, r4}
	ldr r0, [r4, #4]
	cmp r0, #0
	addne r0, r0, #0x40
	moveq r0, #0
	str r0, [r5, #0xd4]
	ldr r1, [r4, #4]
	cmp r1, #0
	ldrne r0, [r1, #8]
	cmpne r0, #0
	addne r0, r1, r0
	moveq r0, #0
	str r0, [r5, #0xd8]
	ldr r1, [r4, #4]
	cmp r1, #0
	ldrne r0, [r1, #0xc]
	cmpne r0, #0
	addne r0, r1, r0
	moveq r0, #0
	str r0, [r5, #0xdc]
	ldr r0, [r4, #4]
	ldr r1, _02064CD4 ; =0x02091080
	ldrb r3, [r0, #0x15]
	ldr r0, _02064CD8 ; =0x02091098
	ldr r2, [r2, r3, lsl #2]
	str r2, [r5, #0xe8]
	ldr r2, [r4, #4]
	ldrb r2, [r2, #0x15]
	ldr r1, [r1, r2, lsl #2]
	str r1, [r5, #0xec]
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x16]
	ldr r0, [r0, r1, lsl #2]
	str r0, [r5, #0xf0]
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x1c]
	str r0, [r5, #0xe0]
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x20]
	str r0, [r5, #0xe4]
	ldr r1, [r4, #0x20]
	cmp r1, #0
	beq _02064C54
	ldrb r0, [r4, #0x24]
	cmp r0, #0x20
	bhs _02064C54
	add r0, r5, r0, lsl #2
	str r1, [r0, #0xc]
	ldrb r0, [r4, #0x24]
	ldrb r1, [r4, #0x25]
	add r0, r5, r0
	strb r1, [r0, #0x8c]
	arm_func_end FUN_02064b44
_02064C54:
	ldr r0, [r4]
	tst r0, #1
	ldrne r0, [r5, #8]
	orrne r0, r0, #0x80
	strne r0, [r5, #8]
	ldr r0, [r4]
	tst r0, #2
	ldrne r0, [r5, #8]
	orrne r0, r0, #0x100
	strne r0, [r5, #8]
	ldr r0, [r4]
	tst r0, #4
	ldrne r0, [r5, #8]
	orrne r0, r0, #0x200
	strne r0, [r5, #8]
	ldr r0, [r4]
	tst r0, #8
	ldrne r0, [r5, #8]
	orrne r0, r0, #0x400
	strne r0, [r5, #8]
	ldr r1, [r4, #0x28]
	cmp r1, #0
	beq _02064CB8
	mov r0, r5
	blx r1
_02064CB8:
	mov r0, r5
	bl FUN_02064afc
	ldr r0, [r4]
	bic r0, r0, #1
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02064CD0: .word 0x0209108C
_02064CD4: .word 0x02091080
_02064CD8: .word 0x02091098

	arm_func_start FUN_02064cdc
FUN_02064cdc: ; 0x02064CDC
	push {r3, r4, r5, lr}
	cmp r1, #0
	popeq {r3, r4, r5, pc}
	mov r3, #1
	mov r4, #0
	arm_func_end FUN_02064cdc
_02064CF0:
	ldrb r2, [r1, #0x19]
	mov r5, r4
	cmp r2, #0
	ble _02064D30
_02064D00:
	add r2, r1, r5, lsl #1
	ldrh r2, [r2, #0x1a]
	tst r2, #0x100
	asrne lr, r5, #5
	andne r2, r5, #0x1f
	ldrne ip, [r0, lr, lsl #2]
	add r5, r5, #1
	orrne r2, ip, r3, lsl r2
	strne r2, [r0, lr, lsl #2]
	ldrb r2, [r1, #0x19]
	cmp r5, r2
	blt _02064D00
_02064D30:
	ldr r1, [r1, #0x10]
	cmp r1, #0
	bne _02064CF0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02064d40
FUN_02064d40: ; 0x02064D40
	push {r4, r5, r6, lr}
	sub sp, sp, #0x188
	mov r4, r0
	ldr r0, [r4]
	and r0, r0, #0x10
	cmp r0, #0x10
	bne _02064DDC
	mov r6, #0
	mov r5, #8
	mov r0, r6
	mov r2, r5
	add r1, r4, #0x3c
	bl FUN_02007838
	mov r0, r6
	mov r2, r5
	add r1, r4, #0x44
	bl FUN_02007838
	mov r0, r6
	mov r2, r5
	add r1, r4, #0x4c
	bl FUN_02007838
	ldr r1, [r4, #8]
	cmp r1, #0
	beq _02064DA8
	add r0, r4, #0x3c
	bl FUN_02064cdc
	arm_func_end FUN_02064d40
_02064DA8:
	ldr r1, [r4, #0x10]
	cmp r1, #0
	beq _02064DBC
	add r0, r4, #0x44
	bl FUN_02064cdc
_02064DBC:
	ldr r1, [r4, #0x18]
	cmp r1, #0
	beq _02064DD0
	add r0, r4, #0x4c
	bl FUN_02064cdc
_02064DD0:
	ldr r0, [r4]
	bic r0, r0, #0x10
	str r0, [r4]
_02064DDC:
	ldr r5, _02064E1C ; =0x020B703C
	ldr r0, [r5]
	cmp r0, #0
	beq _02064DFC
	mov r1, r4
	bl FUN_02064b44
	add sp, sp, #0x188
	pop {r4, r5, r6, pc}
_02064DFC:
	add r0, sp, #0
	mov r1, r4
	str r0, [r5]
	bl FUN_02064b44
	mov r0, #0
	str r0, [r5]
	add sp, sp, #0x188
	pop {r4, r5, r6, pc}
	.align 2, 0_02064E1C: .word 0x020B703C

	arm_func_start FUN_02064e20
FUN_02064e20: ; 0x02064E20
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0xc]
	cmp r1, #0
	beq _02064E38
	blx r1
	arm_func_end FUN_02064e20
_02064E38:
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	pop {r4, pc}

	arm_func_start FUN_02064e48
FUN_02064e48: ; 0x02064E48
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x10]
	cmp r1, #0
	beq _02064E60
	blx r1
	arm_func_end FUN_02064e48
_02064E60:
	ldr r0, [r4, #8]
	orr r0, r0, #0x20
	str r0, [r4, #8]
	pop {r4, pc}

	arm_func_start FUN_02064e70
FUN_02064e70: ; 0x02064E70
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r2, [r6, #8]
	tst r2, #0x200
	bne _02064FD8
	ldr r0, [r6, #0x14]
	ldr r1, [r6]
	cmp r0, #0
	ldrb r4, [r1, #1]
	ldrbne r5, [r6, #0x8e]
	orr r2, r2, #4
	add r1, r6, #0x184
	moveq r5, #0
	strb r4, [r6, #0xac]
	str r2, [r6, #8]
	str r1, [r6, #0xb8]
	cmp r5, #1
	bne _02064EEC
	ldr r0, [r6, #8]
	ldr r1, [r6, #0x14]
	bic r2, r0, #0x40
	mov r0, r6
	str r2, [r6, #8]
	blx r1
	ldr r0, [r6, #0x14]
	cmp r0, #0
	ldrbne r5, [r6, #0x8e]
	ldr r0, [r6, #8]
	moveq r5, #0
	and r0, r0, #0x40
	b _02064EF0
	arm_func_end FUN_02064e70
_02064EEC:
	mov r0, #0
_02064EF0:
	cmp r0, #0
	bne _02064F50
	ldr ip, [r6, #4]
	ldr r1, [ip, #0x18]
	cmp r1, #0
	beq _02064F3C
	lsr r0, r4, #5
	add r0, ip, r0, lsl #2
	ldr r0, [r0, #0x4c]
	and r2, r4, #0x1f
	mov r3, #1
	tst r0, r3, lsl r2
	beq _02064F3C
	ldr r0, [r6, #0xb8]
	ldr r3, [ip, #0x1c]
	mov r2, r4
	blx r3
	cmp r0, #0
	bne _02064F50
_02064F3C:
	ldr r1, [r6]
	ldr r0, [r6, #0xb8]
	ldrb r1, [r1, #2]
	and r1, r1, #1
	str r1, [r0]
_02064F50:
	cmp r5, #2
	bne _02064F8C
	ldr r0, [r6, #8]
	ldr r1, [r6, #0x14]
	bic r2, r0, #0x40
	mov r0, r6
	str r2, [r6, #8]
	blx r1
	ldr r0, [r6, #0x14]
	cmp r0, #0
	ldrbne r5, [r6, #0x8e]
	ldr r0, [r6, #8]
	moveq r5, #0
	and r0, r0, #0x40
	b _02064F90
_02064F8C:
	mov r0, #0
_02064F90:
	cmp r0, #0
	bne _02064FB8
	ldr r0, [r6, #0xb8]
	ldr r0, [r0]
	cmp r0, #0
	ldr r0, [r6, #8]
	orrne r0, r0, #1
	strne r0, [r6, #8]
	biceq r0, r0, #1
	streq r0, [r6, #8]
_02064FB8:
	cmp r5, #3
	bne _02064FD8
	ldr r0, [r6, #8]
	ldr r1, [r6, #0x14]
	bic r2, r0, #0x40
	mov r0, r6
	str r2, [r6, #8]
	blx r1
_02064FD8:
	ldr r0, [r6]
	add r0, r0, #3
	str r0, [r6]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02064fe8
FUN_02064fe8: ; 0x02064FE8
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r0, [r4, #8]
	tst r0, #0x200
	bne _020650A4
	tst r0, #1
	beq _020650A4
	ldr r0, [r4, #0x18]
	cmp r0, #0
	ldrbne r5, [r4, #0x8f]
	moveq r5, #0
	cmp r5, #1
	bne _02065050
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x18]
	bic r2, r0, #0x40
	mov r0, r4
	str r2, [r4, #8]
	blx r1
	ldr r0, [r4, #0x18]
	cmp r0, #0
	ldrbne r5, [r4, #0x8f]
	ldr r0, [r4, #8]
	moveq r5, #0
	and r0, r0, #0x40
	b _02065054
	arm_func_end FUN_02064fe8
_02065050:
	mov r0, #0
_02065054:
	cmp r0, #0
	bne _02065084
	ldr r0, [r4]
	ldrb r0, [r0, #1]
	str r0, [sp]
	ldr r0, [r4, #8]
	tst r0, #0x100
	bne _02065084
	add r1, sp, #0
	mov r0, #0x14
	mov r2, #1
	bl FUN_020672b4
_02065084:
	cmp r5, #3
	bne _020650A4
	ldr r0, [r4, #8]
	ldr r1, [r4, #0x18]
	bic r2, r0, #0x40
	mov r0, r4
	str r2, [r4, #8]
	blx r1
_020650A4:
	ldr r0, [r4]
	add r0, r0, #2
	str r0, [r4]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_020650b4
FUN_020650b4: ; 0x020650B4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	mov r8, r0
	ldr r4, [r8, #8]
	ldr r0, [r8, #0x1c]
	orr r5, r4, #8
	str r5, [r8, #8]
	cmp r0, #0
	ldrbne r5, [r8, #0x90]
	mov r6, r3
	mov sb, #0
	add r3, r8, #0xf4
	moveq r5, sb
	mov r4, r1
	mov r7, r2
	strb r6, [r8, #0xad]
	str r3, [r8, #0xb0]
	mov sl, #0x38
	cmp r5, #1
	bne _02065138
	ldr r0, [r8, #8]
	ldr r1, [r8, #0x1c]
	bic r2, r0, #0x40
	mov r0, r8
	str r2, [r8, #8]
	blx r1
	ldr r0, [r8, #0x1c]
	cmp r0, #0
	ldrbne r5, [r8, #0x90]
	ldr r0, [r8, #8]
	moveq r5, #0
	and r0, r0, #0x40
	b _0206513C
	arm_func_end FUN_020650b4
_02065138:
	mov r0, #0
_0206513C:
	cmp r0, #0
	bne _02065400
	ldr r0, [r8, #4]
	ldr r0, [r0, #0x38]
	cmp r0, #0
	beq _02065164
	ldr r1, [r8, #8]
	tst r1, #0x80
	mlaeq r4, r6, sl, r0
	beq _020653FC
_02065164:
	cmp r4, #0x20
	beq _02065174
	cmp r4, #0x40
	bne _020651A8
_02065174:
	lsr r1, r6, #5
	add r1, r8, r1, lsl #2
	ldr r1, [r1, #0xbc]
	and r2, r6, #0x1f
	mov r3, #1
	tst r1, r3, lsl r2
	beq _020651A8
	mov r1, #0x38
	cmp r0, #0
	mlane r4, r6, r1, r0
	ldreq r0, _02065514 ; =0x020B7040
	mlaeq r4, r6, r1, r0
	b _020653FC
_020651A8:
	cmp r0, #0
	mov r2, #0x38
	beq _020651E0
	add sl, r8, #0xbc
	lsr r4, r6, #5
	ldr r3, [sl, r4, lsl #2]
	and r0, r6, #0x1f
	mov r1, #1
	orr r0, r3, r1, lsl r0
	str r0, [sl, r4, lsl #2]
	ldr r0, [r8, #4]
	ldr r0, [r0, #0x38]
	mla r4, r6, r2, r0
	b _02065210
_020651E0:
	cmp r4, #0x40
	addne r4, r8, #0xf4
	bne _02065210
	add r1, r8, #0xbc
	lsr r0, r6, #5
	ldr r3, _02065514 ; =0x020B7040
	ldr fp, [r1, r0, lsl #2]
	and r4, r6, #0x1f
	mov sl, #1
	orr sl, fp, sl, lsl r4
	mla r4, r6, r2, r3
	str sl, [r1, r0, lsl #2]
_02065210:
	str sb, [r4]
	ldr r3, [r8, #0xd8]
	cmp r3, #0
	beq _02065260
	adds r2, r3, #4
	beq _0206524C
	ldrb r0, [r3, #5]
	cmp r6, r0
	bhs _0206524C
	ldrh r1, [r3, #0xa]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r6, r1
	b _02065250
_0206524C:
	mov r1, #0
_02065250:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, r3, r0
	bne _02065264
_02065260:
	mov r0, #0
_02065264:
	ldrh r0, [r0, #0x1e]
	ldrh sl, [r7, #0x1e]
	ldr r2, _02065518 ; =0x0208C49C
	tst r0, #0x20
	ldrne r0, [r4]
	asr r1, sl, #6
	orrne r0, r0, #0x20
	strne r0, [r4]
	ldr fp, _0206551C ; =0x020B6DD8
	and r1, r1, #7
	ldr sb, [r2, r1, lsl #2]
	ldr r3, [r7, #4]
	asr r1, sl, #9
	and r1, r1, #7
	ldr r2, [r2, r1, lsl #2]
	ldr r1, [r7, #8]
	ldr lr, [fp, #0x94]
	mvn ip, sb
	and r3, r3, sb
	and ip, lr, ip
	orr r3, ip, r3
	str r3, [r4, #4]
	ldr ip, [fp, #0x98]
	mvn sb, r2
	and sb, ip, sb
	and r1, r1, r2
	orr r1, sb, r1
	str r1, [r4, #8]
	ldr r0, [r7, #0x10]
	ldr r3, [r7, #0xc]
	mvn r1, r0
	ldr r2, [fp, #0x9c]
	and r0, r3, r0
	and r1, r2, r1
	orr r0, r1, r0
	str r0, [r4, #0xc]
	ldr r1, [r7, #0x14]
	ldrh r0, [r7, #0x1c]
	str r1, [r4, #0x10]
	tst sl, #1
	str r0, [r4, #0x14]
	beq _02065394
	tst sl, #2
	ldrne r1, [r4]
	add r0, r7, #0x2c
	orrne r1, r1, #1
	strne r1, [r4]
	bne _02065338
	ldr r2, [r0]
	ldr r1, [r0, #4]
	str r2, [r4, #0x18]
	str r1, [r4, #0x1c]
	add r0, r0, #8
_02065338:
	ldrh r1, [r7, #0x1e]
	tst r1, #4
	ldrne r1, [r4]
	orrne r1, r1, #2
	strne r1, [r4]
	bne _02065364
	ldrsh r2, [r0]
	ldrsh r1, [r0, #2]
	add r0, r0, #4
	strh r2, [r4, #0x20]
	strh r1, [r4, #0x22]
_02065364:
	ldrh r1, [r7, #0x1e]
	tst r1, #8
	ldreq r1, [r0]
	ldreq r0, [r0, #4]
	streq r1, [r4, #0x24]
	streq r0, [r4, #0x28]
	ldrne r0, [r4]
	orrne r0, r0, #4
	strne r0, [r4]
	ldr r0, [r4]
	orr r0, r0, #8
	str r0, [r4]
_02065394:
	ldr sb, [r8, #4]
	ldr r1, [sb, #8]
	cmp r1, #0
	beq _020653D0
	lsr r0, r6, #5
	add r0, sb, r0, lsl #2
	ldr r0, [r0, #0x3c]
	and r2, r6, #0x1f
	mov r3, #1
	tst r0, r3, lsl r2
	beq _020653D0
	ldr r3, [sb, #0xc]
	mov r0, r4
	mov r2, r6
	blx r3
_020653D0:
	ldr r0, [r4]
	tst r0, #0x18
	beq _020653FC
	ldrh r2, [r7, #0x20]
	ldrh r0, [r7, #0x22]
	ldr r1, [r7, #0x24]
	strh r2, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	ldr r0, [r7, #0x28]
	str r1, [r4, #0x30]
	str r0, [r4, #0x34]
_020653FC:
	str r4, [r8, #0xb0]
_02065400:
	cmp r5, #2
	bne _0206543C
	ldr r0, [r8, #8]
	ldr r1, [r8, #0x1c]
	bic r2, r0, #0x40
	mov r0, r8
	str r2, [r8, #8]
	blx r1
	ldr r0, [r8, #0x1c]
	cmp r0, #0
	ldrbne r5, [r8, #0x90]
	ldr r0, [r8, #8]
	moveq r5, #0
	and r0, r0, #0x40
	b _02065440
_0206543C:
	mov r0, #0
_02065440:
	cmp r0, #0
	bne _020654E8
	ldr r4, [r8, #0xb0]
	ldr r1, [r4, #0xc]
	tst r1, #0x1f0000
	beq _020654DC
	ldr r0, [r4]
	tst r0, #0x20
	bicne r0, r1, #0x1f0000
	strne r0, [r4, #0xc]
	ldr r0, [r8, #8]
	bic r0, r0, #2
	str r0, [r8, #8]
	tst r0, #0x100
	bne _020654E8
	ldr r0, _02065520 ; =0x00293130
	ldr r3, _02065524 ; =0x00002B2A
	str r0, [sp]
	ldr r2, [r4, #4]
	add r1, sp, #4
	str r2, [sp, #4]
	ldr r6, [r4, #8]
	mov r2, #6
	str r6, [sp, #8]
	ldr r6, [r4, #0xc]
	str r6, [sp, #0xc]
	str r3, [sp, #0x10]
	ldr r3, [r4, #0x10]
	str r3, [sp, #0x14]
	ldr r3, [r4, #0x14]
	str r3, [sp, #0x18]
	bl FUN_020672b4
	ldr r0, [r4]
	tst r0, #0x18
	beq _020654E8
	ldr r1, [r8, #0xf0]
	mov r0, r4
	blx r1
	b _020654E8
_020654DC:
	ldr r0, [r8, #8]
	orr r0, r0, #2
	str r0, [r8, #8]
_020654E8:
	cmp r5, #3
	addne sp, sp, #0x1c
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r8, #8]
	ldr r1, [r8, #0x1c]
	bic r2, r0, #0x40
	mov r0, r8
	str r2, [r8, #8]
	blx r1
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02065514: .word 0x020B7040
_02065518: .word 0x0208C49C
_0206551C: .word 0x020B6DD8
_02065520: .word 0x00293130
_02065524: .word 0x00002B2A

	arm_func_start FUN_02065528
FUN_02065528: ; 0x02065528
	push {r4, lr}
	mov r4, r0
	ldr r2, [r4, #8]
	tst r2, #0x200
	bne _020655C4
	ldr r0, [r4]
	tst r2, #1
	ldrb r3, [r0, #1]
	bne _02065560
	tst r2, #8
	beq _02065560
	ldrb r0, [r4, #0xad]
	cmp r3, r0
	beq _020655C4
	arm_func_end FUN_02065528
_02065560:
	ldr lr, [r4, #0xd8]
	cmp lr, #0
	beq _020655AC
	adds ip, lr, #4
	beq _02065598
	ldrb r0, [lr, #5]
	cmp r3, r0
	bhs _02065598
	ldrh r2, [lr, #0xa]
	ldrh r0, [ip, r2]
	add r2, ip, r2
	add r2, r2, #4
	mla r2, r0, r3, r2
	b _0206559C
_02065598:
	mov r2, #0
_0206559C:
	cmp r2, #0
	ldrne r0, [r2]
	addne r2, lr, r0
	bne _020655B0
_020655AC:
	mov r2, #0
_020655B0:
	ldrh lr, [r2]
	ldr ip, _020655D4 ; =0x020910B8
	mov r0, r4
	ldr ip, [ip, lr, lsl #2]
	blx ip
_020655C4:
	ldr r0, [r4]
	add r0, r0, #2
	str r0, [r4]
	pop {r4, pc}
	.align 2, 0_020655D4: .word 0x020910B8

	arm_func_start FUN_020655d8
FUN_020655d8: ; 0x020655D8
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, [r5, #0x20]
	mov r4, r2
	cmp r0, #0
	ldrbne r6, [r5, #0x91]
	moveq r6, #0
	cmp r6, #1
	bne _02065630
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x20]
	bic r2, r0, #0x40
	mov r0, r5
	str r2, [r5, #8]
	blx r1
	ldr r0, [r5, #0x20]
	cmp r0, #0
	ldrbne r6, [r5, #0x91]
	ldr r0, [r5, #8]
	moveq r6, #0
	and r0, r0, #0x40
	b _02065634
	arm_func_end FUN_020655d8
_02065630:
	mov r0, #0
_02065634:
	cmp r0, #0
	bne _02065658
	ldr r0, [r5, #8]
	tst r0, #0x100
	bne _02065658
	ldr r0, [r4, #8]
	ldr r1, [r4, #0xc]
	add r0, r4, r0
	bl FUN_020671fc
_02065658:
	cmp r6, #2
	bne _02065688
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x20]
	bic r2, r0, #0x40
	mov r0, r5
	str r2, [r5, #8]
	blx r1
	ldr r0, [r5, #0x20]
	cmp r0, #0
	ldrbne r6, [r5, #0x91]
	moveq r6, #0
_02065688:
	cmp r6, #3
	popne {r4, r5, r6, pc}
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x20]
	bic r2, r0, #0x40
	mov r0, r5
	str r2, [r5, #8]
	blx r1
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020656ac
FUN_020656ac: ; 0x020656AC
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #8]
	tst r0, #0x200
	bne _02065738
	tst r0, #1
	beq _02065738
	tst r0, #2
	bne _02065738
	ldr r0, [r4]
	ldr ip, [r4, #0xdc]
	ldrb r3, [r0, #1]
	cmp ip, #0
	beq _02065720
	beq _0206570C
	ldrb r0, [ip, #1]
	cmp r3, r0
	bhs _0206570C
	ldrh r2, [ip, #6]
	ldrh r0, [ip, r2]
	add r2, ip, r2
	add r2, r2, #4
	mla r2, r0, r3, r2
	b _02065710
	arm_func_end FUN_020656ac
_0206570C:
	mov r2, #0
_02065710:
	cmp r2, #0
	ldrne r0, [r2]
	addne r2, ip, r0
	bne _02065724
_02065720:
	mov r2, #0
_02065724:
	ldrh lr, [r2]
	ldr ip, _02065748 ; =0x020910C8
	mov r0, r4
	ldr ip, [ip, lr, lsl #2]
	blx ip
_02065738:
	ldr r0, [r4]
	add r0, r0, #2
	str r0, [r4]
	pop {r4, pc}
	.align 2, 0_02065748: .word 0x020910C8

	arm_func_start FUN_0206574c
FUN_0206574c: ; 0x0206574C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov sl, r0
	ldr r2, [sl]
	ldr r0, [sl, #8]
	ldrb r7, [r2, #1]
	orr r0, r0, #0x10
	mov sb, r1
	strb r7, [sl, #0xae]
	str r0, [sl, #8]
	tst r0, #0x400
	mov r6, #0
	mov r4, #4
	beq _020657DC
	cmp sb, #0x40
	cmpne sb, #0x60
	addeq r4, r4, #1
	cmp sb, #0x20
	beq _020657A0
	cmp sb, #0x60
	bne _020657C8
	arm_func_end FUN_0206574c
_020657A0:
	tst r0, #0x100
	add r4, r4, #1
	bne _020657C8
	ldr r0, [sl]
	add r1, sp, #0x10
	ldrb r3, [r0, #4]
	mov r0, #0x14
	mov r2, #1
	str r3, [sp, #0x10]
	bl FUN_020672b4
_020657C8:
	ldr r0, [sl]
	add sp, sp, #0x14
	add r0, r0, r4
	str r0, [sl]
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020657DC:
	cmp sb, #0x40
	beq _020657EC
	cmp sb, #0x60
	bne _02065824
_020657EC:
	ldr r0, [sl]
	cmp sb, #0x40
	ldrbeq r0, [r0, #4]
	add r4, r4, #1
	streq r0, [sp, #0xc]
	ldrbne r0, [r0, #5]
	strne r0, [sp, #0xc]
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _02065824
	add r1, sp, #0xc
	mov r0, #0x14
	mov r2, #1
	bl FUN_020672b4
_02065824:
	ldr r0, [sl, #0x24]
	add r1, sl, #0x12c
	cmp r0, #0
	ldrbne r8, [sl, #0x92]
	str r1, [sl, #0xb4]
	moveq r8, #0
	cmp r8, #1
	bne _02065878
	ldr r0, [sl, #8]
	ldr r1, [sl, #0x24]
	bic r2, r0, #0x40
	mov r0, sl
	str r2, [sl, #8]
	blx r1
	ldr r0, [sl, #0x24]
	cmp r0, #0
	ldrbne r8, [sl, #0x92]
	ldr r0, [sl, #8]
	moveq r8, #0
	and r0, r0, #0x40
	b _0206587C
_02065878:
	mov r0, #0
_0206587C:
	cmp r0, #0
	bne _02065AB0
	ldr r0, [sl, #4]
	ldr r1, [r0, #0x34]
	cmp r1, #0
	beq _020658B0
	mov r0, #0x58
	mla r5, r7, r0, r1
	ldr r0, [sl, #8]
	tst r0, #0x80
	moveq r0, #1
	movne r0, #0
	b _020658B8
_020658B0:
	add r5, sl, #0x12c
	mov r0, #0
_020658B8:
	cmp r0, #0
	bne _02065AAC
	str r6, [r5]
	ldr r0, [sl, #4]
	ldr r1, [r0, #0x10]
	cmp r1, #0
	beq _020658EC
	ldr r3, [r0, #0x14]
	mov r0, r5
	mov r2, r7
	blx r3
	cmp r0, #0
	bne _02065AAC
_020658EC:
	ldr r2, [sl, #0xd4]
	cmp r2, #0
	beq _02065934
	beq _02065920
	ldrb r0, [r2, #1]
	cmp r7, r0
	bhs _02065920
	ldrh r1, [r2, #6]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r7, r1
	b _02065924
_02065920:
	mov r1, #0
_02065924:
	cmp r1, #0
	ldrne r0, [r1]
	addne r7, r2, r0
	bne _02065938
_02065934:
	mov r7, #0
_02065938:
	ldrh r0, [r7]
	add r6, r7, #4
	tst r0, #1
	ldrne r0, [r5]
	orrne r0, r0, #4
	strne r0, [r5]
	bne _02065970
	ldr r0, [r6]
	str r0, [r5, #0x4c]
	ldr r0, [r6, #4]
	str r0, [r5, #0x50]
	ldr r0, [r6, #8]
	add r6, r6, #0xc
	str r0, [r5, #0x54]
_02065970:
	ldrh r0, [r7]
	tst r0, #2
	ldrne r0, [r5]
	orrne r0, r0, #2
	strne r0, [r5]
	bne _02065A94
	tst r0, #8
	beq _02065A48
	and r1, r0, #0xf0
	asr fp, r1, #4
	ldrsh r1, [r6]
	add r0, r5, #0x28
	str r1, [sp]
	ldrsh r1, [r6, #2]
	str r1, [sp, #4]
	blx FUN_02008264
	ldrh r0, [r7]
	ldr r2, _02065B98 ; =0x0208C4BC
	ldr r1, _02065B9C ; =0x0208C4BD
	tst r0, #0x100
	mov r0, #0x1000
	ldrb r2, [r2, fp, lsl #2]
	ldrb r1, [r1, fp, lsl #2]
	rsbne r0, r0, #0
	add r3, r5, fp, lsl #2
	str r0, [r3, #0x28]
	ldr r0, [sp]
	add r2, r5, r2, lsl #2
	str r0, [r2, #0x28]
	ldr r0, [sp, #4]
	add r1, r5, r1, lsl #2
	str r0, [r1, #0x28]
	ldrh r0, [r7]
	add r6, r6, #4
	tst r0, #0x200
	ldrne r0, [sp, #4]
	rsbne r0, r0, #0
	strne r0, [sp, #4]
	ldr r0, _02065BA0 ; =0x0208C4BE
	ldrb r0, [r0, fp, lsl #2]
	add r1, r5, r0, lsl #2
	ldr r0, [sp, #4]
	str r0, [r1, #0x28]
	ldrh r0, [r7]
	tst r0, #0x400
	ldrne r0, [sp]
	rsbne r0, r0, #0
	strne r0, [sp]
	ldr r0, _02065BA4 ; =0x0208C4BF
	ldrb r0, [r0, fp, lsl #2]
	add r1, r5, r0, lsl #2
	ldr r0, [sp]
	str r0, [r1, #0x28]
	b _02065A94
_02065A48:
	ldrsh r0, [r7, #2]
	str r0, [r5, #0x28]
	ldrsh r0, [r6]
	str r0, [r5, #0x2c]
	ldrsh r0, [r6, #2]
	str r0, [r5, #0x30]
	ldrsh r0, [r6, #4]
	str r0, [r5, #0x34]
	ldrsh r0, [r6, #6]
	str r0, [r5, #0x38]
	ldrsh r0, [r6, #8]
	str r0, [r5, #0x3c]
	ldrsh r0, [r6, #0xa]
	str r0, [r5, #0x40]
	ldrsh r0, [r6, #0xc]
	str r0, [r5, #0x44]
	ldrsh r0, [r6, #0xe]
	add r6, r6, #0x10
	str r0, [r5, #0x48]
_02065A94:
	ldrh r3, [r7]
	ldr r2, [sl]
	ldr r7, [sl, #0xe8]
	mov r0, r5
	mov r1, r6
	blx r7
_02065AAC:
	str r5, [sl, #0xb4]
_02065AB0:
	cmp r8, #2
	bne _02065AEC
	ldr r0, [sl, #8]
	ldr r1, [sl, #0x24]
	bic r2, r0, #0x40
	mov r0, sl
	str r2, [sl, #8]
	blx r1
	ldr r0, [sl, #0x24]
	cmp r0, #0
	ldrbne r8, [sl, #0x92]
	ldr r0, [sl, #8]
	moveq r8, #0
	and r0, r0, #0x40
	b _02065AF0
_02065AEC:
	mov r0, #0
_02065AF0:
	cmp r0, #0
	bne _02065B10
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _02065B10
	ldr r0, [sl, #0xb4]
	ldr r1, [sl, #0xec]
	blx r1
_02065B10:
	mov r0, #0
	str r0, [sl, #0xb4]
	cmp r8, #3
	bne _02065B40
	ldr r0, [sl, #8]
	ldr r1, [sl, #0x24]
	bic r2, r0, #0x40
	mov r0, sl
	str r2, [sl, #8]
	blx r1
	ldr r0, [sl, #8]
	and r0, r0, #0x40
_02065B40:
	cmp sb, #0x20
	beq _02065B50
	cmp sb, #0x60
	bne _02065B84
_02065B50:
	cmp r0, #0
	add r4, r4, #1
	bne _02065B84
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _02065B84
	ldr r0, [sl]
	add r1, sp, #8
	ldrb r3, [r0, #4]
	mov r0, #0x13
	mov r2, #1
	str r3, [sp, #8]
	bl FUN_020672b4
_02065B84:
	ldr r0, [sl]
	add r0, r0, r4
	str r0, [sl]
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02065B98: .word 0x0208C4BC
_02065B9C: .word 0x0208C4BD
_02065BA0: .word 0x0208C4BE
_02065BA4: .word 0x0208C4BF

	arm_func_start FUN_02065ba8
FUN_02065ba8: ; 0x02065BA8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc8
	mov sl, r0
	ldr r0, [sl, #8]
	mov sb, r1
	tst r0, #0x200
	mov r4, #0
	mov r5, #2
	ldr r6, _02065E68 ; =0x02091148
	ldr r7, _02065E6C ; =0x02091154
	beq _02065C00
	cmp sb, #0x40
	cmpne sb, #0x60
	addeq r5, r5, #1
	cmp sb, #0x20
	cmpne sb, #0x60
	ldr r0, [sl]
	addeq r5, r5, #1
	add r0, r0, r5
	add sp, sp, #0xc8
	str r0, [sl]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02065ba8
_02065C00:
	cmp sb, #0x40
	beq _02065C10
	cmp sb, #0x60
	bne _02065C44
_02065C10:
	tst r0, #0x100
	add r5, r5, #1
	bne _02065C44
	ldr r0, [sl]
	cmp sb, #0x40
	ldrbeq r0, [r0, #2]
	add r1, sp, #4
	mov r2, #1
	streq r0, [sp, #4]
	ldrbne r0, [r0, #3]
	strne r0, [sp, #4]
	mov r0, #0x14
	bl FUN_020672b4
_02065C44:
	ldr r0, [sl, #0x28]
	cmp r0, #0
	ldrbne r8, [sl, #0x93]
	moveq r8, #0
	cmp r8, #1
	bne _02065C90
	ldr r0, [sl, #8]
	ldr r1, [sl, #0x28]
	bic r2, r0, #0x40
	mov r0, sl
	str r2, [sl, #8]
	blx r1
	ldr r0, [sl, #0x28]
	cmp r0, #0
	ldrbne r8, [sl, #0x93]
	ldr r0, [sl, #8]
	moveq r8, #0
	and r1, r0, #0x40
	b _02065C94
_02065C90:
	mov r1, #0
_02065C94:
	ldr r0, [sl, #8]
	tst r0, #0x100
	cmpeq r1, #0
	bne _02065DE4
	bl FUN_02067170
	ldr r1, _02065E70 ; =0x00151110
	ldr r0, _02065E74 ; =0x04000400
	str r1, [r0]
	str r4, [r0]
	str r4, [r0]
	add r4, sp, #0x88
_02065CC0:
	mov r0, r4
	bl FUN_020049f8
	cmp r0, #0
	bne _02065CC0
	ldr r0, _02065E78 ; =0x020B6DD8
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _02065CEC
	bl FUN_020644dc
	add fp, sp, #0x48
	b _02065CFC
_02065CEC:
	tst r0, #2
	beq _02065D14
	ldr r0, _02065E7C ; =0x020B6E24
	add fp, sp, #8
_02065CFC:
	mov r1, fp
	bl FUN_020085f4
	mov r0, r4
	mov r1, fp
	mov r2, r4
	bl FUN_02008e70
_02065D14:
	ldr r3, [sp, #0xb8]
	ldr r2, [sp, #0xbc]
	ldr r1, [sp, #0xc0]
	add r0, sp, #0x88
	str r3, [r6]
	str r2, [r6, #4]
	str r1, [r6, #8]
	bl FUN_02009850
	str r0, [r7]
	add r0, sp, #0x98
	bl FUN_02009850
	str r0, [r7, #4]
	add r0, sp, #0xa8
	bl FUN_02009850
	ldr r1, _02065E78 ; =0x020B6DD8
	str r0, [r7, #8]
	ldr r0, [r1, #0xfc]
	tst r0, #1
	beq _02065DA8
	ldr r4, _02065E74 ; =0x04000400
	ldr r3, _02065E80 ; =0x00171012
	ldr r0, _02065E84 ; =0x0209111C
	mov r1, r4
	mov r2, #8
	str r3, [r4]
	bl FUN_02007864
	bl FUN_02064510
_02065D80:
	mov r1, r4
	mov r2, #0x30
	bl FUN_02007864
	ldr r1, _02065E88 ; =0x00001B19
	ldr r0, _02065E8C ; =0x02091124
	str r1, [r4]
	mov r1, r4
	mov r2, #0x3c
	bl FUN_02007864
	b _02065DE4
_02065DA8:
	tst r0, #2
	beq _02065DD4
	ldr r4, _02065E74 ; =0x04000400
	ldr r3, _02065E80 ; =0x00171012
	ldr r0, _02065E84 ; =0x0209111C
	mov r1, r4
	mov r2, #8
	str r3, [r4]
	bl FUN_02007864
	bl FUN_02064438
	b _02065D80
_02065DD4:
	ldr r0, _02065E90 ; =0x02091118
	ldr r1, _02065E74 ; =0x04000400
	mov r2, #0x48
	bl FUN_02007864
_02065DE4:
	cmp r8, #3
	movne r0, #0
	bne _02065E10
	ldr r0, [sl, #8]
	ldr r1, [sl, #0x28]
	bic r2, r0, #0x40
	mov r0, sl
	str r2, [sl, #8]
	blx r1
	ldr r0, [sl, #8]
	and r0, r0, #0x40
_02065E10:
	cmp sb, #0x20
	beq _02065E20
	cmp sb, #0x60
	bne _02065E54
_02065E20:
	cmp r0, #0
	add r5, r5, #1
	bne _02065E54
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _02065E54
	ldr r0, [sl]
	add r1, sp, #0
	ldrb r3, [r0, #2]
	mov r0, #0x13
	mov r2, #1
	str r3, [sp]
	bl FUN_020672b4
_02065E54:
	ldr r0, [sl]
	add r0, r0, r5
	str r0, [sl]
	add sp, sp, #0xc8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02065E68: .word 0x02091148
_02065E6C: .word 0x02091154
_02065E70: .word 0x00151110
_02065E74: .word 0x04000400
_02065E78: .word 0x020B6DD8
_02065E7C: .word 0x020B6E24
_02065E80: .word 0x00171012
_02065E84: .word 0x0209111C
_02065E88: .word 0x00001B19
_02065E8C: .word 0x02091124
_02065E90: .word 0x02091118

	arm_func_start FUN_02065e94
FUN_02065e94: ; 0x02065E94
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc8
	mov sl, r0
	ldr r0, [sl, #8]
	mov sb, r1
	tst r0, #0x200
	mov r4, #0
	mov r5, #2
	ldr fp, _020661B4 ; =0x02091190
	ldr r6, _020661B8 ; =0x0209119C
	ldr r7, _020661BC ; =0x0209116C
	beq _02065EF0
	cmp sb, #0x40
	cmpne sb, #0x60
	addeq r5, r5, #1
	cmp sb, #0x20
	cmpne sb, #0x60
	ldr r0, [sl]
	addeq r5, r5, #1
	add r0, r0, r5
	add sp, sp, #0xc8
	str r0, [sl]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02065e94
_02065EF0:
	cmp sb, #0x40
	beq _02065F00
	cmp sb, #0x60
	bne _02065F34
_02065F00:
	tst r0, #0x100
	add r5, r5, #1
	bne _02065F34
	ldr r0, [sl]
	cmp sb, #0x40
	ldrbeq r0, [r0, #2]
	add r1, sp, #4
	mov r2, #1
	streq r0, [sp, #4]
	ldrbne r0, [r0, #3]
	strne r0, [sp, #4]
	mov r0, #0x14
	bl FUN_020672b4
_02065F34:
	ldr r0, [sl, #0x2c]
	cmp r0, #0
	ldrbne r8, [sl, #0x94]
	moveq r8, #0
	cmp r8, #1
	bne _02065F80
	ldr r0, [sl, #8]
	ldr r1, [sl, #0x2c]
	bic r2, r0, #0x40
	mov r0, sl
	str r2, [sl, #8]
	blx r1
	ldr r0, [sl, #0x2c]
	cmp r0, #0
	ldrbne r8, [sl, #0x94]
	ldr r0, [sl, #8]
	moveq r8, #0
	and r1, r0, #0x40
	b _02065F84
_02065F80:
	mov r1, #0
_02065F84:
	ldr r0, [sl, #8]
	tst r0, #0x100
	cmpeq r1, #0
	bne _02066130
	bl FUN_02067170
	ldr r1, _020661C0 ; =0x00151110
	ldr r0, _020661C4 ; =0x04000400
	str r1, [r0]
	str r4, [r0]
	str r4, [r0]
	add r4, sp, #0x88
_02065FB0:
	mov r0, r4
	bl FUN_020049f8
	cmp r0, #0
	bne _02065FB0
	ldr r0, _020661C8 ; =0x020B6DD8
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _02065FE8
	bl FUN_020644dc
	add r1, sp, #0x48
	bl FUN_020085f4
	add r1, sp, #0x48
	mov r0, r4
	b _02066004
_02065FE8:
	tst r0, #2
	beq _0206600C
	ldr r0, _020661CC ; =0x020B6E24
	add r1, sp, #8
	bl FUN_020085f4
	mov r0, r4
	add r1, sp, #8
_02066004:
	mov r2, r4
	bl FUN_02008e70
_0206600C:
	ldr r3, [sp, #0xb8]
	ldr r2, [sp, #0xbc]
	ldr r1, [sp, #0xc0]
	add r0, sp, #0x88
	str r3, [fp]
	str r2, [fp, #4]
	str r1, [fp, #8]
	bl FUN_02009850
	str r0, [r6]
	add r0, sp, #0x98
	bl FUN_02009850
	str r0, [r6, #4]
	add r0, sp, #0xa8
	bl FUN_02009850
	ldr r1, [sp, #0xa0]
	str r0, [r6, #8]
	ldr r0, [sp, #0x9c]
	str r1, [r7, #0x14]
	ldr r1, [sp, #0x98]
	str r0, [r7, #0x10]
	str r0, [r7]
	mov r0, #0
	str r0, [r7, #8]
	rsb r0, r1, #0
	str r1, [r7, #0xc]
	str r0, [r7, #4]
	mov r0, r7
	mov r1, r7
	bl FUN_020098b0
	add r0, r7, #0xc
	mov r1, r0
	bl FUN_020098b0
	mov r0, r7
	add r1, r7, #0xc
	add r2, r7, #0x18
	bl FUN_020097d0
	ldr r0, _020661C8 ; =0x020B6DD8
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _020660F4
	ldr r4, _020661C4 ; =0x04000400
	ldr r3, _020661D0 ; =0x00171012
	ldr r0, _020661D4 ; =0x02091164
	mov r1, r4
	mov r2, #8
	str r3, [r4]
	bl FUN_02007864
	bl FUN_02064510
_020660CC:
	mov r1, r4
	mov r2, #0x30
	bl FUN_02007864
	ldr r1, _020661D8 ; =0x00001B19
	ldr r0, _020661BC ; =0x0209116C
	str r1, [r4]
	mov r1, r4
	mov r2, #0x3c
	bl FUN_02007864
	b _02066130
_020660F4:
	tst r0, #2
	beq _02066120
	ldr r4, _020661C4 ; =0x04000400
	ldr r3, _020661D0 ; =0x00171012
	ldr r0, _020661D4 ; =0x02091164
	mov r1, r4
	mov r2, #8
	str r3, [r4]
	bl FUN_02007864
	bl FUN_02064438
	b _020660CC
_02066120:
	ldr r0, _020661DC ; =0x02091160
	ldr r1, _020661C4 ; =0x04000400
	mov r2, #0x48
	bl FUN_02007864
_02066130:
	cmp r8, #3
	movne r0, #0
	bne _0206615C
	ldr r0, [sl, #8]
	ldr r1, [sl, #0x2c]
	bic r2, r0, #0x40
	mov r0, sl
	str r2, [sl, #8]
	blx r1
	ldr r0, [sl, #8]
	and r0, r0, #0x40
_0206615C:
	cmp sb, #0x20
	beq _0206616C
	cmp sb, #0x60
	bne _020661A0
_0206616C:
	cmp r0, #0
	add r5, r5, #1
	bne _020661A0
	ldr r0, [sl, #8]
	tst r0, #0x100
	bne _020661A0
	ldr r0, [sl]
	add r1, sp, #0
	ldrb r3, [r0, #2]
	mov r0, #0x13
	mov r2, #1
	str r3, [sp]
	bl FUN_020672b4
_020661A0:
	ldr r0, [sl]
	add r0, r0, r5
	str r0, [sl]
	add sp, sp, #0xc8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020661B4: .word 0x02091190
_020661B8: .word 0x0209119C
_020661BC: .word 0x0209116C
_020661C0: .word 0x00151110
_020661C4: .word 0x04000400
_020661C8: .word 0x020B6DD8
_020661CC: .word 0x020B6E24
_020661D0: .word 0x00171012
_020661D4: .word 0x02091164
_020661D8: .word 0x00001B19
_020661DC: .word 0x02091160

	arm_func_start FUN_020661e0
FUN_020661e0: ; 0x020661E0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x104
	ldr r1, [r0, #4]
	ldr r6, [r0]
	ldr r7, [r1, #4]
	ldrb r2, [r6, #2]
	ldr r3, [r7, #0x10]
	mov r5, #0
	str r0, [sp]
	str r2, [sp, #0x10]
	add r3, r7, r3
	add r1, sp, #0xb0
	mov r0, r5
	mov r2, #0x54
	mov r4, r5
	str r3, [sp, #0x14]
	add r6, r6, #3
	bl FUN_0200787c
	bl FUN_02067170
	ldr r1, _02066918 ; =0x04000440
	mov r0, #1
	str r5, [r1]
	str r0, [r1, #0xc]
	str r5, [r1, #0x14]
	mov r0, #2
	str r0, [r1]
	ldr r0, [sp, #0x10]
	str r5, [sp, #0xc]
	cmp r0, #0
	bls _020666C4
	arm_func_end FUN_020661e0
_02066258:
	ldrb fp, [r6, #1]
	mov r1, #0x64
	ldr r0, [sp]
	smulbb r1, fp, r1
	lsr r2, fp, #5
	str r1, [sp, #4]
	add r0, r0, r2, lsl #2
	ldr r3, _0206691C ; =0x020B8440
	ldr r2, [sp, #4]
	ldr sb, [r0, #0xcc]
	add r7, r3, r2
	and r1, fp, #0x1f
	mov r2, #1
	ands r3, sb, r2, lsl r1
	str r3, [sp, #8]
	bne _020662C4
	ldr sb, [r0, #0xcc]
	ldr r3, _02066920 ; =0x04000450
	orr r1, sb, r2, lsl r1
	str r1, [r0, #0xcc]
	ldr r0, [sp, #0x14]
	mov r1, #0x54
	mla r0, fp, r1, r0
	ldrb sb, [r6]
	str sb, [r3]
	str r2, [r3, #-0x10]
	bl FUN_020046b0
_020662C4:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	beq _020664EC
	ldr r0, [sp, #0xe0]
	ldm r8, {sb, lr}
	str r0, [sp, #0x18]
	asr r0, sb, #0x1f
	str r0, [sp, #0x20]
	ldr r0, [sp, #0xe4]
	ldr ip, [r8, #8]
	str r0, [sp, #0x24]
	asr r0, lr, #0x1f
	str r0, [sp, #0x28]
	ldr r0, [sp, #0xe8]
	ldr r3, [r8, #0xc]
	str r0, [sp, #0x2c]
	ldr r0, [sp, #0xec]
	ldr r2, [r8, #0x10]
	str r0, [sp, #0x34]
	asr r0, ip, #0x1f
	str r0, [sp, #0x30]
	ldr r0, [sp, #0xf0]
	ldr r1, [r8, #0x14]
	str r0, [sp, #0x3c]
	asr r0, r3, #0x1f
	str r0, [sp, #0x38]
	ldr r0, [sp, #0xf4]
	str r0, [sp, #0x44]
	asr r0, r2, #0x1f
	str r0, [sp, #0x40]
	ldr r0, [sp, #0xf8]
	str r0, [sp, #0x4c]
	asr r0, r1, #0x1f
	str r0, [sp, #0x48]
	ldr r0, [r8, #0x18]
	str r0, [sp, #0x50]
	ldr r0, [sp, #0xfc]
	str r0, [sp, #0x58]
	ldr r0, [sp, #0x50]
	asr r0, r0, #0x1f
	str r0, [sp, #0x54]
	ldr r0, [r8, #0x1c]
	str r0, [sp, #0xa8]
	ldr r0, [r8, #0x20]
	ldr r8, [sp, #0xa8]
	asr r8, r8, #0x1f
	str r8, [sp, #0x5c]
	ldr r8, [sp, #0x100]
	str r8, [sp, #0x60]
	asr r8, r0, #0x1f
	str r8, [sp, #0x64]
	umull sl, r8, r5, sb
	str sl, [sp, #0x1c]
	ldr sl, [sp, #0x20]
	mla r8, r5, sl, r8
	mla r8, r4, sb, r8
	ldr sb, [sp, #0x1c]
	lsr sb, sb, #0xc
	orr sb, sb, r8, lsl #20
	ldr r8, [sp, #0x18]
	adds r8, r8, sb
	str r8, [sp, #0xe0]
	umull sl, sb, r5, lr
	ldr r8, [sp, #0x28]
	lsr sl, sl, #0xc
	mla sb, r5, r8, sb
	mla sb, r4, lr, sb
	ldr r8, [sp, #0x24]
	orr sl, sl, sb, lsl #20
	adds r8, r8, sl
	str r8, [sp, #0xe4]
	umull sl, sb, r5, ip
	ldr r8, [sp, #0x30]
	lsr sl, sl, #0xc
	mla sb, r5, r8, sb
	mla sb, r4, ip, sb
	ldr r8, [sp, #0x2c]
	orr sl, sl, sb, lsl #20
	adds r8, r8, sl
	str r8, [sp, #0xe8]
	ldr r8, [sp, #0x38]
	umull sl, sb, r5, r3
	mla sb, r5, r8, sb
	mla sb, r4, r3, sb
	lsr r8, sl, #0xc
	ldr r3, [sp, #0x34]
	orr r8, r8, sb, lsl #20
	adds r3, r3, r8
	str r3, [sp, #0xec]
	ldr r3, [sp, #0x40]
	umull sb, r8, r5, r2
	mla r8, r5, r3, r8
	mla r8, r4, r2, r8
	lsr r3, sb, #0xc
	ldr r2, [sp, #0x3c]
	orr r3, r3, r8, lsl #20
	adds r2, r2, r3
	str r2, [sp, #0xf0]
	ldr r2, [sp, #0x48]
	umull r8, r3, r5, r1
	mla r3, r5, r2, r3
	mla r3, r4, r1, r3
	lsr r2, r8, #0xc
	ldr r1, [sp, #0x44]
	orr r2, r2, r3, lsl #20
	adds r1, r1, r2
	str r1, [sp, #0xf4]
	ldr r1, [sp, #0x50]
	umull r3, r2, r5, r1
	ldr r1, [sp, #0x54]
	lsr r3, r3, #0xc
	mla r2, r5, r1, r2
	ldr r1, [sp, #0x50]
	mla r2, r4, r1, r2
	ldr r1, [sp, #0x4c]
	orr r3, r3, r2, lsl #20
	adds r1, r1, r3
	str r1, [sp, #0xf8]
	ldr r1, [sp, #0xa8]
	umull r3, r2, r5, r1
	ldr r1, [sp, #0x5c]
	lsr r3, r3, #0xc
	mla r2, r5, r1, r2
	ldr r1, [sp, #0xa8]
	mla r2, r4, r1, r2
	ldr r1, [sp, #0x58]
	orr r3, r3, r2, lsl #20
	adds r1, r1, r3
	str r1, [sp, #0xfc]
	ldr r1, [sp, #0x64]
	umull r3, r2, r5, r0
	mla r2, r5, r1, r2
	mla r2, r4, r0, r2
	lsr r1, r3, #0xc
	ldr r0, [sp, #0x60]
	orr r1, r1, r2, lsl #20
	adds r0, r0, r1
	str r0, [sp, #0x100]
_020664EC:
	ldr r0, [sp, #8]
	cmp r0, #0
	bne _02066528
_020664F8:
	mov r0, r7
	bl FUN_020049f8
	cmp r0, #0
	bne _020664F8
	ldr r0, [sp, #0x14]
	mov r1, #0x54
	mla r0, fp, r1, r0
	ldr r1, _02066918 ; =0x04000440
	mov r2, #2
	add r0, r0, #0x30
	str r2, [r1]
	bl FUN_020046cc
_02066528:
	ldrb r0, [r6, #2]
	ldr r1, _02066924 ; =0x020B8480
	ldr r3, [r7]
	lsl r5, r0, #4
	ldr r0, [sp, #4]
	ldmib r7, {r2, sl}
	add r8, r1, r0
	smull r1, r0, r5, r3
	lsr r3, r1, #0xc
	orr r3, r3, r0, lsl #20
	smull r1, r0, r5, r2
	lsr r2, r1, #0xc
	orr r2, r2, r0, lsl #20
	smull r1, r0, r5, sl
	lsr r1, r1, #0xc
	ldr sb, [r7, #0x10]
	orr r1, r1, r0, lsl #20
	smull r0, sb, r5, sb
	lsr r0, r0, #0xc
	ldr sl, [sp, #0xb4]
	ldr fp, [sp, #0xb0]
	adds r2, sl, r2
	str r2, [sp, #0xb4]
	adds r3, fp, r3
	str r3, [sp, #0xb0]
	ldr r3, [sp, #0xb8]
	ldr r4, [r7, #0x14]
	adds r1, r3, r1
	orr r0, r0, sb, lsl #20
	smull sb, r4, r5, r4
	ldr r2, [sp, #0xbc]
	lsr sb, sb, #0xc
	adds r0, r2, r0
	str r0, [sp, #0xbc]
	orr sb, sb, r4, lsl #20
	ldr r0, [sp, #0xc0]
	str r1, [sp, #0xb8]
	adds r0, r0, sb
	str r0, [sp, #0xc0]
	ldr r0, [r7, #0x18]
	ldr r2, [sp, #0xc4]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r2, r1
	str r0, [sp, #0xc4]
	ldr r0, [r7, #0x20]
	ldr r3, [sp, #0xc8]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r3, r1
	str r0, [sp, #0xc8]
	ldr r0, [r7, #0x24]
	ldr r2, [sp, #0xcc]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r2, r1
	str r0, [sp, #0xcc]
	ldr r0, [r7, #0x28]
	ldr r3, [sp, #0xd0]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r3, r1
	str r0, [sp, #0xd0]
	ldr r0, [r7, #0x30]
	ldr r2, [sp, #0xd4]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	adds r0, r2, r1
	ldr r1, [r7, #0x34]
	str r0, [sp, #0xd4]
	smull r2, r1, r5, r1
	lsr r2, r2, #0xc
	ldr r3, [sp, #0xd8]
	orr r2, r2, r1, lsl #20
	adds r1, r3, r2
	ldr r0, [r7, #0x38]
	str r1, [sp, #0xd8]
	smull r1, r0, r5, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	ldr r0, [sp, #0xdc]
	asr r4, r5, #0x1f
	adds r0, r0, r1
	str r0, [sp, #0xdc]
	ldr r0, [sp, #8]
	add r6, r6, #3
	cmp r0, #0
	bne _020666AC
_0206669C:
	mov r0, r8
	bl FUN_02004a28
	cmp r0, #0
	bne _0206669C
_020666AC:
	ldr r0, [sp, #0xc]
	add r1, r0, #1
	ldr r0, [sp, #0x10]
	str r1, [sp, #0xc]
	cmp r1, r0
	blo _02066258
_020666C4:
	ldm r8, {r0, fp}
	ldr sl, [r8, #8]
	ldr sb, [r8, #0xc]
	ldr r7, [r8, #0x10]
	ldr r6, [r8, #0x14]
	ldr r3, [r8, #0x18]
	ldr r2, [r8, #0x1c]
	ldr r1, [r8, #0x20]
	umull ip, r8, r5, r0
	lsr lr, ip, #0xc
	ldr ip, [sp, #0xe0]
	str ip, [sp, #0x68]
	asr ip, r0, #0x1f
	mla r8, r5, ip, r8
	mla r8, r4, r0, r8
	orr lr, lr, r8, lsl #20
	umull ip, r8, r5, fp
	ldr r0, [sp, #0x68]
	str ip, [sp, #0x6c]
	adds r0, r0, lr
	str r0, [sp, #0xe0]
	asr r0, fp, #0x1f
	str r0, [sp, #0xac]
	ldr ip, [sp, #0xac]
	ldr r0, [sp, #0xe8]
	mla r8, r5, ip, r8
	mla r8, r4, fp, r8
	ldr fp, [sp, #0x6c]
	str r0, [sp, #0x70]
	lsr fp, fp, #0xc
	asr r0, sl, #0x1f
	str r0, [sp, #0x74]
	ldr r0, [sp, #0xec]
	ldr lr, [sp, #0xe4]
	orr fp, fp, r8, lsl #20
	adds r8, lr, fp
	str r8, [sp, #0xe4]
	str r0, [sp, #0x78]
	asr r0, sb, #0x1f
	str r0, [sp, #0x7c]
	ldr r0, [sp, #0xf0]
	ldr r8, [sp, #0x74]
	umull ip, fp, r5, sl
	mla fp, r5, r8, fp
	mla fp, r4, sl, fp
	lsr sl, ip, #0xc
	str r0, [sp, #0x80]
	asr r0, r7, #0x1f
	str r0, [sp, #0x84]
	ldr r0, [sp, #0xf4]
	ldr r8, [sp, #0x70]
	orr sl, sl, fp, lsl #20
	adds r8, r8, sl
	str r8, [sp, #0xe8]
	str r0, [sp, #0x88]
	asr r0, r6, #0x1f
	str r0, [sp, #0x8c]
	ldr r0, [sp, #0xf8]
	ldr r8, [sp, #0x7c]
	umull fp, sl, r5, sb
	mla sl, r5, r8, sl
	mla sl, r4, sb, sl
	lsr sb, fp, #0xc
	str r0, [sp, #0x90]
	asr r0, r3, #0x1f
	str r0, [sp, #0x94]
	ldr r0, [sp, #0xfc]
	ldr r8, [sp, #0x78]
	orr sb, sb, sl, lsl #20
	adds r8, r8, sb
	str r8, [sp, #0xec]
	str r0, [sp, #0x98]
	asr r0, r2, #0x1f
	str r0, [sp, #0x9c]
	ldr r0, [sp, #0x100]
	ldr r8, [sp, #0x84]
	umull sl, sb, r5, r7
	mla sb, r5, r8, sb
	mla sb, r4, r7, sb
	lsr r8, sl, #0xc
	str r0, [sp, #0xa0]
	asr r0, r1, #0x1f
	str r0, [sp, #0xa4]
	ldr r7, [sp, #0x80]
	orr r8, r8, sb, lsl #20
	adds r7, r7, r8
	str r7, [sp, #0xf0]
	ldr r7, [sp, #0x8c]
	umull sb, r8, r5, r6
	mla r8, r5, r7, r8
	mla r8, r4, r6, r8
	lsr r7, sb, #0xc
	ldr r6, [sp, #0x88]
	orr r7, r7, r8, lsl #20
	adds r6, r6, r7
	str r6, [sp, #0xf4]
	ldr r6, [sp, #0x94]
	umull r8, r7, r5, r3
	mla r7, r5, r6, r7
	mla r7, r4, r3, r7
	lsr r6, r8, #0xc
	ldr r3, [sp, #0x90]
	orr r6, r6, r7, lsl #20
	adds r3, r3, r6
	str r3, [sp, #0xf8]
	ldr r3, [sp, #0x9c]
	umull r7, r6, r5, r2
	mla r6, r5, r3, r6
	mla r6, r4, r2, r6
	lsr r3, r7, #0xc
	ldr r2, [sp, #0x98]
	orr r3, r3, r6, lsl #20
	adds r2, r2, r3
	str r2, [sp, #0xfc]
	ldr r2, [sp, #0xa4]
	umull r6, r3, r5, r1
	mla r3, r5, r2, r3
	mla r3, r4, r1, r3
	lsr r2, r6, #0xc
	ldr r1, [sp, #0xa0]
	orr r2, r2, r3, lsl #20
	adds r1, r1, r2
	add r0, sp, #0xe0
	str r1, [sp, #0x100]
	bl FUN_02004694
	ldr r4, _02066918 ; =0x04000440
	mov r5, #1
	add r0, sp, #0xb0
	str r5, [r4]
	bl FUN_02004694
	mov r0, #0
	str r0, [r4]
	str r5, [r4, #0x10]
	mov r0, #2
	str r0, [r4]
	ldr r0, [sp]
	ldr r0, [r0]
	ldrb r0, [r0, #1]
	str r0, [r4, #0xc]
	ldr r0, [sp]
	ldr r1, [r0]
	ldrb r0, [r1, #2]
	add r0, r0, #1
	add r0, r0, r0, lsl #1
	add r1, r1, r0
	ldr r0, [sp]
	str r1, [r0]
	add sp, sp, #0x104
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02066918: .word 0x04000440
_0206691C: .word 0x020B8440
_02066920: .word 0x04000450
_02066924: .word 0x020B8480

	arm_func_start FUN_02066928
FUN_02066928: ; 0x02066928
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, [r5, #0x34]
	cmp r0, #0
	ldrbne r4, [r5, #0x96]
	moveq r4, #0
	cmp r4, #1
	bne _0206697C
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x34]
	bic r2, r0, #0x40
	mov r0, r5
	str r2, [r5, #8]
	blx r1
	ldr r0, [r5, #0x34]
	cmp r0, #0
	ldrbne r4, [r5, #0x96]
	ldr r0, [r5, #8]
	moveq r4, #0
	and r1, r0, #0x40
	b _02066980
	arm_func_end FUN_02066928
_0206697C:
	mov r1, #0
_02066980:
	ldr r0, [r5, #8]
	tst r0, #0x100
	cmpeq r1, #0
	bne _020669D4
	ldr r0, [r5]
	ldrb ip, [r0, #1]
	ldrb r3, [r0, #2]
	ldrb lr, [r0, #3]
	ldrb r2, [r0, #5]
	ldrb r1, [r0, #6]
	orr r3, ip, r3, lsl #8
	ldrb r6, [r0, #4]
	orr ip, r3, lr, lsl #16
	ldrb r3, [r0, #7]
	orr r1, r2, r1, lsl #8
	orr r6, ip, r6, lsl #24
	ldrb r2, [r0, #8]
	orr r1, r1, r3, lsl #16
	add r0, r0, r6
	orr r1, r1, r2, lsl #24
	bl FUN_020671fc
_020669D4:
	cmp r4, #3
	bne _020669F4
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x34]
	bic r2, r0, #0x40
	mov r0, r5
	str r2, [r5, #8]
	blx r1
_020669F4:
	ldr r0, [r5]
	add r0, r0, #9
	str r0, [r5]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02066a04
FUN_02066a04: ; 0x02066A04
	push {r3, r4, lr}
	sub sp, sp, #0xc
	mov r4, r0
	ldr r0, [r4, #8]
	tst r0, #0x100
	bne _02066A58
	tst r0, #0x200
	bne _02066A58
	cmp r1, #0
	ldreq r0, [r4, #0xe0]
	add r1, sp, #0
	streq r0, [sp, #8]
	streq r0, [sp, #4]
	streq r0, [sp]
	ldrne r0, [r4, #0xe4]
	mov r2, #3
	strne r0, [sp, #8]
	strne r0, [sp, #4]
	strne r0, [sp]
	mov r0, #0x1b
	bl FUN_020672b4
	arm_func_end FUN_02066a04
_02066A58:
	ldr r0, [r4]
	add r0, r0, #1
	str r0, [r4]
	add sp, sp, #0xc
	pop {r3, r4, pc}

	arm_func_start FUN_02066a6c
FUN_02066a6c: ; 0x02066A6C
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x44
	mov r8, r0
	ldr r0, [r8, #8]
	mov r5, #1
	tst r0, #0x200
	bne _02066D94
	tst r0, #1
	beq _02066D94
	ldr r2, [r8, #0xb0]
	ldr r0, [r2, #0x10]
	and r1, r0, #0xc0000000
	cmp r1, #0x80000000
	beq _02066ADC
	bic r0, r0, #0xc0000000
	str r0, [r2, #0x10]
	ldr r3, [r8, #0xb0]
	ldr r0, _02066DA8 ; =0x020910A8
	ldr r2, [r3, #0x10]
	ldr r1, _02066DAC ; =0x020910B4
	orr r2, r2, #0x80000000
	str r2, [r3, #0x10]
	ldr r3, [r8, #0xb0]
	mov r2, r5
	ldr r3, [r3, #0x10]
	str r3, [r0, #0xc]
	ldr r0, [r0, #8]
	bl FUN_020672b4
	arm_func_end FUN_02066a6c
_02066ADC:
	mov r0, #3
	str r0, [sp, #0x10]
	add r1, sp, #0x10
	mov r0, #0x10
	mov r2, #1
	bl FUN_020672b4
	ldr r0, [r8, #0x3c]
	cmp r0, #0
	ldrbne r7, [r8, #0x98]
	moveq r7, #0
	cmp r7, #1
	bne _02066B40
	ldr r0, [r8, #8]
	ldr r1, [r8, #0x3c]
	bic r2, r0, #0x40
	mov r0, r8
	str r2, [r8, #8]
	blx r1
	ldr r0, [r8, #0x3c]
	cmp r0, #0
	ldrbne r7, [r8, #0x98]
	ldr r0, [r8, #8]
	moveq r7, #0
	and r0, r0, #0x40
	b _02066B44
_02066B40:
	mov r0, #0
_02066B44:
	cmp r0, #0
	bne _02066BBC
	ldr r0, [r8, #0xb0]
	add r1, sp, #0x14
	ldrh r6, [r0, #0x2e]
	ldrh r4, [r0, #0x2c]
	mov r3, #0x10000
	rsb r0, r6, #0
	lsl ip, r0, #0xf
	lsl lr, r4, #0xf
	mov r0, #0x1b
	mov r2, #3
	str lr, [sp, #0x14]
	str ip, [sp, #0x18]
	str r3, [sp, #0x1c]
	bl FUN_020672b4
	lsl r0, r6, #0x13
	asr r1, r0, #0x10
	lsl r0, r4, #0x13
	lsl r1, r1, #0x10
	asr r0, r0, #0x10
	lsr r1, r1, #0x10
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	orr r3, r1, r0, lsr #16
	add r1, sp, #0xc
	mov r0, #0x22
	mov r2, #1
	str r3, [sp, #0xc]
	bl FUN_020672b4
_02066BBC:
	cmp r7, #2
	bne _02066BF8
	ldr r0, [r8, #8]
	ldr r1, [r8, #0x3c]
	bic r2, r0, #0x40
	mov r0, r8
	str r2, [r8, #8]
	blx r1
	ldr r0, [r8, #0x3c]
	cmp r0, #0
	ldrbne r7, [r8, #0x98]
	ldr r0, [r8, #8]
	moveq r7, #0
	and r0, r0, #0x40
	b _02066BFC
_02066BF8:
	mov r0, #0
_02066BFC:
	cmp r0, #0
	bne _02066C90
	ldr r0, [r8]
	ldr r4, [r8, #0xd8]
	ldrb r3, [r0, #1]
	cmp r4, #0
	beq _02066C58
	adds r2, r4, #4
	beq _02066C44
	ldrb r0, [r4, #5]
	cmp r3, r0
	bhs _02066C44
	ldrh r1, [r4, #0xa]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r3, r1
	b _02066C48
_02066C44:
	mov r1, #0
_02066C48:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, r4, r0
	bne _02066C5C
_02066C58:
	mov r0, #0
_02066C5C:
	ldrh r2, [r0, #0x1e]
	tst r2, #0x2000
	beq _02066C90
	add r1, r0, #0x2c
	tst r2, #2
	addeq r1, r1, #8
	tst r2, #4
	addeq r1, r1, #4
	tst r2, #8
	addeq r1, r1, #8
	mov r0, #0x18
	mov r2, #0x10
	bl FUN_020672b4
_02066C90:
	cmp r7, #3
	movne r0, #0
	bne _02066CBC
	ldr r0, [r8, #8]
	ldr r1, [r8, #0x3c]
	bic r2, r0, #0x40
	mov r0, r8
	str r2, [r8, #8]
	blx r1
	ldr r0, [r8, #8]
	and r0, r0, #0x40
_02066CBC:
	cmp r0, #0
	bne _02066D7C
	mov r6, #0x10
	mov r3, #2
	add r1, sp, #8
	mov r0, r6
	mov r2, r5
	str r3, [sp, #8]
	bl FUN_020672b4
	add r4, sp, #0x20
	mov r0, #0
	mov r1, r4
	bl FUN_02067390
	mov r3, #3
	add r1, sp, #4
	mov r0, r6
	mov r2, r5
	str r3, [sp, #4]
	bl FUN_020672b4
	ldr r0, _02066DB0 ; =0x020B6DD8
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _02066D54
	mov r6, #0x1a
	mov r5, #9
	ldr r1, _02066DB4 ; =0x020B6E24
	mov r0, r6
	mov r2, r5
	bl FUN_020672b4
	ldr r1, _02066DB8 ; =0x020B6E94
_02066D34:
	mov r0, r6
	mov r2, r5
	bl FUN_020672b4
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020672b4
	b _02066D7C
_02066D54:
	tst r0, #2
	beq _02066D6C
	mov r6, #0x1a
	mov r5, #9
	ldr r1, _02066DB4 ; =0x020B6E24
	b _02066D34
_02066D6C:
	mov r1, r4
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020672b4
_02066D7C:
	mov r3, #2
	add r1, sp, #0
	mov r0, #0x10
	mov r2, #1
	str r3, [sp]
	bl FUN_020672b4
_02066D94:
	ldr r0, [r8]
	add r0, r0, #3
	str r0, [r8]
	add sp, sp, #0x44
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_02066DA8: .word 0x020910A8
_02066DAC: .word 0x020910B4
_02066DB0: .word 0x020B6DD8
_02066DB4: .word 0x020B6E24
_02066DB8: .word 0x020B6E94

	arm_func_start FUN_02066dbc
FUN_02066dbc: ; 0x02066DBC
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x80
	mov r5, r0
	ldr r0, [r5, #8]
	mov r6, #0
	tst r0, #0x200
	bne _0206713C
	tst r0, #1
	beq _0206713C
	add r0, sp, #0x50
	mov r1, r6
	bl FUN_02067390
	mov r0, #0x1e
	mov r4, #1
	str r0, [sp, #0xc]
	add r1, sp, #0xc
	mov r2, r4
	mov r0, #0x13
	bl FUN_020672b4
	ldr r2, [r5, #0xb0]
	ldr r0, [r2, #0x10]
	and r1, r0, #0xc0000000
	cmp r1, #0xc0000000
	beq _02066E54
	bic r0, r0, #0xc0000000
	str r0, [r2, #0x10]
	ldr r3, [r5, #0xb0]
	ldr r0, _02067150 ; =0x020910A8
	ldr r2, [r3, #0x10]
	ldr r1, _02067154 ; =0x020910AC
	orr r2, r2, #0xc0000000
	str r2, [r3, #0x10]
	ldr r3, [r5, #0xb0]
	mov r2, r4
	ldr r3, [r3, #0x10]
	str r3, [r0, #4]
	ldr r0, [r0]
	bl FUN_020672b4
	arm_func_end FUN_02066dbc
_02066E54:
	ldr r0, [r5, #0x40]
	cmp r0, #0
	ldrbne r4, [r5, #0x99]
	moveq r4, #0
	cmp r4, #1
	bne _02066EA0
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x40]
	bic r2, r0, #0x40
	mov r0, r5
	str r2, [r5, #8]
	blx r1
	ldr r0, [r5, #0x40]
	cmp r0, #0
	ldrbne r4, [r5, #0x99]
	ldr r0, [r5, #8]
	moveq r4, #0
	and r0, r0, #0x40
	b _02066EA4
_02066EA0:
	mov r0, #0
_02066EA4:
	cmp r0, #0
	bne _02066EE8
	ldr r0, [r5, #0xb0]
	ldr r1, _02067158 ; =0x020910D8
	ldrh r7, [r0, #0x2e]
	ldrh r3, [r0, #0x2c]
	mov r0, #0x16
	rsb r2, r7, #0
	lsl r3, r3, #0xf
	str r3, [r1]
	lsl r2, r2, #0xf
	str r2, [r1, #0x14]
	str r3, [r1, #0x30]
	lsl r3, r7, #0xf
	mov r2, #0x10
	str r3, [r1, #0x34]
	bl FUN_020672b4
_02066EE8:
	cmp r4, #2
	bne _02066F24
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x40]
	bic r2, r0, #0x40
	mov r0, r5
	str r2, [r5, #8]
	blx r1
	ldr r0, [r5, #0x40]
	cmp r0, #0
	ldrbne r4, [r5, #0x99]
	ldr r0, [r5, #8]
	moveq r4, #0
	and r0, r0, #0x40
	b _02066F28
_02066F24:
	mov r0, #0
_02066F28:
	cmp r0, #0
	bne _02066FBC
	ldr r0, [r5]
	ldr r7, [r5, #0xd8]
	ldrb r3, [r0, #1]
	cmp r7, #0
	beq _02066F84
	adds r2, r7, #4
	beq _02066F70
	ldrb r0, [r7, #5]
	cmp r3, r0
	bhs _02066F70
	ldrh r1, [r7, #0xa]
	ldrh r0, [r2, r1]
	add r1, r2, r1
	add r1, r1, #4
	mla r1, r0, r3, r1
	b _02066F74
_02066F70:
	mov r1, #0
_02066F74:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, r7, r0
	bne _02066F88
_02066F84:
	mov r0, #0
_02066F88:
	ldrh r2, [r0, #0x1e]
	tst r2, #0x2000
	beq _02066FBC
	add r1, r0, #0x2c
	tst r2, #2
	addeq r1, r1, #8
	tst r2, #4
	addeq r1, r1, #4
	tst r2, #8
	addeq r1, r1, #8
	mov r0, #0x18
	mov r2, #0x10
	bl FUN_020672b4
_02066FBC:
	cmp r4, #3
	movne r0, #0
	bne _02066FE8
	ldr r0, [r5, #8]
	ldr r1, [r5, #0x40]
	bic r2, r0, #0x40
	mov r0, r5
	str r2, [r5, #8]
	blx r1
	ldr r0, [r5, #8]
	and r0, r0, #0x40
_02066FE8:
	cmp r0, #0
	bne _02067108
	ldr r0, _0206715C ; =0x020B6DD8
	ldr r0, [r0, #0xfc]
	tst r0, #1
	beq _02067030
	ldr r1, _02067160 ; =0x020B6EB8
	mov r0, #0x1c
	mov r2, #3
	bl FUN_020672b4
	ldr r1, _02067164 ; =0x020B6E94
	mov r0, #0x1a
	mov r2, #9
	bl FUN_020672b4
	add r1, sp, #0x50
	mov r0, #0x19
	mov r2, #0xc
	b _02067070
_02067030:
	tst r0, #2
	beq _02067048
	add r1, sp, #0x50
	mov r0, #0x19
	mov r2, #0xc
	b _02067070
_02067048:
	bl FUN_02064438
	mov r4, #0xc
	mov r7, #0x19
	mov r1, r0
	mov r0, r7
	mov r2, r4
	bl FUN_020672b4
	add r1, sp, #0x50
	mov r0, r7
	mov r2, r4
_02067070:
	bl FUN_020672b4
	bl FUN_02067170
	ldr r0, _02067168 ; =0x04000440
	str r6, [r0]
	str r6, [r0, #4]
	str r6, [r0, #0x14]
	add r6, sp, #0x10
_0206708C:
	mov r0, r6
	bl FUN_020049f8
	cmp r0, #0
	bne _0206708C
	ldr r2, _0206716C ; =0x04000448
	mov r4, #1
	str r4, [r2]
	mov r0, #3
	str r0, [r2, #-8]
	mov r1, r6
	mov r0, #0x16
	mov r2, #0x10
	bl FUN_020672b4
	ldr r0, [sp, #0x44]
	ldr r1, [sp, #0x40]
	asr r0, r0, #4
	lsl r0, r0, #8
	asr r2, r1, #4
	asr r1, r0, #0x10
	lsl r0, r2, #8
	lsl r1, r1, #0x10
	asr r0, r0, #0x10
	lsr r1, r1, #0x10
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	orr r3, r1, r0, lsr #16
	add r1, sp, #8
	mov r2, r4
	mov r0, #0x22
	str r3, [sp, #8]
	bl FUN_020672b4
_02067108:
	mov r4, #1
	mov r3, #2
	add r1, sp, #4
	mov r2, r4
	mov r0, #0x10
	str r3, [sp, #4]
	bl FUN_020672b4
	mov r3, #0x1e
	add r1, sp, #0
	mov r2, r4
	mov r0, #0x14
	str r3, [sp]
	bl FUN_020672b4
_0206713C:
	ldr r0, [r5]
	add r0, r0, #3
	str r0, [r5]
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02067150: .word 0x020910A8
_02067154: .word 0x020910AC
_02067158: .word 0x020910D8
_0206715C: .word 0x020B6DD8
_02067160: .word 0x020B6EB8
_02067164: .word 0x020B6E94
_02067168: .word 0x04000440
_0206716C: .word 0x04000448

	arm_func_start FUN_02067170
FUN_02067170: ; 0x02067170
	push {r4, lr}
	ldr r0, _020671C0 ; =0x020B9D40
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _02067188
	bl FUN_020671c8
	arm_func_end FUN_02067170
_02067188:
	ldr r4, _020671C0 ; =0x020B9D40
	ldr r0, [r4]
	cmp r0, #0
	ldrne r2, [r0]
	cmpne r2, #0
	popeq {r4, pc}
	ldr r1, _020671C4 ; =0x04000400
	add r0, r0, #4
	lsl r2, r2, #2
	bl FUN_02007864
	ldr r0, [r4]
	mov r1, #0
	str r1, [r0]
	pop {r4, pc}
	.align 2, 0_020671C0: .word 0x020B9D40
_020671C4: .word 0x04000400

	arm_func_start FUN_020671c8
FUN_020671c8: ; 0x020671C8
	ldr r0, _020671DC ; =0x020B9D40
	arm_func_end FUN_020671c8
_020671CC:
	ldr r1, [r0, #4]
	cmp r1, #0
	bne _020671CC
	bx lr
	.align 2, 0_020671DC: .word 0x020B9D40

	arm_func_start FUN_020671e0
FUN_020671e0: ; 0x020671E0
	mov r1, #0
	str r1, [r0]
	bx lr
	arm_func_end FUN_020671e0

	arm_func_start FUN_020671ec
FUN_020671ec: ; 0x020671EC
	ldr r1, _020671F8 ; =0x020B9D40
	str r0, [r1, #8]
	bx lr
	.align 2, 0_020671F8: .word 0x020B9D40
	arm_func_end FUN_020671ec

	arm_func_start FUN_020671fc
FUN_020671fc: ; 0x020671FC
	push {r3, r4, r5, r6, r7, lr}
	mov r4, r1
	mov r5, r0
	cmp r4, #0x100
	blo _02067224
	ldr r7, _020672A4 ; =0x0208EC7C
	mvn r6, #0
	ldr r0, [r7]
	cmp r0, r6
	bne _0206723C
	arm_func_end FUN_020671fc
_02067224:
	lsr r2, r4, #2
	ldr r0, [r5]
	add r1, r5, #4
	sub r2, r2, #1
	bl FUN_020672b4
	pop {r3, r4, r5, r6, r7, pc}
_0206723C:
	bl FUN_02067170
	ldr r0, _020672A8 ; =0x020B9D40
	mov r1, #1
	str r1, [r0, #4]
	ldr r0, [r0, #8]
	cmp r0, #0
	ldr r0, [r7]
	beq _02067280
	cmp r0, #3
	movhi r0, r6
	ldr r6, _020672AC ; =0x020B9D44
	ldr r3, _020672B0 ; =FUN_020671e0
	mov r1, r5
	mov r2, r4
	str r6, [sp]
	bl FUN_0200771c
	pop {r3, r4, r5, r6, r7, pc}
_02067280:
	cmp r0, #3
	movhi r0, r6
	ldr r6, _020672AC ; =0x020B9D44
	ldr r3, _020672B0 ; =FUN_020671e0
	mov r1, r5
	mov r2, r4
	str r6, [sp]
	bl FUN_0200751c
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020672A4: .word 0x0208EC7C
_020672A8: .word 0x020B9D40
_020672AC: .word 0x020B9D44
_020672B0: .word FUN_020671e0

	arm_func_start FUN_020672b4
FUN_020672b4: ; 0x020672B4
	push {r3, r4, r5, r6, r7, lr}
	ldr r7, _02067388 ; =0x020B9D40
	mov r6, r0
	ldr r3, [r7]
	mov r5, r1
	mov r4, r2
	cmp r3, #0
	beq _02067360
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _02067338
	ldr r2, [r3]
	add r0, r2, #1
	add r1, r0, r4
	cmp r1, #0xc0
	bhi _02067338
	str r0, [r3]
	ldr r0, [r7]
	cmp r4, #0
	add r0, r0, r2, lsl #2
	str r6, [r0, #4]
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r2, [r7]
	mov r0, r5
	ldr r1, [r2], #4
	add r1, r2, r1, lsl #2
	lsl r2, r4, #2
	bl FUN_020078c8
	ldr r1, [r7]
	ldr r0, [r1]
	add r0, r0, r4
	str r0, [r1]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020672b4
_02067338:
	ldr r0, [r3]
	cmp r0, #0
	beq _0206734C
	bl FUN_02067170
	b _02067370
_0206734C:
	ldr r0, _02067388 ; =0x020B9D40
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _02067370
	b _0206736C
_02067360:
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _02067370
_0206736C:
	bl FUN_020671c8
_02067370:
	ldr r1, _0206738C ; =0x04000400
	mov r0, r5
	lsl r2, r4, #2
	str r6, [r1]
	bl FUN_02007864
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02067388: .word 0x020B9D40
_0206738C: .word 0x04000400

	arm_func_start FUN_02067390
FUN_02067390: ; 0x02067390
	push {r4, r5, r6, lr}
	sub sp, sp, #0x40
	mov r6, r0
	mov r5, r1
	bl FUN_02067170
	ldr r0, _02067414 ; =0x04000440
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #4]
	str r1, [r0, #0x14]
	cmp r6, #0
	beq _020673E0
	add r4, sp, #0
	arm_func_end FUN_02067390
_020673C4:
	mov r0, r4
	bl FUN_020049f8
	cmp r0, #0
	bne _020673C4
	mov r0, r4
	mov r1, r6
	bl FUN_02008e18
_020673E0:
	cmp r5, #0
	beq _020673F8
_020673E8:
	mov r0, r5
	bl FUN_02004a28
	cmp r0, #0
	bne _020673E8
_020673F8:
	ldr r1, _02067418 ; =0x04000448
	mov r0, #1
	str r0, [r1]
	mov r0, #2
	str r0, [r1, #-8]
	add sp, sp, #0x40
	pop {r4, r5, r6, pc}
	.align 2, 0_02067414: .word 0x04000440
_02067418: .word 0x04000448

	arm_func_start FUN_0206741c
FUN_0206741c: ; 0x0206741C
	push {r3, lr}
	bl FUN_020046e8
	bl FUN_02064250
	ldr r1, _02067440 ; =0x04000600
	ldr r0, [r1]
	bic r0, r0, #0xc0000000
	orr r0, r0, #0x80000000
	str r0, [r1]
	pop {r3, pc}
	.align 2, 0_02067440: .word 0x04000600
	arm_func_end FUN_0206741c

	arm_func_start FUN_02067444
FUN_02067444: ; 0x02067444
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r2, [sl]
	ldr r1, _02067668 ; =0x30415642
	cmp r2, r1
	bhi _02067490
	bhs _02067658
	sub r0, r1, #0x900
	cmp r2, r0
	bhi _02067480
	bhs _02067658
	sub r0, r1, #0x1300
	cmp r2, r0
	beq _02067658
	b _02067660
	arm_func_end FUN_02067444
_02067480:
	sub r0, r1, #0x200
	cmp r2, r0
	beq _02067658
	b _02067660
_02067490:
	ldr r0, _0206766C ; =0x30505442
	cmp r2, r0
	bhi _020674B0
	bhs _02067658
	ldr r0, _02067670 ; =0x30444D42
	cmp r2, r0
	beq _020674BC
	b _02067660
_020674B0:
	add r0, r0, #0x80000
	cmp r2, r0
	bne _02067660
_020674BC:
	mov r5, #1
	mov r0, sl
	mov r6, r5
	mov r7, r5
	bl FUN_02067dd8
	movs r4, r0
	beq _02067628
	bl FUN_02063978
	mov sb, r0
	mov r0, r4
	bl FUN_0206398c
	mov r8, r0
	mov r0, r4
	bl FUN_02063abc
	str r0, [sp]
	cmp sb, #0
	beq _02067524
	ldr r0, _02067674 ; =0x0208EEA0
	mov r1, #0
	ldr r3, [r0]
	mov r0, sb
	mov r2, r1
	blx r3
	movs fp, r0
	moveq r5, #0
	b _02067528
_02067524:
	mov fp, #0
_02067528:
	cmp r8, #0
	beq _02067554
	ldr r0, _02067674 ; =0x0208EEA0
	mov r2, #0
	ldr r3, [r0]
	mov r0, r8
	mov r1, #1
	blx r3
	movs r8, r0
	moveq r6, #0
	b _02067558
_02067554:
	mov r8, #0
_02067558:
	ldr r0, [sp]
	cmp r0, #0
	beq _0206758C
	ldrh r1, [r4, #0x20]
	ldr r0, _02067678 ; =0x0208EEA8
	mov r2, #0
	ldr r3, [r0]
	ldr r0, [sp]
	and r1, r1, #0x8000
	blx r3
	movs sb, r0
	moveq r7, #0
	b _02067590
_0206758C:
	mov sb, #0
_02067590:
	cmp r5, #0
	cmpne r6, #0
	beq _020675A4
	cmp r7, #0
	bne _020675F4
_020675A4:
	cmp r7, #0
	beq _020675BC
	ldr r1, _0206767C ; =0x0208EEAC
	mov r0, sb
	ldr r1, [r1]
	blx r1
_020675BC:
	cmp r6, #0
	beq _020675D4
	ldr r1, _02067680 ; =0x0208EEA4
	mov r0, r8
	ldr r1, [r1]
	blx r1
_020675D4:
	cmp r5, #0
	beq _020675EC
	ldr r1, _02067680 ; =0x0208EEA4
	mov r0, fp
	ldr r1, [r1]
	blx r1
_020675EC:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020675F4:
	mov r0, r4
	mov r1, fp
	mov r2, r8
	bl FUN_020639a0
	mov r0, r4
	mov r1, sb
	bl FUN_02063ad0
	mov r0, r4
	mov r1, #1
	bl FUN_020639b4
	mov r0, r4
	mov r1, #1
	bl FUN_02063ad8
_02067628:
	ldr r1, [sl]
	ldr r0, _02067670 ; =0x30444D42
	cmp r1, r0
	bne _02067650
	mov r0, sl
	bl FUN_02067dc8
	cmp r4, #0
	beq _02067650
	mov r1, r4
	bl FUN_0206410c
_02067650:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02067658:
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02067660:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02067668: .word 0x30415642
_0206766C: .word 0x30505442
_02067670: .word 0x30444D42
_02067674: .word 0x0208EEA0
_02067678: .word 0x0208EEA8
_0206767C: .word 0x0208EEAC
_02067680: .word 0x0208EEA4

	arm_func_start FUN_02067684
FUN_02067684: ; 0x02067684
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	ldr r2, [r5]
	ldr r1, _02067794 ; =0x30415642
	cmp r2, r1
	bhi _020676B8
	addhs sp, sp, #8
	pophs {r3, r4, r5, pc}
	sub r0, r1, #0x900
	add sp, sp, #8
	cmp r2, r0
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02067684
_020676B8:
	ldr r1, _02067798 ; =0x30505442
	cmp r2, r1
	bhi _020676E0
	addhs sp, sp, #8
	pophs {r3, r4, r5, pc}
	ldr r1, _0206779C ; =0x30444D42
	cmp r2, r1
	beq _020676F4
	add sp, sp, #8
	pop {r3, r4, r5, pc}
_020676E0:
	add r0, r1, #0x80000
	cmp r2, r0
	beq _02067714
	add sp, sp, #8
	pop {r3, r4, r5, pc}
_020676F4:
	bl FUN_02067dc8
	mov r4, r0
	mov r0, r5
	bl FUN_02067dd8
	cmp r0, #0
	beq _02067714
	mov r0, r4
	bl FUN_020641bc
_02067714:
	mov r0, r5
	bl FUN_02067dd8
	movs r5, r0
	addeq sp, sp, #8
	popeq {r3, r4, r5, pc}
	bl FUN_02063b28
	mov r4, r0
	add r1, sp, #4
	add r2, sp, #0
	mov r0, r5
	bl FUN_02063a6c
	cmp r4, #0
	beq _02067758
	ldr r1, _020677A0 ; =0x0208EEAC
	mov r0, r4
	ldr r1, [r1]
	blx r1
_02067758:
	ldr r0, [sp]
	cmp r0, #0
	beq _02067770
	ldr r1, _020677A4 ; =0x0208EEA4
	ldr r1, [r1]
	blx r1
_02067770:
	ldr r0, [sp, #4]
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, pc}
	ldr r1, _020677A4 ; =0x0208EEA4
	ldr r1, [r1]
	blx r1
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	.align 2, 0_02067794: .word 0x30415642
_02067798: .word 0x30505442
_0206779C: .word 0x30444D42
_020677A0: .word 0x0208EEAC
_020677A4: .word 0x0208EEA4

	arm_func_start FUN_020677a8
FUN_020677a8: ; 0x020677A8
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x1c
	mov r5, r1
	mov r4, r2
	ldr r6, _02067928 ; =0x020B6DE0
	ldr r1, _0206792C ; =0x020B6E24
	add r2, sp, #0x10
	bl FUN_02008c40
	ldr r1, [sp, #0x14]
	ldr r0, [r6, #0x1c]
	ldr r2, [sp, #0x10]
	smull r8, r7, r1, r0
	ldr r0, [r6, #0xc]
	ldr r3, [sp, #0x18]
	smlal r8, r7, r2, r0
	ldr r1, [r6, #0x2c]
	ldr r0, [r6, #0x3c]
	smlal r8, r7, r3, r1
	lsr r1, r8, #0xc
	orr r1, r1, r7, lsl #20
	add r0, r1, r0
	bl FUN_02009638
	ldr r2, [sp, #0x14]
	ldr r1, [r6, #0x10]
	ldr r0, [r6, #0x14]
	smull sb, r8, r2, r1
	smull lr, ip, r2, r0
	ldr r1, [sp, #0x10]
	ldr r3, [r6]
	ldr r0, [sp, #0x18]
	smlal sb, r8, r1, r3
	ldr r7, [r6, #0x20]
	ldr r2, [r6, #0x30]
	smlal sb, r8, r0, r7
	lsr r3, sb, #0xc
	orr r3, r3, r8, lsl #20
	add r7, r3, r2
	ldr r3, [r6, #4]
	ldr r8, [r6, #0x24]
	smlal lr, ip, r1, r3
	smlal lr, ip, r0, r8
	lsr r0, lr, #0xc
	ldr r2, [r6, #0x34]
	orr r0, r0, ip, lsl #20
	add r8, r0, r2
	bl FUN_020095e0
	umull lr, ip, r0, r7
	asr r2, r7, #0x1f
	mla ip, r0, r2, ip
	mla ip, r1, r7, ip
	adds lr, lr, #0x80000000
	adc r2, ip, #0
	add r2, r2, #0x1000
	add r2, r2, r2, lsr #31
	asr r7, r2, #1
	asr r3, r8, #0x1f
	umull ip, r2, r0, r8
	mla r2, r0, r3, r2
	mla r2, r1, r8, r2
	adds r0, ip, #0x80000000
	adc r0, r2, #0
	add r0, r0, #0x1000
	add r0, r0, r0, lsr #31
	asr r8, r0, #1
	cmp r7, #0
	mov r6, #0
	cmpge r8, #0
	blt _020678C4
	cmp r7, #0x1000
	cmple r8, #0x1000
	ble _020678C8
	arm_func_end FUN_020677a8
_020678C4:
	mvn r6, #0
_020678C8:
	add r0, sp, #0xc
	add r1, sp, #8
	add r2, sp, #4
	add r3, sp, #0
	bl FUN_02064544
	ldr r2, [sp, #0xc]
	ldr r0, [sp, #4]
	ldr ip, [sp]
	sub r0, r0, r2
	mul r0, r7, r0
	add r1, r0, #0x800
	ldr r3, [sp, #8]
	add r1, r2, r1, asr #12
	sub r0, ip, r3
	mul r0, r8, r0
	str r1, [r5]
	ldr r1, [sp, #8]
	add r0, r0, #0x800
	rsb r1, r1, #0xbf
	sub r1, r1, r0, asr #12
	mov r0, r6
	str r1, [r4]
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02067928: .word 0x020B6DE0
_0206792C: .word 0x020B6E24

	arm_func_start FUN_02067930
FUN_02067930: ; 0x02067930
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _02067990
	adds ip, lr, #4
	beq _0206797C
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _0206797C
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _02067980
	arm_func_end FUN_02067930
_0206797C:
	mov r1, #0
_02067980:
	cmp r1, #0
	ldrne r0, [r1]
	addne r3, lr, r0
	bne _02067994
_02067990:
	mov r3, #0
_02067994:
	mov r0, #0x8000
	ldr r1, [r3, #4]
	rsb r0, r0, #0
	and r0, r1, r0
	orr r0, r0, r2
	str r0, [r3, #4]
	pop {r3, pc}

	arm_func_start FUN_020679b0
FUN_020679b0: ; 0x020679B0
	push {r3, lr}
	cmp r0, #0
	ldrne r3, [r0, #8]
	cmpne r3, #0
	addne lr, r0, r3
	moveq lr, #0
	cmp lr, #0
	beq _02067A10
	adds ip, lr, #4
	beq _020679FC
	ldrb r0, [lr, #5]
	cmp r1, r0
	bhs _020679FC
	ldrh r3, [lr, #0xa]
	ldrh r0, [ip, r3]
	add r3, ip, r3
	add r3, r3, #4
	mla r1, r0, r1, r3
	b _02067A00
	arm_func_end FUN_020679b0
_020679FC:
	mov r1, #0
_02067A00:
	cmp r1, #0
	ldrne r0, [r1]
	addne r1, lr, r0
	bne _02067A14
_02067A10:
	mov r1, #0
_02067A14:
	ldr r0, [r1, #0xc]
	bic r0, r0, #0x1f0000
	orr r0, r0, r2, lsl #16
	str r0, [r1, #0xc]
	pop {r3, pc}

	arm_func_start FUN_02067a28
FUN_02067a28: ; 0x02067A28
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
	arm_func_end FUN_02067a28
_02067A44:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_02067930
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _02067A44
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02067a68
FUN_02067a68: ; 0x02067A68
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #0x18]
	mov r5, r1
	mov r4, #0
	cmp r0, #0
	popls {r4, r5, r6, pc}
	arm_func_end FUN_02067a68
_02067A84:
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020679b0
	ldrb r0, [r6, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blo _02067A84
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02067aa8
FUN_02067aa8: ; 0x02067AA8
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #0
	cmp r1, #0
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r4, [r0, #1]
	cmp r4, #0x10
	bhs _02067B74
	cmp r4, #0
	ldm r1, {r2, r3, ip}
	ldr lr, [r1, #0xc]
	mov r1, r6
	bls _02067C5C
	arm_func_end FUN_02067aa8
_02067ADC:
	cmp r0, #0
	beq _02067B08
	ldrb r5, [r0, #1]
	cmp r1, r5
	bhs _02067B08
	ldrh r5, [r0, #6]
	add r7, r0, r5
	ldrh r5, [r7, #2]
	add r5, r7, r5
	add r7, r5, r1, lsl #4
	b _02067B0C
_02067B08:
	mov r7, r6
_02067B0C:
	ldr r5, [r7]
	cmp r5, r2
	ldreq r5, [r7, #4]
	cmpeq r5, r3
	ldreq r5, [r7, #8]
	cmpeq r5, ip
	ldreq r5, [r7, #0xc]
	cmpeq r5, lr
	bne _02067B60
	cmp r0, #0
	beq _02067B58
	cmp r1, r4
	bhs _02067B58
	ldrh r3, [r0, #6]
	ldrh r2, [r0, r3]
	add r0, r0, r3
	add r0, r0, #4
	mla r0, r2, r1, r0
	pop {r3, r4, r5, r6, r7, pc}
_02067B58:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02067B60:
	ldrb r5, [r0, #1]
	add r1, r1, #1
	cmp r1, r5
	blo _02067ADC
	b _02067C5C
_02067B74:
	add r5, r0, #8
	ldrb r3, [r5, #1]
	cmp r3, #0
	beq _02067C5C
	ldrb r7, [r5, r3, lsl #2]
	ldrb r2, [r5]
	add r6, r5, r3, lsl #2
	cmp r2, r7
	bls _02067BC8
_02067B98:
	asr r2, r7, #5
	ldr r3, [r1, r2, lsl #2]
	and r2, r7, #0x1f
	lsr r2, r3, r2
	and r2, r2, #1
	add r2, r6, r2
	ldrb r3, [r2, #1]
	ldrb r2, [r6]
	ldrb r7, [r5, r3, lsl #2]
	add r6, r5, r3, lsl #2
	cmp r2, r7
	bhi _02067B98
_02067BC8:
	cmp r0, #0
	ldrb r2, [r6, #3]
	beq _02067BF4
	cmp r2, r4
	bhs _02067BF4
	ldrh r3, [r0, #6]
	add ip, r0, r3
	ldrh r3, [ip, #2]
	add r3, ip, r3
	add r5, r3, r2, lsl #4
	b _02067BF8
_02067BF4:
	mov r5, #0
_02067BF8:
	ldr ip, [r5]
	ldr r3, [r1]
	cmp ip, r3
	ldreq ip, [r5, #4]
	ldreq r3, [r1, #4]
	cmpeq ip, r3
	ldreq ip, [r5, #8]
	ldreq r3, [r1, #8]
	cmpeq ip, r3
	ldreq r3, [r5, #0xc]
	ldreq r1, [r1, #0xc]
	cmpeq r3, r1
	bne _02067C5C
	cmp r0, #0
	beq _02067C54
	cmp r2, r4
	bhs _02067C54
	ldrh r3, [r0, #6]
	ldrh r1, [r0, r3]
	add r0, r0, r3
	add r0, r0, #4
	mla r0, r1, r2, r0
	pop {r3, r4, r5, r6, r7, pc}
_02067C54:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02067C5C:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_02067c64
FUN_02067c64: ; 0x02067C64
	push {r4, r5, r6, lr}
	cmp r1, #0
	mvneq r0, #0
	popeq {r4, r5, r6, pc}
	ldrb r2, [r0, #1]
	cmp r2, #0x10
	bhs _02067D04
	cmp r2, #0
	ldm r1, {r2, r3, ip}
	ldr lr, [r1, #0xc]
	mov r1, #0
	bls _02067DC0
	mov r5, r1
	arm_func_end FUN_02067c64
_02067C98:
	cmp r0, #0
	beq _02067CC4
	ldrb r4, [r0, #1]
	cmp r1, r4
	bhs _02067CC4
	ldrh r4, [r0, #6]
	add r6, r0, r4
	ldrh r4, [r6, #2]
	add r4, r6, r4
	add r6, r4, r1, lsl #4
	b _02067CC8
_02067CC4:
	mov r6, r5
_02067CC8:
	ldr r4, [r6]
	cmp r4, r2
	ldreq r4, [r6, #4]
	cmpeq r4, r3
	ldreq r4, [r6, #8]
	cmpeq r4, ip
	ldreq r4, [r6, #0xc]
	cmpeq r4, lr
	moveq r0, r1
	popeq {r4, r5, r6, pc}
	ldrb r4, [r0, #1]
	add r1, r1, #1
	cmp r1, r4
	blo _02067C98
	b _02067DC0
_02067D04:
	add r4, r0, #8
	ldrb ip, [r4, #1]
	cmp ip, #0
	beq _02067DC0
	ldrb r6, [r4, ip, lsl #2]
	ldrb r3, [r4]
	add r5, r4, ip, lsl #2
	cmp r3, r6
	bls _02067D58
_02067D28:
	asr r3, r6, #5
	ldr ip, [r1, r3, lsl #2]
	and r3, r6, #0x1f
	lsr r3, ip, r3
	and r3, r3, #1
	add r3, r5, r3
	ldrb ip, [r3, #1]
	ldrb r3, [r5]
	ldrb r6, [r4, ip, lsl #2]
	add r5, r4, ip, lsl #2
	cmp r3, r6
	bhi _02067D28
_02067D58:
	cmp r0, #0
	ldrb r3, [r5, #3]
	beq _02067D84
	cmp r3, r2
	bhs _02067D84
	ldrh r2, [r0, #6]
	add r2, r0, r2
	ldrh r0, [r2, #2]
	add r0, r2, r0
	add r4, r0, r3, lsl #4
	b _02067D88
_02067D84:
	mov r4, #0
_02067D88:
	ldr r2, [r4]
	ldr r0, [r1]
	cmp r2, r0
	ldreq r2, [r4, #4]
	ldreq r0, [r1, #4]
	cmpeq r2, r0
	ldreq r2, [r4, #8]
	ldreq r0, [r1, #8]
	cmpeq r2, r0
	ldreq r2, [r4, #0xc]
	ldreq r0, [r1, #0xc]
	cmpeq r2, r0
	moveq r0, r3
	popeq {r4, r5, r6, pc}
_02067DC0:
	mvn r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02067dc8
FUN_02067dc8: ; 0x02067DC8
	ldrh r1, [r0, #0xc]
	ldr r1, [r0, r1]
	add r0, r0, r1
	bx lr
	arm_func_end FUN_02067dc8

	arm_func_start FUN_02067dd8
FUN_02067dd8: ; 0x02067DD8
	ldrh r2, [r0, #0xc]
	ldrh r1, [r0, #0xe]
	add r3, r0, r2
	cmp r1, #1
	bne _02067E08
	ldr r2, [r0]
	ldr r1, _02067E14 ; =0x30585442
	cmp r2, r1
	ldreq r1, [r3]
	addeq r0, r0, r1
	movne r0, #0
	bx lr
	arm_func_end FUN_02067dd8
_02067E08:
	ldr r1, [r3, #4]
	add r0, r0, r1
	bx lr
	.align 2, 0_02067E14: .word 0x30585442

	arm_func_start FUN_02067e18
FUN_02067e18: ; 0x02067E18
	cmp r0, #0
	beq _02067E6C
	ldrh r2, [r0, #0xc]
	ldr r2, [r0, r2]
	add ip, r0, r2
	adds r3, ip, #8
	beq _02067E58
	ldrb r0, [ip, #9]
	cmp r1, r0
	bhs _02067E58
	ldrh r2, [ip, #0xe]
	ldrh r0, [r3, r2]
	add r2, r3, r2
	add r2, r2, #4
	mla r1, r0, r1, r2
	b _02067E5C
	arm_func_end FUN_02067e18
_02067E58:
	mov r1, #0
_02067E5C:
	cmp r1, #0
	ldrne r0, [r1]
	addne r0, ip, r0
	bxne lr
_02067E6C:
	mov r0, #0
	bx lr

	arm_func_start FUN_02067e74
FUN_02067e74: ; 0x02067E74
	cmp r0, #0
	beq _02067E94
	ldrb r2, [r0, #6]
	cmp r1, r2
	ldrhlo r2, [r0, #8]
	addlo r0, r0, r2
	addlo r0, r0, r1, lsl #4
	bxlo lr
	arm_func_end FUN_02067e74
_02067E94:
	mov r0, #0
	bx lr

	arm_func_start FUN_02067e9c
FUN_02067e9c: ; 0x02067E9C
	cmp r0, #0
	beq _02067EBC
	ldrb r2, [r0, #7]
	cmp r1, r2
	ldrhlo r2, [r0, #0xa]
	addlo r0, r0, r2
	addlo r0, r0, r1, lsl #4
	bxlo lr
	arm_func_end FUN_02067e9c
_02067EBC:
	mov r0, #0
	bx lr

	arm_func_start FUN_02067ec4
FUN_02067ec4: ; 0x02067EC4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r2
	bl FUN_02067f38
	ldrsh r1, [r0, #4]
	ldrh r3, [r0, #6]
	mul r2, r1, r4
	add r3, r5, r3
	lsr r2, r2, #0xc
	b _02067EF0
	arm_func_end FUN_02067ec4
_02067EEC:
	sub r2, r2, #1
_02067EF0:
	cmp r2, #0
	beq _02067F08
	lsl r1, r2, #2
	ldrh r1, [r3, r1]
	cmp r1, r4
	bhs _02067EEC
_02067F08:
	ldrh r1, [r0]
	b _02067F14
_02067F10:
	add r2, r2, #1
_02067F14:
	add r0, r2, #1
	cmp r0, r1
	bhs _02067F30
	add r0, r3, r2, lsl #2
	ldrh r0, [r0, #4]
	cmp r0, r4
	bls _02067F10
_02067F30:
	add r0, r3, r2, lsl #2
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02067f38
FUN_02067f38: ; 0x02067F38
	adds r3, r0, #0xc
	beq _02067F64
	ldrb r2, [r0, #0xd]
	cmp r1, r2
	bhs _02067F64
	ldrh r0, [r0, #0x12]
	ldrh r2, [r3, r0]
	add r0, r3, r0
	add r0, r0, #4
	mla r0, r2, r1, r0
	bx lr
	arm_func_end FUN_02067f38
_02067F64:
	mov r0, #0
	bx lr

	arm_func_start FUN_02067f6c
FUN_02067f6c: ; 0x02067F6C
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	ldr r0, _02067FE4 ; =0x02091014
	str r5, [r6, #8]
	ldr r1, [r0]
	ldrb r2, [r2, #0x17]
	mov r4, #0
	str r1, [r6, #0xc]
	strb r2, [r6, #0x19]
	mov r0, r4
	add r1, r6, #0x1a
	lsl r2, r2, #1
	bl FUN_02007804
	ldrh r0, [r5, #6]
	add r2, r5, #0x14
	cmp r0, #0
	popls {r4, r5, r6, pc}
	arm_func_end FUN_02067f6c
_02067FB4:
	lsl r0, r4, #1
	ldrh r1, [r2, r0]
	add r0, r6, r4, lsl #1
	add r4, r4, #1
	ldr r1, [r5, r1]
	lsr r1, r1, #0x18
	orr r1, r1, #0x100
	strh r1, [r0, #0x1a]
	ldrh r0, [r5, #6]
	cmp r4, r0
	blo _02067FB4
	pop {r4, r5, r6, pc}
	.align 2, 0_02067FE4: .word 0x02091014

	arm_func_start FUN_02067fe8
FUN_02067fe8: ; 0x02067FE8
	push {r3, lr}
	mov r3, r0
	ldr r0, [r1, #8]
	ldr ip, [r1]
	ldrh r1, [r0, #4]
	cmp ip, r1, lsl #12
	lsl r1, r1, #0xc
	subge ip, r1, #1
	bge _02068014
	cmp ip, #0
	movlt ip, #0
	arm_func_end FUN_02067fe8
_02068014:
	mov r1, r2
	mov r2, ip
	bl FUN_020682c8
	pop {r3, pc}

	arm_func_start FUN_02068024
FUN_02068024: ; 0x02068024
	ldr r1, _020680B4 ; =0x020B703C
	ldr r2, [r1]
	ldr r1, [r2]
	ldr ip, [r2, #0xd4]
	ldrb r3, [r1, #1]
	cmp ip, #0
	beq _0206807C
	beq _02068068
	ldrb r1, [ip, #1]
	cmp r3, r1
	bhs _02068068
	ldrh r2, [ip, #6]
	ldrh r1, [ip, r2]
	add r2, ip, r2
	add r2, r2, #4
	mla r2, r1, r3, r2
	b _0206806C
	arm_func_end FUN_02068024
_02068068:
	mov r2, #0
_0206806C:
	cmp r2, #0
	ldrne r1, [r2]
	addne r2, ip, r1
	bne _02068080
_0206807C:
	mov r2, #0
_02068080:
	ldrh r1, [r2]
	tst r1, #1
	ldrne r1, [r0]
	orrne r1, r1, #4
	strne r1, [r0]
	bxne lr
	ldr r1, [r2, #4]
	str r1, [r0, #0x4c]
	ldr r1, [r2, #8]
	str r1, [r0, #0x50]
	ldr r1, [r2, #0xc]
	str r1, [r0, #0x54]
	bx lr
	.align 2, 0_020680B4: .word 0x020B703C

	arm_func_start FUN_020680b8
FUN_020680b8: ; 0x020680B8
	push {r4, lr}
	ldr r1, _02068144 ; =0x020B703C
	ldr ip, [r1]
	ldr r2, [ip]
	ldr r4, [ip, #0xd4]
	ldrb lr, [r2, #1]
	cmp r4, #0
	beq _02068114
	beq _02068100
	ldrb r1, [r4, #1]
	cmp lr, r1
	bhs _02068100
	ldrh r3, [r4, #6]
	ldrh r1, [r4, r3]
	add r3, r4, r3
	add r3, r3, #4
	mla r3, r1, lr, r3
	b _02068104
	arm_func_end FUN_020680b8
_02068100:
	mov r3, #0
_02068104:
	cmp r3, #0
	ldrne r1, [r3]
	addne r1, r4, r1
	bne _02068118
_02068114:
	mov r1, #0
_02068118:
	ldrh r3, [r1], #4
	tst r3, #1
	addeq r1, r1, #0xc
	tst r3, #2
	bne _02068138
	tst r3, #8
	addne r1, r1, #4
	addeq r1, r1, #0x10
_02068138:
	ldr ip, [ip, #0xe8]
	blx ip
	pop {r4, pc}
	.align 2, 0_02068144: .word 0x020B703C

	arm_func_start FUN_02068148
FUN_02068148: ; 0x02068148
	push {r4, r5, r6, r7, r8, lr}
	ldr r1, _020682B4 ; =0x020B703C
	mov r8, r0
	ldr r1, [r1]
	ldr r0, [r1]
	ldr r3, [r1, #0xd4]
	ldrb r2, [r0, #1]
	cmp r3, #0
	beq _020681A8
	beq _02068194
	ldrb r0, [r3, #1]
	cmp r2, r0
	bhs _02068194
	ldrh r1, [r3, #6]
	ldrh r0, [r3, r1]
	add r1, r3, r1
	add r1, r1, #4
	mla r1, r0, r2, r1
	b _02068198
	arm_func_end FUN_02068148
_02068194:
	mov r1, #0
_02068198:
	cmp r1, #0
	ldrne r0, [r1]
	addne r5, r3, r0
	bne _020681AC
_020681A8:
	mov r5, #0
_020681AC:
	ldrh r0, [r5]
	add r1, r5, #4
	tst r0, #1
	addeq r1, r1, #0xc
	tst r0, #2
	bne _020682A4
	tst r0, #8
	beq _02068258
	and r2, r0, #0xf0
	add r0, r8, #0x28
	asr r4, r2, #4
	ldrsh r7, [r1]
	ldrsh r6, [r1, #2]
	blx FUN_02008264
	ldrh r0, [r5]
	ldr r1, _020682B8 ; =0x0208C4E0
	mov r3, #0x1000
	tst r0, #0x100
	ldr r0, _020682BC ; =0x0208C4E1
	ldrb r1, [r1, r4, lsl #2]
	ldrb r0, [r0, r4, lsl #2]
	rsbne r3, r3, #0
	add r2, r8, r4, lsl #2
	str r3, [r2, #0x28]
	add r1, r8, r1, lsl #2
	str r7, [r1, #0x28]
	add r0, r8, r0, lsl #2
	str r6, [r0, #0x28]
	ldrh r0, [r5]
	tst r0, #0x200
	ldr r0, _020682C0 ; =0x0208C4E2
	rsbne r6, r6, #0
	ldrb r0, [r0, r4, lsl #2]
	add r0, r8, r0, lsl #2
	str r6, [r0, #0x28]
	ldrh r0, [r5]
	tst r0, #0x400
	ldr r0, _020682C4 ; =0x0208C4E3
	rsbne r7, r7, #0
	ldrb r0, [r0, r4, lsl #2]
	add r0, r8, r0, lsl #2
	str r7, [r0, #0x28]
	pop {r4, r5, r6, r7, r8, pc}
_02068258:
	ldrsh r0, [r5, #2]
	str r0, [r8, #0x28]
	ldrsh r0, [r1]
	str r0, [r8, #0x2c]
	ldrsh r0, [r1, #2]
	str r0, [r8, #0x30]
	ldrsh r0, [r1, #4]
	str r0, [r8, #0x34]
	ldrsh r0, [r1, #6]
	str r0, [r8, #0x38]
	ldrsh r0, [r1, #8]
	str r0, [r8, #0x3c]
	ldrsh r0, [r1, #0xa]
	str r0, [r8, #0x40]
	ldrsh r0, [r1, #0xc]
	str r0, [r8, #0x44]
	ldrsh r0, [r1, #0xe]
	str r0, [r8, #0x48]
	pop {r4, r5, r6, r7, r8, pc}
_020682A4:
	ldr r0, [r8]
	orr r0, r0, #2
	str r0, [r8]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020682B4: .word 0x020B703C
_020682B8: .word 0x0208C4E0
_020682BC: .word 0x0208C4E1
_020682C0: .word 0x0208C4E2
_020682C4: .word 0x0208C4E3

	arm_func_start FUN_020682c8
FUN_020682c8: ; 0x020682C8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x30
	mov sb, r0
	add r0, sb, r1, lsl #1
	ldrh r0, [r0, #0x14]
	mov r7, r3
	mov r8, r2
	ldr r4, [sb, r0]
	add r1, sb, r0
	tst r4, #1
	movne r0, #7
	strne r0, [r7]
	bne _020685E0
	ldr r0, _02068614 ; =0x00000FFF
	add r5, r1, #4
	tst r8, r0
	beq _0206831C
	ldr r0, [sb, #8]
	tst r0, #1
	movne r6, #1
	bne _02068320
	arm_func_end FUN_020682c8
_0206831C:
	mov r6, #0
_02068320:
	mov r0, #0
	str r0, [r7]
	tst r4, #6
	bne _020683E8
	tst r4, #8
	bne _02068364
	cmp r6, #0
	mov r1, r8
	mov r2, r5
	mov r3, sb
	add r0, r7, #0x4c
	beq _02068358
	bl FUN_0206876c
	b _0206835C
_02068358:
	bl FUN_0206861c
_0206835C:
	add r5, r5, #8
	b _0206836C
_02068364:
	ldr r0, [r5], #4
	str r0, [r7, #0x4c]
_0206836C:
	tst r4, #0x10
	bne _020683A0
	cmp r6, #0
	mov r1, r8
	mov r2, r5
	mov r3, sb
	add r0, r7, #0x50
	beq _02068394
	bl FUN_0206876c
	b _02068398
_02068394:
	bl FUN_0206861c
_02068398:
	add r5, r5, #8
	b _020683A8
_020683A0:
	ldr r0, [r5], #4
	str r0, [r7, #0x50]
_020683A8:
	tst r4, #0x20
	bne _020683DC
	cmp r6, #0
	mov r1, r8
	mov r2, r5
	mov r3, sb
	add r0, r7, #0x54
	beq _020683D0
	bl FUN_0206876c
	b _020683D4
_020683D0:
	bl FUN_0206861c
_020683D4:
	add r5, r5, #8
	b _02068400
_020683DC:
	ldr r0, [r5], #4
	str r0, [r7, #0x54]
	b _02068400
_020683E8:
	tst r4, #2
	orrne r0, r0, #4
	strne r0, [r7]
	bne _02068400
	mov r0, r7
	bl FUN_02068024
_02068400:
	tst r4, #0xc0
	bne _020684BC
	tst r4, #0x100
	bne _0206843C
	cmp r6, #0
	mov r1, r8
	mov r2, r5
	mov r3, sb
	add r0, r7, #0x28
	beq _02068430
	bl FUN_02069018
	b _02068434
_02068430:
	bl FUN_02068c14
_02068434:
	add r5, r5, #8
	b _020684D8
_0206843C:
	ldr r1, [sb, #0xc]
	ldr r2, [sb, #0x10]
	ldr r3, [r5]
	add r0, r7, #0x28
	add r1, sb, r1
	add r2, sb, r2
	bl FUN_02069350
	cmp r0, #0
	beq _020684B4
	ldr ip, [r7, #0x3c]
	ldr r3, [r7, #0x28]
	ldr r0, [r7, #0x2c]
	ldr r2, [r7, #0x34]
	ldr r1, [r7, #0x30]
	ldr fp, [r7, #0x38]
	mul sl, r0, ip
	mul lr, r1, fp
	sub sl, sl, lr
	asr sl, sl, #0xc
	mul lr, r1, r2
	mul r1, r3, ip
	sub r1, lr, r1
	asr r1, r1, #0xc
	mul fp, r3, fp
	mul r2, r0, r2
	sub r0, fp, r2
	asr r0, r0, #0xc
	str sl, [r7, #0x40]
	str r1, [r7, #0x44]
	str r0, [r7, #0x48]
_020684B4:
	add r5, r5, #4
	b _020684D8
_020684BC:
	tst r4, #0x40
	ldrne r0, [r7]
	orrne r0, r0, #2
	strne r0, [r7]
	bne _020684D8
	mov r0, r7
	bl FUN_02068148
_020684D8:
	tst r4, #0x600
	bne _020685BC
	tst r4, #0x800
	bne _02068518
	cmp r6, #0
	add r0, sp, #0x10
	mov r1, r8
	mov r2, r5
	mov r3, sb
	beq _02068508
	bl FUN_02068a94
	b _0206850C
_02068508:
	bl FUN_020688c0
_0206850C:
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x14]
	b _02068520
_02068518:
	ldr r1, [r5]
	ldr r0, [r5, #4]
_02068520:
	str r1, [sp, #0x18]
	str r0, [sp, #0x24]
	tst r4, #0x1000
	bne _02068560
	cmp r6, #0
	add r0, sp, #8
	mov r1, r8
	mov r3, sb
	add r2, r5, #8
	beq _02068550
	bl FUN_02068a94
	b _02068554
_02068550:
	bl FUN_020688c0
_02068554:
	ldr r1, [sp, #8]
	ldr r0, [sp, #0xc]
	b _02068568
_02068560:
	ldr r1, [r5, #8]
	ldr r0, [r5, #0xc]
_02068568:
	str r1, [sp, #0x1c]
	str r0, [sp, #0x28]
	tst r4, #0x2000
	bne _020685B0
	cmp r6, #0
	add r0, sp, #0
	mov r1, r8
	mov r3, sb
	add r2, r5, #0x10
	beq _02068598
	bl FUN_02068a94
	b _0206859C
_02068598:
	bl FUN_020688c0
_0206859C:
	ldr r1, [sp]
	ldr r0, [sp, #4]
_020685A4:
	str r1, [sp, #0x20]
	str r0, [sp, #0x2c]
	b _020685E0
_020685B0:
	ldr r1, [r5, #0x10]
	ldr r0, [r5, #0x14]
	b _020685A4
_020685BC:
	tst r4, #0x200
	ldrne r0, [r7]
	orrne r0, r0, #1
	strne r0, [r7]
	bne _020685E0
	mov r0, r7
	bl FUN_020680b8
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020685E0:
	ldr r0, [r7]
	add r1, sp, #0x18
	tst r0, #1
	ldr r0, _02068618 ; =0x020B703C
	movne r3, #4
	ldr r4, [r0]
	moveq r3, #0
	ldr r2, [r4]
	ldr r4, [r4, #0xe8]
	mov r0, r7
	blx r4
	add sp, sp, #0x30
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02068614: .word 0x00000FFF
_02068618: .word 0x020B703C

	arm_func_start FUN_0206861c
FUN_0206861c: ; 0x0206861C
	push {r4, lr}
	ldr ip, [r2, #4]
	ldr lr, [r2]
	asr r4, r1, #0xc
	tst lr, #0xc0000000
	add r1, r3, ip
	beq _0206874C
	ldr r2, _02068768 ; =0x1FFF0000
	tst lr, #0x40000000
	and r2, lr, r2
	lsr r3, r2, #0x10
	beq _02068674
	tst r4, #1
	beq _0206866C
	cmp r4, r3
	lsrhi r2, r3, #1
	addhi r4, r2, #1
	bhi _0206874C
	lsr r4, r4, #1
	b _02068710
	arm_func_end FUN_0206861c
_0206866C:
	lsr r4, r4, #1
	b _0206874C
_02068674:
	ands r2, r4, #3
	beq _02068708
	cmp r4, r3
	addhi r4, r2, r3, lsr #2
	bhi _0206874C
	tst r4, #1
	beq _02068700
	tst r4, #2
	lsrne r4, r4, #2
	addne r2, r4, #1
	lsreq r2, r4, #2
	addeq r4, r2, #1
	tst lr, #0x20000000
	beq _020686D0
	lsl r3, r2, #1
	lsl r2, r4, #1
	ldrsh r3, [r1, r3]
	ldrsh r1, [r1, r2]
	add r2, r3, r3, lsl #1
	add r1, r2, r1
	asr r1, r1, #2
	str r1, [r0]
	pop {r4, pc}
_020686D0:
	ldr r3, [r1, r2, lsl #2]
	mov r2, #3
	umull lr, ip, r3, r2
	asr r3, r3, #0x1f
	mla ip, r3, r2, ip
	ldr r1, [r1, r4, lsl #2]
	adds r2, lr, r1
	adc r1, ip, r1, asr #31
	lsr r2, r2, #2
	orr r2, r2, r1, lsl #30
	str r2, [r0]
	pop {r4, pc}
_02068700:
	lsr r4, r4, #2
	b _02068710
_02068708:
	lsr r4, r4, #2
	b _0206874C
_02068710:
	tst lr, #0x20000000
	addeq r2, r1, r4, lsl #2
	ldreq r2, [r2, #4]
	ldreq r3, [r1, r4, lsl #2]
	asreq r1, r2, #1
	addeq r1, r1, r3, asr #1
	beq _02068744
	lsl r3, r4, #1
	add r2, r1, r4, lsl #1
	ldrsh r3, [r1, r3]
	ldrsh r1, [r2, #2]
	add r1, r3, r1
	asr r1, r1, #1
_02068744:
	str r1, [r0]
	pop {r4, pc}
_0206874C:
	tst lr, #0x20000000
	lslne r2, r4, #1
	ldrshne r1, [r1, r2]
	strne r1, [r0]
	ldreq r1, [r1, r4, lsl #2]
	streq r1, [r0]
	pop {r4, pc}
	.align 2, 0_02068768: .word 0x1FFF0000

	arm_func_start FUN_0206876c
FUN_0206876c: ; 0x0206876C
	push {r3, r4, r5, lr}
	ldrh r4, [r3, #4]
	ldr ip, [r2, #4]
	asr lr, r1, #0xc
	sub r4, r4, #1
	cmp r4, r1, asr #12
	add ip, r3, ip
	ldr r2, [r2]
	bne _02068804
	tst r2, #0xc0000000
	beq _020687AC
	tst r2, #0x40000000
	andne r4, lr, #1
	addne lr, r4, lr, lsr #1
	andeq r4, lr, #3
	addeq lr, r4, lr, lsr #2
	arm_func_end FUN_0206876c
_020687AC:
	ldr r3, [r3, #8]
	tst r3, #2
	beq _020687EC
	ldr r3, _020688B4 ; =0x00000FFF
	tst r2, #0x20000000
	and r2, r1, r3
	lslne r1, lr, #1
	ldrshne r3, [ip, r1]
	ldrshne r1, [ip]
	ldreq r3, [ip, lr, lsl #2]
	ldreq r1, [ip]
	sub r1, r1, r3
	mul r1, r2, r1
	add r1, r3, r1, asr #12
	str r1, [r0]
	pop {r3, r4, r5, pc}
_020687EC:
	tst r2, #0x20000000
	lslne r1, lr, #1
	ldrshne r1, [ip, r1]
	ldreq r1, [ip, lr, lsl #2]
	str r1, [r0]
	pop {r3, r4, r5, pc}
_02068804:
	tst r2, #0xc0000000
	beq _02068868
	ldr r3, _020688B8 ; =0x1FFF0000
	tst r2, #0x40000000
	and r4, r2, r3
	lsr r4, r4, #0x10
	beq _02068840
	cmp lr, r4
	lsrhs lr, r4, #1
	bhs _02068868
	lsr lr, lr, #1
	and r1, r1, r3, lsr #16
	mov r4, #2
	mov r5, #1
	b _02068878
_02068840:
	cmp lr, r4
	andhs r3, lr, #3
	addhs lr, r3, lr, lsr #2
	bhs _02068868
	ldr r3, _020688BC ; =0x00003FFF
	lsr lr, lr, #2
	and r1, r1, r3
	mov r4, #4
	mov r5, #2
	b _02068878
_02068868:
	ldr r3, _020688B4 ; =0x00000FFF
	mov r4, #1
	and r1, r1, r3
	mov r5, #0
_02068878:
	tst r2, #0x20000000
	addne r2, ip, lr, lsl #1
	lslne r3, lr, #1
	ldrshne ip, [ip, r3]
	ldrshne r2, [r2, #2]
	addeq r2, ip, lr, lsl #2
	ldreq ip, [r2]
	ldreq r2, [r2, #4]
	mul r3, ip, r4
	sub r2, r2, ip
	mul r2, r1, r2
	add r1, r3, r2, asr #12
	asr r1, r1, r5
	str r1, [r0]
	pop {r3, r4, r5, pc}
	.align 2, 0_020688B4: .word 0x00000FFF
_020688B8: .word 0x1FFF0000
_020688BC: .word 0x00003FFF

	arm_func_start FUN_020688c0
FUN_020688c0: ; 0x020688C0
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, [r2, #4]
	ldr r5, [r2]
	asr r6, r1, #0xc
	tst r5, #0xc0000000
	add r1, r3, r4
	beq _020689FC
	ldr r2, _02068A90 ; =0x1FFF0000
	tst r5, #0x40000000
	and r2, r5, r2
	lsr r3, r2, #0x10
	beq _02068918
	tst r6, #1
	beq _02068910
	cmp r6, r3
	lsrhi r2, r3, #1
	addhi r6, r2, #1
	bhi _020689FC
	lsr r2, r6, #1
	b _02068A28
	arm_func_end FUN_020688c0
_02068910:
	lsr r6, r6, #1
	b _020689FC
_02068918:
	ands r2, r6, #3
	beq _020689F8
	cmp r6, r3
	addhi r6, r2, r3, lsr #2
	bhi _020689FC
	tst r6, #1
	beq _020689F0
	tst r6, #2
	lsrne r2, r6, #2
	addne r4, r2, #1
	lsreq r4, r6, #2
	addeq r2, r4, #1
	tst r5, #0x20000000
	beq _02068994
	lsl r5, r4, #2
	add r3, r1, r4, lsl #2
	lsl r4, r2, #2
	add r2, r1, r2, lsl #2
	ldrsh r6, [r1, r5]
	ldrsh r5, [r1, r4]
	ldrsh r3, [r3, #2]
	ldrsh r2, [r2, #2]
	add r4, r6, r6, lsl #1
	add r1, r3, r3, lsl #1
	add r1, r2, r1
	add r3, r5, r4
	asr r2, r3, #2
	asr r1, r1, #2
	str r2, [r0]
	str r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, pc}
_02068994:
	add r3, r1, r4, lsl #3
	ldm r3, {r4, lr}
	add ip, r1, r2, lsl #3
	mov r3, #3
	asr r5, r4, #0x1f
	umull r7, r6, r4, r3
	ldr r8, [ip]
	umull r4, r2, lr, r3
	asr r1, lr, #0x1f
	mla r2, r1, r3, r2
	mla r6, r5, r3, r6
	adds r7, r7, r8
	ldr r1, [ip, #4]
	adc r5, r6, r8, asr #31
	adds r3, r4, r1
	adc r1, r2, r1, asr #31
	lsr r2, r3, #2
	lsr r4, r7, #2
	orr r2, r2, r1, lsl #30
	orr r4, r4, r5, lsl #30
	str r2, [r0, #4]
	str r4, [r0]
	pop {r4, r5, r6, r7, r8, pc}
_020689F0:
	lsr r2, r6, #2
	b _02068A28
_020689F8:
	lsr r6, r6, #2
_020689FC:
	tst r5, #0x20000000
	lslne r3, r6, #2
	addne r2, r1, r6, lsl #2
	ldrshne r3, [r1, r3]
	ldrshne r1, [r2, #2]
	addeq r2, r1, r6, lsl #3
	ldreq r3, [r2]
	ldreq r1, [r2, #4]
	str r3, [r0]
	str r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, pc}
_02068A28:
	tst r5, #0x20000000
	beq _02068A64
	add ip, r1, r2, lsl #2
	lsl r2, r2, #2
	ldrsh lr, [r1, r2]
	ldrsh r3, [ip, #4]
	ldrsh r2, [ip, #2]
	ldrsh r1, [ip, #6]
	add r3, lr, r3
	asr r3, r3, #1
	add r1, r2, r1
	asr r1, r1, #1
	str r3, [r0]
	str r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, pc}
_02068A64:
	add ip, r1, r2, lsl #3
	ldr lr, [ip]
	ldr r1, [ip, #0xc]
	ldmib ip, {r2, r3}
	add r1, r2, r1
	add r3, lr, r3
	asr r2, r3, #1
	asr r1, r1, #1
	str r2, [r0]
	str r1, [r0, #4]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02068A90: .word 0x1FFF0000

	arm_func_start FUN_02068a94
FUN_02068a94: ; 0x02068A94
	push {r3, r4, r5, r6, r7, lr}
	ldrh r4, [r3, #4]
	ldr r5, [r2, #4]
	asr lr, r1, #0xc
	sub r4, r4, #1
	cmp r4, r1, asr #12
	add ip, r3, r5
	ldr r2, [r2]
	bne _02068B10
	tst r2, #0xc0000000
	beq _02068AD4
	tst r2, #0x40000000
	andne r4, lr, #1
	addne lr, r4, lr, lsr #1
	andeq r4, lr, #3
	addeq lr, r4, lr, lsr #2
	arm_func_end FUN_02068a94
_02068AD4:
	ldr r3, [r3, #8]
	tst r3, #2
	movne r3, #0
	bne _02068B88
	tst r2, #0x20000000
	addne r1, ip, lr, lsl #2
	lslne r2, lr, #2
	ldrshne r1, [r1, #2]
	ldrshne r2, [ip, r2]
	addeq r1, ip, lr, lsl #3
	ldreq r2, [r1]
	ldreq r1, [r1, #4]
	str r2, [r0]
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
_02068B10:
	tst r2, #0xc0000000
	beq _02068B84
	ldr r4, _02068C08 ; =0x1FFF0000
	tst r2, #0x40000000
	and r3, r2, r4
	lsr r3, r3, #0x10
	beq _02068B54
	cmp lr, r3
	lsrhs lr, r3, #1
	addhs r3, lr, #1
	bhs _02068B88
	lsr lr, lr, #1
	add r3, lr, #1
	and r1, r1, r4, lsr #16
	mov r4, #2
	mov r5, #1
	b _02068B98
_02068B54:
	cmp lr, r3
	andhs r3, lr, #3
	addhs lr, r3, lr, lsr #2
	addhs r3, lr, #1
	bhs _02068B88
	ldr r4, _02068C0C ; =0x00003FFF
	lsr lr, lr, #2
	add r3, lr, #1
	and r1, r1, r4
	mov r4, #4
	mov r5, #2
	b _02068B98
_02068B84:
	add r3, lr, #1
_02068B88:
	ldr r5, _02068C10 ; =0x00000FFF
	mov r4, #1
	and r1, r1, r5
	mov r5, #0
_02068B98:
	tst r2, #0x20000000
	addeq r7, ip, lr, lsl #3
	ldmeq r7, {r2, lr}
	addeq r6, ip, r3, lsl #3
	ldreq r7, [ip, r3, lsl #3]
	ldreq r3, [r6, #4]
	beq _02068BD4
	lsl r2, lr, #2
	add r7, ip, lr, lsl #2
	lsl r6, r3, #2
	add r3, ip, r3, lsl #2
	ldrsh lr, [r7, #2]
	ldrsh r2, [ip, r2]
	ldrsh r7, [ip, r6]
	ldrsh r3, [r3, #2]
_02068BD4:
	sub ip, r7, r2
	sub r3, r3, lr
	mul r6, r2, r4
	mul r2, r1, ip
	add r2, r6, r2, asr #12
	asr r6, r2, r5
	mul r4, lr, r4
	mul r2, r1, r3
	add r1, r4, r2, asr #12
	asr r1, r1, r5
	str r6, [r0]
	str r1, [r0, #4]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02068C08: .word 0x1FFF0000
_02068C0C: .word 0x00003FFF
_02068C10: .word 0x00000FFF

	arm_func_start FUN_02068c14
FUN_02068c14: ; 0x02068C14
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x48
	ldr sb, [r2]
	mov r4, r3
	ldr r2, [r2, #4]
	mov r5, r0
	tst sb, #0xc0000000
	asr r3, r1, #0xc
	add r8, r4, r2
	ldr r7, [r4, #0xc]
	ldr r6, [r4, #0x10]
	beq _02068F88
	ldr r0, _02069014 ; =0x1FFF0000
	tst sb, #0x40000000
	and r0, sb, r0
	lsr r1, r0, #0x10
	beq _02068C80
	tst r3, #1
	beq _02068C78
	cmp r3, r1
	lsrhi r0, r1, #1
	addhi r3, r0, #1
	bhi _02068F88
	lsr sb, r3, #1
	b _02068E34
	arm_func_end FUN_02068c14
_02068C78:
	lsr r3, r3, #1
	b _02068F88
_02068C80:
	ands r0, r3, #3
	beq _02068E2C
	cmp r3, r1
	addhi r3, r0, r1, lsr #2
	bhi _02068F88
	tst r3, #1
	beq _02068E24
	tst r3, #2
	lsrne sb, r3, #2
	addne r0, sb, #1
	lsreq r0, r3, #2
	addeq sb, r0, #1
	lsl r0, r0, #1
	ldrh r3, [r8, r0]
	mov r0, r5
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_02069350
	lsl r1, sb, #1
	ldrh r3, [r8, r1]
	orr sb, r0, #0
	add r0, sp, #0x24
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_02069350
	ldr r2, [r5]
	ldmib r5, {r1, r4}
	orr sb, sb, r0
	ldr r6, [sp, #0x24]
	add r2, r2, r2, lsl #1
	add r2, r6, r2
	str r2, [r5]
	ldr r6, [sp, #0x28]
	add r1, r1, r1, lsl #1
	add r1, r6, r1
	str r1, [r5, #4]
	ldr r6, [sp, #0x2c]
	add r0, r4, r4, lsl #1
	add r0, r6, r0
	str r0, [r5, #8]
	ldr r3, [r5, #0xc]
	ldr r4, [sp, #0x30]
	add r0, r3, r3, lsl #1
	add r0, r4, r0
	str r0, [r5, #0xc]
	ldr r2, [r5, #0x10]
	ldr r3, [sp, #0x34]
	add r0, r2, r2, lsl #1
	add r0, r3, r0
	str r0, [r5, #0x10]
	ldr r1, [r5, #0x14]
	ldr r2, [sp, #0x38]
	add r0, r1, r1, lsl #1
	add r2, r2, r0
	mov r0, r5
	mov r1, r5
	str r2, [r5, #0x14]
	bl FUN_020098b0
	add r0, r5, #0xc
	mov r1, r0
	bl FUN_020098b0
	cmp sb, #0
	bne _02068DCC
	ldr r0, [r5, #0x18]
	ldr r1, [sp, #0x3c]
	add r0, r0, r0, lsl #1
	add r0, r1, r0
	str r0, [r5, #0x18]
	ldr r0, [r5, #0x1c]
	ldr r1, [sp, #0x40]
	add r0, r0, r0, lsl #1
	add r0, r1, r0
	str r0, [r5, #0x1c]
	ldr r0, [r5, #0x20]
	ldr r1, [sp, #0x44]
	add r0, r0, r0, lsl #1
	add r2, r1, r0
	add r0, r5, #0x18
	mov r1, r0
	str r2, [r5, #0x20]
	bl FUN_020098b0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02068DCC:
	ldr sb, [r5, #0x14]
	ldr r7, [r5, #0x10]
	ldmib r5, {r0, r8}
	mul r4, r0, sb
	mul r3, r8, r7
	sub r3, r4, r3
	ldr r1, [r5, #0xc]
	asr r6, r3, #0xc
	ldr r2, [r5]
	mul r4, r8, r1
	mul r3, r2, sb
	sub r3, r4, r3
	asr r4, r3, #0xc
	mul r3, r2, r7
	mul r1, r0, r1
	sub r0, r3, r1
	asr r0, r0, #0xc
	add sp, sp, #0x48
	str r6, [r5, #0x18]
	str r4, [r5, #0x1c]
	str r0, [r5, #0x20]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02068E24:
	lsr sb, r3, #2
	b _02068E34
_02068E2C:
	lsr r3, r3, #2
	b _02068F88
_02068E34:
	lsl r0, sb, #1
	ldrh r3, [r8, r0]
	mov r0, r5
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_02069350
	add r1, r8, sb, lsl #1
	ldrh r3, [r1, #2]
	orr r8, r0, #0
	add r0, sp, #0
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_02069350
	ldr r3, [r5]
	ldr r1, [sp]
	ldr r2, [r5, #4]
	add r1, r3, r1
	str r1, [r5]
	ldr r1, [sp, #4]
	ldr r3, [r5, #8]
	add r1, r2, r1
	str r1, [r5, #4]
	ldr r1, [sp, #8]
	ldr r2, [r5, #0xc]
	add r1, r3, r1
	str r1, [r5, #8]
	ldr r1, [sp, #0xc]
	orr r8, r8, r0
	add r0, r2, r1
	str r0, [r5, #0xc]
	ldr r1, [r5, #0x10]
	ldr r0, [sp, #0x10]
	ldr r2, [r5, #0x14]
	add r0, r1, r0
	str r0, [r5, #0x10]
	ldr r1, [sp, #0x14]
	mov r0, r5
	add r2, r2, r1
	mov r1, r5
	str r2, [r5, #0x14]
	bl FUN_020098b0
	add r0, r5, #0xc
	mov r1, r0
	bl FUN_020098b0
	cmp r8, #0
	bne _02068F30
	ldr r2, [r5, #0x18]
	ldr r0, [sp, #0x18]
	ldr r1, [r5, #0x1c]
	add r0, r2, r0
	str r0, [r5, #0x18]
	ldr r0, [sp, #0x1c]
	ldr r2, [r5, #0x20]
	add r0, r1, r0
	str r0, [r5, #0x1c]
	ldr r1, [sp, #0x20]
	add r0, r5, #0x18
	add r2, r2, r1
	mov r1, r0
	str r2, [r5, #0x20]
	bl FUN_020098b0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02068F30:
	ldr sb, [r5, #0x14]
	ldr r7, [r5, #0x10]
	ldmib r5, {r0, r8}
	mul r4, r0, sb
	mul r3, r8, r7
	sub r3, r4, r3
	ldr r1, [r5, #0xc]
	asr r6, r3, #0xc
	ldr r2, [r5]
	mul r4, r8, r1
	mul r3, r2, sb
	sub r3, r4, r3
	asr r4, r3, #0xc
	mul r3, r2, r7
	mul r1, r0, r1
	sub r0, r3, r1
	asr r0, r0, #0xc
	add sp, sp, #0x48
	str r6, [r5, #0x18]
	str r4, [r5, #0x1c]
	str r0, [r5, #0x20]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02068F88:
	lsl r0, r3, #1
	ldrh r3, [r8, r0]
	mov r0, r5
	add r1, r4, r7
	add r2, r4, r6
	bl FUN_02069350
	cmp r0, #0
	beq _02069000
	ldr sb, [r5, #0x14]
	ldr r7, [r5, #0x10]
	ldmib r5, {r0, r8}
	mul r4, r0, sb
	mul r3, r8, r7
	sub r3, r4, r3
	ldr r1, [r5, #0xc]
	asr r6, r3, #0xc
	ldr r2, [r5]
	mul r4, r8, r1
	mul r3, r2, sb
	sub r3, r4, r3
	asr r4, r3, #0xc
	mul r3, r2, r7
	mul r1, r0, r1
	sub r0, r3, r1
	asr r0, r0, #0xc
	add sp, sp, #0x48
	str r6, [r5, #0x18]
	str r4, [r5, #0x1c]
	str r0, [r5, #0x20]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02069000:
	add r0, r5, #0x18
	mov r1, r0
	bl FUN_020098b0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02069014: .word 0x1FFF0000

	arm_func_start FUN_02069018
FUN_02069018: ; 0x02069018
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x48
	mov sb, r3
	ldrh r3, [sb, #4]
	ldr r4, [r2, #4]
	mov sl, r0
	sub r0, r3, #1
	cmp r0, r1, asr #12
	add r8, sb, r4
	asr r0, r1, #0xc
	ldr r4, [sb, #0xc]
	ldr fp, [sb, #0x10]
	ldr r3, [r2]
	bne _02069108
	tst r3, #0xc0000000
	beq _0206906C
	tst r3, #0x40000000
	andne r2, r0, #1
	addne r0, r2, r0, lsr #1
	andeq r2, r0, #3
	addeq r0, r2, r0, lsr #2
	arm_func_end FUN_02069018
_0206906C:
	ldr r2, [sb, #8]
	tst r2, #2
	movne r5, #0
	bne _02069178
	lsl r0, r0, #1
	ldrh r3, [r8, r0]
	mov r0, sl
	add r1, sb, r4
	add r2, sb, fp
	bl FUN_02069350
	cmp r0, #0
	beq _020690F4
	ldr r8, [sl, #0x14]
	ldr r6, [sl, #0x10]
	ldmib sl, {r0, r7}
	mul r4, r0, r8
	mul r3, r7, r6
	sub r3, r4, r3
	ldr r1, [sl, #0xc]
	asr r5, r3, #0xc
	ldr r2, [sl]
	mul r4, r7, r1
	mul r3, r2, r8
	sub r3, r4, r3
	asr r4, r3, #0xc
	mul r3, r2, r6
	mul r1, r0, r1
	sub r0, r3, r1
	asr r0, r0, #0xc
	add sp, sp, #0x48
	str r5, [sl, #0x18]
	str r4, [sl, #0x1c]
	str r0, [sl, #0x20]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020690F4:
	add r0, sl, #0x18
	mov r1, r0
	bl FUN_020098b0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02069108:
	tst r3, #0xc0000000
	beq _02069174
	ldr r2, _02069344 ; =0x1FFF0000
	tst r3, #0x40000000
	and r3, r3, r2
	lsr r3, r3, #0x10
	beq _02069148
	cmp r0, r3
	lsrhs r0, r3, #1
	addhs r5, r0, #1
	bhs _02069178
	lsr r0, r0, #1
	add r5, r0, #1
	and r6, r1, r2, lsr #16
	mov r7, #2
	b _02069184
_02069148:
	cmp r0, r3
	andhs r2, r0, #3
	addhs r0, r2, r0, lsr #2
	addhs r5, r0, #1
	bhs _02069178
	ldr r2, _02069348 ; =0x00003FFF
	lsr r0, r0, #2
	add r5, r0, #1
	and r6, r1, r2
	mov r7, #4
	b _02069184
_02069174:
	add r5, r0, #1
_02069178:
	ldr r2, _0206934C ; =0x00000FFF
	mov r7, #1
	and r6, r1, r2
_02069184:
	lsl r0, r0, #1
	ldrh r3, [r8, r0]
	add r0, sp, #0x24
	add r1, sb, r4
	add r2, sb, fp
	bl FUN_02069350
	lsl r1, r5, #1
	ldrh r3, [r8, r1]
	orr r5, r0, #0
	add r0, sp, #0
	add r1, sb, r4
	add r2, sb, fp
	bl FUN_02069350
	ldr r3, [sp, #0x24]
	ldr r1, [sp]
	mul r2, r3, r7
	sub r1, r1, r3
	mul r1, r6, r1
	add r1, r2, r1, asr #12
	str r1, [sl]
	ldr r3, [sp, #0x28]
	ldr r1, [sp, #4]
	mul r2, r3, r7
	sub r1, r1, r3
	mul r1, r6, r1
	add r1, r2, r1, asr #12
	str r1, [sl, #4]
	ldr r3, [sp, #0x2c]
	ldr r1, [sp, #8]
	mul r2, r3, r7
	sub r1, r1, r3
	mul r1, r6, r1
	add r1, r2, r1, asr #12
	str r1, [sl, #8]
	ldr r3, [sp, #0x30]
	ldr r1, [sp, #0xc]
	mul r2, r3, r7
	sub r1, r1, r3
	mul r1, r6, r1
	add r1, r2, r1, asr #12
	str r1, [sl, #0xc]
	ldr r2, [sp, #0x34]
	ldr r1, [sp, #0x10]
	orr r5, r5, r0
	sub r0, r1, r2
	mul r1, r2, r7
	mul r0, r6, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x10]
	ldr r2, [sp, #0x38]
	ldr r0, [sp, #0x14]
	mul r1, r2, r7
	sub r0, r0, r2
	mul r0, r6, r0
	add r2, r1, r0, asr #12
	mov r0, sl
	mov r1, sl
	str r2, [sl, #0x14]
	bl FUN_020098b0
	add r0, sl, #0xc
	mov r1, r0
	bl FUN_020098b0
	cmp r5, #0
	bne _020692EC
	ldr r2, [sp, #0x3c]
	ldr r0, [sp, #0x18]
	mul r1, r2, r7
	sub r0, r0, r2
	mul r0, r6, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x18]
	ldr r2, [sp, #0x40]
	ldr r0, [sp, #0x1c]
	mul r1, r2, r7
	sub r0, r0, r2
	mul r0, r6, r0
	add r0, r1, r0, asr #12
	str r0, [sl, #0x1c]
	ldr r2, [sp, #0x44]
	ldr r0, [sp, #0x20]
	mul r1, r2, r7
	sub r0, r0, r2
	mul r0, r6, r0
	add r2, r1, r0, asr #12
	add r0, sl, #0x18
	mov r1, r0
	str r2, [sl, #0x20]
	bl FUN_020098b0
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020692EC:
	ldr r8, [sl, #0x14]
	ldr r6, [sl, #0x10]
	ldmib sl, {r0, r7}
	mul r4, r0, r8
	mul r3, r7, r6
	sub r3, r4, r3
	ldr r1, [sl, #0xc]
	asr r5, r3, #0xc
	ldr r2, [sl]
	mul r4, r7, r1
	mul r3, r2, r8
	sub r3, r4, r3
	asr r4, r3, #0xc
	mul r3, r2, r6
	mul r1, r0, r1
	sub r0, r3, r1
	asr r0, r0, #0xc
	str r5, [sl, #0x18]
	str r4, [sl, #0x1c]
	str r0, [sl, #0x20]
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02069344: .word 0x1FFF0000
_02069348: .word 0x00003FFF
_0206934C: .word 0x00000FFF

	arm_func_start FUN_02069350
FUN_02069350: ; 0x02069350
	push {r4, r5, r6, lr}
	tst r3, #0x8000
	beq _02069408
	ldr r2, _020694A4 ; =0x00007FFF
	mov r4, #0
	and r2, r3, r2
	add r3, r2, r2, lsl #1
	lsl r2, r3, #1
	ldrsh r2, [r1, r2]
	add lr, r1, r3, lsl #1
	str r4, [r0, #0x20]
	tst r2, #0x10
	subne r6, r4, #0x1000
	and r1, r2, #0xf
	ldr r5, _020694A8 ; =0x0208C4E1
	str r4, [r0, #0x1c]
	str r4, [r0, #0x18]
	str r4, [r0, #0x14]
	str r4, [r0, #0x10]
	str r4, [r0, #0xc]
	str r4, [r0, #8]
	str r4, [r0, #4]
	str r4, [r0]
	ldr r4, _020694AC ; =0x0208C4E0
	moveq r6, #0x1000
	ldrb ip, [r4, r1, lsl #2]
	ldrsh r4, [lr]
	ldrsh r3, [lr, #2]
	str r6, [r0, r1, lsl #2]
	tst r4, #0x20
	ldrsh r2, [lr, #4]
	ldrb r5, [r5, r1, lsl #2]
	str r3, [r0, ip, lsl #2]
	ldrsh r4, [lr]
	str r2, [r0, r5, lsl #2]
	ldr r5, _020694B0 ; =0x0208C4E2
	rsbne r2, r2, #0
	ldrb r5, [r5, r1, lsl #2]
	tst r4, #0x40
	rsbne r3, r3, #0
	str r2, [r0, r5, lsl #2]
	ldr r2, _020694B4 ; =0x0208C4E3
	ldrb r1, [r2, r1, lsl #2]
	str r3, [r0, r1, lsl #2]
	mov r0, #0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02069350
_02069408:
	ldr r1, _020694A4 ; =0x00007FFF
	and r1, r3, r1
	add r1, r1, r1, lsl #2
	add r5, r2, r1, lsl #1
	ldrsh r3, [r5, #8]
	lsl r1, r1, #1
	ldrsh r2, [r2, r1]
	and r4, r3, #7
	lsl ip, r4, #0x10
	ldrsh r1, [r5, #2]
	ldrsh lr, [r5, #4]
	ldrsh r4, [r5, #6]
	and r5, r2, #7
	orr r5, r5, ip, asr #13
	lsl ip, r5, #0x10
	and r5, r1, #7
	orr r5, r5, ip, asr #13
	lsl ip, r5, #0x10
	and r5, lr, #7
	orr ip, r5, ip, asr #13
	asr r5, lr, #3
	asr lr, r4, #3
	asr r3, r3, #3
	asr r2, r2, #3
	lsl ip, ip, #0x10
	and r4, r4, #7
	orr r4, r4, ip, asr #13
	lsl ip, r4, #0x10
	asr ip, ip, #0x10
	lsl ip, ip, #0x13
	asr r1, r1, #3
	str r3, [r0, #0x10]
	str r2, [r0]
	stmib r0, {r1, r5}
	asr ip, ip, #0x13
	str lr, [r0, #0xc]
	str ip, [r0, #0x14]
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_020694A4: .word 0x00007FFF
_020694A8: .word 0x0208C4E1
_020694AC: .word 0x0208C4E0
_020694B0: .word 0x0208C4E2
_020694B4: .word 0x0208C4E3

	arm_func_start FUN_020694b8
FUN_020694b8: ; 0x020694B8
	tst r1, #0x20000000
	lslne r0, r1, #0x10
	lsrne r0, r0, #0x10
	bxne lr
	lsl r3, r1, #0x10
	tst r1, #0xc0000000
	add r0, r0, r3, lsr #16
	lsleq r1, r2, #1
	ldrheq r0, [r0, r1]
	bxeq lr
	ldr r3, _02069610 ; =0x1FFF0000
	tst r1, #0x40000000
	and r1, r1, r3
	lsr r3, r1, #0x10
	beq _02069524
	tst r2, #1
	beq _02069518
	cmp r2, r3
	bichi r1, r3, #1
	addhi r0, r0, r1
	ldrhhi r0, [r0, #2]
	bxhi lr
	lsr r1, r2, #1
	b _020695C8
	arm_func_end FUN_020694b8
_02069518:
	bic r1, r2, #1
	ldrh r0, [r0, r1]
	bx lr
_02069524:
	ands r1, r2, #3
	beq _020695B8
	cmp r2, r3
	lsrhi r2, r3, #2
	lslhi r1, r1, #1
	addhi r0, r0, r2, lsl #1
	ldrhhi r0, [r1, r0]
	bxhi lr
	tst r2, #1
	beq _020695B0
	tst r2, #2
	lsrne r3, r2, #2
	addne r1, r3, #1
	lsreq r1, r2, #2
	lsl r2, r1, #1
	addeq r3, r1, #1
	lsl r1, r3, #1
	ldrh r2, [r0, r2]
	ldrh ip, [r0, r1]
	ldr r0, _02069614 ; =0x00007C1F
	and r1, r2, #0x3e0
	and r3, r2, r0
	add r2, r1, r1, lsl #1
	and r1, ip, #0x3e0
	add r1, r2, r1
	add r3, r3, r3, lsl #1
	and r2, ip, r0
	add r2, r3, r2
	lsr r1, r1, #2
	and r2, r0, r2, lsr #2
	and r0, r1, #0x3e0
	orr r0, r2, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
_020695B0:
	lsr r1, r2, #2
	b _020695C8
_020695B8:
	lsr r1, r2, #2
	lsl r1, r1, #1
	ldrh r0, [r0, r1]
	bx lr
_020695C8:
	lsl r2, r1, #1
	add r1, r0, r1, lsl #1
	ldrh r3, [r0, r2]
	ldrh ip, [r1, #2]
	ldr r0, _02069614 ; =0x00007C1F
	and r2, r3, #0x3e0
	and r1, ip, #0x3e0
	add r1, r2, r1
	lsr r1, r1, #1
	and r3, r3, r0
	and r2, ip, r0
	add r2, r3, r2
	and r2, r0, r2, lsr #1
	and r0, r1, #0x3e0
	orr r0, r2, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0_02069610: .word 0x1FFF0000
_02069614: .word 0x00007C1F

	arm_func_start FUN_02069618
FUN_02069618: ; 0x02069618
	tst r1, #0x20000000
	lslne r0, r1, #0x10
	lsrne r0, r0, #0x10
	bxne lr
	lsl r3, r1, #0x10
	add r3, r0, r3, lsr #16
	tst r1, #0xc0000000
	ldrbeq r0, [r3, r2]
	bxeq lr
	ldr r0, _02069700 ; =0x1FFF0000
	tst r1, #0x40000000
	and r0, r1, r0
	lsr r0, r0, #0x10
	beq _0206968C
	tst r2, #1
	beq _02069684
	cmp r2, r0
	addhi r0, r3, r0, lsr #1
	ldrbhi r0, [r0, #1]
	bxhi lr
	add r0, r3, r2, lsr #1
	ldrb r1, [r3, r2, lsr #1]
	ldrb r0, [r0, #1]
	add r0, r1, r0
	lsl r0, r0, #0xf
	lsr r0, r0, #0x10
	bx lr
	arm_func_end FUN_02069618
_02069684:
	ldrb r0, [r3, r2, lsr #1]
	bx lr
_0206968C:
	ands r1, r2, #3
	beq _020696F8
	cmp r2, r0
	addhi r0, r3, r0, lsr #2
	ldrbhi r0, [r1, r0]
	bxhi lr
	tst r2, #1
	beq _020696DC
	tst r2, #2
	lsrne r2, r2, #2
	addne r0, r2, #1
	lsreq r0, r2, #2
	ldrb r1, [r3, r0]
	addeq r2, r0, #1
	ldrb r0, [r3, r2]
	add r1, r1, r1, lsl #1
	add r0, r1, r0
	lsl r0, r0, #0xe
	lsr r0, r0, #0x10
	bx lr
_020696DC:
	add r0, r3, r2, lsr #2
	ldrb r1, [r3, r2, lsr #2]
	ldrb r0, [r0, #1]
	add r0, r1, r0
	lsl r0, r0, #0xf
	lsr r0, r0, #0x10
	bx lr
_020696F8:
	ldrb r0, [r3, r2, lsr #2]
	bx lr
	.align 2, 0_02069700: .word 0x1FFF0000

	arm_func_start FUN_02069704
FUN_02069704: ; 0x02069704
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, r0
	cmp r2, #0
	ldrne r0, [r2, #8]
	mov sb, r1
	cmpne r0, #0
	addne r8, r2, r0
	ldr r0, _020697CC ; =0x02091020
	mov r7, #0
	ldr r1, [r0]
	mov r0, r7
	str r1, [sl, #0xc]
	ldrb r2, [r2, #0x18]
	add r1, sl, #0x1a
	moveq r8, #0
	strb r2, [sl, #0x19]
	lsl r2, r2, #1
	bl FUN_02007804
	ldrb r0, [sb, #9]
	cmp r0, #0
	popls {r4, r5, r6, r7, r8, sb, sl, pc}
	add r6, sb, #8
	mov r5, r7
	mvn r4, #0
	arm_func_end FUN_02069704
_02069764:
	cmp r6, #0
	beq _02069790
	ldrb r0, [sb, #9]
	cmp r7, r0
	bhs _02069790
	ldrh r0, [sb, #0xe]
	add r1, r6, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, r7, lsl #4
	b _02069794
_02069790:
	mov r1, r5
_02069794:
	cmp r8, #0
	moveq r0, r4
	beq _020697A8
	add r0, r8, #4
	bl FUN_02067c64
_020697A8:
	cmp r0, #0
	orrge r1, r7, #0x100
	addge r0, sl, r0, lsl #1
	strhge r1, [r0, #0x1a]
	ldrb r0, [sb, #9]
	add r7, r7, #1
	cmp r7, r0
	blo _02069764
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020697CC: .word 0x02091020

	arm_func_start FUN_020697d0
FUN_020697d0: ; 0x020697D0
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, [r1, #8]
	ldr r3, [r1]
	ldrh r1, [r4, #4]
	mov r7, r0
	lsl r0, r1, #0xc
	cmp r3, r1, lsl #12
	subge r3, r0, #1
	bge _020697FC
	cmp r3, #0
	movlt r3, #0
	arm_func_end FUN_020697d0
_020697FC:
	asr r5, r3, #0xc
	adds r3, r4, #8
	beq _02069834
	ldrb r1, [r4, #9]
	lsl r0, r2, #0x10
	lsr r2, r0, #0x10
	cmp r1, r0, lsr #16
	bls _02069834
	ldrh r1, [r4, #0xe]
	ldrh r0, [r3, r1]
	add r1, r3, r1
	add r1, r1, #4
	mla r6, r0, r2, r1
	b _02069838
_02069834:
	mov r6, #0
_02069838:
	ldr r1, [r6]
	mov r0, r4
	mov r2, r5
	bl FUN_020694b8
	mov r8, r0
	ldr r1, [r6, #4]
	mov r0, r4
	mov r2, r5
	bl FUN_020694b8
	ldr r1, [r7, #4]
	orr r0, r8, r0, lsl #16
	tst r1, #0x8000
	movne r1, #1
	moveq r1, #0
	orr r0, r0, r1, lsl #15
	str r0, [r7, #4]
	ldr r1, [r6, #0xc]
	mov r0, r4
	mov r2, r5
	bl FUN_020694b8
	mov r8, r0
	ldr r1, [r6, #8]
	mov r0, r4
	mov r2, r5
	bl FUN_020694b8
	ldr r1, [r7, #8]
	orr r0, r0, r8, lsl #16
	tst r1, #0x8000
	movne r1, #1
	moveq r1, #0
	orr r0, r0, r1, lsl #15
	str r0, [r7, #8]
	ldr r1, [r6, #0x10]
	mov r0, r4
	mov r2, r5
	bl FUN_02069618
	ldr r1, [r7, #0xc]
	bic r1, r1, #0x1f0000
	orr r0, r1, r0, lsl #16
	str r0, [r7, #0xc]
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020698dc
FUN_020698dc: ; 0x020698DC
	tst r1, #0x20000000
	movne r0, r2
	bxne lr
	tst r1, #0xc0000000
	add r0, r0, r2
	beq _02069994
	lsl r2, r1, #0x10
	tst r1, #0x40000000
	lsr ip, r2, #0x10
	beq _0206992C
	tst r3, #1
	beq _02069924
	cmp r3, ip
	lsrhi r2, ip, #1
	addhi r3, r2, #1
	bhi _02069994
	lsr r3, r3, #1
	b _020699A8
	arm_func_end FUN_020698dc
_02069924:
	lsr r3, r3, #1
	b _02069994
_0206992C:
	ands r2, r3, #3
	beq _02069990
	cmp r3, ip
	addhi r3, r2, ip, lsr #2
	bhi _02069994
	tst r3, #1
	beq _02069988
	tst r3, #2
	lsrne r3, r3, #2
	addne r2, r3, #1
	lsreq r2, r3, #2
	addeq r3, r2, #1
	tst r1, #0x10000000
	lslne r2, r2, #1
	lslne r1, r3, #1
	ldrshne r2, [r0, r2]
	ldrshne r1, [r0, r1]
	ldreq r2, [r0, r2, lsl #2]
	ldreq r1, [r0, r3, lsl #2]
	add r0, r2, r2, lsl #1
	add r0, r0, r1
	asr r0, r0, #2
	bx lr
_02069988:
	lsr r3, r3, #2
	b _020699A8
_02069990:
	lsr r3, r3, #2
_02069994:
	tst r1, #0x10000000
	lslne r1, r3, #1
	ldrshne r0, [r0, r1]
	ldreq r0, [r0, r3, lsl #2]
	bx lr
_020699A8:
	tst r1, #0x10000000
	addne r1, r0, r3, lsl #1
	lslne r2, r3, #1
	ldrshne r0, [r0, r2]
	ldrshne r1, [r1, #2]
	addeq r1, r0, r3, lsl #2
	ldmeq r1, {r0, r1}
	add r0, r0, r1
	asr r0, r0, #1
	bx lr

	arm_func_start FUN_020699d0
FUN_020699d0: ; 0x020699D0
	tst r1, #0x20000000
	movne r0, r2
	bxne lr
	tst r1, #0xc0000000
	add r0, r0, r2
	beq _02069AA0
	lsl r2, r1, #0x10
	tst r1, #0x40000000
	lsr r2, r2, #0x10
	beq _02069A20
	tst r3, #1
	beq _02069A18
	cmp r3, r2
	lsrhi r1, r2, #1
	addhi r3, r1, #1
	bhi _02069AA0
	lsr r1, r3, #1
	b _02069AA8
	arm_func_end FUN_020699d0
_02069A18:
	lsr r3, r3, #1
	b _02069AA0
_02069A20:
	ands r1, r3, #3
	beq _02069A9C
	cmp r3, r2
	addhi r3, r1, r2, lsr #2
	bhi _02069AA0
	tst r3, #1
	beq _02069A94
	tst r3, #2
	lsrne r3, r3, #2
	addne r1, r3, #1
	lsreq r1, r3, #2
	add r2, r0, r1, lsl #2
	lsl ip, r1, #2
	addeq r3, r1, #1
	add r1, r0, r3, lsl #2
	ldrsh r2, [r2, #2]
	lsl r3, r3, #2
	ldrsh ip, [r0, ip]
	ldrsh r1, [r1, #2]
	ldrsh r3, [r0, r3]
	add r2, r2, r2, lsl #1
	add r0, r2, r1
	add ip, ip, ip, lsl #1
	asr r1, r0, #2
	add r2, ip, r3
	lsl r0, r2, #0xe
	lsl r1, r1, #0x10
	orr r0, r1, r0, lsr #16
	bx lr
_02069A94:
	lsr r1, r3, #2
	b _02069AA8
_02069A9C:
	lsr r3, r3, #2
_02069AA0:
	ldr r0, [r0, r3, lsl #2]
	bx lr
_02069AA8:
	add r3, r0, r1, lsl #2
	lsl ip, r1, #2
	ldrsh r2, [r3, #2]
	ldrsh r1, [r3, #6]
	ldrsh ip, [r0, ip]
	ldrsh r3, [r3, #4]
	add r0, r2, r1
	asr r1, r0, #1
	add r0, ip, r3
	lsl r0, r0, #0xf
	lsl r1, r1, #0x10
	orr r0, r1, r0, lsr #16
	bx lr

	arm_func_start FUN_02069adc
FUN_02069adc: ; 0x02069ADC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	mov r6, r2
	mov r5, r3
	adds r3, r7, #8
	beq _02069B18
	ldrb r0, [r7, #9]
	cmp r1, r0
	bhs _02069B18
	ldrh r2, [r7, #0xe]
	ldrh r0, [r3, r2]
	add r2, r3, r2
	add r2, r2, #4
	mla r4, r0, r1, r2
	b _02069B1C
	arm_func_end FUN_02069adc
_02069B18:
	mov r4, #0
_02069B1C:
	ldr r1, [r4, #0x18]
	ldr r2, [r4, #0x1c]
	mov r0, r7
	mov r3, r6
	ldr r8, [r5]
	bl FUN_020698dc
	mov sb, r0
	ldr r1, [r4, #0x20]
	ldr r2, [r4, #0x24]
	mov r0, r7
	mov r3, r6
	bl FUN_020698dc
	cmp sb, #0
	cmpeq r0, #0
	strne r0, [r5, #0x28]
	strne sb, [r5, #0x24]
	orreq r8, r8, #4
	ldr r1, [r4, #0x10]
	ldr r2, [r4, #0x14]
	mov r0, r7
	mov r3, r6
	bicne r8, r8, #4
	bl FUN_020699d0
	cmp r0, #0x10000000
	lsrne r1, r0, #0x10
	orreq r8, r8, #2
	strhne r0, [r5, #0x20]
	strhne r1, [r5, #0x22]
	mov r0, r7
	mov r3, r6
	bicne r8, r8, #2
	ldm r4, {r1, r2}
	bl FUN_020698dc
	mov sb, r0
	ldr r1, [r4, #8]
	ldr r2, [r4, #0xc]
	mov r0, r7
	mov r3, r6
	bl FUN_020698dc
	cmp sb, #0x1000
	cmpeq r0, #0x1000
	orreq r8, r8, #1
	bicne r8, r8, #1
	strne sb, [r5, #0x18]
	strne r0, [r5, #0x1c]
	str r8, [r5]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_02069bd8
FUN_02069bd8: ; 0x02069BD8
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, r0
	cmp r2, #0
	ldrne r0, [r2, #8]
	mov sb, r1
	cmpne r0, #0
	addne r8, r2, r0
	ldr r0, _02069CA0 ; =0x02091018
	mov r7, #0
	ldr r1, [r0]
	mov r0, r7
	str r1, [sl, #0xc]
	ldrb r2, [r2, #0x18]
	add r1, sl, #0x1a
	moveq r8, #0
	strb r2, [sl, #0x19]
	lsl r2, r2, #1
	bl FUN_02007804
	ldrb r0, [sb, #9]
	cmp r0, #0
	popls {r4, r5, r6, r7, r8, sb, sl, pc}
	add r6, sb, #8
	mov r5, r7
	mvn r4, #0
	arm_func_end FUN_02069bd8
_02069C38:
	cmp r6, #0
	beq _02069C64
	ldrb r0, [sb, #9]
	cmp r7, r0
	bhs _02069C64
	ldrh r0, [sb, #0xe]
	add r1, r6, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, r7, lsl #4
	b _02069C68
_02069C64:
	mov r1, r5
_02069C68:
	cmp r8, #0
	moveq r0, r4
	beq _02069C7C
	add r0, r8, #4
	bl FUN_02067c64
_02069C7C:
	cmp r0, #0
	orrge r1, r7, #0x100
	addge r0, sl, r0, lsl #1
	strhge r1, [r0, #0x1a]
	ldrb r0, [sb, #9]
	add r7, r7, #1
	cmp r7, r0
	blo _02069C38
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02069CA0: .word 0x02091018

	arm_func_start FUN_02069ca4
FUN_02069ca4: ; 0x02069CA4
	push {r4, lr}
	mov r4, r0
	ldr r0, [r1, #8]
	ldr ip, [r1]
	ldrh r1, [r0, #4]
	cmp ip, r1, lsl #12
	lsl r1, r1, #0xc
	subge ip, r1, #1
	bge _02069CD0
	cmp ip, #0
	movlt ip, #0
	arm_func_end FUN_02069ca4
_02069CD0:
	lsl r1, r2, #0x10
	mov r3, r4
	lsr r1, r1, #0x10
	asr r2, ip, #0xc
	bl FUN_02069adc
	ldr r1, [r4, #0x10]
	ldr r0, [r4]
	bic r1, r1, #0xc0000000
	orr r1, r1, #0x40000000
	orr r0, r0, #8
	str r1, [r4, #0x10]
	str r0, [r4]
	pop {r4, pc}

	arm_func_start FUN_02069d04
FUN_02069d04: ; 0x02069D04
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, r0
	cmp r2, #0
	ldrne r0, [r2, #8]
	mov sb, r1
	cmpne r0, #0
	addne r8, r2, r0
	ldr r0, _02069DD0 ; =0x0209101C
	mov r7, #0
	ldr r1, [r0]
	mov r0, r7
	str r1, [sl, #0xc]
	ldrb r2, [r2, #0x18]
	add r1, sl, #0x1a
	moveq r8, #0
	strb r2, [sl, #0x19]
	str sb, [sl, #8]
	lsl r2, r2, #1
	bl FUN_02007804
	ldrb r0, [sb, #0xd]
	cmp r0, #0
	popls {r4, r5, r6, r7, r8, sb, sl, pc}
	add r6, sb, #0xc
	mov r5, r7
	mvn r4, #0
	arm_func_end FUN_02069d04
_02069D68:
	cmp r6, #0
	beq _02069D94
	ldrb r0, [sb, #0xd]
	cmp r7, r0
	bhs _02069D94
	ldrh r0, [sb, #0x12]
	add r1, r6, r0
	ldrh r0, [r1, #2]
	add r0, r1, r0
	add r1, r0, r7, lsl #4
	b _02069D98
_02069D94:
	mov r1, r5
_02069D98:
	cmp r8, #0
	moveq r0, r4
	beq _02069DAC
	add r0, r8, #4
	bl FUN_02067c64
_02069DAC:
	cmp r0, #0
	orrge r1, r7, #0x100
	addge r0, sl, r0, lsl #1
	strhge r1, [r0, #0x1a]
	ldrb r0, [sb, #0xd]
	add r7, r7, #1
	cmp r7, r0
	blo _02069D68
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02069DD0: .word 0x0209101C

	arm_func_start FUN_02069dd4
FUN_02069dd4: ; 0x02069DD4
	push {r3, r4, r5, lr}
	movs r5, r0
	mov r4, r2
	moveq r0, #0
	beq _02069DF0
	add r0, r5, #0x3c
	bl FUN_02067aa8
	arm_func_end FUN_02069dd4
_02069DF0:
	ldr r1, [r0]
	ldr r3, [r4, #0x10]
	and r1, r1, #0x1c000000
	cmp r1, #0x14000000
	ldrne r1, [r5, #8]
	ldr r2, _02069EA0 ; =0x000007FF
	ldreq r1, [r5, #0x18]
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bic r5, r1, #0xe0000000
	ldr r1, _02069EA4 ; =0xC00F0000
	and r3, r3, r1
	str r3, [r4, #0x10]
	ldr r1, [r0]
	add r1, r1, r5
	orr r1, r3, r1
	str r1, [r4, #0x10]
	ldr r1, [r0, #4]
	and r1, r1, r2
	strh r1, [r4, #0x2c]
	ldr r3, [r0, #4]
	and r3, r3, r2, lsl #11
	lsr r3, r3, #0xb
	strh r3, [r4, #0x2e]
	ldr r0, [r0, #4]
	and r3, r0, r2
	and r0, r0, r2, lsl #11
	cmp r3, r1
	lsr r5, r0, #0xb
	moveq r0, #0x1000
	beq _02069E78
	lsl r0, r3, #0xc
	lsl r1, r1, #0xc
	bl FUN_0200958c
_02069E78:
	ldrh r1, [r4, #0x2e]
	str r0, [r4, #0x30]
	cmp r5, r1
	moveq r0, #0x1000
	beq _02069E98
	lsl r0, r5, #0xc
	lsl r1, r1, #0xc
	bl FUN_0200958c
_02069E98:
	str r0, [r4, #0x34]
	pop {r3, r4, r5, pc}
	.align 2, 0_02069EA0: .word 0x000007FF
_02069EA4: .word 0xC00F0000

	arm_func_start FUN_02069ea8
FUN_02069ea8: ; 0x02069EA8
	push {r3, r4, r5, lr}
	movs r5, r0
	ldrhne r0, [r5, #0x34]
	mov r4, r2
	cmpne r0, #0
	moveq r0, #0
	beq _02069ECC
	add r0, r5, r0
	bl FUN_02067aa8
	arm_func_end FUN_02069ea8
_02069ECC:
	ldr r1, [r5, #0x2c]
	ldrh r2, [r0, #2]
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bic r1, r1, #0xe0000000
	lsl r1, r1, #0x10
	ldrh r0, [r0]
	tst r2, #1
	lsr r1, r1, #0x10
	lsleq r0, r0, #0xf
	lsleq r1, r1, #0xf
	lsreq r0, r0, #0x10
	lsreq r1, r1, #0x10
	add r0, r0, r1
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02069f0c
FUN_02069f0c: ; 0x02069F0C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldr r4, [r5, #8]
	ldr r3, [r5]
	ldrh r1, [r4, #4]
	mov r6, r0
	lsl r0, r1, #0xc
	cmp r3, r1, lsl #12
	subge r3, r0, #1
	bge _02069F3C
	cmp r3, #0
	movlt r3, #0
	arm_func_end FUN_02069f0c
_02069F3C:
	lsl r1, r2, #0x10
	lsl r2, r3, #4
	mov r0, r4
	lsr r1, r1, #0x10
	lsr r2, r2, #0x10
	bl FUN_02067ec4
	mov r7, r0
	ldrb r1, [r7, #2]
	mov r0, r4
	bl FUN_02067e74
	mov r1, r0
	ldr r0, [r5, #0x14]
	mov r2, r6
	bl FUN_02069dd4
	ldrb r1, [r7, #3]
	cmp r1, #0xff
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	bl FUN_02067e9c
	mov r1, r0
	ldr r0, [r5, #0x14]
	mov r2, r6
	bl FUN_02069ea8
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start LAB_02069f9c
LAB_02069f9c: ; 0x02069F9C
	ldr r3, _02069FE0 ; =0x02091010
	ldrb r2, [r2, #0x17]
	ldr r3, [r3]
	mov ip, #0
	str r3, [r0, #0xc]
	strb r2, [r0, #0x19]
	str r1, [r0, #8]
	tst r2, #0xff
	bxeq lr
	arm_func_end LAB_02069f9c
_02069FC0:
	orr r2, ip, #0x100
	add r1, r0, ip, lsl #1
	strh r2, [r1, #0x1a]
	ldrb r1, [r0, #0x19]
	add ip, ip, #1
	cmp ip, r1
	blo _02069FC0
	bx lr
	.align 2, 0_02069FE0: .word 0x02091010

	arm_func_start FUN_02069fe4
FUN_02069fe4: ; 0x02069FE4
	push {r3, lr}
	ldr lr, [r1, #8]
	ldr r3, [r1]
	ldrh r1, [lr, #4]
	cmp r3, r1, lsl #12
	lsl r1, r1, #0xc
	subge r3, r1, #1
	bge _0206A00C
	cmp r3, #0
	movlt r3, #0
	arm_func_end FUN_02069fe4
_0206A00C:
	ldrh r1, [lr, #6]
	asr ip, r3, #0xc
	mov r3, #1
	mla r2, ip, r1, r2
	lsr r1, r2, #5
	add r1, lr, r1, lsl #2
	ldr r1, [r1, #0xc]
	and r2, r2, #0x1f
	and r1, r1, r3, lsl r2
	str r1, [r0]
	pop {r3, pc}

	arm_func_start FUN_0206a038
FUN_0206a038: ; 0x0206A038
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	tst r0, #4
	bne _0206A074
	tst r0, #2
	bne _0206A064
	add r1, r4, #0x28
	mov r0, #0x19
	mov r2, #0xc
	b _0206A088
	arm_func_end FUN_0206a038
_0206A064:
	add r1, r4, #0x4c
	mov r0, #0x1c
	mov r2, #3
	b _0206A088
_0206A074:
	tst r0, #2
	bne _0206A08C
	add r1, r4, #0x28
	mov r0, #0x1a
	mov r2, #9
_0206A088:
	bl FUN_020672b4
_0206A08C:
	ldr r0, [r4]
	tst r0, #1
	popne {r4, pc}
	add r1, r4, #4
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020672b4
	pop {r4, pc}

	arm_func_start FUN_0206a0ac
FUN_0206a0ac: ; 0x0206A0AC
	tst r3, #4
	ldrne r1, [r0]
	orrne r1, r1, #1
	strne r1, [r0]
	bne _0206A0D8
	ldr r3, [r1]
	ldr r2, [r1, #4]
	ldr r1, [r1, #8]
	str r3, [r0, #4]
	str r2, [r0, #8]
	str r1, [r0, #0xc]
	arm_func_end FUN_0206a0ac
_0206A0D8:
	ldr r1, [r0]
	orr r1, r1, #0x18
	str r1, [r0]
	bx lr

	arm_func_start FUN_0206a0e8
FUN_0206a0e8: ; 0x0206A0E8
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, [r5]
	mov r4, #0
	tst r0, #4
	moveq r4, #1
	tst r0, #0x20
	beq _0206A13C
	tst r0, #8
	bne _0206A13C
	cmp r4, #0
	beq _0206A12C
	add r1, r5, #0x4c
	mov r0, #0x1c
	mov r2, #3
	bl FUN_020672b4
	mov r4, #0
	arm_func_end FUN_0206a0e8
_0206A12C:
	add r1, r5, #0x10
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020672b4
_0206A13C:
	ldr r0, [r5]
	tst r0, #2
	bne _0206A16C
	cmp r4, #0
	add r1, r5, #0x28
	beq _0206A160
	mov r0, #0x19
	mov r2, #0xc
	b _0206A180
_0206A160:
	mov r0, #0x1a
	mov r2, #9
	b _0206A180
_0206A16C:
	cmp r4, #0
	beq _0206A184
	add r1, r5, #0x4c
	mov r0, #0x1c
	mov r2, #3
_0206A180:
	bl FUN_020672b4
_0206A184:
	ldr r0, [r5]
	tst r0, #1
	popne {r3, r4, r5, pc}
	add r1, r5, #4
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020672b4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206a1a4
FUN_0206a1a4: ; 0x0206A1A4
	push {r3, r4, r5, r6, r7, lr}
	mov lr, r0
	tst r3, #4
	ldrb ip, [r2, #3]
	beq _0206A1F8
	ldr r0, [lr]
	tst ip, #2
	orr r0, r0, #1
	str r0, [lr]
	beq _0206A270
	ldr r0, _0206A2DC ; =0x020B703C
	ldrb r6, [r2, #1]
	ldr r0, [r0]
	mov r1, #1
	add r5, r0, #0xc4
	lsr r4, r6, #5
	ldr r3, [r5, r4, lsl #2]
	and r0, r6, #0x1f
	orr r0, r3, r1, lsl r0
	str r0, [r5, r4, lsl #2]
	b _0206A270
	arm_func_end FUN_0206a1a4
_0206A1F8:
	ldr r4, [r1]
	ldr r3, [r1, #4]
	ldr r0, [r1, #8]
	str r4, [lr, #4]
	str r3, [lr, #8]
	str r0, [lr, #0xc]
	tst ip, #2
	beq _0206A270
	ldr r0, _0206A2DC ; =0x020B703C
	ldrb r7, [r2, #1]
	ldr r0, [r0]
	mov r4, #0x18
	add r3, r0, #0xc4
	lsr r0, r7, #5
	and r5, r7, #0x1f
	mov r6, #1
	mvn r5, r6, lsl r5
	ldr r6, [r3, r0, lsl #2]
	smulbb r7, r7, r4
	and r4, r6, r5
	ldr r6, [r1, #0xc]
	ldr r5, _0206A2E0 ; =0x020B7E4C
	str r4, [r3, r0, lsl #2]
	ldr r4, [r1, #0x10]
	ldr r3, _0206A2E4 ; =0x020B7E50
	str r6, [r5, r7]
	ldr r1, [r1, #0x14]
	ldr r0, _0206A2E8 ; =0x020B7E54
	str r4, [r3, r7]
	str r1, [r0, r7]
_0206A270:
	tst ip, #1
	beq _0206A2CC
	ldr r0, [lr]
	ldrb r4, [r2, #2]
	orr r3, r0, #0x20
	ldr r0, _0206A2DC ; =0x020B703C
	str r3, [lr]
	ldr r1, [r0]
	lsr r0, r4, #5
	add r0, r1, r0, lsl #2
	ldr r0, [r0, #0xc4]
	and r1, r4, #0x1f
	mov r2, #1
	tst r0, r2, lsl r1
	orrne r0, r3, #8
	strne r0, [lr]
	bne _0206A2CC
	ldr r1, _0206A2E0 ; =0x020B7E4C
	mov r0, #0x18
	mla r0, r4, r0, r1
	add r3, lr, #0x10
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
_0206A2CC:
	ldr r0, [lr]
	orr r0, r0, #0x10
	str r0, [lr]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0206A2DC: .word 0x020B703C
_0206A2E0: .word 0x020B7E4C
_0206A2E4: .word 0x020B7E50
_0206A2E8: .word 0x020B7E54

	arm_func_start FUN_0206a2ec
FUN_0206a2ec: ; 0x0206A2EC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_02009694
	ldrsh r0, [sb, #0x20]
	ldr r3, [sb, #0x18]
	ldrsh r5, [sb, #0x22]
	ldr r4, [sb, #0x1c]
	smull r2, r1, r3, r0
	lsr r7, r2, #0xc
	orr r7, r7, r1, lsl #20
	smull r2, r1, r3, r5
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	smull r3, r2, r4, r0
	smull r1, r0, r4, r5
	lsr r5, r3, #0xc
	orr r5, r5, r2, lsl #20
	lsr r4, r1, #0xc
	orr r4, r4, r0, lsl #20
	str r6, [sl]
	str r4, [sl, #0x14]
	bl FUN_02009604
	mov r1, fp
	rsb r2, r5, #0
	mul r0, r2, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	bl FUN_02009694
	sub r0, r5, r4
	add r1, r7, r6
	ldr r5, [sb, #0x18]
	ldrh r4, [sb, #0x2c]
	sub r2, r5, r1
	ldr r1, [sb, #0x24]
	mul r3, r4, r2
	smull r2, r1, r5, r1
	lsr r2, r2, #8
	orr r2, r2, r1, lsl #24
	mul r1, r4, r2
	rsb r1, r1, r3, lsl #3
	str r1, [sl, #0x30]
	ldr r4, [sb, #0x1c]
	ldrh r3, [sb, #0x2e]
	sub r0, r0, r4
	add r0, r0, #0x2000
	mul r2, r3, r0
	ldr r0, [sb, #0x28]
	smull r1, r0, r4, r0
	lsr r1, r1, #8
	orr r1, r1, r0, lsl #24
	mul r0, r3, r1
	add r0, r0, r2, lsl #3
	str r0, [sl, #0x34]
	bl FUN_02009604
	mul r0, r7, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0206a2ec

	arm_func_start FUN_0206a3f4
FUN_0206a3f4: ; 0x0206A3F4
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_02009694
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	str r0, [r6, #0x14]
	bl FUN_02009604
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	rsb r2, r2, #0
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_02009694
	ldrsh r2, [r5, #0x20]
	ldrsh r1, [r5, #0x22]
	ldrh ip, [r5, #0x2c]
	ldr r0, [r5, #0x24]
	add r3, r2, r1
	sub r1, r2, r1
	rsb r2, r3, #0
	add r4, r2, #0x1000
	mul r2, r0, ip
	ldrh r3, [r5, #0x2e]
	mul r4, ip, r4
	ldr r0, [r5, #0x28]
	lsl r2, r2, #4
	rsb r4, r2, r4, lsl #3
	add r2, r1, #0x1000
	mul r1, r0, r3
	mul r2, r3, r2
	lsl r0, r1, #4
	add r0, r0, r2, lsl #3
	str r4, [r6, #0x30]
	str r0, [r6, #0x34]
	bl FUN_02009604
	ldrsh r1, [r5, #0x20]
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0206a3f4

	arm_func_start FUN_0206a4b8
FUN_0206a4b8: ; 0x0206A4B8
	push {r4, r5, r6, r7, r8, lr}
	ldr r3, [r1, #0x1c]
	ldr ip, [r1, #0x18]
	ldr r4, [r1, #0x24]
	ldr r2, [r1, #0x28]
	smull r7, r6, ip, r4
	smull r5, r4, r3, r2
	mov r2, #0
	lsl lr, r3, #1
	lsr r7, r7, #8
	rsb lr, lr, #0
	lsr r5, r5, #8
	orr r7, r7, r6, lsl #24
	ldrh r6, [r1, #0x2e]
	add lr, lr, #0x2000
	orr r5, r5, r4, lsl #24
	ldrh r8, [r1, #0x2c]
	rsb r7, r7, #0
	mul r4, r6, lr
	mul r1, r6, r5
	mul r5, r8, r7
	add r1, r1, r4, lsl #3
	str ip, [r0]
	str r3, [r0, #0x14]
	str r2, [r0, #4]
	str r5, [r0, #0x30]
	str r1, [r0, #0x34]
	str r2, [r0, #0x10]
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0206a4b8

	arm_func_start FUN_0206a52c
FUN_0206a52c: ; 0x0206A52C
	push {r3, lr}
	ldrh r3, [r1, #0x2c]
	ldr ip, [r1, #0x24]
	ldrh r2, [r1, #0x2e]
	ldr r1, [r1, #0x28]
	mul r3, ip, r3
	mov lr, #0x1000
	mov ip, #0
	mul r2, r1, r2
	rsb r1, r3, #0
	lsl r3, r1, #4
	lsl r1, r2, #4
	str lr, [r0]
	str lr, [r0, #0x14]
	str ip, [r0, #4]
	str r3, [r0, #0x30]
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	pop {r3, pc}
	arm_func_end FUN_0206a52c

	arm_func_start FUN_0206a578
FUN_0206a578: ; 0x0206A578
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_02009694
	ldrsh r0, [sb, #0x20]
	ldr r3, [sb, #0x18]
	ldrsh r5, [sb, #0x22]
	ldr r4, [sb, #0x1c]
	smull r2, r1, r3, r0
	lsr r7, r2, #0xc
	orr r7, r7, r1, lsl #20
	smull r2, r1, r3, r5
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	smull r3, r2, r4, r0
	smull r1, r0, r4, r5
	lsr r5, r3, #0xc
	orr r5, r5, r2, lsl #20
	lsr r4, r1, #0xc
	orr r4, r4, r0, lsl #20
	str r6, [sl]
	str r4, [sl, #0x14]
	bl FUN_02009604
	mov r1, fp
	rsb r2, r5, #0
	mul r0, r2, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	bl FUN_02009694
	sub r1, r5, r4
	add r0, r7, r6
	ldrh r4, [sb, #0x2c]
	ldr r3, [sb, #0x18]
	ldrh r2, [sb, #0x2e]
	sub r0, r3, r0
	mul r0, r4, r0
	lsl r0, r0, #3
	str r0, [sl, #0x30]
	ldr r0, [sb, #0x1c]
	sub r0, r1, r0
	add r0, r0, #0x2000
	mul r0, r2, r0
	lsl r0, r0, #3
	str r0, [sl, #0x34]
	bl FUN_02009604
	mul r0, r7, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0206a578

	arm_func_start FUN_0206a658
FUN_0206a658: ; 0x0206A658
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_02009694
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	str r0, [r6, #0x14]
	bl FUN_02009604
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	rsb r2, r2, #0
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_02009694
	ldrsh r2, [r5, #0x20]
	ldrsh r0, [r5, #0x22]
	ldrh r4, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	add r3, r2, r0
	sub r0, r2, r0
	rsb r2, r3, #0
	add r2, r2, #0x1000
	add r0, r0, #0x1000
	mul r2, r4, r2
	mul r0, r1, r0
	lsl r1, r2, #3
	lsl r0, r0, #3
	str r1, [r6, #0x30]
	str r0, [r6, #0x34]
	bl FUN_02009604
	ldrsh r1, [r5, #0x20]
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0206a658

	arm_func_start FUN_0206a704
FUN_0206a704: ; 0x0206A704
	push {r4, lr}
	ldr lr, [r1, #0x1c]
	ldrh r3, [r1, #0x2e]
	lsl r2, lr, #1
	rsb r2, r2, #0
	add r2, r2, #0x2000
	ldr r4, [r1, #0x18]
	mul r1, r3, r2
	mov ip, #0
	str lr, [r0, #0x14]
	stm r0, {r4, ip}
	lsl r1, r1, #3
	str ip, [r0, #0x30]
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	pop {r4, pc}
	arm_func_end FUN_0206a704

	arm_func_start FUN_0206a744
FUN_0206a744: ; 0x0206A744
	mov r1, #0
	mov r2, #0x1000
	str r2, [r0]
	str r1, [r0, #4]
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_0206a744

	arm_func_start FUN_0206a768
FUN_0206a768: ; 0x0206A768
	push {r4, r5, lr}
	sub sp, sp, #0x4c
	mov r4, r0
	ldr r0, [r4]
	mov r5, #0
	tst r0, #8
	ldrne r0, _0206A894 ; =0x00101610
	ldr r1, [r4]
	strne r0, [sp]
	ldreq r0, _0206A898 ; =0x00101810
	and r1, r1, #7
	streq r0, [sp]
	ldr r0, _0206A89C ; =0x02091228
	mov lr, #3
	ldr r2, [r0, r1, lsl #2]
	mov ip, #2
	mov r3, #0x1000
	add r0, sp, #8
	mov r1, r4
	str lr, [sp, #4]
	str ip, [sp, #0x48]
	str r5, [sp, #0x40]
	str r5, [sp, #0x34]
	str r5, [sp, #0x30]
	str r5, [sp, #0x2c]
	str r5, [sp, #0x28]
	str r5, [sp, #0x24]
	str r5, [sp, #0x20]
	str r5, [sp, #0x14]
	str r5, [sp, #0x10]
	str r3, [sp, #0x44]
	blx r2
	ldr r5, [r4, #0x30]
	cmp r5, #0x1000
	beq _0206A830
	ldr r2, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x38]
	smull lr, ip, r5, r2
	smull r3, r2, r5, r1
	smull r1, r0, r5, r0
	lsr lr, lr, #0xc
	lsr r3, r3, #0xc
	lsr r1, r1, #0xc
	orr lr, lr, ip, lsl #20
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	str lr, [sp, #8]
	str r3, [sp, #0xc]
	str r1, [sp, #0x38]
	arm_func_end FUN_0206a768
_0206A830:
	ldr lr, [r4, #0x34]
	cmp lr, #0x1000
	beq _0206A878
	ldr r2, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x3c]
	smull ip, r4, lr, r2
	smull r3, r2, lr, r1
	smull r1, r0, lr, r0
	lsr ip, ip, #0xc
	lsr r3, r3, #0xc
	lsr r1, r1, #0xc
	orr ip, ip, r4, lsl #20
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	str ip, [sp, #0x18]
	str r3, [sp, #0x1c]
	str r1, [sp, #0x3c]
_0206A878:
	add r1, sp, #0
	ldr r0, [sp]
	add r1, r1, #4
	mov r2, #0x12
	bl FUN_020672b4
	add sp, sp, #0x4c
	pop {r4, r5, pc}
	.align 2, 0_0206A894: .word 0x00101610
_0206A898: .word 0x00101810
_0206A89C: .word 0x02091228

	arm_func_start FUN_0206a8a0
FUN_0206a8a0: ; 0x0206A8A0
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #0xc
	mov r6, r0
	ldr r0, [r6]
	mov r4, #0
	ands r5, r0, #0x18
	bne _0206A8CC
	add r1, r6, #0x1c
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020672b4
	arm_func_end FUN_0206a8a0
_0206A8CC:
	ldr r0, [r6]
	tst r0, #4
	bne _0206A93C
	cmp r5, #0
	movne r4, #1
	bne _0206A93C
	ldr r3, [r6, #0x4c]
	ldr r2, [r6, #0x10]
	ldr r1, [r6, #0x50]
	smull ip, lr, r3, r2
	ldr r0, [r6, #0x14]
	lsr ip, ip, #0xc
	smull r2, r0, r1, r0
	lsr r3, r2, #0xc
	orr r3, r3, r0, lsl #20
	orr ip, ip, lr, lsl #20
	ldr r2, [r6, #0x54]
	ldr r0, [r6, #0x18]
	add r1, sp, #0
	smull lr, r0, r2, r0
	lsr lr, lr, #0xc
	orr lr, lr, r0, lsl #20
	mov r0, #0x1c
	mov r2, #3
	str ip, [sp]
	str r3, [sp, #4]
	str lr, [sp, #8]
	bl FUN_020672b4
_0206A93C:
	ldr r0, [r6]
	tst r0, #2
	bne _0206A96C
	cmp r4, #0
	add r1, r6, #0x28
	beq _0206A960
	mov r0, #0x19
	mov r2, #0xc
	b _0206A980
_0206A960:
	mov r0, #0x1a
	mov r2, #9
	b _0206A980
_0206A96C:
	cmp r4, #0
	beq _0206A984
	add r1, r6, #0x4c
	mov r0, #0x1c
	mov r2, #3
_0206A980:
	bl FUN_020672b4
_0206A984:
	cmp r5, #0
	bne _0206A99C
	add r1, r6, #0x10
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020672b4
_0206A99C:
	ldr r0, [r6]
	tst r0, #1
	addne sp, sp, #0xc
	popne {r3, r4, r5, r6, pc}
	add r1, r6, #4
	mov r0, #0x1b
	mov r2, #3
	bl FUN_020672b4
	add sp, sp, #0xc
	pop {r3, r4, r5, r6, pc}

	arm_func_start FUN_0206a9c4
FUN_0206a9c4: ; 0x0206A9C4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r5, r0
	tst r3, #4
	ldrb r4, [r2, #1]
	ldrb r0, [r2, #2]
	beq _0206AA64
	ldr r2, [r5]
	ldr r1, _0206ABBC ; =0x020B703C
	orr r2, r2, #1
	str r2, [r5]
	ldr r3, [r1]
	lsr r1, r0, #5
	add r1, r3, r1, lsl #2
	ldr r1, [r1, #0xc4]
	and r2, r0, #0x1f
	mov r6, #1
	tst r1, r6, lsl r2
	beq _0206AA34
	add r3, r3, #0xc4
	lsr r2, r4, #5
	ldr r1, [r3, r2, lsl #2]
	and r0, r4, #0x1f
	orr r0, r1, r6, lsl r0
	str r0, [r3, r2, lsl #2]
	ldr r0, [r5]
	orr r0, r0, #0x18
	str r0, [r5]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0206a9c4
_0206AA34:
	mov r6, #0x18
	ldr r8, _0206ABC0 ; =0x020B7E40
	mul r7, r0, r6
	mla r1, r4, r6, r8
	mov r2, r6
	add r0, r8, r7
	bl FUN_0200784c
	mov r2, r6
	add r0, r8, r7
	add r1, r5, #0x10
	bl FUN_0200784c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0206AA64:
	ldr sl, [r1]
	ldr sb, [r1, #4]
	ldr r8, [r1, #8]
	ldr r6, _0206ABBC ; =0x020B703C
	str sl, [r5, #4]
	str sb, [r5, #8]
	str r8, [r5, #0xc]
	ldr r3, [r6]
	lsr r2, r0, #5
	add r2, r3, r2, lsl #2
	ldr r7, [r2, #0xc4]
	and fp, r0, #0x1f
	mov r2, #1
	tst r7, r2, lsl fp
	mov r2, #0x18
	beq _0206AAE8
	ldr r3, _0206ABC0 ; =0x020B7E40
	mov r0, r1
	mla r1, r4, r2, r3
	bl FUN_0200784c
	ldr r0, [r6]
	and r1, r4, #0x1f
	add r3, r0, #0xc4
	mov r0, #1
	lsr r2, r4, #5
	mvn r0, r0, lsl r1
	ldr r1, [r3, r2, lsl #2]
	and r0, r1, r0
	str r0, [r3, r2, lsl #2]
	ldr r0, [r5]
	orr r0, r0, #0x18
	str r0, [r5]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0206AAE8:
	mul ip, r0, r2
	add r7, r3, #0xc4
	lsr r6, r4, #5
	and r0, r4, #0x1f
	mov r3, #1
	mvn r0, r3, lsl r0
	ldr lr, [r7, r6, lsl #2]
	ldr fp, _0206ABC0 ; =0x020B7E40
	and r0, lr, r0
	str r0, [r7, r6, lsl #2]
	ldr r0, [fp, ip]
	mul r3, r4, r2
	smull r4, r0, sl, r0
	lsr r4, r4, #0xc
	orr r4, r4, r0, lsl #20
	str r4, [fp, r3]
	ldr r6, _0206ABC4 ; =0x020B7E44
	ldr r4, _0206ABC8 ; =0x020B7E48
	ldr r0, [r6, ip]
	smull r7, r0, sb, r0
	lsr r7, r7, #0xc
	orr r7, r7, r0, lsl #20
	str r7, [r6, r3]
	ldr r0, [r4, ip]
	ldr r6, _0206ABCC ; =0x020B7E4C
	smull r7, r0, r8, r0
	lsr r7, r7, #0xc
	orr r7, r7, r0, lsl #20
	str r7, [r4, r3]
	ldr r7, [r1, #0xc]
	ldr r0, [r6, ip]
	ldr r4, _0206ABD0 ; =0x020B7E50
	smull r8, r0, r7, r0
	lsr r7, r8, #0xc
	orr r7, r7, r0, lsl #20
	str r7, [r6, r3]
	ldr r6, [r1, #0x10]
	ldr r0, [r4, ip]
	ldr r7, [r1, #0x14]
	smull r1, r0, r6, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [r4, r3]
	ldr r6, _0206ABD4 ; =0x020B7E54
	add r1, r5, #0x10
	ldr r4, [r6, ip]
	add r0, fp, ip
	smull r5, r4, r7, r4
	lsr r5, r5, #0xc
	orr r5, r5, r4, lsl #20
	str r5, [r6, r3]
	bl FUN_0200784c
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0206ABBC: .word 0x020B703C
_0206ABC0: .word 0x020B7E40
_0206ABC4: .word 0x020B7E44
_0206ABC8: .word 0x020B7E48
_0206ABCC: .word 0x020B7E4C
_0206ABD0: .word 0x020B7E50
_0206ABD4: .word 0x020B7E54

	arm_func_start FUN_0206abd8
FUN_0206abd8: ; 0x0206ABD8
	push {r4, r5, lr}
	sub sp, sp, #0x3c
	ldr r1, [r0]
	mov r2, #0
	tst r1, #8
	ldrne r1, _0206AD80 ; =0x00101710
	mov r4, #3
	strne r1, [sp]
	ldreq r1, _0206AD84 ; =0x00101910
	mov r3, #2
	streq r1, [sp]
	ldr r1, [r0]
	str r4, [sp, #4]
	str r3, [sp, #0x38]
	str r2, [sp, #0x34]
	str r2, [sp, #0x28]
	str r2, [sp, #0x24]
	str r2, [sp, #0x20]
	str r2, [sp, #0x1c]
	str r2, [sp, #0x14]
	str r2, [sp, #0x10]
	str r2, [sp, #0xc]
	tst r1, #4
	beq _0206AC64
	tst r1, #1
	movne r1, #0x1000
	str r2, [sp, #0x2c]
	str r2, [sp, #0x30]
	strne r1, [sp, #8]
	strne r1, [sp, #0x18]
	ldreq r2, [r0, #0x18]
	ldreq r1, [r0, #0x1c]
	streq r2, [sp, #8]
	streq r1, [sp, #0x18]
	b _0206ACFC
	arm_func_end FUN_0206abd8
_0206AC64:
	tst r1, #1
	beq _0206ACAC
	ldr r2, [r0, #0x24]
	ldr r1, [r0, #0x28]
	lsl r2, r2, #4
	lsl r1, r1, #4
	ldrh r4, [r0, #0x2c]
	rsb r5, r2, #0
	ldrh r2, [r0, #0x2e]
	rsb r3, r1, #0
	mul r4, r5, r4
	mov r1, #0x1000
	mul r2, r3, r2
	str r4, [sp, #0x2c]
	str r2, [sp, #0x30]
	str r1, [sp, #8]
	str r1, [sp, #0x18]
	b _0206ACFC
_0206ACAC:
	ldr lr, [r0, #0x18]
	ldr r3, [r0, #0x24]
	ldr r2, [r0, #0x1c]
	ldr r1, [r0, #0x28]
	smull r4, ip, lr, r3
	smull r3, r1, r2, r1
	lsr r4, r4, #8
	lsr r3, r3, #8
	orr r4, r4, ip, lsl #24
	orr r3, r3, r1, lsl #24
	ldrh r5, [r0, #0x2c]
	rsb r4, r4, #0
	ldrh ip, [r0, #0x2e]
	rsb r1, r3, #0
	mul r3, r5, r4
	mul r1, ip, r1
	str r3, [sp, #0x2c]
	str r1, [sp, #0x30]
	str lr, [sp, #8]
	str r2, [sp, #0x18]
_0206ACFC:
	ldr lr, [r0, #0x30]
	cmp lr, #0x1000
	beq _0206AD30
	ldr r2, [sp, #8]
	ldr r1, [sp, #0x2c]
	smull ip, r3, lr, r2
	smull r2, r1, lr, r1
	lsr ip, ip, #0xc
	lsr r2, r2, #0xc
	orr ip, ip, r3, lsl #20
	orr r2, r2, r1, lsl #20
	str ip, [sp, #8]
	str r2, [sp, #0x2c]
_0206AD30:
	ldr ip, [r0, #0x34]
	cmp ip, #0x1000
	beq _0206AD64
	ldr r1, [sp, #0x18]
	ldr r0, [sp, #0x30]
	smull r3, r2, ip, r1
	smull r1, r0, ip, r0
	lsr r3, r3, #0xc
	lsr r1, r1, #0xc
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	str r3, [sp, #0x18]
	str r1, [sp, #0x30]
_0206AD64:
	add r1, sp, #0
	ldr r0, [sp]
	add r1, r1, #4
	mov r2, #0xe
	bl FUN_020672b4
	add sp, sp, #0x3c
	pop {r4, r5, pc}
	.align 2, 0_0206AD80: .word 0x00101710
_0206AD84: .word 0x00101910

	arm_func_start FUN_0206ad88
FUN_0206ad88: ; 0x0206AD88
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_02009694
	ldrsh r0, [sb, #0x22]
	ldr r3, [sb, #0x18]
	ldrsh r5, [sb, #0x20]
	ldr r4, [sb, #0x1c]
	smull r2, r1, r3, r0
	lsr r7, r2, #0xc
	orr r7, r7, r1, lsl #20
	smull r2, r1, r3, r5
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	smull r3, r2, r4, r0
	smull r1, r0, r4, r5
	lsr r5, r3, #0xc
	orr r5, r5, r2, lsl #20
	lsr r4, r1, #0xc
	orr r4, r4, r0, lsl #20
	str r7, [sl]
	str r5, [sl, #0x14]
	bl FUN_02009604
	mov r1, fp
	mul r0, r4, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	bl FUN_02009694
	ldrh r1, [sb, #0x2c]
	ldrh r0, [sb, #0x2e]
	ldr r3, [sb, #0x28]
	ldr r2, [sb, #0x24]
	mul r8, r3, r0
	mul sb, r2, r1
	rsb r2, r0, #0
	add r8, r8, r2, lsl #11
	smull r3, r2, r5, r8
	smull r8, r5, r6, r8
	rsb fp, r1, #0
	rsb sb, sb, fp, lsl #11
	smlal r3, r2, r4, sb
	smull sb, r4, r7, sb
	subs r7, sb, r8
	sbc r4, r4, r5
	lsr r5, r7, #8
	orr r5, r5, r4, lsl #24
	add r1, r5, r1, lsl #15
	str r1, [sl, #0x30]
	lsr r1, r3, #8
	orr r1, r1, r2, lsl #24
	add r0, r1, r0, lsl #15
	str r0, [sl, #0x34]
	bl FUN_02009604
	rsb r1, r6, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0206ad88

	arm_func_start FUN_0206ae8c
FUN_0206ae8c: ; 0x0206AE8C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_02009694
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	str r0, [r6, #0x14]
	bl FUN_02009604
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_02009694
	ldrh r1, [r5, #0x2e]
	ldr r0, [r5, #0x28]
	ldrh r2, [r5, #0x2c]
	ldr r3, [r5, #0x24]
	mul r4, r0, r1
	rsb r0, r1, #0
	add r0, r4, r0, lsl #11
	ldrsh lr, [r5, #0x22]
	mul r4, r3, r2
	rsb r3, r2, #0
	rsb sb, r4, r3, lsl #11
	ldrsh ip, [r5, #0x20]
	smull r8, r7, lr, sb
	smull r4, r3, lr, r0
	smlal r4, r3, ip, sb
	smull lr, r0, ip, r0
	subs r8, r8, lr
	sbc r0, r7, r0
	lsr r7, r8, #8
	orr r7, r7, r0, lsl #24
	add r0, r7, r2, lsl #15
	str r0, [r6, #0x30]
	lsr r0, r4, #8
	orr r0, r0, r3, lsl #24
	add r0, r0, r1, lsl #15
	str r0, [r6, #0x34]
	bl FUN_02009604
	ldrsh r1, [r5, #0x20]
	rsb r1, r1, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_0206ae8c

	arm_func_start FUN_0206af64
FUN_0206af64: ; 0x0206AF64
	push {r4, r5, r6, lr}
	ldrh r3, [r1, #0x2e]
	ldrh r2, [r1, #0x2c]
	ldr r4, [r1, #0x28]
	ldr r6, [r1, #0x24]
	mul r5, r4, r3
	rsb r4, r3, #0
	ldr lr, [r1, #0x18]
	ldr ip, [r1, #0x1c]
	add r1, r5, r4, lsl #11
	smull r5, r4, ip, r1
	mov r1, #0
	lsr r5, r5, #8
	orr r5, r5, r4, lsl #24
	add r3, r5, r3, lsl #15
	mul r4, r6, r2
	rsb r5, r2, #0
	rsb r4, r4, r5, lsl #11
	smull r5, r4, lr, r4
	lsr r5, r5, #8
	orr r5, r5, r4, lsl #24
	add r2, r5, r2, lsl #15
	str lr, [r0]
	str ip, [r0, #0x14]
	str r1, [r0, #4]
	str r2, [r0, #0x30]
	str r3, [r0, #0x34]
	str r1, [r0, #0x10]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0206af64

	arm_func_start FUN_0206afd8
FUN_0206afd8: ; 0x0206AFD8
	push {r3, lr}
	ldr r2, [r1, #0x24]
	ldrh r3, [r1, #0x2c]
	rsb ip, r2, #0
	ldrh r2, [r1, #0x2e]
	ldr r1, [r1, #0x28]
	mul r3, ip, r3
	mov lr, #0x1000
	mov ip, #0
	mul r2, r1, r2
	lsl r3, r3, #4
	lsl r1, r2, #4
	str lr, [r0]
	str lr, [r0, #0x14]
	str ip, [r0, #4]
	str r3, [r0, #0x30]
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	pop {r3, pc}
	arm_func_end FUN_0206afd8

	arm_func_start FUN_0206b024
FUN_0206b024: ; 0x0206B024
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_02009694
	ldrsh r0, [sb, #0x22]
	ldr r3, [sb, #0x18]
	ldrsh r5, [sb, #0x20]
	ldr r4, [sb, #0x1c]
	smull r2, r1, r3, r0
	lsr r7, r2, #0xc
	orr r7, r7, r1, lsl #20
	smull r2, r1, r3, r5
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	smull r3, r2, r4, r0
	smull r1, r0, r4, r5
	lsr r5, r3, #0xc
	orr r5, r5, r2, lsl #20
	lsr r4, r1, #0xc
	orr r4, r4, r0, lsl #20
	str r7, [sl]
	str r5, [sl, #0x14]
	bl FUN_02009604
	mov r1, fp
	mul r0, r4, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	bl FUN_02009694
	ldrh r8, [sb, #0x2c]
	ldrh r2, [sb, #0x2e]
	rsb r0, r8, #0
	lsl fp, r0, #0xb
	smull r1, r0, r7, fp
	rsb r3, r2, #0
	lsl r3, r3, #0xb
	smull sb, r7, r5, r3
	smlal sb, r7, r4, fp
	lsr r4, sb, #8
	orr r4, r4, r7, lsl #24
	add r2, r4, r2, lsl #15
	str r2, [sl, #0x34]
	smull r3, r2, r6, r3
	subs r1, r1, r3
	sbc r0, r0, r2
	lsr r1, r1, #8
	orr r1, r1, r0, lsl #24
	add r0, r1, r8, lsl #15
	str r0, [sl, #0x30]
	bl FUN_02009604
	rsb r1, r6, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0206b024

	arm_func_start FUN_0206b118
FUN_0206b118: ; 0x0206B118
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_02009694
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	str r0, [r6, #0x14]
	bl FUN_02009604
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_02009694
	ldrh r0, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	ldrsh ip, [r5, #0x22]
	rsb r2, r0, #0
	lsl sb, r2, #0xb
	ldrsh r4, [r5, #0x20]
	rsb r2, r1, #0
	lsl lr, r2, #0xb
	smull r8, r7, ip, lr
	smull r3, r2, ip, sb
	smlal r3, r2, r4, lr
	smull lr, ip, r4, sb
	subs r8, r8, lr
	sbc r4, r7, ip
	lsr r7, r8, #8
	orr r7, r7, r4, lsl #24
	add r1, r7, r1, lsl #15
	str r1, [r6, #0x30]
	lsr r1, r3, #8
	orr r1, r1, r2, lsl #24
	add r0, r1, r0, lsl #15
	str r0, [r6, #0x34]
	bl FUN_02009604
	ldrsh r1, [r5, #0x20]
	rsb r1, r1, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_0206b118

	arm_func_start FUN_0206b1e0
FUN_0206b1e0: ; 0x0206B1E0
	push {r4, lr}
	ldr lr, [r1, #0x1c]
	ldr r4, [r1, #0x18]
	ldrh r3, [r1, #0x2c]
	rsb ip, r4, #0x1000
	ldrh r1, [r1, #0x2e]
	rsb r2, lr, #0x1000
	mul r3, ip, r3
	mul r1, r2, r1
	mov ip, #0
	str lr, [r0, #0x14]
	stm r0, {r4, ip}
	lsl r2, r3, #3
	lsl r1, r1, #3
	str r2, [r0, #0x30]
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	pop {r4, pc}
	arm_func_end FUN_0206b1e0

	arm_func_start FUN_0206b228
FUN_0206b228: ; 0x0206B228
	mov r1, #0
	mov r2, #0x1000
	str r2, [r0]
	str r1, [r0, #4]
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_0206b228

	arm_func_start FUN_0206b24c
FUN_0206b24c: ; 0x0206B24C
	push {r4, r5, lr}
	sub sp, sp, #0x4c
	mov r4, r0
	ldr r0, [r4]
	mov r5, #0
	tst r0, #8
	ldrne r0, _0206B378 ; =0x00101610
	ldr r1, [r4]
	strne r0, [sp]
	ldreq r0, _0206B37C ; =0x00101810
	and r1, r1, #7
	streq r0, [sp]
	ldr r0, _0206B380 ; =0x02091248
	mov lr, #3
	ldr r2, [r0, r1, lsl #2]
	mov ip, #2
	mov r3, #0x1000
	add r0, sp, #8
	mov r1, r4
	str lr, [sp, #4]
	str ip, [sp, #0x48]
	str r5, [sp, #0x40]
	str r5, [sp, #0x34]
	str r5, [sp, #0x30]
	str r5, [sp, #0x2c]
	str r5, [sp, #0x28]
	str r5, [sp, #0x24]
	str r5, [sp, #0x20]
	str r5, [sp, #0x14]
	str r5, [sp, #0x10]
	str r3, [sp, #0x44]
	blx r2
	ldr r5, [r4, #0x30]
	cmp r5, #0x1000
	beq _0206B314
	ldr r2, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x38]
	smull lr, ip, r5, r2
	smull r3, r2, r5, r1
	smull r1, r0, r5, r0
	lsr lr, lr, #0xc
	lsr r3, r3, #0xc
	lsr r1, r1, #0xc
	orr lr, lr, ip, lsl #20
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	str lr, [sp, #8]
	str r3, [sp, #0xc]
	str r1, [sp, #0x38]
	arm_func_end FUN_0206b24c
_0206B314:
	ldr lr, [r4, #0x34]
	cmp lr, #0x1000
	beq _0206B35C
	ldr r2, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x3c]
	smull ip, r4, lr, r2
	smull r3, r2, lr, r1
	smull r1, r0, lr, r0
	lsr ip, ip, #0xc
	lsr r3, r3, #0xc
	lsr r1, r1, #0xc
	orr ip, ip, r4, lsl #20
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	str ip, [sp, #0x18]
	str r3, [sp, #0x1c]
	str r1, [sp, #0x3c]
_0206B35C:
	add r1, sp, #0
	ldr r0, [sp]
	add r1, r1, #4
	mov r2, #0x12
	bl FUN_020672b4
	add sp, sp, #0x4c
	pop {r4, r5, pc}
	.align 2, 0_0206B378: .word 0x00101610
_0206B37C: .word 0x00101810
_0206B380: .word 0x02091248

	arm_func_start FUN_0206b384
FUN_0206b384: ; 0x0206B384
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov r6, r1
	ldrh r2, [r6, #0x2c]
	ldrh r1, [r6, #0x2e]
	mov r7, r0
	lsl sl, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, sl
	bl FUN_02009694
	ldrsh r3, [r6, #0x22]
	ldr r0, [r6, #0x18]
	ldr r8, [r6, #0x1c]
	smull r2, r1, r0, r3
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [r7]
	smull r2, r1, r8, r3
	lsr r4, r2, #0xc
	orr r4, r4, r1, lsl #20
	ldrsh sb, [r6, #0x20]
	str r4, [r7, #0x14]
	smull r2, r1, r0, sb
	lsr r5, r2, #0xc
	orr r5, r5, r1, lsl #20
	bl FUN_02009604
	smull r2, r1, r8, sb
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	mul r0, r2, r0
	asr r0, r0, #0xc
	str r0, [r7, #4]
	mov r0, sl
	mov r1, fp
	bl FUN_02009694
	ldrh r1, [r6, #0x2c]
	ldrh sl, [r6, #0x2e]
	mov r0, r8
	str r1, [sp, #4]
	asr r1, r0, #0x1f
	ldr lr, [r6, #0x28]
	ldr r3, [r6, #0x24]
	str r1, [sp]
	smull r2, r1, r3, sb
	rsb fp, sl, #0
	smull sl, sb, lr, sb
	ldrsh ip, [r6, #0x22]
	ldr r8, [r6, #0x18]
	smlal sl, sb, r3, ip
	smull ip, r3, lr, ip
	subs r2, r2, ip
	sbc r1, r1, r3
	lsr ip, r2, #0xc
	lsr r3, sl, #0xc
	asr sl, r1, #0xc
	orr ip, ip, r1, lsl #20
	ldr r1, [sp]
	asr r2, sb, #0xc
	orr r3, r3, sb, lsl #20
	umull lr, sb, ip, r0
	mla sb, ip, r1, sb
	mla sb, sl, r0, sb
	lsr r0, lr, #0xc
	orr r0, r0, sb, lsl #20
	add r0, r4, r0
	sub r0, r0, #0x1000
	mul r0, fp, r0
	lsl r0, r0, #4
	str r0, [r7, #0x34]
	umull r1, r0, r3, r8
	asr r6, r8, #0x1f
	mla r0, r3, r6, r0
	mla r0, r2, r8, r0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	ldr r0, [sp, #4]
	sub r1, r5, r1
	mul r1, r0, r1
	lsl r0, r1, #4
	str r0, [r7, #0x30]
	bl FUN_02009604
	rsb r1, r5, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r7, #0x10]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0206b384

	arm_func_start FUN_0206b4e4
FUN_0206b4e4: ; 0x0206B4E4
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_02009694
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	str r0, [r6, #0x14]
	bl FUN_02009604
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_02009694
	ldrsh ip, [r5, #0x20]
	ldr r1, [r5, #0x28]
	ldrsh r2, [r5, #0x22]
	ldr r4, [r5, #0x24]
	smull r3, r0, r1, ip
	smlal r3, r0, r4, r2
	lsr r3, r3, #0xc
	orr r3, r3, r0, lsl #20
	sub r0, ip, r3
	smull lr, ip, r4, ip
	smull r4, r3, r1, r2
	subs r4, lr, r4
	sbc r1, ip, r3
	lsr r3, r4, #0xc
	orr r3, r3, r1, lsl #20
	add r1, r2, r3
	ldrh r2, [r5, #0x2e]
	sub r1, r1, #0x1000
	ldrh r3, [r5, #0x2c]
	rsb r2, r2, #0
	mul r1, r2, r1
	mul r0, r3, r0
	lsl r2, r0, #4
	lsl r0, r1, #4
	str r2, [r6, #0x30]
	str r0, [r6, #0x34]
	bl FUN_02009604
	ldrsh r1, [r5, #0x20]
	rsb r1, r1, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0206b4e4

	arm_func_start FUN_0206b5bc
FUN_0206b5bc: ; 0x0206B5BC
	push {r3, r4, r5, r6, r7, lr}
	ldr r2, [r1, #0x28]
	ldr r3, [r1, #0x1c]
	rsb r4, r2, #0
	ldr ip, [r1, #0x18]
	ldr r2, [r1, #0x24]
	smull r7, r6, r4, r3
	smull r5, lr, r2, ip
	lsr r7, r7, #0xc
	mov r2, #0
	ldrh r4, [r1, #0x2e]
	orr r7, r7, r6, lsl #20
	lsr r5, r5, #0xc
	orr r5, r5, lr, lsl #20
	add lr, r3, r7
	ldrh r6, [r1, #0x2c]
	rsb r5, r5, #0
	rsb r4, r4, #0
	sub r1, lr, #0x1000
	mul r5, r6, r5
	mul r1, r4, r1
	lsl r4, r5, #4
	lsl r1, r1, #4
	str ip, [r0]
	str r3, [r0, #0x14]
	str r2, [r0, #4]
	str r4, [r0, #0x30]
	str r1, [r0, #0x34]
	str r2, [r0, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0206b5bc

	arm_func_start FUN_0206b634
FUN_0206b634: ; 0x0206B634
	push {r4, lr}
	ldrh r2, [r1, #0x2e]
	ldr lr, [r1, #0x28]
	ldr r3, [r1, #0x24]
	ldrh ip, [r1, #0x2c]
	rsb r3, r3, #0
	rsb lr, lr, #0
	mul r3, ip, r3
	rsb r1, r2, #0
	mul r2, r1, lr
	mov r4, #0x1000
	mov ip, #0
	str r4, [r0, #0x14]
	stm r0, {r4, ip}
	lsl r3, r3, #4
	lsl r1, r2, #4
	str r3, [r0, #0x30]
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	pop {r4, pc}
	arm_func_end FUN_0206b634

	arm_func_start FUN_0206b684
FUN_0206b684: ; 0x0206B684
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sb, r1
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mov sl, r0
	lsl r8, r2, #0xc
	lsl fp, r1, #0xc
	mov r0, fp
	mov r1, r8
	bl FUN_02009694
	ldrsh r3, [sb, #0x22]
	ldr r0, [sb, #0x18]
	ldrsh r7, [sb, #0x20]
	ldr r5, [sb, #0x1c]
	smull r2, r1, r0, r3
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	str r2, [sl]
	smull r2, r1, r5, r3
	lsr r4, r2, #0xc
	orr r4, r4, r1, lsl #20
	smull r2, r1, r0, r7
	lsr r6, r2, #0xc
	orr r6, r6, r1, lsl #20
	str r4, [sl, #0x14]
	bl FUN_02009604
	smull r2, r1, r5, r7
	lsr r2, r2, #0xc
	orr r2, r2, r1, lsl #20
	mul r0, r2, r0
	asr r0, r0, #0xc
	str r0, [sl, #4]
	mov r0, r8
	mov r1, fp
	bl FUN_02009694
	sub r0, r4, #0x1000
	ldrh r2, [sb, #0x2c]
	ldrh r1, [sb, #0x2e]
	mul r3, r2, r6
	lsl r2, r3, #4
	str r2, [sl, #0x30]
	rsb r1, r1, #0
	mul r0, r1, r0
	lsl r0, r0, #4
	str r0, [sl, #0x34]
	bl FUN_02009604
	rsb r1, r6, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [sl, #0x10]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0206b684

	arm_func_start FUN_0206b750
FUN_0206b750: ; 0x0206B750
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r1
	ldrh r2, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	mov r6, r0
	lsl r4, r2, #0xc
	lsl r7, r1, #0xc
	mov r0, r7
	mov r1, r4
	bl FUN_02009694
	ldrsh r0, [r5, #0x22]
	str r0, [r6]
	str r0, [r6, #0x14]
	bl FUN_02009604
	ldrsh r2, [r5, #0x20]
	mov r1, r7
	mul r0, r2, r0
	asr r2, r0, #0xc
	mov r0, r4
	str r2, [r6, #4]
	bl FUN_02009694
	ldrh r1, [r5, #0x2e]
	ldrsh r0, [r5, #0x22]
	ldrh r3, [r5, #0x2c]
	ldrsh r2, [r5, #0x20]
	rsb r1, r1, #0
	sub r0, r0, #0x1000
	mul r2, r3, r2
	mul r0, r1, r0
	lsl r1, r2, #4
	lsl r0, r0, #4
	str r1, [r6, #0x30]
	str r0, [r6, #0x34]
	bl FUN_02009604
	ldrsh r1, [r5, #0x20]
	rsb r1, r1, #0
	mul r0, r1, r0
	asr r0, r0, #0xc
	str r0, [r6, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0206b750

	arm_func_start FUN_0206b7f0
FUN_0206b7f0: ; 0x0206B7F0
	push {r3, lr}
	ldrh r2, [r1, #0x2e]
	ldr lr, [r1, #0x1c]
	mov ip, #0
	rsb r3, r2, #0
	sub r2, lr, #0x1000
	mul r2, r3, r2
	ldr r3, [r1, #0x18]
	str lr, [r0, #0x14]
	stm r0, {r3, ip}
	lsl r1, r2, #4
	str ip, [r0, #0x30]
	str r1, [r0, #0x34]
	str ip, [r0, #0x10]
	pop {r3, pc}
	arm_func_end FUN_0206b7f0

	arm_func_start FUN_0206b82c
FUN_0206b82c: ; 0x0206B82C
	mov r1, #0
	mov r2, #0x1000
	str r2, [r0]
	str r1, [r0, #4]
	str r1, [r0, #0x10]
	str r2, [r0, #0x14]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_0206b82c

	arm_func_start FUN_0206b850
FUN_0206b850: ; 0x0206B850
	push {r4, r5, lr}
	sub sp, sp, #0x4c
	mov r4, r0
	ldr r0, [r4]
	mov r2, #0
	tst r0, #8
	ldrne r0, _0206B9B8 ; =0x00101610
	mov r1, #0x1000
	strne r0, [sp]
	ldreq r0, _0206B9BC ; =0x00101810
	mov r5, #3
	streq r0, [sp]
	ldr r0, [r4]
	mov r3, #2
	tst r0, #1
	ldr r0, [r4]
	strne r1, [r4, #0x1c]
	strne r1, [r4, #0x18]
	tst r0, #2
	movne r0, #0
	strhne r0, [r4, #0x20]
	str r1, [sp, #0x44]
	movne r1, #0x1000
	strhne r1, [r4, #0x22]
	ldr r0, [r4]
	ldr r1, [r4]
	tst r0, #4
	movne r0, #0
	strne r0, [r4, #0x28]
	strne r0, [r4, #0x24]
	ldr r0, _0206B9C0 ; =0x02091268
	and r1, r1, #7
	str r2, [sp, #0x40]
	str r2, [sp, #0x34]
	str r2, [sp, #0x30]
	str r2, [sp, #0x2c]
	str r2, [sp, #0x28]
	str r2, [sp, #0x24]
	str r2, [sp, #0x20]
	str r2, [sp, #0x14]
	str r2, [sp, #0x10]
	ldr r2, [r0, r1, lsl #2]
	add r0, sp, #8
	mov r1, r4
	str r5, [sp, #4]
	str r3, [sp, #0x48]
	blx r2
	ldr r5, [r4, #0x30]
	cmp r5, #0x1000
	beq _0206B954
	ldr r2, [sp, #8]
	ldr r1, [sp, #0xc]
	ldr r0, [sp, #0x38]
	smull lr, ip, r5, r2
	smull r3, r2, r5, r1
	smull r1, r0, r5, r0
	lsr lr, lr, #0xc
	lsr r3, r3, #0xc
	lsr r1, r1, #0xc
	orr lr, lr, ip, lsl #20
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	str lr, [sp, #8]
	str r3, [sp, #0xc]
	str r1, [sp, #0x38]
	arm_func_end FUN_0206b850
_0206B954:
	ldr lr, [r4, #0x34]
	cmp lr, #0x1000
	beq _0206B99C
	ldr r2, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x3c]
	smull ip, r4, lr, r2
	smull r3, r2, lr, r1
	smull r1, r0, lr, r0
	lsr ip, ip, #0xc
	lsr r3, r3, #0xc
	lsr r1, r1, #0xc
	orr ip, ip, r4, lsl #20
	orr r3, r3, r2, lsl #20
	orr r1, r1, r0, lsl #20
	str ip, [sp, #0x18]
	str r3, [sp, #0x1c]
	str r1, [sp, #0x3c]
_0206B99C:
	add r1, sp, #0
	ldr r0, [sp]
	add r1, r1, #4
	mov r2, #0x12
	bl FUN_020672b4
	add sp, sp, #0x4c
	pop {r4, r5, pc}
	.align 2, 0_0206B9B8: .word 0x00101610
_0206B9BC: .word 0x00101810
_0206B9C0: .word 0x02091268

	arm_func_start FUN_0206b9c4
FUN_0206b9c4: ; 0x0206B9C4
	push {r4, lr}
	mov r4, r0
	bl FUN_0204212c
	ldr r3, _0206B9F0 ; =0x02091290
	ldr r2, [r4, #0x18]
	mov r0, r4
	mov r1, #0
	str r3, [r4]
	bl rwriteat14n18
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0206B9F0: .word 0x02091290
	arm_func_end FUN_0206b9c4

	arm_func_start LAB_0206b9f4
LAB_0206b9f4: ; 0x0206B9F4
	push {r4, lr}
	mov r4, r0
	bl FUN_0204222c
	mov r0, r4
	pop {r4, pc}
	arm_func_end LAB_0206b9f4

	arm_func_start FUN_0206ba08
FUN_0206ba08: ; 0x0206BA08
	push {r4, lr}
	mov r4, r0
	bl FUN_0204222c
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0206ba08

	arm_func_start FUN_0206ba24
FUN_0206ba24: ; 0x0206BA24
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	mov sl, r0
	ldrb r0, [sp, #0x40]
	ldrb r7, [sl, #0x1d]
	ldr r4, [sl, #4]
	and r5, r0, #0xf
	ldr r6, [r4, #8]
	ldr r0, [sp, #0x48]
	ldr r8, [sp, #0x44]
	str r0, [sp, #0x48]
	and r0, r7, #0xf
	mov r7, #0
	str r7, [sp, #0x10]
	strb r0, [sp, #0x17]
	ldr r0, [sp, #0x48]
	ldrb r4, [sl, #0x1c]
	and r5, r5, #0xf
	strb r5, [sp, #0x15]
	and r4, r4, #0xf
	ldrsb r7, [r8]
	ldrsb sb, [r8, #2]
	ldr r8, [sp, #0x4c]
	ldrb r6, [r6]
	sub fp, sb, r7
	str r8, [sp, #0x4c]
	cmp r0, #0
	sub r0, r6, fp
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x4c]
	mov sb, r1
	add r0, r0, r7
	ldr r1, [sp, #0x10]
	str r0, [sp, #0x4c]
	ldr r0, [sp, #0x50]
	mov r8, r2
	strb r1, [sp, #0x14]
	strb r4, [sp, #0x16]
	str r0, [sp, #0x50]
	mov r5, #0xc0
	mov r6, #6
	ble _0206BC10
	ldr r0, [sp, #0x4c]
	asr r1, r3, #3
	tst r0, #1
	lsl r0, r1, #5
	str r0, [sp, #4]
	movne r0, #1
	strne r0, [sp]
	ldreq r0, [sp, #0x10]
	streq r0, [sp]
	arm_func_end FUN_0206ba24
_0206BAF0:
	ldr r1, [sp, #0x10]
	ldr r0, [sp, #0x50]
	cmp fp, #0
	add r2, r1, r0
	ldr r0, [sp, #4]
	asr r1, r2, #3
	mul r1, r0, r1
	lsl r0, r2, #0x1d
	add r0, r1, r0, lsr #27
	str r0, [sp, #8]
	ldr r7, [sp]
	mov r4, #0
	ble _0206BBBC
_0206BB24:
	ldr r0, [sp, #0x4c]
	add r2, r4, r0
	ldr r0, [sp, #8]
	asr r1, r2, #3
	add r1, r0, r1, lsl #5
	and r0, r2, #7
	add r2, r1, r0, asr #1
	ldrb r0, [sb]
	and r0, r0, r5
	asr r1, r0, r6
	cmp r1, #0
	ble _0206BB90
	add r0, sp, #0x14
	ldrb r3, [r0, r1]
	cmp r7, #0
	mov r0, sl
	add r1, r8, r2
	beq _0206BB7C
	ldrb r2, [r8, r2]
	and r2, r2, #0xf
	orr r2, r2, r3, lsl #4
	b _0206BB88
_0206BB7C:
	ldrb r2, [r8, r2]
	and r2, r2, #0xf0
	orr r2, r2, r3
_0206BB88:
	and r2, r2, #0xff
	bl FUN_02042274
_0206BB90:
	asrs r5, r5, #2
	sub r6, r6, #2
	moveq r5, #0xc0
	moveq r6, #6
	addeq sb, sb, #1
	cmp r7, #0
	moveq r7, #1
	add r4, r4, #1
	movne r7, #0
	cmp r4, fp
	blt _0206BB24
_0206BBBC:
	ldr r0, [sp, #0xc]
	mov r3, #0
	cmp r0, #0
	ble _0206BBF8
	mov r2, #0xc0
	mov r1, #6
_0206BBD4:
	ldr r0, [sp, #0xc]
	asrs r5, r5, #2
	sub r6, r6, #2
	add r3, r3, #1
	moveq r5, r2
	moveq r6, r1
	addeq sb, sb, #1
	cmp r3, r0
	blt _0206BBD4
_0206BBF8:
	ldr r0, [sp, #0x10]
	add r1, r0, #1
	ldr r0, [sp, #0x48]
	str r1, [sp, #0x10]
	cmp r1, r0
	blt _0206BAF0
_0206BC10:
	ldr r0, [sl, #0x14]
	add r0, fp, r0
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0206bc20
FUN_0206bc20: ; 0x0206BC20
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov fp, r0
	ldr r0, [fp, #4]
	ldr r4, [sp, #0x34]
	ldr sl, [r0, #8]
	ldrsb r0, [r4]
	ldrsb r7, [r4, #2]
	ldr r4, [sp, #0x38]
	ldr sb, [sp, #0x3c]
	ldrb r8, [sp, #0x30]
	ldrb r6, [fp, #0x1c]
	ldrb r5, [fp, #0x1d]
	str r4, [sp, #0x38]
	ldrb ip, [sl]
	mov sl, r1
	ldr r1, [sp, #0x38]
	mov r4, #0
	strb r6, [sp, #0xa]
	strb r5, [sp, #0xb]
	sub r7, r7, r0
	add sb, sb, r0
	ldr r0, [sp, #0x40]
	strb r8, [sp, #9]
	str r2, [sp]
	strb r4, [sp, #8]
	cmp r1, #0
	sub r8, ip, r7
	str r0, [sp, #0x40]
	mov r5, #0xc0
	mov r6, #6
	ble _0206BD9C
	asr r0, r3, #2
	add r0, r3, r0, lsr #29
	asr r0, r0, #3
	lsl r0, r0, #6
	str r0, [sp, #4]
	arm_func_end FUN_0206bc20
_0206BCB4:
	ldr r0, [sp, #0x40]
	cmp r7, #0
	add r1, r4, r0
	asr r0, r1, #2
	add r0, r1, r0, lsr #29
	asr r2, r0, #3
	ldr r0, [sp, #4]
	mul r0, r2, r0
	lsr r2, r1, #0x1f
	rsb r1, r2, r1, lsl #29
	add r1, r2, r1, ror #29
	add r1, r0, r1, lsl #3
	mov r0, #0
	ble _0206BD58
	mov ip, #0xc0
	mov r3, #6
_0206BCF4:
	add lr, r0, sb
	asr r2, lr, #3
	add r2, r1, r2, lsl #6
	and lr, lr, #7
	add lr, r2, lr
	ldrb r2, [sl]
	and r2, r2, r5
	asr r2, r2, r6
	cmp r2, #0
	ble _0206BD38
	add r3, sp, #8
	ldr r0, [sp]
	ldrb r2, [r3, r2]
	add r1, r0, lr
	mov r0, fp
	bl FUN_02042274
	b _0206BD58
_0206BD38:
	asrs r5, r5, #2
	sub r6, r6, #2
	add r0, r0, #1
	moveq r5, ip
	addeq sl, sl, #1
	moveq r6, r3
	cmp r0, r7
	blt _0206BCF4
_0206BD58:
	cmp r8, #0
	mov r2, #0
	ble _0206BD8C
	mov r1, #0xc0
	mov r0, #6
_0206BD6C:
	asrs r5, r5, #2
	sub r6, r6, #2
	add r2, r2, #1
	moveq r5, r1
	moveq r6, r0
	addeq sl, sl, #1
	cmp r2, r8
	blt _0206BD6C
_0206BD8C:
	ldr r0, [sp, #0x38]
	add r4, r4, #1
	cmp r4, r0
	blt _0206BCB4
_0206BD9C:
	ldr r0, [fp, #0x14]
	add r0, r7, r0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0206bdac
FUN_0206bdac: ; 0x0206BDAC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	ldr r4, [sp, #0x3c]
	ldrb r6, [sp, #0x38]
	str r4, [sp, #0x3c]
	ldrsb r5, [r4]
	ldrsb r4, [r4, #2]
	and r7, r6, #0xf
	mov r6, #0
	mov sl, r0
	mov r0, r6
	strb r0, [sp, #0x10]
	ldr r0, [sp, #0x40]
	strb r7, [sp, #0x11]
	str r6, [sp, #0xc]
	str r0, [sp, #0x40]
	ldr r0, [sp, #0x44]
	ldrb r6, [sl, #0x1c]
	str r0, [sp, #0x44]
	mov sb, r1
	and r0, r6, #0xf
	strb r0, [sp, #0x12]
	ldrb r0, [sl, #0x1d]
	str r2, [sp]
	str r3, [sp, #4]
	and r0, r0, #0xf
	strb r0, [sp, #0x13]
	ldr r0, [sp, #0x40]
	sub fp, r4, r5
	cmp r0, #0
	ldr r0, [sp, #0x44]
	mov r6, #6
	add r0, r0, r5
	str r0, [sp, #0x44]
	ldr r0, [sp, #0x48]
	mov r5, #0xc0
	str r0, [sp, #0x48]
	ble _0206BF68
	ldr r0, [sp, #0x44]
	tst r0, #1
	movne r0, #1
	strne r0, [sp, #8]
	ldreq r0, [sp, #0xc]
	streq r0, [sp, #8]
	arm_func_end FUN_0206bdac
_0206BE5C:
	ldr r1, [sp, #0x48]
	ldr r0, [sp, #0xc]
	cmp fp, #0
	add r2, r1, r0
	ldr r1, [sp, #4]
	ldr r0, [sp, #0x44]
	ldr r8, [sp, #8]
	mla r0, r1, r2, r0
	add r1, r0, r0, lsr #31
	ldr r0, [sp]
	mov r4, #0
	add r7, r0, r1, asr #1
	ble _0206BF14
_0206BE90:
	ldrb r0, [sb]
	and r0, r0, r5
	asr r1, r0, r6
	cmp r1, #0
	ble _0206BEE0
	add r0, sp, #0x10
	ldrb r2, [r0, r1]
	cmp r8, #0
	mov r0, sl
	mov r1, r7
	beq _0206BECC
	ldrb r3, [r7]
	and r3, r3, #0xf
	orr r2, r3, r2, lsl #4
	b _0206BED8
_0206BECC:
	ldrb r3, [r7]
	and r3, r3, #0xf0
	orr r2, r3, r2
_0206BED8:
	and r2, r2, #0xff
	bl FUN_02042274
_0206BEE0:
	asrs r5, r5, #2
	sub r6, r6, #2
	moveq r5, #0xc0
	moveq r6, #6
	addeq sb, sb, #1
	cmp r8, #0
	addne r7, r7, #1
	cmp r8, #0
	moveq r8, #1
	add r4, r4, #1
	movne r8, #0
	cmp r4, fp
	blt _0206BE90
_0206BF14:
	ldr r0, [sp, #0x3c]
	mov r3, #0
	ldrsb r2, [r0]
	cmp r2, #0
	ble _0206BF50
	mov r1, #0xc0
	mov r0, #6
_0206BF30:
	asrs r5, r5, #2
	sub r6, r6, #2
	add r3, r3, #1
	moveq r5, r1
	moveq r6, r0
	addeq sb, sb, #1
	cmp r3, r2
	blt _0206BF30
_0206BF50:
	ldr r0, [sp, #0xc]
	add r1, r0, #1
	ldr r0, [sp, #0x40]
	str r1, [sp, #0xc]
	cmp r1, r0
	blt _0206BE5C
_0206BF68:
	add r0, fp, #1
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0206bf74
FUN_0206bf74: ; 0x0206BF74
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	ldr r4, [sp, #0x3c]
	mov sl, r0
	str r4, [sp, #0x3c]
	ldr r6, [sp, #0x40]
	ldrb r0, [sl, #0x1d]
	ldr r7, [sp, #0x3c]
	str r6, [sp, #0x40]
	mov r6, #0
	str r6, [sp, #8]
	ldr r6, [sp, #0x3c]
	ldrsb r8, [r7, #2]
	ldr r7, [sp, #0x44]
	strb r0, [sp, #0xf]
	ldr r0, [sp, #0x40]
	ldrb r5, [sp, #0x38]
	ldrb r4, [sl, #0x1c]
	mov sb, r1
	ldr r1, [sp, #8]
	strb r5, [sp, #0xd]
	ldrsb r6, [r6]
	str r7, [sp, #0x44]
	cmp r0, #0
	ldr r0, [sp, #0x44]
	str r2, [sp]
	add r0, r0, r6
	str r0, [sp, #0x44]
	ldr r0, [sp, #0x48]
	sub r7, r8, r6
	str r3, [sp, #4]
	strb r1, [sp, #0xc]
	strb r4, [sp, #0xe]
	str r0, [sp, #0x48]
	mov r5, #0xc0
	mov r6, #6
	ble _0206C0CC
	add fp, sp, #0xc
	arm_func_end FUN_0206bf74
_0206C00C:
	ldr r1, [sp, #0x48]
	ldr r0, [sp, #8]
	cmp r7, #0
	add r2, r1, r0
	ldr r1, [sp, #4]
	ldr r0, [sp, #0x44]
	mov r4, #0
	mla r2, r1, r2, r0
	ldr r0, [sp]
	add r8, r0, r2
	ble _0206C080
_0206C038:
	ldrb r0, [sb]
	and r0, r0, r5
	asr r0, r0, r6
	cmp r0, #0
	ble _0206C05C
	ldrb r2, [fp, r0]
	mov r0, sl
	mov r1, r8
	bl FUN_02042274
_0206C05C:
	asrs r5, r5, #2
	sub r6, r6, #2
	add r4, r4, #1
	moveq r5, #0xc0
	moveq r6, #6
	addeq sb, sb, #1
	add r8, r8, #1
	cmp r4, r7
	blt _0206C038
_0206C080:
	ldr r0, [sp, #0x3c]
	mov r1, #0
	ldrsb r0, [r0]
	cmp r0, #0
	ble _0206C0B4
_0206C094:
	asrs r5, r5, #2
	sub r6, r6, #2
	add r1, r1, #1
	moveq r5, #0xc0
	moveq r6, #6
	addeq sb, sb, #1
	cmp r1, r0
	blt _0206C094
_0206C0B4:
	ldr r0, [sp, #8]
	add r1, r0, #1
	ldr r0, [sp, #0x40]
	str r1, [sp, #8]
	cmp r1, r0
	blt _0206C00C
_0206C0CC:
	add r0, r7, #1
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0206c0d8
FUN_0206c0d8: ; 0x0206C0D8
	ldr r2, _0206C10C ; =0x020912D0
	mov r1, #0
	str r2, [r0]
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	str r1, [r0, #0x10]
	strh r1, [r0, #0x18]
	str r1, [r0, #0x14]
	str r1, [r0, #0x1c]
	str r1, [r0, #0x20]
	strh r1, [r0, #0x24]
	bx lr
	.align 2, 0_0206C10C: .word 0x020912D0
	arm_func_end FUN_0206c0d8

	arm_func_start FUN_0206c110
FUN_0206c110: ; 0x0206C110
	push {r4, lr}
	ldr r1, _0206C12C ; =0x020912D0
	mov r4, r0
	str r1, [r4]
	bl FUN_0206c270
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0206C12C: .word 0x020912D0
	arm_func_end FUN_0206c110
_0206C130:
	.byte 0x10, 0x40, 0x2D, 0xE9, 0x18, 0x10, 0x9F, 0xE5, 0x00, 0x40, 0xA0, 0xE1, 0x00, 0x10, 0x84, 0xE5
	.byte 0x4A, 0x00, 0x00, 0xEB, 0x04, 0x00, 0xA0, 0xE1, 0xCA, 0xC7, 0xFE, 0xEB, 0x04, 0x00, 0xA0, 0xE1
	.byte 0x10, 0x80, 0xBD, 0xE8, 0xD0, 0x12, 0x09, 0x02

	arm_func_start FUN_0206c158
FUN_0206c158: ; 0x0206C158
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r5, r0
	ldr r0, [r5, #8]
	mov r4, r1
	cmp r0, #0
	ldreq r0, [r5, #4]
	cmpeq r0, #0
	ldreq r0, [r5, #0xc]
	cmpeq r0, #0
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, #0x98
	mul r6, r4, r0
	ldr r8, _0206C268 ; =0x0209A250
	mov r1, r6
	mov r0, r8
	bl FUN_0202de44
	str r0, [r5, #4]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r7, #0
	mov r1, r7
	mov r2, r6
	bl MemWrite
	lsl sb, r4, #2
	mov r0, r8
	mov r1, sb
	bl FUN_0202de44
	str r0, [r5, #8]
	cmp r0, #0
	moveq r0, r7
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r1, r7
	mov r2, sb
	bl MemWrite
	mov r6, #0x6c
	mul sl, r4, r6
	mov r0, r8
	mov r1, sl
	bl FUN_0202de44
	str r0, [r5, #0xc]
	cmp r0, #0
	moveq r0, r7
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r1, r7
	mov r2, sl
	bl MemWrite
	mov r0, r8
	add r1, sb, #0x1a
	bl FUN_0202de44
	str r0, [r5, #0x14]
	cmp r0, #0
	moveq r0, r7
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r1, r7
	add r2, sb, #0x1a
	bl MemWrite
	ldr r1, [r5, #0xc]
	sub r0, r4, #1
	mla r2, r0, r6, r1
	ldr r0, _0206C26C ; =0x0209BA20
	mov r1, r7
	strh r4, [r5, #0x18]
	str r2, [r5, #0x10]
	bl FUN_020740a4
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0206C268: .word 0x0209A250
_0206C26C: .word 0x0209BA20
	arm_func_end FUN_0206c158

	arm_func_start FUN_0206c270
FUN_0206c270: ; 0x0206C270
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r1, [r5, #4]
	mov r4, #0
	cmp r1, #0
	beq _0206C294
	ldr r0, _0206C2F4 ; =0x0209A250
	bl FUN_0202e1c0
	str r4, [r5, #4]
	arm_func_end FUN_0206c270
_0206C294:
	ldr r1, [r5, #8]
	cmp r1, #0
	beq _0206C2AC
	ldr r0, _0206C2F4 ; =0x0209A250
	bl FUN_0202e1c0
	str r4, [r5, #8]
_0206C2AC:
	ldr r1, [r5, #0xc]
	cmp r1, #0
	beq _0206C2C4
	ldr r0, _0206C2F4 ; =0x0209A250
	bl FUN_0202e1c0
	str r4, [r5, #0xc]
_0206C2C4:
	ldr r1, [r5, #0x14]
	cmp r1, #0
	beq _0206C2DC
	ldr r0, _0206C2F4 ; =0x0209A250
	bl FUN_0202e1c0
	str r4, [r5, #0x14]
_0206C2DC:
	str r4, [r5, #0x1c]
	str r4, [r5, #0x20]
	str r4, [r5, #0x10]
	strh r4, [r5, #0x18]
	strh r4, [r5, #0x24]
	pop {r3, r4, r5, pc}
	.align 2, 0_0206C2F4: .word 0x0209A250

	arm_func_start FUN_0206c2f8
FUN_0206c2f8: ; 0x0206C2F8
	ldrh r0, [r0, #0x18]
	bx lr
	arm_func_end FUN_0206c2f8

	arm_func_start FUN_0206c300
FUN_0206c300: ; 0x0206C300
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0xb8
	ldr r4, _0206C564 ; =0x020A0640
	mov r5, r0
	ldrb r4, [r4, #0x1a]
	mov r8, r1
	mov sb, r2
	mov r7, r3
	cmp r4, #0
	mov r4, #0
	bne _0206C344
	mov r1, r7
	bl FUN_0206c7dc
	cmp r0, #0
	addne sp, sp, #0xb8
	movne r0, r4
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_0206c300
_0206C344:
	mov r0, r5
	mov r1, r8
	bl FUN_0206c5d8
	mov r0, r5
	bl FUN_0206ca34
	movs r4, r0
	beq _0206C558
	ldr r3, [r5, #8]
	mov r1, #0
	mov r2, #0x98
	str r4, [r3, r8, lsl #2]
	bl MemWrite
	add r0, sp, #0x4c
	bl FUN_0206ecc4
	mov r0, r5
	strh r8, [r4, #0x94]
	bl FUN_0206ca04
	tst r0, #1
	beq _0206C39C
	mov r0, r5
	mov r1, r4
	bl FUN_0206cb84
_0206C39C:
	mov r0, r5
	bl FUN_0206ca04
	tst r0, #2
	beq _0206C3B8
	mov r0, r5
	mov r1, r4
	bl FUN_0206cb10
_0206C3B8:
	mov r0, r5
	mov r1, r4
	bl FUN_0206ca88
	mov r0, r4
	mov r1, #1
	bl FUN_0206d618
	cmp sb, #0
	mov r0, r4
	bne _0206C3E4
	mov r1, #0x20
	b _0206C3E8
_0206C3E4:
	mov r1, #0x40
_0206C3E8:
	bl FUN_0206d620
	cmp r7, #0
	beq _0206C558
	ldr sl, _0206C568 ; =0x0209BA20
	mov r1, r7
	mov r0, sl
	mov r2, r4
	bl FUN_0204bd64
	cmp r0, #0
	addeq sp, sp, #0xb8
	mov r0, r4
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	bl FUN_0206dcd4
	mov r6, r0
	add r5, sp, #0x4c
	mov r1, r6
	mov r0, r5
	bl FUN_0206ed40
	mov r0, r5
	str r5, [r4, #0x68]
	bl FUN_0206ecc4
	mov r0, r5
	mov r1, sb
	bl FUN_0206e7e4
	mov r1, r7
	mov r0, r5
	bl FUN_0206dd58
	ldrb r1, [r4, #0x4d]
	mov r0, r5
	bl FUN_0206e4a4
	mov r0, sl
	mov r1, sb
	bl FUN_0207249c
	cmp r0, #0
	beq _0206C480
	ldrh r1, [r4, #0x58]
	mov r0, r5
	bl FUN_0206de90
_0206C480:
	mov r0, r4
	mov r1, sb
	bl FUN_0206cc1c
	mov r0, r4
	bl FUN_0206cbf8
	ldr sl, _0206C568 ; =0x0209BA20
	mov r7, r0
	mov r0, sl
	mov r1, sb
	bl FUN_0207249c
	movs sb, r0
	ldrhne r0, [sb, #0x30]
	cmpne r0, #0
	beq _0206C4F4
	mov r0, r4
	bl FUN_0206d6c4
	cmp r0, #0
	beq _0206C4DC
	ldrh r2, [sb, #0x30]
	mov r0, r5
	mov r1, #0
	bl FUN_0206def8
	b _0206C4F4
_0206C4DC:
	mov r3, #0
	str r3, [sp]
	ldrh r2, [sb, #0x30]
	mov r0, sl
	mov r1, r7
	bl FUN_020EEB24
_0206C4F4:
	ldr sl, _0206C568 ; =0x0209BA20
	ldr r2, [sp, #0xd8]
	mov r0, sl
	mov r1, r4
	mov r3, #0
	bl FUN_0204ea4c
	mov r0, r4
	bl FUN_0206dca4
	add sb, sp, #4
	mov r0, sl
	mov r1, r7
	mov r2, sb
	bl FUN_0204c078
	cmp r0, #0
	beq _0206C544
	lsl r1, r8, #0x10
	mov r0, sl
	mov r2, sb
	lsr r1, r1, #0x10
	bl FUN_02073f10
_0206C544:
	mov r0, r4
	str r6, [r4, #0x68]
	bl FUN_0206dcd4
	mov r1, r5
	bl FUN_0206ed40
_0206C558:
	mov r0, r4
	add sp, sp, #0xb8
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0206C564: .word 0x020A0640
_0206C568: .word 0x0209BA20

	arm_func_start FUN_0206c56c
FUN_0206c56c: ; 0x0206C56C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r2
	mov r2, #0
	mov r3, r2
	mov r7, r1
	str r2, [sp]
	bl FUN_0206c300
	movs r5, r0
	beq _0206C5D0
	bl FUN_0206dcd4
	mov r4, r0
	mov r0, r6
	mov r1, r5
	mov r2, #0x98
	bl FUN_020078c8
	mov r0, r5
	str r4, [r5, #0x68]
	bl FUN_0206dcd4
	mov r4, r0
	mov r0, r6
	bl FUN_0206dcd4
	mov r1, r0
	mov r0, r4
	bl FUN_0206ed40
	strh r7, [r5, #0x94]
	arm_func_end FUN_0206c56c
_0206C5D0:
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0206c5d8
FUN_0206c5d8: ; 0x0206C5D8
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_0206c6fc
	movs r4, r0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r4
	bl FUN_0206caec
	mov r0, r6
	mov r1, r4
	bl FUN_0206cbe0
	mov r0, r6
	mov r1, r4
	bl FUN_0206cb6c
	mov r1, #0
	strh r1, [r4, #0x8e]
	strh r1, [r4, #0x94]
	ldr r0, [r6, #8]
	str r1, [r0, r5, lsl #2]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0206c5d8

	arm_func_start FUN_0206c62c
FUN_0206c62c: ; 0x0206C62C
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrh r0, [r5, #0x18]
	mov r4, #0
	cmp r0, #0
	pople {r3, r4, r5, pc}
	arm_func_end FUN_0206c62c
_0206C644:
	mov r0, r5
	mov r1, r4
	bl FUN_0206c5d8
	ldrh r0, [r5, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blt _0206C644
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206c664
FUN_0206c664: ; 0x0206C664
	push {r3, lr}
	ldr lr, [r0, #8]
	cmp r1, r2
	ldr ip, [lr, r1, lsl #2]
	popeq {r3, pc}
	ldr r3, [lr, r2, lsl #2]
	str r3, [lr, r1, lsl #2]
	ldr r3, [r0, #8]
	str ip, [r3, r2, lsl #2]
	ldr r3, [r0, #8]
	ldr r3, [r3, r1, lsl #2]
	cmp r3, #0
	strhne r1, [r3, #0x94]
	ldr r0, [r0, #8]
	ldr r0, [r0, r2, lsl #2]
	cmp r0, #0
	strhne r2, [r0, #0x94]
	pop {r3, pc}
	arm_func_end FUN_0206c664

	arm_func_start FUN_0206c6ac
FUN_0206c6ac: ; 0x0206C6AC
	push {r4, r5, r6, lr}
	mov r4, r2
	mov r5, r1
	mov r6, r0
	mov r1, r4
	bl FUN_0206c5d8
	ldr ip, [r6, #8]
	mov r0, r6
	ldr r3, [ip, r4, lsl #2]
	ldr r2, [ip, r5, lsl #2]
	mov r1, r5
	str r2, [ip, r4, lsl #2]
	ldr r2, [r6, #8]
	str r3, [r2, r5, lsl #2]
	bl FUN_0206c5d8
	ldr r0, [r6, #8]
	ldr r0, [r0, r4, lsl #2]
	cmp r0, #0
	strhne r4, [r0, #0x94]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0206c6ac

	arm_func_start FUN_0206c6fc
FUN_0206c6fc: ; 0x0206C6FC
	cmp r1, #0
	ldrhge r2, [r0, #0x18]
	cmpge r2, r1
	movle r0, #0
	ldrgt r0, [r0, #8]
	ldrgt r0, [r0, r1, lsl #2]
	bx lr
	arm_func_end FUN_0206c6fc

	arm_func_start FUN_0206c718
FUN_0206c718: ; 0x0206C718
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	ldrh r0, [r5, #0x18]
	mov r4, r1
	mov r7, #0
	cmp r0, #0
	bls _0206C780
	arm_func_end FUN_0206c718
_0206C734:
	mov r0, r5
	mov r1, r7
	bl FUN_0206c6fc
	movs r6, r0
	beq _0206C768
	bl FUN_0206d64c
	cmp r0, #0
	beq _0206C768
	mov r0, r6
	bl FUN_0206cbf8
	cmp r4, r0
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, pc}
_0206C768:
	ldrh r1, [r5, #0x18]
	add r0, r7, #1
	lsl r0, r0, #0x10
	cmp r1, r0, lsr #16
	lsr r7, r0, #0x10
	bhi _0206C734
_0206C780:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0206c788
FUN_0206c788: ; 0x0206C788
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrh r0, [r5, #0x18]
	mov r4, #0
	cmp r0, #0
	ble _0206C7D4
	arm_func_end FUN_0206c788
_0206C7A0:
	lsl r1, r4, #0x10
	mov r0, r5
	lsr r1, r1, #0x10
	bl FUN_0206c6fc
	cmp r0, #0
	moveq r0, r4
	popeq {r3, r4, r5, pc}
	ldrh r1, [r5, #0x18]
	add r0, r4, #1
	lsl r0, r0, #0x10
	cmp r1, r0, asr #16
	asr r4, r0, #0x10
	bgt _0206C7A0
_0206C7D4:
	mvn r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206c7dc
FUN_0206c7dc: ; 0x0206C7DC
	push {r3, lr}
	cmp r2, #1
	ldreq r2, _0206C814 ; =0x020A0640
	ldrbeq r2, [r2, #0x1b]
	cmpeq r2, #0
	orreq r1, r1, #0x8000
	bl FUN_0206c718
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}
	.align 2, 0_0206C814: .word 0x020A0640
	arm_func_end FUN_0206c7dc

	arm_func_start FUN_0206c818
FUN_0206c818: ; 0x0206C818
	ldr r0, [r0, #0xc]
	bx lr
	arm_func_end FUN_0206c818

	arm_func_start FUN_0206c820
FUN_0206c820: ; 0x0206C820
	push {r3, r4, r5, lr}
	mov r5, r0
	movs r4, r1
	ldrne r1, [r5, #0xc]
	cmpne r1, #0
	ldrne r1, [r5, #0x10]
	cmpne r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	bl FUN_0206c818
	cmp r0, r4
	bhi _0206C85C
	ldr r0, [r5, #0x10]
	cmp r0, r4
	bhs _0206C864
	arm_func_end FUN_0206c820
_0206C85C:
	mov r0, #0
	pop {r3, r4, r5, pc}
_0206C864:
	mov r0, #1
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206c86c
FUN_0206c86c: ; 0x0206C86C
	ldr r0, [r0, #0x14]
	str r2, [r0, r1, lsl #2]
	bx lr
	arm_func_end FUN_0206c86c

	arm_func_start FUN_0206c878
FUN_0206c878: ; 0x0206C878
	ldr r0, [r0, #0x14]
	ldr r0, [r0, r1, lsl #2]
	bx lr
	arm_func_end FUN_0206c878

	arm_func_start FUN_0206c884
FUN_0206c884: ; 0x0206C884
	ldr r0, [r0, #0x14]
	bx lr
	arm_func_end FUN_0206c884

	arm_func_start FUN_0206c88c
FUN_0206c88c: ; 0x0206C88C
	push {r3, r4, r5, lr}
	mov r5, r0
	str r1, [r5, #0x20]
	mov r1, #2
	bl FUN_0206ca24
	mov r4, #0
	arm_func_end FUN_0206c88c
_0206C8A4:
	mov r0, r5
	mov r1, r4
	bl FUN_0206c6fc
	movs r1, r0
	beq _0206C8CC
	ldr r0, [r1, #0x88]
	cmp r0, #0
	bne _0206C8CC
	mov r0, r5
	bl FUN_0206cb10
_0206C8CC:
	add r4, r4, #1
	cmp r4, #0x64
	blt _0206C8A4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206c8dc
FUN_0206c8dc: ; 0x0206C8DC
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrh r0, [r5, #0x18]
	mov r4, #0
	cmp r0, #0
	ble _0206C928
	arm_func_end FUN_0206c8dc
_0206C8F4:
	mov r0, r5
	mov r1, r4
	bl FUN_0206c6fc
	movs r1, r0
	ldrne r0, [r1, #0x88]
	cmpne r0, #0
	beq _0206C918
	mov r0, r5
	bl FUN_0206cb6c
_0206C918:
	ldrh r0, [r5, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blt _0206C8F4
_0206C928:
	mov r2, #0
	mov r0, r5
	mov r1, #2
	str r2, [r5, #0x20]
	bl FUN_0206ca0c
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206c940
FUN_0206c940: ; 0x0206C940
	push {r3, r4, r5, lr}
	mov r5, r0
	str r1, [r5, #0x1c]
	mov r1, #1
	bl FUN_0206ca24
	ldrh r0, [r5, #0x18]
	mov r4, #0
	cmp r0, #0
	pople {r3, r4, r5, pc}
	arm_func_end FUN_0206c940
_0206C964:
	mov r0, r5
	mov r1, r4
	bl FUN_0206c6fc
	movs r1, r0
	beq _0206C98C
	ldr r0, [r1, #0x84]
	cmp r0, #0
	bne _0206C98C
	mov r0, r5
	bl FUN_0206cb84
_0206C98C:
	ldrh r0, [r5, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blt _0206C964
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206c9a0
FUN_0206c9a0: ; 0x0206C9A0
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrh r0, [r5, #0x18]
	mov r4, #0
	cmp r0, #0
	ble _0206C9EC
	arm_func_end FUN_0206c9a0
_0206C9B8:
	mov r0, r5
	mov r1, r4
	bl FUN_0206c6fc
	movs r1, r0
	ldrne r0, [r1, #0x84]
	cmpne r0, #0
	beq _0206C9DC
	mov r0, r5
	bl FUN_0206cbe0
_0206C9DC:
	ldrh r0, [r5, #0x18]
	add r4, r4, #1
	cmp r4, r0
	blt _0206C9B8
_0206C9EC:
	mov r2, #0
	mov r0, r5
	mov r1, #2
	str r2, [r5, #0x1c]
	bl FUN_0206ca0c
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206ca04
FUN_0206ca04: ; 0x0206CA04
	ldrh r0, [r0, #0x24]
	bx lr
	arm_func_end FUN_0206ca04

	arm_func_start FUN_0206ca0c
FUN_0206ca0c: ; 0x0206CA0C
	ldrh r2, [r0, #0x24]
	mvn r1, r1
	lsl r1, r1, #0x10
	and r1, r2, r1, lsr #16
	strh r1, [r0, #0x24]
	bx lr
	arm_func_end FUN_0206ca0c

	arm_func_start FUN_0206ca24
FUN_0206ca24: ; 0x0206CA24
	ldrh r2, [r0, #0x24]
	orr r1, r2, r1
	strh r1, [r0, #0x24]
	bx lr
	arm_func_end FUN_0206ca24

	arm_func_start FUN_0206ca34
FUN_0206ca34: ; 0x0206CA34
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	ldrh r0, [r7, #0x18]
	mov r5, #0
	cmp r0, #0
	ble _0206CA80
	mov r4, #0x98
	arm_func_end FUN_0206ca34
_0206CA50:
	mul r6, r5, r4
	ldr r0, [r7, #4]
	add r0, r0, r6
	bl FUN_0206d64c
	cmp r0, #0
	ldreq r0, [r7, #4]
	addeq r0, r0, r6
	popeq {r3, r4, r5, r6, r7, pc}
	ldrh r0, [r7, #0x18]
	add r5, r5, #1
	cmp r5, r0
	blt _0206CA50
_0206CA80:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0206ca88
FUN_0206ca88: ; 0x0206CA88
	push {r3, r4, r5, lr}
	movs r4, r1
	mov r5, r0
	popeq {r3, r4, r5, pc}
	mov r0, r4
	bl FUN_0206dcdc
	cmp r0, #0
	ldrne r3, [r5, #0xc]
	cmpne r3, #0
	popeq {r3, r4, r5, pc}
	ldr r1, [r5, #4]
	ldr r0, _0206CAE8 ; =0xAF286BCB
	sub r1, r4, r1
	umull r0, r2, r1, r0
	sub r0, r1, r2
	add r2, r2, r0, lsr #1
	lsr r2, r2, #7
	mov r0, #0x6c
	mla r1, r2, r0, r3
	mov r0, r4
	str r1, [r4, #0x68]
	bl FUN_0206dcd4
	bl FUN_0206ecc4
	pop {r3, r4, r5, pc}
	.align 2, 0_0206CAE8: .word 0xAF286BCB
	arm_func_end FUN_0206ca88

	arm_func_start FUN_0206caec
FUN_0206caec: ; 0x0206CAEC
	push {r4, lr}
	movs r4, r1
	popeq {r4, pc}
	mov r0, r4
	bl FUN_0206dcdc
	cmp r0, #0
	moveq r0, #0
	streq r0, [r4, #0x68]
	pop {r4, pc}
	arm_func_end FUN_0206caec

	arm_func_start FUN_0206cb10
FUN_0206cb10: ; 0x0206CB10
	push {r3, lr}
	cmp r1, #0
	popeq {r3, pc}
	ldr r2, [r1, #0x88]
	cmp r2, #0
	popne {r3, pc}
	ldr ip, [r0, #0x20]
	cmp ip, #0
	popeq {r3, pc}
	ldr r2, [r0, #4]
	ldr r0, _0206CB68 ; =0xAF286BCB
	sub r2, r1, r2
	umull r0, r3, r2, r0
	sub r0, r2, r3
	add r3, r3, r0, lsr #1
	lsr r3, r3, #7
	mov r0, #0x90
	mla r0, r3, r0, ip
	str r0, [r1, #0x88]
	mov r1, #1
	bl FUN_02073d24
	pop {r3, pc}
	.align 2, 0_0206CB68: .word 0xAF286BCB
	arm_func_end FUN_0206cb10

	arm_func_start FUN_0206cb6c
FUN_0206cb6c: ; 0x0206CB6C
	cmp r1, #0
	ldrne r0, [r1, #0x88]
	cmpne r0, #0
	movne r0, #0
	strne r0, [r1, #0x88]
	bx lr
	arm_func_end FUN_0206cb6c

	arm_func_start FUN_0206cb84
FUN_0206cb84: ; 0x0206CB84
	push {r3, lr}
	cmp r1, #0
	popeq {r3, pc}
	ldr r2, [r1, #0x84]
	cmp r2, #0
	popne {r3, pc}
	ldr ip, [r0, #0x1c]
	cmp ip, #0
	popeq {r3, pc}
	ldr r2, [r0, #4]
	ldr r0, _0206CBDC ; =0xAF286BCB
	sub r2, r1, r2
	umull r0, r3, r2, r0
	sub r0, r2, r3
	add r3, r3, r0, lsr #1
	lsr r3, r3, #7
	add r0, ip, r3, lsl #5
	str r0, [r1, #0x84]
	mov r1, #0
	mov r2, #0x20
	bl MemWrite
	pop {r3, pc}
	.align 2, 0_0206CBDC: .word 0xAF286BCB
	arm_func_end FUN_0206cb84

	arm_func_start FUN_0206cbe0
FUN_0206cbe0: ; 0x0206CBE0
	cmp r1, #0
	ldrne r0, [r1, #0x84]
	cmpne r0, #0
	movne r0, #0
	strne r0, [r1, #0x84]
	bx lr
	arm_func_end FUN_0206cbe0

	arm_func_start FUN_0206cbf8
FUN_0206cbf8: ; 0x0206CBF8
	ldrh r0, [r0, #0x4e]
	bx lr
	arm_func_end FUN_0206cbf8

	arm_func_start FUN_0206cc00
FUN_0206cc00: ; 0x0206CC00
	ldrh r1, [r0, #0x4e]
	ldr r0, _0206CC18 ; =0x00000FFF
	and r0, r1, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	bx lr
	.align 2, 0_0206CC18: .word 0x00000FFF
	arm_func_end FUN_0206cc00

	arm_func_start FUN_0206cc1c
FUN_0206cc1c: ; 0x0206CC1C
	ldrh r2, [r0, #0x4e]
	lsl r1, r1, #0x1f
	bic r2, r2, #0x8000
	orr r1, r2, r1, lsr #16
	strh r1, [r0, #0x4e]
	bx lr
	arm_func_end FUN_0206cc1c

	arm_func_start FUN_0206cc34
FUN_0206cc34: ; 0x0206CC34
	push {r3, lr}
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x4a]
	pop {r3, pc}
	arm_func_end FUN_0206cc34

	arm_func_start FUN_0206cc44
FUN_0206cc44: ; 0x0206CC44
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	bl FUN_0206cc94
	cmp r4, r0
	ble _0206CC68
	mov r0, r5
	bl FUN_0206cc94
	mov r4, r0
	arm_func_end FUN_0206cc44
_0206CC68:
	cmp r4, #0
	movlt r4, #0
	mov r0, r5
	bl FUN_0206dcd4
	mov r1, r4
	bl FUN_0206e124
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206cc84
FUN_0206cc84: ; 0x0206CC84
	push {r3, lr}
	bl FUN_0206dcd4
	ldrsh r0, [r0, #0x36]
	pop {r3, pc}
	arm_func_end FUN_0206cc84

	arm_func_start FUN_0206cc94
FUN_0206cc94: ; 0x0206CC94
	ldrsh r0, [r0, #0x6e]
	bx lr
	arm_func_end FUN_0206cc94

	arm_func_start FUN_0206cc9c
FUN_0206cc9c: ; 0x0206CC9C
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	bl FUN_0206ccec
	cmp r4, r0
	ble _0206CCC0
	mov r0, r5
	bl FUN_0206ccec
	mov r4, r0
	arm_func_end FUN_0206cc9c
_0206CCC0:
	cmp r4, #0
	movlt r4, #0
	mov r0, r5
	bl FUN_0206dcd4
	mov r1, r4
	bl FUN_0206e0bc
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206ccdc
FUN_0206ccdc: ; 0x0206CCDC
	push {r3, lr}
	bl FUN_0206dcd4
	ldrsh r0, [r0, #0x34]
	pop {r3, pc}
	arm_func_end FUN_0206ccdc

	arm_func_start FUN_0206ccec
FUN_0206ccec: ; 0x0206CCEC
	ldrsh r0, [r0, #0x6c]
	bx lr
	arm_func_end FUN_0206ccec

	arm_func_start FUN_0206ccf4
FUN_0206ccf4: ; 0x0206CCF4
	add r0, r0, r1
	ldrb r0, [r0, #0x74]
	bx lr
	arm_func_end FUN_0206ccf4

	arm_func_start FUN_0206cd00
FUN_0206cd00: ; 0x0206CD00
	ldr ip, _0206CD0C ; =FUN_0206ccf4
	mov r1, #3
	bx ip
	.align 2, 0_0206CD0C: .word FUN_0206ccf4
	arm_func_end FUN_0206cd00

	arm_func_start FUN_0206cd10
FUN_0206cd10: ; 0x0206CD10
	ldr ip, _0206CD1C ; =FUN_0206ccf4
	mov r1, #1
	bx ip
	.align 2, 0_0206CD1C: .word FUN_0206ccf4
	arm_func_end FUN_0206cd10

	arm_func_start FUN_0206cd20
FUN_0206cd20: ; 0x0206CD20
	ldr ip, _0206CD2C ; =FUN_0206ccf4
	mov r1, #6
	bx ip
	.align 2, 0_0206CD2C: .word FUN_0206ccf4
	arm_func_end FUN_0206cd20

	arm_func_start FUN_0206cd30
FUN_0206cd30: ; 0x0206CD30
	ldr ip, _0206CD3C ; =FUN_0206ccf4
	mov r1, #5
	bx ip
	.align 2, 0_0206CD3C: .word FUN_0206ccf4
	arm_func_end FUN_0206cd30

	arm_func_start FUN_0206cd40
FUN_0206cd40: ; 0x0206CD40
	ldr ip, _0206CD4C ; =FUN_0206ccf4
	mov r1, #2
	bx ip
	.align 2, 0_0206CD4C: .word FUN_0206ccf4
	arm_func_end FUN_0206cd40

	arm_func_start FUN_0206cd50
FUN_0206cd50: ; 0x0206CD50
	ldr ip, _0206CD5C ; =FUN_0206ccf4
	mov r1, #0
	bx ip
	.align 2, 0_0206CD5C: .word FUN_0206ccf4
	arm_func_end FUN_0206cd50

	arm_func_start FUN_0206cd60
FUN_0206cd60: ; 0x0206CD60
	ldr ip, _0206CD6C ; =FUN_0206ccf4
	mov r1, #4
	bx ip
	.align 2, 0_0206CD6C: .word FUN_0206ccf4
	arm_func_end FUN_0206cd60

	arm_func_start thunk_FUN_0204fb60
thunk_FUN_0204fb60: ; 0x0206CD70
	ldr ip, _0206CD78 ; =FUN_0204fb60
	bx ip
	.align 2, 0_0206CD78: .word FUN_0204fb60
	arm_func_end thunk_FUN_0204fb60

	arm_func_start thunk_FUN_0204fb6c
thunk_FUN_0204fb6c: ; 0x0206CD7C
	ldr ip, _0206CD84 ; =FUN_0204fb6c
	bx ip
	.align 2, 0_0206CD84: .word FUN_0204fb6c
	arm_func_end thunk_FUN_0204fb6c

	arm_func_start FUN_0206cd88
FUN_0206cd88: ; 0x0206CD88
	ldrb r0, [r0, #0x62]
	bx lr
	arm_func_end FUN_0206cd88

	arm_func_start FUN_0206cd90
FUN_0206cd90: ; 0x0206CD90
	push {r4, lr}
	movs r4, r1
	bmi _0206CDA4
	cmp r4, #4
	blt _0206CDAC
	arm_func_end FUN_0206cd90
_0206CDA4:
	mov r0, #0
	pop {r4, pc}
_0206CDAC:
	bl FUN_0206dcd4
	add r0, r0, r4, lsl #1
	ldrh r0, [r0, #0x10]
	pop {r4, pc}

	arm_func_start FUN_0206cdbc
FUN_0206cdbc: ; 0x0206CDBC
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r4, #0
	mov r5, #4
	arm_func_end FUN_0206cdbc
_0206CDCC:
	mov r0, r6
	bl FUN_0206dcd4
	add r0, r0, r5, lsl #1
	ldrh r0, [r0, #0x38]
	add r5, r5, #1
	cmp r0, #0
	addne r4, r4, #1
	cmp r5, #6
	blt _0206CDCC
	mov r0, r4
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0206cdf8
FUN_0206cdf8: ; 0x0206CDF8
	push {r4, lr}
	movs r4, r1
	bmi _0206CE0C
	cmp r4, #6
	ble _0206CE14
	arm_func_end FUN_0206cdf8
_0206CE0C:
	mov r0, #0
	pop {r4, pc}
_0206CE14:
	bl FUN_0206dcd4
	add r0, r0, r4, lsl #1
	ldrh r0, [r0, #0x38]
	pop {r4, pc}

	arm_func_start FUN_0206ce24
FUN_0206ce24: ; 0x0206CE24
	push {r4, r5, r6, lr}
	movs r6, r1
	mov r4, r0
	mov r5, r2
	bmi _0206CE40
	cmp r6, #6
	ble _0206CE48
	arm_func_end FUN_0206ce24
_0206CE40:
	mov r0, #0
	pop {r4, r5, r6, pc}
_0206CE48:
	cmp r5, #0
	blt _0206CE58
	cmp r5, #1
	ble _0206CE60
_0206CE58:
	mov r0, #0
	pop {r4, r5, r6, pc}
_0206CE60:
	bl FUN_0206dcd4
	ldr r1, _0206CEA4 ; =0x020A0640
	add r2, r5, r6, lsl #1
	ldrb r1, [r1, #0x1b]
	add r0, r0, r2, lsl #1
	ldrh r5, [r0, #0x1c]
	cmp r1, #0
	bne _0206CE9C
	ldr r0, _0206CEA8 ; =0x00000FFF
	ands r5, r5, r0
	beq _0206CE9C
	mov r0, r4
	bl FUN_0206d5f0
	cmp r0, #1
	orreq r5, r5, #0x8000
_0206CE9C:
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0_0206CEA4: .word 0x020A0640
_0206CEA8: .word 0x00000FFF

	arm_func_start FUN_0206ceac
FUN_0206ceac: ; 0x0206CEAC
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x48
	mov sb, r1
	cmp sb, #4
	cmpne sb, #5
	mov sl, r0
	mov r8, r2
	addne sp, sp, #0x48
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r3, #0
	bne _0206CEF8
	mov r0, sl
	mov r1, sb
	bl FUN_0206cdf8
	cmp r0, #0
	addne sp, sp, #0x48
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_0206ceac
_0206CEF8:
	mov r4, #0
_0206CEFC:
	mov r0, sl
	mov r1, r4
	bl FUN_0206cdf8
	cmp r8, r0
	addeq sp, sp, #0x48
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	add r4, r4, #1
	cmp r4, #6
	blt _0206CEFC
	mov r0, sl
	mov r6, #0
	bl FUN_0206cc00
	add r4, sp, #0
	ldr r5, _0206CFCC ; =0x0209BA20
	mov r1, r0
	mov r0, r5
	mov r2, r4
	bl FUN_0204c078
	mov r7, r6
_0206CF4C:
	add r0, r4, r7, lsl #2
	ldrh r0, [r0, #0x2c]
	cmp r8, r0
	bne _0206CF8C
	mov r0, r5
	mov r1, r8
	bl FUN_0204a2c4
	cmp r0, #0
	beq _0206CF8C
	ldrb r1, [r0, #0x14]
	mov r0, r5
	bl thunk_FUN_02072118
	add r1, r4, r7, lsl #2
	ldrb r1, [r1, #0x2f]
	bl FUN_0204b1dc
	mov r6, r0
_0206CF8C:
	add r7, r7, #1
	cmp r7, #4
	blt _0206CF4C
	mov r0, sl
	bl FUN_0206dcd4
	mov r1, sb
	mov r2, r8
	bl FUN_0206e354
	mov r0, sl
	bl FUN_0206dcd4
	mov r1, sb
	mov r2, r6
	bl FUN_0206e3c8
	mov r0, #1
	add sp, sp, #0x48
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0206CFCC: .word 0x0209BA20

	arm_func_start FUN_0206cfd0
FUN_0206cfd0: ; 0x0206CFD0
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x48
	mov sl, r0
	mov sb, r1
	mov r4, #0
	arm_func_end FUN_0206cfd0
_0206CFE4:
	mov r0, sl
	mov r1, r4
	bl FUN_0206cdf8
	cmp sb, r0
	addeq sp, sp, #0x48
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	add r4, r4, #1
	cmp r4, #4
	blt _0206CFE4
	mov r6, #0
_0206D010:
	mov r0, sl
	mov r1, r6
	bl FUN_0206cdf8
	cmp r0, #0
	bne _0206D0CC
	mov r0, sl
	mov r7, #0
	bl FUN_0206cc00
	add r4, sp, #0
	ldr r5, _0206D0E4 ; =0x0209BA20
	mov r1, r0
	mov r0, r5
	mov r2, r4
	bl FUN_0204c078
	mov r8, r7
_0206D04C:
	add r0, r4, r8, lsl #2
	ldrh r0, [r0, #0x2c]
	cmp sb, r0
	bne _0206D08C
	mov r0, r5
	mov r1, sb
	bl FUN_0204a2c4
	cmp r0, #0
	beq _0206D08C
	ldrb r1, [r0, #0x14]
	mov r0, r5
	bl thunk_FUN_02072118
	add r1, r4, r8, lsl #2
	ldrb r1, [r1, #0x2f]
	bl FUN_0204b1dc
	mov r7, r0
_0206D08C:
	add r8, r8, #1
	cmp r8, #4
	blt _0206D04C
	mov r0, sl
	bl FUN_0206dcd4
	mov r1, r6
	mov r2, sb
	bl FUN_0206e354
	mov r0, sl
	bl FUN_0206dcd4
	mov r1, r6
	mov r2, r7
	bl FUN_0206e3c8
	add sp, sp, #0x48
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_0206D0CC:
	add r6, r6, #1
	cmp r6, #4
	blt _0206D010
	mov r0, #0
	add sp, sp, #0x48
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0206D0E4: .word 0x0209BA20

	arm_func_start FUN_0206d0e8
FUN_0206d0e8: ; 0x0206D0E8
	push {r4, r5, r6, lr}
	mov r5, r1
	cmp r5, #4
	mov r6, r0
	cmpne r5, #5
	movne r0, #0
	popne {r4, r5, r6, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_0206cdf8
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r6
	bl FUN_0206dcd4
	mov r4, #0
	mov r1, r5
	mov r2, r4
	bl FUN_0206e354
	mov r0, r6
	bl FUN_0206dcd4
	mov r1, r5
	mov r2, r4
	bl FUN_0206e3c8
	mov r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0206d0e8

	arm_func_start FUN_0206d150
FUN_0206d150: ; 0x0206D150
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	mov r5, r2
	mov r7, r0
	mov r4, r3
	bl FUN_0206dcd4
	mov r1, r6
	mov r3, r5
	mov r2, #0
	bl FUN_0206e03c
	mov r0, r7
	bl FUN_0206dcd4
	mov r1, r6
	mov r3, r4
	mov r2, #1
	bl FUN_0206e03c
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0206d150

	arm_func_start FUN_0206d194
FUN_0206d194: ; 0x0206D194
	mov r0, #0
	bx lr
	arm_func_end FUN_0206d194

	arm_func_start FUN_0206d19c
FUN_0206d19c: ; 0x0206D19C
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, #0
	arm_func_end FUN_0206d19c
_0206D1AC:
	mov r0, r6
	mov r1, r4
	bl FUN_0206cdf8
	cmp r5, r0
	bne _0206D1D0
	mov r0, r6
	mov r1, r4
	bl FUN_0206d194
	pop {r4, r5, r6, pc}
_0206D1D0:
	add r4, r4, #1
	cmp r4, #6
	blt _0206D1AC
	mov r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0206d1e4
FUN_0206d1e4: ; 0x0206D1E4
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, _0206D308 ; =0x020A0640
	mov r7, r0
	ldrb r0, [r4, #0x1a]
	mov r6, r1
	mov r5, r2
	mov r8, r3
	cmp r0, #0
	bne _0206D300
	ldr r0, _0206D30C ; =0x02099EF0
	ldr r0, [r0]
	bl FUN_021434F8
	cmp r0, #0
	bne _0206D300
	mov r0, r7
	mov r1, r6
	bl FUN_0206d388
	mov r4, r0
	cmp r8, #0
	strbne r4, [r8]
	cmp r4, #6
	bhs _0206D300
	ldr r0, _0206D310 ; =0x0209BA20
	mov r1, r6
	bl FUN_0204a2c4
	cmp r0, #0
	beq _0206D29C
	ldrb r1, [r0]
	mov r2, #1
	mov ip, r2
	cmp r1, #5
	cmpne r1, #6
	movne ip, #0
	mov r3, r2
	cmp ip, #0
	bne _0206D280
	ldrb r1, [r0]
	cmp r1, #7
	movne r3, #0
	arm_func_end FUN_0206d1e4
_0206D280:
	cmp r3, #0
	bne _0206D294
	ldrb r0, [r0]
	cmp r0, #8
	movne r2, #0
_0206D294:
	cmp r2, #0
	bne _0206D2A4
_0206D29C:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_0206D2A4:
	mov r0, r7
	mov r1, r6
	mov r2, r4
	mov r3, r5
	bl FUN_0206d314
	cmp r0, #0
	beq _0206D2D0
	mov r0, r7
	mov r1, #9
	mov r2, #0x28
	bl FUN_0206dbb4
_0206D2D0:
	mov r0, r7
	bl FUN_0206dcd4
	add r1, r0, r4
	ldrb r1, [r1, #0x44]
	add r2, r5, r1
	cmp r2, #0xff
	movgt r2, #0xff
	mov r1, r4
	and r2, r2, #0xff
	bl FUN_0206e3c8
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
_0206D300:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0206D308: .word 0x020A0640
_0206D30C: .word 0x02099EF0
_0206D310: .word 0x0209BA20

	arm_func_start FUN_0206d314
FUN_0206d314: ; 0x0206D314
	push {r4, r5, r6, r7, r8, lr}
	ldr r6, _0206D384 ; =0x0209BA20
	mov r8, r0
	mov r0, r6
	mov r4, r2
	mov r7, r3
	bl FUN_0204a2c4
	movs r5, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r8
	bl FUN_0206dcd4
	add r0, r0, r4
	ldrb r4, [r0, #0x44]
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_020721bc
	add r2, r4, r7
	mov r4, r0
	mov r0, r6
	mov r1, r5
	and r2, r2, #0xff
	bl FUN_020721bc
	cmp r4, r0
	movlo r0, #1
	movhs r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0206D384: .word 0x0209BA20
	arm_func_end FUN_0206d314

	arm_func_start FUN_0206d388
FUN_0206d388: ; 0x0206D388
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, #0
	arm_func_end FUN_0206d388
_0206D398:
	mov r0, r6
	mov r1, r4
	bl FUN_0206cdf8
	cmp r5, r0
	moveq r0, r4
	popeq {r4, r5, r6, pc}
	add r0, r4, #1
	and r4, r0, #0xff
	cmp r4, #6
	blo _0206D398
	mov r0, #6
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0206d3c8
FUN_0206d3c8: ; 0x0206D3C8
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_0206dcd4
	mov r4, r0
	mov r0, r6
	bl FUN_0206dcd4
	ldrh r1, [r4, #0x5a]
	orr r1, r5, r1
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_0206e91c
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0206d3c8

	arm_func_start FUN_0206d3fc
FUN_0206d3fc: ; 0x0206D3FC
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_0206dcd4
	mov r4, r0
	mov r0, r6
	bl FUN_0206dcd4
	ldrh r1, [r4, #0x5a]
	mvn r2, r5
	and r1, r2, r1
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_0206e91c
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0206d3fc

	arm_func_start FUN_0206d434
FUN_0206d434: ; 0x0206D434
	push {r4, lr}
	mov r4, r1
	bl FUN_0206dcd4
	ldrh r0, [r0, #0x5a]
	tst r4, r0
	movne r0, #1
	moveq r0, #0
	pop {r4, pc}
	arm_func_end FUN_0206d434

	arm_func_start FUN_0206d454
FUN_0206d454: ; 0x0206D454
	ldr ip, _0206D460 ; =FUN_0206d434
	mov r1, #0x20
	bx ip
	.align 2, 0_0206D460: .word FUN_0206d434
	arm_func_end FUN_0206d454

	arm_func_start FUN_0206d464
FUN_0206d464: ; 0x0206D464
	ldr ip, _0206D470 ; =FUN_0206d434
	mov r1, #0x40
	bx ip
	.align 2, 0_0206D470: .word FUN_0206d434
	arm_func_end FUN_0206d464

	arm_func_start FUN_0206d474
FUN_0206d474: ; 0x0206D474
	ldr ip, _0206D480 ; =FUN_0206d434
	mov r1, #0x80
	bx ip
	.align 2, 0_0206D480: .word FUN_0206d434
	arm_func_end FUN_0206d474

	arm_func_start FUN_0206d484
FUN_0206d484: ; 0x0206D484
	ldr ip, _0206D490 ; =FUN_0206d434
	mov r1, #0x100
	bx ip
	.align 2, 0_0206D490: .word FUN_0206d434
	arm_func_end FUN_0206d484

	arm_func_start FUN_0206d494
FUN_0206d494: ; 0x0206D494
	ldr ip, _0206D4A0 ; =FUN_0206d434
	mov r1, #0x200
	bx ip
	.align 2, 0_0206D4A0: .word FUN_0206d434
	arm_func_end FUN_0206d494

	arm_func_start FUN_0206d4a4
FUN_0206d4a4: ; 0x0206D4A4
	ldr ip, _0206D4B0 ; =FUN_0206d434
	mov r1, #0x400
	bx ip
	.align 2, 0_0206D4B0: .word FUN_0206d434
	arm_func_end FUN_0206d4a4

	arm_func_start FUN_0206d4b4
FUN_0206d4b4: ; 0x0206D4B4
	ldr ip, _0206D4C0 ; =FUN_0206d434
	mov r1, #0x800
	bx ip
	.align 2, 0_0206D4C0: .word FUN_0206d434
	arm_func_end FUN_0206d4b4

	arm_func_start FUN_0206d4c4
FUN_0206d4c4: ; 0x0206D4C4
	ldr ip, _0206D4D0 ; =FUN_0206d434
	mov r1, #0x1000
	bx ip
	.align 2, 0_0206D4D0: .word FUN_0206d434
	arm_func_end FUN_0206d4c4

	arm_func_start FUN_0206d4d4
FUN_0206d4d4: ; 0x0206D4D4
	cmp r1, #0
	ldrheq r1, [r0, #0x4e]
	ldrhne r3, [r0, #0x4e]
	movne r2, #0x1000
	biceq r1, r1, #0xf000
	subne r1, r1, #1
	bicne r3, r3, #0xf000
	orrne r1, r3, r2, lsl r1
	strh r1, [r0, #0x4e]
	bx lr
	arm_func_end FUN_0206d4d4

	arm_func_start FUN_0206d4fc
FUN_0206d4fc: ; 0x0206D4FC
	push {r3, lr}
	bl FUN_0206cbf8
	ldr r1, _0206D550 ; =0x020A0640
	mov r2, #0
	ldrb r1, [r1, #0x1b]
	cmp r1, #0
	moveq r0, r2
	popeq {r3, pc}
	tst r0, #0x1000
	movne r2, #1
	bne _0206D548
	tst r0, #0x2000
	movne r2, #2
	bne _0206D548
	tst r0, #0x4000
	movne r2, #3
	bne _0206D548
	tst r0, #0x8000
	movne r2, #4
	arm_func_end FUN_0206d4fc
_0206D548:
	mov r0, r2
	pop {r3, pc}
	.align 2, 0_0206D550: .word 0x020A0640

	arm_func_start FUN_0206d554
FUN_0206d554: ; 0x0206D554
	push {r4, r5, r6, r7, r8, lr}
	mov r4, r0
	ldr r0, _0206D5D0 ; =0x0209AEC0
	bl FUN_02046744
	mov r5, r0
	mov r0, r4
	bl FUN_0206d4fc
	mov r6, r0
	cmp r6, #4
	pophs {r4, r5, r6, r7, r8, pc}
	mov r1, #1
	tst r5, r1, lsl r6
	bne _0206D5C8
	bl FUN_020F085C
	mov r7, r0
	mov r8, #0
	mov r4, #1
	b _0206D5C0
	arm_func_end FUN_0206d554
_0206D59C:
	mov r0, r8
	bl FUN_020F085C
	cmp r7, r0
	bne _0206D5BC
	tst r5, r4, lsl r8
	lslne r0, r8, #0x10
	lsrne r6, r0, #0x10
	bne _0206D5C8
_0206D5BC:
	add r8, r8, #1
_0206D5C0:
	cmp r8, #4
	blt _0206D59C
_0206D5C8:
	mov r0, r6
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0206D5D0: .word 0x0209AEC0

	arm_func_start FUN_0206d5d4
FUN_0206d5d4: ; 0x0206D5D4
	push {r3, lr}
	bl FUN_0206d5f0
	ldr r1, _0206D5EC ; =0x020A06D2
	lsl r0, r0, #1
	ldrh r0, [r1, r0]
	pop {r3, pc}
	.align 2, 0_0206D5EC: .word 0x020A06D2
	arm_func_end FUN_0206d5d4

	arm_func_start FUN_0206d5f0
FUN_0206d5f0: ; 0x0206D5F0
	push {r3, lr}
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x56]
	pop {r3, pc}
	arm_func_end FUN_0206d5f0

	arm_func_start FUN_0206d600
FUN_0206d600: ; 0x0206D600
	push {r4, lr}
	mov r4, r1
	bl FUN_0206dcd4
	mov r1, r4
	bl FUN_0206e7e4
	pop {r4, pc}
	arm_func_end FUN_0206d600

	arm_func_start FUN_0206d618
FUN_0206d618: ; 0x0206D618
	strh r1, [r0, #0x8e]
	bx lr
	arm_func_end FUN_0206d618

	arm_func_start FUN_0206d620
FUN_0206d620: ; 0x0206D620
	ldrh r2, [r0, #0x8e]
	lsl r1, r1, #0x10
	orr r1, r2, r1, lsr #16
	strh r1, [r0, #0x8e]
	bx lr
	arm_func_end FUN_0206d620

	arm_func_start FUN_0206d634
FUN_0206d634: ; 0x0206D634
	ldrh r2, [r0, #0x8e]
	mvn r1, r1
	lsl r1, r1, #0x10
	and r1, r2, r1, lsr #16
	strh r1, [r0, #0x8e]
	bx lr
	arm_func_end FUN_0206d634

	arm_func_start FUN_0206d64c
FUN_0206d64c: ; 0x0206D64C
	ldrh r0, [r0, #0x8e]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d64c

	arm_func_start FUN_0206d660
FUN_0206d660: ; 0x0206D660
	ldrh r0, [r0, #0x8e]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d660

	arm_func_start FUN_0206d674
FUN_0206d674: ; 0x0206D674
	ldrh r0, [r0, #0x8e]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d674

	arm_func_start FUN_0206d688
FUN_0206d688: ; 0x0206D688
	ldrh r0, [r0, #0x8e]
	tst r0, #8
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d688

	arm_func_start FUN_0206d69c
FUN_0206d69c: ; 0x0206D69C
	ldrh r0, [r0, #0x8e]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d69c

	arm_func_start FUN_0206d6b0
FUN_0206d6b0: ; 0x0206D6B0
	ldrh r0, [r0, #0x8e]
	tst r0, #0x20
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d6b0

	arm_func_start FUN_0206d6c4
FUN_0206d6c4: ; 0x0206D6C4
	ldrh r0, [r0, #0x8e]
	tst r0, #0x40
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d6c4

	arm_func_start FUN_0206d6d8
FUN_0206d6d8: ; 0x0206D6D8
	ldrh r0, [r0, #0x8e]
	tst r0, #0x80
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d6d8

	arm_func_start FUN_0206d6ec
FUN_0206d6ec: ; 0x0206D6EC
	ldrh r0, [r0, #0x8e]
	tst r0, #0x100
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d6ec

	arm_func_start FUN_0206d700
FUN_0206d700: ; 0x0206D700
	ldrh r0, [r0, #0x8e]
	tst r0, #0x200
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d700

	arm_func_start FUN_0206d714
FUN_0206d714: ; 0x0206D714
	ldrh r0, [r0, #0x8e]
	tst r0, #0x400
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d714

	arm_func_start FUN_0206d728
FUN_0206d728: ; 0x0206D728
	ldr r1, [r0, #0x88]
	mov r0, #0
	cmp r1, #0
	ldrshne r1, [r1, #0x22]
	cmpne r1, #0
	movgt r0, #1
	bx lr
	arm_func_end FUN_0206d728

	arm_func_start FUN_0206d744
FUN_0206d744: ; 0x0206D744
	ldr r0, [r0, #0x84]
	ldrh r0, [r0, #0x16]
	tst r0, #0x4000
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d744

	arm_func_start FUN_0206d75c
FUN_0206d75c: ; 0x0206D75C
	ldr r0, [r0, #0x84]
	ldrh r0, [r0, #0x16]
	tst r0, #0x20
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206d75c

	arm_func_start FUN_0206d774
FUN_0206d774: ; 0x0206D774
	push {r4, lr}
	ldr r2, _0206D7A8 ; =0x0000270F
	mov r4, r1
	cmp r4, r2
	movgt r4, r2
	bgt _0206D794
	cmp r4, #0
	movlt r4, #0
	arm_func_end FUN_0206d774
_0206D794:
	bl FUN_0206dcd4
	lsl r1, r4, #0x10
	lsr r1, r1, #0x10
	bl FUN_0206de28
	pop {r4, pc}
	.align 2, 0_0206D7A8: .word 0x0000270F

	arm_func_start FUN_0206d7ac
FUN_0206d7ac: ; 0x0206D7AC
	push {r4, lr}
	mov r4, r0
	bl FUN_0206dcd4
	ldrh r1, [r0, #0xa]
	mov r0, r4
	add r1, r1, #1
	bl FUN_0206d774
	pop {r4, pc}
	arm_func_end FUN_0206d7ac

	arm_func_start FUN_0206d7cc
FUN_0206d7cc: ; 0x0206D7CC
	push {r4, lr}
	ldr r2, _0206D800 ; =0x0000270F
	mov r4, r1
	cmp r4, r2
	movgt r4, r2
	bgt _0206D7EC
	cmp r4, #0
	movlt r4, #0
	arm_func_end FUN_0206d7cc
_0206D7EC:
	bl FUN_0206dcd4
	lsl r1, r4, #0x10
	lsr r1, r1, #0x10
	bl FUN_0206ddc0
	pop {r4, pc}
	.align 2, 0_0206D800: .word 0x0000270F

	arm_func_start FUN_0206d804
FUN_0206d804: ; 0x0206D804
	push {r4, lr}
	mov r4, r0
	bl FUN_0206dcd4
	ldrh r1, [r0, #6]
	mov r0, r4
	add r1, r1, #1
	bl FUN_0206d7cc
	pop {r4, pc}
	arm_func_end FUN_0206d804

	arm_func_start FUN_0206d824
FUN_0206d824: ; 0x0206D824
	push {r3, r4, r5, lr}
	mov r5, r0
	cmp r1, #3
	arm_func_end FUN_0206d824

	arm_func_start switchD
switchD: ; 0x0206D830
	addls pc, pc, r1, lsl #2
	b _0206D860
	arm_func_end switchD
_0206D838: ; jump table
	b _0206D860 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0206D83C
	b _0206D848
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0206D840
	b _0206D850
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0206D844
	b _0206D858
	arm_func_end caseD_3
_0206D848:
	bl FUN_0206d8b8
	pop {r3, r4, r5, pc}
_0206D850:
	bl FUN_0206d8a8
	pop {r3, r4, r5, pc}
_0206D858:
	bl FUN_0206d8c8
	pop {r3, r4, r5, pc}
_0206D860:
	ldr r4, _0206D8A4 ; =0x0209BA20
	mov r0, r4
	bl FUN_020731b4
	cmp r0, #0
	beq _0206D880
	mov r0, r5
	bl FUN_0206d8a8
	pop {r3, r4, r5, pc}
_0206D880:
	mov r0, r4
	bl FUN_020731d0
	cmp r0, #0
	mov r0, r5
	beq _0206D89C
	bl FUN_0206d8c8
	pop {r3, r4, r5, pc}
_0206D89C:
	bl FUN_0206d8b8
	pop {r3, r4, r5, pc}
	.align 2, 0_0206D8A4: .word 0x0209BA20

	arm_func_start FUN_0206d8a8
FUN_0206d8a8: ; 0x0206D8A8
	push {r3, lr}
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x57]
	pop {r3, pc}
	arm_func_end FUN_0206d8a8

	arm_func_start FUN_0206d8b8
FUN_0206d8b8: ; 0x0206D8B8
	push {r3, lr}
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x57]
	pop {r3, pc}
	arm_func_end FUN_0206d8b8

	arm_func_start FUN_0206d8c8
FUN_0206d8c8: ; 0x0206D8C8
	push {r3, lr}
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x57]
	pop {r3, pc}
	arm_func_end FUN_0206d8c8

	arm_func_start FUN_0206d8d8
FUN_0206d8d8: ; 0x0206D8D8
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	cmp r2, #3
	arm_func_end FUN_0206d8d8

	arm_func_start switchD
switchD: ; 0x0206D8E8
	addls pc, pc, r2, lsl #2
	b _0206D918
	arm_func_end switchD
_0206D8F0: ; jump table
	b _0206D918 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0206D8F4
	b _0206D900
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0206D8F8
	b _0206D908
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0206D8FC
	b _0206D910
	arm_func_end caseD_3
_0206D900:
	bl FUN_0206d980
	pop {r4, r5, r6, pc}
_0206D908:
	bl FUN_0206d968
	pop {r4, r5, r6, pc}
_0206D910:
	bl FUN_0206d998
	pop {r4, r5, r6, pc}
_0206D918:
	ldr r4, _0206D964 ; =0x0209BA20
	mov r0, r4
	bl FUN_020731b4
	cmp r0, #0
	beq _0206D93C
	mov r0, r6
	mov r1, r5
	bl FUN_0206d968
	pop {r4, r5, r6, pc}
_0206D93C:
	mov r0, r4
	bl FUN_020731d0
	cmp r0, #0
	mov r0, r6
	mov r1, r5
	beq _0206D95C
	bl FUN_0206d998
	pop {r4, r5, r6, pc}
_0206D95C:
	bl FUN_0206d980
	pop {r4, r5, r6, pc}
	.align 2, 0_0206D964: .word 0x0209BA20

	arm_func_start FUN_0206d968
FUN_0206d968: ; 0x0206D968
	push {r4, lr}
	mov r4, r1
	bl FUN_0206dcd4
	mov r1, r4
	bl FUN_0206e984
	pop {r4, pc}
	arm_func_end FUN_0206d968

	arm_func_start FUN_0206d980
FUN_0206d980: ; 0x0206D980
	push {r4, lr}
	mov r4, r1
	bl FUN_0206dcd4
	mov r1, r4
	bl FUN_0206e84c
	pop {r4, pc}
	arm_func_end FUN_0206d980

	arm_func_start FUN_0206d998
FUN_0206d998: ; 0x0206D998
	push {r4, lr}
	mov r4, r1
	bl FUN_0206dcd4
	mov r1, r4
	bl FUN_0206ea54
	pop {r4, pc}
	arm_func_end FUN_0206d998

	arm_func_start FUN_0206d9b0
FUN_0206d9b0: ; 0x0206D9B0
	push {r3, lr}
	cmp r1, #0
	ldrbne r0, [r0, #0x96]
	popne {r3, pc}
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x58]
	pop {r3, pc}
	arm_func_end FUN_0206d9b0

	arm_func_start FUN_0206d9cc
FUN_0206d9cc: ; 0x0206D9CC
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	cmp r2, #0
	strbne r4, [r5, #0x96]
	popne {r3, r4, r5, pc}
	bl FUN_0206dcd4
	mov r1, r4
	bl FUN_0206e8b4
	strb r4, [r5, #0x96]
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0206d9cc

	arm_func_start FUN_0206d9f8
FUN_0206d9f8: ; 0x0206D9F8
	ldr r1, [r0, #0x88]
	mov r0, #0
	cmp r1, #0
	ldrhne r1, [r1, #0x1e]
	cmpne r1, #0
	movne r0, #1
	bx lr
	arm_func_end FUN_0206d9f8

	arm_func_start FUN_0206da14
FUN_0206da14: ; 0x0206DA14
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	bl FUN_0206d9f8
	cmp r0, #0
	bne _0206DA50
	ldr r0, [r5, #0x88]
	mov r1, r4
	cmp r0, #0
	beq _0206DA48
	ldrsh r0, [r0, #0x26]
	cmp r0, #0
	movle r1, #1
	arm_func_end FUN_0206da14
_0206DA48:
	cmp r1, #0
	movne r4, #1
_0206DA50:
	mov r0, r4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206da58
FUN_0206da58: ; 0x0206DA58
	cmp r1, #0
	bxlt lr
	cmp r1, #0x34
	bxge lr
	ldr r0, [r0, #0x88]
	cmp r0, #0
	strhne r1, [r0, #0x1c]
	bx lr
	arm_func_end FUN_0206da58

	arm_func_start FUN_0206da78
FUN_0206da78: ; 0x0206DA78
	ldr r0, [r0, #0x88]
	ldrh r0, [r0, #0x1c]
	bx lr
	arm_func_end FUN_0206da78

	arm_func_start FUN_0206da84
FUN_0206da84: ; 0x0206DA84
	ldr r0, [r0, #0x88]
	cmp r1, #0
	movlt r1, #0
	strh r1, [r0, #0x22]
	bx lr
	arm_func_end FUN_0206da84

	arm_func_start FUN_0206da98
FUN_0206da98: ; 0x0206DA98
	ldr r1, [r0, #0x88]
	cmp r1, #0
	bxeq lr
	mov r3, #0
	strb r3, [r1, #0x84]
	ldr r2, [r0, #0x88]
	sub r1, r3, #1
	strb r3, [r2, #0x85]
	ldr r0, [r0, #0x88]
	strh r1, [r0, #0x86]
	bx lr
	arm_func_end FUN_0206da98

	arm_func_start FUN_0206dac4
FUN_0206dac4: ; 0x0206DAC4
	ldr r2, [r0, #0x84]
	lsl r0, r1, #0x10
	ldrh r1, [r2, #0x16]
	orr r0, r1, r0, lsr #16
	strh r0, [r2, #0x16]
	bx lr
	arm_func_end FUN_0206dac4

	arm_func_start FUN_0206dadc
FUN_0206dadc: ; 0x0206DADC
	ldr r2, [r0, #0x84]
	mvn r0, r1
	ldrh r1, [r2, #0x16]
	lsl r0, r0, #0x10
	and r0, r1, r0, lsr #16
	strh r0, [r2, #0x16]
	bx lr
	arm_func_end FUN_0206dadc

	arm_func_start FUN_0206daf8
FUN_0206daf8: ; 0x0206DAF8
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4, #0x84]
	cmp r2, #0
	strb r1, [r0, #0x1a]
	popeq {r4, pc}
	mov r0, r1
	bl FUN_020EFD54
	ldr r1, [r4, #0x84]
	strh r0, [r1, #0x18]
	pop {r4, pc}
	arm_func_end FUN_0206daf8

	arm_func_start FUN_0206db24
FUN_0206db24: ; 0x0206DB24
	ldr r0, [r0, #0x84]
	ldrh r0, [r0, #0x16]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206db24

	arm_func_start FUN_0206db3c
FUN_0206db3c: ; 0x0206DB3C
	ldr r0, [r0, #0x84]
	ldrh r0, [r0, #0x16]
	tst r0, #8
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206db3c

	arm_func_start FUN_0206db54
FUN_0206db54: ; 0x0206DB54
	ldr r0, [r0, #0x84]
	ldrh r0, [r0, #0x16]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206db54

	arm_func_start FUN_0206db6c
FUN_0206db6c: ; 0x0206DB6C
	ldr r0, [r0, #0x84]
	ldrh r0, [r0, #0x16]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206db6c

	arm_func_start FUN_0206db84
FUN_0206db84: ; 0x0206DB84
	ldr r0, [r0, #0x84]
	ldrh r0, [r0, #0x16]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206db84

	arm_func_start FUN_0206db9c
FUN_0206db9c: ; 0x0206DB9C
	ldr r0, [r0, #0x84]
	ldrh r0, [r0, #0x16]
	tst r0, #0x400
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_0206db9c

	arm_func_start FUN_0206dbb4
FUN_0206dbb4: ; 0x0206DBB4
	ldr r3, [r0, #0x84]
	cmp r3, #0
	bxeq lr
	ldrb r0, [r3, #0x1c]
	cmp r0, #3
	bne _0206DBD8
	cmp r1, #2
	cmpne r1, #8
	bxeq lr
	arm_func_end FUN_0206dbb4
_0206DBD8:
	cmp r0, #9
	strbne r1, [r3, #0x1c]
	strhne r2, [r3, #0x12]
	movne r0, #0
	strhne r0, [r3, #0x14]
	bx lr

	arm_func_start FUN_0206dbf0
FUN_0206dbf0: ; 0x0206DBF0
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r4, [r5, #0x84]
	mov r0, r4
	bl FUN_020F0298
	ldrb r1, [r4, #0x1b]
	mov r0, r5
	add r1, r1, #4
	lsr r2, r1, #0x1f
	rsb r1, r2, r1, lsl #29
	add r1, r2, r1, ror #29
	strb r1, [r4, #0x1b]
	ldrh r1, [r4, #0x18]
	add r1, r1, #0x8000
	strh r1, [r4, #0x18]
	ldrb r1, [r4, #0x1a]
	add r1, r1, #4
	lsr r2, r1, #0x1f
	rsb r1, r2, r1, lsl #29
	add r1, r2, r1, ror #29
	strb r1, [r4, #0x1a]
	bl FUN_0206d6b0
	cmp r0, #0
	mov r0, r5
	mov r1, #0x20
	beq _0206DC60
	bl FUN_0206d634
	b _0206DC64
	arm_func_end FUN_0206dbf0
_0206DC60:
	bl FUN_0206d620
_0206DC64:
	mov r4, #0
	b _0206DC7C
_0206DC6C:
	add r0, r1, #0x34
	add r0, r0, r4, lsl #3
	bl FUN_020F0298
	add r4, r4, #1
_0206DC7C:
	ldr r1, [r5, #0x88]
	ldrb r0, [r1, #0x85]
	cmp r4, r0
	popge {r3, r4, r5, pc}
	cmp r4, #0xa
	blt _0206DC6C
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206dc98
FUN_0206dc98: ; 0x0206DC98
	ldr r0, [r0, #0x84]
	ldrsb r0, [r0, #0x1e]
	bx lr
	arm_func_end FUN_0206dc98

	arm_func_start FUN_0206dca4
FUN_0206dca4: ; 0x0206DCA4
	push {r4, lr}
	mov r4, r0
	bl FUN_0206ccec
	mov r1, r0
	mov r0, r4
	bl FUN_0206cc9c
	mov r0, r4
	bl FUN_0206cc94
	mov r1, r0
	mov r0, r4
	bl FUN_0206cc44
	pop {r4, pc}
	arm_func_end FUN_0206dca4

	arm_func_start FUN_0206dcd4
FUN_0206dcd4: ; 0x0206DCD4
	ldr r0, [r0, #0x68]
	bx lr
	arm_func_end FUN_0206dcd4

	arm_func_start FUN_0206dcdc
FUN_0206dcdc: ; 0x0206DCDC
	ldr r0, [r0, #0x68]
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_0206dcdc

	arm_func_start FUN_0206dcf0
FUN_0206dcf0: ; 0x0206DCF0
	push {r4, r5, r6, lr}
	ldr r4, _0206DD50 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206DD28
	ldr r0, _0206DD54 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206DD30
	arm_func_end FUN_0206dcf0
_0206DD28:
	str r5, [r6]
	pop {r4, r5, r6, pc}
_0206DD30:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	str r5, [r6]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206DD50: .word 0x0209BA20
_0206DD54: .word 0x0209A11C

	arm_func_start FUN_0206dd58
FUN_0206dd58: ; 0x0206DD58
	push {r4, r5, r6, lr}
	ldr r4, _0206DDB8 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206DD90
	ldr r0, _0206DDBC ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206DD98
	arm_func_end FUN_0206dd58
_0206DD90:
	strh r5, [r6, #4]
	pop {r4, r5, r6, pc}
_0206DD98:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #4]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206DDB8: .word 0x0209BA20
_0206DDBC: .word 0x0209A11C

	arm_func_start FUN_0206ddc0
FUN_0206ddc0: ; 0x0206DDC0
	push {r4, r5, r6, lr}
	ldr r4, _0206DE20 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206DDF8
	ldr r0, _0206DE24 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206DE00
	arm_func_end FUN_0206ddc0
_0206DDF8:
	strh r5, [r6, #6]
	pop {r4, r5, r6, pc}
_0206DE00:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #6]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206DE20: .word 0x0209BA20
_0206DE24: .word 0x0209A11C

	arm_func_start FUN_0206de28
FUN_0206de28: ; 0x0206DE28
	push {r4, r5, r6, lr}
	ldr r4, _0206DE88 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206DE60
	ldr r0, _0206DE8C ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206DE68
	arm_func_end FUN_0206de28
_0206DE60:
	strh r5, [r6, #0xa]
	pop {r4, r5, r6, pc}
_0206DE68:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #0xa]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206DE88: .word 0x0209BA20
_0206DE8C: .word 0x0209A11C

	arm_func_start FUN_0206de90
FUN_0206de90: ; 0x0206DE90
	push {r4, r5, r6, lr}
	ldr r4, _0206DEF0 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206DEC8
	ldr r0, _0206DEF4 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206DED0
	arm_func_end FUN_0206de90
_0206DEC8:
	strh r5, [r6, #0xe]
	pop {r4, r5, r6, pc}
_0206DED0:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #0xe]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206DEF0: .word 0x0209BA20
_0206DEF4: .word 0x0209A11C

	arm_func_start FUN_0206def8
FUN_0206def8: ; 0x0206DEF8
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _0206DF64 ; =0x0209BA20
	mov r7, r0
	mov r0, r4
	mov r6, r1
	mov r5, r2
	bl FUN_02074088
	cmp r0, #0
	bne _0206DF34
	ldr r0, _0206DF68 ; =0x0209A11C
	mov r1, r7
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206DF40
	arm_func_end FUN_0206def8
_0206DF34:
	add r0, r7, r6, lsl #1
	strh r5, [r0, #0x10]
	pop {r3, r4, r5, r6, r7, pc}
_0206DF40:
	mov r0, r4
	mov r1, r7
	bl FUN_0207420c
	add r2, r7, r6, lsl #1
	mov r0, r4
	mov r1, r7
	strh r5, [r2, #0x10]
	bl FUN_020740a4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0206DF64: .word 0x0209BA20
_0206DF68: .word 0x0209A11C

	arm_func_start FUN_0206df6c
FUN_0206df6c: ; 0x0206DF6C
	push {r4, r5, r6, lr}
	ldr r4, _0206DFCC ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206DFA4
	ldr r0, _0206DFD0 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206DFAC
	arm_func_end FUN_0206df6c
_0206DFA4:
	strh r5, [r6, #0x18]
	pop {r4, r5, r6, pc}
_0206DFAC:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #0x18]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206DFCC: .word 0x0209BA20
_0206DFD0: .word 0x0209A11C

	arm_func_start FUN_0206dfd4
FUN_0206dfd4: ; 0x0206DFD4
	push {r4, r5, r6, lr}
	ldr r4, _0206E034 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E00C
	ldr r0, _0206E038 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E014
	arm_func_end FUN_0206dfd4
_0206E00C:
	strh r5, [r6, #0x1a]
	pop {r4, r5, r6, pc}
_0206E014:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #0x1a]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E034: .word 0x0209BA20
_0206E038: .word 0x0209A11C

	arm_func_start FUN_0206e03c
FUN_0206e03c: ; 0x0206E03C
	push {r4, r5, r6, r7, r8, lr}
	ldr r6, _0206E0B4 ; =0x0209BA20
	mov r5, r0
	mov r0, r6
	mov r8, r1
	mov r7, r2
	mov r4, r3
	bl FUN_02074088
	cmp r0, #0
	bne _0206E07C
	ldr r0, _0206E0B8 ; =0x0209A11C
	mov r1, r5
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E08C
	arm_func_end FUN_0206e03c
_0206E07C:
	add r0, r7, r8, lsl #1
	add r0, r5, r0, lsl #1
	strh r4, [r0, #0x1c]
	pop {r4, r5, r6, r7, r8, pc}
_0206E08C:
	mov r0, r6
	mov r1, r5
	bl FUN_0207420c
	add r0, r7, r8, lsl #1
	add r2, r5, r0, lsl #1
	mov r0, r6
	mov r1, r5
	strh r4, [r2, #0x1c]
	bl FUN_020740a4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0206E0B4: .word 0x0209BA20
_0206E0B8: .word 0x0209A11C

	arm_func_start FUN_0206e0bc
FUN_0206e0bc: ; 0x0206E0BC
	push {r4, r5, r6, lr}
	ldr r4, _0206E11C ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E0F4
	ldr r0, _0206E120 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E0FC
	arm_func_end FUN_0206e0bc
_0206E0F4:
	strh r5, [r6, #0x34]
	pop {r4, r5, r6, pc}
_0206E0FC:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #0x34]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E11C: .word 0x0209BA20
_0206E120: .word 0x0209A11C

	arm_func_start FUN_0206e124
FUN_0206e124: ; 0x0206E124
	push {r4, r5, r6, lr}
	ldr r4, _0206E184 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E15C
	ldr r0, _0206E188 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E164
	arm_func_end FUN_0206e124
_0206E15C:
	strh r5, [r6, #0x36]
	pop {r4, r5, r6, pc}
_0206E164:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #0x36]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E184: .word 0x0209BA20
_0206E188: .word 0x0209A11C

	arm_func_start FUN_0206e18c
FUN_0206e18c: ; 0x0206E18C
	push {r4, r5, r6, lr}
	ldr r5, _0206E204 ; =0x0209BA20
	mov r4, r0
	mov r0, r5
	mov r6, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E1C4
	ldr r0, _0206E208 ; =0x0209A11C
	mov r1, r4
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E1D8
	arm_func_end FUN_0206e18c
_0206E1C4:
	ldrh r1, [r4, #0x5a]
	lsl r0, r6, #0x10
	orr r0, r1, r0, lsr #16
	strh r0, [r4, #0x5a]
	pop {r4, r5, r6, pc}
_0206E1D8:
	mov r0, r5
	mov r1, r4
	bl FUN_0207420c
	ldrh r2, [r4, #0x5a]
	lsl r1, r6, #0x10
	mov r0, r5
	orr r2, r2, r1, lsr #16
	mov r1, r4
	strh r2, [r4, #0x5a]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E204: .word 0x0209BA20
_0206E208: .word 0x0209A11C

	arm_func_start FUN_0206e20c
FUN_0206e20c: ; 0x0206E20C
	push {r4, r5, r6, lr}
	ldr r5, _0206E28C ; =0x0209BA20
	mov r4, r0
	mov r0, r5
	mov r6, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E244
	ldr r0, _0206E290 ; =0x0209A11C
	mov r1, r4
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E25C
	arm_func_end FUN_0206e20c
_0206E244:
	ldrh r1, [r4, #0x5a]
	mvn r0, r6
	lsl r0, r0, #0x10
	and r0, r1, r0, lsr #16
	strh r0, [r4, #0x5a]
	pop {r4, r5, r6, pc}
_0206E25C:
	mov r0, r5
	mov r1, r4
	bl FUN_0207420c
	mvn r0, r6
	ldrh r2, [r4, #0x5a]
	lsl r1, r0, #0x10
	mov r0, r5
	and r2, r2, r1, lsr #16
	mov r1, r4
	strh r2, [r4, #0x5a]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E28C: .word 0x0209BA20
_0206E290: .word 0x0209A11C

	arm_func_start FUN_0206e294
FUN_0206e294: ; 0x0206E294
	push {r4, r5, r6, lr}
	ldr r6, _0206E34C ; =0x0209BA20
	mov r5, r0
	mov r0, r6
	mov r4, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E2CC
	ldr r0, _0206E350 ; =0x0209A11C
	mov r1, r5
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E300
	arm_func_end FUN_0206e294
_0206E2CC:
	sub r2, r4, #1
	mov r6, #0
	mov r3, #0x1000
_0206E2D8:
	add r1, r5, r6, lsl #1
	ldrh r0, [r1, #0x1c]
	cmp r4, #0
	add r6, r6, #1
	bic r0, r0, #0xf000
	orrne r0, r0, r3, lsl r2
	strh r0, [r1, #0x1c]
	cmp r6, #0xc
	blt _0206E2D8
	pop {r4, r5, r6, pc}
_0206E300:
	mov r0, r6
	mov r1, r5
	bl FUN_0207420c
	sub r2, r4, #1
	mov r6, #0
	mov r3, #0x1000
_0206E318:
	add r1, r5, r6, lsl #1
	ldrh r0, [r1, #0x1c]
	cmp r4, #0
	add r6, r6, #1
	bic r0, r0, #0xf000
	orrne r0, r0, r3, lsl r2
	strh r0, [r1, #0x1c]
	cmp r6, #0xc
	blt _0206E318
	ldr r0, _0206E34C ; =0x0209BA20
	mov r1, r5
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E34C: .word 0x0209BA20
_0206E350: .word 0x0209A11C

	arm_func_start FUN_0206e354
FUN_0206e354: ; 0x0206E354
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _0206E3C0 ; =0x0209BA20
	mov r7, r0
	mov r0, r4
	mov r6, r1
	mov r5, r2
	bl FUN_02074088
	cmp r0, #0
	bne _0206E390
	ldr r0, _0206E3C4 ; =0x0209A11C
	mov r1, r7
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E39C
	arm_func_end FUN_0206e354
_0206E390:
	add r0, r7, r6, lsl #1
	strh r5, [r0, #0x38]
	pop {r3, r4, r5, r6, r7, pc}
_0206E39C:
	mov r0, r4
	mov r1, r7
	bl FUN_0207420c
	add r2, r7, r6, lsl #1
	mov r0, r4
	mov r1, r7
	strh r5, [r2, #0x38]
	bl FUN_020740a4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0206E3C0: .word 0x0209BA20
_0206E3C4: .word 0x0209A11C

	arm_func_start FUN_0206e3c8
FUN_0206e3c8: ; 0x0206E3C8
	push {r3, r4, r5, r6, r7, lr}
	ldr r4, _0206E434 ; =0x0209BA20
	mov r7, r0
	mov r0, r4
	mov r6, r1
	mov r5, r2
	bl FUN_02074088
	cmp r0, #0
	bne _0206E404
	ldr r0, _0206E438 ; =0x0209A11C
	mov r1, r7
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E410
	arm_func_end FUN_0206e3c8
_0206E404:
	add r0, r7, r6
	strb r5, [r0, #0x44]
	pop {r3, r4, r5, r6, r7, pc}
_0206E410:
	mov r0, r4
	mov r1, r7
	bl FUN_0207420c
	add r2, r7, r6
	mov r0, r4
	mov r1, r7
	strb r5, [r2, #0x44]
	bl FUN_020740a4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0206E434: .word 0x0209BA20
_0206E438: .word 0x0209A11C

	arm_func_start FUN_0206e43c
FUN_0206e43c: ; 0x0206E43C
	push {r4, r5, r6, lr}
	ldr r4, _0206E49C ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E474
	ldr r0, _0206E4A0 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E47C
	arm_func_end FUN_0206e43c
_0206E474:
	strb r5, [r6, #0x4a]
	pop {r4, r5, r6, pc}
_0206E47C:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x4a]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E49C: .word 0x0209BA20
_0206E4A0: .word 0x0209A11C

	arm_func_start FUN_0206e4a4
FUN_0206e4a4: ; 0x0206E4A4
	push {r4, r5, r6, lr}
	ldr r4, _0206E504 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E4DC
	ldr r0, _0206E508 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E4E4
	arm_func_end FUN_0206e4a4
_0206E4DC:
	strb r5, [r6, #0x4b]
	pop {r4, r5, r6, pc}
_0206E4E4:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x4b]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E504: .word 0x0209BA20
_0206E508: .word 0x0209A11C

	arm_func_start FUN_0206e50c
FUN_0206e50c: ; 0x0206E50C
	push {r4, r5, r6, lr}
	ldr r4, _0206E56C ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E544
	ldr r0, _0206E570 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E54C
	arm_func_end FUN_0206e50c
_0206E544:
	strb r5, [r6, #0x4f]
	pop {r4, r5, r6, pc}
_0206E54C:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x4f]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E56C: .word 0x0209BA20
_0206E570: .word 0x0209A11C

	arm_func_start FUN_0206e574
FUN_0206e574: ; 0x0206E574
	push {r4, r5, r6, lr}
	ldr r4, _0206E5D4 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E5AC
	ldr r0, _0206E5D8 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E5B4
	arm_func_end FUN_0206e574
_0206E5AC:
	strb r5, [r6, #0x50]
	pop {r4, r5, r6, pc}
_0206E5B4:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x50]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E5D4: .word 0x0209BA20
_0206E5D8: .word 0x0209A11C

	arm_func_start FUN_0206e5dc
FUN_0206e5dc: ; 0x0206E5DC
	push {r4, r5, r6, lr}
	ldr r4, _0206E63C ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E614
	ldr r0, _0206E640 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E61C
	arm_func_end FUN_0206e5dc
_0206E614:
	strb r5, [r6, #0x51]
	pop {r4, r5, r6, pc}
_0206E61C:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x51]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E63C: .word 0x0209BA20
_0206E640: .word 0x0209A11C

	arm_func_start FUN_0206e644
FUN_0206e644: ; 0x0206E644
	push {r4, r5, r6, lr}
	ldr r4, _0206E6A4 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E67C
	ldr r0, _0206E6A8 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E684
	arm_func_end FUN_0206e644
_0206E67C:
	strb r5, [r6, #0x52]
	pop {r4, r5, r6, pc}
_0206E684:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x52]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E6A4: .word 0x0209BA20
_0206E6A8: .word 0x0209A11C

	arm_func_start FUN_0206e6ac
FUN_0206e6ac: ; 0x0206E6AC
	push {r4, r5, r6, lr}
	ldr r4, _0206E70C ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E6E4
	ldr r0, _0206E710 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E6EC
	arm_func_end FUN_0206e6ac
_0206E6E4:
	strb r5, [r6, #0x53]
	pop {r4, r5, r6, pc}
_0206E6EC:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x53]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E70C: .word 0x0209BA20
_0206E710: .word 0x0209A11C

	arm_func_start FUN_0206e714
FUN_0206e714: ; 0x0206E714
	push {r4, r5, r6, lr}
	ldr r4, _0206E774 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E74C
	ldr r0, _0206E778 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E754
	arm_func_end FUN_0206e714
_0206E74C:
	strb r5, [r6, #0x54]
	pop {r4, r5, r6, pc}
_0206E754:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x54]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E774: .word 0x0209BA20
_0206E778: .word 0x0209A11C

	arm_func_start FUN_0206e77c
FUN_0206e77c: ; 0x0206E77C
	push {r4, r5, r6, lr}
	ldr r4, _0206E7DC ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E7B4
	ldr r0, _0206E7E0 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E7BC
	arm_func_end FUN_0206e77c
_0206E7B4:
	strb r5, [r6, #0x55]
	pop {r4, r5, r6, pc}
_0206E7BC:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x55]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E7DC: .word 0x0209BA20
_0206E7E0: .word 0x0209A11C

	arm_func_start FUN_0206e7e4
FUN_0206e7e4: ; 0x0206E7E4
	push {r4, r5, r6, lr}
	ldr r4, _0206E844 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E81C
	ldr r0, _0206E848 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E824
	arm_func_end FUN_0206e7e4
_0206E81C:
	strb r5, [r6, #0x56]
	pop {r4, r5, r6, pc}
_0206E824:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x56]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E844: .word 0x0209BA20
_0206E848: .word 0x0209A11C

	arm_func_start FUN_0206e84c
FUN_0206e84c: ; 0x0206E84C
	push {r4, r5, r6, lr}
	ldr r4, _0206E8AC ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E884
	ldr r0, _0206E8B0 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E88C
	arm_func_end FUN_0206e84c
_0206E884:
	strb r5, [r6, #0x57]
	pop {r4, r5, r6, pc}
_0206E88C:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x57]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E8AC: .word 0x0209BA20
_0206E8B0: .word 0x0209A11C

	arm_func_start FUN_0206e8b4
FUN_0206e8b4: ; 0x0206E8B4
	push {r4, r5, r6, lr}
	ldr r4, _0206E914 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E8EC
	ldr r0, _0206E918 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E8F4
	arm_func_end FUN_0206e8b4
_0206E8EC:
	strb r5, [r6, #0x58]
	pop {r4, r5, r6, pc}
_0206E8F4:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x58]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E914: .word 0x0209BA20
_0206E918: .word 0x0209A11C

	arm_func_start FUN_0206e91c
FUN_0206e91c: ; 0x0206E91C
	push {r4, r5, r6, lr}
	ldr r4, _0206E97C ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E954
	ldr r0, _0206E980 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E95C
	arm_func_end FUN_0206e91c
_0206E954:
	strh r5, [r6, #0x5a]
	pop {r4, r5, r6, pc}
_0206E95C:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strh r5, [r6, #0x5a]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E97C: .word 0x0209BA20
_0206E980: .word 0x0209A11C

	arm_func_start FUN_0206e984
FUN_0206e984: ; 0x0206E984
	push {r4, r5, r6, lr}
	ldr r4, _0206E9E4 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206E9BC
	ldr r0, _0206E9E8 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206E9C4
	arm_func_end FUN_0206e984
_0206E9BC:
	strb r5, [r6, #0x57]
	pop {r4, r5, r6, pc}
_0206E9C4:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x57]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206E9E4: .word 0x0209BA20
_0206E9E8: .word 0x0209A11C

	arm_func_start FUN_0206e9ec
FUN_0206e9ec: ; 0x0206E9EC
	push {r4, r5, r6, lr}
	ldr r4, _0206EA4C ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206EA24
	ldr r0, _0206EA50 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206EA2C
	arm_func_end FUN_0206e9ec
_0206EA24:
	strb r5, [r6, #0x5d]
	pop {r4, r5, r6, pc}
_0206EA2C:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x5d]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206EA4C: .word 0x0209BA20
_0206EA50: .word 0x0209A11C

	arm_func_start FUN_0206ea54
FUN_0206ea54: ; 0x0206EA54
	push {r4, r5, r6, lr}
	ldr r4, _0206EAB4 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206EA8C
	ldr r0, _0206EAB8 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206EA94
	arm_func_end FUN_0206ea54
_0206EA8C:
	strb r5, [r6, #0x57]
	pop {r4, r5, r6, pc}
_0206EA94:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x57]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206EAB4: .word 0x0209BA20
_0206EAB8: .word 0x0209A11C

	arm_func_start FUN_0206eabc
FUN_0206eabc: ; 0x0206EABC
	push {r4, r5, r6, lr}
	ldr r4, _0206EB1C ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206EAF4
	ldr r0, _0206EB20 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206EAFC
	arm_func_end FUN_0206eabc
_0206EAF4:
	strb r5, [r6, #0x5f]
	pop {r4, r5, r6, pc}
_0206EAFC:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x5f]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206EB1C: .word 0x0209BA20
_0206EB20: .word 0x0209A11C

	arm_func_start FUN_0206eb24
FUN_0206eb24: ; 0x0206EB24
	push {r4, r5, r6, lr}
	ldr r4, _0206EB84 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206EB5C
	ldr r0, _0206EB88 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206EB64
	arm_func_end FUN_0206eb24
_0206EB5C:
	strb r5, [r6, #0x60]
	pop {r4, r5, r6, pc}
_0206EB64:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x60]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206EB84: .word 0x0209BA20
_0206EB88: .word 0x0209A11C

	arm_func_start FUN_0206eb8c
FUN_0206eb8c: ; 0x0206EB8C
	push {r4, r5, r6, lr}
	ldr r4, _0206EBEC ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206EBC4
	ldr r0, _0206EBF0 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206EBCC
	arm_func_end FUN_0206eb8c
_0206EBC4:
	strb r5, [r6, #0x61]
	pop {r4, r5, r6, pc}
_0206EBCC:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x61]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206EBEC: .word 0x0209BA20
_0206EBF0: .word 0x0209A11C

	arm_func_start FUN_0206ebf4
FUN_0206ebf4: ; 0x0206EBF4
	push {r4, r5, r6, lr}
	ldr r4, _0206EC54 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206EC2C
	ldr r0, _0206EC58 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206EC34
	arm_func_end FUN_0206ebf4
_0206EC2C:
	strb r5, [r6, #0x62]
	pop {r4, r5, r6, pc}
_0206EC34:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x62]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206EC54: .word 0x0209BA20
_0206EC58: .word 0x0209A11C

	arm_func_start FUN_0206ec5c
FUN_0206ec5c: ; 0x0206EC5C
	push {r4, r5, r6, lr}
	ldr r4, _0206ECBC ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206EC94
	ldr r0, _0206ECC0 ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206EC9C
	arm_func_end FUN_0206ec5c
_0206EC94:
	strb r5, [r6, #0x63]
	pop {r4, r5, r6, pc}
_0206EC9C:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r4
	mov r1, r6
	strb r5, [r6, #0x63]
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206ECBC: .word 0x0209BA20
_0206ECC0: .word 0x0209A11C

	arm_func_start FUN_0206ecc4
FUN_0206ecc4: ; 0x0206ECC4
	push {r3, r4, r5, lr}
	ldr r4, _0206ED38 ; =0x0209BA20
	mov r5, r0
	mov r0, r4
	bl FUN_02074088
	cmp r0, #0
	bne _0206ECF8
	ldr r0, _0206ED3C ; =0x0209A11C
	mov r1, r5
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206ED0C
	arm_func_end FUN_0206ecc4
_0206ECF8:
	mov r0, r5
	mov r1, #0
	mov r2, #0x6c
	bl MemWrite
	pop {r3, r4, r5, pc}
_0206ED0C:
	mov r0, r4
	mov r1, r5
	bl FUN_0207420c
	mov r0, r5
	mov r1, #0
	mov r2, #0x6c
	bl MemWrite
	mov r0, r4
	mov r1, r5
	bl FUN_020740a4
	pop {r3, r4, r5, pc}
	.align 2, 0_0206ED38: .word 0x0209BA20
_0206ED3C: .word 0x0209A11C

	arm_func_start FUN_0206ed40
FUN_0206ed40: ; 0x0206ED40
	push {r4, r5, r6, lr}
	ldr r4, _0206EDB8 ; =0x0209BA20
	mov r6, r0
	mov r0, r4
	mov r5, r1
	bl FUN_02074088
	cmp r0, #0
	bne _0206ED78
	ldr r0, _0206EDBC ; =0x0209A11C
	mov r1, r6
	ldr r0, [r0]
	bl FUN_0206c820
	cmp r0, #0
	bne _0206ED8C
	arm_func_end FUN_0206ed40
_0206ED78:
	mov r0, r5
	mov r1, r6
	mov r2, #0x6c
	bl _memcpy
	pop {r4, r5, r6, pc}
_0206ED8C:
	mov r0, r4
	mov r1, r6
	bl FUN_0207420c
	mov r0, r5
	mov r1, r6
	mov r2, #0x6c
	bl _memcpy
	mov r0, r4
	mov r1, r6
	bl FUN_020740a4
	pop {r4, r5, r6, pc}
	.align 2, 0_0206EDB8: .word 0x0209BA20
_0206EDBC: .word 0x0209A11C

	arm_func_start FUN_0206edc0
FUN_0206edc0: ; 0x0206EDC0
	mov r2, #0
	ldr r0, _0206EDE0 ; =0x020B9D54
	mov r1, r2
	arm_func_end FUN_0206edc0
_0206EDCC:
	str r1, [r0, r2, lsl #2]
	add r2, r2, #1
	cmp r2, #0x10
	blt _0206EDCC
	bx lr
	.align 2, 0_0206EDE0: .word 0x020B9D54

	arm_func_start FUN_0206ede4
FUN_0206ede4: ; 0x0206EDE4
	ldr r2, _0206EE14 ; =0x020B9D50
	ldr r0, [r2]
	add r0, r0, r0
	add r0, r0, r0
	ldr r2, _0206EE18 ; =0x020B9D54
	add r2, r2, r0
	mov r0, #0
	str r0, [r2]
	ldr r2, _0206EE1C ; =0x020B9D4C
	ldr sp, [r2]
	pop {lr}
	mov pc, lr
	.align 2, 0_0206EE14: .word 0x020B9D50
_0206EE18: .word 0x020B9D54
_0206EE1C: .word 0x020B9D4C
	arm_func_end FUN_0206ede4

	arm_func_start FUN_0206ee20
FUN_0206ee20: ; 0x0206EE20
	str lr, [sp, #-4]!
	ldr r2, _0206EE50 ; =0x020B9D50
	ldr r0, [r2]
	add r0, r0, r0
	add r0, r0, r0
	ldr r2, _0206EE54 ; =0x020B9D54
	add r2, r2, r0
	str sp, [r2]
	ldr r2, _0206EE58 ; =0x020B9D4C
	ldr sp, [r2]
	pop {lr}
	mov pc, lr
	.align 2, 0_0206EE50: .word 0x020B9D50
_0206EE54: .word 0x020B9D54
_0206EE58: .word 0x020B9D4C
	arm_func_end FUN_0206ee20

	arm_func_start FUN_0206ee5c
FUN_0206ee5c: ; 0x0206EE5C
	str lr, [sp, #-4]!
	str fp, [sp, #-4]!
	str sl, [sp, #-4]!
	str sb, [sp, #-4]!
	str r8, [sp, #-4]!
	str r7, [sp, #-4]!
	str r6, [sp, #-4]!
	str r5, [sp, #-4]!
	str r4, [sp, #-4]!
	str r3, [sp, #-4]!
	str r2, [sp, #-4]!
	str r1, [sp, #-4]!
	str r0, [sp, #-4]!
	bl FUN_0206ee20
	b LAB_0206ee98
	arm_func_end FUN_0206ee5c

	arm_func_start LAB_0206ee98
LAB_0206ee98: ; 0x0206EE98
	pop {r0}
	pop {r1}
	pop {r2}
	pop {r3}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {sb}
	pop {sl}
	pop {fp}
	pop {r2}
	mov pc, r2
	arm_func_end LAB_0206ee98

	arm_func_start FUN_0206eed0
FUN_0206eed0: ; 0x0206EED0
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, #0
	cmp r5, #0
	pople {r3, r4, r5, pc}
	arm_func_end FUN_0206eed0
_0206EEE4:
	bl FUN_0206ee5c
	add r4, r4, #1
	cmp r4, r5
	blt _0206EEE4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206eef8
FUN_0206eef8: ; 0x0206EEF8
	push {r3, lr}
	ldr r1, _0206EF18 ; =0x020B9D4C
	ldr r2, _0206EF1C ; =0x020B9D94
	ldr r1, [r1, #4]
	ldr r1, [r2, r1, lsl #2]
	blx r1
	bl FUN_0206ede4
	pop {r3, pc}
	.align 2, 0_0206EF18: .word 0x020B9D4C
_0206EF1C: .word 0x020B9D94
	arm_func_end FUN_0206eef8

	arm_func_start FUN_0206ef20
FUN_0206ef20: ; 0x0206EF20
	str r0, [r2, #-4]!
	str fp, [r2, #-4]!
	str sl, [r2, #-4]!
	str sb, [r2, #-4]!
	str r8, [r2, #-4]!
	str r7, [r2, #-4]!
	str r6, [r2, #-4]!
	str r5, [r2, #-4]!
	str r4, [r2, #-4]!
	str r3, [r2, #-4]!
	str r2, [r2, #-4]!
	str r1, [r2, #-4]!
	str r1, [r2, #-4]!
	ldr r0, _0206EF98 ; =LAB_0206ee98
	str r0, [r2, #-4]!
	mov r3, #0
	ldr ip, _0206EF9C ; =0x020B9D54
	arm_func_end FUN_0206ef20
_0206EF64:
	ldr r0, [ip]
	tst r0, r0
	beq _0206EF8C
	add ip, ip, #4
	add r3, r3, #1
	cmp r3, #0x10
	bne _0206EF64
	mov r0, #0
	sub r0, r0, #1
	b _0206EF94
_0206EF8C:
	str r2, [ip]
	mov r0, r3
_0206EF94:
	mov pc, lr
	.align 2, 0_0206EF98: .word LAB_0206ee98
_0206EF9C: .word 0x020B9D54

	arm_func_start FUN_0206efa0
FUN_0206efa0: ; 0x0206EFA0
	push {r4, lr}
	mov r4, r0
	ldr r0, _0206EFBC ; =FUN_0206eef8
	bl FUN_0206ef20
	ldr r1, _0206EFC0 ; =0x020B9D94
	str r4, [r1, r0, lsl #2]
	pop {r4, pc}
	.align 2, 0_0206EFBC: .word FUN_0206eef8
_0206EFC0: .word 0x020B9D94
	arm_func_end FUN_0206efa0

	arm_func_start FUN_0206efc4
FUN_0206efc4: ; 0x0206EFC4
	ldr r1, _0206EFD4 ; =0x020B9D54
	mov r2, #0
	str r2, [r1, r0, lsl #2]
	bx lr
	.align 2, 0_0206EFD4: .word 0x020B9D54
	arm_func_end FUN_0206efc4

	arm_func_start FUN_0206efd8
FUN_0206efd8: ; 0x0206EFD8
	str lr, [sp, #-4]!
	ldr r2, _0206F008 ; =0x020B9D4C
	str sp, [r2]
	ldr r2, _0206F00C ; =0x020B9D50
	ldr r1, [r2]
	add r1, r1, r1
	add r1, r1, r1
	ldr r2, _0206F010 ; =0x020B9D54
	add r2, r2, r1
	ldr sp, [r2]
	pop {r1}
	mov pc, r1
	.align 2, 0_0206F008: .word 0x020B9D4C
_0206F00C: .word 0x020B9D50
_0206F010: .word 0x020B9D54
	arm_func_end FUN_0206efd8

	arm_func_start FUN_0206f014
FUN_0206f014: ; 0x0206F014
	mov r1, #0
	ldr r2, _0206F0B0 ; =0x020B9D54
	arm_func_end FUN_0206f014
_0206F01C:
	ldr r0, _0206F0B4 ; =0x020B9D50
	str r1, [r0]
	ldr r0, [r2]
	tst r0, r0
	beq _0206F09C
	str lr, [sp, #-4]!
	str fp, [sp, #-4]!
	str sl, [sp, #-4]!
	str sb, [sp, #-4]!
	str r8, [sp, #-4]!
	str r7, [sp, #-4]!
	str r6, [sp, #-4]!
	str r5, [sp, #-4]!
	str r4, [sp, #-4]!
	str r3, [sp, #-4]!
	str r2, [sp, #-4]!
	str r1, [sp, #-4]!
	str r0, [sp, #-4]!
	bl FUN_0206efd8
	pop {r0}
	pop {r1}
	pop {r2}
	pop {r3}
	pop {r4}
	pop {r5}
	pop {r6}
	pop {r7}
	pop {r8}
	pop {sb}
	pop {sl}
	pop {fp}
	pop {lr}
_0206F09C:
	add r2, r2, #4
	add r1, r1, #1
	cmp r1, #0x10
	bne _0206F01C
	mov pc, lr
	.align 2, 0_0206F0B0: .word 0x020B9D54
_0206F0B4: .word 0x020B9D50

	arm_func_start FUN_0206f0b8
FUN_0206f0b8: ; 0x0206F0B8
	ldr r3, _0206F14C ; =0x020912F8
	mov r2, #0
	add r1, r0, #0x700
	str r3, [r0]
	str r2, [r0, #0x7bc]
	strh r2, [r1, #0xc4]
	str r2, [r0, #0x7cc]
	str r2, [r0, #0x7d0]
	str r2, [r0, #0x7d4]
	str r2, [r0, #0x7dc]
	str r2, [r0, #0x7e0]
	str r2, [r0, #0x7e4]
	str r2, [r0, #0x7e8]
	str r2, [r0, #0x7ec]
	str r2, [r0, #0x7f0]
	str r2, [r0, #0x7f4]
	str r2, [r0, #0x800]
	str r2, [r0, #0x804]
	str r2, [r0, #0x808]
	str r2, [r0, #0x80c]
	str r2, [r0, #0x810]
	str r2, [r0, #0x814]
	str r2, [r0, #0x818]
	str r2, [r0, #0x81c]
	str r2, [r0, #0x820]
	str r2, [r0, #0x824]
	str r2, [r0, #0x828]
	str r2, [r0, #0x82c]
	str r2, [r0, #0x830]
	str r2, [r0, #0x838]
	str r2, [r0, #0x83c]
	str r2, [r0, #0x844]
	strb r2, [r0, #0x849]
	strb r2, [r0, #0x88f]
	strb r2, [r0, #0x890]
	str r2, [r0, #0x89c]
	bx lr
	.align 2, 0_0206F14C: .word 0x020912F8
	arm_func_end FUN_0206f0b8

	arm_func_start FUN_0206f150
FUN_0206f150: ; 0x0206F150
	push {r4, lr}
	ldr r1, _0206F16C ; =0x020912F8
	mov r4, r0
	str r1, [r4]
	bl FUN_0206f198
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0206F16C: .word 0x020912F8
	arm_func_end FUN_0206f150

	arm_func_start FUN_0206f170
FUN_0206f170: ; 0x0206F170
	push {r4, lr}
	ldr r1, _0206F194 ; =0x020912F8
	mov r4, r0
	str r1, [r4]
	bl FUN_0206f198
	mov r0, r4
	bl FUN_0201e078
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0206F194: .word 0x020912F8
	arm_func_end FUN_0206f170

	arm_func_start FUN_0206f198
FUN_0206f198: ; 0x0206F198
	bx lr
	arm_func_end FUN_0206f198

	arm_func_start FUN_0206f19c
FUN_0206f19c: ; 0x0206F19C
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r3, #3
	mov ip, #1
	mov r1, #0xb
	arm_func_end FUN_0206f19c
_0206F1B0:
	mla r5, r4, r1, r0
	mov lr, ip
	strb ip, [r5, #0x84a]
_0206F1BC:
	add r2, r5, lr
	add lr, lr, #1
	strb r3, [r2, #0x84a]
	cmp lr, #0xb
	blt _0206F1BC
	add r4, r4, #1
	cmp r4, #2
	blt _0206F1B0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0206f1e0
FUN_0206f1e0: ; 0x0206F1E0
	mov r1, #0
	str r1, [r0, #0x7d0]
	str r1, [r0, #0x7d4]
	str r1, [r0, #0x7d8]
	str r1, [r0, #0x7dc]
	str r1, [r0, #0x7fc]
	str r1, [r0, #0x7e0]
	str r1, [r0, #0x7e4]
	str r1, [r0, #0x7e8]
	str r1, [r0, #0x7ec]
	str r1, [r0, #0x7f0]
	str r1, [r0, #0x7f4]
	str r1, [r0, #0x808]
	str r1, [r0, #0x80c]
	str r1, [r0, #0x810]
	str r1, [r0, #0x814]
	str r1, [r0, #0x818]
	str r1, [r0, #0x81c]
	str r1, [r0, #0x820]
	str r1, [r0, #0x824]
	str r1, [r0, #0x828]
	str r1, [r0, #0x82c]
	str r1, [r0, #0x830]
	str r1, [r0, #0x800]
	bx lr
	arm_func_end FUN_0206f1e0

	arm_func_start FUN_0206f244
FUN_0206f244: ; 0x0206F244
	push {r3, r4, r5, lr}
	ldr r5, _0206F298 ; =0x0000FFFF
	add r1, r0, #0x800
	strh r5, [r1, #0x6e]
	strh r5, [r1, #0x72]
	ldrh r4, [r1, #0x6e]
	mov ip, #0
	ldrh lr, [r1, #0x72]
	add r2, r0, #0x700
	mov r3, #1
	strh r4, [r1, #0x6c]
	strh lr, [r1, #0x70]
	strh r5, [r1, #0x74]
	strb ip, [r0, #0x87e]
	strb ip, [r0, #0x88c]
	strb r3, [r0, #0x889]
	strb ip, [r0, #0x88a]
	strh ip, [r1, #0x76]
	strb ip, [r0, #0x882]
	strh ip, [r2, #0xc4]
	pop {r3, r4, r5, pc}
	.align 2, 0_0206F298: .word 0x0000FFFF
	arm_func_end FUN_0206f244

	arm_func_start FUN_0206f29c
FUN_0206f29c: ; 0x0206F29C
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	ldr r0, _0206F57C ; =0x02099F78
	ldr r1, _0206F580 ; =0x02091300
	mov r4, #1
	mov r5, #0
	bl FUN_020418b0
	add r1, r6, #0x700
	strh r0, [r1, #0xc0]
	ldrh r0, [r1, #0xc0]
	cmp r0, #0
	moveq r0, #0xc
	strheq r0, [r1, #0xc0]
	ldr r0, [r6, #0x81c]
	cmp r0, #0
	bne _0206F2FC
	mov r7, #0x1b00
	ldr r0, _0206F584 ; =0x0209A250
	mov r1, r7
	bl FUN_0202de44
	mov r2, r7
	mov r1, #0
	str r0, [r6, #0x81c]
	bl MemWrite
	arm_func_end FUN_0206f29c
_0206F2FC:
	ldr r0, [r6, #0x810]
	cmp r0, #0
	bne _0206F318
	ldr r0, _0206F584 ; =0x0209A250
	mov r1, #0x200
	bl FUN_0202de44
	str r0, [r6, #0x810]
_0206F318:
	ldr r1, [r6, #0x810]
	mov r0, r5
	mov r2, #0x200
	bl FUN_02007838
	ldr r0, [r6, #0x7f4]
	cmp r0, #0
	bne _0206F354
	mov r7, #0x1400
	ldr r0, _0206F584 ; =0x0209A250
	mov r1, r7
	bl FUN_0202de44
	mov r1, r5
	mov r2, r7
	str r0, [r6, #0x7f4]
	bl MemWrite
_0206F354:
	ldr r0, _0206F584 ; =0x0209A250
	ldr r1, _0206F588 ; =0x000004EC
	str r5, [r6, #0x7f8]
	bl FUN_0202de44
	str r0, [r6, #0x800]
	mov r0, r6
	bl FUN_020EF2BC
	mov r0, r6
	bl FUN_020EF41C
	mov r0, r6
	bl FUN_020713e4
	mov r0, r6
	bl FUN_020716a4
	mov r0, r6
	bl FUN_0207171c
	mov r0, r6
	bl FUN_020719e0
	mov r0, r6
	bl FUN_02071968
	mov r0, r6
	bl FUN_02071458
	mov r0, r6
	bl FUN_020EECA0
	mov r0, r6
	bl FUN_02071aac
	mov r0, r6
	bl FUN_020717a8
	mov r0, r6
	bl FUN_02071b24
	mov r0, r6
	bl FUN_020724f4
	mov r0, r6
	mov r1, #1
	bl FUN_0206f9dc
	add r0, r6, #0xc
	add r0, r0, #0x400
	mov r1, r5
	mov r2, #0xc0
	bl MemWrite
	add r0, r6, #0xcc
	add r0, r0, #0x400
	mov r1, r5
	mov r2, #0x20
	bl MemWrite
	add r0, r6, #0x2bc
	mov r1, r5
	mov r2, #0x30
	bl MemWrite
	ldr r0, [r6, #0x860]
	cmp r0, #0
	bne _0206F438
	mov r0, #0x1c
	bl FUN_0201e014
	cmp r0, #0
	beq _0206F434
	bl FUN_02043ac8
_0206F434:
	str r0, [r6, #0x860]
_0206F438:
	ldr r0, [r6, #0x860]
	bl FUN_02043b30
	ldr r0, [r6, #0x860]
	bl FUN_02043b44
	mov r0, r6
	mov r1, #2
	bl FUN_0207287c
	mov r0, r6
	mov r1, r4
	bl FUN_020728a8
	ldr r0, _0206F58C ; =0x020A0B00
	mov r1, r4
	bl FUN_02074580
	mov r0, r6
	mov r1, r5
	mov r2, r5
	bl FUN_020726d0
	ldr r1, _0206F590 ; =0x020A0640
	sub r2, r5, #1
	strb r2, [r1, #0xac]
	ldr r0, _0206F57C ; =0x02099F78
	ldr r1, _0206F594 ; =0x02091310
	strb r5, [r6, #0x881]
	strb r5, [r6, #0x883]
	bl FUN_020418b0
	cmp r0, #0
	movlt r0, r5
	cmp r0, #0x64
	movgt r0, #0x64
	strb r0, [r6, #0x880]
	ldr r0, _0206F57C ; =0x02099F78
	ldr r1, _0206F598 ; =0x02091328
	bl FUN_020418b0
	add r1, r6, #0x800
	strh r0, [r1, #0x68]
	ldrsh r0, [r1, #0x68]
	mov r7, #0
	strb r7, [r6, #0x888]
	cmp r0, #0
	strhlt r5, [r1, #0x68]
	ldr r0, _0206F57C ; =0x02099F78
	ldr r1, _0206F59C ; =0x0209133C
	bl FUN_020418b0
	cmp r0, #0
	movne r7, #1
	ldr r0, [r6, #0x820]
	strb r7, [r6, #0x887]
	strb r4, [r6, #0x884]
	cmp r0, #0
	bne _0206F520
	mov r7, #0x880
	ldr r0, _0206F584 ; =0x0209A250
	mov r1, r7
	bl FUN_0202de44
	mov r2, r7
	mov r1, #0
	str r0, [r6, #0x820]
	bl MemWrite
_0206F520:
	ldr r7, _0206F5A0 ; =0x0209A320
	mov r1, r6
	mov r0, r7
	bl FUN_02049a30
	ldr r0, _0206F5A4 ; =0x0209A380
	mov r1, r6
	ldr r2, [r0]
	ldr r2, [r2, #0x38]
	blx r2
	mov r0, r6
	str r7, [r6, #0x7bc]
	bl FUN_0206f19c
	add r0, r6, #0x2ec
	strb r5, [r6, #0x885]
	strb r5, [r6, #0x886]
	bl FUN_02073d8c
	add r0, r6, #0x274
	add r0, r0, #0x400
	bl FUN_0205072c
	mov r0, r6
	bl FUN_02074478
	strb r4, [r6, #0x88f]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0206F57C: .word 0x02099F78
_0206F580: .word 0x02091300
_0206F584: .word 0x0209A250
_0206F588: .word 0x000004EC
_0206F58C: .word 0x020A0B00
_0206F590: .word 0x020A0640
_0206F594: .word 0x02091310
_0206F598: .word 0x02091328
_0206F59C: .word 0x0209133C
_0206F5A0: .word 0x0209A320
_0206F5A4: .word 0x0209A380

	arm_func_start FUN_0206f5a8
FUN_0206f5a8: ; 0x0206F5A8
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	mov r7, #0
	ldr r0, _0206F694 ; =0x020A0700
	ldr r2, _0206F698 ; =0x000010BC
	mov r1, r7
	bl MemWrite
	ldr r4, _0206F69C ; =0x020A0B00
	mov r6, #1
	mov r0, r4
	mov r1, r6
	bl FUN_02074784
	sub r5, r6, #2
	mov r0, r4
	mov r1, r5
	bl FUN_0207478c
	mov r1, #0x7f
	ldr r0, _0206F6A0 ; =0x020A1140
	ldr r4, _0206F6A4 ; =0x020A0640
	strh r1, [r0, #0x94]
	strh r1, [r0, #0x96]
	strb r7, [r4, #0xb92]
	strb r7, [r4, #0xb93]
	ldr r0, _0206F6A8 ; =0x020A17BC
	mov r1, r7
	mov r2, #0x30
	bl MemWrite
	add r0, r8, #0xc
	add r0, r0, #0x400
	mov r1, r7
	mov r2, #0xc0
	bl MemWrite
	add r0, r8, #0xcc
	add r0, r0, #0x400
	mov r1, r7
	mov r2, #0x20
	bl MemWrite
	add r0, r8, #0x2ec
	bl FUN_02073d8c
	add r0, r8, #0x274
	add r0, r0, #0x400
	bl FUN_0205072c
	mov r0, r8
	bl FUN_0206f6b4
	ldr r0, _0206F6AC ; =0x020AF81C
	bl FUN_02149308
	mov r0, r8
	mov r1, #0x42
	ldr r8, _0206F6B0 ; =0x020A1640
	strh r1, [r8, #0xe]
	bl FUN_02074478
	strb r5, [r4, #0xac]
	strh r6, [r8, #0x16]
	strh r6, [r8, #0x18]
	strh r6, [r8, #0x1a]
	strh r7, [r8, #0x1c]
	strh r7, [r8, #0x1e]
	strh r7, [r8, #0x20]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0206F694: .word 0x020A0700
_0206F698: .word 0x000010BC
_0206F69C: .word 0x020A0B00
_0206F6A0: .word 0x020A1140
_0206F6A4: .word 0x020A0640
_0206F6A8: .word 0x020A17BC
_0206F6AC: .word 0x020AF81C
_0206F6B0: .word 0x020A1640
	arm_func_end FUN_0206f5a8

	arm_func_start FUN_0206f6b4
FUN_0206f6b4: ; 0x0206F6B4
	push {r4, lr}
	sub sp, sp, #0x18
	ldr r0, _0206F770 ; =0x020A0640
	add r1, sp, #8
	ldr r0, [r0, #0x4dc]
	mov r4, #0
	str r4, [r1]
	str r4, [r1, #4]
	str r4, [r1, #8]
	str r4, [r1, #0xc]
	bl FUN_02023ca0
	bl FUN_02023c6c
	ldr r1, _0206F774 ; =0x02FFFC3C
	str r0, [sp, #8]
	ldr r0, [r1]
	bl FUN_02023ca0
	bl FUN_02023c6c
	str r0, [sp, #0xc]
	add r0, sp, #0
	bl FUN_02003f38
	ldrb r1, [sp, #3]
	ldrb r0, [sp, #4]
	smulbb r0, r1, r0
	bl FUN_02023ca0
	bl FUN_02023c6c
	str r0, [sp, #0x10]
	ldrb r1, [sp, #1]
	ldrb r0, [sp, #5]
	smulbb r0, r1, r0
	bl FUN_02023ca0
	bl FUN_02023c6c
	mov r1, r4
	ldr r4, _0206F778 ; =0x020A0B00
	str r0, [sp, #0x14]
	ldr r3, [sp, #8]
	ldr r2, [sp, #0xc]
	mov r0, r4
	orr r2, r3, r2, lsl #16
	bl FUN_02074794
	ldr r3, [sp, #0x10]
	ldr r2, [sp, #0x14]
	mov r0, r4
	mov r1, #1
	orr r2, r3, r2, lsl #16
	bl FUN_02074794
	add sp, sp, #0x18
	pop {r4, pc}
	.align 2, 0_0206F770: .word 0x020A0640
_0206F774: .word 0x02FFFC3C
_0206F778: .word 0x020A0B00
	arm_func_end FUN_0206f6b4

	arm_func_start FUN_0206f77c
FUN_0206f77c: ; 0x0206F77C
	push {r3, r4, lr}
	sub sp, sp, #0x14
	mov ip, #0
	mov r4, r0
	str ip, [sp, #0x10]
	ldr r1, [r4, #0x824]
	cmp r1, #0
	ldrne r0, [r4, #0x828]
	cmpne r0, #0
	addne sp, sp, #0x14
	movne r0, #1
	popne {r3, r4, pc}
	cmp r1, #0
	ldreq r0, [r4, #0x828]
	cmpeq r0, #0
	bne _0206F820
	ldr r3, _0206F82C ; =0x0209A250
	ldr r1, _0206F830 ; =0x02091350
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _0206F7F0
	str ip, [sp]
	str ip, [sp, #4]
	str ip, [sp, #8]
	mov ip, #1
	add r2, sp, #0x10
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_0206f77c
_0206F7F0:
	cmp r0, #0x280
	addne sp, sp, #0x14
	movne r0, #0
	popne {r3, r4, pc}
	ldr r1, [sp, #0x10]
	mov r0, #1
	str r1, [r4, #0x824]
	ldr r1, [sp, #0x10]
	add sp, sp, #0x14
	add r1, r1, #0x200
	str r1, [r4, #0x828]
	pop {r3, r4, pc}
_0206F820:
	mov r0, #0
	add sp, sp, #0x14
	pop {r3, r4, pc}
	.align 2, 0_0206F82C: .word 0x0209A250
_0206F830: .word 0x02091350

	arm_func_start FUN_0206f834
FUN_0206f834: ; 0x0206F834
	push {r4, r5, lr}
	sub sp, sp, #0x14
	ldr r2, _0206F8C4 ; =0x0209A720
	mov r5, r0
	str r2, [sp, #0x10]
	add r0, r5, #0x800
	ldrh r0, [r0, #0x74]
	mov r4, r1
	cmp r0, r4
	addeq sp, sp, #0x14
	moveq r0, #1
	popeq {r4, r5, pc}
	ldr r3, _0206F8C8 ; =0x0209A250
	ldr r1, _0206F8CC ; =0x0209136C
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _0206F8A8
	mov r0, #0x180
	mul r2, r4, r0
	str r2, [sp]
	str r0, [sp, #4]
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #1
	str r0, [sp, #0xc]
	ldr r0, [r3]
	add r2, sp, #0x10
	bl FUN_0202eff0
	arm_func_end FUN_0206f834
_0206F8A8:
	cmp r0, #0
	moveq r0, #0
	addne r0, r5, #0x800
	strhne r4, [r0, #0x74]
	movne r0, #1
	add sp, sp, #0x14
	pop {r4, r5, pc}
	.align 2, 0_0206F8C4: .word 0x0209A720
_0206F8C8: .word 0x0209A250
_0206F8CC: .word 0x0209136C

	arm_func_start FUN_0206f8d0
FUN_0206f8d0: ; 0x0206F8D0
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	cmp r2, #0
	mov r6, r0
	mov r5, r1
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, pc}
	add r0, r6, #0x800
	ldrh r0, [r0, #0x74]
	cmp r0, r5
	addeq sp, sp, #4
	moveq r0, #1
	popeq {r3, r4, r5, r6, pc}
	ldr r0, _0206F948 ; =0x0209A720
	mov r3, #0x180
	str r0, [r2]
	mov r1, r2
	mul r2, r5, r3
	mov r4, #0
	ldr r0, _0206F94C ; =0x02091388
	str r4, [sp]
	bl FUN_020F3234
	cmp r0, #0
	moveq r0, r4
	addne r0, r6, #0x800
	strhne r5, [r0, #0x74]
	movne r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_0206F948: .word 0x0209A720
_0206F94C: .word 0x02091388
	arm_func_end FUN_0206f8d0

	arm_func_start FUN_0206f950
FUN_0206f950: ; 0x0206F950
	push {r3, r4, lr}
	sub sp, sp, #0x14
	cmp r2, #0
	str r2, [sp, #0x10]
	mov r4, r1
	addeq sp, sp, #0x14
	moveq r0, #0
	popeq {r3, r4, pc}
	ldr r0, _0206F9D0 ; =0x0209AC44
	mov r1, #8
	bl FUN_0202db98
	ldr r3, _0206F9D4 ; =0x0209A250
	ldr r1, _0206F9D8 ; =0x020913A4
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _0206F9BC
	mov r2, #0x120
	mul ip, r4, r2
	str ip, [sp]
	str r2, [sp, #4]
	mov ip, #0
	str ip, [sp, #8]
	mov ip, #1
	add r2, sp, #0x10
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_0206f950
_0206F9BC:
	cmp r0, #0
	moveq r0, #0
	movne r0, #1
	add sp, sp, #0x14
	pop {r3, r4, pc}
	.align 2, 0_0206F9D0: .word 0x0209AC44
_0206F9D4: .word 0x0209A250
_0206F9D8: .word 0x020913A4

	arm_func_start FUN_0206f9dc
FUN_0206f9dc: ; 0x0206F9DC
	ldr ip, _0206F9E8 ; =FUN_0206f950
	add r2, r0, #0x2ec
	bx ip
	.align 2, 0_0206F9E8: .word FUN_0206f950
	arm_func_end FUN_0206f9dc

	arm_func_start FUN_0206f9ec
FUN_0206f9ec: ; 0x0206F9EC
	push {r3, r4, lr}
	sub sp, sp, #4
	cmp r2, #0
	mov r4, r1
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, pc}
	add r0, r0, #0x2ec
	str r0, [r2]
	mov r3, #0x120
	mov r1, r2
	mul r2, r4, r3
	mov r4, #0
	ldr r0, _0206FA40 ; =0x020913C0
	str r4, [sp]
	bl FUN_020F3234
	cmp r0, #0
	movne r4, #1
	mov r0, r4
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_0206FA40: .word 0x020913C0
	arm_func_end FUN_0206f9ec

	arm_func_start FUN_0206fa44
FUN_0206fa44: ; 0x0206FA44
	push {r3, r4, r5, lr}
	sub sp, sp, #0x20
	mov r0, #0
	mov r5, r1
	str r2, [sp, #0x14]
	str r0, [sp, #0x10]
	cmp r2, #0
	mov r4, r0
	addeq sp, sp, #0x20
	popeq {r3, r4, r5, pc}
	ldr r3, _0206FB64 ; =0x0209A250
	ldr r1, _0206FB68 ; =0x020913DC
	ldr lr, [r3]
	cmp lr, #0
	beq _0206FAA0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	mov ip, #1
	add r2, sp, #0x10
	mov r0, lr
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_0206fa44
_0206FAA0:
	str r0, [sp, #0x1c]
	cmp r0, #0
	addeq sp, sp, #0x20
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r0, [sp, #0x10]
	add r2, sp, #0x18
	add r3, sp, #0x1c
	mov r1, r5
	bl FUN_020F34F0
	cmp r0, #0
	bne _0206FAE8
	ldr r1, [sp, #0x10]
	ldr r0, _0206FB64 ; =0x0209A250
	bl FUN_0202e1c0
	add sp, sp, #0x20
	mov r0, #0
	pop {r3, r4, r5, pc}
_0206FAE8:
	ldr r3, _0206FB64 ; =0x0209A250
	ldr ip, [sp, #0x18]
	ldr r0, [r3]
	ldr r1, _0206FB6C ; =0x020913F4
	cmp r0, #0
	moveq r0, #0
	beq _0206FB24
	ldr r2, _0206FB70 ; =0x00000618
	str ip, [sp]
	str r2, [sp, #4]
	add r2, sp, #0x14
	str r4, [sp, #8]
	mov ip, #1
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_0206FB24:
	ldr r1, _0206FB70 ; =0x00000618
	str r0, [sp, #0x1c]
	cmp r0, r1
	beq _0206FB4C
	ldr r1, [sp, #0x10]
	ldr r0, _0206FB64 ; =0x0209A250
	bl FUN_0202e1c0
	add sp, sp, #0x20
	mov r0, #0
	pop {r3, r4, r5, pc}
_0206FB4C:
	ldr r1, [sp, #0x10]
	ldr r0, _0206FB64 ; =0x0209A250
	bl FUN_0202e1c0
	mov r0, #1
	add sp, sp, #0x20
	pop {r3, r4, r5, pc}
	.align 2, 0_0206FB64: .word 0x0209A250
_0206FB68: .word 0x020913DC
_0206FB6C: .word 0x020913F4
_0206FB70: .word 0x00000618

	arm_func_start FUN_0206fb74
FUN_0206fb74: ; 0x0206FB74
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x218
	sub sp, sp, #0x400
	movs r4, r3
	mov r7, r0
	movne r0, #0
	mov r5, r2
	strbne r0, [r4]
	add r0, r7, r5, lsl #1
	mov r6, r1
	add r1, r0, #0x800
	ldrh r0, [r1, #0x6c]
	cmp r6, r0
	addeq r0, r7, #0x800
	ldrheq r2, [r0, #0x74]
	ldrheq r0, [r1, #0x70]
	cmpeq r2, r0
	bne _0206FBD8
	mov r0, r7
	mov r1, r5
	bl FUN_0206fdac
	add sp, sp, #0x218
	add sp, sp, #0x400
	mov r0, #1
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0206fb74
_0206FBD8:
	add r8, sp, #0
	mov r0, r7
	mov r1, r6
	mov r2, r8
	bl FUN_0206fa44
	cmp r0, #0
	addeq sp, sp, #0x218
	addeq sp, sp, #0x400
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r7
	mov r1, r5
	mov r2, r8
	bl FUN_0206fe04
	add r0, r7, r5, lsl #1
	add r1, r0, #0x800
	strh r6, [r1, #0x6c]
	add r0, r7, #0x800
	ldrh r0, [r0, #0x74]
	cmp r4, #0
	strh r0, [r1, #0x70]
	movne r0, #1
	strbne r0, [r4]
	mov r0, #1
	add sp, sp, #0x218
	add sp, sp, #0x400
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0206fc44
FUN_0206fc44: ; 0x0206FC44
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	movs r4, r1
	mov r5, r0
	addeq sp, sp, #8
	popeq {r3, r4, r5, pc}
	mov r0, r4
	bl FUN_0206d6d8
	cmp r0, #0
	addne sp, sp, #8
	popne {r3, r4, r5, pc}
	mov r0, r4
	mov r1, #0x80
	bl FUN_0206d620
	mov r2, #3
	mov r0, r5
	mov r1, r4
	str r2, [sp]
	mov r3, #0
	mov r2, #1
	str r3, [sp, #4]
	bl FUN_0204e79c
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0206fc44

	arm_func_start FUN_0206fca4
FUN_0206fca4: ; 0x0206FCA4
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	movs r4, r1
	mov r5, r0
	addeq sp, sp, #8
	popeq {r3, r4, r5, pc}
	mov r0, r4
	bl FUN_0206d6d8
	cmp r0, #0
	addeq sp, sp, #8
	popeq {r3, r4, r5, pc}
	mov r0, r4
	mov r1, #0x80
	bl FUN_0206d634
	mov r2, #3
	mov r0, r5
	mov r1, r4
	str r2, [sp]
	mov r3, #0
	mov r2, #1
	str r3, [sp, #4]
	bl FUN_0204e79c
	add sp, sp, #8
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0206fca4

	arm_func_start FUN_0206fd04
FUN_0206fd04: ; 0x0206FD04
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r1
	mov r3, #0xb
	mul r5, r8, r3
	movs r7, r2
	mov r4, r0
	add r6, r5, #0xb
	bne _0206FD60
	bl FUN_0212AE80
	cmp r0, #0
	beq _0206FD60
	cmp r5, r6
	popge {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0206fd04
_0206FD38:
	add r1, r4, r5
	ldrb r0, [r1, #0x84a]
	cmp r0, #0
	movne r0, #1
	strbne r0, [r1, #0x84a]
	popne {r4, r5, r6, r7, r8, pc}
	add r5, r5, #1
	cmp r5, r6
	blt _0206FD38
	pop {r4, r5, r6, r7, r8, pc}
_0206FD60:
	cmp r7, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r0, r4
	mov r1, r8
	bl FUN_0212AE80
	cmp r0, #0
	popne {r4, r5, r6, r7, r8, pc}
	cmp r5, r6
	popge {r4, r5, r6, r7, r8, pc}
_0206FD84:
	add r1, r4, r5
	ldrb r0, [r1, #0x84a]
	cmp r0, #1
	moveq r0, #3
	strbeq r0, [r1, #0x84a]
	popeq {r4, r5, r6, r7, r8, pc}
	add r5, r5, #1
	cmp r5, r6
	blt _0206FD84
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0206fdac
FUN_0206fdac: ; 0x0206FDAC
	push {r3, r4, r5, r6, r7, lr}
	mov r2, #0xb
	mul r6, r1, r2
	add r7, r6, #0xb
	cmp r6, r7
	mov r2, #0
	bge _0206FDF8
	ldr r4, _0206FE00 ; =0x0209CC10
	mov ip, #1
	mov r3, #0x88
	arm_func_end FUN_0206fdac
_0206FDD4:
	mul lr, r6, r3
	ldrb lr, [r4, lr]
	add r5, r0, r6
	add r6, r6, #1
	cmp lr, #1
	moveq r2, ip
	strb lr, [r5, #0x84a]
	cmp r6, r7
	blt _0206FDD4
_0206FDF8:
	bl FUN_0206fd04
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0206FE00: .word 0x0209CC10

	arm_func_start FUN_0206fe04
FUN_0206fe04: ; 0x0206FE04
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x2c
	ldr r3, _02070128 ; =0x0209A720
	str r1, [sp]
	ldr r1, [r3, #0xdc]
	mov sl, r0
	str r1, [sp, #0x20]
	ldrsh r1, [r3, #0xac]
	str r2, [sp, #4]
	ldrsh r4, [r3, #0xae]
	str r1, [sp, #0x1c]
	bl FUN_0212AF7C
	str r0, [sp, #0x18]
	mov r0, sl
	bl FUN_0212AF98
	mov r5, r0
	ldr r0, [sp]
	bl FUN_020F07F4
	str r0, [sp, #0xc]
	ldr r0, [sp, #4]
	cmp r0, #0
	addeq sp, sp, #0x2c
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp]
	mov r1, #0xb
	mul r1, r0, r1
	add r0, r1, #0xb
	str r0, [sp, #0x10]
	ldr r0, [sp, #4]
	str r1, [sp, #0x14]
	add fp, r0, #0x40
	mov r0, #0
	str r0, [sp, #8]
	b _02070030
	arm_func_end FUN_0206fe04
_0206FE8C:
	ldr r3, _0207012C ; =0x0209CC10
	ldr r2, [sp, #0x14]
	mov r1, #0x88
	mla r1, r2, r1, r3
	mov r0, fp
	mov r2, #8
	bl _memcpy
	ldrb r1, [fp]
	ldr r0, [sp, #0x14]
	ldr r2, _0207012C ; =0x0209CC10
	add r0, sl, r0
	strb r1, [r0, #0x84a]
	cmp r1, #1
	moveq r0, #1
	streq r0, [sp, #8]
	ldr r0, [sp, #0x14]
	mov r1, #0x88
	mla r1, r0, r1, r2
	add r0, r1, #8
	str r0, [sp, #0x24]
	ldr r0, [sp, #0x14]
	mov r8, #0
	add r0, sl, r0
	str r0, [sp, #0x28]
	b _02070018
_0206FEF0:
	ldr r0, [sp, #0x24]
	add sb, r0, r8, lsl #3
	add r0, fp, r8, lsl #3
	ldr r6, [r0, #0xc]
	ldr r0, [sp, #4]
	ldrb r0, [r0, #4]
	cmp r0, #1
	lsleq r6, r6, #1
	beq _0206FF30
	ldr r0, [sp, #0x28]
	ldrb r0, [r0, #0x84a]
	cmp r0, #1
	bne _0206FF30
	ldr r0, _02070130 ; =0x00000FAE
	cmp r6, r0
	movgt r6, r0
_0206FF30:
	add r0, fp, r8, lsl #3
	ldr r2, [r0, #8]
	ldr r1, [sp, #0x1c]
	ldr r0, [sp, #0x20]
	cmp r6, #0x800
	mla r0, r1, r2, r0
	str r0, [sb]
	mov r0, sl
	bge _0206FF90
	mov r1, #1
	mov r2, #0
	bl FUN_020723c4
	mov r7, r0
	mov r0, sl
	mov r1, #1
	mov r2, #0
	bl FUN_0207238c
	cmp r7, r0
	subgt r1, r5, r7
	asrgt r0, r1, #0xb
	addgt r0, r1, r0, lsr #20
	asrgt r4, r0, #0xc
	mla r0, r6, r4, r7
	b _0206FFD0
_0206FF90:
	mov r1, #0
	mov r2, r1
	bl FUN_020723c4
	mov r1, #0
	mov r7, r0
	mov r0, sl
	mov r2, r1
	bl FUN_0207238c
	cmp r7, r0
	sublt r1, r7, r5
	asrlt r0, r1, #0xb
	addlt r0, r1, r0, lsr #20
	rsb r6, r6, #0x1000
	asrlt r4, r0, #0xc
	mul r0, r6, r4
	sub r0, r7, r0
_0206FFD0:
	str r0, [sb, #4]
	ldr r0, [sp, #4]
	ldrb r0, [r0, #4]
	cmp r0, #1
	beq _02070014
	ldr r0, [sp]
	cmp r0, #1
	bne _02070014
	ldr r1, [sb]
	ldr r0, [sp, #0x18]
	sub r1, r1, r0
	sub r0, r0, r1
	str r0, [sb]
	ldr r0, [sb, #4]
	sub r0, r0, r5
	sub r0, r5, r0
	str r0, [sb, #4]
_02070014:
	add r8, r8, #1
_02070018:
	cmp r8, #0xe
	blt _0206FEF0
	ldr r0, [sp, #0x14]
	add fp, fp, #0x88
	add r0, r0, #1
	str r0, [sp, #0x14]
_02070030:
	ldr r1, [sp, #0x14]
	ldr r0, [sp, #0x10]
	cmp r1, r0
	blt _0206FE8C
	ldr r1, [sp]
	ldr r2, [sp, #8]
	mov r0, sl
	mov r6, #0
	bl FUN_0206fd04
	mov r5, #8
	ldr r0, [sp]
	mov r1, #0xb
	mul r8, r0, r1
	mov r0, r6
	str r0, [sp, #0x14]
	mov r4, r5
	b _02070114
_02070074:
	ldr r2, [sp, #0x14]
	ldr r1, [sp, #0xc]
	mov r0, sl
	mov r3, r6
	add r2, r2, #1
	bl FUN_0204bbe0
	movs r7, r0
	beq _02070104
	ldr r1, [sp, #0x14]
	cmp r1, #0xb
	bge _020700EC
	add r1, sl, r8
	ldrb r1, [r1, #0x84a]
	cmp r1, #0
	beq _020700EC
	mov r1, r5
	bl FUN_0206d620
	ldr r2, [sp, #0x14]
	ldr r1, [sp, #0xc]
	mov r0, sl
	add r2, r2, #1
	mov r3, r6
	bl FUN_02072434
	cmp r0, #0
	mov r0, sl
	mov r1, r7
	beq _020700E8
	bl FUN_0206fc44
	b _02070104
_020700E8:
	b _02070100
_020700EC:
	mov r0, r7
	mov r1, r4
	bl FUN_0206d634
	mov r0, sl
	mov r1, r7
_02070100:
	bl FUN_0206fca4
_02070104:
	ldr r0, [sp, #0x14]
	add r8, r8, #1
	add r0, r0, #1
	str r0, [sp, #0x14]
_02070114:
	ldr r0, [sp, #0x14]
	cmp r0, #0x10
	blt _02070074
	add sp, sp, #0x2c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02070128: .word 0x0209A720
_0207012C: .word 0x0209CC10
_02070130: .word 0x00000FAE

	arm_func_start FUN_02070134
FUN_02070134: ; 0x02070134
	push {r4, r5, r6, r7, r8, lr}
	ldr r6, _020701C4 ; =0x0209A11C
	mov r5, r0
	mov r4, r1
	mov r8, #0
	arm_func_end FUN_02070134
_02070148:
	mov r0, r8
	bl FUN_020EFA80
	movs r7, r0
	beq _02070180
	bl FUN_0206d64c
	cmp r0, #0
	beq _02070180
	mov r0, r7
	bl FUN_020F0810
	cmp r4, r0
	bne _02070180
	ldr r0, [r6]
	mov r1, r8
	bl FUN_0206c5d8
_02070180:
	add r8, r8, #1
	cmp r8, #0x20
	blt _02070148
	add r0, r5, #0xc
	add r0, r0, #0x400
	mov r6, #0
	mov r1, r6
	add r0, r0, r4, lsl #5
	mov r2, #0x20
	bl MemWrite
	add r0, r5, #0xcc
	add r0, r0, #0x400
	mov r1, r6
	add r0, r0, r4, lsl #4
	mov r2, #0x10
	bl MemWrite
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020701C4: .word 0x0209A11C

	arm_func_start FUN_020701c8
FUN_020701c8: ; 0x020701C8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	mov r6, r0
	ldr r4, [r6, #0x7f0]
	str r1, [sp, #8]
	mov r1, #0
	mov r5, r2
	mov fp, r3
	cmp r4, #0
	str r1, [sp, #0xc]
	bne _02070200
	bl FUN_02071fac
	mov r0, #1
	str r0, [sp, #0xc]
	arm_func_end FUN_020701c8
_02070200:
	ldr r0, [sp, #8]
	mov sb, #0
	add r8, r0, #0x4c
	ldrb r7, [sp, #0x38]
	b _02070340
_02070214:
	lsl r0, sb, #3
	ldrh r0, [r8, r0]
	cmp r0, #0
	beq _0207033C
	cmp r7, #0
	beq _02070260
	cmp r5, #1
	bne _02070260
	mov r0, r6
	bl FUN_020731a4
	cmp r0, #0
	bne _02070260
	lsl r0, sb, #3
	ldrh r1, [r8, r0]
	ldr r0, _02070394 ; =0x0209A0AC
	mov r2, #0
	bl FUN_0206c7dc
	cmp r0, #0
	bne _0207033C
_02070260:
	add r1, r8, sb, lsl #3
	ldrb r0, [r1, #2]
	cmp r0, #0x10
	movhi r0, #0
	strbhi r0, [r1, #2]
	mov r0, r6
	mov r1, r5
	bl FUN_02071db0
	movs sl, r0
	bmi _02070348
	ldr r0, _02070398 ; =0x020A0640
	mov r4, #1
	ldrb r0, [r0, #0x1a]
	cmp r5, #0
	movne r4, #0
	cmp r0, #0
	beq _020702B4
	mov r0, r5
	bl FUN_020F0A30
	cmp r0, #0
	movne r4, #0
_020702B4:
	add ip, r8, sb, lsl #3
	mov r2, sl
	ldrb sl, [ip, #4]
	lsl r1, sb, #3
	mov r0, r6
	add sl, fp, sl
	str sl, [sp]
	ldrb sl, [ip, #5]
	mov r3, r5
	str sl, [sp, #4]
	ldrh r1, [r8, r1]
	bl FUN_02071d74
	add r1, r8, sb, lsl #3
	ldrb r1, [r1, #3]
	mov sl, r0
	mov r2, #0
	bl FUN_0206d9cc
	cmp r4, #0
	mov r0, sl
	beq _0207030C
	mov r1, #0x20
	b _02070310
_0207030C:
	mov r1, #0x40
_02070310:
	bl FUN_0206d620
	mov r0, sl
	bl FUN_0206cbf8
	mov r1, #1
	str r1, [sp]
	add r3, r8, sb, lsl #3
	mov r2, r0
	ldrb r3, [r3, #2]
	mov r0, r6
	mov r1, r5
	bl FUN_0204c92c
_0207033C:
	add sb, sb, #1
_02070340:
	cmp sb, #0x20
	blt _02070214
_02070348:
	ldr r0, [sp, #8]
	cmp r5, #1
	ldrh r4, [r0, #0x2e]
	orreq r4, r4, #0x8000
	bl FUN_020F068C
	cmp r0, #0
	bne _02070374
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_0204d864
_02070374:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	addeq sp, sp, #0x10
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r6
	bl FUN_02072020
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02070394: .word 0x0209A0AC
_02070398: .word 0x020A0640

	arm_func_start FUN_0207039c
FUN_0207039c: ; 0x0207039C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x180
	mov r6, #0
	mov r7, r1
	add r1, sp, #0x20
	mov r4, r2
	mov r0, r6
	mov r2, #0x160
	str r1, [sp, #0x14]
	str r6, [sp, #0x10]
	mov r5, r6
	bl FUN_0200787c
	cmp r4, #0
	addeq sp, sp, #0x180
	moveq r0, r6
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	mov r1, r6
	mov r2, #0x16c
	bl MemWrite
	ldr r3, _02070524 ; =0x0209A250
	ldr r1, _02070528 ; =0x0209140C
	ldr r0, [r3]
	cmp r0, #0
	beq _02070420
	str r6, [sp]
	str r6, [sp, #4]
	add r2, sp, #0x10
	str r6, [sp, #8]
	mov ip, #1
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	mov r6, r0
	arm_func_end FUN_0207039c
_02070420:
	cmp r6, #0
	str r6, [sp, #0x1c]
	addeq sp, sp, #0x180
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [sp, #0x10]
	add r2, sp, #0x18
	add r3, sp, #0x1c
	mov r1, r7
	bl FUN_020F34F0
	cmp r0, #0
	bne _02070468
	ldr r1, [sp, #0x10]
	ldr r0, _02070524 ; =0x0209A250
	bl FUN_0202e1c0
	add sp, sp, #0x180
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_02070468:
	ldr r3, _02070524 ; =0x0209A250
	ldr ip, [sp, #0x1c]
	ldr r0, [r3]
	cmp ip, #0x160
	movhi ip, #0x160
	strhi ip, [sp, #0x1c]
	cmp r0, #0
	ldr r2, [sp, #0x18]
	ldr r1, _0207052C ; =0x02091424
	moveq r0, #0
	beq _020704AC
	stm sp, {r2, ip}
	add r2, sp, #0x14
	str r5, [sp, #8]
	mov ip, #1
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_020704AC:
	str r0, [sp, #0x1c]
	cmp r0, #0
	bne _020704D0
	ldr r1, [sp, #0x10]
	ldr r0, _02070524 ; =0x0209A250
	bl FUN_0202e1c0
	add sp, sp, #0x180
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_020704D0:
	ldr r1, [sp, #0x10]
	ldr r0, _02070524 ; =0x0209A250
	bl FUN_0202e1c0
	add r0, sp, #0x20
	mov r1, r4
	mov r2, #0x40
	bl _memcpy
	add r0, sp, #0x60
	add r1, r4, #0x4c
	mov r2, #0x100
	bl _memcpy
	ldr r0, [sp, #0x1c]
	cmp r0, #0x160
	bne _02070518
	add r0, sp, #0x160
	add r1, r4, #0x14c
	mov r2, #0x20
	bl _memcpy
_02070518:
	mov r0, #1
	add sp, sp, #0x180
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02070524: .word 0x0209A250
_02070528: .word 0x0209140C
_0207052C: .word 0x02091424

	arm_func_start FUN_02070530
FUN_02070530: ; 0x02070530
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1b8
	sub sp, sp, #0x400
	mov r4, #0
	str r4, [sp, #0x1c]
	mov fp, r0
	str r1, [sp, #0x10]
	str r2, [sp, #0x14]
	str r3, [sp, #0x18]
	mov r4, r4
	bl FUN_020F068C
	cmp r0, #0
	beq _02070570
	ldr r0, [sp, #0x10]
	cmp r0, #1
	moveq r4, #1
	arm_func_end FUN_02070530
_02070570:
	cmp r4, #0
	ldrne r0, _02071394 ; =0x020A1640
	ldr r1, [sp, #0x10]
	ldrne r0, [r0, #0x230]
	cmpne r0, #0
	movne r0, #1
	strne r0, [sp, #0x1c]
	mov r0, #0
	str r0, [sp, #0x40]
	ldr r2, [sp, #0x40]
	mov r0, fp
	str r2, [sp, #0x3c]
	ldr r2, [sp, #0x40]
	str r2, [sp, #0x38]
	ldr r2, [sp, #0x40]
	str r2, [sp, #0x34]
	bl FUN_02070134
	ldr r1, [sp, #0x10]
	mov r0, fp
	bl FUN_0207249c
	str r0, [sp, #0x44]
	ldr r1, [sp, #0x10]
	mov r0, fp
	bl FUN_020724ac
	ldr r1, [sp, #0x40]
	mov r2, #0x100
	mov r6, r0
	bl MemWrite
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bgt _0207060C
	ldr r0, [sp, #0x10]
	cmp r0, #1
	movne r0, #1
	strne r0, [sp, #0x18]
	bne _0207060C
	mov r0, fp
	bl FUN_020726f8
	str r0, [sp, #0x18]
_0207060C:
	mov r0, fp
	bl FUN_02073184
	ldrb r0, [r0, #0xf]
	cmp r0, #0
	ldreq r0, _02071398 ; =0x020A0640
	ldrbeq r0, [r0, #0x1a]
	cmpeq r0, #0
	bne _02070638
	ldr r0, [sp, #0x10]
	cmp r0, #0
	bne _02070640
_02070638:
	mov r0, #1
	str r0, [sp, #0x3c]
_02070640:
	add r4, sp, #0x400
	add r4, r4, #0x4c
	mov sb, #0
	mov r0, r4
	mov r1, sb
	mov r2, #0x16c
	bl FUN_02021940
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	beq _02070784
	ldr r2, _02071394 ; =0x020A1640
	mov r1, r4
	ldr r4, [r2, #0x230]
	ldrb r3, [r2, #0x246]
	ldr r0, _0207139C ; =0x00000808
	add r4, r4, #8
	mla r7, r3, r0, r4
	add r0, r7, #0x394
	mov r2, #0x4c
	add r0, r0, #0x400
	bl _memcpy
	ldr r0, [sp, #0x10]
	add r8, sp, #0x400
	ldrh r2, [r7, #0xd2]
	ldr r1, _020713A0 ; =0x020A06BC
	lsl r0, r0, #1
	strh r2, [r1, r0]
	add r8, r8, #0x98
	add r5, r7, #0xd4
	mov sl, sb
	mov r4, #0x6c
	b _02070730
_020706C0:
	add r0, r7, #0x7e0
	mov r1, sb
	bl FUN_0204fbe8
	mov r3, #0
	b _020706F0
_020706D4:
	mul r2, r3, r4
	add r1, r7, r2
	ldrh r1, [r1, #0xd8]
	cmp r0, r1
	addeq r1, r5, r2
	beq _020706FC
	add r3, r3, #1
_020706F0:
	cmp r3, #0x10
	blt _020706D4
	mov r1, #0
_020706FC:
	cmp r1, #0
	beq _02070728
	strh r0, [r8]
	add r0, sb, #1
	and r0, r0, #0xff
	strb r0, [r8, #2]
	strb r0, [r8, #3]
	ldrb r0, [r1, #0x4a]
	sub r0, r0, #1
	strb r0, [r8, #4]
	strb sl, [r8, #5]
_02070728:
	add sb, sb, #1
	add r8, r8, #8
_02070730:
	cmp sb, #0x10
	blt _020706C0
	add r0, sp, #0x400
	ldr r1, [sp, #0x44]
	add r0, r0, #0x4c
	mov r2, #0x4c
	bl _memcpy
	add r4, sp, #0x3cc
	mov r0, r7
	mov r1, r4
	bl FUN_020EF5B8
	mov r2, #0
	b _02070778
_02070764:
	lsl r0, r2, #1
	ldrh r1, [r4, r0]
	lsl r0, r2, #2
	add r2, r2, #1
	strh r1, [r6, r0]
_02070778:
	cmp r2, #0x40
	blt _02070764
	b _02070FA0
_02070784:
	mov r0, fp
	bl FUN_020731a4
	cmp r0, #0
	beq _02070F54
	ldr r0, [sp, #0x10]
	cmp r0, #1
	bne _02070F54
	ldr r0, _020713A4 ; =0x020A9C40
	bl FUN_02045ed0
	mov r4, r0
	add r6, sp, #0x24c
	mov r0, sb
	mov r1, sb
	mov r2, sb
	mov r3, sb
	mov r5, #0xc
_020707C4:
	stm r6!, {r0, r1, r2, r3}
	stm r6!, {r0, r1, r2, r3}
	subs r5, r5, #1
	bne _020707C4
	mov r7, #0
	add r0, sp, #0x64
	b _020707E8
_020707E0:
	str r7, [r0, r7, lsl #2]
	add r7, r7, #1
_020707E8:
	cmp r7, #8
	blt _020707E0
	mov r7, #0
	add r5, sp, #0x64
	mov r6, r7
	b _02070874
_02070800:
	mov r0, r6
	mov r8, r7
	b _02070820
_0207080C:
	ldr r1, [r5, r8, lsl #2]
	add r8, r8, #1
	add r1, r4, r1, lsl #2
	ldrh r1, [r1, #6]
	add r0, r0, r1
_02070820:
	cmp r8, #8
	blt _0207080C
	cmp r0, #0
	beq _0207087C
	bl FUN_020EF928
	mov r8, r7
	b _02070858
_0207083C:
	ldr r1, [r5, r8, lsl #2]
	add r1, r4, r1, lsl #2
	ldrh r1, [r1, #6]
	sub r0, r0, r1
	cmp r0, #0
	ble _02070860
	add r8, r8, #1
_02070858:
	cmp r8, #7
	blt _0207083C
_02070860:
	ldr r1, [r5, r7, lsl #2]
	ldr r0, [r5, r8, lsl #2]
	str r0, [r5, r7, lsl #2]
	str r1, [r5, r8, lsl #2]
	add r7, r7, #1
_02070874:
	cmp r7, #7
	blt _02070800
_0207087C:
	add r8, sp, #0x204
	mov r0, r8
	bl FUN_0200dbf0
	ldr r1, _020713A8 ; =0x0209143C
	mov r0, r8
	bl FUN_0200dfc8
	cmp r0, #0
	beq _02070904
	mov sl, #0x30
	mov sb, #0
	add r7, sp, #0x64
	add r6, sp, #0x24c
	mov r5, sl
	b _020708E8
_020708B4:
	ldr r1, [r7, sb, lsl #2]
	mov r0, r8
	add r1, r4, r1, lsl #2
	ldrh r3, [r1, #4]
	mov r2, #0
	mul r1, r3, sl
	bl FUN_0200ded0
	ldr r2, [r7, sb, lsl #2]
	mov r0, r8
	mla r1, r2, r5, r6
	mov r2, #0x30
	bl FUN_0200defc
	add sb, sb, #1
_020708E8:
	cmp sb, #8
	blt _020708B4
	add r4, sp, #0x204
_020708F4:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _020708F4
_02070904:
	mov r7, #0
	add r4, sp, #0x64
	add r3, sp, #0x24c
	mov r1, #0x30
	b _02070934
_02070918:
	ldr r0, [r4, r7, lsl #2]
	mul r2, r0, r1
	ldrh r2, [r3, r2]
	ldr r0, [sp, #0x14]
	cmp r0, r2
	beq _0207093C
	add r7, r7, #1
_02070934:
	cmp r7, #8
	blt _02070918
_0207093C:
	mov sb, #0
	cmp r7, #8
	moveq r0, #1
	streq r0, [sp, #0x40]
	mov r3, #1
	add r0, sp, #0x84
	mov r1, sb
	mov r2, #0x180
	str r3, [sp, #0x30]
	str sb, [sp, #0x2c]
	str sb, [sp, #0x28]
	bl FUN_02021940
	add r0, sp, #0x5c
	ldr r3, _020713AC ; =0x0209A250
	strh sb, [r0]
	strh sb, [r0, #2]
	strh sb, [r0, #4]
	ldr r0, [r3]
	str sb, [sp, #0x58]
	str sb, [sp, #0x24]
	str sb, [sp, #0x20]
	ldr r1, _020713B0 ; =0x02091458
	cmp r0, #0
	beq _020709BC
	str sb, [sp]
	str sb, [sp, #4]
	str sb, [sp, #8]
	ldr r0, [sp, #0x30]
	add r2, sp, #0x58
	str r0, [sp, #0xc]
	ldr r0, [r3]
	bl FUN_0202eff0
_020709BC:
	add r8, sp, #0x204
	mov r0, r8
	bl FUN_0200dbf0
	ldr r1, _020713B4 ; =0x02091470
	mov r0, r8
	bl FUN_0200dfc8
	cmp r0, #0
	beq _02070AF4
	ldr r0, [sp, #0x40]
	cmp r0, #0
	beq _02070A50
	mov r4, #0x160
	ldr r0, _020713AC ; =0x0209A250
	mov r1, r4
	bl FUN_0202de44
	str r0, [sp, #0x20]
	cmp r0, #0
	beq _02070AE0
	ldr r0, [sp, #0x58]
	ldr r1, [sp, #0x14]
	add r2, sp, #0x54
	add r3, sp, #0x50
	bl FUN_020F34F0
	cmp r0, #0
	beq _02070AE0
	ldr r1, [sp, #0x54]
	mov r0, r8
	mov r2, #0
	bl FUN_0200ded0
	ldr r1, [sp, #0x20]
	mov r0, r8
	mov r2, r4
	bl FUN_0200defc
	ldr r0, [sp, #0x24]
	add r0, r0, #1
	str r0, [sp, #0x24]
	b _02070AE0
_02070A50:
	ldr r0, _020713AC ; =0x0209A250
	mov r1, #0xb00
	bl FUN_0202de44
	str r0, [sp, #0x20]
	mov r7, #0
	add r6, sp, #0x64
	add r5, sp, #0x24c
	mov sl, #0x160
	mov r4, #0x30
	b _02070AD8
_02070A78:
	ldr r0, [r6, r7, lsl #2]
	mul r1, r0, r4
	ldrh r1, [r5, r1]
	cmp r1, #0
	beq _02070AD4
	ldr r0, [sp, #0x58]
	add r2, sp, #0x54
	add r3, sp, #0x50
	bl FUN_020F34F0
	cmp r0, #0
	beq _02070AD4
	ldr r1, [sp, #0x54]
	mov r0, r8
	mov r2, #0
	bl FUN_0200ded0
	ldr r1, [sp, #0x20]
	mov r0, r8
	mla r1, r7, sl, r1
	mov r2, #0x160
	bl FUN_0200defc
	ldr r0, [sp, #0x24]
	add r0, r0, #1
	str r0, [sp, #0x24]
_02070AD4:
	add r7, r7, #1
_02070AD8:
	cmp r7, #8
	blt _02070A78
_02070AE0:
	add r4, sp, #0x204
_02070AE4:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _02070AE4
_02070AF4:
	ldr r0, _020713AC ; =0x0209A250
	ldr r1, [sp, #0x58]
	bl FUN_0202e1c0
	mov r7, #0
_02070B04:
	ldr r0, [sp, #0x20]
	mov r1, #0x160
	mla r0, r7, r1, r0
	ldrh r2, [r0, #0x20]
	ldr r1, [sp, #0x14]
	cmp r1, r2
	bne _02070B2C
	ldr r1, [sp, #0x44]
	mov r2, #0x4c
	bl _memcpy
_02070B2C:
	ldr r0, [sp, #0x20]
	mov r1, #0x160
	mla r0, r7, r1, r0
	str r0, [sp, #0x48]
	add r0, fp, #0x800
	mov r8, #0
	add r6, sp, #0x84
	mov r4, #6
	ldr r5, _020713B8 ; =0x0000EFFF
	str r0, [sp, #0x4c]
	b _02070D7C
_02070B58:
	ldr r0, [sp, #0x48]
	add r1, r0, r8, lsl #3
	ldrh sl, [r1, #0x40]
	cmp sl, #0
	beq _02070D78
	mov r0, #6
	mul r0, sb, r0
	strh sl, [r6, r0]
	ldrb r1, [r1, #0x42]
	add r2, r6, r0
	ldr r0, _020713BC ; =0x0209A0AC
	strh r1, [r2, #4]
	mov r1, #0
	strh r1, [r2, #2]
	lsl r1, sl, #0x10
	lsr r1, r1, #0x10
	mov r2, #0
	bl FUN_0206c7dc
	cmp r0, #0
	beq _02070BB4
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	beq _02070BB8
_02070BB4:
	b _02070BE4
_02070BB8:
	ldrb r0, [fp, #0x886]
	cmp r0, #0
	beq _02070C04
	mov r0, fp
	mov r1, #0
	bl FUN_0205106c
	lsl r1, sl, #0x10
	lsr r1, r1, #0x10
	bl FUN_020502a8
	cmp r0, #0
	bne _02070C04
_02070BE4:
	mov r0, #6
	mla r2, sb, r0, r6
	ldr r0, [sp, #0x28]
	ldrh r1, [r2, #2]
	add r0, r0, #1
	str r0, [sp, #0x28]
	orr r0, r1, #0x8000
	strh r0, [r2, #2]
_02070C04:
	mov r0, #6
	mla r0, sb, r0, r6
	ldrh r1, [r0, #4]
	cmp r1, #1
	bne _02070C9C
	ldr r1, [sp, #0x48]
	ldrh r2, [r1, #0x20]
	ldr r1, [sp, #0x14]
	cmp r1, r2
	bne _02070C74
	ldrh r0, [r0, #2]
	tst r0, #0x8000
	beq _02070C74
	mov r2, #0
	b _02070C54
_02070C40:
	mla r1, r2, r4, r6
	ldrh r0, [r1, #2]
	add r2, r2, #1
	and r0, r0, r5
	strh r0, [r1, #2]
_02070C54:
	cmp r2, sb
	blt _02070C40
	mov r0, #6
	mla r1, sb, r0, r6
	ldrh r0, [r1, #2]
	orr r0, r0, #0x4000
	strh r0, [r1, #2]
	b _02070C90
_02070C74:
	ldr r0, [sp, #0x30]
	cmp r0, #0
	movne r0, #6
	mlane r1, sb, r0, r6
	ldrhne r0, [r1, #2]
	addne r0, r0, #0x1000
	strhne r0, [r1, #2]
_02070C90:
	mov r0, #0
	str r0, [sp, #0x30]
	b _02070CA8
_02070C9C:
	ldrh r1, [r0, #2]
	orr r1, r1, #0x400
	strh r1, [r0, #2]
_02070CA8:
	ldr r0, [sp, #0x48]
	ldrh r1, [r0, #0x20]
	ldr r0, [sp, #0x14]
	cmp r0, r1
	bne _02070CE4
	mov r0, #6
	mla r1, sb, r0, r6
	ldrh r0, [r1, #2]
	orr r0, r0, #0x2000
	strh r0, [r1, #2]
	ldrh r0, [r1, #2]
	tst r0, #0x8000
	ldrne r0, [sp, #0x2c]
	addne r0, r0, #1
	strne r0, [sp, #0x2c]
_02070CE4:
	ldr r0, [sp, #0x4c]
	ldrh r0, [r0, #0x76]
	cmp r0, #0
	beq _02070D1C
	cmp sl, r0
	bne _02070D1C
	mov r0, #6
	mul r1, sb, r0
	add r2, r6, r1
	ldrh r0, [r2, #2]
	orr r0, r0, #0x800
	strh r0, [r2, #2]
	ldrh r0, [r6, r1]
	str r0, [sp, #0x34]
_02070D1C:
	mov r0, fp
	bl FUN_02072b24
	cmp r0, #0
	beq _02070D50
	mov r0, #0xf0
	bl FUN_020EF928
	add r0, r0, #0xf
	lsl r1, r0, #0x10
	mov r0, #6
	mla r2, sb, r0, r6
	ldrh r0, [r2, #2]
	add r0, r0, r1, lsr #16
	b _02070D68
_02070D50:
	mov r0, #6
	mla r2, sb, r0, r6
	ldrh r1, [r2, #2]
	rsb r0, r8, #0xff
	lsl r0, r0, #0x10
	add r0, r1, r0, lsr #16
_02070D68:
	strh r0, [r2, #2]
	add r0, sb, #1
	lsl r0, r0, #0x10
	lsr sb, r0, #0x10
_02070D78:
	add r8, r8, #1
_02070D7C:
	cmp r8, #0x10
	blt _02070B58
	ldr r0, [sp, #0x24]
	add r7, r7, #1
	cmp r7, r0
	blt _02070B04
	ldr r0, _020713AC ; =0x0209A250
	ldr r1, [sp, #0x20]
	bl FUN_0202e1c0
	ldr r0, [sp, #0x28]
	cmp r0, #4
	bge _02070DE4
	mov r0, #1
	str r0, [sp, #0x3c]
	mov r7, #0
	add r3, sp, #0x84
	mov r0, #6
	ldr r1, _020713C0 ; =0x00007FFF
	b _02070DDC
_02070DC8:
	mla r4, r7, r0, r3
	ldrh r2, [r4, #2]
	add r7, r7, #1
	and r2, r2, r1
	strh r2, [r4, #2]
_02070DDC:
	cmp r7, sb
	blt _02070DC8
_02070DE4:
	ldr r0, [sp, #0x2c]
	ldr r1, [sp, #0x28]
	cmp r0, #4
	movlt r0, #1
	strlt r0, [sp, #0x38]
	mov r0, #0x64
	mul r0, r1, r0
	mov r1, sb
	bl FUN_0201f9bc
	ldr r4, _020713A4 ; =0x020A9C40
	and r1, r0, #0xff
	mov r0, r4
	bl FUN_020463dc
	ldr r0, [sp, #0x34]
	cmp r0, #0
	beq _02070E30
	mov r0, r4
	mov r1, #0
	bl FUN_020463dc
_02070E30:
	mov r7, #0
	b _02070ECC
_02070E38:
	add r0, r7, #1
	lsl r0, r0, #0x10
	lsr r8, r0, #0x10
	mov r0, #6
	mul r4, r7, r0
	add r3, sp, #0x84
	mov r5, r0
	add r2, r3, r4
	b _02070EC0
_02070E5C:
	ldrh sl, [r2, #2]
	mul r1, r8, r5
	add r0, r3, r1
	ldrh r6, [r0, #2]
	cmp sl, r6
	bhs _02070EBC
	ldrh ip, [r3, r1]
	ldrh sl, [r0, #2]
	ldrh r6, [r0, #4]
	strh ip, [sp, #0x5c]
	strh sl, [sp, #0x5e]
	strh r6, [sp, #0x60]
	ldrh ip, [r3, r4]
	ldrh sl, [sp, #0x5c]
	ldrh r6, [sp, #0x5e]
	strh ip, [r3, r1]
	ldrh ip, [r2, #2]
	ldrh r1, [sp, #0x60]
	strh ip, [r0, #2]
	ldrh ip, [r2, #4]
	strh ip, [r0, #4]
	strh sl, [r3, r4]
	strh r6, [r2, #2]
	strh r1, [r2, #4]
_02070EBC:
	add r8, r8, #1
_02070EC0:
	cmp r8, sb
	blt _02070E5C
	add r7, r7, #1
_02070ECC:
	sub r0, sb, #1
	cmp r7, r0
	blt _02070E38
	add r2, sp, #0x400
	add r1, sp, #0x400
	mov r7, #0
	add r5, sp, #0x84
	add r2, r2, #0x98
	add r1, r1, #0x9a
	mov r0, #6
	b _02070F10
_02070EF8:
	mul r3, r7, r0
	ldrh r4, [r5, r3]
	lsl r3, r7, #3
	add r7, r7, #1
	strh r4, [r2, r3]
	strb r7, [r1, r3]
_02070F10:
	cmp r7, #4
	blt _02070EF8
	add r0, sp, #0x400
	mov r7, #4
	mov r2, #0
	add r0, r0, #0x98
	b _02070F38
_02070F2C:
	lsl r1, r7, #3
	strh r2, [r0, r1]
	add r7, r7, #1
_02070F38:
	cmp r7, #0x10
	blt _02070F2C
	add r1, sp, #0x400
	add r1, r1, #0x4c
	ldr r0, [sp, #0x44]
	mov r2, #0x4c
	b _02070F9C
_02070F54:
	add r4, sp, #0x400
	add r4, r4, #0x4c
	ldr r1, [sp, #0x14]
	mov r0, fp
	mov r2, r4
	bl FUN_0207039c
	cmp r0, #0
	addeq sp, sp, #0x1b8
	addeq sp, sp, #0x400
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #0x44]
	mov r0, r4
	mov r2, #0x4c
	bl _memcpy
	add r0, sp, #0x500
	add r0, r0, #0x98
	mov r1, r6
	mov r2, #0x20
_02070F9C:
	bl _memcpy
_02070FA0:
	ldr r0, [sp, #0x44]
	ldr r1, _020713C4 ; =0x020A06D2
	ldrh r3, [r0, #0x22]
	ldr r0, [sp, #0x10]
	lsl r2, r0, #1
	ldr r0, [sp, #0x44]
	strh r3, [r0, #0x48]
	ldr r0, [sp, #0x14]
	ldr r3, [sp, #0x18]
	strh r0, [r1, r2]
	ldr r0, [sp, #0x10]
	ldr r2, [sp, #0x10]
	cmp r0, #0
	ldreq r1, _02071398 ; =0x020A0640
	ldrbeq r0, [r1, #0x1a]
	cmpeq r0, #0
	ldreq r0, [sp, #0x10]
	strbeq r0, [r1, #0x9a]
	ldr r0, [sp, #0x44]
	ldrh r1, [r0, #0x34]
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	ldr r0, [sp, #0x44]
	moveq r4, #1
	strh r1, [r0, #0x4a]
	movne r4, #0
	add r1, sp, #0x400
	add r1, r1, #0x4c
	mov r0, fp
	str r4, [sp]
	bl FUN_020701c8
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	beq _020710CC
	mov r0, fp
	mov r5, #1
	mov r7, #0
	bl FUN_020731a4
	cmp r0, #0
	beq _020710CC
	ldrb r0, [fp, #0x886]
	cmp r0, #0
	bne _020710CC
	mov sb, r7
	ldr r6, _020713C8 ; =0x02091488
	ldr r4, _020713CC ; =0x0209A11C
	b _020710BC
_0207105C:
	mov r0, sb
	bl FUN_020EFA80
	movs r8, r0
	beq _020710B8
	bl FUN_0206d5f0
	cmp r0, #1
	bne _020710B8
	mov r0, r8
	mov r1, r7
	bl FUN_0206d824
	cmp r0, #0
	beq _020710B8
	ldrh r1, [r8, #0x4e]
	ldr r0, [r4]
	mov r2, r7
	bl FUN_0206c7dc
	cmp r0, #0
	beq _020710B8
	mov r0, fp
	mov r1, r8
	mov r2, r6
	bl FUN_0204ee18
	str r5, [sp, #0x38]
_020710B8:
	add sb, sb, #1
_020710BC:
	ldr r0, [r4]
	bl FUN_0206c2f8
	cmp sb, r0
	blt _0207105C
_020710CC:
	ldr r0, [sp, #0x34]
	cmp r0, #0
	beq _02071170
	ldr r0, [sp, #0x10]
	cmp r0, #1
	bne _02071170
	mov r0, fp
	bl FUN_020731a4
	cmp r0, #0
	beq _02071170
	ldr r0, [sp, #0x34]
	mov r1, #0
	orr r0, r0, #0x8000
	bl FUN_020EFA9C
	movs r4, r0
	beq _020711C4
	add r0, r4, #0x1c
	bl GetStrLen
	add r0, r0, #1
	add r0, r0, r0, lsr #31
	asr r5, r0, #1
	cmp r5, #5
	bgt _020711C4
	ldr r1, [sp, #0x10]
	mov r0, fp
	bl FUN_0207249c
	add r1, r4, #0x1c
	str r0, [sp, #0x44]
	bl _strcpy
	ldr r4, _020713D0 ; =0x02091494
	b _02071158
_02071148:
	ldr r0, [sp, #0x44]
	mov r1, r4
	bl FUN_02014ee8
	add r5, r5, #1
_02071158:
	cmp r5, #5
	blt _02071148
	ldr r1, _020713D4 ; =0x02091498
	ldr r0, [sp, #0x44]
	bl FUN_02014ee8
	b _020711C4
_02071170:
	ldr r0, [sp, #0x38]
	cmp r0, #0
	beq _020711C4
	ldrb r0, [fp, #0x88a]
	cmp r0, #0
	ldrbeq r0, [fp, #0x886]
	cmpeq r0, #0
	bne _020711C4
	ldr r4, _020713D8 ; =0x020914A4
	mov r3, #0xf
_02071198:
	ldrb r2, [r4]
	ldrb r1, [r4, #1]
	ldr r0, [sp, #0x44]
	add r4, r4, #2
	strb r1, [r0, #1]
	strb r2, [r0], #2
	subs r3, r3, #1
	str r0, [sp, #0x44]
	bne _02071198
	ldrb r1, [r4]
	strb r1, [r0]
_020711C4:
	ldr r1, [sp, #0x10]
	mov r0, fp
	bl FUN_020724dc
	ldr r1, [sp, #0x14]
	strh r1, [r0, #8]
	ldrb r0, [fp, #0x88a]
	cmp r0, #0
	beq _02071260
	bl FUN_020F066C
	cmp r0, #0
	ldreq r0, [sp, #0x10]
	cmpeq r0, #1
	bne _02071260
	mov r7, #0x10
	ldr r5, _020713DC ; =0x020914B0
	ldr r4, _020713E0 ; =0x00000103
	b _02071258
_02071208:
	mov r0, r7
	bl FUN_020EFA80
	movs r6, r0
	beq _02071254
	bl FUN_0206d64c
	cmp r0, #0
	beq _02071254
	mov r0, r6
	bl FUN_0206d5f0
	cmp r0, #1
	bne _02071254
	ldr r0, [sp, #0x14]
	cmp r0, r4
	cmpne r0, #0x104
	beq _02071254
	mov r0, fp
	mov r1, r6
	mov r2, r5
	bl FUN_0204ee18
_02071254:
	add r7, r7, #1
_02071258:
	cmp r7, #0x20
	blt _02071208
_02071260:
	ldr r0, [sp, #0x1c]
	mov r4, #0
	cmp r0, #0
	beq _02071360
	ldr r1, _02071394 ; =0x020A1640
	ldr r0, _0207139C ; =0x00000808
	ldr r2, [r1, #0x230]
	ldrb r1, [r1, #0x246]
	add r2, r2, #8
	mov r6, #0x10
	mla r5, r1, r0, r2
	add sl, r5, #0xd4
	b _02071358
_02071294:
	mov r0, r6
	bl FUN_020EFA80
	movs r7, r0
	beq _02071354
	bl FUN_0206cc00
	mov r8, r4
	mov r1, #0x6c
	b _020712D0
_020712B4:
	mul r3, r8, r1
	add r2, r5, r3
	ldrh r2, [r2, #0xd8]
	cmp r0, r2
	addeq sb, sl, r3
	beq _020712DC
	add r8, r8, #1
_020712D0:
	cmp r8, #0x10
	blt _020712B4
	mov sb, r4
_020712DC:
	cmp sb, #0
	beq _02071354
	mov r0, r7
	bl FUN_0206dcd4
	ldrb r8, [r0, #0x56]
	mov r0, r7
	bl FUN_0206dcd4
	mov r1, sb
	bl FUN_0206ed40
	mov r0, r7
	bl FUN_0206dcd4
	mov r1, r8
	bl FUN_0206e7e4
	mov r0, r7
	mov r1, #0x8000
	bl FUN_0206d434
	cmp r0, #0
	mov r0, r7
	mov r1, #0x2000
	beq _02071334
	bl FUN_0206d3c8
	b _02071338
_02071334:
	bl FUN_0206d3fc
_02071338:
	str r4, [sp]
	mov r0, fp
	mov r1, r7
	mov r2, #1
	mov r3, r4
	str r4, [sp, #4]
	bl FUN_0204e79c
_02071354:
	add r6, r6, #1
_02071358:
	cmp r6, #0x20
	blt _02071294
_02071360:
	mov r0, fp
	bl FUN_020731a4
	cmp r0, #0
	addne sp, sp, #0x1b8
	addne sp, sp, #0x400
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #0x10]
	mov r0, fp
	mov r2, #1
	bl FUN_02072560
	add sp, sp, #0x1b8
	add sp, sp, #0x400
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02071394: .word 0x020A1640
_02071398: .word 0x020A0640
_0207139C: .word 0x00000808
_020713A0: .word 0x020A06BC
_020713A4: .word 0x020A9C40
_020713A8: .word 0x0209143C
_020713AC: .word 0x0209A250
_020713B0: .word 0x02091458
_020713B4: .word 0x02091470
_020713B8: .word 0x0000EFFF
_020713BC: .word 0x0209A0AC
_020713C0: .word 0x00007FFF
_020713C4: .word 0x020A06D2
_020713C8: .word 0x02091488
_020713CC: .word 0x0209A11C
_020713D0: .word 0x02091494
_020713D4: .word 0x02091498
_020713D8: .word 0x020914A4
_020713DC: .word 0x020914B0
_020713E0: .word 0x00000103

	arm_func_start FUN_020713e4
FUN_020713e4: ; 0x020713E4
	push {r3, lr}
	sub sp, sp, #0x10
	mov lr, r0
	ldr r0, [lr, #0x7d0]
	cmp r0, #0
	bne _02071444
	ldr r3, _02071450 ; =0x0209A250
	ldr r1, _02071454 ; =0x020914BC
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _02071434
	mov r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	mov ip, #1
	add r2, lr, #0x7d0
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_020713e4
_02071434:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, pc}
_02071444:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_02071450: .word 0x0209A250
_02071454: .word 0x020914BC

	arm_func_start FUN_02071458
FUN_02071458: ; 0x02071458
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r4, #0
	mov r8, r0
	str r4, [sp]
	ldr r0, [r8, #0x7d8]
	mov r5, #0x2c
	cmp r0, #0
	ldr r6, _020715AC ; =0x020914D8
	bne _020714B0
	ldr r0, _020715B0 ; =0x00000101
	bl FUN_02086750
	add r0, sp, #0
	mov r1, r6
	mov r2, r4
	mov r3, r4
	bl FUN_02085bbc
	cmp r0, #0
	bne _020714BC
	add sp, sp, #4
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02071458
_020714B0:
	add sp, sp, #4
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, pc}
_020714BC:
	mov r1, r4
	mov r0, #0x800
	bl FUN_020866d8
	str r0, [r8, #0x7fc]
	mov r6, #1
	mov r7, r6
	strh r4, [r0]
_020714D8:
	ldr r1, [sp]
	mov r0, r8
	mla r1, r7, r5, r1
	mov r2, r5
	bl FUN_020748c8
	ldrsb r0, [r0]
	cmp r0, #0
	ldreq r1, [r8, #0x7fc]
	lsleq r0, r7, #1
	strheq r4, [r1, r0]
	beq _0207151C
	add r0, r6, #1
	ldr r2, [r8, #0x7fc]
	lsl r1, r7, #1
	lsl r0, r0, #0x10
	strh r6, [r2, r1]
	lsr r6, r0, #0x10
_0207151C:
	add r7, r7, #1
	cmp r7, #0x400
	blt _020714D8
	mul r0, r6, r5
	mov r1, #0
	bl FUN_020866d8
	mov r1, r0
	str r1, [r8, #0x7d8]
	ldr r0, [sp]
	mov r2, r5
	mov r6, #1
	bl _memcpy
	mov r4, r6
_02071550:
	ldr r1, [r8, #0x7fc]
	lsl r0, r4, #1
	ldrh r0, [r1, r0]
	cmp r0, #0
	beq _02071584
	ldr r0, [sp]
	mul r1, r6, r5
	ldr r3, [r8, #0x7d8]
	mla r0, r4, r5, r0
	mov r2, r5
	add r1, r3, r1
	add r6, r6, #1
	bl _memcpy
_02071584:
	add r4, r4, #1
	cmp r4, #0x400
	blt _02071550
	ldr r0, [sp]
	cmp r0, #0
	beq _020715A0
	bl FUN_02086738
_020715A0:
	mov r0, #1
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_020715AC: .word 0x020914D8
_020715B0: .word 0x00000101

	arm_func_start FUN_020715b4
FUN_020715b4: ; 0x020715B4
	push {r3, r4, r5, lr}
	sub sp, sp, #0x10
	mov r5, r0
	ldr r0, [r5, #0x814]
	mov r4, #0
	cmp r0, #0
	bne _02071624
	ldr r3, _02071690 ; =0x0209A250
	ldr r1, _02071694 ; =0x020914E8
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, r4
	beq _02071608
	str r4, [sp]
	str r4, [sp, #4]
	add r2, r5, #0x14
	str r4, [sp, #8]
	mov ip, #1
	add r2, r2, #0x800
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_020715b4
_02071608:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, _02071698 ; =0x0209A120
	lsr r0, r0, #1
	str r0, [r1]
_02071624:
	ldr r0, [r5, #0x818]
	cmp r0, #0
	bne _02071684
	ldr r3, _02071690 ; =0x0209A250
	ldr r1, _0207169C ; =0x02091504
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _02071668
	str r4, [sp]
	str r4, [sp, #4]
	add r2, r5, #0x18
	str r4, [sp, #8]
	mov r4, #1
	add r2, r2, #0x800
	str r4, [sp, #0xc]
	bl FUN_0202eff0
_02071668:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r1, _020716A0 ; =0x0209A130
	lsr r0, r0, #1
	str r0, [r1]
_02071684:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, r4, r5, pc}
	.align 2, 0_02071690: .word 0x0209A250
_02071694: .word 0x020914E8
_02071698: .word 0x0209A120
_0207169C: .word 0x02091504
_020716A0: .word 0x0209A130

	arm_func_start FUN_020716a4
FUN_020716a4: ; 0x020716A4
	push {r3, lr}
	sub sp, sp, #0x10
	mov r2, r0
	ldr r0, [r2, #0x7d4]
	cmp r0, #0
	bne _02071708
	ldr r3, _02071714 ; =0x0209A250
	ldr r1, _02071718 ; =0x02091524
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _020716F8
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	add r2, r2, #0x3d4
	str ip, [sp, #8]
	mov ip, #1
	add r2, r2, #0x400
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_020716a4
_020716F8:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, pc}
_02071708:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_02071714: .word 0x0209A250
_02071718: .word 0x02091524

	arm_func_start FUN_0207171c
FUN_0207171c: ; 0x0207171C
	push {r4, lr}
	sub sp, sp, #0x10
	mov r4, r0
	ldr r1, [r4, #0x83c]
	cmp r1, #0
	bne _02071780
	ldr r3, _0207179C ; =0x0209A250
	ldr r1, _020717A0 ; =0x02091540
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _02071770
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	add r2, r4, #0x3c
	str ip, [sp, #8]
	mov ip, #1
	add r2, r2, #0x800
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_0207171c
_02071770:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r4, pc}
_02071780:
	ldr r1, _020717A4 ; =0xC7CE0C7D
	umull r1, r2, r0, r1
	lsr r2, r2, #5
	str r2, [r4, #0x838]
	mov r0, #1
	add sp, sp, #0x10
	pop {r4, pc}
	.align 2, 0_0207179C: .word 0x0209A250
_020717A0: .word 0x02091540
_020717A4: .word 0xC7CE0C7D

	arm_func_start FUN_020717a8
FUN_020717a8: ; 0x020717A8
	push {r3, lr}
	sub sp, sp, #0x10
	mov lr, r0
	ldr r0, [lr, #0x840]
	cmp r0, #0
	bne _02071808
	ldr r3, _02071814 ; =0x0209A250
	ldr r1, _02071818 ; =0x02091560
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _020717F8
	mov r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	mov ip, #1
	add r2, lr, #0x840
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_020717a8
_020717F8:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, pc}
_02071808:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_02071814: .word 0x0209A250
_02071818: .word 0x02091560

	arm_func_start FUN_0207181c
FUN_0207181c: ; 0x0207181C
	push {r3, lr}
	sub sp, sp, #0x10
	mov r2, r0
	ldr r0, [r2, #0x808]
	cmp r0, #0
	bne _02071880
	ldr r3, _0207188C ; =0x0209A250
	ldr r1, _02071890 ; =0x0209157C
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _02071870
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	add r2, r2, #8
	str ip, [sp, #8]
	mov ip, #1
	add r2, r2, #0x800
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_0207181c
_02071870:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, pc}
_02071880:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_0207188C: .word 0x0209A250
_02071890: .word 0x0209157C

	arm_func_start FUN_02071894
FUN_02071894: ; 0x02071894
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #4
	mov r8, r0
	ldr r0, [r8, #0x808]
	mov r7, r1
	cmp r0, #0
	addne sp, sp, #4
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, pc}
	ldr r6, _0207192C ; =0x0209A250
	mov r5, #0x300
	mov r0, r6
	mov r1, r5
	bl FUN_0202de44
	cmp r0, #0
	str r0, [r8, #0x808]
	addeq sp, sp, #4
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, pc}
	str r0, [r7]
	mov r4, #0
	ldr r0, _02071930 ; =0x02091598
	mov r1, r7
	mov r2, r4
	mov r3, r5
	str r4, [sp]
	bl FUN_020F3234
	cmp r0, #0
	addne sp, sp, #4
	movne r0, #1
	popne {r3, r4, r5, r6, r7, r8, pc}
	ldr r1, [r8, #0x808]
	mov r0, r6
	bl FUN_0202e1c0
	mov r0, r4
	str r4, [r8, #0x808]
	add sp, sp, #4
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0207192C: .word 0x0209A250
_02071930: .word 0x02091598
	arm_func_end FUN_02071894

	arm_func_start FUN_02071934
FUN_02071934: ; 0x02071934
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x808]
	cmp r1, #0
	moveq r0, #1
	popeq {r4, pc}
	ldr r0, _02071964 ; =0x0209A250
	bl FUN_0202e1c0
	mov r0, #0
	str r0, [r4, #0x808]
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_02071964: .word 0x0209A250
	arm_func_end FUN_02071934

	arm_func_start FUN_02071968
FUN_02071968: ; 0x02071968
	push {r3, lr}
	sub sp, sp, #0x10
	mov r2, r0
	ldr r0, [r2, #0x80c]
	cmp r0, #0
	bne _020719CC
	ldr r3, _020719D8 ; =0x0209A250
	ldr r1, _020719DC ; =0x020915B4
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _020719BC
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	add r2, r2, #0xc
	str ip, [sp, #8]
	mov ip, #1
	add r2, r2, #0x800
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_02071968
_020719BC:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, pc}
_020719CC:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_020719D8: .word 0x0209A250
_020719DC: .word 0x020915B4

	arm_func_start FUN_020719e0
FUN_020719e0: ; 0x020719E0
	push {r3, r4, r5, lr}
	sub sp, sp, #0x10
	mov r5, r0
	ldr r0, [r5, #0x7e0]
	mov r4, #0
	cmp r0, #0
	bne _02071A40
	ldr r3, _02071AA0 ; =0x0209A250
	ldr r1, _02071AA4 ; =0x020915D4
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, r4
	beq _02071A30
	str r4, [sp]
	str r4, [sp, #4]
	str r4, [sp, #8]
	mov ip, #1
	add r2, r5, #0x7e0
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_020719e0
_02071A30:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, pc}
_02071A40:
	ldr r0, [r5, #0x7e4]
	cmp r0, #0
	bne _02071A94
	ldr r3, _02071AA0 ; =0x0209A250
	ldr r1, _02071AA8 ; =0x020915F0
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _02071A84
	str r4, [sp]
	str r4, [sp, #4]
	add r2, r5, #0x3e4
	str r4, [sp, #8]
	mov ip, #1
	add r2, r2, #0x400
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_02071A84:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, pc}
_02071A94:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, r4, r5, pc}
	.align 2, 0_02071AA0: .word 0x0209A250
_02071AA4: .word 0x020915D4
_02071AA8: .word 0x020915F0

	arm_func_start FUN_02071aac
FUN_02071aac: ; 0x02071AAC
	push {r3, lr}
	sub sp, sp, #0x10
	mov r2, r0
	ldr r0, [r2, #0x7e8]
	cmp r0, #0
	bne _02071B10
	ldr r3, _02071B1C ; =0x0209A250
	ldr r1, _02071B20 ; =0x0209160C
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _02071B00
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	add r2, r2, #0x3e8
	str ip, [sp, #8]
	mov ip, #1
	add r2, r2, #0x400
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_02071aac
_02071B00:
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, pc}
_02071B10:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_02071B1C: .word 0x0209A250
_02071B20: .word 0x0209160C

	arm_func_start FUN_02071b24
FUN_02071b24: ; 0x02071B24
	push {r4, lr}
	sub sp, sp, #0x30
	ldr ip, _02071BCC ; =0x0208C50C
	add r3, sp, #0x10
	mov r4, r0
	mov r2, #0xf
	arm_func_end FUN_02071b24
_02071B3C:
	ldrb r0, [ip, #1]
	ldrb r1, [ip], #2
	subs r2, r2, #1
	strb r0, [r3, #1]
	strb r1, [r3], #2
	bne _02071B3C
	ldr r0, [r4, #0x844]
	cmp r0, #0
	bne _02071BC0
	ldr r3, _02071BD0 ; =0x0209A250
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _02071B9C
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	add r2, r4, #0x44
	str ip, [sp, #8]
	mov ip, #1
	add r1, sp, #0x10
	add r2, r2, #0x800
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_02071B9C:
	cmp r0, #0
	ldrne r1, _02071BD4 ; =0xAAAAAAAB
	moveq r0, #0
	umullne r1, r2, r0, r1
	lsrne r2, r2, #3
	add sp, sp, #0x30
	strbne r2, [r4, #0x848]
	movne r0, #1
	pop {r4, pc}
_02071BC0:
	mov r0, #0
	add sp, sp, #0x30
	pop {r4, pc}
	.align 2, 0_02071BCC: .word 0x0208C50C
_02071BD0: .word 0x0209A250
_02071BD4: .word 0xAAAAAAAB

	arm_func_start FUN_02071bd8
FUN_02071bd8: ; 0x02071BD8
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	bl FUN_02071c18
	cmp r4, r0
	movhs r0, #0
	pophs {r3, r4, r5, pc}
	cmp r4, #0
	ldr r0, [r5, #0x844]
	mov r1, #0
	pople {r3, r4, r5, pc}
	arm_func_end FUN_02071bd8
_02071C04:
	add r1, r1, #1
	cmp r1, r4
	add r0, r0, #0xc
	blt _02071C04
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02071c18
FUN_02071c18: ; 0x02071C18
	ldrb r0, [r0, #0x848]
	bx lr
	arm_func_end FUN_02071c18

	arm_func_start FUN_02071c20
FUN_02071c20: ; 0x02071C20
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #8
	movs r8, r1
	mov sb, r0
	ldrhne r0, [r8, #4]
	mov r7, r2
	mov r6, r3
	cmpne r0, #0
	mov r4, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r7, #0x64
	addhs sp, sp, #8
	movhs r0, #0
	pophs {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r2, r4
	ldr r0, _02071D68 ; =0x0209A11C
	str r2, [sp]
	ldr r0, [r0]
	mov r1, r7
	mov r3, r2
	bl FUN_0206c300
	mov r5, r0
	bl FUN_0206dcd4
	mov r1, r8
	bl FUN_0206ed40
	cmp r6, #0
	beq _02071CA8
	mov r0, r6
	mov r1, r5
	mov r2, #0x68
	bl _memcpy
	b _02071CB8
	arm_func_end FUN_02071c20
_02071CA8:
	ldrh r1, [r8, #4]
	mov r0, sb
	mov r2, r5
	bl FUN_0204bd64
_02071CB8:
	lsl r0, r7, #0x18
	asr r2, r0, #0x18
	ldr r1, _02071D6C ; =0x0000FFFF
	mov r0, r5
	strh r2, [r5, #0x94]
	bl FUN_0206d634
	mov r0, r5
	mov r1, #0x21
	bl FUN_0206d620
	mov r0, r5
	bl FUN_0206d5f0
	mov r1, r0
	ldr r0, _02071D70 ; =0x0209BA20
	bl FUN_0205107c
	cmp r0, #0
	beq _02071D20
	mov r1, #0
	bl FUN_0204fbe8
	mov r6, r0
	mov r0, r5
	bl FUN_0206cbf8
	cmp r6, r0
	bne _02071D20
	mov r0, r5
	mov r1, #0x80
	bl FUN_0206d620
_02071D20:
	mov r0, r5
	bl FUN_0206dcd4
	mov r2, r4
	mov r1, #3
	bl FUN_0206def8
	mov r0, #4
	mov r6, #1
	str r0, [sp]
	ldr r7, [sp, #0x28]
	mov r0, sb
	mov r1, r5
	mov r2, r6
	mov r3, r4
	str r7, [sp, #4]
	bl FUN_0204e79c
	mov r0, r6
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02071D68: .word 0x0209A11C
_02071D6C: .word 0x0000FFFF
_02071D70: .word 0x0209BA20

	arm_func_start FUN_02071d74
FUN_02071d74: ; 0x02071D74
	push {r3, lr}
	ldr ip, [sp, #8]
	ldr r0, _02071DAC ; =0x0209A11C
	str ip, [sp]
	mov ip, r1
	mov r1, r2
	mov r2, r3
	ldr r0, [r0]
	mov r3, ip
	bl FUN_0206c300
	cmp r0, #0
	ldrbne r1, [sp, #0xc]
	strbne r1, [r0, #0x83]
	pop {r3, pc}
	.align 2, 0_02071DAC: .word 0x0209A11C
	arm_func_end FUN_02071d74

	arm_func_start FUN_02071db0
FUN_02071db0: ; 0x02071DB0
	push {r3, lr}
	cmp r1, #0
	bne _02071DC4
	bl FUN_02071dd0
	pop {r3, pc}
	arm_func_end FUN_02071db0
_02071DC4:
	mov r1, #0
	bl FUN_02071f00
	pop {r3, pc}

	arm_func_start FUN_02071dd0
FUN_02071dd0: ; 0x02071DD0
	push {r4, lr}
	mov r1, #0
	mov r4, r0
	bl FUN_02071df8
	cmp r0, #0
	popge {r4, pc}
	mov r0, r4
	mov r1, #1
	bl FUN_02071e90
	pop {r4, pc}
	arm_func_end FUN_02071dd0

	arm_func_start FUN_02071df8
FUN_02071df8: ; 0x02071DF8
	push {r4, r5, r6, lr}
	mov r5, #0
	mov r6, r1
	mov r1, r5
	bl FUN_0204c420
	cmp r0, #0x64
	subge r0, r5, #1
	popge {r4, r5, r6, pc}
	arm_func_end FUN_02071df8
_02071E18:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	moveq r0, r5
	popeq {r4, r5, r6, pc}
	bl FUN_0206d64c
	cmp r0, #0
	bne _02071E4C
	mov r0, r4
	bl FUN_0206d660
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, pc}
_02071E4C:
	add r5, r5, #1
	cmp r5, #0x10
	blt _02071E18
	cmp r6, #0
	beq _02071E88
	mov r4, #0
_02071E64:
	mov r0, r4
	bl FUN_020EFA80
	bl FUN_0206d660
	cmp r0, #0
	moveq r0, r4
	popeq {r4, r5, r6, pc}
	add r4, r4, #1
	cmp r4, #0x10
	blt _02071E64
_02071E88:
	mvn r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02071e90
FUN_02071e90: ; 0x02071E90
	push {r3, r4, r5, lr}
	cmp r1, #0
	beq _02071EB4
	mov r4, #0
	mov r1, r4
	bl FUN_0204c420
	cmp r0, #0x64
	subge r0, r4, #1
	popge {r3, r4, r5, pc}
	arm_func_end FUN_02071e90
_02071EB4:
	mov r5, #0
_02071EB8:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	moveq r0, r5
	popeq {r3, r4, r5, pc}
	bl FUN_0206d64c
	cmp r0, #0
	bne _02071EEC
	mov r0, r4
	bl FUN_0206d660
	cmp r0, #0
	moveq r0, r5
	popeq {r3, r4, r5, pc}
_02071EEC:
	add r5, r5, #1
	cmp r5, #0x64
	blt _02071EB8
	mvn r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02071f00
FUN_02071f00: ; 0x02071F00
	push {r4, r5, r6, lr}
	mov r4, #1
	mov r6, r1
	mov r1, r4
	bl FUN_0204c420
	cmp r0, #0x10
	subge r0, r4, #2
	popge {r4, r5, r6, pc}
	mov r5, #0x10
	arm_func_end FUN_02071f00
_02071F24:
	mov r0, r5
	bl FUN_020EFA80
	movs r4, r0
	moveq r0, r5
	popeq {r4, r5, r6, pc}
	bl FUN_0206d64c
	cmp r0, #0
	bne _02071F58
	mov r0, r4
	bl FUN_0206d660
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, pc}
_02071F58:
	add r5, r5, #1
	cmp r5, #0x20
	blt _02071F24
	cmp r6, #0
	beq _02071F94
	mov r4, #0x10
_02071F70:
	mov r0, r4
	bl FUN_020EFA80
	bl FUN_0206d660
	cmp r0, #0
	moveq r0, r4
	popeq {r4, r5, r6, pc}
	add r4, r4, #1
	cmp r4, #0x20
	blt _02071F70
_02071F94:
	mvn r0, #0
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02071f9c
FUN_02071f9c: ; 0x02071F9C
	cmp r1, #0
	rsbeq r2, r2, #0
	mov r0, r2
	bx lr
	arm_func_end FUN_02071f9c

	arm_func_start FUN_02071fac
FUN_02071fac: ; 0x02071FAC
	push {r3, lr}
	sub sp, sp, #0x10
	mov lr, r0
	ldr r0, [lr, #0x7f0]
	cmp r0, #0
	addne sp, sp, #0x10
	movne r0, #1
	popne {r3, pc}
	ldr r3, _02072018 ; =0x0209A250
	ldr r1, _0207201C ; =0x0209162C
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _02072004
	mov r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	mov ip, #1
	add r2, lr, #0x7f0
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_02071fac
_02072004:
	cmp r0, #0x1880
	movne r0, #0
	moveq r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_02072018: .word 0x0209A250
_0207201C: .word 0x0209162C

	arm_func_start FUN_02072020
FUN_02072020: ; 0x02072020
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x7f0]
	cmp r1, #0
	moveq r0, #1
	popeq {r4, pc}
	ldr r0, _02072050 ; =0x0209A250
	bl FUN_0202e1c0
	mov r0, #0
	str r0, [r4, #0x7f0]
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_02072050: .word 0x0209A250
	arm_func_end FUN_02072020

	arm_func_start FUN_02072054
FUN_02072054: ; 0x02072054
	push {r4, r5, lr}
	sub sp, sp, #0x14
	mov r5, r0
	add r0, r5, #0xec
	add r0, r0, #0x400
	movs r4, r1
	str r0, [sp, #0x10]
	beq _0207207C
	cmp r4, #0x38
	blo _02072080
	arm_func_end FUN_02072054
_0207207C:
	mov r4, #1
_02072080:
	ldrb r0, [r5, #0x87e]
	cmp r0, r4
	addeq r0, r5, #0xec
	addeq sp, sp, #0x14
	addeq r0, r0, #0x400
	popeq {r4, r5, pc}
	ldr r1, [r5, #0x7f0]
	cmp r1, #0
	movne r0, #0x188
	addne sp, sp, #0x14
	mlane r0, r4, r0, r1
	popne {r4, r5, pc}
	ldr r3, _02072110 ; =0x0209A250
	ldr r1, _02072114 ; =0x02091648
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _020720F0
	mov r2, #0x188
	mul ip, r4, r2
	str ip, [sp]
	str r2, [sp, #4]
	mov ip, #0
	str ip, [sp, #8]
	mov ip, #1
	add r2, sp, #0x10
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_020720F0:
	cmp r0, #0
	moveq r0, #0
	strbeq r0, [r5, #0x87e]
	addne r0, r5, #0xec
	strbne r4, [r5, #0x87e]
	addne r0, r0, #0x400
	add sp, sp, #0x14
	pop {r4, r5, pc}
	.align 2, 0_02072110: .word 0x0209A250
_02072114: .word 0x02091648

	arm_func_start FUN_02072118
FUN_02072118: ; 0x02072118
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r6, r0
	ldr r0, [r6, #0x83c]
	mov r5, r1
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r6, #0x838]
	mov r4, #0
	cmp r0, #0
	bls _02072174
	mov r7, #0x29
	arm_func_end FUN_02072118
_02072148:
	mul r8, r4, r7
	ldr sb, [r6, #0x83c]
	add r0, sb, r8
	bl FUN_0204b1d4
	cmp r5, r0
	addeq r0, sb, r8
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r6, #0x838]
	add r4, r4, #1
	cmp r4, r0
	blo _02072148
_02072174:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start thunk_FUN_02072118
thunk_FUN_02072118: ; 0x0207217C
	ldr ip, _02072184 ; =FUN_02072118
	bx ip
	.align 2, 0_02072184: .word FUN_02072118
	arm_func_end thunk_FUN_02072118

	arm_func_start FUN_02072188
FUN_02072188: ; 0x02072188
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_0204a2c4
	mov r0, r6
	mov r1, r5
	bl FUN_0204a2c4
	mov r1, r0
	mov r0, r6
	mov r2, r4
	bl FUN_020721bc
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02072188

	arm_func_start FUN_020721bc
FUN_020721bc: ; 0x020721BC
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, [r0, #0x83c]
	mov r4, r2
	cmp r3, #0
	mov r5, #1
	ldrb r1, [r1, #0x14]
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r1, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_02072118
	movs r6, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r7, #0
	arm_func_end FUN_020721bc
_020721FC:
	add r1, r7, #2
	mov r0, r6
	and r1, r1, #0xff
	bl FUN_0204b1dc
	cmp r0, #0xff
	beq _0207221C
	cmp r4, r0
	bhs _02072228
_0207221C:
	add r0, r7, #1
	and r5, r0, #0xff
	b _0207223C
_02072228:
	add r0, r7, #1
	lsl r0, r0, #0x10
	asr r7, r0, #0x10
	cmp r7, #0x13
	blt _020721FC
_0207223C:
	cmp r7, #0x13
	moveq r5, #0x14
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0207224c
FUN_0207224c: ; 0x0207224C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, r2
	mov sb, #0
	mov r7, r0
	lsl r0, r5, #0x10
	mov r6, r1
	mov r4, sb
	lsr r8, r0, #0x10
	arm_func_end FUN_0207224c
_0207226C:
	mov r0, r6
	mov r1, r4
	bl FUN_0206cdf8
	cmp r5, r0
	bne _020722A0
	mov r0, r6
	bl FUN_0206dcd4
	add r0, r0, r4
	ldrb r2, [r0, #0x44]
	mov r0, r7
	mov r1, r8
	bl FUN_02072188
	mov sb, r0
_020722A0:
	add r4, r4, #1
	cmp r4, #6
	blt _0207226C
	mov r0, sb
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_020722b4
FUN_020722b4: ; 0x020722B4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_020721bc
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldrb r1, [r5, #0x14]
	mov r0, r6
	bl FUN_02072118
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r1, r4
	bl FUN_0204b20c
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020722b4

	arm_func_start FUN_020722f4
FUN_020722f4: ; 0x020722F4
	push {r4, r5, r6, r7, r8, lr}
	ldr r7, [r0, #0x840]
	mov r8, r1
	mov r5, #0
	mov r4, #0xc
	arm_func_end FUN_020722f4
_02072308:
	mla r6, r5, r4, r7
	mov r0, r6
	mov r1, r8
	bl FUN_02023fe0
	cmp r0, #0
	ldrheq r0, [r6, #8]
	popeq {r4, r5, r6, r7, r8, pc}
	add r5, r5, #1
	cmp r5, #0x200
	blt _02072308
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02072338
FUN_02072338: ; 0x02072338
	push {r4, r5, r6, r7, r8, lr}
	ldr r7, [r0, #0x840]
	mov r8, r1
	mov r5, #0
	mov r4, #0xc
	arm_func_end FUN_02072338
_0207234C:
	mla r6, r5, r4, r7
	mov r0, r6
	mov r1, r8
	bl FUN_02023fe0
	cmp r0, #0
	ldrbeq r0, [r6, #0xa]
	popeq {r4, r5, r6, r7, r8, pc}
	add r5, r5, #1
	cmp r5, #0x200
	blt _0207234C
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0207237c
FUN_0207237c: ; 0x0207237C
	ldr r0, [r0, #0x860]
	ldr ip, _02072388 ; =LAB_02043c2c
	bx ip
	.align 2, 0_02072388: .word LAB_02043c2c
	arm_func_end FUN_0207237c

	arm_func_start FUN_0207238c
FUN_0207238c: ; 0x0207238C
	push {r3, lr}
	cmp r1, #0
	bne _020723AC
	bl FUN_02071f9c
	ldr r1, _020723C0 ; =0x0209A720
	ldr r1, [r1, #0xe8]
	sub r0, r1, r0
	pop {r3, pc}
	arm_func_end FUN_0207238c
_020723AC:
	bl FUN_02071f9c
	ldr r1, _020723C0 ; =0x0209A720
	ldr r1, [r1, #0xe0]
	sub r0, r1, r0
	pop {r3, pc}
	.align 2, 0_020723C0: .word 0x0209A720

	arm_func_start FUN_020723c4
FUN_020723c4: ; 0x020723C4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02073194
	cmp r0, #0
	bne _020723F4
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_0207238c
	pop {r4, r5, r6, pc}
	arm_func_end FUN_020723c4
_020723F4:
	cmp r5, #0
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bne _0207241C
	bl FUN_02071f9c
	ldr r1, _02072430 ; =0x0209A720
	ldr r1, [r1, #0x100]
	sub r0, r1, r0
	pop {r4, r5, r6, pc}
_0207241C:
	bl FUN_02071f9c
	ldr r1, _02072430 ; =0x0209A720
	ldr r1, [r1, #0xf8]
	sub r0, r1, r0
	pop {r4, r5, r6, pc}
	.align 2, 0_02072430: .word 0x0209A720

	arm_func_start FUN_02072434
FUN_02072434: ; 0x02072434
	push {r3, r4, r5, lr}
	sub lr, r2, #1
	mov ip, #0xb
	mla r4, r1, ip, lr
	mov r5, r0
	cmp r2, #1
	blt _02072458
	cmp r2, #0xb
	ble _02072460
	arm_func_end FUN_02072434
_02072458:
	mov r0, #0
	pop {r3, r4, r5, pc}
_02072460:
	cmp r3, #0
	bne _02072484
	ldr r0, [r5, #0x7bc]
	ldr r1, [r0]
	ldr r1, [r1, #0x10]
	blx r1
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
_02072484:
	add r0, r5, r4
	ldrb r0, [r0, #0x84a]
	cmp r0, #1
	moveq r0, #1
	movne r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0207249c
FUN_0207249c: ; 0x0207249C
	add r2, r0, #0x24
	mov r0, #0x4c
	mla r0, r1, r0, r2
	bx lr
	arm_func_end FUN_0207249c

	arm_func_start FUN_020724ac
FUN_020724ac: ; 0x020724AC
	add r0, r0, #0xbc
	add r0, r0, r1, lsl #8
	bx lr
	arm_func_end FUN_020724ac

	arm_func_start FUN_020724b8
FUN_020724b8: ; 0x020724B8
	add r0, r0, #0x800
	strh r1, [r0, #0x64]
	strh r2, [r0, #0x66]
	bx lr
	arm_func_end FUN_020724b8

	arm_func_start FUN_020724c8
FUN_020724c8: ; 0x020724C8
	ldr ip, _020724D8 ; =FUN_0204f7c0
	mov r2, #0x25
	mov r3, #0
	bx ip
	.align 2, 0_020724D8: .word FUN_0204f7c0
	arm_func_end FUN_020724c8

	arm_func_start FUN_020724dc
FUN_020724dc: ; 0x020724DC
	add r0, r0, #4
	add r0, r0, r1, lsl #4
	bx lr
	arm_func_end FUN_020724dc

	arm_func_start FUN_020724e8
FUN_020724e8: ; 0x020724E8
	add r0, r0, r1
	ldrb r0, [r0, #0x7c6]
	bx lr
	arm_func_end FUN_020724e8

	arm_func_start FUN_020724f4
FUN_020724f4: ; 0x020724F4
	push {r3, lr}
	sub sp, sp, #0x10
	mov r2, r0
	ldr r0, [r2, #0x7cc]
	cmp r0, #0
	addne sp, sp, #0x10
	popne {r3, pc}
	ldr r3, _02072558 ; =0x0209A250
	ldr r1, _0207255C ; =0x02091664
	ldr r0, [r3]
	cmp r0, #0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, pc}
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	add r2, r2, #0x3cc
	str ip, [sp, #8]
	mov ip, #1
	add r2, r2, #0x400
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_02072558: .word 0x0209A250
_0207255C: .word 0x02091664
	arm_func_end FUN_020724f4

	arm_func_start FUN_02072560
FUN_02072560: ; 0x02072560
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	bl FUN_0207249c
	mov r4, r0
	mov r0, r7
	bl FUN_020731a4
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	cmp r5, #0
	beq _0207259C
	mov r0, r7
	mov r1, r6
	bl FUN_020725ac
	arm_func_end FUN_02072560
_0207259C:
	add r0, r7, r6
	ldrb r0, [r0, #0x7c6]
	strb r0, [r4, #0x43]
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020725ac
FUN_020725ac: ; 0x020725AC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	str r1, [sp]
	bl FUN_020731a4
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp]
	mov r0, sl
	mov r8, #0
	bl FUN_0205107c
	ldr r5, _020726C0 ; =0x0209BA20
	ldr r4, _020726C4 ; =0x0209A0AC
	mov sb, r0
	mov r7, r8
	mov r6, r8
	mov fp, r8
	arm_func_end FUN_020725ac
_020725EC:
	mov r0, sb
	mov r1, r6
	bl FUN_0204fbe8
	cmp r0, #0
	beq _02072658
	mov r0, r5
	bl FUN_020731a4
	cmp r0, #0
	mov r0, sb
	mov r1, r6
	beq _0207262C
	bl FUN_0204fbe8
	mov r1, r0
	mov r0, r4
	bl FUN_0206c718
	b _02072638
_0207262C:
	bl FUN_0204fbe8
	mov r1, fp
	bl FUN_020EFA9C
_02072638:
	movs r1, r0
	beq _02072658
	mov r0, sl
	mov r2, #0x25
	mov r3, #0
	bl FUN_0204f02c
	add r8, r8, r0
	add r7, r7, #1
_02072658:
	add r6, r6, #1
	cmp r6, #0x10
	blt _020725EC
	cmp r7, #0
	moveq r0, #0
	beq _02072680
	add r0, r7, r7, lsr #31
	mov r1, r7
	add r0, r8, r0, asr #1
	bl FUN_0201f9bc
_02072680:
	ldr r1, [sl, #0x7cc]
	lsl r0, r0, #1
	ldrsh r3, [r1, r0]
	ldr r1, [sp]
	add r0, sl, #0xc6
	add r4, r0, #0x700
	mov r2, r1
	mov r0, sl
	strb r3, [r4, r2]
	bl FUN_0207249c
	ldr r1, [sp]
	ldrb r2, [r4, r1]
	ldrb r1, [r0, #0x43]
	cmp r1, r2
	strbhi r2, [r0, #0x43]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020726C0: .word 0x0209BA20
_020726C4: .word 0x0209A0AC

	arm_func_start FUN_020726c8
FUN_020726c8: ; 0x020726C8
	strb r1, [r0, #0x882]
	bx lr
	arm_func_end FUN_020726c8

	arm_func_start FUN_020726d0
FUN_020726d0: ; 0x020726D0
	ldr r0, _020726DC ; =0x020A0B00
	ldr ip, _020726E0 ; =LAB_02074588
	bx ip
	.align 2, 0_020726DC: .word 0x020A0B00
_020726E0: .word LAB_02074588
	arm_func_end FUN_020726d0

	arm_func_start FUN_020726e4
FUN_020726e4: ; 0x020726E4
	ldr ip, _020726F4 ; =FUN_020726d0
	mov r2, r1
	mov r1, #1
	bx ip
	.align 2, 0_020726F4: .word FUN_020726d0
	arm_func_end FUN_020726e4

	arm_func_start FUN_020726f8
FUN_020726f8: ; 0x020726F8
	push {r4, lr}
	ldr r1, _02072738 ; =0x020A0640
	ldrb r2, [r1, #0x505]
	add r1, r1, #0x500
	ldrsb r4, [r1, #6]
	cmp r2, #0
	bne _02072720
	mov r1, #0
	bl FUN_020724c8
	add r4, r4, r0
	arm_func_end FUN_020726f8
_02072720:
	cmp r4, #0
	movle r4, #1
	cmp r4, #0x63
	movgt r4, #0x63
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02072738: .word 0x020A0640

	arm_func_start FUN_0207273c
FUN_0207273c: ; 0x0207273C
	stmdb sp!, {lr}
	sub sp, sp, #0x14
	ldr r3, _020727A0 ; =0x0209A250
	str r2, [sp, #0x10]
	ldr r0, [r3]
	ldr lr, _020727A4 ; =0x02091684
	cmp r0, #0
	moveq r0, #0
	beq _0207278C
	mov r2, #0x30
	mul ip, r1, r2
	str ip, [sp]
	str r2, [sp, #4]
	mov ip, #0
	str ip, [sp, #8]
	mov ip, #1
	add r2, sp, #0x10
	mov r1, lr
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_0207273c
_0207278C:
	cmp r0, #0
	moveq r0, #0
	movne r0, #1
	add sp, sp, #0x14
	ldm sp!, {pc}
	.align 2, 0_020727A0: .word 0x0209A250
_020727A4: .word 0x02091684

	arm_func_start FUN_020727a8
FUN_020727a8: ; 0x020727A8
	push {r4, r5, lr}
	sub sp, sp, #0x34
	add r4, sp, #4
	mov r2, r4
	mov r5, r0
	bl FUN_0207273c
	cmp r0, #0
	addeq sp, sp, #0x34
	moveq r0, #0
	popeq {r4, r5, pc}
	mov r0, r4
	add r1, r5, #0x2bc
	mov r2, #0x30
	bl _memcpy
	ldrb r1, [sp, #6]
	ldrsb r2, [sp, #7]
	mov r0, r5
	bl FUN_020726d0
	ldrh r1, [sp, #4]
	mov r0, r5
	bl FUN_0207287c
	ldrh r1, [sp, #8]
	mov r0, r5
	bl FUN_020728a8
	ldrb r1, [sp, #0xe]
	mov r0, r5
	bl FUN_020728d4
	ldrh r1, [sp, #0x10]
	mov r0, r5
	bl FUN_020729dc
	mov r3, #0
	mov r0, #0x4c
	arm_func_end FUN_020727a8
_02072828:
	add r1, r4, r3, lsl #1
	ldrh r2, [r1, #6]
	cmp r2, #0
	mlane r1, r3, r0, r5
	add r3, r3, #1
	strhne r2, [r1, #0x4c]
	cmp r3, #2
	blt _02072828
	ldr r3, [sp, #0x18]
	cmp r3, #0
	beq _0207286C
	ldr r0, _02072878 ; =0x020AF81C
	mov ip, #0
	mov r1, #1
	mov r2, #2
	str ip, [sp]
	bl FUN_02044690
_0207286C:
	mov r0, #1
	add sp, sp, #0x34
	pop {r4, r5, pc}
	.align 2, 0_02072878: .word 0x020AF81C

	arm_func_start FUN_0207287c
FUN_0207287c: ; 0x0207287C
	lsl r1, r1, #0x10
	ldr r0, _02072890 ; =0x020A0B00
	ldr ip, _02072894 ; =FUN_020747a0
	lsr r1, r1, #0x10
	bx ip
	.align 2, 0_02072890: .word 0x020A0B00
_02072894: .word FUN_020747a0
	arm_func_end FUN_0207287c

	arm_func_start FUN_02072898
FUN_02072898: ; 0x02072898
	ldr r0, _020728A4 ; =0x020A0A40
	ldrh r0, [r0, #0xf0]
	bx lr
	.align 2, 0_020728A4: .word 0x020A0A40
	arm_func_end FUN_02072898

	arm_func_start FUN_020728a8
FUN_020728a8: ; 0x020728A8
	lsl r1, r1, #0x10
	ldr r0, _020728BC ; =0x020A0B00
	ldr ip, _020728C0 ; =FUN_020747a8
	lsr r1, r1, #0x10
	bx ip
	.align 2, 0_020728BC: .word 0x020A0B00
_020728C0: .word FUN_020747a8
	arm_func_end FUN_020728a8

	arm_func_start FUN_020728c4
FUN_020728c4: ; 0x020728C4
	ldr r0, _020728D0 ; =0x020A0A40
	ldrh r0, [r0, #0xee]
	bx lr
	.align 2, 0_020728D0: .word 0x020A0A40
	arm_func_end FUN_020728c4

	arm_func_start FUN_020728d4
FUN_020728d4: ; 0x020728D4
	ldr r0, _020728E0 ; =0x020A0B00
	ldr ip, _020728E4 ; =FUN_02074580
	bx ip
	.align 2, 0_020728E0: .word 0x020A0B00
_020728E4: .word FUN_02074580
	arm_func_end FUN_020728d4

	arm_func_start FUN_020728e8
FUN_020728e8: ; 0x020728E8
	ldr r0, _020728F4 ; =0x020A0640
	ldrb r0, [r0, #0x504]
	bx lr
	.align 2, 0_020728F4: .word 0x020A0640
	arm_func_end FUN_020728e8

	arm_func_start FUN_020728f8
FUN_020728f8: ; 0x020728F8
	ldrb r0, [r0, #0x2fc]
	bx lr
	arm_func_end FUN_020728f8

	arm_func_start FUN_02072900
FUN_02072900: ; 0x02072900
	ldrb r0, [r0, #0x2f0]
	and r0, r0, #1
	bx lr
	arm_func_end FUN_02072900

	arm_func_start FUN_0207290c
FUN_0207290c: ; 0x0207290C
	push {r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x2bc
	add r2, sp, #0
	mov r5, r0
	mov sb, #0
	bl FUN_0207273c
	cmp r0, #0
	addeq sp, sp, #0x2bc
	moveq r0, sb
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldrb r1, [sp, #0xa]
	add r2, sp, #0x19c
	mov r0, r5
	bl FUN_0206f950
	cmp r0, #0
	addeq sp, sp, #0x2bc
	moveq r0, sb
	popeq {r4, r5, r6, r7, r8, sb, pc}
	ldrh r1, [sp]
	add r4, sp, #0x30
	mov r0, r5
	mov r2, r4
	bl FUN_0207039c
	cmp r0, #0
	addeq sp, sp, #0x2bc
	moveq r0, sb
	popeq {r4, r5, r6, r7, r8, sb, pc}
	mov r6, sb
	ldr r8, _020729D4 ; =0x0209A11C
	ldr r7, _020729D8 ; =0x00000FFF
	mov r5, r6
	arm_func_end FUN_0207290c
_02072988:
	add r0, r4, r5, lsl #3
	ldrh r0, [r0, #0x4c]
	and r0, r0, r7
	lsl r0, r0, #0x10
	lsrs r1, r0, #0x10
	beq _020729B4
	ldr r0, [r8]
	mov r2, sb
	bl FUN_0206c7dc
	cmp r0, #0
	addeq r6, r6, #1
_020729B4:
	add r5, r5, #1
	cmp r5, #0x20
	blt _02072988
	mov r0, #1
	cmp r6, #0
	moveq r0, #0
	add sp, sp, #0x2bc
	pop {r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020729D4: .word 0x0209A11C
_020729D8: .word 0x00000FFF

	arm_func_start FUN_020729dc
FUN_020729dc: ; 0x020729DC
	push {r3, lr}
	lsl r1, r1, #0x10
	ldr r0, _020729F8 ; =0x020A0B00
	lsr r1, r1, #0x10
	bl FUN_020747b0
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_020729F8: .word 0x020A0B00
	arm_func_end FUN_020729dc

	arm_func_start FUN_020729fc
FUN_020729fc: ; 0x020729FC
	ldr r0, _02072A08 ; =0x020A0A40
	ldrh r0, [r0, #0xf2]
	bx lr
	.align 2, 0_02072A08: .word 0x020A0A40
	arm_func_end FUN_020729fc

	arm_func_start FUN_02072a0c
FUN_02072a0c: ; 0x02072A0C
	add r0, r0, #0x200
	ldrh r0, [r0, #0xcc]
	tst r0, #1
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02072a0c

	arm_func_start FUN_02072a24
FUN_02072a24: ; 0x02072A24
	add r0, r0, #0x200
	ldrh r0, [r0, #0xcc]
	cmp r1, #0xe
	arm_func_end FUN_02072a24

	arm_func_start switchD
switchD: ; 0x02072A30
	addls pc, pc, r1, lsl #2
	arm_func_end switchD

	arm_func_start caseD_f
caseD_f: ; 0x02072A34
	b _02072ABC
	arm_func_end caseD_f
_02072A38: ; jump table
	b _02072A74 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02072A3C
	b _02072A74
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02072A40
	b _02072A74
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02072A44
	b _02072A84
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02072A48
	b _02072A84
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02072A4C
	b _02072A84
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02072A50
	b _02072A94
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02072A54
	b _02072A94
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02072A58
	b _02072A94
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02072A5C
	b _02072AA4
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x02072A60
	b _02072AA4
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x02072A64
	b _02072AA4
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x02072A68
	b _02072AB4
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x02072A6C
	b _02072AB4
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x02072A70
	b _02072AB4
	arm_func_end caseD_e
_02072A74:
	tst r0, #2
	moveq r0, #1
	movne r0, #0
	bx lr
_02072A84:
	tst r0, #4
	moveq r0, #1
	movne r0, #0
	bx lr
_02072A94:
	tst r0, #8
	moveq r0, #1
	movne r0, #0
	bx lr
_02072AA4:
	tst r0, #0x10
	moveq r0, #1
	movne r0, #0
	bx lr
_02072AB4:
	mov r0, #0
	bx lr
_02072ABC:
	mov r0, #1
	bx lr

	arm_func_start FUN_02072ac4
FUN_02072ac4: ; 0x02072AC4
	add r0, r0, #0x200
	ldrh r0, [r0, #0xcc]
	tst r0, #0x20
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02072ac4

	arm_func_start LAB_02072adc
LAB_02072adc: ; 0x02072ADC
	add r0, r0, #0x200
	ldrh r0, [r0, #0xcc]
	tst r0, #0x40
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end LAB_02072adc

	arm_func_start LAB_02072af4
LAB_02072af4: ; 0x02072AF4
	add r0, r0, #0x200
	ldrh r0, [r0, #0xcc]
	tst r0, #0x80
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end LAB_02072af4

	arm_func_start LAB_02072b0c
LAB_02072b0c: ; 0x02072B0C
	add r0, r0, #0x200
	ldrh r0, [r0, #0xda]
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end LAB_02072b0c

	arm_func_start FUN_02072b24
FUN_02072b24: ; 0x02072B24
	add r0, r0, #0x200
	ldrh r0, [r0, #0xda]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02072b24

	arm_func_start FUN_02072b3c
FUN_02072b3c: ; 0x02072B3C
	add r0, r0, #0x200
	ldrh r0, [r0, #0xda]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02072b3c

	arm_func_start FUN_02072b54
FUN_02072b54: ; 0x02072B54
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	movs sb, r1
	mov sl, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, sb, #0x2ec
	add r0, sl, #0x24
	add r1, r1, #0x3800
	mov r2, #0x4c
	bl _memcpy
	add r0, sl, #0xc
	add r1, sb, #0x338
	mov r5, #0x20
	mov r2, r5
	add r0, r0, #0x400
	add r1, r1, #0x3800
	bl _memcpy
	add r0, sl, #0x4c
	add r1, sb, #0x358
	mov r2, r5
	add r0, r0, #0x400
	add r1, r1, #0x3800
	bl _memcpy
	add r0, sl, #0xcc
	add r1, sb, #0x378
	mov r4, #0x10
	add r0, r0, #0x400
	add r1, r1, #0x3800
	mov r2, r4
	bl _memcpy
	add r0, sl, #0x6c
	add r1, sb, #0x388
	add r0, r0, #0x400
	add r1, r1, #0x3800
	mov r2, r5
	bl _memcpy
	add r0, sl, #0x8c
	add r1, sb, #0x3a8
	add r0, r0, #0x400
	add r1, r1, #0x3800
	mov r2, r5
	bl _memcpy
	add r0, sl, #0xac
	add r1, sb, #0x3c8
	mov r2, r5
	add r0, r0, #0x400
	add r1, r1, #0x3800
	bl _memcpy
	add r0, sb, #0xbc
	mov r8, #0
	rsb r2, r4, #0x2a40
	add r0, r0, #0x1000
	mov r1, r8
	bl MemWrite
	ldr r1, _02072D1C ; =0x0209A11C
	ldr r0, _02072D20 ; =0x0209A0AC
	ldr fp, [r1]
	bl FUN_020EFA04
	mov r0, sl
	bl FUN_020744b4
	add r0, sb, #0xbc
	mov r7, r8
	add r5, r0, #0x1000
	mov r4, #0x6c
	b _02072CC4
	arm_func_end FUN_02072b54
_02072C58:
	mov r0, r7
	bl FUN_020EFA80
	movs r6, r0
	beq _02072CC0
	bl FUN_0206d5f0
	cmp r0, #0
	bne _02072CC0
	mov r0, r6
	bl FUN_0206dcd4
	ldrh r0, [r0, #4]
	cmp r0, #0
	beq _02072CC0
	mov r0, r6
	bl FUN_0206dcd4
	ldrh r0, [r0, #4]
	cmp r0, #0x8000
	beq _02072CC0
	cmp r8, #0x64
	movge r0, #0
	popge {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r6
	bl FUN_0206dcd4
	mov r1, r0
	mla r0, r8, r4, r5
	bl FUN_0206ed40
	add r8, r8, #1
_02072CC0:
	add r7, r7, #1
_02072CC4:
	cmp r7, #0x64
	blt _02072C58
	add r0, sb, #0xa8
	add r0, r0, #0x1000
	mov r1, #0
	mov r2, #0x14
	bl MemWrite
	add r0, sb, #0xa8
	ldr r1, _02072D24 ; =0x020A1640
	add r2, r0, #0x1000
	ldrb r3, [r1, #0x179]
	ldrb r1, [r2, #0x11]
	mov r0, sl
	orr r1, r1, r3
	strb r1, [r2, #0x11]
	bl FUN_02074478
	mov r0, fp
	bl FUN_020EFA04
	mov r0, sl
	bl FUN_02074040
	mov r0, #1
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02072D1C: .word 0x0209A11C
_02072D20: .word 0x0209A0AC
_02072D24: .word 0x020A1640

	arm_func_start FUN_02072d28
FUN_02072d28: ; 0x02072D28
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	movs r4, r1
	mov r5, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	add r1, r4, #0x394
	add r0, r5, #0x24
	add r1, r1, #0x400
	mov r2, #0x4c
	bl _memcpy
	add r0, r5, #0x4c
	add r0, r0, #0x400
	add r1, r4, #0x7e0
	mov r2, #0x20
	bl _memcpy
	mov sb, #0
	mov r8, sb
	add r6, r4, #0xd4
	mov r7, sb
	mov r5, #0x6c
	arm_func_end FUN_02072d28
_02072D78:
	mov r1, r8
	add r0, r4, #0x7e0
	bl FUN_0204fbe8
	mov r1, r7
	bl FUN_020EFA9C
	cmp r0, #0
	beq _02072DB8
	mla sl, sb, r5, r6
	bl FUN_0206dcd4
	mov r1, r0
	mov r0, sl
	bl FUN_0206ed40
	ldrb r1, [sl, #0x57]
	mov r0, sl
	add sb, sb, #1
	bl FUN_0206e84c
_02072DB8:
	add r8, r8, #1
	cmp r8, #0x10
	blt _02072D78
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02072dcc
FUN_02072dcc: ; 0x02072DCC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x94
	movs sb, r1
	mov sl, r0
	addeq sp, sp, #0x94
	mov r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _02073168 ; =0x0209A11C
	ldr r0, [r0]
	bl FUN_0206c62c
	add r0, sb, #0x2ec
	add r0, r0, #0x3800
	add r1, sl, #0x24
	mov r2, #0x4c
	bl _memcpy
	ldrh r0, [sl, #0x6c]
	add r1, sl, #0xc
	mov r4, #0x20
	cmp r0, #0
	ldrheq r0, [sl, #0x46]
	mov r2, r4
	add r1, r1, #0x400
	strheq r0, [sl, #0x6c]
	add r0, sb, #0x338
	add r0, r0, #0x3800
	bl _memcpy
	add r0, sb, #0x358
	add r1, sl, #0x4c
	mov r2, r4
	add r0, r0, #0x3800
	add r1, r1, #0x400
	bl _memcpy
	add r0, sb, #0x378
	add r1, sl, #0xcc
	add r0, r0, #0x3800
	add r1, r1, #0x400
	mov r2, #0x10
	bl _memcpy
	add r0, sb, #0x388
	add r1, sl, #0x6c
	add r0, r0, #0x3800
	add r1, r1, #0x400
	mov r2, r4
	bl _memcpy
	add r0, sb, #0x3a8
	add r1, sl, #0x8c
	add r0, r0, #0x3800
	add r1, r1, #0x400
	mov r2, r4
	bl _memcpy
	add r0, sb, #0x3c8
	add r1, sl, #0xac
	add r0, r0, #0x3800
	add r1, r1, #0x400
	mov r2, r4
	bl _memcpy
	mov r6, #0
	mov r0, sl
	mov r1, r6
	bl FUN_020740a4
	add r8, sp, #0x4c
	mov r0, r8
	mov r7, r6
	bl FUN_0200dbf0
	ldr r1, _0207316C ; =0x020916A0
	mov r0, r8
	bl FUN_0200dfc8
	cmp r0, #0
	beq _02072F64
	ldr r0, _02073170 ; =0x0209A250
	add r1, r4, #0x2880
	bl FUN_0202de44
	movs r7, r0
	beq _02072F50
	mov fp, #0x68
	mov r4, #0x6c
	mvn r5, #0
	b _02072F48
	arm_func_end FUN_02072dcc
_02072F04:
	mla r0, r6, r4, sb
	add r0, r0, #0x1000
	ldrh r1, [r0, #0xc0]
	mov r0, sl
	bl FUN_0204bc4c
	cmp r0, r5
	beq _02072F44
	mov r1, #0x68
	mul r1, r0, r1
	mov r0, r8
	mov r2, #0
	bl FUN_0200ded0
	mla r1, r6, fp, r7
	mov r0, r8
	mov r2, #0x68
	bl FUN_0200defc
_02072F44:
	add r6, r6, #1
_02072F48:
	cmp r6, #0x64
	blt _02072F04
_02072F50:
	add r4, sp, #0x4c
_02072F54:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _02072F54
_02072F64:
	mov r6, #0
	add r0, sp, #0x4c
	mov r8, r6
	mov r4, #0x48
	bl FUN_0200dbf0
	ldr r1, _02073174 ; =0x020916BC
	add r0, sp, #0x4c
	bl FUN_0200dfc8
	cmp r0, #0
	beq _0207303C
	ldr r0, _02073170 ; =0x0209A250
	ldr r1, _02073178 ; =0x00001C20
	bl FUN_0202de44
	movs r8, r0
	beq _02073028
	mvn fp, #0
	b _02073020
_02072FA8:
	mov r0, #0x6c
	mla r0, r6, r0, sb
	add r0, r0, #0x1000
	ldrh r1, [r0, #0xc0]
	mov r0, sl
	bl FUN_0204bc4c
	mov r5, r0
	cmp r5, fp
	beq _0207301C
	mul r1, r5, r4
	add r0, sp, #0x4c
	mov r2, #0
	bl FUN_0200ded0
	add r0, sp, #0x4c
	add r1, sp, #4
	mov r2, r4
	bl FUN_0200defc
	ldr r0, _0207317C ; =0x0209BA20
	add r1, sp, #4
	mov r2, r4
	bl FUN_020748c8
	mla r1, r6, r4, r8
	mov r2, r4
	bl _memcpy
	lsl r0, r5, #0x10
	lsr r1, r0, #0x10
	mla r2, r6, r4, r8
	ldr r0, _0207317C ; =0x0209BA20
	bl FUN_02073f10
_0207301C:
	add r6, r6, #1
_02073020:
	cmp r6, #0x64
	blt _02072FA8
_02073028:
	add r4, sp, #0x4c
_0207302C:
	mov r0, r4
	bl FUN_0200de0c
	cmp r0, #0
	beq _0207302C
_0207303C:
	ldr r0, _0207317C ; =0x0209BA20
	mov r4, #0
	bl FUN_020EECA0
	add r0, sb, #0xbc
	mov r6, r4
	add r5, r0, #0x1000
	mov fp, #0x68
	b _02073084
_0207305C:
	mov r0, #0x48
	mla r2, r6, r0, r8
	mov r0, #0x6c
	mla r1, r6, r0, r5
	str r2, [sp]
	mla r3, r6, fp, r7
	mov r0, sl
	mov r2, r6
	bl FUN_02071c20
	add r6, r6, #1
_02073084:
	cmp r6, #0x64
	blt _0207305C
	ldr r0, _0207317C ; =0x0209BA20
	bl FUN_020EEDB8
	cmp r8, #0
	beq _020730A8
	ldr r0, _02073170 ; =0x0209A250
	mov r1, r8
	bl FUN_0202e1c0
_020730A8:
	cmp r7, #0
	beq _020730BC
	ldr r0, _02073170 ; =0x0209A250
	mov r1, r7
	bl FUN_0202e1c0
_020730BC:
	ldr r1, _02073180 ; =0x020A1640
	add r0, sb, #0x1000
	ldrb r3, [r0, #0xb9]
	ldrb r2, [r1, #0x179]
	mov r0, sl
	orr r2, r2, r3
	strb r2, [r1, #0x179]
	bl FUN_02074478
	mov r0, sl
	bl FUN_02074040
	mov r6, #0
	mov r0, sl
	mov r1, r6
	bl FUN_02074078
	b _02073124
_020730F8:
	mov r0, r6
	bl FUN_020EFA80
	movs r5, r0
	beq _02073120
	mov r1, r4
	bl FUN_0206d9b0
	mov r1, r0
	mov r0, r5
	mov r2, r4
	bl FUN_0206d9cc
_02073120:
	add r6, r6, #1
_02073124:
	cmp r6, #0x64
	blt _020730F8
	mov r0, sl
	mov r1, r4
	bl FUN_0207249c
	ldrh r2, [r0, #0x2e]
	mov r0, sl
	mov r1, r4
	bl FUN_0204d864
	mov r0, sl
	bl FUN_0204ce50
	mov r0, sl
	mov r1, r4
	bl FUN_0204d0b4
	mov r0, #1
	add sp, sp, #0x94
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02073168: .word 0x0209A11C
_0207316C: .word 0x020916A0
_02073170: .word 0x0209A250
_02073174: .word 0x020916BC
_02073178: .word 0x00001C20
_0207317C: .word 0x0209BA20
_02073180: .word 0x020A1640

	arm_func_start FUN_02073184
FUN_02073184: ; 0x02073184
	add r0, r0, #0x2bc
	bx lr
	arm_func_end FUN_02073184

	arm_func_start FUN_0207318c
FUN_0207318c: ; 0x0207318C
	add r0, r0, #0x2ec
	bx lr
	arm_func_end FUN_0207318c

	arm_func_start FUN_02073194
FUN_02073194: ; 0x02073194
	ldr ip, _020731A0 ; =FUN_02073e14
	add r0, r0, #0x2ec
	bx ip
	.align 2, 0_020731A0: .word FUN_02073e14
	arm_func_end FUN_02073194

	arm_func_start FUN_020731a4
FUN_020731a4: ; 0x020731A4
	ldr ip, _020731B0 ; =FUN_02073e7c
	add r0, r0, #0x2ec
	bx ip
	.align 2, 0_020731B0: .word FUN_02073e7c
	arm_func_end FUN_020731a4

	arm_func_start FUN_020731b4
FUN_020731b4: ; 0x020731B4
	ldr r0, _020731CC ; =0x0209A454
	ldrb r0, [r0, #0x30]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	bx lr
	.align 2, 0_020731CC: .word 0x0209A454
	arm_func_end FUN_020731b4

	arm_func_start FUN_020731d0
FUN_020731d0: ; 0x020731D0
	ldr r0, _020731E8 ; =0x0209A454
	ldrb r0, [r0, #0x31]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	bx lr
	.align 2, 0_020731E8: .word 0x0209A454
	arm_func_end FUN_020731d0

	arm_func_start FUN_020731ec
FUN_020731ec: ; 0x020731EC
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r2
	mov r8, r1
	cmp r7, #2
	mov r6, #0xb
	beq _02073218
	cmp r7, #0
	bne _0207321C
	bl FUN_020731b4
	cmp r0, #0
	beq _0207321C
	arm_func_end FUN_020731ec
_02073218:
	mov r6, #4
_0207321C:
	cmp r6, #1
	mov r5, #1
	blt _02073258
	mov r4, r5
_0207322C:
	mov r0, r8
	mov r1, r5
	mov r2, r4
	mov r3, r7
	bl FUN_020EFB6C
	cmp r0, #0
	moveq r0, r5
	popeq {r4, r5, r6, r7, r8, pc}
	add r5, r5, #1
	cmp r5, r6
	ble _0207322C
_02073258:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02073260
FUN_02073260: ; 0x02073260
	push {r3, lr}
	sub lr, r2, #1
	mov ip, #0xb
	mla ip, r1, ip, lr
	cmp r3, #0
	beq _0207329C
	cmp r2, #0xc
	blt _0207329C
	cmp r2, #0x10
	bgt _0207329C
	bl FUN_020731a4
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_02073260
_0207329C:
	cmp r2, #0
	cmpne r2, #0xc
	movge r0, #0
	popge {r3, pc}
	cmp ip, #0x16
	movhs r0, #0
	pophs {r3, pc}
	add r0, r0, ip
	ldrb r0, [r0, #0x84a]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	pop {r3, pc}

	arm_func_start FUN_020732d0
FUN_020732d0: ; 0x020732D0
	strb r1, [r0, #0x88a]
	bx lr
	arm_func_end FUN_020732d0

	arm_func_start FUN_020732d8
FUN_020732d8: ; 0x020732D8
	ldrb r0, [r0, #0x88a]
	bx lr
	arm_func_end FUN_020732d8

	arm_func_start FUN_020732e0
FUN_020732e0: ; 0x020732E0
	push {r3, lr}
	sub sp, sp, #0x10
	mov r2, r0
	ldr r0, [r2, #0x82c]
	cmp r0, #0
	addne sp, sp, #0x10
	movne r0, #1
	popne {r3, pc}
	ldr r3, _02073350 ; =0x0209A250
	ldr r1, _02073354 ; =0x020916D8
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _0207333C
	mov ip, #0
	str ip, [sp]
	str ip, [sp, #4]
	add r2, r2, #0x2c
	str ip, [sp, #8]
	mov ip, #1
	add r2, r2, #0x800
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_020732e0
_0207333C:
	cmp r0, #0x600
	movne r0, #0
	moveq r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_02073350: .word 0x0209A250
_02073354: .word 0x020916D8

	arm_func_start FUN_02073358
FUN_02073358: ; 0x02073358
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x82c]
	cmp r1, #0
	popeq {r4, pc}
	ldr r0, _02073380 ; =0x0209A250
	bl FUN_0202e1c0
	mov r0, #0
	str r0, [r4, #0x82c]
	pop {r4, pc}
	.align 2, 0_02073380: .word 0x0209A250
	arm_func_end FUN_02073358

	arm_func_start FUN_02073384
FUN_02073384: ; 0x02073384
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r2, [sl, #0x82c]
	mov r1, #0
	str r1, [sp]
	cmp r2, #0
	bne _020733B4
	bl FUN_020732e0
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #1
	str r0, [sp]
	arm_func_end FUN_02073384
_020733B4:
	bl FUN_020F081C
	mov r1, r0
	mov r0, sl
	bl FUN_020724c8
	mov r6, r0
	cmp r6, #0x63
	movgt r6, #0x63
	mov sb, #0
_020733D4:
	ldr r0, [sl, #0x82c]
	add r5, r0, sb, lsl #5
	b _020733F8
_020733E0:
	ldrb r0, [r5]
	cmp r6, r0
	movge r7, r0
	bge _02073400
	add sb, sb, #1
	add r5, r5, #0x20
_020733F8:
	cmp sb, #0x30
	blt _020733E0
_02073400:
	mov r4, sb
	b _0207341C
_02073408:
	ldrb r0, [r5]
	cmp r7, r0
	bne _02073424
	add r4, r4, #1
	add r5, r5, #0x20
_0207341C:
	cmp r4, #0x30
	blt _02073408
_02073424:
	ldr r0, [sl, #0x82c]
	mov r8, #0
	add r5, r0, sb, lsl #5
	sub fp, r8, #1
	b _02073474
_02073438:
	ldrb r1, [r5, #1]
	cmp r1, #0
	moveq fp, sb
	beq _0207347C
	mov r0, sl
	mov r2, #0
	bl FUN_0204f888
	cmp r8, r0
	bgt _0207346C
	ldr r1, [r5, #4]
	cmp r0, r1
	movge r8, r0
	movge fp, sb
_0207346C:
	add sb, sb, #1
	add r5, r5, #0x20
_02073474:
	cmp sb, r4
	blt _02073438
_0207347C:
	mvn r1, #0
	cmp fp, r1
	moveq sb, r4
	beq _020733D4
	cmp fp, #0x30
	bge _020734A4
	lsl r1, fp, #0x18
	ldr r0, _020734C4 ; =0x020A0B00
	asr r1, r1, #0x18
	b _020734A8
_020734A4:
	ldr r0, _020734C4 ; =0x020A0B00
_020734A8:
	bl FUN_0207478c
	ldr r0, [sp]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	bl FUN_02073358
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020734C4: .word 0x020A0B00

	arm_func_start FUN_020734c8
FUN_020734c8: ; 0x020734C8
	push {r0, r1, r2, r3}
	push {r3, lr}
	sub sp, sp, #0x10
	ldr r2, [sp, #0x20]
	mov ip, #0
	cmp r2, #0
	addeq sp, sp, #0x10
	moveq r0, ip
	popeq {r3, lr}
	addeq sp, sp, #0x10
	bxeq lr
	cmp r1, #0x30
	addhs sp, sp, #0x10
	movhs r0, #0
	pophs {r3, lr}
	addhs sp, sp, #0x10
	bxhs lr
	ldr r0, [r0, #0x82c]
	cmp r0, #0
	beq _0207353C
	add r0, r0, r1, lsl #5
	mov r1, r2
	mov r2, #0x20
	bl _memcpy
	add sp, sp, #0x10
	mov r0, #1
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_020734c8
_0207353C:
	ldr r3, _02073598 ; =0x0209A250
	ldr lr, _0207359C ; =FUN_020916F4
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, ip
	beq _0207357C
	lsl r1, r1, #5
	str r1, [sp]
	mov r1, #0x20
	str r1, [sp, #4]
	str ip, [sp, #8]
	mov ip, #1
	add r2, sp, #0x20
	mov r1, lr
	str ip, [sp, #0xc]
	bl FUN_0202eff0
_0207357C:
	cmp r0, #0
	moveq r0, #0
	movne r0, #1
	add sp, sp, #0x10
	pop {r3, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02073598: .word 0x0209A250
_0207359C: .word FUN_020916F4

	arm_func_start FUN_020735a0
FUN_020735a0: ; 0x020735A0
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	sub sp, sp, #0x30
	ldr r2, [sp, #0x48]
	mov r5, r3
	cmp r2, #0
	beq _020735C4
	cmp r5, #0x13
	bge _020735D8
	arm_func_end FUN_020735a0
_020735C4:
	add sp, sp, #0x30
	mov r0, #0
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
_020735D8:
	cmp r1, #0x30
	mov r4, #0
	addhs sp, sp, #0x30
	strb r4, [r2]
	movhs r0, #0
	pophs {r3, r4, r5, lr}
	addhs sp, sp, #0x10
	bxhs lr
	add r2, sp, #0x10
	bl FUN_020734c8
	cmp r0, #0
	addeq sp, sp, #0x30
	moveq r0, r4
	popeq {r3, r4, r5, lr}
	addeq sp, sp, #0x10
	bxeq lr
	ldr r3, _0207366C ; =0x0209A250
	ldrh r2, [sp, #0x2e]
	ldr r0, [r3]
	ldr r1, _02073670 ; =0x02091710
	cmp r0, #0
	lsl r2, r2, #5
	beq _02073650
	stm sp, {r2, r5}
	add r2, sp, #0x48
	str r4, [sp, #8]
	mov ip, #1
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	mov r4, r0
_02073650:
	mov r0, #0
	cmp r4, #0
	movne r0, #1
	add sp, sp, #0x30
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_0207366C: .word 0x0209A250
_02073670: .word 0x02091710

	arm_func_start FUN_02073674
FUN_02073674: ; 0x02073674
	push {r3, lr}
	sub sp, sp, #0x10
	mov lr, r0
	ldr r0, [lr, #0x830]
	cmp r0, #0
	addne sp, sp, #0x10
	movne r0, #1
	popne {r3, pc}
	ldr r3, _020736E0 ; =0x0209A250
	ldr r1, _020736E4 ; =0x0209172C
	ldr r0, [r3]
	cmp r0, #0
	moveq r0, #0
	beq _020736CC
	mov r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	mov ip, #1
	add r2, lr, #0x830
	str ip, [sp, #0xc]
	bl FUN_0202eff0
	arm_func_end FUN_02073674
_020736CC:
	cmp r0, #0
	moveq r0, #0
	movne r0, #1
	add sp, sp, #0x10
	pop {r3, pc}
	.align 2, 0_020736E0: .word 0x0209A250
_020736E4: .word 0x0209172C

	arm_func_start FUN_020736e8
FUN_020736e8: ; 0x020736E8
	push {r4, lr}
	mov r4, r0
	ldr r1, [r4, #0x830]
	cmp r1, #0
	moveq r0, #1
	popeq {r4, pc}
	ldr r0, _02073718 ; =0x0209A250
	bl FUN_0202e1c0
	mov r0, #0
	str r0, [r4, #0x830]
	mov r0, #1
	pop {r4, pc}
	.align 2, 0_02073718: .word 0x0209A250
	arm_func_end FUN_020736e8

	arm_func_start FUN_0207371c
FUN_0207371c: ; 0x0207371C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	ldr r2, [sl, #0x7ec]
	mov r7, #0
	mov sb, r1
	mov fp, r7
	cmp r2, #0
	ldr r5, _020737D4 ; =0x020A0DB0
	bne _02073754
	bl FUN_0204eba0
	cmp r0, #0
	moveq r0, r7
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov fp, #1
	arm_func_end FUN_0207371c
_02073754:
	ldr r6, [sl, #0x7ec]
	mov r8, #0
	add r4, sl, #0x800
	b _020737B0
_02073764:
	cmp sb, #0
	bne _0207377C
	ldrb r0, [r6, #0x2a]
	cmp r0, #1
	bne _020737A8
	b _02073794
_0207377C:
	cmp sb, #1
	bne _02073794
	ldrb r0, [r6, #0x2a]
	cmp r0, #0
	cmpne r0, #1
	beq _020737A8
_02073794:
	mov r0, r5
	mov r1, r8
	bl FUN_020508fc
	cmp r0, #0
	addne r7, r7, #1
_020737A8:
	add r8, r8, #1
	add r6, r6, #0x2c
_020737B0:
	ldrh r0, [r4, #0x6a]
	cmp r8, r0
	blt _02073764
	cmp fp, #0
	beq _020737CC
	mov r0, sl
	bl FUN_0204ec3c
_020737CC:
	mov r0, r7
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020737D4: .word 0x020A0DB0

	arm_func_start FUN_020737d8
FUN_020737d8: ; 0x020737D8
	ldr r2, _020737EC ; =0x00000FFF
	add r0, r0, #0x800
	and r1, r1, r2
	strh r1, [r0, #0x76]
	bx lr
	.align 2, 0_020737EC: .word 0x00000FFF
	arm_func_end FUN_020737d8

	arm_func_start FUN_020737f0
FUN_020737f0: ; 0x020737F0
	add r0, r0, #0x700
	strh r1, [r0, #0xc4]
	bx lr
	arm_func_end FUN_020737f0

	arm_func_start FUN_020737fc
FUN_020737fc: ; 0x020737FC
	add r0, r0, #0x700
	ldrh r0, [r0, #0xc4]
	bx lr
	arm_func_end FUN_020737fc

	arm_func_start FUN_02073808
FUN_02073808: ; 0x02073808
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	movs r5, r1
	mov r4, r0
	mov sl, r2
	mov sb, r3
	mov fp, #0
	addeq sp, sp, #0x10
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r5, #7
	blo _020738A8
	cmp r5, #8
	bhi _020738A8
	cmp sb, #0
	mov r8, fp
	ble _020739D0
	ldr r0, _020739DC ; =0x0208C504
	sub r5, r5, #7
	ldr r7, [r0]
	ldr r6, [r0, #4]
	str r7, [sp]
	str r6, [sp, #4]
	arm_func_end FUN_02073808
_02073864:
	ldr r1, [sl, r8, lsl #2]
	mov r0, r4
	mov r2, #0x25
	mov r3, fp
	bl FUN_0204f02c
	str r7, [sp, #8]
	str r6, [sp, #0xc]
	add r1, sp, #8
	ldr r1, [r1, r5, lsl #2]
	cmp r1, r0
	addlt sp, sp, #0x10
	movlt r0, fp
	poplt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r8, r8, #1
	cmp r8, sb
	blt _02073864
	b _020739D0
_020738A8:
	cmp r5, #5
	blo _020738F0
	cmp r5, #6
	bhi _020738F0
	cmp sb, #0
	mov r1, #0
	ble _020739D0
	sub r2, r5, #4
_020738C8:
	ldr r0, [sl, r1, lsl #2]
	ldrb r0, [r0, #0x5a]
	cmp r2, r0
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, r1, #1
	cmp r1, sb
	blt _020738C8
	b _020739D0
_020738F0:
	cmp r5, #1
	blo _02073934
	cmp r5, #4
	bhi _02073934
	cmp sb, #0
	mov r1, #0
	ble _020739D0
_0207390C:
	ldr r0, [sl, r1, lsl #2]
	ldrb r0, [r0, #0x62]
	cmp r5, r0
	addne sp, sp, #0x10
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r1, r1, #1
	cmp r1, sb
	blt _0207390C
	b _020739D0
_02073934:
	cmp r5, #9
	blo _020739D0
	cmp r5, #0xa
	bhi _020739D0
	cmp sb, #0
	mov r6, #0
	ble _020739D0
	ldr r4, _020739E0 ; =0x0209BA20
_02073954:
	mov r7, fp
_02073958:
	ldr r0, [sl, r6, lsl #2]
	bl FUN_0206dcd4
	add r0, r0, r7, lsl #1
	ldrh r1, [r0, #0x38]
	cmp r1, #0
	beq _020739B8
	mov r0, r4
	bl FUN_0204a2c4
	cmp r0, #0
	beq _020739B8
	cmp r5, #9
	bne _020739A0
	ldrb r0, [r0]
	cmp r0, #7
	bne _020739B8
	add sp, sp, #0x10
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020739A0:
	cmp r5, #0xa
	ldrbeq r0, [r0]
	cmpeq r0, #8
	addeq sp, sp, #0x10
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_020739B8:
	add r7, r7, #1
	cmp r7, #6
	blt _02073958
	add r6, r6, #1
	cmp r6, sb
	blt _02073954
_020739D0:
	mov r0, #1
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020739DC: .word 0x0208C504
_020739E0: .word 0x0209BA20

	arm_func_start FUN_020739e4
FUN_020739e4: ; 0x020739E4
	add r0, r0, r1, lsl #1
	add r0, r0, #0x800
	strh r2, [r0, #0x78]
	bx lr
	arm_func_end FUN_020739e4

	arm_func_start FUN_020739f4
FUN_020739f4: ; 0x020739F4
	add r0, r0, r1, lsl #1
	add r0, r0, #0x800
	ldrh r0, [r0, #0x78]
	bx lr
	arm_func_end FUN_020739f4

	arm_func_start FUN_02073a04
FUN_02073a04: ; 0x02073A04
	add r0, r0, #0x800
	strh r1, [r0, #0x7c]
	bx lr
	arm_func_end FUN_02073a04

	arm_func_start FUN_02073a10
FUN_02073a10: ; 0x02073A10
	add r0, r0, #0x800
	ldrh r0, [r0, #0x7c]
	bx lr
	arm_func_end FUN_02073a10

	arm_func_start FUN_02073a1c
FUN_02073a1c: ; 0x02073A1C
	push {r4, lr}
	movs r4, r1
	beq _02073A38
	mov r0, r4
	bl GetStrLen
	cmp r0, #2
	bge _02073A40
	arm_func_end FUN_02073a1c
_02073A38:
	mvn r0, #0
	pop {r4, pc}
_02073A40:
	ldrb r1, [r4]
	ldrb r0, [r4, #1]
	add r0, r0, r1, lsl #8
	lsl r0, r0, #0x10
	lsrs r0, r0, #0x10
	mvneq r0, #0
	popeq {r4, pc}
	ldr r1, _02073CD0 ; =0x0000829F
	cmp r0, r1
	blo _02073A74
	add r1, r1, #0xa
	cmp r0, r1
	blo _02073A98
_02073A74:
	ldr r1, _02073CD4 ; =0x00008340
	cmp r0, r1
	blo _02073A8C
	add r1, r1, #0xa
	cmp r0, r1
	blo _02073A98
_02073A8C:
	ldr r2, _02073CD8 ; =0x00008394
	cmp r0, r2
	bne _02073AA0
_02073A98:
	mov r0, #0
	pop {r4, pc}
_02073AA0:
	sub r1, r2, #0xeb
	cmp r0, r1
	blo _02073AB8
	sub r1, r2, #0xe1
	cmp r0, r1
	blo _02073AE8
_02073AB8:
	ldr r1, _02073CDC ; =0x0000834A
	cmp r0, r1
	blo _02073AD0
	add r1, r1, #0xa
	cmp r0, r1
	blo _02073AE8
_02073AD0:
	add r1, r0, #0x6b
	add r1, r1, #0x7c00
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	cmp r1, #1
	bhi _02073AF0
_02073AE8:
	mov r0, #1
	pop {r4, pc}
_02073AF0:
	ldr r1, _02073CE0 ; =0x000082B3
	cmp r0, r1
	blo _02073B08
	add r1, r1, #0xa
	cmp r0, r1
	blo _02073B20
_02073B08:
	ldr r1, _02073CE4 ; =0x00008354
	cmp r0, r1
	blo _02073B28
	add r1, r1, #0xa
	cmp r0, r1
	bhs _02073B28
_02073B20:
	mov r0, #2
	pop {r4, pc}
_02073B28:
	ldr r1, _02073CE8 ; =0x000082BD
	cmp r0, r1
	blo _02073B40
	add r1, r1, #0xb
	cmp r0, r1
	blo _02073B58
_02073B40:
	ldr r1, _02073CEC ; =0x0000835E
	cmp r0, r1
	blo _02073B60
	add r1, r1, #0xb
	cmp r0, r1
	bhs _02073B60
_02073B58:
	mov r0, #3
	pop {r4, pc}
_02073B60:
	ldr r1, _02073CF0 ; =0x000082C8
	cmp r0, r1
	blo _02073B78
	add r1, r1, #5
	cmp r0, r1
	blo _02073B90
_02073B78:
	ldr r1, _02073CF4 ; =0x00008369
	cmp r0, r1
	blo _02073B98
	add r1, r1, #5
	cmp r0, r1
	bhs _02073B98
_02073B90:
	mov r0, #4
	pop {r4, pc}
_02073B98:
	ldr r1, _02073CF8 ; =0x000082CD
	cmp r0, r1
	blo _02073BB0
	add r1, r1, #0xf
	cmp r0, r1
	blo _02073BC8
_02073BB0:
	ldr r1, _02073CFC ; =0x0000836E
	cmp r0, r1
	blo _02073BD0
	add r1, r1, #0xf
	cmp r0, r1
	bhs _02073BD0
_02073BC8:
	mov r0, #5
	pop {r4, pc}
_02073BD0:
	ldr r1, _02073D00 ; =0x000082DC
	cmp r0, r1
	blo _02073BE8
	add r1, r1, #5
	cmp r0, r1
	blo _02073C18
_02073BE8:
	ldr r1, _02073D04 ; =0x0000837D
	cmp r0, r1
	blo _02073C00
	add r1, r1, #2
	cmp r0, r1
	blo _02073C18
_02073C00:
	ldr r1, _02073D08 ; =0x00008380
	cmp r0, r1
	blo _02073C20
	add r1, r1, #3
	cmp r0, r1
	bhs _02073C20
_02073C18:
	mov r0, #6
	pop {r4, pc}
_02073C20:
	ldr r1, _02073D0C ; =0x000082E1
	cmp r0, r1
	blo _02073C38
	add r1, r1, #6
	cmp r0, r1
	blo _02073C50
_02073C38:
	ldr r1, _02073D10 ; =0x00008383
	cmp r0, r1
	blo _02073C58
	add r1, r1, #6
	cmp r0, r1
	bhs _02073C58
_02073C50:
	mov r0, #7
	pop {r4, pc}
_02073C58:
	ldr r1, _02073D14 ; =0x000082E7
	cmp r0, r1
	blo _02073C70
	add r1, r1, #5
	cmp r0, r1
	blo _02073C88
_02073C70:
	ldr r1, _02073D18 ; =0x00008389
	cmp r0, r1
	blo _02073C90
	add r1, r1, #5
	cmp r0, r1
	bhs _02073C90
_02073C88:
	mov r0, #8
	pop {r4, pc}
_02073C90:
	ldr r1, _02073D1C ; =0x000082ED
	cmp r0, r1
	blo _02073CA8
	add r1, r1, #5
	cmp r0, r1
	blo _02073CC0
_02073CA8:
	ldr r1, _02073D20 ; =0x0000838E
	cmp r0, r1
	blo _02073CC8
	add r1, r1, #5
	cmp r0, r1
	bhi _02073CC8
_02073CC0:
	mov r0, #9
	pop {r4, pc}
_02073CC8:
	mvn r0, #0
	pop {r4, pc}
	.align 2, 0_02073CD0: .word 0x0000829F
_02073CD4: .word 0x00008340
_02073CD8: .word 0x00008394
_02073CDC: .word 0x0000834A
_02073CE0: .word 0x000082B3
_02073CE4: .word 0x00008354
_02073CE8: .word 0x000082BD
_02073CEC: .word 0x0000835E
_02073CF0: .word 0x000082C8
_02073CF4: .word 0x00008369
_02073CF8: .word 0x000082CD
_02073CFC: .word 0x0000836E
_02073D00: .word 0x000082DC
_02073D04: .word 0x0000837D
_02073D08: .word 0x00008380
_02073D0C: .word 0x000082E1
_02073D10: .word 0x00008383
_02073D14: .word 0x000082E7
_02073D18: .word 0x00008389
_02073D1C: .word 0x000082ED
_02073D20: .word 0x0000838E

	arm_func_start FUN_02073d24
FUN_02073d24: ; 0x02073D24
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r4, #0
	mov r5, r1
	str r4, [r6, #0x10]
	strh r4, [r6, #0x1c]
	strh r4, [r6, #0x1e]
	strh r4, [r6, #0x20]
	strh r4, [r6, #0x22]
	strh r4, [r6, #0x24]
	strh r4, [r6, #0x26]
	strh r4, [r6, #0x28]
	strh r4, [r6, #0x2a]
	strb r4, [r6, #0x2c]
	strb r4, [r6, #0x2d]
	strb r4, [r6, #0x30]
	strh r4, [r6, #0x32]
	strb r4, [r6, #0x88]
	bl FUN_020404cc
	add r0, r6, #8
	bl FUN_020404cc
	sub r0, r4, #1
	strb r0, [r6, #0x2e]
	strb r5, [r6, #0x2f]
	strb r4, [r6, #0x8a]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02073d24

	arm_func_start FUN_02073d8c
FUN_02073d8c: ; 0x02073D8C
	ldrh r1, [r0, #6]
	orr r1, r1, #0x20
	strh r1, [r0, #6]
	bx lr
	arm_func_end FUN_02073d8c

	arm_func_start FUN_02073d9c
FUN_02073d9c: ; 0x02073D9C
	ldrh r0, [r0, #6]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02073d9c

	arm_func_start FUN_02073db0
FUN_02073db0: ; 0x02073DB0
	ldrh r0, [r0, #6]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02073db0

	arm_func_start FUN_02073dc4
FUN_02073dc4: ; 0x02073DC4
	ldrh r0, [r0, #6]
	tst r0, #8
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02073dc4

	arm_func_start FUN_02073dd8
FUN_02073dd8: ; 0x02073DD8
	ldrh r0, [r0, #6]
	tst r0, #0x10
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02073dd8

	arm_func_start FUN_02073dec
FUN_02073dec: ; 0x02073DEC
	ldrh r0, [r0, #6]
	tst r0, #0x80
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02073dec

	arm_func_start FUN_02073e00
FUN_02073e00: ; 0x02073E00
	ldrh r0, [r0, #6]
	tst r0, #0x100
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02073e00

	arm_func_start FUN_02073e14
FUN_02073e14: ; 0x02073E14
	cmp r1, #0
	ldrh r0, [r0, #6]
	bne _02073E30
	tst r0, #0x400
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02073e14
_02073E30:
	tst r0, #0x800
	moveq r0, #1
	movne r0, #0
	bx lr

	arm_func_start FUN_02073e40
FUN_02073e40: ; 0x02073E40
	ldrh r0, [r0, #6]
	tst r0, #0x200
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02073e40

	arm_func_start FUN_02073e54
FUN_02073e54: ; 0x02073E54
	ldrh r0, [r0, #6]
	tst r0, #0x20
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02073e54

	arm_func_start FUN_02073e68
FUN_02073e68: ; 0x02073E68
	ldrh r0, [r0, #6]
	tst r0, #0x2000
	moveq r0, #1
	movne r0, #0
	bx lr
	arm_func_end FUN_02073e68

	arm_func_start FUN_02073e7c
FUN_02073e7c: ; 0x02073E7C
	ldrh r0, [r0, #6]
	tst r0, #0x4000
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02073e7c

	arm_func_start FUN_02073e90
FUN_02073e90: ; 0x02073E90
	ldrh r0, [r0, #6]
	tst r0, #0x1000
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_02073e90

	arm_func_start FUN_02073ea4
FUN_02073ea4: ; 0x02073EA4
	ldrb r0, [r0, r1, lsl #1]
	bx lr
	arm_func_end FUN_02073ea4

	arm_func_start FUN_02073eac
FUN_02073eac: ; 0x02073EAC
	add r0, r0, r1, lsl #1
	ldrsb r0, [r0, #1]
	bx lr
	arm_func_end FUN_02073eac

	arm_func_start FUN_02073eb8
FUN_02073eb8: ; 0x02073EB8
	ldrh r1, [r0, #6]
	orr r1, r1, #0xc
	strh r1, [r0, #6]
	bx lr
	arm_func_end FUN_02073eb8

	arm_func_start FUN_02073ec8
FUN_02073ec8: ; 0x02073EC8
	ldrh r2, [r0, #6]
	ldr r1, _02073EDC ; =0x0000FFF3
	and r1, r2, r1
	strh r1, [r0, #6]
	bx lr
	.align 2, 0_02073EDC: .word 0x0000FFF3
	arm_func_end FUN_02073ec8

	arm_func_start FUN_02073ee0
FUN_02073ee0: ; 0x02073EE0
	ldrh r1, [r0, #6]
	orr r1, r1, #0x10
	strh r1, [r0, #6]
	bx lr
	arm_func_end FUN_02073ee0

	arm_func_start FUN_02073ef0
FUN_02073ef0: ; 0x02073EF0
	ldrh r2, [r0, #6]
	ldr r1, _02073F04 ; =0x0000FFEF
	and r1, r2, r1
	strh r1, [r0, #6]
	bx lr
	.align 2, 0_02073F04: .word 0x0000FFEF
	arm_func_end FUN_02073ef0

	arm_func_start FUN_02073f08
FUN_02073f08: ; 0x02073F08
	ldrb r0, [r0, #0x88c]
	bx lr
	arm_func_end FUN_02073f08

	arm_func_start FUN_02073f10
FUN_02073f10: ; 0x02073F10
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x6c
	mov r0, r1
	mov r7, r2
	bl FUN_020EFA80
	movs r5, r0
	cmpne r7, #0
	addeq sp, sp, #0x6c
	popeq {r4, r5, r6, r7, pc}
	bl FUN_0206dcd4
	mov r6, r0
	add r4, sp, #0
	mov r1, r6
	mov r0, r4
	bl FUN_0206ed40
	mov r0, r5
	str r4, [r5, #0x68]
	bl FUN_0206dcd4
	ldrb r0, [r0, #0x5f]
	cmp r0, #0
	bne _02073FB4
	mov r0, r5
	bl FUN_0206dcd4
	mov r1, #1
	bl FUN_0206eabc
	mov r0, r5
	bl FUN_0206dcd4
	ldrb r1, [r7, #0x3e]
	bl FUN_0206eb24
	mov r0, r5
	bl FUN_0206dcd4
	ldrb r1, [r7, #0x40]
	bl FUN_0206eb8c
	mov r0, r5
	bl FUN_0206dcd4
	ldrb r1, [r7, #0x42]
	bl FUN_0206ebf4
	mov r0, r5
	bl FUN_0206dcd4
	ldrb r1, [r7, #0x44]
	bl FUN_0206ec5c
	arm_func_end FUN_02073f10
_02073FB4:
	mov r0, r5
	str r6, [r5, #0x68]
	bl FUN_0206dcd4
	add r1, sp, #0
	bl FUN_0206ed40
	add sp, sp, #0x6c
	pop {r4, r5, r6, r7, pc}

	arm_func_start FUN_02073fd0
FUN_02073fd0: ; 0x02073FD0
	push {r4, lr}
	mov r4, r1
	mov r1, r2
	mov r2, r3
	bl FUN_020747f8
	ldr r1, _02074014 ; =0x020A17A8
	ldr r1, [r1, r4, lsl #2]
	cmp r0, r1
	popeq {r4, pc}
	ldr r0, _02074018 ; =0x020A1640
	mov r1, #1
	lsl r1, r1, r4
	ldrb r2, [r0, #0x179]
	and r1, r1, #0xff
	orr r1, r2, r1
	strb r1, [r0, #0x179]
	pop {r4, pc}
	.align 2, 0_02074014: .word 0x020A17A8
_02074018: .word 0x020A1640
	arm_func_end FUN_02073fd0

	arm_func_start FUN_0207401c
FUN_0207401c: ; 0x0207401C
	push {r4, lr}
	mov r4, r1
	mov r1, r2
	mov r2, r3
	bl FUN_020747f8
	ldr r1, _0207403C ; =0x020A17A8
	str r0, [r1, r4, lsl #2]
	pop {r4, pc}
	.align 2, 0_0207403C: .word 0x020A17A8
	arm_func_end FUN_0207401c

	arm_func_start FUN_02074040
FUN_02074040: ; 0x02074040
	bx lr
	arm_func_end FUN_02074040

	arm_func_start FUN_02074044
FUN_02074044: ; 0x02074044
	ldr r0, _02074058 ; =0x020A1640
	ldrb r2, [r0, #0x179]
	orr r1, r2, r1
	strb r1, [r0, #0x179]
	bx lr
	.align 2, 0_02074058: .word 0x020A1640
	arm_func_end FUN_02074044

	arm_func_start FUN_0207405c
FUN_0207405c: ; 0x0207405C
	ldr r0, _02074074 ; =0x020A1640
	ldrb r0, [r0, #0x179]
	tst r0, r1
	movne r0, #1
	moveq r0, #0
	bx lr
	.align 2, 0_02074074: .word 0x020A1640
	arm_func_end FUN_0207405c

	arm_func_start FUN_02074078
FUN_02074078: ; 0x02074078
	ldr r0, _02074084 ; =0x020A1640
	strb r1, [r0, #0x178]
	bx lr
	.align 2, 0_02074084: .word 0x020A1640
	arm_func_end FUN_02074078

	arm_func_start FUN_02074088
FUN_02074088: ; 0x02074088
	ldr r0, _020740A0 ; =0x020A1640
	ldrb r0, [r0, #0x178]
	cmp r0, #0
	movne r0, #1
	moveq r0, #0
	bx lr
	.align 2, 0_020740A0: .word 0x020A1640
	arm_func_end FUN_02074088

	arm_func_start FUN_020740a4
FUN_020740a4: ; 0x020740A4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r6, _02074200 ; =0x0209A11C
	mov r5, r0
	ldr r0, [r6]
	mov r4, r1
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	bl FUN_0206c2f8
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r6]
	bl FUN_0206c884
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	cmp r4, #0
	ldr r0, [r6]
	beq _0207413C
	mov r1, r4
	bl FUN_0206c820
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r6]
	bl FUN_0206c818
	sub r2, r4, r0
	ldr r1, _02074204 ; =0x2F684BDB
	mov r0, r5
	umull r1, r7, r2, r1
	sub r1, r2, r7
	add r7, r7, r1, lsr #1
	mov r1, r4
	mov r2, #0x6c
	lsr r7, r7, #6
	bl FUN_020747f8
	mov r2, r0
	ldr r0, [r6]
	mov r1, r7
	bl FUN_0206c86c
	b _02074194
	arm_func_end FUN_020740a4
_0207413C:
	bl FUN_0206c818
	mov r8, r0
	ldr r0, [r6]
	mov sb, #0
	bl FUN_0206c2f8
	cmp r0, #0
	ble _02074194
	mov r7, #0x6c
	mov r4, r7
_02074160:
	mla r1, sb, r4, r8
	mov r0, r5
	mov r2, r7
	bl FUN_020747f8
	mov r2, r0
	ldr r0, [r6]
	mov r1, sb
	bl FUN_0206c86c
	ldr r0, [r6]
	add sb, sb, #1
	bl FUN_0206c2f8
	cmp sb, r0
	blt _02074160
_02074194:
	ldr r4, _02074200 ; =0x0209A11C
	ldr r0, [r4]
	bl FUN_0206c2f8
	lsl r8, r0, #2
	ldr r0, [r4]
	bl FUN_0206c884
	mov r7, r0
	ldr r0, [r4]
	bl FUN_0206c2f8
	add r1, r7, r0, lsl #2
	mov r6, #0x1a
	ldr r0, _02074208 ; =0x02091748
	mov r2, r6
	bl _memcpy
	mov r0, r5
	mov r5, #0
	add r3, r8, #0x1a
	mov r1, r5
	mov r2, r7
	bl FUN_0207401c
	ldr r0, [r4]
	bl FUN_0206c2f8
	add r0, r7, r0, lsl #2
	mov r1, r5
	mov r2, r6
	bl MemWrite
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02074200: .word 0x0209A11C
_02074204: .word 0x2F684BDB
_02074208: .word 0x02091748

	arm_func_start FUN_0207420c
FUN_0207420c: ; 0x0207420C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r5, _02074394 ; =0x0209A11C
	mov sl, r0
	ldr r0, [r5]
	mov r6, r1
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_0206c2f8
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r5]
	bl FUN_0206c884
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r6, #0
	ldr r0, [r5]
	beq _020742B8
	mov r1, r6
	bl FUN_0206c820
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r5]
	bl FUN_0206c818
	sub r2, r6, r0
	ldr r1, _02074398 ; =0x2F684BDB
	mov r0, sl
	umull r1, r4, r2, r1
	sub r1, r2, r4
	add r4, r4, r1, lsr #1
	mov r1, r6
	mov r2, #0x6c
	lsr r4, r4, #6
	bl FUN_020747f8
	mov r6, r0
	ldr r0, [r5]
	mov r1, r4
	bl FUN_0206c878
	cmp r6, r0
	beq _02074328
	mov r0, sl
	mov r1, #1
	bl FUN_02074044
	b _02074328
	arm_func_end FUN_0207420c
_020742B8:
	bl FUN_0206c818
	mov r8, r0
	ldr r0, [r5]
	mov sb, #0
	bl FUN_0206c2f8
	cmp r0, #0
	ble _02074328
	mov r7, #0x6c
	mov fp, #1
	mov r4, r7
_020742E0:
	mla r1, sb, r4, r8
	mov r0, sl
	mov r2, r7
	bl FUN_020747f8
	mov r6, r0
	ldr r0, [r5]
	mov r1, sb
	bl FUN_0206c878
	cmp r6, r0
	beq _02074314
	mov r0, sl
	mov r1, fp
	bl FUN_02074044
_02074314:
	ldr r0, [r5]
	add sb, sb, #1
	bl FUN_0206c2f8
	cmp sb, r0
	blt _020742E0
_02074328:
	ldr r4, _02074394 ; =0x0209A11C
	ldr r0, [r4]
	bl FUN_0206c2f8
	lsl r5, r0, #2
	ldr r0, [r4]
	bl FUN_0206c884
	mov r7, r0
	ldr r0, [r4]
	bl FUN_0206c2f8
	add r1, r7, r0, lsl #2
	mov r6, #0x1a
	ldr r0, _0207439C ; =0x02091764
	mov r2, r6
	bl _memcpy
	add r3, r5, #0x1a
	mov r5, #0
	mov r0, sl
	mov r1, r5
	mov r2, r7
	bl FUN_02073fd0
	ldr r0, [r4]
	bl FUN_0206c2f8
	add r0, r7, r0, lsl #2
	mov r1, r5
	mov r2, r6
	bl MemWrite
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02074394: .word 0x0209A11C
_02074398: .word 0x2F684BDB
_0207439C: .word 0x02091764

	arm_func_start FUN_020743a0
FUN_020743a0: ; 0x020743A0
	push {r3, lr}
	ldr r1, _020743C4 ; =0x020A0640
	add r2, sp, #0
	ldr ip, [r1, #0x4d4]
	mov r1, #1
	mov r3, #4
	str ip, [sp]
	bl FUN_0207401c
	pop {r3, pc}
	.align 2, 0_020743C4: .word 0x020A0640
	arm_func_end FUN_020743a0

	arm_func_start FUN_020743c8
FUN_020743c8: ; 0x020743C8
	push {r3, lr}
	ldr r1, _020743EC ; =0x020A0640
	add r2, sp, #0
	ldr ip, [r1, #0x4d4]
	mov r1, #1
	mov r3, #4
	str ip, [sp]
	bl FUN_02073fd0
	pop {r3, pc}
	.align 2, 0_020743EC: .word 0x020A0640
	arm_func_end FUN_020743c8

	arm_func_start FUN_020743f0
FUN_020743f0: ; 0x020743F0
	push {r3, lr}
	ldr r1, _02074414 ; =0x020A0640
	add r2, sp, #0
	ldr ip, [r1, #0x4d8]
	mov r1, #2
	mov r3, #4
	str ip, [sp]
	bl FUN_0207401c
	pop {r3, pc}
	.align 2, 0_02074414: .word 0x020A0640
	arm_func_end FUN_020743f0

	arm_func_start FUN_02074418
FUN_02074418: ; 0x02074418
	push {r3, lr}
	ldr r1, _0207443C ; =0x020A0640
	add r2, sp, #0
	ldr ip, [r1, #0x4d8]
	mov r1, #2
	mov r3, #4
	str ip, [sp]
	bl FUN_02073fd0
	pop {r3, pc}
	.align 2, 0_0207443C: .word 0x020A0640
	arm_func_end FUN_02074418

	arm_func_start FUN_02074440
FUN_02074440: ; 0x02074440
	ldr r2, _02074454 ; =0x020A0700
	ldr ip, _02074458 ; =FUN_0207401c
	mov r1, #3
	mov r3, #0x400
	bx ip
	.align 2, 0_02074454: .word 0x020A0700
_02074458: .word FUN_0207401c
	arm_func_end FUN_02074440

	arm_func_start FUN_0207445c
FUN_0207445c: ; 0x0207445C
	ldr r2, _02074470 ; =0x020A0700
	ldr ip, _02074474 ; =FUN_02073fd0
	mov r1, #3
	mov r3, #0x400
	bx ip
	.align 2, 0_02074470: .word 0x020A0700
_02074474: .word FUN_02073fd0
	arm_func_end FUN_0207445c

	arm_func_start FUN_02074478
FUN_02074478: ; 0x02074478
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r5, r0
	mov r1, r4
	bl FUN_02074078
	mov r0, r5
	mov r1, r4
	bl FUN_020740a4
	mov r0, r5
	bl FUN_020743a0
	mov r0, r5
	bl FUN_020743f0
	mov r0, r5
	bl FUN_02074440
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02074478

	arm_func_start FUN_020744b4
FUN_020744b4: ; 0x020744B4
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r5, r0
	mov r1, r4
	bl FUN_02074078
	mov r0, r5
	mov r1, r4
	bl FUN_0207420c
	mov r0, r5
	bl FUN_020743c8
	mov r0, r5
	bl FUN_02074418
	mov r0, r5
	bl FUN_0207445c
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020744b4

	arm_func_start FUN_020744f0
FUN_020744f0: ; 0x020744F0
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, _02074530 ; =0x0209BA20
	mov r4, r1
	bl FUN_02074418
	cmp r4, #0
	movlt r4, #0
	blt _0207451C
	ldr r0, _02074534 ; =0x000F423F
	cmp r4, r0
	movgt r4, r0
	arm_func_end FUN_020744f0
_0207451C:
	ldr r0, _02074530 ; =0x0209BA20
	str r4, [r5, #0x18]
	bl FUN_020743f0
	ldr r0, [r5, #0x18]
	pop {r3, r4, r5, pc}
	.align 2, 0_02074530: .word 0x0209BA20
_02074534: .word 0x000F423F

	arm_func_start FUN_02074538
FUN_02074538: ; 0x02074538
	push {r3, r4, r5, lr}
	mov r5, r0
	ldr r0, _02074578 ; =0x0209BA20
	mov r4, r1
	bl FUN_020743c8
	ldr r0, _0207457C ; =0x000F423F
	cmp r4, r0
	movgt r4, r0
	bgt _02074564
	cmp r4, #0
	movlt r4, #0
	arm_func_end FUN_02074538
_02074564:
	ldr r0, _02074578 ; =0x0209BA20
	str r4, [r5, #0x14]
	bl FUN_020743a0
	ldr r0, [r5, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_02074578: .word 0x0209BA20
_0207457C: .word 0x000F423F

	arm_func_start FUN_02074580
FUN_02074580: ; 0x02074580
	strb r1, [r0, #0x44]
	bx lr
	arm_func_end FUN_02074580

	arm_func_start LAB_02074588
LAB_02074588: ; 0x02074588
	strb r1, [r0, #0x45]
	strb r2, [r0, #0x46]
	bx lr
	arm_func_end LAB_02074588

	arm_func_start FUN_02074594
FUN_02074594: ; 0x02074594
	push {r3, lr}
	mov r3, #0
	lsl lr, r3, r1
	rsb r3, r1, #0x20
	mov ip, #1
	orr lr, lr, ip, lsr r3
	sub r3, r1, #0x20
	cmp r2, #0
	orr lr, lr, ip, lsl r3
	popeq {r3, pc}
	ldr r2, [r0, #0x34]
	ldr r3, [r0, #0x38]
	orr r2, r2, ip, lsl r1
	orr r3, r3, lr
	str r2, [r0, #0x34]
	str r3, [r0, #0x38]
	pop {r3, pc}
	arm_func_end FUN_02074594

	arm_func_start FUN_020745d8
FUN_020745d8: ; 0x020745D8
	push {r3, lr}
	mov r3, #0
	lsl lr, r3, r1
	rsb r3, r1, #0x20
	mov ip, #1
	orr lr, lr, ip, lsr r3
	sub r3, r1, #0x20
	cmp r2, #0
	orr lr, lr, ip, lsl r3
	popeq {r3, pc}
	ldr r2, [r0, #0x3c]
	ldr r3, [r0, #0x40]
	orr r2, r2, ip, lsl r1
	orr r3, r3, lr
	str r2, [r0, #0x3c]
	str r3, [r0, #0x40]
	pop {r3, pc}
	arm_func_end FUN_020745d8

	arm_func_start FUN_0207461c
FUN_0207461c: ; 0x0207461C
	cmp r1, #0
	bxlt lr
	cmp r1, #0x100
	bxhs lr
	cmp r2, #0
	and ip, r1, #7
	beq _02074658
	add r3, r0, #0x4c
	mov r0, #1
	lsl r0, r0, ip
	ldrb r2, [r3, r1, asr #3]
	and r0, r0, #0xff
	orr r0, r2, r0
	strb r0, [r3, r1, asr #3]
	bx lr
	arm_func_end FUN_0207461c
_02074658:
	mov r2, #1
	add r3, r0, #0x4c
	lsl r0, r2, ip
	eor r0, r0, #0xff
	ldrb r2, [r3, r1, asr #3]
	and r0, r0, #0xff
	and r0, r2, r0
	strb r0, [r3, r1, asr #3]
	bx lr

	arm_func_start FUN_0207467c
FUN_0207467c: ; 0x0207467C
	cmp r1, #0
	bxlt lr
	cmp r1, #0x100
	bxhs lr
	cmp r2, #0
	and ip, r1, #7
	beq _020746B8
	add r3, r0, #0x6c
	mov r0, #1
	lsl r0, r0, ip
	ldrb r2, [r3, r1, asr #3]
	and r0, r0, #0xff
	orr r0, r2, r0
	strb r0, [r3, r1, asr #3]
	bx lr
	arm_func_end FUN_0207467c
_020746B8:
	mov r2, #1
	add r3, r0, #0x6c
	lsl r0, r2, ip
	eor r0, r0, #0xff
	ldrb r2, [r3, r1, asr #3]
	and r0, r0, #0xff
	and r0, r2, r0
	strb r0, [r3, r1, asr #3]
	bx lr

	arm_func_start FUN_020746dc
FUN_020746dc: ; 0x020746DC
	ldr r2, [r0, #0x90]
	ldr r1, _020746F4 ; =0x0000270F
	cmp r2, r1
	addlt r1, r2, #1
	strlt r1, [r0, #0x90]
	bx lr
	.align 2, 0_020746F4: .word 0x0000270F
	arm_func_end FUN_020746dc

	arm_func_start FUN_020746f8
FUN_020746f8: ; 0x020746F8
	ldr r1, [r0, #0x94]
	cmn r1, #0x80000001
	addlt r1, r1, #1
	strlt r1, [r0, #0x94]
	bx lr
	arm_func_end FUN_020746f8

	arm_func_start FUN_0207470c
FUN_0207470c: ; 0x0207470C
	ldr r1, [r0, #0x98]
	cmn r1, #0x80000001
	addlt r1, r1, #1
	strlt r1, [r0, #0x98]
	bx lr
	arm_func_end FUN_0207470c

	arm_func_start FUN_02074720
FUN_02074720: ; 0x02074720
	ldr r1, [r0, #0x9c]
	cmn r1, #0x80000001
	addlt r1, r1, #1
	strlt r1, [r0, #0x9c]
	bx lr
	arm_func_end FUN_02074720

	arm_func_start FUN_02074734
FUN_02074734: ; 0x02074734
	ldr r1, [r0, #0xa0]
	cmn r1, #0x80000001
	addlt r1, r1, #1
	strlt r1, [r0, #0xa0]
	bx lr
	arm_func_end FUN_02074734

	arm_func_start FUN_02074748
FUN_02074748: ; 0x02074748
	strb r1, [r0, #0xa5]
	bx lr
	arm_func_end FUN_02074748

	arm_func_start FUN_02074750
FUN_02074750: ; 0x02074750
	strb r1, [r0, #0xa6]
	bx lr
	arm_func_end FUN_02074750

	arm_func_start FUN_02074758
FUN_02074758: ; 0x02074758
	add r0, r0, #0x100
	strh r1, [r0, #0x34]
	bx lr
	arm_func_end FUN_02074758

	arm_func_start FUN_02074764
FUN_02074764: ; 0x02074764
	ldr r2, _02074778 ; =0x0CDFE5FF
	cmp r1, r2
	movhi r1, r2
	str r1, [r0, #0x1c]
	bx lr
	.align 2, 0_02074778: .word 0x0CDFE5FF
	arm_func_end FUN_02074764

	arm_func_start FUN_0207477c
FUN_0207477c: ; 0x0207477C
	strb r1, [r0, #0x48]
	bx lr
	arm_func_end FUN_0207477c

	arm_func_start FUN_02074784
FUN_02074784: ; 0x02074784
	strb r1, [r0, #0x47]
	bx lr
	arm_func_end FUN_02074784

	arm_func_start FUN_0207478c
FUN_0207478c: ; 0x0207478C
	strb r1, [r0, #0x2c]
	bx lr
	arm_func_end FUN_0207478c

	arm_func_start FUN_02074794
FUN_02074794: ; 0x02074794
	add r0, r0, r1, lsl #2
	str r2, [r0, #0xac]
	bx lr
	arm_func_end FUN_02074794

	arm_func_start FUN_020747a0
FUN_020747a0: ; 0x020747A0
	strh r1, [r0, #0x30]
	bx lr
	arm_func_end FUN_020747a0

	arm_func_start FUN_020747a8
FUN_020747a8: ; 0x020747A8
	strh r1, [r0, #0x2e]
	bx lr
	arm_func_end FUN_020747a8

	arm_func_start FUN_020747b0
FUN_020747b0: ; 0x020747B0
	strh r1, [r0, #0x32]
	bx lr
	arm_func_end FUN_020747b0

	arm_func_start FUN_020747b8
FUN_020747b8: ; 0x020747B8
	strb r1, [r0, #0x2d]
	bx lr
	arm_func_end FUN_020747b8

	arm_func_start FUN_020747c0
FUN_020747c0: ; 0x020747C0
	strb r1, [r0, #0x4a]
	bx lr
	arm_func_end FUN_020747c0

	arm_func_start FUN_020747c8
FUN_020747c8: ; 0x020747C8
	str r1, [r0, #0x20]
	bx lr
	arm_func_end FUN_020747c8

	arm_func_start FUN_020747d0
FUN_020747d0: ; 0x020747D0
	str r1, [r0, #0x24]
	bx lr
	arm_func_end FUN_020747d0

	arm_func_start FUN_020747d8
FUN_020747d8: ; 0x020747D8
	str r1, [r0, #0x28]
	bx lr
	arm_func_end FUN_020747d8

	arm_func_start _strcpy
_strcpy: ; 0x020747E0
	ldr ip, _020747E8 ; =_strcpy
	bx ip
	.align 2, 0_020747E8: .word _strcpy
	arm_func_end _strcpy

	arm_func_start FUN_020747ec
FUN_020747ec: ; 0x020747EC
	add r0, r0, r1
	strb r2, [r0, #0x8c]
	bx lr
	arm_func_end FUN_020747ec

	arm_func_start FUN_020747f8
FUN_020747f8: ; 0x020747F8
	push {r4, lr}
	subs ip, r2, #1
	mvn r4, #0
	bmi _02074844
	cmp ip, #0
	blt _02074844
	ldr r0, _02074850 ; =0xEDB88320
	mov r2, #7
	arm_func_end FUN_020747f8
_02074818:
	ldrb r3, [r1]
	mov lr, r2
	eor r4, r4, r3
_02074824:
	tst r4, #1
	eorne r4, r0, r4, lsr #1
	lsreq r4, r4, #1
	subs lr, lr, #1
	bpl _02074824
	subs ip, ip, #1
	add r1, r1, #1
	bpl _02074818
_02074844:
	mvn r0, #0
	eor r0, r4, r0
	pop {r4, pc}
	.align 2, 0_02074850: .word 0xEDB88320

	arm_func_start FUN_02074854
FUN_02074854: ; 0x02074854
	push {r4, lr}
	subs lr, r2, #1
	ldr ip, _020748C0 ; =0x0000FFFF
	bmi _020748AC
	cmp lr, #0
	blt _020748AC
	ldr r2, _020748C4 ; =0x0000FDAA
	mov r3, #7
	arm_func_end FUN_02074854
_02074874:
	ldrb r0, [r1]
	mov r4, r3
	lsl r0, r0, #0x10
	eor ip, ip, r0, lsr #16
_02074884:
	tst ip, #1
	eorne r0, r2, ip, asr #1
	asreq r0, ip, #1
	lsl r0, r0, #0x10
	lsr ip, r0, #0x10
	subs r4, r4, #1
	bpl _02074884
	subs lr, lr, #1
	add r1, r1, #1
	bpl _02074874
_020748AC:
	ldr r0, _020748C0 ; =0x0000FFFF
	eor r0, ip, r0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	pop {r4, pc}
	.align 2, 0_020748C0: .word 0x0000FFFF
_020748C4: .word 0x0000FDAA

	arm_func_start FUN_020748c8
FUN_020748c8: ; 0x020748C8
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _02074A24 ; =0x020B9DD4
	mov r6, #0
	ldr r3, _02074A28 ; =0x020B9DD8
	ldr r0, [r0]
	mov r5, r2
	add r4, r3, r0, lsl #7
	mov r0, r1
	mov r1, r4
	mov r7, r6
	bl _memcpy
	cmp r5, #0
	mov r1, r6
	bls _02074918
	arm_func_end FUN_020748c8
_02074900:
	ldrb r0, [r4, r1]
	eor r0, r0, #0xad
	strb r0, [r4, r1]
	add r1, r1, #1
	cmp r1, r5
	blo _02074900
_02074918:
	cmp r5, #0
	mov r1, #0
	bls _02074954
_02074924:
	ldrb r2, [r4, r1]
	mov r3, r7
_0207492C:
	lsl r0, r2, #7
	orr r0, r0, r2, asr #1
	add r3, r3, #1
	cmp r3, #2
	and r2, r0, #0xff
	blt _0207492C
	strb r2, [r4, r1]
	add r1, r1, #1
	cmp r1, r5
	blo _02074924
_02074954:
	subs r3, r5, #2
	mov r7, #0
	beq _02074980
_02074960:
	add r2, r4, r7
	ldrb r1, [r4, r7]
	ldrb r0, [r2, #2]
	strb r0, [r4, r7]
	add r7, r7, #3
	strb r1, [r2, #2]
	cmp r7, r3
	blo _02074960
_02074980:
	subs r3, r5, #4
	mov r7, #0
	beq _020749AC
_0207498C:
	add r2, r4, r7
	ldrb r1, [r4, r7]
	ldrb r0, [r2, #4]
	strb r0, [r4, r7]
	add r7, r7, #5
	strb r1, [r2, #4]
	cmp r7, r3
	blo _0207498C
_020749AC:
	subs r3, r5, #6
	mov r7, #0
	beq _020749D8
_020749B8:
	add r2, r4, r7
	ldrb r1, [r4, r7]
	ldrb r0, [r2, #6]
	strb r0, [r4, r7]
	add r7, r7, #7
	strb r1, [r2, #6]
	cmp r7, r3
	blo _020749B8
_020749D8:
	subs r3, r5, #1
	mov r5, #0
	beq _02074A04
_020749E4:
	add r2, r4, r5
	ldrb r1, [r4, r5]
	ldrb r0, [r2, #1]
	strb r0, [r4, r5]
	add r5, r5, #2
	strb r1, [r2, #1]
	cmp r5, r3
	blo _020749E4
_02074A04:
	ldr r0, _02074A24 ; =0x020B9DD4
	ldr r1, [r0]
	add r1, r1, #1
	str r1, [r0]
	cmp r1, #4
	streq r6, [r0]
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02074A24: .word 0x020B9DD4
_02074A28: .word 0x020B9DD8

	arm_func_start FUN_02074a2c
FUN_02074a2c: ; 0x02074A2C
	cmp r1, #0x1e0
	bxgt lr
	cmp r1, #0
	bxlt lr
	lsr r2, r1, #0x1f
	rsb r0, r2, r1, lsl #29
	ldr r3, _02074A68 ; =0x020A1612
	add r2, r2, r0, ror #29
	mov r0, #1
	lsl r0, r0, r2
	ldrb r2, [r3, r1, asr #3]
	and r0, r0, #0xff
	orr r0, r2, r0
	strb r0, [r3, r1, asr #3]
	bx lr
	.align 2, 0_02074A68: .word 0x020A1612
	arm_func_end FUN_02074a2c

	arm_func_start FUN_02074a6c
FUN_02074a6c: ; 0x02074A6C
	mov r0, #0
	mov r2, r1
	ldr ip, _02074A80 ; =FUN_02002c2c
	sub r1, r0, #1
	bx ip
	.align 2, 0_02074A80: .word FUN_02002c2c
	arm_func_end FUN_02074a6c

	arm_func_start LAB_02074a84
LAB_02074a84: ; 0x02074A84
	push {r4, lr}
	mov r4, r1
	mov r0, #0
	mov r2, r4
	sub r1, r0, #1
	bl FUN_02002d34
	mov r0, r4
	pop {r4, pc}
	arm_func_end LAB_02074a84

	arm_func_start FUN_02074aa4
FUN_02074aa4: ; 0x02074AA4
	bx lr
	arm_func_end FUN_02074aa4

	arm_func_start FUN_02074aa8
FUN_02074aa8: ; 0x02074AA8
	push {r4, r5, r6, lr}
	ldr r1, _02074B30 ; =0x020B9FD8
	mov r2, #1
	movs r4, r0
	strb r2, [r1, #0x45]
	subeq r0, r2, #0x100
	popeq {r4, r5, r6, pc}
	mov r1, #0x40
	bl FUN_02075638
	mov r0, #0
	ldr r1, _02074B34 ; =FUN_02074aa4
	mov ip, #4
	ldr r3, _02074B38 ; =FUN_02074a6c
	ldr r2, _02074B3C ; =LAB_02074a84
	mov r6, #8
	mov r5, #0xf
	mov lr, #0x14
	str r0, [r4, #4]
	str r0, [r4, #8]
	str r0, [r4, #0xc]
	strb r6, [r4, #0x10]
	strb r0, [r4, #0x11]
	strh r0, [r4, #0x14]
	strh r5, [r4, #0x16]
	strb lr, [r4, #0x12]
	strh ip, [r4, #0x18]
	strh ip, [r4, #0x1a]
	str r3, [r4, #0x1c]
	str r2, [r4, #0x20]
	str r0, [r4, #0x24]
	str r1, [r4, #0x28]
	str r1, [r4, #0x2c]
	str r0, [r4, #0x30]
	pop {r4, r5, r6, pc}
	.align 2, 0_02074B30: .word 0x020B9FD8
_02074B34: .word FUN_02074aa4
_02074B38: .word FUN_02074a6c
_02074B3C: .word LAB_02074a84
	arm_func_end FUN_02074aa8

	arm_func_start FUN_02074b40
FUN_02074b40: ; 0x02074B40
	push {r3, r4, r5, lr}
	movs r4, r0
	bne _02074B64
	mov r1, #0
	mov r2, r1
	mvn r0, #0x17
	bl FUN_02075144
	mov r0, #2
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02074b40
_02074B64:
	tst r4, #3
	beq _02074B84
	mov r1, #0
	mov r2, r1
	mvn r0, #0x17
	bl FUN_02075144
	mov r0, #2
	pop {r3, r4, r5, pc}
_02074B84:
	ldr r0, [r4, #8]
	mov r5, #0
	cmp r0, #0
	beq _02074B9C
	tst r0, #0xf
	beq _02074BA0
_02074B9C:
	orr r5, r5, #4
_02074BA0:
	ldr r0, [r4, #0xc]
	cmp r0, #0
	beq _02074BB4
	tst r0, #0xf
	beq _02074BB8
_02074BB4:
	orr r5, r5, #8
_02074BB8:
	ldrb r0, [r4, #0x11]
	ldrb r1, [r4, #0x10]
	cmp r0, #0
	cmpne r0, #1
	orrne r5, r5, #0x100
	cmp r1, #4
	ldrb r0, [r4, #0x12]
	orrlo r5, r5, #0x200
	cmp r0, r1
	ldrsh r1, [r4, #0x14]
	orrls r5, r5, #0x400
	ldrsh r0, [r4, #0x16]
	cmp r1, #0
	orrne r5, r5, #0x4000
	cmp r0, #0x10
	orrge r5, r5, #0x8000
	cmp r1, r0
	orrgt r5, r5, #0xc000
	cmp r5, #0
	beq _02074C18
	mov r1, r5
	mvn r0, #0x17
	mov r2, #0
	bl FUN_02075144
_02074C18:
	mov r0, r5
	str r5, [r4]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02074c24
FUN_02074c24: ; 0x02074C24
	push {r4, lr}
	cmp r0, #0
	strne r1, [r0, #8]
	strne r2, [r0, #0xc]
	movne r0, #0
	popne {r4, pc}
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02074c24

	arm_func_start FUN_02074c58
FUN_02074c58: ; 0x02074C58
	push {r4, lr}
	cmp r0, #0
	strbne r1, [r0, #0x11]
	strbne r2, [r0, #0x10]
	movne r0, #0
	popne {r4, pc}
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02074c58

	arm_func_start FUN_02074c8c
FUN_02074c8c: ; 0x02074C8C
	push {r4, lr}
	cmp r0, #0
	strbne r1, [r0, #0x12]
	movne r0, #0
	popne {r4, pc}
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02074c8c

	arm_func_start FUN_02074cbc
FUN_02074cbc: ; 0x02074CBC
	push {r4, lr}
	cmp r0, #0
	bne _02074CE4
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_02074cbc
_02074CE4:
	cmp r1, #0
	movlt r1, #0
	cmp r2, #0
	movlt r2, #0xf
	strh r1, [r0, #0x14]
	strh r2, [r0, #0x16]
	mov r0, #0
	pop {r4, pc}

	arm_func_start FUN_02074d04
FUN_02074d04: ; 0x02074D04
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r4, _02074EF8 ; =0x020B9FD8
	mov r7, r0
	ldrsb r1, [r4]
	mov r5, #0
	cmp r1, #1
	bne _02074D3C
	mvn r4, #0xbf
	mov r1, r5
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02074d04
_02074D3C:
	bl FUN_02074b40
	movs r1, r0
	beq _02074D60
	mvn r4, #0x1d
	mov r0, r4
	mov r2, r5
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02074D60:
	bl FUN_02003328
	mov r0, r5
	mov r1, r0
	bl FUN_020034c0
	bl FUN_020035b8
	ldrb r0, [r7, #0x11]
	ldr sb, _02074EF8 ; =0x020B9FD8
	mov r6, #0
	cmp r0, #0
	ldreq r1, _02074EFC ; =0x00002710
	moveq r0, #0x64
	ldrne r1, _02074F00 ; =0x0000414B
	movne r0, #0x3c
	strh r1, [r4, #0x28]
	str r0, [r4, #0x30]
	strh r6, [sb, #2]
	str r6, [sb, #4]
	str r6, [sb, #0x10]
	mov r0, #0xff
	mov r4, #1
	strb r0, [sb, #0x44]
	strb r4, [sb, #0x45]
	rsb r0, r4, #0x1000
	strh r0, [sb, #0x46]
	ldr r0, _02074F04 ; =0x00BC614E
	str r6, [sb, #0x2c]
	str r0, [sb, #0x3c]
	ldrb r0, [r7, #0x11]
	ldr r8, _02074F08 ; =0x020BAFD8
	strb r0, [r8, #0xde4]
	bl FUN_02075104
	strb r4, [sb, #0x40]
	mov r1, #2
	ldr r0, _02074F0C ; =0x02091F94
	strb r1, [sb, #0x41]
	str r0, [r8, #0xee0]
	str r6, [sb, #0x728]
	str r6, [sb, #0x72c]
	str r6, [sb, #0x730]
	str r6, [sb, #0x734]
	ldrb r0, [r7, #0x10]
	strb r0, [r8, #0xd1c]
_02074E08:
	add r0, sb, r6
	add r6, r6, #1
	strb r5, [r0, #0x680]
	cmp r6, #0x80
	blt _02074E08
	ldr r4, _02074EF8 ; =0x020B9FD8
	mov r0, #0x64
	strb r0, [r4, #0x687]
	mov r0, #0x7f
	strb r0, [r4, #0x68b]
	mov r0, #0x40
	strb r0, [r4, #0x68a]
	add r0, r7, #0x28
	ldr r3, _02074F10 ; =0x020B9FF4
	ldm r0, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r6, #1
	ldrsh r3, [r4, #0x28]
	ldr r1, _02074F08 ; =0x020BAFD8
	ldr r0, _02074F14 ; =0x020BBDD8
	str r5, [r1, #0xed4]
	str r6, [r1, #0xed8]
	str r5, [r1, #0xec8]
	str r5, [r1, #0xecc]
	sub r2, r6, #2
	strh r2, [r0, #0xd0]
	strh r3, [r0, #0xd2]
	strb r5, [r1, #0xedc]
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	add r2, r7, #0x1c
	bl FUN_02075210
	ldrsh r0, [r7, #0x16]
	add r0, r0, #1
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	bl FUN_0207b070
	bl FUN_0207afc8
	bl FUN_02084b48
	bl FUN_0207c4a8
	bl FUN_02079688
	mov r1, #0x7f
_02074EB0:
	add r0, r4, r6
	add r6, r6, #1
	strb r1, [r0, #0x48]
	cmp r6, #0x10
	blt _02074EB0
	ldr r4, _02074EF8 ; =0x020B9FD8
	strb r5, [r4, #0x48]
	bl FUN_02077aa0
	ldrb r0, [r7, #0x12]
	bl FUN_020757a0
	mov r0, #1
	strb r0, [r4]
	strb r5, [r4, #1]
	ldrh r0, [r7, #0x18]
	ldrh r1, [r7, #0x1a]
	bl FUN_02076ecc
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02074EF8: .word 0x020B9FD8
_02074EFC: .word 0x00002710
_02074F00: .word 0x0000414B
_02074F04: .word 0x00BC614E
_02074F08: .word 0x020BAFD8
_02074F0C: .word 0x02091F94
_02074F10: .word 0x020B9FF4
_02074F14: .word 0x020BBDD8

	arm_func_start LAB_02074f18
LAB_02074f18: ; 0x02074F18
	push {r3, r4, r5, lr}
	ldr r4, _02074F7C ; =0x020B9FD8
	ldrsb r0, [r4]
	cmp r0, #0
	mvneq r0, #0xc0
	popeq {r3, r4, r5, pc}
	bl FUN_0207582c
	mov r5, #0
	mov r0, r5
	bl FUN_020750e4
	bl FUN_0207c82c
	bl FUN_02084b80
	bl FUN_02084b70
	bl FUN_02077b44
	bl FUN_0207afc8
	bl FUN_02075280
	bl FUN_02075104
	strb r5, [r4]
	strb r5, [r4, #1]
	str r5, [r4, #0x2c]
	str r5, [r4, #4]
	str r5, [r4, #0x10]
	mov r0, r5
	strh r5, [r4, #2]
	pop {r3, r4, r5, pc}
	.align 2, 0_02074F7C: .word 0x020B9FD8
	arm_func_end LAB_02074f18

	arm_func_start FUN_02074f80
FUN_02074f80: ; 0x02074F80
	push {r4, lr}
	ldr r0, _02074FB4 ; =0x020B9FD8
	ldrsb r1, [r0]
	cmp r1, #0
	ldrsbne r0, [r0, #1]
	popne {r4, pc}
	mvn r4, #0xc0
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02074FB4: .word 0x020B9FD8
	arm_func_end FUN_02074f80

	arm_func_start FUN_02074fb8
FUN_02074fb8: ; 0x02074FB8
	push {r3, r4, r5, lr}
	ldr r4, _02075048 ; =0x020B9FD8
	ldrsb r0, [r4]
	cmp r0, #0
	bne _02074FE8
	mvn r4, #0xc0
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02074fb8
_02074FE8:
	ldrsb r0, [r4, #1]
	cmp r0, #1
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, #1
	strb r0, [r4, #1]
	bl FUN_02077bf4
	mov r5, #0
	ldr r0, [r4, #0x670]
	mov r1, r5
	bl FUN_020763b8
	ldr r0, [r4, #0x674]
	mov r1, r5
	bl FUN_020763b8
	mov r0, r5
	bl FUN_0207c8b4
	mov r0, r5
	bl FUN_02084bb0
	mov r0, r5
	bl FUN_0207b070
	mov r1, #2
	mov r0, r5
	strb r1, [r4, #0x40]
	pop {r3, r4, r5, pc}
	.align 2, 0_02075048: .word 0x020B9FD8

	arm_func_start FUN_0207504c
FUN_0207504c: ; 0x0207504C
	push {r3, r4, r5, lr}
	ldr r1, _020750E0 ; =0x020B9FD8
	mov r4, r0
	ldrsb r0, [r1, #1]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r2, #1
	strb r2, [r1, #0x40]
	ldrh r0, [r1, #0x46]
	ldr r5, _020750E0 ; =0x020B9FD8
	mov r1, r4
	tst r0, #0xf
	moveq r2, #0
	lsl r2, r2, #0x18
	ldr r0, [r5, #0x670]
	asr r2, r2, #0x18
	bl FUN_02076424
	ldrh r0, [r5, #0x46]
	ldr r5, _020750E0 ; =0x020B9FD8
	mov r1, r4
	tst r0, #0xf0
	movne r0, #1
	moveq r0, #0
	lsl r2, r0, #0x18
	ldr r0, [r5, #0x674]
	asr r2, r2, #0x18
	bl FUN_02076424
	mov r0, r4
	bl FUN_0207c928
	mov r0, r4
	bl FUN_02084bd0
	mov r4, #0
	strb r4, [r5, #1]
	bl FUN_02077b80
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_020750E0: .word 0x020B9FD8
	arm_func_end FUN_0207504c

	arm_func_start FUN_020750e4
FUN_020750e4: ; 0x020750E4
	push {r4, lr}
	mov r4, r0
	bl FUN_02076284
	mov r0, r4
	bl FUN_020779b8
	mov r0, r4
	bl FUN_0207d17c
	pop {r4, pc}
	arm_func_end FUN_020750e4

	arm_func_start FUN_02075104
FUN_02075104: ; 0x02075104
	ldr r1, _02075138 ; =0x020B9FD8
	mov r2, #0
	str r2, [r1, #0x65c]
	str r2, [r1, #0x660]
	ldr r0, _0207513C ; =0x020BAFD8
	str r2, [r1, #0x664]
	str r2, [r0, #0xde8]
	str r2, [r1, #0x66c]
	str r2, [r1, #0x670]
	str r2, [r1, #0x674]
	ldr ip, _02075140 ; =FUN_02076e4c
	str r2, [r1, #0x678]
	bx ip
	.align 2, 0_02075138: .word 0x020B9FD8
_0207513C: .word 0x020BAFD8
_02075140: .word FUN_02076e4c
	arm_func_end FUN_02075104

	arm_func_start FUN_02075144
FUN_02075144: ; 0x02075144
	push {r3, lr}
	ldr r3, _02075174 ; =0x020B9FD8
	stmib r3, {r0, r1}
	str r2, [r3, #0xc]
	ldr ip, [r3, #0x1c]
	cmp ip, #0
	popeq {r3, pc}
	mov r1, #0
	ldr r2, _02075178 ; =0x020B9FDC
	mov r3, r1
	blx ip
	pop {r3, pc}
	.align 2, 0_02075174: .word 0x020B9FD8
_02075178: .word 0x020B9FDC
	arm_func_end FUN_02075144

	arm_func_start FUN_0207517c
FUN_0207517c: ; 0x0207517C
	push {r3, lr}
	ldr r3, _020751B0 ; =0x020B9FD8
	str r0, [r3, #0x10]
	str r1, [r3, #0x14]
	str r2, [r3, #0x18]
	ldr ip, [r3, #0x20]
	cmp ip, #0
	popeq {r3, pc}
	mov r1, #0
	ldr r2, _020751B4 ; =0x020B9FE8
	mov r3, r1
	blx ip
	pop {r3, pc}
	.align 2, 0_020751B0: .word 0x020B9FD8
_020751B4: .word 0x020B9FE8
	arm_func_end FUN_0207517c

	arm_func_start FUN_020751b8
FUN_020751b8: ; 0x020751B8
	lsr r3, r0, #0x18
	lsr r2, r0, #8
	lsl r1, r0, #8
	lsl r0, r0, #0x18
	and r3, r3, #0xff
	and r2, r2, #0xff00
	orr r2, r3, r2
	and r1, r1, #0xff0000
	orr r1, r2, r1
	and r0, r0, #0xff000000
	orr r0, r1, r0
	bx lr
	arm_func_end FUN_020751b8

	arm_func_start FUN_020751e8
FUN_020751e8: ; 0x020751E8
	ldr r1, _02075208 ; =0x020B9FD8
	ldr r0, _0207520C ; =0x00007FFF
	ldr r2, [r1, #0x3c]
	eor r2, r2, r2, lsl #17
	eor r2, r2, r2, asr #15
	str r2, [r1, #0x3c]
	and r0, r2, r0
	bx lr
	.align 2, 0_02075208: .word 0x020B9FD8
_0207520C: .word 0x00007FFF
	arm_func_end FUN_020751e8

	arm_func_start FUN_02075210
FUN_02075210: ; 0x02075210
	mov ip, r1
	tst r0, #0xf
	bicne r0, r0, #0xf
	ldr r1, _02075274 ; =0x020B9FD8
	addne r0, r0, #0x10
	subne ip, ip, #0x10
	add r3, r0, ip
	str r0, [r1, #0x700]
	str r3, [r1, #0x704]
	str ip, [r1, #0x708]
	ldr r3, _02075278 ; =0x74647373
	mov r1, #0x82
	str r3, [r0]
	strb r1, [r0, #4]
	mov r3, #0
	strb r3, [r0, #5]
	add r1, r0, #0x10
	str r1, [r0, #8]
	str r3, [r0, #0xc]
	strb r3, [r0, #6]
	ldr r3, _0207527C ; =0x020BA6E4
	ldm r2, {r0, r1, r2}
	stm r3, {r0, r1, r2}
	mov r0, ip
	bx lr
	.align 2, 0_02075274: .word 0x020B9FD8
_02075278: .word 0x74647373
_0207527C: .word 0x020BA6E4
	arm_func_end FUN_02075210

	arm_func_start FUN_02075280
FUN_02075280: ; 0x02075280
	ldr r0, _02075298 ; =0x020B9FD8
	mov r1, #0
	str r1, [r0, #0x700]
	str r1, [r0, #0x704]
	str r1, [r0, #0x708]
	bx lr
	.align 2, 0_02075298: .word 0x020B9FD8
	arm_func_end FUN_02075280

	arm_func_start FUN_0207529c
FUN_0207529c: ; 0x0207529C
	ldr r2, _020752A8 ; =0x72657375
	ldr ip, _020752AC ; =FUN_020752b0
	bx ip
	.align 2, 0_020752A8: .word 0x72657375
_020752AC: .word FUN_020752b0
	arm_func_end FUN_0207529c

	arm_func_start FUN_020752b0
FUN_020752b0: ; 0x020752B0
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _020753B0 ; =0x020B9FD8
	mov lr, r0
	ldr r0, [r3, #0x700]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r4, _020753B4 ; =0x04000208
	cmp r1, #0
	ldrh ip, [r4]
	moveq r1, #0x10
	mov r0, #0
	sub r5, r1, #1
	strh r0, [r4]
	ldr r3, _020753B0 ; =0x020B9FD8
	mvn r0, r5
	add r4, lr, r5
	and r4, r0, r4
	ldr r3, [r3, #0x700]
	add r6, r4, #0x10
	arm_func_end FUN_020752b0
_02075300:
	ldr r4, [r3, #0xc]
	cmp r4, #0
	ldreq r4, _020753B0 ; =0x020B9FD8
	ldreq r7, [r3, #8]
	ldreq r4, [r4, #0x704]
	subeq r5, r4, r7
	beq _02075330
	ldr r7, [r3, #8]
	sub r5, r4, r7
	cmp r5, r6
	movlt r3, r4
	blt _02075300
_02075330:
	cmp r5, r6
	ldrlt r2, _020753B4 ; =0x04000208
	movlt r0, #0
	ldrhlt r1, [r2]
	strhlt ip, [r2]
	poplt {r3, r4, r5, r6, r7, pc}
	add r4, r7, #0x10
	sub r1, r1, #1
	add r1, r4, r1
	and r1, r0, r1
	sub r6, r1, #0x10
	add r4, r6, #0x10
	add r0, r4, lr
	str r0, [r6, #8]
	str r2, [r1, #-0x10]
	mov r0, #2
	strb r0, [r6, #4]
	mov r0, #0
	strb r0, [r6, #5]
	ldr r1, [r3, #0xc]
	ldr r5, _020753B4 ; =0x04000208
	str r1, [r6, #0xc]
	str r6, [r3, #0xc]
	strb r0, [r6, #6]
	strb r0, [r3, #6]
	ldrh r1, [r5]
	mov r1, r4
	mov r2, lr
	strh ip, [r5]
	bl FUN_0200787c
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020753B0: .word 0x020B9FD8
_020753B4: .word 0x04000208

	arm_func_start FUN_020753b8
FUN_020753b8: ; 0x020753B8
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r3, _020754F4 ; =0x020B9FD8
	mov r6, r0
	ldr r0, [r3, #0x700]
	mov r5, r1
	cmp r0, #0
	bne _020753EC
	mov r1, r6
	mov r2, r5
	mvn r0, #0xc1
	bl FUN_02075144
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020753b8
_020753EC:
	ldr r3, _020754F8 ; =0x04000208
	cmp r5, #0
	ldrh ip, [r3]
	moveq r5, #0x10
	sub r4, r5, #1
	mov r1, #0
	strh r1, [r3]
	ldr r0, _020754F4 ; =0x020B9FD8
	mvn lr, r4
	add r3, r6, r4
	and r3, lr, r3
	ldr r0, [r0, #0x700]
	mov r4, r1
	add r3, r3, #0x10
_02075424:
	ldr r8, [r0, #0xc]
	cmp r8, #0
	bne _02075450
	ldr r7, _020754F4 ; =0x020B9FD8
	ldr r8, [r0, #8]
	ldr sb, [r7, #0x704]
	sub r7, sb, r8
	cmp r7, r3
	movge r1, r0
	movge r4, sb
	b _0207546C
_02075450:
	ldr r7, [r0, #8]
	sub r7, r8, r7
	cmp r7, r3
	movge r1, r0
	movge r4, r8
	mov r0, r8
	b _02075424
_0207546C:
	cmp r1, #0
	ldreq r2, _020754F8 ; =0x04000208
	moveq r0, #0
	ldrheq r1, [r2]
	strheq ip, [r2]
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	sub r0, r4, r3
	add r3, r0, #0x10
	sub r0, r5, #1
	add r0, r3, r0
	and r0, lr, r0
	str r2, [r0, #-0x10]
	sub r7, r0, #0x10
	add r4, r7, #0x10
	mov r0, #0x22
	strb r0, [r7, #4]
	mov r0, #0
	strb r0, [r7, #5]
	strb r5, [r7, #7]
	add r2, r4, r6
	str r2, [r7, #8]
	ldr r2, [r1, #0xc]
	ldr r3, _020754F8 ; =0x04000208
	str r2, [r7, #0xc]
	str r7, [r1, #0xc]
	strb r0, [r7, #6]
	strb r0, [r1, #6]
	ldrh r1, [r3]
	mov r1, r4
	mov r2, r6
	strh ip, [r3]
	bl FUN_0200787c
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020754F4: .word 0x020B9FD8
_020754F8: .word 0x04000208

	arm_func_start FUN_020754fc
FUN_020754fc: ; 0x020754FC
	push {r4, lr}
	ldr r2, _020755A4 ; =0x020B9FD8
	mov r1, r0
	ldr r0, [r2, #0x700]
	cmp r0, #0
	bne _0207552C
	mvn r4, #0xc1
	mov r0, r4
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_020754fc
_0207552C:
	ldr r0, _020755A8 ; =0x04000208
	mov r4, #0
	ldrh r3, [r0]
	sub ip, r1, #0x10
	strh r4, [r0]
	ldr r0, [r2, #0x700]
	cmp r0, ip
	beq _0207555C
_0207554C:
	mov r4, r0
	ldr r0, [r0, #0xc]
	cmp r0, ip
	bne _0207554C
_0207555C:
	cmp r4, #0
	beq _02075580
	ldr r0, [ip, #0xc]
	ldr r1, _020755A8 ; =0x04000208
	str r0, [r4, #0xc]
	ldrh r0, [r1]
	mov r4, #0
	strh r3, [r1]
	b _0207559C
_02075580:
	ldr ip, _020755A8 ; =0x04000208
	mvn r4, #0x8b
	ldrh r0, [ip]
	mov r0, r4
	mov r2, #0
	strh r3, [ip]
	bl FUN_02075144
_0207559C:
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_020755A4: .word 0x020B9FD8
_020755A8: .word 0x04000208

	arm_func_start FUN_020755ac
FUN_020755ac: ; 0x020755AC
	push {r3, lr}
	ldr r2, _02075630 ; =0x04000208
	mov r3, #0
	ldrh ip, [r2]
	ldr r1, _02075634 ; =0x020B9FD8
	mov r0, #1
	strh r3, [r2]
	ldr r2, [r1, #0x700]
	cmp r2, #0
	beq _02075618
	arm_func_end FUN_020755ac
_020755D4:
	ldr r1, [r2, #8]
	cmp r1, r2
	movle r3, #1
	ble _02075618
	ldr lr, [r2, #0xc]
	cmp lr, #0
	cmpne lr, r1
	movlt r3, #1
	blt _02075618
	ldrb r1, [r2, #6]
	cmp r1, #0
	movne r3, #1
	bne _02075618
	mov r2, lr
	cmp lr, #0
	add r0, r0, #1
	bne _020755D4
_02075618:
	ldr r2, _02075630 ; =0x04000208
	cmp r3, #1
	ldrh r1, [r2]
	movne r0, #0
	strh ip, [r2]
	pop {r3, pc}
	.align 2, 0_02075630: .word 0x04000208
_02075634: .word 0x020B9FD8

	arm_func_start FUN_02075638
FUN_02075638: ; 0x02075638
	cmp r1, #0x10
	blt _02075660
	mov r2, #0
	arm_func_end FUN_02075638
_02075644:
	str r2, [r0, #0xc]
	str r2, [r0, #8]
	sub r1, r1, #0x10
	str r2, [r0, #4]
	cmp r1, #0x10
	str r2, [r0], #0x10
	bge _02075644
_02075660:
	cmp r1, #4
	blt _0207567C
	mov r2, #0
_0207566C:
	sub r1, r1, #4
	cmp r1, #4
	str r2, [r0], #4
	bge _0207566C
_0207567C:
	cmp r1, #0
	bxle lr
	mov r2, #0
_02075688:
	strb r2, [r0], #1
	subs r1, r1, #1
	bne _02075688
	bx lr

	arm_func_start FUN_02075698
FUN_02075698: ; 0x02075698
	push {r4, lr}
	movs r2, r0
	beq _020756AC
	cmp r2, #7
	bls _020756C4
	arm_func_end FUN_02075698
_020756AC:
	mvn r4, #0x17
	mov r0, r4
	mov r1, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
_020756C4:
	ldr r0, _0207570C ; =0x020B9FD8
	cmp r2, #1
	strb r2, [r0, #0x41]
	beq _020756E0
	cmp r2, #7
	beq _020756E8
	b _020756F0
_020756E0:
	ldr r1, _02075710 ; =0x02091E94
	b _020756F4
_020756E8:
	ldr r1, _02075714 ; =0x02091F14
	b _020756F4
_020756F0:
	ldr r1, _02075718 ; =0x02091F94
_020756F4:
	ldr r0, _0207571C ; =0x020BAFD8
	str r1, [r0, #0xee0]
	mov r0, r2
	bl FUN_0207db04
	mov r0, #0
	pop {r4, pc}
	.align 2, 0_0207570C: .word 0x020B9FD8
_02075710: .word 0x02091E94
_02075714: .word 0x02091F14
_02075718: .word 0x02091F94
_0207571C: .word 0x020BAFD8

	arm_func_start FUN_02075720
FUN_02075720: ; 0x02075720
	push {r4, r5, r6, lr}
	ldr r3, _0207579C ; =0x020B9FD8
	mov r6, r0
	ldrsb r0, [r3]
	mov r4, r2
	mov r5, r1
	cmp r0, #0
	mvneq r4, #0xc0
	beq _02075784
	cmp r6, #0
	mvneq r4, #0x17
	beq _02075784
	beq _02075784
	ldr r0, [r6]
	bl FUN_020751b8
	cmp r5, r0
	mvnne r4, #0x10
	bne _02075784
	cmp r4, #0
	ldrhne r0, [r6, #0xc]
	cmpne r0, r4
	mvnne r4, #0x12
	bne _02075784
	ldrh r0, [r6, #0xe]
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02075720
_02075784:
	mov r0, r4
	mov r1, r6
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
	.align 2, 0_0207579C: .word 0x020B9FD8

	arm_func_start FUN_020757a0
FUN_020757a0: ; 0x020757A0
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	ldr r4, _0207581C ; =0x020BAFD8
	mov r1, #0x4000
	str r1, [r4, #0xdec]
	mov r6, #0
	str r6, [r4, #0xdf0]
	mov r7, r0
	str r6, [r4, #0xdf4]
	strb r7, [r4, #0xdf8]
	strb r6, [r4, #0xdf9]
	strb r6, [r4, #0xdfa]
	mov r5, #0x800
	ldr r2, _02075820 ; =0x72727473
	mov r0, r5
	strb r6, [r4, #0xdfb]
	mov r1, #0x10
	bl FUN_020753b8
	str r0, [r4, #0xebc]
	stm sp, {r5, r7}
	ldr r3, [r4, #0xebc]
	ldr r4, _02075824 ; =0x020BBDD4
	ldr r1, _02075828 ; =FUN_0207586c
	mov r0, r4
	mov r2, r6
	add r3, r3, #0x800
	bl FUN_02001948
	mov r0, r4
	bl FUN_02001ce0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207581C: .word 0x020BAFD8
_02075820: .word 0x72727473
_02075824: .word 0x020BBDD4
_02075828: .word FUN_0207586c
	arm_func_end FUN_020757a0

	arm_func_start FUN_0207582c
FUN_0207582c: ; 0x0207582C
	push {r3, r4, r5, lr}
	ldr r5, _02075864 ; =0x020BBDD4
	ldr r4, _02075868 ; =0x020BAFD8
	mov r1, #0
	mov r0, r5
	strb r1, [r4, #0xdf9]
	mov r1, #1
	strb r1, [r4, #0xdfa]
	bl FUN_02001ce0
	mov r0, r5
	bl FUN_02001bd8
	ldr r0, [r4, #0xebc]
	bl FUN_020754fc
	pop {r3, r4, r5, pc}
	.align 2, 0_02075864: .word 0x020BBDD4
_02075868: .word 0x020BAFD8
	arm_func_end FUN_0207582c

	arm_func_start FUN_0207586c
FUN_0207586c: ; 0x0207586C
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, _020758C0 ; =0x020BAFD8
	mov r7, #1
	add r4, r5, #0xd00
	mov r6, #0
	arm_func_end FUN_0207586c
_02075880:
	mov r0, r6
	strb r7, [r5, #0xdfb]
	bl FUN_02001c28
	strb r6, [r5, #0xdfb]
	ldrsb r0, [r4, #0xfa]
	cmp r0, #1
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r0, [r5, #0xec0]
	cmp r0, #0
	beq _02075880
	ldr r1, [r5, #0xec4]
	bl FUN_02075bfc
	str r6, [r5, #0xec0]
	str r6, [r5, #0xec4]
	b _02075880
_020758BC:
	.byte 0xF8, 0x80, 0xBD, 0xE8
_020758C0: .word 0x020BAFD8

	arm_func_start FUN_020758c4
FUN_020758c4: ; 0x020758C4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	str r2, [sp]
	mov r5, #4
	ldr r1, _02075B1C ; =0x7377646C
	ldr r2, _02075B20 ; =0x00000415
	mov r3, r5
	mov sl, r0
	mov r4, #0
	bl FUN_02075720
	movs r6, r0
	popmi {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	lsl r0, r6, #0x10
	lsr r0, r0, #0x10
	bl FUN_02075ec8
	cmp r0, #0
	beq _02075920
	sub r4, r5, #0x4c
	mov r0, r4
	mov r1, r6
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020758c4
_02075920:
	mov r5, #0x10
	ldr r2, _02075B24 ; =0x69766177
	mov r1, r5
	mov r0, #0x28
	bl FUN_020752b0
	movs sb, r0
	bne _02075958
	sub r4, r5, #0x90
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02075958:
	str sl, [sb]
	strh r6, [sb, #4]
	strh r4, [sb, #6]
	ldrsh r0, [sl, #0x46]
	add r8, sl, #0x50
	strh r0, [sb, #8]
	ldrsh r0, [sl, #0x48]
	strh r0, [sb, #0xa]
	ldrb r0, [sl, #0x4a]
	strb r0, [sb, #0xc]
	ldrb r0, [sl, #0x4b]
	strb r0, [sb, #0xd]
	str r4, [sb, #0x10]
	str r4, [sb, #0x14]
	str r4, [sb, #0x18]
	str r4, [sb, #0x1c]
	str r4, [sb, #0x20]
	str r4, [sb, #0x24]
	ldr r0, [sl, #0x50]
	bl FUN_020751b8
	ldr r7, _02075B28 ; =0x656F6420
	cmp r0, r7
	beq _02075A40
	ldr fp, _02075B2C ; =0x77617669
	ldr r4, _02075B30 ; =0x70726769
	ldr r6, _02075B34 ; =0x70636D64
	ldr r5, _02075B38 ; =0x6B677270
_020759C4:
	ldr r0, [r8]
	bl FUN_020751b8
	cmp r0, r6
	bhi _020759E8
	bhs _02075A0C
	cmp r0, r5
	addeq r0, r8, #0x10
	streq r0, [sb, #0x18]
	b _02075A14
_020759E8:
	cmp r0, r4
	bhi _020759FC
	addeq r0, r8, #0x10
	streq r0, [sb, #0x14]
	b _02075A14
_020759FC:
	cmp r0, fp
	addeq r0, r8, #0x10
	streq r0, [sb, #0x10]
	b _02075A14
_02075A0C:
	add r0, r8, #0x10
	str r0, [sb, #0x1c]
_02075A14:
	ldrb r1, [r8, #8]
	ldr r0, [r8, #0xc]
	sub r2, r1, #1
	add r0, r0, #0x10
	mvn r1, r2
	add r0, r0, r2
	and r0, r1, r0
	ldr r0, [r8, r0]!
	bl FUN_020751b8
	cmp r0, r7
	bne _020759C4
_02075A40:
	ldrb r1, [sl, #0x4b]
	mov r0, #0
	mov r4, r0
	cmp r1, #0
	beq _02075A60
	cmp r1, #1
	subeq r4, r4, #0x96
	b _02075A84
_02075A60:
	ldr r1, [sb, #0x10]
	cmp r1, #0
	ldr r1, [sb, #0x14]
	subeq r4, r4, #1
	cmp r1, #0
	ldr r1, [sb, #0x1c]
	mvneq r4, #0
	cmp r1, #0
	mvneq r4, #0
_02075A84:
	cmp r4, #0
	beq _02075AAC
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, sb
	bl FUN_020754fc
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02075AAC:
	ldr r1, _02075B3C ; =0x04000208
	ldr r2, _02075B40 ; =0x020BA644
	ldrh r3, [r1]
	strh r0, [r1]
	ldr r0, [r2]
	cmp r0, #0
	beq _02075AD8
_02075AC8:
	add r2, r0, #0x24
	ldr r0, [r0, #0x24]
	cmp r0, #0
	bne _02075AC8
_02075AD8:
	ldr r1, _02075B3C ; =0x04000208
	str sb, [r2]
	ldrh r0, [r1]
	strh r3, [r1]
	ldrb r0, [sl, #0x4b]
	cmp r0, #2
	bne _02075B14
	ldrh r1, [sl, #0x40]
	ldr r0, [sp]
	cmp r0, #0
	strh r1, [sb, #6]
	beq _02075B14
	ldrh r0, [sb, #4]
	ldr r1, [sp]
	bl FUN_02075b44
_02075B14:
	ldrh r0, [sb, #4]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02075B1C: .word 0x7377646C
_02075B20: .word 0x00000415
_02075B24: .word 0x69766177
_02075B28: .word 0x656F6420
_02075B2C: .word 0x77617669
_02075B30: .word 0x70726769
_02075B34: .word 0x70636D64
_02075B38: .word 0x6B677270
_02075B3C: .word 0x04000208
_02075B40: .word 0x020BA644

	arm_func_start FUN_02075b44
FUN_02075b44: ; 0x02075B44
	push {r4, r5, r6, lr}
	mov r5, r0
	mov r6, r1
	bl FUN_02075ec8
	movs r4, r0
	bne _02075B78
	mvn r4, #0x40
	mov r0, r4
	mov r1, r5
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02075b44
_02075B78:
	ldrb r0, [r4, #0xd]
	cmp r0, #2
	mvnne r0, #0x4c
	popne {r4, r5, r6, pc}
	ldrh r0, [r4, #6]
	bl FUN_02075e74
	cmp r0, #0
	bne _02075BB4
	mvn r4, #0x4b
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
_02075BB4:
	ldr r5, [r4, #0x20]
	cmp r5, #0
	bne _02075BD0
	mov r0, r4
	mov r1, #0
	bl FUN_02075bfc
	mov r5, r0
_02075BD0:
	cmp r6, #0
	beq _02075BEC
	ldr r1, _02075BF4 ; =0x020BAFD8
	ldr r0, _02075BF8 ; =0x020BBDD4
	str r4, [r1, #0xec0]
	str r6, [r1, #0xec4]
	bl FUN_02001ce0
_02075BEC:
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0_02075BF4: .word 0x020BAFD8
_02075BF8: .word 0x020BBDD4

	arm_func_start FUN_02075bfc
FUN_02075bfc: ; 0x02075BFC
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	mov sl, r0
	ldrh r0, [sl, #6]
	mov sb, r1
	bl FUN_02075e74
	movs r4, r0
	bne _02075C3C
	mvn r4, #0x4b
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	add sp, sp, #0x1c
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02075bfc
_02075C3C:
	mov r6, #0
	str r6, [sp, #8]
	ldr r0, [sl, #0x20]
	mov r5, sb
	str r0, [sp, #4]
	ldrsh r0, [sl, #8]
	mov r7, r6
	str r0, [sp, #0x14]
	cmp r0, #0
	ble _02075CF4
	add fp, sp, #4
_02075C68:
	lsl r1, r7, #0x10
	mov r0, sl
	asr r1, r1, #0x10
	bl FUN_02075d7c
	cmp r0, #0
	strne r5, [r0, #0x24]
	ldrne r2, [r4, #8]
	lslne r1, r7, #1
	ldrhne r1, [r2, r1]
	cmpne r1, #0
	beq _02075CE4
	add r2, r7, #1
	str r2, [sp, #0x18]
	ldr r2, [r0, #0x2c]
	ldr r0, [r0, #0x28]
	cmp sb, #0
	add r0, r2, r0
	lsl r8, r0, #2
	beq _02075CDC
	str fp, [sp]
	ldr r0, [r4, #8]
	ldr r3, [r4, #4]
	add r0, r0, r1
	ldr ip, [r0, #0x24]
	mov r1, r5
	mov r2, r8
	add r0, r4, #0x14
	add r3, ip, r3
	bl FUN_02075f1c
_02075CDC:
	add r6, r6, r8
	add r5, r5, r8
_02075CE4:
	ldrsh r0, [sl, #8]
	add r7, r7, #1
	cmp r7, r0
	blt _02075C68
_02075CF4:
	mov r0, r6
	str r6, [sl, #0x20]
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02075d04
FUN_02075d04: ; 0x02075D04
	push {r4, lr}
	ldr r2, _02075D74 ; =0x04000208
	mov r1, #0
	ldrh ip, [r2]
	mov r4, r0
	ldr r3, _02075D78 ; =0x020BA644
	strh r1, [r2]
	b _02075D28
	arm_func_end FUN_02075d04
_02075D24:
	add r3, r0, #0x24
_02075D28:
	ldr r0, [r3]
	cmp r0, #0
	beq _02075D40
	ldrh r1, [r0, #4]
	cmp r1, r4
	bne _02075D24
_02075D40:
	ldr r2, _02075D74 ; =0x04000208
	cmp r0, #0
	ldrheq r1, [r2]
	mvneq r0, #0x40
	strheq ip, [r2]
	popeq {r4, pc}
	ldr r1, [r0, #0x24]
	str r1, [r3]
	ldrh r1, [r2]
	strh ip, [r2]
	bl FUN_020754fc
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02075D74: .word 0x04000208
_02075D78: .word 0x020BA644

	arm_func_start FUN_02075d7c
FUN_02075d7c: ; 0x02075D7C
	ldr r2, [r0, #0x10]
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	ldrsh r0, [r0, #8]
	cmp r0, r1
	movle r0, #0
	bxle lr
	lsl r0, r1, #1
	ldrh r0, [r2, r0]
	cmp r0, #0
	moveq r0, #0
	addne r0, r2, r0
	bx lr
	arm_func_end FUN_02075d7c

	arm_func_start FUN_02075db4
FUN_02075db4: ; 0x02075DB4
	ldr r2, [r0, #0x14]
	cmp r2, #0
	moveq r0, #0
	bxeq lr
	ldrsh r0, [r0, #0xa]
	cmp r0, r1
	movle r0, #0
	bxle lr
	lsl r0, r1, #1
	ldrh r0, [r2, r0]
	cmp r0, #0
	moveq r0, #0
	addne r0, r2, r0
	bx lr
	arm_func_end FUN_02075db4

	arm_func_start FUN_02075dec
FUN_02075dec: ; 0x02075DEC
	push {r3, lr}
	ldrb lr, [r0, #2]
	cmp lr, #0
	moveq r0, #0
	popeq {r3, pc}
	cmp r1, #0
	addeq r1, r0, #0x60
	beq _02075E24
	ldrb ip, [r1, #1]
	sub r0, lr, #1
	cmp ip, r0
	movge r0, #0
	popge {r3, pc}
	add r1, r1, #0x30
	arm_func_end FUN_02075dec
_02075E24:
	sub r0, lr, #1
_02075E28:
	ldrb ip, [r1, #4]
	cmp r2, ip
	blo _02075E5C
	ldrb ip, [r1, #5]
	cmp r2, ip
	bhi _02075E5C
	ldrb ip, [r1, #8]
	cmp r3, ip
	blt _02075E5C
	ldrb ip, [r1, #9]
	cmp r3, ip
	movle r0, r1
	pople {r3, pc}
_02075E5C:
	ldrb ip, [r1, #1]
	cmp ip, r0
	addlt r1, r1, #0x30
	blt _02075E28
	mov r0, #0
	pop {r3, pc}

	arm_func_start FUN_02075e74
FUN_02075e74: ; 0x02075E74
	ldr r3, _02075EC0 ; =0x04000208
	mov r2, #0
	ldrh ip, [r3]
	ldr r1, _02075EC4 ; =0x020BAFD8
	strh r2, [r3]
	ldr r3, [r1, #0xde8]
	cmp r3, #0
	beq _02075EAC
	arm_func_end FUN_02075e74
_02075E94:
	ldrh r1, [r3]
	cmp r1, r0
	beq _02075EAC
	ldr r3, [r3, #0x5c]
	cmp r3, #0
	bne _02075E94
_02075EAC:
	ldr r2, _02075EC0 ; =0x04000208
	mov r0, r3
	ldrh r1, [r2]
	strh ip, [r2]
	bx lr
	.align 2, 0_02075EC0: .word 0x04000208
_02075EC4: .word 0x020BAFD8

	arm_func_start FUN_02075ec8
FUN_02075ec8: ; 0x02075EC8
	ldr r3, _02075F14 ; =0x04000208
	mov r2, #0
	ldrh ip, [r3]
	ldr r1, _02075F18 ; =0x020B9FD8
	strh r2, [r3]
	ldr r3, [r1, #0x66c]
	cmp r3, #0
	beq _02075F00
	arm_func_end FUN_02075ec8
_02075EE8:
	ldrh r1, [r3, #4]
	cmp r1, r0
	beq _02075F00
	ldr r3, [r3, #0x24]
	cmp r3, #0
	bne _02075EE8
_02075F00:
	ldr r2, _02075F14 ; =0x04000208
	mov r0, r3
	ldrh r1, [r2]
	strh ip, [r2]
	bx lr
	.align 2, 0_02075F14: .word 0x04000208
_02075F18: .word 0x020B9FD8

	arm_func_start FUN_02075f1c
FUN_02075f1c: ; 0x02075F1C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r7, [sp, #0x28]
	mov sb, r1
	mov r4, #0
	mov r8, r2
	mov r1, r3
	mov r2, r4
	mov sl, r0
	bl FUN_0200ded0
	str r8, [r7, #8]
	str r4, [r7, #0xc]
	cmp r8, #0
	ble _02075FD0
	ldr r5, _02075FD8 ; =0x04000006
	ldr fp, _02075FDC ; =0x020BAFD8
	mov r4, #2
	arm_func_end FUN_02075f1c
_02075F5C:
	ldr r6, [fp, #0xdec]
	cmp r8, r6
	movlt r6, r8
_02075F68:
	ldrh r0, [r5]
	cmp r0, #0xb4
	blt _02075F80
	mov r0, r4
	bl FUN_02001eb0
	b _02075F68
_02075F80:
	mov r0, sl
	mov r1, sb
	mov r2, r6
	bl FUN_0200df50
	mov r0, sl
	bl FUN_0200da40
	ldr r1, [r7, #0xc]
	mov r0, r7
	add r1, r1, r6
	str r1, [r7, #0xc]
	ldr r1, [r7, #4]
	sub r8, r8, r6
	add r1, r1, r6
	str r1, [r7, #4]
	add sb, sb, r6
	ldr r1, [fp, #0xdf4]
	ldr r2, [fp, #0xdf0]
	blx r2
	cmp r8, #0
	bgt _02075F5C
_02075FD0:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02075FD8: .word 0x04000006
_02075FDC: .word 0x020BAFD8

	arm_func_start FUN_02075fe0
FUN_02075fe0: ; 0x02075FE0
	mov r0, #0
	bx lr
	arm_func_end FUN_02075fe0

	arm_func_start FUN_02075fe8
FUN_02075fe8: ; 0x02075FE8
	push {r4, r5, r6, r7, r8, lr}
	mov r4, #4
	ldr r1, _020760E8 ; =0x736D646C
	ldr r2, _020760EC ; =0x00000415
	mov r3, r4
	mov r8, r0
	bl FUN_02075720
	cmp r0, #0
	poplt {r4, r5, r6, r7, r8, pc}
	add r7, r0, #0x10000
	mov r0, r7
	bl FUN_02076bec
	cmp r0, #0
	beq _0207603C
	sub r4, r4, #0x4d
	mov r0, r4
	mov r1, r7
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02075fe8
_0207603C:
	mov r6, #1
	mov r0, r8
	mov r1, r6
	bl FUN_02076a80
	movs r5, r0
	bne _02076070
	sub r4, r6, #0x44
	mov r0, r4
	mov r1, r8
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
_02076070:
	ldrb r0, [r5, #6]
	ldrb r1, [r5, #7]
	ldr r2, _020760F0 ; =0x7165736D
	bl FUN_02076c3c
	movs r4, r0
	subeq r0, r6, #0x81
	popeq {r4, r5, r6, r7, r8, pc}
	str r7, [r4, #0x28]
	mov r1, r5
	str r8, [r4, #0x1c]
	bl FUN_02076aec
	mov r1, #0
	ldr r0, _020760F4 ; =0x04000208
	strb r1, [r4, #0xa]
	ldrh r3, [r0]
	ldr r2, _020760F8 ; =0x020BA648
	strh r1, [r0]
	ldr r0, [r2]
	cmp r0, #0
	beq _020760D0
_020760C0:
	add r2, r0, #0xa4
	ldr r0, [r0, #0xa4]
	cmp r0, #0
	bne _020760C0
_020760D0:
	ldr r1, _020760F4 ; =0x04000208
	str r4, [r2]
	ldrh r0, [r1]
	strh r3, [r1]
	ldr r0, [r4, #0x28]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020760E8: .word 0x736D646C
_020760EC: .word 0x00000415
_020760F0: .word 0x7165736D
_020760F4: .word 0x04000208
_020760F8: .word 0x020BA648

	arm_func_start FUN_020760fc
FUN_020760fc: ; 0x020760FC
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_02076bec
	cmp r0, #0
	bne _0207612C
	mvn r4, #0x41
	mov r0, r4
	mov r1, r5
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020760fc
_0207612C:
	bl FUN_02076d74
	mov r0, r5
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02076138
FUN_02076138: ; 0x02076138
	push {r3, lr}
	bl FUN_02076bec
	cmp r0, #0
	mvneq r0, #0x41
	ldrsbne r0, [r0, #4]
	pop {r3, pc}
	arm_func_end FUN_02076138

	arm_func_start FUN_02076150
FUN_02076150: ; 0x02076150
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	mov r6, r1
	mov r5, r2
	mov r8, #0
	bl FUN_02076bec
	movs r4, r0
	bne _0207618C
	mvn r4, #0x41
	mov r0, r4
	mov r1, r7
	mov r2, r8
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_02076150
_0207618C:
	ldrsb r0, [r4, #1]
	cmp r0, #1
	bne _020761B4
	mvn r4, #0x3d
	mov r0, r4
	mov r1, r7
	mov r2, r8
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
_020761B4:
	ldrsb r0, [r4]
	cmp r0, #0
	moveq r5, #1
	cmp r5, #1
	bne _020761F0
	ldrsb r0, [r4, #4]
	cmp r0, #1
	bne _020761E0
	mov r0, r7
	mov r1, #0
	bl FUN_02076238
_020761E0:
	mov r0, r4
	bl FUN_0207680c
	cmp r0, #0
	poplt {r4, r5, r6, r7, r8, pc}
_020761F0:
	str r8, [r4, #0x68]
	strh r8, [r4, #0x74]
	strb r5, [r4, #2]
	bl FUN_02074f80
	cmp r0, #0
	ldrsbne r0, [r4, #9]
	mov r1, r8
	mov r2, r8
	cmpne r0, #0
	movne r5, #1
	moveq r5, #0
	mov r0, r4
	mov r3, r6
	strb r5, [r4, #8]
	bl FUN_02076328
	cmp r0, #0
	movge r0, r8
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02076238
FUN_02076238: ; 0x02076238
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_02076bec
	cmp r0, #0
	bne _0207626C
	mvn r4, #0x41
	mov r0, r4
	mov r1, r6
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02076238
_0207626C:
	mov r4, #0
	mov r1, r5
	mov r2, r4
	bl FUN_02076964
	mov r0, r4
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02076284
FUN_02076284: ; 0x02076284
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _020762DC ; =0x04000208
	mov r2, #0
	ldrh r4, [r3]
	ldr r1, _020762E0 ; =0x020B9FD8
	mov r7, r0
	strh r2, [r3]
	ldr r6, [r1, #0x670]
	cmp r6, #0
	beq _020762CC
	mov r5, r2
	arm_func_end FUN_02076284
_020762B0:
	mov r0, r6
	mov r1, r7
	mov r2, r5
	bl FUN_02076964
	ldr r6, [r6, #0xa4]
	cmp r6, #0
	bne _020762B0
_020762CC:
	ldr r1, _020762DC ; =0x04000208
	ldrh r0, [r1]
	strh r4, [r1]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020762DC: .word 0x04000208
_020762E0: .word 0x020B9FD8

	arm_func_start FUN_020762e4
FUN_020762e4: ; 0x020762E4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_02076bec
	cmp r0, #0
	bne _02076318
	mvn r4, #0x41
	mov r0, r4
	mov r1, r5
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020762e4
_02076318:
	mov r1, r4
	bl FUN_02076518
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02076328
FUN_02076328: ; 0x02076328
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r5, r3
	strh r1, [r4, #0x2c]
	strb r2, [r4, #0x14]
	ldrsh r2, [r5, #2]
	cmp r2, #0
	mvnlt r0, #0
	blt _02076360
	ldr r1, _020763B4 ; =0x020B9FD8
	mov r0, #0x3e8
	ldrsh r1, [r1, #0x28]
	smulbb r0, r2, r0
	bl FUN_0201f9bc
	arm_func_end FUN_02076328
_02076360:
	mov r2, #0
	strh r0, [r4, #0x1a]
	mov r0, r4
	mov r1, r5
	strb r2, [r4, #2]
	strb r2, [r4, #7]
	bl FUN_02076518
	ldrsb r0, [r4, #8]
	cmp r0, #0
	bne _020763A4
	ldrsb r0, [r4, #2]
	cmp r0, #0
	bne _0207639C
	ldr r0, [r4, #0x24]
	bl FUN_0207a1a4
_0207639C:
	mov r0, #1
	strb r0, [r4, #5]
_020763A4:
	mov r0, #1
	strb r0, [r4, #4]
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_020763B4: .word 0x020B9FD8

	arm_func_start FUN_020763b8
FUN_020763b8: ; 0x020763B8
	push {r4, r5, r6, r7, r8, lr}
	movs r4, r0
	beq _02076418
	ldr r7, _02076420 ; =0x04000208
	mov r8, #0
	mov r5, #1
	arm_func_end FUN_020763b8
_020763D0:
	ldrsb r0, [r4, #4]
	cmp r0, #1
	ldrsbeq r0, [r4, #6]
	cmpeq r0, #0
	ldrsbeq r0, [r4, #9]
	cmpeq r0, #1
	bne _0207640C
	strb r8, [r4, #5]
	ldrh r6, [r7]
	strh r8, [r7]
	ldr r0, [r4, #0x24]
	bl FUN_0207a120
	ldrh r0, [r7]
	strh r6, [r7]
	strb r5, [r4, #8]
_0207640C:
	ldr r4, [r4, #0xa4]
	cmp r4, #0
	bne _020763D0
_02076418:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02076420: .word 0x04000208

	arm_func_start FUN_02076424
FUN_02076424: ; 0x02076424
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	movs sl, r0
	mov sb, r1
	mov r8, r2
	mov r4, #0
	beq _0207650C
	mov r0, #0x3e8
	mul fp, sb, r0
	arm_func_end FUN_02076424
_02076444:
	ldrsb r0, [sl, #8]
	cmp r0, #1
	bne _02076500
	cmp r8, #1
	bne _02076470
	str r4, [sl, #0x68]
	strh r4, [sl, #0x74]
	strb r4, [sl, #6]
	ldr r0, [sl, #0x24]
	mov r1, r4
	bl FUN_0207a14c
_02076470:
	cmp sb, #0
	ldrsb r5, [sl, #0x98]
	moveq r7, r4
	beq _0207649C
	ldr r0, _02076514 ; =0x020B9FD8
	ldrsh r1, [r0, #0x28]
	mov r0, fp
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r7, r0, #0x10
	moveq r7, #1
_0207649C:
	lsl r1, r5, #0x10
	str r1, [sl, #0x70]
	cmp r7, #0
	mov r6, r7
	streq r1, [sl, #0x68]
	beq _020764D0
	ldr r0, [sl, #0x68]
	subs r0, r1, r0
	moveq r6, r4
	beq _020764D0
	mov r1, r7
	bl FUN_0201f9bc
	str r0, [sl, #0x6c]
_020764D0:
	strh r6, [sl, #0x74]
	cmp r7, #0
	ldrbne r0, [sl, #0xc]
	orrne r0, r0, #4
	strbne r0, [sl, #0xc]
	bne _020764F4
	ldr r0, [sl, #0x24]
	mov r1, r5
	bl FUN_0207a388
_020764F4:
	mov r0, #1
	strb r0, [sl, #5]
	strb r4, [sl, #8]
_02076500:
	ldr sl, [sl, #0xa4]
	cmp sl, #0
	bne _02076444
_0207650C:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02076514: .word 0x020B9FD8

	arm_func_start FUN_02076518
FUN_02076518: ; 0x02076518
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r4, r1
	ldrb r1, [r4]
	mov r5, r0
	mov r6, #0
	tst r1, #1
	beq _020765E4
	ldrsh r7, [r4, #4]
	ldrh r1, [r4, #6]
	cmp r7, #0
	moveq r7, #0x100
	cmp r1, #0
	moveq r8, #0
	beq _02076570
	mov r0, #0x3e8
	mul r0, r1, r0
	ldr r1, _02076804 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r8, r0, #0x10
	moveq r8, #1
	arm_func_end FUN_02076518
_02076570:
	lsl r1, r7, #0x10
	cmp r8, #0
	mov r7, r8
	str r1, [r5, #0x50]
	streq r1, [r5, #0x48]
	beq _020765A4
	ldr r0, [r5, #0x48]
	subs r0, r1, r0
	moveq r7, #0
	beq _020765A4
	mov r1, r8
	bl FUN_0201f9bc
	str r0, [r5, #0x4c]
_020765A4:
	strh r7, [r5, #0x54]
	cmp r8, #0
	bne _020765D8
	ldr r1, [r5, #0x48]
	ldrb r0, [r5, #0x17]
	asr r1, r1, #0x10
	smulbb r0, r1, r0
	lsrs r1, r0, #8
	ldr r0, _02076808 ; =0x03938700
	moveq r1, #1
	bl FUN_0201fbc8
	str r0, [r5, #0x44]
	b _020765E4
_020765D8:
	ldrb r0, [r5, #0xc]
	orr r0, r0, #1
	strb r0, [r5, #0xc]
_020765E4:
	ldrb r0, [r4]
	tst r0, #2
	beq _02076688
	ldrh r1, [r4, #0xa]
	ldrsh r7, [r4, #8]
	cmp r1, #0
	moveq r8, #0
	beq _02076624
	mov r0, #0x3e8
	mul r0, r1, r0
	ldr r1, _02076804 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r8, r0, #0x10
	moveq r8, #1
_02076624:
	lsl r1, r7, #0x10
	cmp r8, #0
	mov r7, r8
	str r1, [r5, #0x60]
	streq r1, [r5, #0x58]
	beq _02076658
	ldr r0, [r5, #0x58]
	subs r0, r1, r0
	moveq r7, #0
	beq _02076658
	mov r1, r8
	bl FUN_0201f9bc
	str r0, [r5, #0x5c]
_02076658:
	cmp r8, #0
	ldrbne r0, [r5, #0xc]
	strh r7, [r5, #0x64]
	orrne r0, r0, #2
	strbne r0, [r5, #0xc]
	bne _02076688
	ldr r1, [r5, #0x58]
	ldr r0, [r5, #0x24]
	asr r1, r1, #0x10
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	bl FUN_0207a2f4
_02076688:
	ldrb r0, [r4]
	tst r0, #4
	beq _02076744
	ldrsb r0, [r5, #8]
	ldrsh r7, [r4, #0xc]
	ldrsh r1, [r4, #0xe]
	cmp r0, #1
	strb r7, [r5, #0x98]
	moveq r7, #0
	moveq r1, r7
	lsl r0, r1, #0x10
	lsrs r1, r0, #0x10
	moveq sb, #0
	beq _020766E0
	mov r0, #0x3e8
	mul r0, r1, r0
	ldr r1, _02076804 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs sb, r0, #0x10
	moveq sb, #1
_020766E0:
	lsl r0, r7, #0x18
	asr r0, r0, #0x18
	lsl r1, r0, #0x10
	cmp sb, #0
	mov r8, sb
	str r1, [r5, #0x70]
	streq r1, [r5, #0x68]
	beq _0207671C
	ldr r0, [r5, #0x68]
	subs r0, r1, r0
	moveq r8, #0
	beq _0207671C
	mov r1, sb
	bl FUN_0201f9bc
	str r0, [r5, #0x6c]
_0207671C:
	cmp sb, #0
	ldrbne r0, [r5, #0xc]
	strh r8, [r5, #0x74]
	orrne r0, r0, #4
	strbne r0, [r5, #0xc]
	bne _02076744
	lsl r1, r7, #0x18
	ldr r0, [r5, #0x24]
	asr r1, r1, #0x18
	bl FUN_0207a388
_02076744:
	ldrb r0, [r4]
	tst r0, #8
	beq _020767F4
	ldrh r0, [r4, #0x10]
	ldrh r1, [r4, #0x12]
	lsl r0, r0, #0x18
	cmp r1, #0
	asr r4, r0, #0x18
	moveq r7, #0
	beq _0207678C
	mov r0, #0x3e8
	mul r0, r1, r0
	ldr r1, _02076804 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r7, r0, #0x10
	moveq r7, #1
_0207678C:
	lsl r1, r4, #0x10
	cmp r7, #0
	mov r4, r7
	str r1, [r5, #0x80]
	streq r1, [r5, #0x78]
	beq _020767C0
	ldr r0, [r5, #0x78]
	subs r0, r1, r0
	moveq r4, #0
	beq _020767C0
	mov r1, r7
	bl FUN_0201f9bc
	str r0, [r5, #0x7c]
_020767C0:
	cmp r7, #0
	ldrbne r0, [r5, #0xc]
	strh r4, [r5, #0x84]
	orrne r0, r0, #0x10
	strbne r0, [r5, #0xc]
	bne _020767F4
	ldr r1, [r5, #0x78]
	ldr r0, [r5, #0x24]
	asr r1, r1, #0x10
	lsl r1, r1, #0x18
	asr r1, r1, #0x18
	and r1, r1, #0xff
	bl FUN_0207a458
_020767F4:
	ldrsh r0, [r5, #0x1a]
	cmp r0, #0
	strhlt r6, [r5, #0x1a]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02076804: .word 0x020B9FD8
_02076808: .word 0x03938700

	arm_func_start FUN_0207680c
FUN_0207680c: ; 0x0207680C
	push {r3, r4, r5, r6, r7, lr}
	mov r5, r0
	mov r4, #0
	ldr r0, [r5, #0x24]
	ldr r2, [r5, #0x28]
	mov r1, r4
	bl FUN_0207a0f8
	ldrb r1, [r5, #0x13]
	ldr r0, [r5, #0x24]
	mov r2, r4
	bl FUN_0207a20c
	mov r3, #1
	ldrb r2, [r5, #0x15]
	ldr r0, _0207695C ; =0x020B9FD8
	ldrb r1, [r5, #0xf]
	str r4, [r5, #4]
	strb r4, [r5, #3]
	strb r3, [r5, #9]
	strb r4, [r5, #0xd]
	ldr r6, [r0, #0x2c]
	mov r3, #0x78
	str r6, [r5, #0x30]
	str r4, [r5, #0x34]
	str r4, [r5, #0x38]
	strb r3, [r5, #0x17]
	str r4, [r5, #0x3c]
	ldrsh r0, [r0, #0x28]
	lsl r2, r2, #3
	ldr r7, _02076960 ; =0x0007A120
	mul ip, r2, r0
	mov r6, #0x1000000
	mov r3, #0x7f0000
	mov r2, #0x400000
	mov r0, #0x7f
	str ip, [r5, #0x40]
	str r7, [r5, #0x44]
	strb r4, [r5, #0xc]
	str r6, [r5, #0x48]
	strh r4, [r5, #0x54]
	str r4, [r5, #0x58]
	strh r4, [r5, #0x64]
	str r3, [r5, #0x68]
	strh r4, [r5, #0x74]
	str r2, [r5, #0x78]
	strh r4, [r5, #0x84]
	strb r0, [r5, #0x98]
	cmp r1, #0
	add ip, r5, #0xa8
	ble _0207694C
	mov r1, r0
	mov r3, #1
	mov r2, r4
	mov r0, #4
	mov lr, #0xc4
	arm_func_end FUN_0207680c
_020768E4:
	ldr r6, [ip, #0x18]
	cmp r6, #0
	beq _0207692C
	strb r3, [ip, #2]
	strh r2, [ip, #0xa]
	ldr r6, [ip, #0x18]
	str r6, [ip, #0x1c]
	str r2, [ip, #0xc]
	str r2, [ip, #0x14]
	strb r1, [ip, #5]
	strb r0, [ip, #4]
	strb r2, [ip, #6]
	str r2, [ip, #0x20]
	ldr r7, [r5, #0x24]
	ldrb r6, [ip, #3]
	add r7, r7, #0x10
	mla r7, r6, lr, r7
	str r7, [ip, #0x54]
_0207692C:
	ldrb r7, [r5, #0xd]
	ldrb r6, [r5, #0xf]
	add r4, r4, #1
	add r7, r7, #1
	strb r7, [r5, #0xd]
	cmp r4, r6
	add ip, ip, #0x5c
	blt _020768E4
_0207694C:
	mov r0, #1
	strb r0, [r5]
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207695C: .word 0x020B9FD8
_02076960: .word 0x0007A120

	arm_func_start FUN_02076964
FUN_02076964: ; 0x02076964
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	ldrsb r0, [r6, #1]
	mov r5, r2
	mov r4, #0
	cmp r0, #1
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, pc}
	ldrsb r0, [r6, #4]
	cmp r0, #0
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r1, #0
	beq _02076A38
	ldr r0, [r6, #0x68]
	asrs r0, r0, #0x10
	beq _02076A38
	mov r5, #1
	mov r7, r4
	strb r5, [r6, #7]
	strb r7, [r6, #0x98]
	cmp r1, #0
	beq _020769E0
	mov r0, #0x3e8
	mul r0, r1, r0
	ldr r1, _02076A78 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r7, r0, #0x10
	moveq r7, r5
	arm_func_end FUN_02076964
_020769E0:
	cmp r7, #0
	mov r5, r7
	str r4, [r6, #0x70]
	streq r4, [r6, #0x68]
	beq _02076A10
	ldr r0, [r6, #0x68]
	rsbs r0, r0, #0
	moveq r5, r4
	beq _02076A10
	mov r1, r7
	bl FUN_0201f9bc
	str r0, [r6, #0x6c]
_02076A10:
	cmp r7, #0
	ldrbne r0, [r6, #0xc]
	strh r5, [r6, #0x74]
	orrne r0, r0, #4
	strbne r0, [r6, #0xc]
	bne _02076A70
	ldr r0, [r6, #0x24]
	mov r1, #0
	bl FUN_0207a388
	b _02076A70
_02076A38:
	ldr r0, _02076A7C ; =0x04000208
	str r4, [r6, #4]
	strb r4, [r6, #8]
	ldrh r7, [r0]
	strh r4, [r0]
	ldr r0, [r6, #0x24]
	bl FUN_0207a120
	cmp r5, #1
	bne _02076A64
	ldr r0, [r6, #0x24]
	bl FUN_0207a05c
_02076A64:
	ldr r1, _02076A7C ; =0x04000208
	ldrh r0, [r1]
	strh r7, [r1]
_02076A70:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02076A78: .word 0x020B9FD8
_02076A7C: .word 0x04000208

	arm_func_start FUN_02076a80
FUN_02076a80: ; 0x02076A80
	push {r3, r4, r5, r6, r7, lr}
	ldr r6, _02076AE4 ; =0x736F6E67
	ldr r7, _02076AE8 ; =0x656F6420
	mov r5, r1
	add r4, r0, #0x40
	arm_func_end FUN_02076a80
_02076A94:
	ldr r0, [r4]
	bl FUN_020751b8
	cmp r0, r7
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	cmp r0, r6
	ldrsheq r1, [r4, #0x10]
	addeq r0, r4, #0x10
	cmpeq r1, r5
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r1, [r4, #8]
	ldr r0, [r4, #0xc]
	sub r2, r1, #1
	add r0, r0, #0x10
	mvn r1, r2
	add r0, r0, r2
	and r0, r1, r0
	add r4, r4, r0
	b _02076A94
_02076AE0:
	.byte 0xF8, 0x80, 0xBD, 0xE8
_02076AE4: .word 0x736F6E67
_02076AE8: .word 0x656F6420

	arm_func_start FUN_02076aec
FUN_02076aec: ; 0x02076AEC
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r7, r0
	mov r6, r1
	ldrb r1, [r6, #6]
	ldrb r0, [r7, #0xe]
	cmp r1, r0
	mvnhi r0, #0
	pophi {r4, r5, r6, r7, r8, sb, sl, pc}
	ldrh r0, [r6, #2]
	add r4, r6, #0x30
	add r5, r7, #0xa8
	asr r0, r0, #3
	strb r0, [r7, #0x15]
	ldrb r0, [r6, #4]
	strb r0, [r7, #0x11]
	ldrb r0, [r6, #6]
	strb r0, [r7, #0xf]
	ldrb r0, [r6, #7]
	strb r0, [r7, #0x10]
	ldrb r0, [r6, #0x1b]
	strb r0, [r7, #0x12]
	ldrb r0, [r6, #0x19]
	strb r0, [r7, #0x13]
	ldrb r0, [r6, #0x1a]
	strb r0, [r7, #0x14]
	ldrb r0, [r6, #0x18]
	tst r0, #0x80
	movne r0, #1
	moveq r0, #0
	strb r0, [r7, #0xb]
	ldr r0, [r6, #0x30]
	bl FUN_020751b8
	ldr sb, _02076BE0 ; =0x74726B20
	ldr sl, _02076BE4 ; =0x626E6B6C
	ldr r8, _02076BE8 ; =0x656F6320
	b _02076BCC
	arm_func_end FUN_02076aec
_02076B7C:
	cmp r0, sl
	beq _02076BA8
	cmp r0, sb
	bne _02076BA8
	add r0, r4, #0x14
	str r0, [r5, #0x18]
	ldrb r0, [r4, #0x10]
	strh r0, [r5]
	ldrb r0, [r4, #0x11]
	strb r0, [r5, #3]
	add r5, r5, #0x5c
_02076BA8:
	ldrb r1, [r4, #8]
	ldr r0, [r4, #0xc]
	sub r2, r1, #1
	add r0, r0, #0x10
	mvn r1, r2
	add r0, r0, r2
	and r0, r1, r0
	ldr r0, [r4, r0]!
	bl FUN_020751b8
_02076BCC:
	cmp r0, r8
	bne _02076B7C
	str r6, [r7, #0x20]
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02076BE0: .word 0x74726B20
_02076BE4: .word 0x626E6B6C
_02076BE8: .word 0x656F6320

	arm_func_start FUN_02076bec
FUN_02076bec: ; 0x02076BEC
	ldr r3, _02076C34 ; =0x04000208
	ldr r1, _02076C38 ; =0x020B9FD8
	ldrh ip, [r3]
	mov r2, #0
	strh r2, [r3]
	ldr r3, [r1, #0x670]
	b _02076C0C
	arm_func_end FUN_02076bec
_02076C08:
	ldr r3, [r3, #0xa4]
_02076C0C:
	cmp r3, #0
	beq _02076C20
	ldr r1, [r3, #0x28]
	cmp r1, r0
	bne _02076C08
_02076C20:
	ldr r2, _02076C34 ; =0x04000208
	mov r0, r3
	ldrh r1, [r2]
	strh ip, [r2]
	bx lr
	.align 2, 0_02076C34: .word 0x04000208
_02076C38: .word 0x020B9FD8

	arm_func_start FUN_02076c3c
FUN_02076c3c: ; 0x02076C3C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov sb, r0
	mov r0, #0x5c
	mul r0, sb, r0
	mov r5, #0x10
	mov r8, r1
	mov r1, r5
	add r0, r0, #0xa8
	mov r7, r2
	bl FUN_020752b0
	movs r6, r0
	bne _02076C88
	mov r4, #0
	mov r1, r4
	mov r2, r4
	sub r0, r5, #0x94
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_02076c3c
_02076C88:
	mov r5, #0
	str r5, [r6]
	str r5, [r6, #4]
	str r5, [r6, #8]
	strb r5, [r6, #0x16]
	str r5, [r6, #0x30]
	str r5, [r6, #0x28]
	strh r5, [r6, #0x2c]
	mov r4, #6
	strb r4, [r6, #0x15]
	strb r5, [r6, #0xd]
	and r0, sb, #0xff
	strb r0, [r6, #0xe]
	strb r0, [r6, #0xf]
	strb r8, [r6, #0x10]
	strb r5, [r6, #0x11]
	strb r5, [r6, #0x12]
	strb r5, [r6, #0x13]
	str r5, [r6, #0x1c]
	ldr r1, _02076D64 ; =0x76656400
	and r2, r7, #0xff
	mov r0, r8
	str r5, [r6, #0x20]
	orr r1, r2, r1
	bl FUN_02079f20
	str r0, [r6, #0x24]
	cmp r0, #0
	bne _02076D18
	mov r0, r6
	bl FUN_020754fc
	mov r1, r5
	mov r2, r5
	sub r0, r4, #0x8c
	bl FUN_02075144
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_02076D18:
	mov r0, #0x78
	strb r0, [r6, #0x17]
	str r5, [r6, #0x3c]
	ldr r0, _02076D68 ; =0x020B9FD8
	ldrb r2, [r6, #0x15]
	ldrsh r0, [r0, #0x28]
	ldr r1, _02076D6C ; =0x0007A120
	lsl r2, r2, #3
	mul r0, r2, r0
	str r0, [r6, #0x40]
	ldr r0, _02076D70 ; =FUN_02075fe0
	str r1, [r6, #0x44]
	str r0, [r6, #0x9c]
	str r5, [r6, #0xa0]
	mov r0, r6
	str r5, [r6, #0xa4]
	bl FUN_02076dfc
	mov r0, r6
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02076D64: .word 0x76656400
_02076D68: .word 0x020B9FD8
_02076D6C: .word 0x0007A120
_02076D70: .word FUN_02075fe0

	arm_func_start FUN_02076d74
FUN_02076d74: ; 0x02076D74
	push {r4, lr}
	mov r4, r0
	ldrsb r1, [r4, #4]
	cmp r1, #1
	bne _02076D94
	mov r1, #0
	mov r2, r1
	bl FUN_02076964
	arm_func_end FUN_02076d74
_02076D94:
	ldr r1, _02076DF4 ; =0x04000208
	mov r0, #0
	ldrh r3, [r1]
	ldr r2, _02076DF8 ; =0x020BA648
	strh r0, [r1]
	b _02076DB0
_02076DAC:
	add r2, r0, #0xa4
_02076DB0:
	ldr r0, [r2]
	cmp r0, #0
	beq _02076DC4
	cmp r0, r4
	bne _02076DAC
_02076DC4:
	cmp r0, #0
	ldrne r0, [r4, #0xa4]
	ldr r1, _02076DF4 ; =0x04000208
	strne r0, [r2]
	ldrh r0, [r1]
	strh r3, [r1]
	ldr r0, [r4, #0x24]
	bl FUN_02079fec
	mov r0, r4
	bl FUN_020754fc
	mov r0, #0
	pop {r4, pc}
	.align 2, 0_02076DF4: .word 0x04000208
_02076DF8: .word 0x020BA648

	arm_func_start FUN_02076dfc
FUN_02076dfc: ; 0x02076DFC
	ldrb r1, [r0, #0xf]
	add r3, r0, #0xa8
	mov ip, #0
	cmp r1, #0
	bxle lr
	mov r2, ip
	arm_func_end FUN_02076dfc
_02076E14:
	strb r2, [r3, #2]
	strh ip, [r3]
	strb ip, [r3, #3]
	strh r2, [r3, #0xa]
	str r2, [r3, #0x18]
	str r2, [r3, #0x1c]
	str r2, [r3, #0x20]
	str r2, [r3, #0x54]
	ldrb r1, [r0, #0xf]
	add ip, ip, #1
	add r3, r3, #0x5c
	cmp ip, r1
	blt _02076E14
	bx lr

	arm_func_start FUN_02076e4c
FUN_02076e4c: ; 0x02076E4C
	push {r4, r5, r6, lr}
	ldr r2, _02076EC0 ; =0x020B9FD8
	mov r4, #0
	mvn r3, #0
	mov r0, #0xc
	arm_func_end FUN_02076e4c
_02076E60:
	mla r1, r4, r0, r2
	add r4, r4, #1
	str r3, [r1, #0x5c]
	cmp r4, #0x80
	blt _02076E60
	mov r0, #0xc
	ldr r4, _02076EC4 ; =0x020BA030
	ldr r3, _02076EC0 ; =0x020B9FD8
	mov r6, #0
	mov r1, r0
_02076E88:
	add ip, r6, #1
	mul lr, ip, r0
	mla r2, r6, r1, r3
	add r5, r4, lr
	mov r6, ip
	str r5, [r2, #0x60]
	cmp ip, #0x7f
	blt _02076E88
	ldr r1, _02076EC8 ; =0x020BA038
	mov r2, #0
	ldr r0, _02076EC0 ; =0x020B9FD8
	str r2, [r1, lr]
	str r4, [r0, #0x658]
	pop {r4, r5, r6, pc}
	.align 2, 0_02076EC0: .word 0x020B9FD8
_02076EC4: .word 0x020BA030
_02076EC8: .word 0x020BA038

	arm_func_start FUN_02076ecc
FUN_02076ecc: ; 0x02076ECC
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r2, _02076FB8 ; =0x020B9FD8
	mov sb, r0
	ldrsb r0, [r2]
	mov r8, r1
	mov r1, #0
	cmp r0, #0
	bne _02076F04
	mvn r4, #0xc0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02076ecc
_02076F04:
	ldr r4, [r2, #0x674]
	ldr r0, _02076FBC ; =0x04000208
	str r1, [r2, #0x674]
	ldrh r5, [r0]
	cmp r4, #0
	strh r1, [r0]
	beq _02076F34
_02076F20:
	mov r0, r4
	ldr r4, [r4, #0xa4]
	bl FUN_02076d74
	cmp r4, #0
	bne _02076F20
_02076F34:
	ldr r1, _02076FBC ; =0x04000208
	mov r6, #0
	ldrh r0, [r1]
	ldr r0, _02076FB8 ; =0x020B9FD8
	mov r4, r6
	strh r5, [r1]
	strb sb, [r0, #0x42]
	strb r8, [r0, #0x43]
	ldrh r7, [r1]
	cmp sb, #0
	ldr r5, _02076FC0 ; =0x020BA64C
	strh r6, [r1]
	ble _02076FA4
	lsl r0, r8, #0x10
	ldr r8, _02076FC4 ; =0x71657365
	lsr sl, r0, #0x10
_02076F74:
	mov r0, sl
	mov r1, sl
	mov r2, r8
	bl FUN_02076c3c
	cmp r0, #0
	mvneq r6, #0x83
	beq _02076FA4
	add r4, r4, #1
	str r0, [r5]
	cmp r4, sb
	add r5, r0, #0xa4
	blt _02076F74
_02076FA4:
	ldr r2, _02076FBC ; =0x04000208
	mov r0, r6
	ldrh r1, [r2]
	strh r7, [r2]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02076FB8: .word 0x020B9FD8
_02076FBC: .word 0x04000208
_02076FC0: .word 0x020BA64C
_02076FC4: .word 0x71657365

	arm_func_start FUN_02076fc8
FUN_02076fc8: ; 0x02076FC8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r6, #4
	ldr r1, _02077164 ; =0x7365646C
	ldr r2, _02077168 ; =0x00000415
	mov r3, r6
	mov r5, r0
	mov r7, #0
	bl FUN_02075720
	movs r4, r0
	popmi {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	lsl r0, r4, #0x10
	lsr r0, r0, #0x10
	bl FUN_0207782c
	cmp r0, #0
	beq _02077020
	sub r5, r6, #0x4e
	mov r0, r5
	mov r1, r4
	mov r2, r7
	bl FUN_02075144
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02076fc8
_02077020:
	mov r6, #0x10
	ldr r2, _0207716C ; =0x66646573
	mov r1, r6
	mov r0, #0x1c
	bl FUN_020752b0
	movs sl, r0
	bne _02077058
	sub r5, r6, #0x90
	mov r0, r5
	mov r1, r4
	mov r2, r7
	bl FUN_02075144
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02077058:
	str r5, [sl]
	ldrsh r1, [r5, #0x30]
	mov r0, #1
	strh r1, [sl, #4]
	strh r4, [sl, #6]
	str r7, [sl, #8]
	str r7, [sl, #0xc]
	str r7, [sl, #0x10]
	str r7, [sl, #0x14]
	strb r0, [sl, #0x18]
	ldrb r0, [r5, #0x35]
	cmp r0, #0
	beq _0207711C
	add r8, r5, #0x40
	ldr fp, _02077170 ; =0x73657120
	ldr r6, _02077174 ; =0x656F6420
	ldr r5, _02077178 ; =0x626E6B6C
	ldr r4, _0207717C ; =0x6D63726C
_020770A0:
	ldr r0, [r8]
	mov sb, r7
	bl FUN_020751b8
	cmp r0, r6
	bhi _020770C8
	bhs _020770EC
	cmp r0, r5
	addeq r0, r8, #0x10
	streq r0, [sl, #0x14]
	b _020770F0
_020770C8:
	cmp r0, r4
	bhi _020770DC
	addeq r0, r8, #0x10
	streq r0, [sl, #0x10]
	b _020770F0
_020770DC:
	cmp r0, fp
	addeq r0, r8, #0x10
	streq r0, [sl, #0xc]
	b _020770F0
_020770EC:
	mov sb, #1
_020770F0:
	cmp sb, #1
	beq _0207711C
	ldrb r1, [r8, #8]
	ldr r0, [r8, #0xc]
	sub r2, r1, #1
	add r0, r0, #0x10
	mvn r1, r2
	add r0, r0, r2
	and r0, r1, r0
	add r8, r8, r0
	b _020770A0
_0207711C:
	ldr r1, _02077180 ; =0x04000208
	mov r0, #0
	ldrh r3, [r1]
	ldr r2, _02077184 ; =0x020BA650
	strh r0, [r1]
	ldr r0, [r2]
	cmp r0, #0
	beq _0207714C
_0207713C:
	add r2, r0, #8
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _0207713C
_0207714C:
	ldr r1, _02077180 ; =0x04000208
	str sl, [r2]
	ldrh r0, [r1]
	strh r3, [r1]
	ldrh r0, [sl, #6]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02077164: .word 0x7365646C
_02077168: .word 0x00000415
_0207716C: .word 0x66646573
_02077170: .word 0x73657120
_02077174: .word 0x656F6420
_02077178: .word 0x626E6B6C
_0207717C: .word 0x6D63726C
_02077180: .word 0x04000208
_02077184: .word 0x020BA650

	arm_func_start FUN_02077188
FUN_02077188: ; 0x02077188
	push {r3, r4, r5, lr}
	mov r4, r0
	bl FUN_02077a24
	ldr r1, _02077218 ; =0x04000208
	mov r0, #0
	ldrh r3, [r1]
	ldr r5, _0207721C ; =0x020BA650
	strh r0, [r1]
	b _020771B0
	arm_func_end FUN_02077188
_020771AC:
	add r5, r0, #8
_020771B0:
	ldr r0, [r5]
	cmp r0, #0
	beq _020771C8
	ldrh r1, [r0, #6]
	cmp r1, r4
	bne _020771AC
_020771C8:
	cmp r0, #0
	bne _020771F8
	ldr ip, _02077218 ; =0x04000208
	mvn r5, #0x43
	ldrh r0, [ip]
	mov r1, r4
	mov r2, #0
	mov r0, r5
	strh r3, [ip]
	bl FUN_02075144
	mov r0, r5
	pop {r3, r4, r5, pc}
_020771F8:
	ldr r1, [r0, #8]
	ldr r2, _02077218 ; =0x04000208
	str r1, [r5]
	ldrh r1, [r2]
	strh r3, [r2]
	bl FUN_020754fc
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_02077218: .word 0x04000208
_0207721C: .word 0x020BA650

	arm_func_start FUN_02077220
FUN_02077220: ; 0x02077220
	cmn r0, #1
	beq _02077298
	ldr r2, _020772E4 ; =0x020B9FD8
	ldr r3, [r2, #0x674]
	cmp r3, #0
	beq _020772DC
	arm_func_end FUN_02077220
_02077238:
	ldrsb r2, [r3, #4]
	cmp r2, #1
	ldreq r2, [r3, #0x28]
	cmpeq r2, r0
	bne _02077288
	cmp r1, #0
	bne _02077268
	ldrsb r0, [r3, #6]
	cmp r0, #0
	moveq r0, #1
	movne r0, #2
	bx lr
_02077268:
	ldrh r2, [r3, #0x2c]
	cmp r2, r1
	bne _02077288
	ldrsb r0, [r3, #6]
	cmp r0, #0
	moveq r0, #1
	movne r0, #2
	bx lr
_02077288:
	ldr r3, [r3, #0xa4]
	cmp r3, #0
	bne _02077238
	b _020772DC
_02077298:
	ldr r0, _020772E4 ; =0x020B9FD8
	ldr r2, [r0, #0x674]
	cmp r2, #0
	beq _020772DC
_020772A8:
	ldrsb r0, [r2, #4]
	cmp r0, #1
	ldrheq r0, [r2, #0x2c]
	cmpeq r0, r1
	bne _020772D0
	ldrsb r0, [r2, #6]
	cmp r0, #0
	moveq r0, #1
	movne r0, #2
	bx lr
_020772D0:
	ldr r2, [r2, #0xa4]
	cmp r2, #0
	bne _020772A8
_020772DC:
	mov r0, #0
	bx lr
	.align 2, 0_020772E4: .word 0x020B9FD8

	arm_func_start FUN_020772e8
FUN_020772e8: ; 0x020772E8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	lsl r0, sl, #0x10
	lsr r5, r0, #0x10
	mov r0, r5
	mov fp, r1
	mov sb, r2
	bl FUN_0207782c
	movs r4, r0
	bne _0207732C
	mvn r4, #0x43
	mov r0, r4
	mov r1, r5
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_020772e8
_0207732C:
	asr r0, sl, #0x10
	lsl r1, r0, #0x10
	ldr r5, [r4]
	ldr r2, [r4, #0xc]
	mov r0, r5
	asr r1, r1, #0x10
	bl FUN_0207749c
	movs r6, r0
	bne _0207736C
	mvn r4, #0x44
	mov r0, r4
	mov r1, sl
	mov r2, #0
	bl FUN_0207517c
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_0207736C:
	ldrb r0, [r6, #0x18]
	ldrb r1, [sb]
	ldrb r8, [r6, #0x1a]
	tst r0, #1
	moveq r0, #1
	movne r0, #0
	lsl r0, r0, #0x18
	asr r2, r0, #0x18
	tst r1, #0x40
	bne _020773B8
	cmp r8, #0
	ldrb r1, [r6, #0x1c]
	bne _020773AC
	mov r0, sl
	bl FUN_020774e4
	b _020773C4
_020773AC:
	mov r0, r8
	bl FUN_020775ec
	b _020773C4
_020773B8:
	mov r0, fp
	mov r1, r2
	bl FUN_020776f4
_020773C4:
	and r0, r0, #0xff
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r0, [r6, #0x1b]
	ldrb r1, [r6, #0x19]
	ldrb r2, [r6, #0x1c]
	bl FUN_020777b0
	movs r7, r0
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r1, [r7, #4]
	cmp r1, #1
	bne _02077408
	mov r1, #0
	mov r2, #1
	bl FUN_02076964
_02077408:
	str sl, [r7, #0x28]
	str r5, [r7, #0x1c]
	mov r0, r7
	mov r5, #0
	bl FUN_02076dfc
	mov r0, r7
	mov r1, r6
	bl FUN_02076aec
	movs r1, r0
	bpl _02077448
	mvn r4, #0x4e
	mov r0, r4
	mov r2, sl
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02077448:
	mov r0, r7
	bl FUN_0207680c
	str r5, [r7, #0x68]
	strh r5, [r7, #0x74]
	mov r6, #1
	strb r6, [r7, #2]
	ldrsb r0, [r4, #0x18]
	strb r0, [r7, #9]
	bl FUN_02074f80
	ldrsb r3, [r4, #0x18]
	mov r1, fp
	mov r2, r8
	and r0, r3, r0
	strb r0, [r7, #8]
	mov r0, r7
	mov r3, sb
	strb r6, [r7, #0xa]
	bl FUN_02076328
	cmp r0, #0
	movge r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0207749c
FUN_0207749c: ; 0x0207749C
	cmp r1, #0
	movlt r0, #0
	bxlt lr
	ldrsh r3, [r0, #0x30]
	cmp r3, r1
	movle r0, #0
	bxle lr
	ldrb r3, [r0, #0x35]
	cmp r3, #0
	moveq r2, r0
	addeq r3, r0, #0x40
	movne r3, r2
	lsl r0, r1, #1
	ldrh r0, [r3, r0]
	cmp r0, #0
	moveq r0, #0
	addne r0, r2, r0
	bx lr
	arm_func_end FUN_0207749c

	arm_func_start FUN_020774e4
FUN_020774e4: ; 0x020774E4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	movs sb, r1
	mov r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r3, _020775E4 ; =0x04000208
	cmp r2, #1
	ldrh r1, [r3]
	str r1, [sp]
	strh r0, [r3]
	bne _02077598
	ldr r4, _020775E8 ; =0x020B9FD8
	mov fp, r0
	mov r6, r0
	mvn r5, #0x80000000
	arm_func_end FUN_020774e4
_02077520:
	ldr r1, [r4, #0x674]
	mov r7, r6
	mov r2, r5
	cmp r1, #0
	beq _02077568
_02077534:
	ldrsb r0, [r1, #4]
	cmp r0, #1
	ldreq r0, [r1, #0x28]
	cmpeq r0, sl
	bne _0207755C
	ldr r0, [r1, #0x30]
	add r7, r7, #1
	cmp r2, r0
	movhi r2, r0
	movhi r8, r1
_0207755C:
	ldr r1, [r1, #0xa4]
	cmp r1, #0
	bne _02077534
_02077568:
	cmp r7, sb
	blt _02077588
	cmp r8, #0
	beq _02077588
	mov r0, r8
	mov r1, fp
	mov r2, #1
	bl FUN_02076964
_02077588:
	cmp r7, sb
	bgt _02077520
	mov r0, #0
	b _020775D0
_02077598:
	ldr r1, _020775E8 ; =0x020B9FD8
	ldr r2, [r1, #0x674]
	cmp r2, #0
	beq _020775C8
_020775A8:
	ldrsb r1, [r2, #4]
	cmp r1, #1
	ldreq r1, [r2, #0x28]
	ldr r2, [r2, #0xa4]
	cmpeq r1, sl
	addeq r0, r0, #1
	cmp r2, #0
	bne _020775A8
_020775C8:
	cmp r0, sb
	movlt r0, #0
_020775D0:
	ldr r2, _020775E4 ; =0x04000208
	ldrh r1, [r2]
	ldr r1, [sp]
	strh r1, [r2]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020775E4: .word 0x04000208
_020775E8: .word 0x020B9FD8

	arm_func_start FUN_020775ec
FUN_020775ec: ; 0x020775EC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	movs sb, r1
	mov r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r3, _020776EC ; =0x04000208
	cmp r2, #1
	ldrh r1, [r3]
	str r1, [sp]
	strh r0, [r3]
	bne _020776A0
	ldr r4, _020776F0 ; =0x020B9FD8
	mov fp, r0
	mov r6, r0
	mvn r5, #0x80000000
	arm_func_end FUN_020775ec
_02077628:
	ldr r1, [r4, #0x674]
	mov r7, r6
	mov r2, r5
	cmp r1, #0
	beq _02077670
_0207763C:
	ldrsb r0, [r1, #4]
	cmp r0, #1
	ldrbeq r0, [r1, #0x14]
	cmpeq r0, sl
	bne _02077664
	ldr r0, [r1, #0x30]
	add r7, r7, #1
	cmp r2, r0
	movhi r2, r0
	movhi r8, r1
_02077664:
	ldr r1, [r1, #0xa4]
	cmp r1, #0
	bne _0207763C
_02077670:
	cmp r7, sb
	blt _02077690
	cmp r8, #0
	beq _02077690
	mov r0, r8
	mov r1, fp
	mov r2, #1
	bl FUN_02076964
_02077690:
	cmp r7, sb
	bgt _02077628
	mov r0, #0
	b _020776D8
_020776A0:
	ldr r1, _020776F0 ; =0x020B9FD8
	ldr r2, [r1, #0x674]
	cmp r2, #0
	beq _020776D0
_020776B0:
	ldrsb r1, [r2, #4]
	cmp r1, #1
	ldrbeq r1, [r2, #0x14]
	ldr r2, [r2, #0xa4]
	cmpeq r1, sl
	addeq r0, r0, #1
	cmp r2, #0
	bne _020776B0
_020776D0:
	cmp r0, sb
	movlt r0, #0
_020776D8:
	ldr r2, _020776EC ; =0x04000208
	ldrh r1, [r2]
	ldr r1, [sp]
	strh r1, [r2]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020776EC: .word 0x04000208
_020776F0: .word 0x020B9FD8

	arm_func_start FUN_020776f4
FUN_020776f4: ; 0x020776F4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r2, _020777A8 ; =0x04000208
	mov r4, #0
	ldrh r6, [r2]
	mov r7, r0
	cmp r1, #1
	strh r4, [r2]
	bne _02077760
	ldr r0, _020777AC ; =0x020B9FD8
	ldr r5, [r0, #0x674]
	cmp r5, #0
	beq _02077794
	mov sb, r4
	mov r8, #1
	arm_func_end FUN_020776f4
_0207772C:
	ldrsb r0, [r5, #4]
	cmp r0, #1
	ldrheq r0, [r5, #0x2c]
	cmpeq r0, r7
	bne _02077750
	mov r0, r5
	mov r1, sb
	mov r2, r8
	bl FUN_02076964
_02077750:
	ldr r5, [r5, #0xa4]
	cmp r5, #0
	bne _0207772C
	b _02077794
_02077760:
	ldr r0, _020777AC ; =0x020B9FD8
	ldr r1, [r0, #0x674]
	cmp r1, #0
	beq _02077794
_02077770:
	ldrsb r0, [r1, #4]
	cmp r0, #1
	ldrheq r0, [r1, #0x2c]
	cmpeq r0, r7
	moveq r4, #1
	beq _02077794
	ldr r1, [r1, #0xa4]
	cmp r1, #0
	bne _02077770
_02077794:
	ldr r2, _020777A8 ; =0x04000208
	mov r0, r4
	ldrh r1, [r2]
	strh r6, [r2]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020777A8: .word 0x04000208
_020777AC: .word 0x020B9FD8

	arm_func_start FUN_020777b0
FUN_020777b0: ; 0x020777B0
	push {r3, lr}
	ldr r2, _02077824 ; =0x04000208
	mov r3, #0
	ldrh lr, [r2]
	ldr r1, _02077828 ; =0x020B9FD8
	sub ip, r3, #1
	strh r3, [r2]
	ldr r2, [r1, #0x674]
	cmp r2, #0
	beq _02077810
	arm_func_end FUN_020777b0
_020777D8:
	ldrsb r1, [r2, #4]
	cmp r1, #0
	moveq r3, r2
	beq _02077810
	ldrb r1, [r2, #0x12]
	cmp r1, r0
	blo _02077804
	ldr r1, [r2, #0x30]
	cmp ip, r1
	movhi ip, r1
	movhi r3, r2
_02077804:
	ldr r2, [r2, #0xa4]
	cmp r2, #0
	bne _020777D8
_02077810:
	ldr r2, _02077824 ; =0x04000208
	mov r0, r3
	ldrh r1, [r2]
	strh lr, [r2]
	pop {r3, pc}
	.align 2, 0_02077824: .word 0x04000208
_02077828: .word 0x020B9FD8

	arm_func_start FUN_0207782c
FUN_0207782c: ; 0x0207782C
	ldr r3, _02077874 ; =0x04000208
	ldr r1, _02077878 ; =0x020B9FD8
	ldrh ip, [r3]
	mov r2, #0
	strh r2, [r3]
	ldr r3, [r1, #0x678]
	b _0207784C
	arm_func_end FUN_0207782c
_02077848:
	ldr r3, [r3, #8]
_0207784C:
	cmp r3, #0
	beq _02077860
	ldrh r1, [r3, #6]
	cmp r1, r0
	bne _02077848
_02077860:
	ldr r2, _02077874 ; =0x04000208
	mov r0, r3
	ldrh r1, [r2]
	strh ip, [r2]
	bx lr
	.align 2, 0_02077874: .word 0x04000208
_02077878: .word 0x020B9FD8

	arm_func_start FUN_0207787c
FUN_0207787c: ; 0x0207787C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	cmn r6, #1
	ldr r7, _020779B0 ; =0x04000208
	mov r1, #0
	beq _02077954
	cmp r5, #0
	bne _020778FC
	ldrh r8, [r7]
	ldr r0, _020779B4 ; =0x020B9FD8
	strh r1, [r7]
	ldr r5, [r0, #0x674]
	cmp r5, #0
	beq _020778F0
	mov sb, #1
	arm_func_end FUN_0207787c
_020778C0:
	ldrsb r0, [r5, #4]
	cmp r0, #1
	ldreq r0, [r5, #0x28]
	cmpeq r0, r6
	bne _020778E4
	mov r0, r5
	mov r1, r4
	mov r2, sb
	bl FUN_02076964
_020778E4:
	ldr r5, [r5, #0xa4]
	cmp r5, #0
	bne _020778C0
_020778F0:
	ldrh r0, [r7]
	strh r8, [r7]
	b _020779A8
_020778FC:
	ldrh r8, [r7]
	ldr r0, _020779B4 ; =0x020B9FD8
	strh r1, [r7]
	ldr sb, [r0, #0x674]
	cmp sb, #0
	beq _02077950
	mov sl, #1
_02077918:
	ldrsb r0, [sb, #4]
	cmp r0, #1
	ldreq r0, [sb, #0x28]
	cmpeq r0, r6
	ldrheq r0, [sb, #0x2c]
	cmpeq r0, r5
	bne _02077944
	mov r0, sb
	mov r1, r4
	mov r2, sl
	bl FUN_02076964
_02077944:
	ldr sb, [sb, #0xa4]
	cmp sb, #0
	bne _02077918
_02077950:
	b _020778F0
_02077954:
	ldrh r6, [r7]
	ldr r0, _020779B4 ; =0x020B9FD8
	strh r1, [r7]
	ldr r8, [r0, #0x674]
	cmp r8, #0
	beq _020779A0
	mov sb, #1
_02077970:
	ldrsb r0, [r8, #4]
	cmp r0, #1
	ldrheq r0, [r8, #0x2c]
	cmpeq r0, r5
	bne _02077994
	mov r0, r8
	mov r1, r4
	mov r2, sb
	bl FUN_02076964
_02077994:
	ldr r8, [r8, #0xa4]
	cmp r8, #0
	bne _02077970
_020779A0:
	ldrh r0, [r7]
	strh r6, [r7]
_020779A8:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_020779B0: .word 0x04000208
_020779B4: .word 0x020B9FD8

	arm_func_start FUN_020779b8
FUN_020779b8: ; 0x020779B8
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _02077A1C ; =0x04000208
	mov r2, #0
	ldrh r4, [r3]
	ldr r1, _02077A20 ; =0x020B9FD8
	mov r5, r0
	strh r2, [r3]
	ldr r7, [r1, #0x674]
	cmp r7, #0
	beq _02077A0C
	mov r6, #1
	arm_func_end FUN_020779b8
_020779E4:
	ldrsb r0, [r7, #4]
	cmp r0, #1
	bne _02077A00
	mov r0, r7
	mov r1, r5
	mov r2, r6
	bl FUN_02076964
_02077A00:
	ldr r7, [r7, #0xa4]
	cmp r7, #0
	bne _020779E4
_02077A0C:
	ldr r1, _02077A1C ; =0x04000208
	ldrh r0, [r1]
	strh r4, [r1]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02077A1C: .word 0x04000208
_02077A20: .word 0x020B9FD8

	arm_func_start FUN_02077a24
FUN_02077a24: ; 0x02077A24
	push {r4, r5, r6, r7, r8, lr}
	ldr r3, _02077A98 ; =0x04000208
	mov r2, #0
	ldrh r5, [r3]
	ldr r1, _02077A9C ; =0x020B9FD8
	mov r6, r0
	strh r2, [r3]
	ldr r4, [r1, #0x674]
	cmp r4, #0
	beq _02077A88
	mov r8, r2
	mov r7, #1
	arm_func_end FUN_02077a24
_02077A54:
	ldrsb r0, [r4, #4]
	cmp r0, #1
	ldreq r0, [r4, #0x28]
	lsleq r0, r0, #0x10
	cmpeq r6, r0, lsr #16
	bne _02077A7C
	mov r0, r4
	mov r1, r8
	mov r2, r7
	bl FUN_02076964
_02077A7C:
	ldr r4, [r4, #0xa4]
	cmp r4, #0
	bne _02077A54
_02077A88:
	ldr r1, _02077A98 ; =0x04000208
	ldrh r0, [r1]
	strh r5, [r1]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02077A98: .word 0x04000208
_02077A9C: .word 0x020B9FD8

	arm_func_start FUN_02077aa0
FUN_02077aa0: ; 0x02077AA0
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	ldr r0, _02077B30 ; =0x020B9FD8
	mov r4, #0
	str r4, [r0, #0x34]
	ldr r5, _02077B34 ; =0x020BAFD8
	str r4, [r0, #0x38]
	ldrb r0, [r5, #0xd1c]
	cmp r0, #0
	beq _02077B24
	strb r4, [r5, #0xd1e]
	mov r0, #1
	strb r0, [r5, #0xd1d]
	mov r6, #0x800
	ldr r2, _02077B38 ; =0x72637473
	mov r0, r6
	strb r4, [r5, #0xd1f]
	mov r1, #0x10
	bl FUN_020753b8
	str r0, [r5, #0xde0]
	str r6, [sp]
	ldrb r0, [r5, #0xd1c]
	ldr r6, _02077B3C ; =0x020BBCF8
	ldr r1, _02077B40 ; =FUN_02077cdc
	str r0, [sp, #4]
	ldr r3, [r5, #0xde0]
	mov r0, r6
	mov r2, r4
	add r3, r3, #0x800
	bl FUN_02001948
	mov r0, r6
	bl FUN_02001ce0
	bl FUN_02077b80
	arm_func_end FUN_02077aa0
_02077B24:
	mov r0, #0
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_02077B30: .word 0x020B9FD8
_02077B34: .word 0x020BAFD8
_02077B38: .word 0x72637473
_02077B3C: .word 0x020BBCF8
_02077B40: .word FUN_02077cdc

	arm_func_start FUN_02077b44
FUN_02077b44: ; 0x02077B44
	push {r3, r4, r5, lr}
	bl FUN_02077bf4
	ldr r5, _02077B78 ; =0x020BBCF8
	ldr r4, _02077B7C ; =0x020BAFD8
	mov r1, #0
	mov r0, r5
	strb r1, [r4, #0xd1d]
	bl FUN_02001ce0
	mov r0, r5
	bl FUN_02001bd8
	ldr r0, [r4, #0xde0]
	bl FUN_020754fc
	pop {r3, r4, r5, pc}
	.align 2, 0_02077B78: .word 0x020BBCF8
_02077B7C: .word 0x020BAFD8
	arm_func_end FUN_02077b44

	arm_func_start FUN_02077b80
FUN_02077b80: ; 0x02077B80
	push {r3, r4, r5, lr}
	ldr r0, _02077BE4 ; =0x020BAFD8
	ldrb r0, [r0, #0xde4]
	cmp r0, #0
	bne _02077BDC
	ldr r1, _02077BE8 ; =0x00001474
	ldr r4, _02077BEC ; =0x020B9FD8
	mov r5, #0
	ldr r3, _02077BF0 ; =FUN_02077c88
	mov r0, r5
	mov r2, r1
	str r4, [sp]
	bl FUN_0200b8dc
	mov r4, #1
	mov r0, r5
	mov r1, r5
	mov r2, r4
	mov r3, r5
	bl FUN_0200b810
	mov r0, r4
	bl FUN_0200be58
	mov r0, r4
	bl FUN_0200bc98
	arm_func_end FUN_02077b80
_02077BDC:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_02077BE4: .word 0x020BAFD8
_02077BE8: .word 0x00001474
_02077BEC: .word 0x020B9FD8
_02077BF0: .word FUN_02077c88

	arm_func_start FUN_02077bf4
FUN_02077bf4: ; 0x02077BF4
	push {r3, r4, lr}
	sub sp, sp, #4
	mov r4, #0
	ldr r0, _02077C78 ; =0x0000FFFF
	mov r1, r4
	mov r3, r4
	mov r2, #1
	bl FUN_0200b838
	ldr r0, _02077C7C ; =0x020BAFD8
	ldrb r0, [r0, #0xde4]
	cmp r0, #0
	bne _02077C3C
	mov r0, r4
	mov r1, r4
	mov r2, r4
	mov r3, r4
	str r4, [sp]
	bl FUN_0200b8dc
	arm_func_end FUN_02077bf4
_02077C3C:
	mov r4, #1
	mov r0, r4
	bl FUN_0200be58
	mov r0, r4
	bl FUN_0200bc98
	ldr r2, _02077C80 ; =0x020BA6D8
	mov r0, #0
	strh r0, [r2, #0x3c]
	strh r0, [r2, #0x40]
	ldr r1, _02077C84 ; =0x020B9FD8
	strh r0, [r2, #0x3e]
	strb r0, [r1, #0x745]
	strb r0, [r1, #0x744]
	add sp, sp, #4
	pop {r3, r4, pc}
	.align 2, 0_02077C78: .word 0x0000FFFF
_02077C7C: .word 0x020BAFD8
_02077C80: .word 0x020BA6D8
_02077C84: .word 0x020B9FD8

	arm_func_start FUN_02077c88
FUN_02077c88: ; 0x02077C88
	push {r3, lr}
	ldr r2, _02077CD0 ; =0x020B9FD8
	ldr r1, _02077CD4 ; =0x020BAFD8
	ldr r3, [r2, #0x34]
	add r0, r1, #0xd00
	add r3, r3, #1
	str r3, [r2, #0x34]
	ldrsb r0, [r0, #0x1d]
	cmp r0, #0
	popeq {r3, pc}
	mov r0, #0
	strb r0, [r1, #0xd1f]
	ldr r1, [r2, #0x38]
	ldr r0, _02077CD8 ; =0x020BBCF8
	add r1, r1, #1
	str r1, [r2, #0x38]
	bl FUN_02001ce0
	pop {r3, pc}
	.align 2, 0_02077CD0: .word 0x020B9FD8
_02077CD4: .word 0x020BAFD8
_02077CD8: .word 0x020BBCF8
	arm_func_end FUN_02077c88

	arm_func_start FUN_02077cdc
FUN_02077cdc: ; 0x02077CDC
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r8, _02077E1C ; =0x020BAFD8
	ldr r7, _02077E20 ; =0x020BBDD8
	ldr r6, _02077E24 ; =0x020B9FD8
	add r4, r8, #0xd00
	add r5, r8, #0xe00
	mov fp, #0
	arm_func_end FUN_02077cdc
_02077CF8:
	mov r1, #1
	mov r0, fp
	strb r1, [r8, #0xd1f]
	bl FUN_02001c28
	strb fp, [r8, #0xd1f]
	ldrsb r0, [r5, #0xdc]
	cmp r0, #1
	bne _02077DA0
	bl FUN_020034b0
	ldr r2, [r8, #0xed4]
	ldr r1, [r8, #0xed8]
	sub sl, r0, r2
	cmp r1, r2
	sub r1, r1, r2
	addlo r1, r1, #0x10000
	str r0, [r8, #0xed4]
	mov r0, r1
	bl FUN_0201f74c
	mov sb, r0
	mov r0, sl
	bl FUN_0201f74c
	mov r1, r0
	mov r0, sb
	bl FUN_02020728
	mov r1, r0
	ldr r0, _02077E28 ; =0x42C80000
	bl FUN_02020094
	mov sb, r0
	ldrsh r0, [r7, #0xd0]
	mov r1, sb
	cmp r0, #0
	movlt r0, #0
	strlt r0, [r8, #0xecc]
	str sb, [r8, #0xec8]
	ldr r0, [r8, #0xecc]
	bl FUN_0201f624
	strlo sb, [r8, #0xecc]
	movlo r0, #0x64
	strhlo r0, [r7, #0xd0]
	ldrsh r0, [r7, #0xd0]
	sub r0, r0, #1
	strh r0, [r7, #0xd0]
_02077DA0:
	ldrsb r0, [r4, #0x1d]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, #0
	bl FUN_0200bc98
	ldr r0, [r6, #0x2c]
	add r0, r0, #1
	str r0, [r6, #0x2c]
	ldr r0, [r6, #0x670]
	bl FUN_020780bc
	ldr r0, [r6, #0x674]
	bl FUN_020780bc
	bl FUN_0207d780
	ldr r0, _02077E2C ; =0x020BBEBC
	ldr r0, [r0]
	cmp r0, #0
	beq _02077DE8
	bl FUN_02079820
_02077DE8:
	bl FUN_0207b124
	bl FUN_0207ae2c
	bl FUN_0207b77c
	bl FUN_0207b210
	mov r0, #0
	bl FUN_0200be58
	ldrsb r0, [r5, #0xdc]
	cmp r0, #1
	bne _02077CF8
	bl FUN_020034b0
	str r0, [r8, #0xed8]
	b _02077CF8
_02077E18:
	.byte 0xF8, 0x8F, 0xBD, 0xE8
_02077E1C: .word 0x020BAFD8
_02077E20: .word 0x020BBDD8
_02077E24: .word 0x020B9FD8
_02077E28: .word 0x42C80000
_02077E2C: .word 0x020BBEBC

	arm_func_start FUN_02077e30
FUN_02077e30: ; 0x02077E30
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r1, [r0, #0x24]
	ldrb r0, [r1, #1]
	add r7, r1, #0x10
	str r0, [sp]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov fp, #0
	mvn r6, #0
	mov r5, fp
	arm_func_end FUN_02077e30
_02077E58:
	ldr r8, [r7, #0xb4]
	add sl, r7, #0xb4
	cmp r8, #0
	beq _02077ED0
	ldr r4, _02077EF0 ; =0x020B9FD8
_02077E6C:
	ldmib r8, {r0, sb}
	sub r1, r0, #1
	cmp r1, #0
	bgt _02077EB0
	ldrb r0, [r7, #4]
	tst r0, #3
	movne r1, fp
	bne _02077EB0
	mov r0, r7
	mov r1, r8
	bl FUN_0207ade8
	ldr r0, [r4, #0x658]
	mov r1, r6
	str r0, [r8, #8]
	str r8, [r4, #0x658]
	str r6, [r8, #4]
	strb r5, [r8, #1]
_02077EB0:
	str r1, [r8, #4]
	cmp r1, #0
	strge r1, [r8, #4]
	strge r8, [sl]
	addge sl, r8, #8
	mov r8, sb
	cmp sb, #0
	bne _02077E6C
_02077ED0:
	mov r0, #0
	str r0, [sl]
	ldr r0, [sp]
	add r7, r7, #0xc4
	subs r0, r0, #1
	str r0, [sp]
	bne _02077E58
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02077EF0: .word 0x020B9FD8

	arm_func_start FUN_02077ef4
FUN_02077ef4: ; 0x02077EF4
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #8
	mov r7, r1
	ldr r1, [r7, #0xc]
	mov r8, r0
	cmp r1, #0
	ldr r6, [r7, #0x1c]
	ldr r5, [r7, #0x54]
	bne _02078098
	arm_func_end FUN_02077ef4
_02077F18:
	ldrb r3, [r6]
	add r0, r6, #1
	mov r6, r0
	cmp r3, #0x80
	blo _02077F70
	cmp r3, #0x90
	blo _02077F58
	ldr r2, _020780B0 ; =0x02091794
	mov r1, r8
	add r2, r2, r3, lsl #2
	ldr r4, [r2, #-0x240]
	mov r2, r7
	mov r3, r5
	blx r4
	mov r6, r0
	b _02078080
_02077F58:
	ldr r0, _020780B4 ; =0x02091780
	add r0, r0, r3
	ldrb r0, [r0, #-0x80]
	str r0, [r7, #0x10]
	str r0, [r7, #0xc]
	b _02078080
_02077F70:
	strb r3, [sp, #3]
	ldrb r1, [r0]
	ldrb r4, [r7, #4]
	mov r3, #0xc
	lsl r2, r1, #0x14
	asr r2, r2, #0x18
	and r2, r2, #3
	sub r2, r2, #2
	lsl r2, r2, #0x18
	add r2, r4, r2, asr #24
	lsl r2, r2, #0x18
	asr r4, r2, #0x18
	and r2, r1, #0xf
	smlabb r2, r4, r3, r2
	strb r2, [sp, #2]
	asr r1, r1, #6
	ands r1, r1, #0xff
	strb r4, [r7, #4]
	add r6, r0, #1
	ldreq r2, [r7, #0x14]
	beq _02077FE8
	cmp r1, #0
	mov r2, #0
	beq _02077FE4
_02077FD0:
	ldrb r0, [r6], #1
	sub r1, r1, #1
	ands r1, r1, #0xff
	add r2, r0, r2, lsl #8
	bne _02077FD0
_02077FE4:
	str r2, [r7, #0x14]
_02077FE8:
	ldrb r1, [r7, #5]
	mov r4, #0
	ldr r0, _020780B8 ; =0x02040811
	mul r1, r2, r1
	umull r0, r2, r1, r0
	sub r0, r1, r2
	add r2, r2, r0, lsr #1
	lsr r2, r2, #6
	str r2, [sp, #4]
	strb r4, [sp]
	ldrsb r0, [r7, #8]
	cmp r0, #0
	bne _0207806C
	ldrb r0, [r5, #4]
	tst r0, #2
	beq _0207803C
	ldrb r2, [r7, #7]
	add r1, sp, #0
	mov r0, r5
	bl FUN_0207aaac
	b _0207806C
_0207803C:
	add sb, sp, #0
	mov r0, r5
	mov r1, sb
	bl FUN_0207ab3c
	mov r0, r5
	mov r1, sb
	str r4, [r5, #0x1c]
	bl FUN_0207a96c
	movs r1, r0
	beq _0207806C
	mov r0, r5
	bl FUN_0207ab78
_0207806C:
	ldrb r0, [sp, #2]
	strb r0, [r7, #7]
	ldrb r0, [r5, #4]
	and r0, r0, #0xfd
	strb r0, [r5, #4]
_02078080:
	ldrsb r0, [r7, #2]
	cmp r0, #0
	beq _02078098
	ldr r0, [r7, #0xc]
	cmp r0, #0
	beq _02077F18
_02078098:
	ldr r0, [r7, #0xc]
	str r6, [r7, #0x1c]
	sub r0, r0, #1
	str r0, [r7, #0xc]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_020780B0: .word 0x02091794
_020780B4: .word 0x02091780
_020780B8: .word 0x02040811

	arm_func_start FUN_020780bc
FUN_020780bc: ; 0x020780BC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	movs r4, r0
	mov r6, #0
	cmpne r4, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_020780bc
_020780D0:
	ldrsb r0, [r4, #5]
	cmp r0, #1
	bne _02078420
	ldrsh r0, [r4, #0x1a]
	cmp r0, #0
	beq _020780F4
	subgt r0, r0, #1
	strhgt r0, [r4, #0x1a]
	b _02078420
_020780F4:
	ldr r0, [r4, #0x34]
	add r0, r0, #1
	str r0, [r4, #0x34]
	ldrb r0, [r4, #0xc]
	cmp r0, #0
	beq _02078114
	mov r0, r4
	bl FUN_02078438
_02078114:
	ldr r1, [r4, #0x3c]
	ldr r0, [r4, #0x40]
	add r1, r1, r0
	str r1, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	cmp r1, r0
	ble _0207836C
	ldr r7, _02078430 ; =0x04000208
	ldr r5, _02078434 ; =0x82061029
_02078138:
	mov r0, r4
	bl FUN_02077e30
	ldr r2, [r4, #0x24]
	ldrb r0, [r2, #1]
	add r1, r2, #0x10
	cmp r0, #0
	beq _020782EC
_02078154:
	ldrh r3, [r1, #0x28]
	sub r0, r0, #1
	cmp r3, #0
	beq _020781D4
	sub r3, r3, #1
	strh r3, [r1, #0x28]
	ldrh r3, [r1, #0x28]
	cmp r3, #0
	ldrne r8, [r1, #0x1c]
	ldrne r3, [r1, #0x20]
	addne r3, r8, r3
	ldreq r3, [r1, #0x24]
	str r3, [r1, #0x1c]
	ldrsh r3, [r1, #0x50]
	ldr r8, [r1, #0x1c]
	ldrsh sb, [r2, #4]
	add r3, r3, r8, asr #16
	add r3, sb, r3
	strh r3, [r1, #0x16]
	ldrh sb, [r7]
	strh r6, [r7]
	ldr r8, [r1, #0xb0]
	cmp r8, #0
	beq _020781CC
_020781B4:
	ldrh r3, [r8, #6]
	orr r3, r3, #0x10
	strh r3, [r8, #6]
	ldr r8, [r8, #0x154]
	cmp r8, #0
	bne _020781B4
_020781CC:
	ldrh r3, [r7]
	strh sb, [r7]
_020781D4:
	ldrh r3, [r1, #0x38]
	cmp r3, #0
	beq _02078264
	sub r3, r3, #1
	strh r3, [r1, #0x38]
	ldrh r3, [r1, #0x38]
	cmp r3, #0
	ldrne r8, [r1, #0x2c]
	ldrne r3, [r1, #0x30]
	addne r3, r8, r3
	ldreq r3, [r1, #0x34]
	str r3, [r1, #0x2c]
	mov r8, r3
	ldrb r3, [r1, #0x4c]
	asr r8, r8, #0x10
	ldrsb sb, [r2, #8]
	mul r3, r8, r3
	mul r8, sb, r3
	smull r3, sb, r5, r8
	add sb, r8, sb
	lsr r3, r8, #0x1f
	add sb, r3, sb, asr #13
	strh sb, [r1, #0x18]
	ldrh sb, [r7]
	strh r6, [r7]
	ldr r8, [r1, #0xb0]
	cmp r8, #0
	beq _0207825C
_02078244:
	ldrh r3, [r8, #6]
	orr r3, r3, #0x20
	strh r3, [r8, #6]
	ldr r8, [r8, #0x154]
	cmp r8, #0
	bne _02078244
_0207825C:
	ldrh r3, [r7]
	strh sb, [r7]
_02078264:
	ldrh r3, [r1, #0x48]
	cmp r3, #0
	beq _020782E0
	sub r3, r3, #1
	strh r3, [r1, #0x48]
	ldrh r3, [r1, #0x48]
	cmp r3, #0
	ldrne r8, [r1, #0x3c]
	ldrne r3, [r1, #0x40]
	addne r3, r8, r3
	ldreq r3, [r1, #0x44]
	str r3, [r1, #0x3c]
	ldr r3, [r1, #0xc0]
	ldr r8, [r1, #0x3c]
	ldrsb r3, [r3, #7]
	sub r3, r3, #0x40
	add r3, r3, r8, asr #16
	strh r3, [r1, #0x1a]
	ldrh sb, [r7]
	strh r6, [r7]
	ldr r8, [r1, #0xb0]
	cmp r8, #0
	beq _020782D8
_020782C0:
	ldrh r3, [r8, #6]
	orr r3, r3, #0x40
	strh r3, [r8, #6]
	ldr r8, [r8, #0x154]
	cmp r8, #0
	bne _020782C0
_020782D8:
	ldrh r3, [r7]
	strh sb, [r7]
_020782E0:
	cmp r0, #0
	add r1, r1, #0xc4
	bne _02078154
_020782EC:
	strb r6, [r4, #0xd]
	ldrb r0, [r4, #0xf]
	mov sb, r6
	add r8, r4, #0xa8
	cmp r0, #0
	ble _02078344
_02078304:
	ldrsb r0, [r8, #2]
	cmp r0, #1
	bne _02078330
	mov r0, r4
	mov r1, r8
	bl FUN_02077ef4
	ldrsb r0, [r8, #2]
	cmp r0, #1
	ldrbeq r0, [r4, #0xd]
	addeq r0, r0, #1
	strbeq r0, [r4, #0xd]
_02078330:
	ldrb r0, [r4, #0xf]
	add sb, sb, #1
	add r8, r8, #0x5c
	cmp sb, r0
	blt _02078304
_02078344:
	ldr r0, [r4, #0x38]
	add r0, r0, #1
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	sub r1, r1, r0
	str r1, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	cmp r1, r0
	bgt _02078138
_0207836C:
	ldrb r0, [r4, #0xd]
	mov r5, #0
	cmp r0, #0
	bne _020783A4
	str r5, [r4, #4]
	ldr r0, [r4, #0x24]
	bl FUN_0207a05c
	ldr r0, [r4, #0x28]
	ldr r3, [r4, #0xa0]
	ldr r7, [r4, #0x9c]
	mov r2, r5
	mov r1, #1
	blx r7
	b _02078420
_020783A4:
	ldrsb r1, [r4, #7]
	cmp r1, #0
	beq _02078420
	ldr r0, [r4, #0x68]
	cmp r0, #0
	bne _02078420
	cmp r1, #1
	bne _020783F8
	str r5, [r4, #4]
	ldr r0, [r4, #0x24]
	bl FUN_0207a120
	ldr r0, [r4, #0x28]
	ldr r3, [r4, #0xa0]
	ldr r7, [r4, #0x9c]
	mov r2, r5
	mov r1, #2
	blx r7
	ldrsb r0, [r4, #0xa]
	cmp r0, #1
	strbeq r5, [r4, #0xd]
	b _02078420
_020783F8:
	mov r1, #1
	strb r1, [r4, #6]
	ldr r0, [r4, #0x24]
	bl FUN_0207a14c
	ldr r0, [r4, #0x28]
	ldr r3, [r4, #0xa0]
	ldr r5, [r4, #0x9c]
	mov r1, #3
	mov r2, #0
	blx r5
_02078420:
	ldr r4, [r4, #0xa4]
	cmp r4, #0
	bne _020780D0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02078430: .word 0x04000208
_02078434: .word 0x82061029

	arm_func_start FUN_02078438
FUN_02078438: ; 0x02078438
	push {r4, lr}
	mov r4, r0
	ldrh r0, [r4, #0x54]
	cmp r0, #0
	beq _020784A8
	sub r0, r0, #1
	strh r0, [r4, #0x54]
	ldrh r0, [r4, #0x54]
	cmp r0, #0
	ldrne r1, [r4, #0x48]
	ldrne r0, [r4, #0x4c]
	addne r0, r1, r0
	ldreq r0, [r4, #0x50]
	mov r1, r0
	str r0, [r4, #0x48]
	ldrb r0, [r4, #0x17]
	asr r1, r1, #0x10
	mul r0, r1, r0
	lsrs r1, r0, #8
	ldr r0, _020785BC ; =0x03938700
	moveq r1, #1
	bl FUN_0201fbc8
	ldrh r1, [r4, #0x54]
	str r0, [r4, #0x44]
	cmp r1, #0
	ldrbeq r0, [r4, #0xc]
	andeq r0, r0, #0xfe
	strbeq r0, [r4, #0xc]
	arm_func_end FUN_02078438
_020784A8:
	ldrh r0, [r4, #0x64]
	cmp r0, #0
	beq _02078504
	sub r0, r0, #1
	strh r0, [r4, #0x64]
	ldrh r0, [r4, #0x64]
	cmp r0, #0
	ldrne r1, [r4, #0x58]
	ldrne r0, [r4, #0x5c]
	addne r0, r1, r0
	ldreq r0, [r4, #0x60]
	mov r1, r0
	asr r1, r1, #0x10
	str r0, [r4, #0x58]
	lsl r1, r1, #0x10
	ldr r0, [r4, #0x24]
	asr r1, r1, #0x10
	bl FUN_0207a2f4
	ldrh r0, [r4, #0x64]
	cmp r0, #0
	ldrbeq r0, [r4, #0xc]
	andeq r0, r0, #0xfd
	strbeq r0, [r4, #0xc]
_02078504:
	ldrh r0, [r4, #0x74]
	cmp r0, #0
	beq _02078560
	sub r0, r0, #1
	strh r0, [r4, #0x74]
	ldrh r0, [r4, #0x74]
	cmp r0, #0
	ldrne r1, [r4, #0x68]
	ldrne r0, [r4, #0x6c]
	addne r0, r1, r0
	ldreq r0, [r4, #0x70]
	mov r1, r0
	asr r1, r1, #0x10
	str r0, [r4, #0x68]
	lsl r1, r1, #0x18
	ldr r0, [r4, #0x24]
	asr r1, r1, #0x18
	bl FUN_0207a388
	ldrh r0, [r4, #0x74]
	cmp r0, #0
	ldrbeq r0, [r4, #0xc]
	andeq r0, r0, #0xfb
	strbeq r0, [r4, #0xc]
_02078560:
	ldrh r0, [r4, #0x84]
	cmp r0, #0
	popeq {r4, pc}
	sub r0, r0, #1
	strh r0, [r4, #0x84]
	ldrh r0, [r4, #0x84]
	cmp r0, #0
	ldrne r1, [r4, #0x78]
	ldrne r0, [r4, #0x7c]
	addne r0, r1, r0
	ldreq r0, [r4, #0x80]
	mov r1, r0
	str r0, [r4, #0x78]
	asr r1, r1, #0x10
	ldr r0, [r4, #0x24]
	and r1, r1, #0xff
	bl FUN_0207a458
	ldrh r0, [r4, #0x84]
	cmp r0, #0
	ldrbeq r0, [r4, #0xc]
	andeq r0, r0, #0xef
	strbeq r0, [r4, #0xc]
	pop {r4, pc}
	.align 2, 0_020785BC: .word 0x03938700

	arm_func_start FUN_020785c0
FUN_020785c0: ; 0x020785C0
	mov r1, #0
	strb r1, [r2, #2]
	bx lr
	arm_func_end FUN_020785c0

	arm_func_start FUN_020785cc
FUN_020785cc: ; 0x020785CC
	ldr r1, [r2, #0x10]
	str r1, [r2, #0xc]
	bx lr
	arm_func_end FUN_020785cc

	arm_func_start FUN_020785d8
FUN_020785d8: ; 0x020785D8
	ldrsb r1, [r0], #1
	ldr r3, [r2, #0x10]
	add r1, r3, r1
	str r1, [r2, #0x10]
	str r1, [r2, #0xc]
	bx lr
	arm_func_end FUN_020785d8

	arm_func_start FUN_020785f0
FUN_020785f0: ; 0x020785F0
	ldrb r1, [r0], #1
	str r1, [r2, #0x10]
	str r1, [r2, #0xc]
	bx lr
	arm_func_end FUN_020785f0

	arm_func_start FUN_02078600
FUN_02078600: ; 0x02078600
	ldrb r3, [r0]
	ldrb r1, [r0, #1]
	add r0, r0, #2
	add r1, r3, r1, lsl #8
	str r1, [r2, #0x10]
	str r1, [r2, #0xc]
	bx lr
	arm_func_end FUN_02078600

	arm_func_start FUN_0207861c
FUN_0207861c: ; 0x0207861C
	ldrb r3, [r0]
	ldrb r1, [r0, #1]
	ldrb ip, [r0, #2]
	add r0, r0, #3
	add r1, r3, r1, lsl #8
	add r1, r1, ip, lsl #16
	str r1, [r2, #0x10]
	str r1, [r2, #0xc]
	bx lr
	arm_func_end FUN_0207861c

	arm_func_start FUN_02078640
FUN_02078640: ; 0x02078640
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r0, r3
	mov r4, r2
	bl FUN_0207b750
	cmp r0, #0
	ldrbgt r0, [r5], #-1
	addle r5, r5, #1
	strgt r0, [r4, #0xc]
	mov r0, r5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02078640

	arm_func_start FUN_0207866c
FUN_0207866c: ; 0x0207866C
	push {r4, lr}
	ldr ip, [r2, #0x20]
	mov r4, r0
	cmp ip, #0
	bne _02078698
	mov r1, #0
	mov r0, r3
	strb r1, [r2, #2]
	sub r4, r4, #1
	bl FUN_0207a72c
	b _020786E8
	arm_func_end FUN_0207866c
_02078698:
	ldrh r0, [r2, #0xa]
	mov r3, #1
	add r0, r0, #1
	strh r0, [r2, #0xa]
	ldrsb r0, [r1, #0xa]
	strb r3, [r1, #3]
	ldr r4, [r2, #0x20]
	cmp r0, #0
	ldrheq r0, [r2]
	cmpeq r0, #0
	bne _020786E8
	ldrh r2, [r1, #0x18]
	ldr r0, [r1, #0x28]
	ldr r3, [r1, #0xa0]
	add r2, r2, #1
	strh r2, [r1, #0x18]
	ldrh r2, [r1, #0x18]
	ldr ip, [r1, #0x9c]
	mov r1, #5
	blx ip
_020786E8:
	mov r0, r4
	pop {r4, pc}

	arm_func_start FUN_020786f0
FUN_020786f0: ; 0x020786F0
	push {r4, lr}
	mov r4, r0
	str r4, [r2, #0x20]
	ldrsb r0, [r1, #0xa]
	cmp r0, #0
	ldrheq r0, [r2]
	cmpeq r0, #0
	bne _02078728
	ldr r0, [r1, #0x28]
	ldr r3, [r1, #0xa0]
	ldr ip, [r1, #0x9c]
	mov r1, #4
	mov r2, #0
	blx ip
	arm_func_end FUN_020786f0
_02078728:
	mov r0, r4
	pop {r4, pc}

	arm_func_start FUN_02078730
FUN_02078730: ; 0x02078730
	push {r4, lr}
	ldrb r4, [r2, #6]
	mov r1, #0xc
	ldrb lr, [r0], #1
	smulbb r1, r4, r1
	add r3, r2, #0x24
	str r0, [r3, r1]
	add ip, r3, r1
	mov r1, #0
	str r1, [ip, #4]
	strb lr, [ip, #8]
	ldrb r3, [r2, #4]
	add r1, r4, #1
	strb r3, [ip, #9]
	strb r1, [r2, #6]
	pop {r4, pc}
	arm_func_end FUN_02078730

	arm_func_start FUN_02078770
FUN_02078770: ; 0x02078770
	ldrb ip, [r2, #6]
	add r3, r2, #0x24
	mov r1, #0xc
	sub ip, ip, #1
	mla r3, ip, r1, r3
	ldrb r1, [r3, #8]
	subs r1, r1, #1
	strbeq ip, [r2, #6]
	strne r0, [r3, #4]
	strbne r1, [r3, #8]
	ldrbne r0, [r3, #9]
	strbne r0, [r2, #4]
	ldrne r0, [r3]
	bx lr
	arm_func_end FUN_02078770

	arm_func_start FUN_020787a8
FUN_020787a8: ; 0x020787A8
	ldrb ip, [r2, #6]
	add r3, r2, #0x24
	mov r1, #0xc
	sub ip, ip, #1
	mla r3, ip, r1, r3
	ldrb r1, [r3, #8]
	subs r1, r1, #1
	ldreq r0, [r3, #4]
	strbeq ip, [r2, #6]
	bx lr
	arm_func_end FUN_020787a8

	arm_func_start FUN_020787d0
FUN_020787d0: ; 0x020787D0
	ldrb r1, [r0], #1
	strb r1, [r2, #4]
	bx lr
	arm_func_end FUN_020787d0

	arm_func_start FUN_020787dc
FUN_020787dc: ; 0x020787DC
	ldrsb r1, [r0], #1
	ldrb r3, [r2, #4]
	and r1, r1, #0xff
	add r1, r3, r1
	strb r1, [r2, #4]
	bx lr
	arm_func_end FUN_020787dc

	arm_func_start FUN_020787f4
FUN_020787f4: ; 0x020787F4
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	ldr r0, [r5, #0x48]
	ldrb r4, [r6]
	asr r0, r0, #0x10
	mul r1, r0, r4
	lsrs r1, r1, #8
	ldr r0, _02078830 ; =0x03938700
	moveq r1, #1
	bl FUN_0201fbc8
	str r0, [r5, #0x44]
	strb r4, [r5, #0x17]
	add r0, r6, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_02078830: .word 0x03938700
	arm_func_end FUN_020787f4

	arm_func_start FUN_02078834
FUN_02078834: ; 0x02078834
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	ldr r0, [r5, #0x48]
	ldrb r4, [r6]
	asr r0, r0, #0x10
	mul r1, r0, r4
	lsrs r1, r1, #8
	ldr r0, _02078870 ; =0x03938700
	moveq r1, #1
	bl FUN_0201fbc8
	str r0, [r5, #0x44]
	strb r4, [r5, #0x17]
	add r0, r6, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_02078870: .word 0x03938700
	arm_func_end FUN_02078834

	arm_func_start FUN_02078874
FUN_02078874: ; 0x02078874
	push {r4, lr}
	mov r4, r0
	ldrb r2, [r4]
	ldrb r1, [r4, #1]
	mov r0, r3
	add r1, r1, r2, lsl #8
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_0207a82c
	add r0, r4, #2
	pop {r4, pc}
	arm_func_end FUN_02078874

	arm_func_start FUN_020788a0
FUN_020788a0: ; 0x020788A0
	push {r4, lr}
	mov r4, r0
	ldrh r1, [r3, #0xe]
	ldrb r2, [r4]
	mov r0, r3
	and r1, r1, #0xff
	add r1, r1, r2, lsl #8
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_0207a82c
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_020788a0

	arm_func_start FUN_020788d0
FUN_020788d0: ; 0x020788D0
	push {r4, lr}
	mov r4, r0
	ldrh r2, [r3, #0xe]
	ldrb r1, [r4]
	mov r0, r3
	bic r2, r2, #0xff
	add r1, r2, r1
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bl FUN_0207a82c
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_020788d0

	arm_func_start FUN_02078900
FUN_02078900: ; 0x02078900
	add r0, r0, #1
	bx lr
	arm_func_end FUN_02078900

	arm_func_start FUN_02078908
FUN_02078908: ; 0x02078908
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r3
	ldrb r1, [r6]
	mov r0, r4
	bl FUN_0207a864
	movs r2, r0
	bpl _02078948
	ldrh r1, [r4, #0xe]
	ldr r0, [r5, #0x28]
	ldr r3, [r5, #0xa0]
	ldr ip, [r5, #0x9c]
	rsb r2, r2, r1, lsl #16
	mvn r1, #0xcb
	blx ip
	arm_func_end FUN_02078908
_02078948:
	add r0, r6, #1
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02078950
FUN_02078950: ; 0x02078950
	push {r4, r5, r6, lr}
	mov r5, r0
	ldrb r2, [r5]
	ldrb r0, [r5, #1]
	mov r4, r1
	add r0, r2, r0, lsl #8
	lsl r0, r0, #0x10
	lsrs r1, r0, #0x10
	moveq r6, #0
	beq _02078998
	mov r0, #0x3e8
	mul r0, r1, r0
	ldr r1, _020789D8 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r6, r0, #0x10
	moveq r6, #1
	arm_func_end FUN_02078950
_02078998:
	ldrb r0, [r5, #2]
	cmp r6, #0
	lsl r1, r0, #0x10
	str r1, [r4, #0x70]
	streq r1, [r4, #0x68]
	beq _020789CC
	ldr r0, [r4, #0x68]
	subs r0, r1, r0
	moveq r6, #0
	beq _020789CC
	mov r1, r6
	bl FUN_0201f9bc
	str r0, [r4, #0x6c]
_020789CC:
	strh r6, [r4, #0x74]
	add r0, r5, #3
	pop {r4, r5, r6, pc}
	.align 2, 0_020789D8: .word 0x020B9FD8

	arm_func_start LAB_020789dc
LAB_020789dc: ; 0x020789DC
	push {r4, lr}
	mov r4, r0
	add r0, r3, #0x60
	bl FUN_0207b9c4
	mov r0, r4
	pop {r4, pc}
	arm_func_end LAB_020789dc

	arm_func_start FUN_020789f4
FUN_020789f4: ; 0x020789F4
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4]
	add r0, r3, #0x60
	strb r1, [r3, #0x68]
	bl FUN_0207b9e0
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_020789f4

	arm_func_start FUN_02078a14
FUN_02078a14: ; 0x02078A14
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4]
	add r0, r3, #0x60
	strb r1, [r3, #0x69]
	bl FUN_0207b9e0
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_02078a14

	arm_func_start FUN_02078a34
FUN_02078a34: ; 0x02078A34
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4]
	add r0, r3, #0x60
	strb r1, [r3, #0x6c]
	bl FUN_0207b9e0
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_02078a34

	arm_func_start FUN_02078a54
FUN_02078a54: ; 0x02078A54
	push {r4, lr}
	mov r4, r0
	ldrb r0, [r4]
	cmp r0, #0xff
	strbne r0, [r3, #0x6a]
	ldrb r0, [r4, #1]
	cmp r0, #0xff
	strbne r0, [r3, #0x6b]
	add r0, r3, #0x60
	bl FUN_0207b9e0
	add r0, r4, #2
	pop {r4, pc}
	arm_func_end FUN_02078a54

	arm_func_start FUN_02078a84
FUN_02078a84: ; 0x02078A84
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4]
	add r0, r3, #0x60
	strb r1, [r3, #0x6d]
	bl FUN_0207b9e0
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_02078a84

	arm_func_start FUN_02078aa4
FUN_02078aa4: ; 0x02078AA4
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4]
	add r0, r3, #0x60
	strb r1, [r3, #0x6e]
	bl FUN_0207b9e0
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_02078aa4

	arm_func_start FUN_02078ac4
FUN_02078ac4: ; 0x02078AC4
	ldrb r1, [r0], #1
	strb r1, [r2, #5]
	bx lr
	arm_func_end FUN_02078ac4

	arm_func_start FUN_02078ad0
FUN_02078ad0: ; 0x02078AD0
	push {r4, lr}
	mov r4, r0
	ldrsb r1, [r4]
	mov r0, r3
	bl FUN_0207a8f0
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_02078ad0

	arm_func_start FUN_02078aec
FUN_02078aec: ; 0x02078AEC
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4]
	ldr r0, [r2, #0x54]
	cmp r1, #0x40
	ldrb r1, [r0, #4]
	orrhs r1, r1, #1
	strbhs r1, [r0, #4]
	bhs _02078B1C
	and r1, r1, #0xfe
	strb r1, [r0, #4]
	bl FUN_0207b514
	arm_func_end FUN_02078aec
_02078B1C:
	add r0, r4, #1
	pop {r4, pc}

	arm_func_start FUN_02078b24
FUN_02078b24: ; 0x02078B24
	ldrb r1, [r3, #4]
	orr r1, r1, #2
	strb r1, [r3, #4]
	bx lr
	arm_func_end FUN_02078b24

	arm_func_start FUN_02078b34
FUN_02078b34: ; 0x02078B34
	ldrb r1, [r0], #1
	strb r1, [r3, #0x54]
	bx lr
	arm_func_end FUN_02078b34

	arm_func_start FUN_02078b40
FUN_02078b40: ; 0x02078B40
	add r0, r0, #2
	bx lr
	arm_func_end FUN_02078b40

	arm_func_start FUN_02078b48
FUN_02078b48: ; 0x02078B48
	push {r3, lr}
	ldrsb r1, [r0]
	ldr r2, [r3, #0x1c]
	ldr ip, [r3, #0xc0]
	lsl r1, r1, #0x18
	asr lr, r1, #0x10
	strh lr, [r3, #0x50]
	asr r1, r2, #0x10
	lsl r1, r1, #0x10
	ldrsh ip, [ip, #4]
	add r1, lr, r1, asr #16
	ldr r2, _02078BC4 ; =0x04000208
	add r1, ip, r1
	strh r1, [r3, #0x16]
	ldrh ip, [r2]
	mov r1, #0
	strh r1, [r2]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _02078BB0
	arm_func_end FUN_02078b48
_02078B98:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x10
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _02078B98
_02078BB0:
	ldr r2, _02078BC4 ; =0x04000208
	add r0, r0, #1
	ldrh r1, [r2]
	strh ip, [r2]
	pop {r3, pc}
	.align 2, 0_02078BC4: .word 0x04000208

	arm_func_start FUN_02078bc8
FUN_02078bc8: ; 0x02078BC8
	push {r3, lr}
	ldrsb lr, [r0]
	ldrsh r1, [r3, #0x50]
	ldr r2, [r3, #0x1c]
	ldr ip, [r3, #0xc0]
	add r1, r1, lr, lsl #8
	lsl r1, r1, #0x10
	asr lr, r1, #0x10
	strh lr, [r3, #0x50]
	asr r1, r2, #0x10
	lsl r1, r1, #0x10
	ldrsh ip, [ip, #4]
	add r1, lr, r1, asr #16
	ldr r2, _02078C4C ; =0x04000208
	add r1, ip, r1
	strh r1, [r3, #0x16]
	ldrh ip, [r2]
	mov r1, #0
	strh r1, [r2]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _02078C38
	arm_func_end FUN_02078bc8
_02078C20:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x10
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _02078C20
_02078C38:
	ldr r2, _02078C4C ; =0x04000208
	add r0, r0, #1
	ldrh r1, [r2]
	strh ip, [r2]
	pop {r3, pc}
	.align 2, 0_02078C4C: .word 0x04000208

	arm_func_start FUN_02078c50
FUN_02078c50: ; 0x02078C50
	push {r3, lr}
	ldrsb lr, [r0]
	ldrsh r1, [r3, #0x50]
	ldr r2, [r3, #0x1c]
	ldr ip, [r3, #0xc0]
	add r1, r1, lr, lsl #2
	lsl r1, r1, #0x10
	asr lr, r1, #0x10
	strh lr, [r3, #0x50]
	asr r1, r2, #0x10
	lsl r1, r1, #0x10
	ldrsh ip, [ip, #4]
	add r1, lr, r1, asr #16
	ldr r2, _02078CD4 ; =0x04000208
	add r1, ip, r1
	strh r1, [r3, #0x16]
	ldrh ip, [r2]
	mov r1, #0
	strh r1, [r2]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _02078CC0
	arm_func_end FUN_02078c50
_02078CA8:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x10
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _02078CA8
_02078CC0:
	ldr r2, _02078CD4 ; =0x04000208
	add r0, r0, #1
	ldrh r1, [r2]
	strh ip, [r2]
	pop {r3, pc}
	.align 2, 0_02078CD4: .word 0x04000208

	arm_func_start FUN_02078cd8
FUN_02078cd8: ; 0x02078CD8
	push {r3, lr}
	ldrb ip, [r0]
	ldrb r1, [r0, #1]
	ldrsh lr, [r3, #0x50]
	ldr r2, [r3, #0x1c]
	add r1, ip, r1, lsl #8
	add r1, lr, r1
	lsl r1, r1, #0x10
	asr lr, r1, #0x10
	asr r1, r2, #0x10
	lsl r1, r1, #0x10
	ldr r2, [r3, #0xc0]
	strh lr, [r3, #0x50]
	ldrsh ip, [r2, #4]
	add r1, lr, r1, asr #16
	ldr r2, _02078D64 ; =0x04000208
	add r1, ip, r1
	strh r1, [r3, #0x16]
	ldrh ip, [r2]
	mov r1, #0
	strh r1, [r2]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _02078D50
	arm_func_end FUN_02078cd8
_02078D38:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x10
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _02078D38
_02078D50:
	ldr r2, _02078D64 ; =0x04000208
	add r0, r0, #2
	ldrh r1, [r2]
	strh ip, [r2]
	pop {r3, pc}
	.align 2, 0_02078D64: .word 0x04000208

	arm_func_start FUN_02078d68
FUN_02078d68: ; 0x02078D68
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r3
	mov r7, r0
	ldrb r1, [r6, #4]
	ldrb r4, [r7]
	ldrb r0, [r7, #1]
	tst r1, #2
	ldrb r2, [r7, #2]
	add r0, r4, r0, lsl #8
	moveq r1, #0
	streq r1, [r6, #0x1c]
	lsl r0, r0, #0x10
	lsr r5, r0, #0x10
	ldr r1, [r6, #0x1c]
	lsl r0, r2, #0x18
	asr r2, r1, #0x10
	add r0, r2, r0, lsr #16
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	lsl r0, r0, #0x10
	cmp r5, #0
	ldr r4, [r6, #0xc0]
	str r0, [r6, #0x24]
	streq r0, [r6, #0x1c]
	beq _02078DE4
	subs r0, r0, r1
	moveq r5, #0
	beq _02078DE4
	mov r1, r5
	bl FUN_0201f9bc
	str r0, [r6, #0x20]
	arm_func_end FUN_02078d68
_02078DE4:
	ldr r0, [r6, #0x1c]
	strh r5, [r6, #0x28]
	asr r0, r0, #0x10
	ldrsh r1, [r6, #0x50]
	lsl r0, r0, #0x10
	ldrsh r2, [r4, #4]
	add r0, r1, r0, lsr #16
	ldr r1, _02078E50 ; =0x04000208
	add r0, r2, r0
	strh r0, [r6, #0x16]
	ldrh r3, [r1]
	mov r0, #0
	strh r0, [r1]
	ldr r1, [r6, #0xb0]
	cmp r1, #0
	beq _02078E3C
_02078E24:
	ldrh r0, [r1, #6]
	orr r0, r0, #0x10
	strh r0, [r1, #6]
	ldr r1, [r1, #0x154]
	cmp r1, #0
	bne _02078E24
_02078E3C:
	ldr r2, _02078E50 ; =0x04000208
	add r0, r7, #3
	ldrh r1, [r2]
	strh r3, [r2]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02078E50: .word 0x04000208

	arm_func_start FUN_02078e54
FUN_02078e54: ; 0x02078E54
	ldrb r1, [r0]
	ldrb ip, [r0, #1]
	add r0, r0, #2
	mov r2, r1
	cmp r1, ip
	movhi r2, ip
	movhi ip, r1
	strb r2, [r3, #0xc]
	strb ip, [r3, #0xd]
	bx lr
	arm_func_end FUN_02078e54

	arm_func_start FUN_02078e7c
FUN_02078e7c: ; 0x02078E7C
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	add r0, r0, #2
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0xa]
	bx lr
	arm_func_end FUN_02078e7c

	arm_func_start FUN_02078e94
FUN_02078e94: ; 0x02078E94
	push {r4, lr}
	mov r4, r0
	ldrb r2, [r4]
	ldrb r1, [r4, #1]
	mov r0, r3
	add r1, r1, r2, lsl #8
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	bl FUN_0207a924
	add r0, r4, #2
	pop {r4, pc}
	arm_func_end FUN_02078e94

	arm_func_start FUN_02078ec0
FUN_02078ec0: ; 0x02078EC0
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	add r0, r0, #2
	add r1, r1, r2, lsl #8
	strh r1, [r3, #0x52]
	bx lr
	arm_func_end FUN_02078ec0

	arm_func_start FUN_02078ed8
FUN_02078ed8: ; 0x02078ED8
	ldrb r1, [r0], #1
	strb r1, [r3, #0x55]
	bx lr
	arm_func_end FUN_02078ed8

	arm_func_start FUN_02078ee4
FUN_02078ee4: ; 0x02078EE4
	push {r4, r5, r6, lr}
	ldrb r6, [r0]
	ldrb r1, [r0, #1]
	ldrb r5, [r0, #2]
	ldrb r4, [r0, #3]
	ldrb lr, [r0, #4]
	mov r2, #0
	mov ip, #1
	add r1, r6, r1, lsl #8
	lsl r1, r1, #0x10
	asr r6, r1, #0x10
	add r1, r5, r4, lsl #8
	strb ip, [r3, #0x71]
	strb ip, [r3, #0x72]
	strb lr, [r3, #0x73]
	str r6, [r3, #0x74]
	strh r1, [r3, #0x78]
	strh r2, [r3, #0x7a]
	strh r2, [r3, #0x7c]
	strb r2, [r3, #0x7e]
	add r0, r0, #5
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02078ee4

	arm_func_start FUN_02078f3c
FUN_02078f3c: ; 0x02078F3C
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0x7a]
	ldrb r2, [r0, #2]
	ldrb r1, [r0, #3]
	add r0, r0, #4
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0x7c]
	bx lr
	arm_func_end FUN_02078f3c

	arm_func_start FUN_02078f64
FUN_02078f64: ; 0x02078F64
	ldrb r1, [r0]
	add r0, r0, #1
	cmp r1, #2
	moveq r1, #1
	strb r1, [r3, #0x71]
	cmp r1, #0
	moveq r1, #0
	movne r1, #1
	strb r1, [r3, #0x72]
	bx lr
	arm_func_end FUN_02078f64

	arm_func_start FUN_02078f8c
FUN_02078f8c: ; 0x02078F8C
	push {r3, r4, r5, lr}
	ldrsb ip, [r0]
	ldrb r1, [r3, #0x4c]
	mov r5, #0
	lsl r4, ip, #0x10
	ldr r2, [r3, #0xc0]
	str r4, [r3, #0x34]
	str r4, [r3, #0x2c]
	strh r5, [r3, #0x38]
	ldrsb r2, [r2, #8]
	smulbb r1, ip, r1
	mul lr, r2, r1
	ldr ip, _02079018 ; =0x82061029
	lsr r1, lr, #0x1f
	smull r2, r4, ip, lr
	add r4, lr, r4
	add r4, r1, r4, asr #13
	ldr r1, _0207901C ; =0x04000208
	strh r4, [r3, #0x18]
	ldrh r4, [r1]
	strh r5, [r1]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _02079004
	arm_func_end FUN_02078f8c
_02078FEC:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x20
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _02078FEC
_02079004:
	ldr r2, _0207901C ; =0x04000208
	add r0, r0, #1
	ldrh r1, [r2]
	strh r4, [r2]
	pop {r3, r4, r5, pc}
	.align 2, 0_02079018: .word 0x82061029
_0207901C: .word 0x04000208

	arm_func_start FUN_02079020
FUN_02079020: ; 0x02079020
	push {r3, r4, r5, lr}
	ldrsb r2, [r0]
	ldr r1, [r3, #0x2c]
	add r2, r2, r1, asr #16
	cmp r2, #0x7f
	movgt r2, #0x7f
	bgt _02079044
	cmp r2, #0
	movlt r2, #0
	arm_func_end FUN_02079020
_02079044:
	ldrb r1, [r3, #0x4c]
	lsl r4, r2, #0x10
	mov r5, #0
	mul r1, r2, r1
	ldr r2, [r3, #0xc0]
	str r4, [r3, #0x34]
	str r4, [r3, #0x2c]
	strh r5, [r3, #0x38]
	ldrsb lr, [r2, #8]
	ldr r2, _020790C8 ; =0x82061029
	ldr ip, _020790CC ; =0x04000208
	mul r4, lr, r1
	smull r1, lr, r2, r4
	add lr, r4, lr
	lsr r1, r4, #0x1f
	add lr, r1, lr, asr #13
	strh lr, [r3, #0x18]
	ldrh r4, [ip]
	strh r5, [ip]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _020790B4
_0207909C:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x20
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _0207909C
_020790B4:
	ldr r2, _020790CC ; =0x04000208
	add r0, r0, #1
	ldrh r1, [r2]
	strh r4, [r2]
	pop {r3, r4, r5, pc}
	.align 2, 0_020790C8: .word 0x82061029
_020790CC: .word 0x04000208

	arm_func_start FUN_020790d0
FUN_020790d0: ; 0x020790D0
	push {r4, r5, r6, lr}
	mov r5, r0
	ldrb r2, [r5]
	ldrb r0, [r5, #1]
	ldrsb r1, [r5, #2]
	mov r4, r3
	add r0, r2, r0, lsl #8
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	lsrs r6, r0, #0x10
	str r1, [r4, #0x34]
	streq r1, [r4, #0x2c]
	beq _02079120
	ldr r0, [r4, #0x2c]
	subs r0, r1, r0
	moveq r6, #0
	beq _02079120
	mov r1, r6
	bl FUN_0201f9bc
	str r0, [r4, #0x30]
	arm_func_end FUN_020790d0
_02079120:
	strh r6, [r4, #0x38]
	add r0, r5, #3
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0207912c
FUN_0207912c: ; 0x0207912C
	push {r4, lr}
	ldrb r4, [r0]
	ldr r1, [r3, #0x2c]
	ldr r2, [r3, #0xc0]
	asr r1, r1, #0x10
	mul lr, r1, r4
	strb r4, [r3, #0x4c]
	ldrsb r1, [r2, #8]
	ldr r2, _020791B0 ; =0x82061029
	ldr ip, _020791B4 ; =0x04000208
	mul lr, r1, lr
	smull r1, r4, r2, lr
	add r4, lr, r4
	lsr r1, lr, #0x1f
	add r4, r1, r4, asr #13
	strh r4, [r3, #0x18]
	ldrh r4, [ip]
	mov r1, #0
	strh r1, [ip]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _0207919C
	arm_func_end FUN_0207912c
_02079184:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x20
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _02079184
_0207919C:
	ldr r2, _020791B4 ; =0x04000208
	add r0, r0, #1
	ldrh r1, [r2]
	strh r4, [r2]
	pop {r4, pc}
	.align 2, 0_020791B0: .word 0x82061029
_020791B4: .word 0x04000208

	arm_func_start FUN_020791b8
FUN_020791b8: ; 0x020791B8
	push {r3, r4, r5, lr}
	ldrb r5, [r0]
	ldrb r1, [r0, #1]
	ldrb r4, [r0, #2]
	ldrb ip, [r0, #3]
	ldrb lr, [r0, #4]
	mov r2, #0
	add r1, r5, r1, lsl #8
	lsl r1, r1, #0x10
	asr r5, r1, #0x10
	add r4, r4, ip, lsl #8
	mov ip, #1
	mov r1, #2
	strb ip, [r3, #0x81]
	strb r1, [r3, #0x82]
	strb lr, [r3, #0x83]
	str r5, [r3, #0x84]
	strh r4, [r3, #0x88]
	strh r2, [r3, #0x8a]
	strh r2, [r3, #0x8c]
	strb r2, [r3, #0x8e]
	add r0, r0, #5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020791b8

	arm_func_start FUN_02079214
FUN_02079214: ; 0x02079214
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0x8a]
	ldrb r2, [r0, #2]
	ldrb r1, [r0, #3]
	add r0, r0, #4
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0x8c]
	bx lr
	arm_func_end FUN_02079214

	arm_func_start FUN_0207923c
FUN_0207923c: ; 0x0207923C
	ldrb r1, [r0]
	add r0, r0, #1
	cmp r1, #2
	moveq r1, #1
	strb r1, [r3, #0x81]
	cmp r1, #0
	moveq r1, #0
	movne r1, #2
	strb r1, [r3, #0x82]
	bx lr
	arm_func_end FUN_0207923c

	arm_func_start FUN_02079264
FUN_02079264: ; 0x02079264
	push {r3, lr}
	ldrb lr, [r0]
	mov ip, #0
	ldr r1, [r3, #0xc0]
	cmp lr, #0x7f
	movgt lr, #0x7f
	lsl r2, lr, #0x10
	strh ip, [r3, #0x48]
	str r2, [r3, #0x44]
	str r2, [r3, #0x3c]
	ldrsb r2, [r1, #7]
	ldr r1, _020792E0 ; =0x04000208
	sub r2, r2, #0x40
	add r2, lr, r2
	strh r2, [r3, #0x1a]
	ldrh lr, [r1]
	strh ip, [r1]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _020792CC
	arm_func_end FUN_02079264
_020792B4:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x40
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _020792B4
_020792CC:
	ldr r2, _020792E0 ; =0x04000208
	add r0, r0, #1
	ldrh r1, [r2]
	strh lr, [r2]
	pop {r3, pc}
	.align 2, 0_020792E0: .word 0x04000208

	arm_func_start FUN_020792e4
FUN_020792e4: ; 0x020792E4
	push {r3, lr}
	ldrsb r2, [r0]
	ldr r1, [r3, #0x3c]
	add lr, r2, r1, asr #16
	cmp lr, #0x7f
	movgt lr, #0x7f
	bgt _02079308
	cmp lr, #0
	movlt lr, #0
	arm_func_end FUN_020792e4
_02079308:
	lsl r2, lr, #0x10
	mov ip, #0
	ldr r1, [r3, #0xc0]
	str r2, [r3, #0x44]
	str r2, [r3, #0x3c]
	strh ip, [r3, #0x48]
	ldrsb r2, [r1, #7]
	ldr r1, _02079374 ; =0x04000208
	sub r2, r2, #0x40
	add r2, lr, r2
	strh r2, [r3, #0x1a]
	ldrh lr, [r1]
	strh ip, [r1]
	ldr r2, [r3, #0xb0]
	cmp r2, #0
	beq _02079360
_02079348:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x40
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _02079348
_02079360:
	ldr r2, _02079374 ; =0x04000208
	add r0, r0, #1
	ldrh r1, [r2]
	strh lr, [r2]
	pop {r3, pc}
	.align 2, 0_02079374: .word 0x04000208

	arm_func_start FUN_02079378
FUN_02079378: ; 0x02079378
	push {r4, r5, r6, lr}
	mov r5, r0
	ldrb r2, [r5]
	ldrb r0, [r5, #1]
	ldrsb r1, [r5, #2]
	mov r4, r3
	add r0, r2, r0, lsl #8
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	lsrs r6, r0, #0x10
	str r1, [r4, #0x44]
	streq r1, [r4, #0x3c]
	beq _020793C8
	ldr r0, [r4, #0x3c]
	subs r0, r1, r0
	moveq r6, #0
	beq _020793C8
	mov r1, r6
	bl FUN_0201f9bc
	str r0, [r4, #0x40]
	arm_func_end FUN_02079378
_020793C8:
	strh r6, [r4, #0x48]
	add r0, r5, #3
	pop {r4, r5, r6, pc}

	arm_func_start FUN_020793d4
FUN_020793d4: ; 0x020793D4
	push {r3, r4, r5, lr}
	ldrb r5, [r0]
	ldrb r1, [r0, #1]
	ldrb r4, [r0, #2]
	ldrb ip, [r0, #3]
	ldrb lr, [r0, #4]
	mov r2, #0
	add r1, r5, r1, lsl #8
	lsl r1, r1, #0x10
	asr r5, r1, #0x10
	add r4, r4, ip, lsl #8
	mov ip, #1
	mov r1, #3
	strb ip, [r3, #0x91]
	strb r1, [r3, #0x92]
	strb lr, [r3, #0x93]
	str r5, [r3, #0x94]
	strh r4, [r3, #0x98]
	strh r2, [r3, #0x9a]
	strh r2, [r3, #0x9c]
	strb r2, [r3, #0x9e]
	add r0, r0, #5
	pop {r3, r4, r5, pc}
	arm_func_end FUN_020793d4

	arm_func_start FUN_02079430
FUN_02079430: ; 0x02079430
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0x9a]
	ldrb r2, [r0, #2]
	ldrb r1, [r0, #3]
	add r0, r0, #4
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0x9c]
	bx lr
	arm_func_end FUN_02079430

	arm_func_start FUN_02079458
FUN_02079458: ; 0x02079458
	ldrb r1, [r0]
	add r0, r0, #1
	cmp r1, #2
	moveq r1, #1
	strb r1, [r3, #0x91]
	cmp r1, #0
	moveq r1, #0
	movne r1, #3
	strb r1, [r3, #0x92]
	bx lr
	arm_func_end FUN_02079458

	arm_func_start FUN_02079480
FUN_02079480: ; 0x02079480
	push {r4, lr}
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	ldrb ip, [r3, #0x5d]
	add r3, r3, #0x70
	add r1, r2, r1, lsl #8
	lsl r1, r1, #0x10
	ldrb r4, [r0, #2]
	ldrb lr, [r0, #3]
	ldrb r2, [r0, #4]
	add r3, r3, ip, lsl #4
	asr r1, r1, #0x10
	strb r2, [r3, #3]
	str r1, [r3, #4]
	add r1, r4, lr, lsl #8
	strh r1, [r3, #8]
	mov r1, #0
	strh r1, [r3, #0xa]
	strh r1, [r3, #0xc]
	strb r1, [r3, #0xe]
	add r0, r0, #5
	pop {r4, pc}
	arm_func_end FUN_02079480

	arm_func_start FUN_020794d8
FUN_020794d8: ; 0x020794D8
	ldrb ip, [r3, #0x5d]
	ldrb r2, [r0]
	ldrb r1, [r0, #1]
	add r3, r3, #0x70
	add r3, r3, ip, lsl #4
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0xa]
	ldrb r2, [r0, #2]
	ldrb r1, [r0, #3]
	add r0, r0, #4
	add r1, r2, r1, lsl #8
	strh r1, [r3, #0xc]
	bx lr
	arm_func_end FUN_020794d8

	arm_func_start FUN_0207950c
FUN_0207950c: ; 0x0207950C
	ldrb r1, [r3, #0x5d]
	ldrb ip, [r0]
	add r2, r3, #0x70
	add r1, r2, r1, lsl #4
	ldrb r2, [r0, #1]
	cmp ip, #0xa
	arm_func_end FUN_0207950c

	arm_func_start switchD
switchD: ; 0x02079524
	addls pc, pc, ip, lsl #2
	b _02079614
	arm_func_end switchD
_0207952C: ; jump table
	b _02079614 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02079530
	b _02079558
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02079534
	b _02079560
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02079538
	b _02079568
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0207953C
	b _02079570
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02079540
	b _02079578
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02079544
	b _020795C8
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x02079548
	b _020795D4
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x0207954C
	b _020795E4
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02079550
	b _020795F8
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x02079554
	b _02079608
	arm_func_end caseD_a
_02079558:
	strb r2, [r3, #0x5d]
	b _02079614
_02079560:
	strb r2, [r1, #1]
	b _02079614
_02079568:
	strb r2, [r1, #2]
	b _02079614
_02079570:
	strb r2, [r1, #3]
	b _02079614
_02079578:
	ldrb r3, [r1, #2]
	cmp r3, #4

	arm_func_start switchD
switchD: ; 0x02079580
	addls pc, pc, r3, lsl #2
	b _020795B4
	arm_func_end switchD
_02079588: ; jump table
	b _020795B4 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0207958C
	b _0207959C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02079590
	b _020795A4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02079594
	b _020795AC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02079598
	b _020795B0
	arm_func_end caseD_4
_0207959C:
	mov r3, #0xa
	b _020795B8
_020795A4:
	mvn r3, #0x13
	b _020795B8
_020795AC:
	b _020795B4
_020795B0:
	b _0207959C
_020795B4:
	mov r3, #0x14
_020795B8:
	mul r3, r2, r3
	mov r2, r3
	str r2, [r1, #4]
	b _02079614
_020795C8:
	add r2, r2, r2, lsl #2
	strh r2, [r1, #8]
	b _02079614
_020795D4:
	mov r3, #0x14
	mul r3, r2, r3
	strh r3, [r1, #0xa]
	b _02079614
_020795E4:
	ldrh r3, [r1, #0xa]
	and r3, r3, #0xff00
	orr r2, r3, r2
_020795F0:
	strh r2, [r1, #0xa]
	b _02079614
_020795F8:
	ldrh r3, [r1, #0xa]
	and r3, r3, #0xff
	orr r2, r3, r2, lsl #8
	b _020795F0
_02079608:
	mov r3, #0x14
	mul r3, r2, r3
	strh r3, [r1, #0xc]
_02079614:
	add r0, r0, #2
	bx lr

	arm_func_start FUN_0207961c
FUN_0207961c: ; 0x0207961C
	push {r3, lr}
	ldrb ip, [r0, #1]
	ldrb r2, [r0]
	ldrb lr, [r0, #2]
	add r1, r3, #0x70
	cmp ip, #2
	strb r2, [r3, #0x5d]
	add r1, r1, r2, lsl #4
	moveq ip, #1
	strb ip, [r1, #1]
	strb lr, [r1, #2]
	add r0, r0, #3
	pop {r3, pc}
	arm_func_end FUN_0207961c

	arm_func_start FUN_02079650
FUN_02079650: ; 0x02079650
	push {r4, lr}
	mov r4, r0
	mov lr, r1
	ldrb r2, [r4]
	ldr r0, [lr, #0x28]
	ldr r3, [lr, #0xa0]
	ldr ip, [lr, #0x9c]
	mov r1, #8
	strb r2, [lr, #0x16]
	blx ip
	add r0, r4, #1
	pop {r4, pc}
	arm_func_end FUN_02079650

	arm_func_start FUN_02079680
FUN_02079680: ; 0x02079680
	add r0, r0, #2
	bx lr
	arm_func_end FUN_02079680

	arm_func_start FUN_02079688
FUN_02079688: ; 0x02079688
	ldr r0, _02079698 ; =0x020BBEBC
	mov r1, #0
	str r1, [r0]
	bx lr
	.align 2, 0_02079698: .word 0x020BBEBC
	arm_func_end FUN_02079688

	arm_func_start FUN_0207969c
FUN_0207969c: ; 0x0207969C
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	ldr r5, _02079818 ; =0x0208C52C
	add r4, sp, #0
	mov ip, #0
	mov r3, #4
	arm_func_end FUN_0207969c
_020796B4:
	ldrb r1, [r5, #1]
	ldrb r2, [r5], #2
	subs r3, r3, #1
	strb r1, [r4, #1]
	strb r2, [r4], #2
	bne _020796B4
	ldr r6, _0207981C ; =0x020BBEBC
	ldr r1, [r6]
	ldrb r4, [r1, #0x206]
	cmp r4, #0
	addeq sp, sp, #8
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	cmp r4, #0
	ldrb lr, [r1, #0x205]
	mov r5, #0
	beq _020797F8
	mov r2, #1
	add r3, sp, #0
_02079700:
	ldr r8, [r6]
	sub r4, r4, #1
	add r1, r8, lr
	ldrb r1, [r1, #4]
	add r7, lr, #1
	and lr, r7, #0xff
	cmp lr, #0x200
	moveq lr, ip
	and r4, r4, #0xff
	cmp r1, #0x80
	blo _02079778
	cmp r1, #0xf0
	strbhs r2, [r8, #0x20a]
	ldrhs r1, [r6]
	strbhs ip, [r1, #0x207]
	bhs _020797F0
	and r7, r1, #0xf0
	strb r7, [r8, #0x20b]
	and r8, r1, #0xf
	ldr r7, [r6]
	add r1, r3, r1, asr #4
	strb r8, [r7, #0x20c]
	ldrb r7, [r1, #-8]
	ldr r1, [r6]
	strb r7, [r1, #0x207]
	ldr r1, [r6]
	strb ip, [r1, #0x208]
	ldr r1, [r6]
	strb ip, [r1, #0x20a]
	b _020797F0
_02079778:
	ldrb r7, [r8, #0x20a]
	cmp r7, #0
	bne _020797F0
	ldr r8, [r6]
	ldrb r7, [r8, #0x208]
	add r7, r8, r7
	strb r1, [r7, #0x20d]
	ldr r7, [r6]
	ldrb r1, [r7, #0x208]
	add r1, r1, #1
	strb r1, [r7, #0x208]
	ldr r1, [r6]
	ldrb r8, [r1, #0x208]
	ldrb r7, [r1, #0x207]
	cmp r8, r7
	bne _020797F0
	ldrb r6, [r1, #0x20b]
	ldrb r5, [r1, #0x20c]
	ldr r2, _0207981C ; =0x020BBEBC
	mov r3, #0
	strb r6, [r0]
	strb r5, [r0, #1]
	ldrb r6, [r1, #0x20d]
	ldrb r1, [r1, #0x20e]
	mov r5, #1
	strb r6, [r0, #2]
	strb r1, [r0, #3]
	ldr r0, [r2]
	strb r3, [r0, #0x208]
	b _020797F8
_020797F0:
	cmp r4, #0
	bne _02079700
_020797F8:
	ldr r1, _0207981C ; =0x020BBEBC
	mov r0, r5
	ldr r2, [r1]
	strb r4, [r2, #0x206]
	ldr r1, [r1]
	strb lr, [r1, #0x205]
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02079818: .word 0x0208C52C
_0207981C: .word 0x020BBEBC

	arm_func_start FUN_02079820
FUN_02079820: ; 0x02079820
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r0, _020799EC ; =0x020BBEBC
	ldr r0, [r0]
	ldr r4, [r0]
	cmp r4, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sp, #8
	bl FUN_0207969c
	cmp r0, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add sb, r4, #0x10
	mov r4, #0
	ldr fp, _020799F0 ; =0x02091954
	mvn r6, #0x80000000
	add r7, sp, #0
	mov r5, #1
	mov r8, r4
	arm_func_end FUN_02079820
_02079870:
	ldrb r2, [sp, #9]
	mov r0, #0xc4
	ldrb r1, [sp, #8]
	mla sl, r2, r0, sb
	cmp r1, #0xc0
	bgt _020798B8
	bge _020799A4
	cmp r1, #0x90
	bgt _020798A4
	bge _02079924
	cmp r1, #0x80
	beq _020798F0
	b _020799D4
_020798A4:
	cmp r1, #0xa0
	ble _020799D4
	cmp r1, #0xb0
	beq _02079984
	b _020799D4
_020798B8:
	cmp r1, #0xf0
	bgt _020798D8
	bge _020799D4
	cmp r1, #0xd0
	ble _020799D4
	cmp r1, #0xe0
	beq _020799B4
	b _020799D4
_020798D8:
	cmp r1, #0xf7
	ble _020799D4
	cmp r1, #0xff
	bgt _020799D4
	cmp r1, #0xfe
	b _020799D4
_020798F0:
	ldrb r1, [sp, #0xa]
	ldrb r0, [sp, #0xb]
	str r8, [sp, #4]
	strb r1, [sp, #2]
	strb r0, [sp, #3]
	strb r8, [sp]
	ldrb r0, [sl, #4]
	tst r0, #1
	bne _020799D4
_02079914:
	mov r0, sl
	mov r1, r7
	bl FUN_0207a9fc
	b _020799D4
_02079924:
	ldrb r0, [sp, #0xb]
	ldrb r1, [sp, #0xa]
	str r6, [sp, #4]
	strb r0, [sp, #3]
	strb r1, [sp, #2]
	tst r0, #0xff
	beq _02079970
	mov r0, sl
	mov r1, r7
	strb r5, [sp]
	bl FUN_0207ab3c
	mov r0, sl
	mov r1, r7
	bl FUN_0207a96c
	movs r1, r0
	beq _020799D4
	mov r0, sl
	bl FUN_0207ab78
	b _020799D4
_02079970:
	strb r4, [sp]
	ldrb r0, [sl, #4]
	tst r0, #1
	bne _020799D4
	b _02079914
_02079984:
	ldrb r0, [sp, #0xa]
	ldr r2, [fp, r0, lsl #2]
	cmp r2, #0
	beq _020799D4
	ldrb r1, [sp, #0xb]
	mov r0, sl
	blx r2
	b _020799D4
_020799A4:
	ldrb r1, [sp, #0xa]
	mov r0, sl
	bl FUN_0207a864
	b _020799D4
_020799B4:
	ldrb r2, [sp, #0xa]
	ldrb r1, [sp, #0xb]
	mov r0, sl
	add r1, r2, r1, lsl #7
	sub r1, r1, #0x2000
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	bl FUN_0207a924
_020799D4:
	add r0, sp, #8
	bl FUN_0207969c
	cmp r0, #0
	bne _02079870
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020799EC: .word 0x020BBEBC
_020799F0: .word 0x02091954

	arm_func_start FUN_020799f4
FUN_020799f4: ; 0x020799F4
	ldrh r2, [r0, #0xe]
	ldr ip, _02079A10 ; =FUN_0207a82c
	and r2, r2, #0xff
	add r1, r2, r1, lsl #8
	strh r1, [r0, #0xe]
	ldrh r1, [r0, #0xe]
	bx ip
	.align 2, 0_02079A10: .word FUN_0207a82c
	arm_func_end FUN_020799f4

	arm_func_start FUN_02079a14
FUN_02079a14: ; 0x02079A14
	ldrh r2, [r0, #0xe]
	ldr ip, _02079A30 ; =FUN_0207a82c
	bic r2, r2, #0xff
	add r1, r2, r1
	lsl r1, r1, #0x10
	lsr r1, r1, #0x10
	bx ip
	.align 2, 0_02079A30: .word FUN_0207a82c
	arm_func_end FUN_02079a14

	arm_func_start FUN_02079a34
FUN_02079a34: ; 0x02079A34
	lsl r1, r1, #0x18
	asr r1, r1, #0x18
	ldr ip, _02079A48 ; =FUN_0207a8f0
	strb r1, [r0, #0x4d]
	bx ip
	.align 2, 0_02079A48: .word FUN_0207a8f0
	arm_func_end FUN_02079a34

	arm_func_start FUN_02079a4c
FUN_02079a4c: ; 0x02079A4C
	mov r2, #0xa
	mul r2, r1, r2
	strh r2, [r0, #0x52]
	bx lr
	arm_func_end FUN_02079a4c

	arm_func_start FUN_02079a5c
FUN_02079a5c: ; 0x02079A5C
	push {r4, lr}
	ldrb r2, [r0, #0x4c]
	lsl r3, r1, #0x10
	mov r4, #0
	mul ip, r1, r2
	ldr r1, [r0, #0xc0]
	str r3, [r0, #0x34]
	str r3, [r0, #0x2c]
	strh r4, [r0, #0x38]
	ldrsb r1, [r1, #8]
	ldr r2, _02079AE0 ; =0x82061029
	ldr r3, _02079AE4 ; =0x04000208
	mul ip, r1, ip
	smull r1, lr, r2, ip
	add lr, ip, lr
	lsr r1, ip, #0x1f
	add lr, r1, lr, asr #13
	strh lr, [r0, #0x18]
	ldrh r2, [r3]
	strh r4, [r3]
	ldr r1, [r0, #0xb0]
	cmp r1, #0
	beq _02079AD0
	arm_func_end FUN_02079a5c
_02079AB8:
	ldrh r0, [r1, #6]
	orr r0, r0, #0x20
	strh r0, [r1, #6]
	ldr r1, [r1, #0x154]
	cmp r1, #0
	bne _02079AB8
_02079AD0:
	ldr r1, _02079AE4 ; =0x04000208
	ldrh r0, [r1]
	strh r2, [r1]
	pop {r4, pc}
	.align 2, 0_02079AE0: .word 0x82061029
_02079AE4: .word 0x04000208

	arm_func_start FUN_02079ae8
FUN_02079ae8: ; 0x02079AE8
	lsl r2, r1, #0x10
	mov ip, #0
	ldr r3, [r0, #0xc0]
	str r2, [r0, #0x44]
	str r2, [r0, #0x3c]
	strh ip, [r0, #0x48]
	ldrsb r3, [r3, #7]
	ldr r2, _02079B50 ; =0x04000208
	sub r3, r3, #0x40
	add r1, r1, r3
	strh r1, [r0, #0x1a]
	ldrh r3, [r2]
	strh ip, [r2]
	ldr r1, [r0, #0xb0]
	cmp r1, #0
	beq _02079B40
	arm_func_end FUN_02079ae8
_02079B28:
	ldrh r0, [r1, #6]
	orr r0, r0, #0x40
	strh r0, [r1, #6]
	ldr r1, [r1, #0x154]
	cmp r1, #0
	bne _02079B28
_02079B40:
	ldr r1, _02079B50 ; =0x04000208
	ldrh r0, [r1]
	strh r3, [r1]
	bx lr
	.align 2, 0_02079B50: .word 0x04000208

	arm_func_start FUN_02079b54
FUN_02079b54: ; 0x02079B54
	push {r3, lr}
	ldr r2, [r0, #0x2c]
	ldr r3, [r0, #0xc0]
	asr r2, r2, #0x10
	mul ip, r2, r1
	strb r1, [r0, #0x4c]
	ldrsb r1, [r3, #8]
	ldr r2, _02079BD0 ; =0x82061029
	ldr r3, _02079BD4 ; =0x04000208
	mul ip, r1, ip
	smull r1, lr, r2, ip
	add lr, ip, lr
	lsr r1, ip, #0x1f
	add lr, r1, lr, asr #13
	strh lr, [r0, #0x18]
	ldrh r2, [r3]
	mov r1, #0
	strh r1, [r3]
	ldr r1, [r0, #0xb0]
	cmp r1, #0
	beq _02079BC0
	arm_func_end FUN_02079b54
_02079BA8:
	ldrh r0, [r1, #6]
	orr r0, r0, #0x20
	strh r0, [r1, #6]
	ldr r1, [r1, #0x154]
	cmp r1, #0
	bne _02079BA8
_02079BC0:
	ldr r1, _02079BD4 ; =0x04000208
	ldrh r0, [r1]
	strh r2, [r1]
	pop {r3, pc}
	.align 2, 0_02079BD0: .word 0x82061029
_02079BD4: .word 0x04000208

	arm_func_start FUN_02079bd8
FUN_02079bd8: ; 0x02079BD8
	strb r1, [r0, #0x54]
	bx lr
	arm_func_end FUN_02079bd8

	arm_func_start FUN_02079be0
FUN_02079be0: ; 0x02079BE0
	push {r3, lr}
	cmp r1, #0x40
	ldrb r1, [r0, #4]
	orrhs r1, r1, #1
	strbhs r1, [r0, #4]
	pophs {r3, pc}
	and r1, r1, #0xfe
	strb r1, [r0, #4]
	bl FUN_0207b514
	pop {r3, pc}
	arm_func_end FUN_02079be0

	arm_func_start FUN_02079c08
FUN_02079c08: ; 0x02079C08
	bx lr
	arm_func_end FUN_02079c08

	arm_func_start FUN_02079c0c
FUN_02079c0c: ; 0x02079C0C
	bx lr
	arm_func_end FUN_02079c0c

	arm_func_start FUN_02079c10
FUN_02079c10: ; 0x02079C10
	bx lr
	arm_func_end FUN_02079c10

	arm_func_start FUN_02079c14
FUN_02079c14: ; 0x02079C14
	bx lr
	arm_func_end FUN_02079c14

	arm_func_start FUN_02079c18
FUN_02079c18: ; 0x02079C18
	mov r2, #1
	strb r1, [r0, #0x58]
	strb r2, [r0, #0x5c]
	bx lr
	arm_func_end FUN_02079c18

	arm_func_start FUN_02079c28
FUN_02079c28: ; 0x02079C28
	mov r2, #0
	strb r1, [r0, #0x56]
	strb r2, [r0, #0x5c]
	bx lr
	arm_func_end FUN_02079c28

	arm_func_start FUN_02079c38
FUN_02079c38: ; 0x02079C38
	mov r2, #0
	strb r1, [r0, #0x57]
	strb r2, [r0, #0x5c]
	bx lr
	arm_func_end FUN_02079c38

	arm_func_start FUN_02079c48
FUN_02079c48: ; 0x02079C48
	bx lr
	arm_func_end FUN_02079c48

	arm_func_start FUN_02079c4c
FUN_02079c4c: ; 0x02079C4C
	bx lr
	arm_func_end FUN_02079c4c

	arm_func_start FUN_02079c50
FUN_02079c50: ; 0x02079C50
	push {r4, lr}
	ldr r4, _02079C74 ; =0x020BBEBC
	ldr r0, [r4]
	ldr r0, [r0]
	bl FUN_0207a120
	ldr r0, [r4]
	ldr r0, [r0]
	bl FUN_0207a05c
	pop {r4, pc}
	.align 2, 0_02079C74: .word 0x020BBEBC
	arm_func_end FUN_02079c50
_02079C78:
	.byte 0x14, 0x00, 0x9F, 0xE5, 0x00, 0x10, 0xA0, 0xE3
	.byte 0x00, 0x00, 0x90, 0xE5, 0x0C, 0xC0, 0x9F, 0xE5, 0x00, 0x00, 0x90, 0xE5, 0x01, 0x20, 0xA0, 0xE1
	.byte 0x1C, 0xFF, 0x2F, 0xE1, 0xBC, 0xBE, 0x0B, 0x02, 0xEC, 0xA4, 0x07, 0x02

	arm_func_start FUN_02079c9c
FUN_02079c9c: ; 0x02079C9C
	push {r3, r4, r5, lr}
	mov r4, r0
	bl FUN_0207a72c
	ldr r1, _02079D14 ; =0x04000208
	mov r0, #0
	ldrh r5, [r1]
	strh r0, [r1]
	ldr lr, [r4, #0xb4]
	cmp lr, #0
	ldrheq r0, [r1]
	strheq r5, [r1]
	popeq {r3, r4, r5, pc}
	mov ip, lr
	mvn r1, #0
	mov r3, r0
	arm_func_end FUN_02079c9c
_02079CD8:
	str r1, [lr, #4]
	strb r3, [ip, #1]
	ldr r0, [ip, #8]
	cmp r0, #0
	movne ip, r0
	bne _02079CD8
	ldr r0, _02079D18 ; =0x020B9FD8
	ldr r1, _02079D14 ; =0x04000208
	ldr r2, [r0, #0x658]
	str r2, [ip, #8]
	str lr, [r0, #0x658]
	str r3, [r4, #0xb4]
	ldrh r0, [r1]
	strh r5, [r1]
	pop {r3, r4, r5, pc}
	.align 2, 0_02079D14: .word 0x04000208
_02079D18: .word 0x020B9FD8

	arm_func_start FUN_02079d1c
FUN_02079d1c: ; 0x02079D1C
	mov r1, #0
	strb r1, [r0, #7]
	bx lr
	arm_func_end FUN_02079d1c

	arm_func_start FUN_02079d28
FUN_02079d28: ; 0x02079D28
	mov r1, #1
	strb r1, [r0, #7]
	bx lr
	arm_func_end FUN_02079d28

	arm_func_start FUN_02079d34
FUN_02079d34: ; 0x02079D34
	ldr ip, _02079D44 ; =FUN_0207b9e0
	strb r1, [r0, #0x6e]
	add r0, r0, #0x60
	bx ip
	.align 2, 0_02079D44: .word FUN_0207b9e0
	arm_func_end FUN_02079d34

	arm_func_start FUN_02079d48
FUN_02079d48: ; 0x02079D48
	ldr ip, _02079D58 ; =FUN_0207b9e0
	strb r1, [r0, #0x69]
	add r0, r0, #0x60
	bx ip
	.align 2, 0_02079D58: .word FUN_0207b9e0
	arm_func_end FUN_02079d48

	arm_func_start FUN_02079d5c
FUN_02079d5c: ; 0x02079D5C
	ldr ip, _02079D6C ; =FUN_0207b9e0
	strb r1, [r0, #0x6a]
	add r0, r0, #0x60
	bx ip
	.align 2, 0_02079D6C: .word FUN_0207b9e0
	arm_func_end FUN_02079d5c

	arm_func_start FUN_02079d70
FUN_02079d70: ; 0x02079D70
	ldr ip, _02079D80 ; =FUN_0207b9e0
	strb r1, [r0, #0x6b]
	add r0, r0, #0x60
	bx ip
	.align 2, 0_02079D80: .word FUN_0207b9e0
	arm_func_end FUN_02079d70

	arm_func_start FUN_02079d84
FUN_02079d84: ; 0x02079D84
	ldr ip, _02079D94 ; =FUN_0207b9e0
	strb r1, [r0, #0x6d]
	add r0, r0, #0x60
	bx ip
	.align 2, 0_02079D94: .word FUN_0207b9e0
	arm_func_end FUN_02079d84

	arm_func_start FUN_02079d98
FUN_02079d98: ; 0x02079D98
	ldr ip, _02079DA8 ; =FUN_0207b9e0
	strb r1, [r0, #0x6c]
	add r0, r0, #0x60
	bx ip
	.align 2, 0_02079DA8: .word FUN_0207b9e0
	arm_func_end FUN_02079d98

	arm_func_start FUN_02079dac
FUN_02079dac: ; 0x02079DAC
	ldr ip, _02079DB8 ; =FUN_0207b9c4
	add r0, r0, #0x60
	bx ip
	.align 2, 0_02079DB8: .word FUN_0207b9c4
	arm_func_end FUN_02079dac

	arm_func_start FUN_02079dbc
FUN_02079dbc: ; 0x02079DBC
	ldrb r2, [r0, #0x5d]
	add r1, r1, r1, lsl #2
	add r0, r0, r2, lsl #4
	strh r1, [r0, #0x78]
	bx lr
	arm_func_end FUN_02079dbc

	arm_func_start FUN_02079dd0
FUN_02079dd0: ; 0x02079DD0
	and r3, r1, #2
	add r2, r0, #0x70
	strb r3, [r0, #0x5d]
	add r2, r2, r3, lsl #4
	asr r0, r1, #2
	strb r0, [r2, #1]
	add r0, r3, #1
	strb r0, [r2, #2]
	bx lr
	arm_func_end FUN_02079dd0

	arm_func_start FUN_02079df4
FUN_02079df4: ; 0x02079DF4
	ldrb r2, [r0, #0x5d]
	add r0, r0, r2, lsl #4
	strb r1, [r0, #0x73]
	bx lr
	arm_func_end FUN_02079df4

	arm_func_start FUN_02079e04
FUN_02079e04: ; 0x02079E04
	ldrb r2, [r0, #0x5d]
	add r0, r0, #0x70
	add r0, r0, r2, lsl #4
	ldrb r2, [r0, #2]
	cmp r2, #4
	arm_func_end FUN_02079e04

	arm_func_start switchD
switchD: ; 0x02079E18
	addls pc, pc, r2, lsl #2
	b _02079E4C
	arm_func_end switchD
_02079E20: ; jump table
	b _02079E4C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02079E24
	b _02079E34
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02079E28
	b _02079E3C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02079E2C
	b _02079E44
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02079E30
	b _02079E48
	arm_func_end caseD_4
_02079E34:
	mov r2, #0xa
	b _02079E50
_02079E3C:
	mvn r2, #0x13
	b _02079E50
_02079E44:
	b _02079E4C
_02079E48:
	b _02079E34
_02079E4C:
	mov r2, #0x14
_02079E50:
	mul r2, r1, r2
	lsl r1, r2, #0x10
	asr r1, r1, #0x10
	str r1, [r0, #4]
	bx lr

	arm_func_start FUN_02079e64
FUN_02079e64: ; 0x02079E64
	mov r2, #0x14
	mul r2, r1, r2
	ldrb r1, [r0, #0x5d]
	add r0, r0, r1, lsl #4
	strh r2, [r0, #0x7a]
	bx lr
	arm_func_end FUN_02079e64

	arm_func_start FUN_02079e7c
FUN_02079e7c: ; 0x02079E7C
	mov r2, #0x14
	mul r2, r1, r2
	ldrb r1, [r0, #0x5d]
	add r0, r0, r1, lsl #4
	strh r2, [r0, #0x7c]
	bx lr
	arm_func_end FUN_02079e7c

	arm_func_start FUN_02079e94
FUN_02079e94: ; 0x02079E94
	strb r1, [r0, #0x55]
	bx lr
	arm_func_end FUN_02079e94

	arm_func_start FUN_02079e9c
FUN_02079e9c: ; 0x02079E9C
	bx lr
	arm_func_end FUN_02079e9c

	arm_func_start FUN_02079ea0
FUN_02079ea0: ; 0x02079EA0
	bx lr
	arm_func_end FUN_02079ea0

	arm_func_start FUN_02079ea4
FUN_02079ea4: ; 0x02079EA4
	bx lr
	arm_func_end FUN_02079ea4

	arm_func_start FUN_02079ea8
FUN_02079ea8: ; 0x02079EA8
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _02079F14 ; =0x020B9FD8
	mov r4, #0x7f
	ldrsb r7, [r1, #0x49]
	mov r5, #0
	mov r6, #1
	and r1, r7, #0xff
	smulbb r3, r1, r4
	ldr r2, _02079F18 ; =0x81020409
	mov lr, #0x40
	smull r1, ip, r2, r3
	add ip, r3, ip
	lsr r1, r3, #0x1f
	add ip, r1, ip, asr #6
	ldr r1, _02079F1C ; =0x020BA6D8
	strb r7, [r0, #2]
	strb r6, [r0, #3]
	strh r5, [r0, #4]
	strb r4, [r0, #6]
	strb lr, [r0, #7]
	strb ip, [r0, #8]
	strb r5, [r0, #9]
	strb r5, [r0, #0xa]
	ldrh r1, [r1, #0x3a]
	strb r1, [r0, #0xb]
	str r5, [r0, #0xc]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02079F14: .word 0x020B9FD8
_02079F18: .word 0x81020409
_02079F1C: .word 0x020BA6D8
	arm_func_end FUN_02079ea8

	arm_func_start FUN_02079f20
FUN_02079f20: ; 0x02079F20
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r0, #0xc4
	mul r0, r6, r0
	mov r2, r1
	add r0, r0, #0x10
	mov r1, #0x10
	bl FUN_020752b0
	movs r4, r0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r5, #0
	strb r5, [r4]
	strb r6, [r4, #1]
	str r5, [r4, #0xc]
	bl FUN_02079ea8
	cmp r6, #0
	add r1, r4, #0x10
	ble _02079F9C
	mov r0, r5
	arm_func_end FUN_02079f20
_02079F70:
	str r0, [r1]
	strb r5, [r1, #5]
	str r0, [r1, #0xb0]
	str r0, [r1, #0xb4]
	str r0, [r1, #0xb8]
	str r0, [r1, #0xbc]
	add r5, r5, #1
	str r4, [r1, #0xc0]
	cmp r5, r6
	add r1, r1, #0xc4
	blt _02079F70
_02079F9C:
	ldr r1, _02079FE4 ; =0x04000208
	mov r0, #0
	ldrh r3, [r1]
	ldr r2, _02079FE8 ; =0x020BA638
	strh r0, [r1]
	ldr r0, [r2]
	cmp r0, #0
	beq _02079FCC
_02079FBC:
	add r2, r0, #0xc
	ldr r0, [r0, #0xc]
	cmp r0, #0
	bne _02079FBC
_02079FCC:
	ldr r1, _02079FE4 ; =0x04000208
	str r4, [r2]
	ldrh r0, [r1]
	mov r0, r4
	strh r3, [r1]
	pop {r4, r5, r6, pc}
	.align 2, 0_02079FE4: .word 0x04000208
_02079FE8: .word 0x020BA638

	arm_func_start FUN_02079fec
FUN_02079fec: ; 0x02079FEC
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_0207a120
	ldr r2, _0207A054 ; =0x04000208
	mov r0, r5
	ldrh r4, [r2]
	mov r1, #0
	strh r1, [r2]
	bl FUN_0207a05c
	ldr r1, _0207A058 ; =0x020BA638
	b _0207A01C
	arm_func_end FUN_02079fec
_0207A018:
	add r1, r0, #0xc
_0207A01C:
	ldr r0, [r1]
	cmp r0, #0
	beq _0207A030
	cmp r0, r5
	bne _0207A018
_0207A030:
	cmp r0, r5
	ldreq r0, [r5, #0xc]
	ldr r2, _0207A054 ; =0x04000208
	streq r0, [r1]
	ldrh r1, [r2]
	mov r0, r5
	strh r4, [r2]
	bl FUN_020754fc
	pop {r3, r4, r5, pc}
	.align 2, 0_0207A054: .word 0x04000208
_0207A058: .word 0x020BA638

	arm_func_start FUN_0207a05c
FUN_0207a05c: ; 0x0207A05C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrb r3, [r0, #1]
	add r1, r0, #0x10
	mov r2, #0
	cmp r3, #0
	pople {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r7, _0207A0F0 ; =0x04000208
	ldr ip, _0207A0F4 ; =0x020B9FD8
	mvn r5, #0
	mov r4, r2
	mov r6, r2
	arm_func_end FUN_0207a05c
_0207A088:
	ldrh r3, [r7]
	strh r6, [r7]
	ldr sb, [r1, #0xb4]
	cmp sb, #0
	ldrheq lr, [r7]
	strheq r3, [r7]
	beq _0207A0D8
	mov r8, sb
_0207A0A8:
	str r5, [sb, #4]
	strb r4, [r8, #1]
	ldr lr, [r8, #8]
	cmp lr, #0
	movne r8, lr
	bne _0207A0A8
	ldr lr, [ip, #0x658]
	str lr, [r8, #8]
	str sb, [ip, #0x658]
	str r4, [r1, #0xb4]
	ldrh lr, [r7]
	strh r3, [r7]
_0207A0D8:
	ldrb r3, [r0, #1]
	add r2, r2, #1
	add r1, r1, #0xc4
	cmp r2, r3
	blt _0207A088
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0207A0F0: .word 0x04000208
_0207A0F4: .word 0x020B9FD8

	arm_func_start FUN_0207a0f8
FUN_0207a0f8: ; 0x0207A0F8
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	mov r4, r2
	bl FUN_02079ea8
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_0207a4ec
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0207a0f8

	arm_func_start FUN_0207a120
FUN_0207a120: ; 0x0207A120
	push {r3, r4, r5, lr}
	ldrb r5, [r0, #1]
	add r4, r0, #0x10
	cmp r5, #0
	popeq {r3, r4, r5, pc}
	arm_func_end FUN_0207a120
_0207A134:
	mov r0, r4
	bl FUN_0207a72c
	subs r5, r5, #1
	add r4, r4, #0xc4
	bne _0207A134
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0207a14c
FUN_0207a14c: ; 0x0207A14C
	push {r3, r4, r5, r6, r7, lr}
	ldr r3, _0207A1A0 ; =0x04000208
	mov r2, #0
	ldrh r6, [r3]
	mov r7, r1
	add r4, r0, #0x10
	strh r2, [r3]
	ldrb r5, [r0, #1]
	strb r7, [r0, #9]
	cmp r5, #0
	beq _0207A190
	arm_func_end FUN_0207a14c
_0207A178:
	mov r0, r4
	mov r1, r7
	bl FUN_0207a7b0
	subs r5, r5, #1
	add r4, r4, #0xc4
	bne _0207A178
_0207A190:
	ldr r1, _0207A1A0 ; =0x04000208
	ldrh r0, [r1]
	strh r6, [r1]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207A1A0: .word 0x04000208

	arm_func_start FUN_0207a1a4
FUN_0207a1a4: ; 0x0207A1A4
	push {r3, r4, r5, r6, r7, lr}
	ldr r2, _0207A208 ; =0x04000208
	ldrb r6, [r0, #1]
	ldrh r4, [r2]
	mov r1, #0
	cmp r6, #0
	strh r1, [r2]
	add r5, r0, #0x10
	beq _0207A1F8
	arm_func_end FUN_0207a1a4
_0207A1C8:
	ldr r7, [r5, #0xb4]
	cmp r7, #0
	beq _0207A1EC
_0207A1D4:
	mov r0, r5
	mov r1, r7
	bl FUN_0207ab78
	ldr r7, [r7, #8]
	cmp r7, #0
	bne _0207A1D4
_0207A1EC:
	subs r6, r6, #1
	add r5, r5, #0xc4
	bne _0207A1C8
_0207A1F8:
	ldr r1, _0207A208 ; =0x04000208
	ldrh r0, [r1]
	strh r4, [r1]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207A208: .word 0x04000208

	arm_func_start FUN_0207a20c
FUN_0207a20c: ; 0x0207A20C
	push {r4, r5, r6, r7, r8, lr}
	ldr r3, _0207A2E4 ; =0x020BA020
	ldrb r5, [r0, #1]
	ldrsb r8, [r3, r1]
	ldrsb r3, [r0, #6]
	ldr r4, _0207A2E8 ; =0x81020409
	and r6, r8, #0xff
	smulbb r6, r6, r3
	smull r3, r7, r4, r6
	add r7, r6, r7
	lsr r3, r6, #0x1f
	add r7, r3, r7, asr #6
	strb r1, [r0, #3]
	strb r8, [r0, #2]
	strb r7, [r0, #8]
	cmp r5, #0
	add r1, r0, #0x10
	mov r3, #0
	pople {r4, r5, r6, r7, r8, pc}
	ldr r6, _0207A2EC ; =0x04000208
	mov r5, r3
	arm_func_end FUN_0207a20c
_0207A260:
	ldr ip, [r1, #0x2c]
	ldrb r4, [r1, #0x4c]
	asr ip, ip, #0x10
	ldrsb lr, [r0, #8]
	mul r4, ip, r4
	mul r7, lr, r4
	ldr r4, _0207A2F0 ; =0x82061029
	lsr ip, r7, #0x1f
	smull lr, r8, r4, r7
	add r8, r7, r8
	add r8, ip, r8, asr #13
	strh r8, [r1, #0x18]
	cmp r2, #1
	bne _0207A2CC
	ldrh r8, [r6]
	strh r5, [r6]
	ldr r7, [r1, #0xb0]
	cmp r7, #0
	beq _0207A2C4
_0207A2AC:
	ldrh r4, [r7, #6]
	orr r4, r4, #0x20
	strh r4, [r7, #6]
	ldr r7, [r7, #0x154]
	cmp r7, #0
	bne _0207A2AC
_0207A2C4:
	ldrh r4, [r6]
	strh r8, [r6]
_0207A2CC:
	ldrb r4, [r0, #1]
	add r3, r3, #1
	add r1, r1, #0xc4
	cmp r3, r4
	blt _0207A260
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0207A2E4: .word 0x020BA020
_0207A2E8: .word 0x81020409
_0207A2EC: .word 0x04000208
_0207A2F0: .word 0x82061029

	arm_func_start FUN_0207a2f4
FUN_0207a2f4: ; 0x0207A2F4
	push {r3, r4, r5, lr}
	ldrb r2, [r0, #1]
	strh r1, [r0, #4]
	add r1, r0, #0x10
	cmp r2, #0
	mov r2, #0
	pople {r3, r4, r5, pc}
	ldr lr, _0207A384 ; =0x04000208
	mov ip, r2
	arm_func_end FUN_0207a2f4
_0207A318:
	ldr r3, [r1, #0x1c]
	ldrsh r4, [r1, #0x50]
	asr r3, r3, #0x10
	lsl r3, r3, #0x10
	ldrsh r5, [r0, #4]
	add r3, r4, r3, asr #16
	add r3, r5, r3
	strh r3, [r1, #0x16]
	ldrh r5, [lr]
	strh ip, [lr]
	ldr r4, [r1, #0xb0]
	cmp r4, #0
	beq _0207A364
_0207A34C:
	ldrh r3, [r4, #6]
	orr r3, r3, #0x10
	strh r3, [r4, #6]
	ldr r4, [r4, #0x154]
	cmp r4, #0
	bne _0207A34C
_0207A364:
	ldrh r3, [lr]
	add r2, r2, #1
	add r1, r1, #0xc4
	strh r5, [lr]
	ldrb r3, [r0, #1]
	cmp r2, r3
	blt _0207A318
	pop {r3, r4, r5, pc}
	.align 2, 0_0207A384: .word 0x04000208

	arm_func_start FUN_0207a388
FUN_0207a388: ; 0x0207A388
	push {r4, r5, r6, lr}
	strb r1, [r0, #6]
	ldrb r4, [r0, #2]
	ldrsb r1, [r0, #6]
	ldr r2, _0207A44C ; =0x81020409
	ldrb r3, [r0, #1]
	smulbb r4, r4, r1
	smull r1, r5, r2, r4
	add r5, r4, r5
	lsr r1, r4, #0x1f
	add r5, r1, r5, asr #6
	strb r5, [r0, #8]
	cmp r3, #0
	add r1, r0, #0x10
	mov r2, #0
	pople {r4, r5, r6, pc}
	ldr r4, _0207A450 ; =0x04000208
	ldr ip, _0207A454 ; =0x82061029
	mov lr, r2
	arm_func_end FUN_0207a388
_0207A3D4:
	ldr r5, [r1, #0x2c]
	ldrb r3, [r1, #0x4c]
	asr r5, r5, #0x10
	ldrsb r6, [r0, #8]
	mul r3, r5, r3
	mul r5, r6, r3
	smull r3, r6, ip, r5
	add r6, r5, r6
	lsr r3, r5, #0x1f
	add r6, r3, r6, asr #13
	strh r6, [r1, #0x18]
	ldrh r6, [r4]
	strh lr, [r4]
	ldr r5, [r1, #0xb0]
	cmp r5, #0
	beq _0207A42C
_0207A414:
	ldrh r3, [r5, #6]
	orr r3, r3, #0x20
	strh r3, [r5, #6]
	ldr r5, [r5, #0x154]
	cmp r5, #0
	bne _0207A414
_0207A42C:
	ldrh r3, [r4]
	add r2, r2, #1
	add r1, r1, #0xc4
	strh r6, [r4]
	ldrb r3, [r0, #1]
	cmp r2, r3
	blt _0207A3D4
	pop {r4, r5, r6, pc}
	.align 2, 0_0207A44C: .word 0x81020409
_0207A450: .word 0x04000208
_0207A454: .word 0x82061029

	arm_func_start FUN_0207a458
FUN_0207a458: ; 0x0207A458
	push {r3, r4, r5, lr}
	ldrb r2, [r0, #1]
	strb r1, [r0, #7]
	add r1, r0, #0x10
	cmp r2, #0
	mov r2, #0
	pople {r3, r4, r5, pc}
	ldr lr, _0207A4E8 ; =0x04000208
	mov ip, r2
	arm_func_end FUN_0207a458
_0207A47C:
	ldr r3, [r1, #0xc0]
	ldr r4, [r1, #0x3c]
	ldrsb r3, [r3, #7]
	asr r4, r4, #0x10
	and r4, r4, #0xff
	sub r3, r3, #0x40
	add r3, r4, r3
	strh r3, [r1, #0x1a]
	ldrh r5, [lr]
	strh ip, [lr]
	ldr r4, [r1, #0xb0]
	cmp r4, #0
	beq _0207A4C8
_0207A4B0:
	ldrh r3, [r4, #6]
	orr r3, r3, #0x40
	strh r3, [r4, #6]
	ldr r4, [r4, #0x154]
	cmp r4, #0
	bne _0207A4B0
_0207A4C8:
	ldrh r3, [lr]
	add r2, r2, #1
	add r1, r1, #0xc4
	strh r5, [lr]
	ldrb r3, [r0, #1]
	cmp r2, r3
	blt _0207A47C
	pop {r3, r4, r5, pc}
	.align 2, 0_0207A4E8: .word 0x04000208

	arm_func_start FUN_0207a4ec
FUN_0207a4ec: ; 0x0207A4EC
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r3, _0207A578 ; =0x020B9FD8
	mov sl, r0
	ldrsb r6, [r3, #0x45]
	mov r7, #0
	mov sb, r1
	strb r7, [r3, #0x45]
	ldrb r0, [sl, #1]
	mov r8, r2
	add r5, sl, #0x10
	cmp r0, #0
	ble _0207A56C
	lsl r0, sb, #0x10
	lsr r4, r0, #0x10
	arm_func_end FUN_0207a4ec
_0207A524:
	mov r0, r5
	bl FUN_0207a72c
	mov r0, r5
	mov r1, r8
	bl FUN_0207a57c
	cmp sb, #0
	blt _0207A558
	mov r0, r5
	mov r1, r4
	bl FUN_0207a82c
	mov r0, r5
	mov r1, r4
	bl FUN_0207a864
_0207A558:
	ldrb r0, [sl, #1]
	add r7, r7, #1
	add r5, r5, #0xc4
	cmp r7, r0
	blt _0207A524
_0207A56C:
	ldr r0, _0207A578 ; =0x020B9FD8
	strb r6, [r0, #0x45]
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0207A578: .word 0x020B9FD8

	arm_func_start FUN_0207a57c
FUN_0207a57c: ; 0x0207A57C
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r0, #0
	mov r5, #1
	ldr r3, _0207A71C ; =0x020BA6D8
	str r1, [r4]
	ldr r2, _0207A720 ; =0x020B9FD8
	strb r0, [r4, #4]
	add r1, r2, #0x600
	strb r0, [r4, #6]
	strb r5, [r4, #7]
	strb r0, [r4, #8]
	ldrh r3, [r3, #0x3a]
	mov r2, #0x7f
	strb r3, [r4, #9]
	strh r0, [r4, #0xa]
	strb r0, [r4, #0xc]
	strb r0, [r4, #0xd]
	ldrsb r5, [r1, #0x80]
	ldrsb r3, [r1, #0xa0]
	add r3, r3, r5, lsl #8
	strh r0, [r4, #0x10]
	strh r0, [r4, #0x14]
	str r0, [r4, #0x1c]
	strh r0, [r4, #0x28]
	strh r3, [r4, #0xe]
	ldrsb r3, [r1, #0x87]
	mov r5, r0
	lsl r3, r3, #0x10
	strh r0, [r4, #0x38]
	str r3, [r4, #0x2c]
	ldrsb r3, [r1, #0x8a]
	lsl r3, r3, #0x10
	strh r0, [r4, #0x48]
	strh r0, [r4, #0x50]
	str r3, [r4, #0x3c]
	ldrsb r3, [r1, #0x8b]
	strb r3, [r4, #0x4c]
	ldrsb r1, [r1, #0x81]
	strb r1, [r4, #0x4d]
	strh r0, [r4, #0x4e]
	strh r0, [r4, #0x52]
	strb r2, [r4, #0x54]
	strb r0, [r4, #0x55]
	strb r0, [r4, #0x56]
	strb r0, [r4, #0x57]
	strb r0, [r4, #0x58]
	strb r0, [r4, #0x59]
	strb r0, [r4, #0x5a]
	strb r0, [r4, #0x5b]
	strb r0, [r4, #0x5c]
	arm_func_end FUN_0207a57c
_0207A648:
	add r1, r4, r0, lsl #4
	strb r5, [r1, #0x71]
	add r0, r0, #1
	strb r5, [r1, #0x72]
	cmp r0, #4
	blt _0207A648
	add r0, r4, #0x60
	bl FUN_0207b9c4
	ldr r1, _0207A724 ; =0x04000208
	str r5, [r4, #0xb0]
	ldrh lr, [r1]
	strh r5, [r1]
	ldr ip, [r4, #0xb4]
	cmp ip, #0
	ldrheq r0, [r1]
	strheq lr, [r1]
	beq _0207A6D0
	mov r5, ip
	mvn r1, #0
	mov r3, #0
_0207A698:
	str r1, [ip, #4]
	strb r3, [r5, #1]
	ldr r0, [r5, #8]
	cmp r0, #0
	movne r5, r0
	bne _0207A698
	ldr r0, _0207A720 ; =0x020B9FD8
	ldr r1, _0207A724 ; =0x04000208
	ldr r2, [r0, #0x658]
	str r2, [r5, #8]
	str ip, [r0, #0x658]
	str r3, [r4, #0xb4]
	ldrh r0, [r1]
	strh lr, [r1]
_0207A6D0:
	ldr r0, _0207A720 ; =0x020B9FD8
	mov r1, #0
	str r1, [r4, #0xb8]
	str r1, [r4, #0xbc]
	strh r1, [r4, #0x16]
	add r0, r0, #0x600
	ldrsb r3, [r0, #0x87]
	ldrsb r0, [r0, #0x8b]
	ldr r1, _0207A728 ; =0x82061029
	mov r2, #0x40
	smulbb r0, r3, r0
	rsb r3, r0, r0, lsl #7
	smull r0, ip, r1, r3
	add ip, r3, ip
	lsr r0, r3, #0x1f
	add ip, r0, ip, asr #13
	strh ip, [r4, #0x18]
	strh r2, [r4, #0x1a]
	pop {r3, r4, r5, pc}
	.align 2, 0_0207A71C: .word 0x020BA6D8
_0207A720: .word 0x020B9FD8
_0207A724: .word 0x04000208
_0207A728: .word 0x82061029

	arm_func_start FUN_0207a72c
FUN_0207a72c: ; 0x0207A72C
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, [r0, #0xb0]
	mov r1, #0
	str r1, [r0, #0xb0]
	cmp r5, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldr r7, _0207A7AC ; =0x020BA6D8
	mov r4, r1
	arm_func_end FUN_0207a72c
_0207A74C:
	ldr r6, [r5, #0x154]
	add r0, r5, #0x3c
	strh r4, [r5, #4]
	str r4, [r5, #0x158]
	str r4, [r5, #0x154]
	bl FUN_0207bc2c
	ldr r0, [r5, #0x14c]
	cmp r6, #0
	and r0, r0, #0xff
	str r0, [r5, #0x14c]
	str r4, [r5]
	strh r4, [r5, #0x1a]
	ldrh r2, [r5, #0xa]
	ldrh r1, [r7, #0x3e]
	mov r5, r6
	mvn r0, r2
	lsl r0, r0, #0x10
	and r0, r1, r0, lsr #16
	strh r0, [r7, #0x3e]
	ldrh r0, [r7, #0x42]
	orr r0, r0, r2
	strh r0, [r7, #0x42]
	bne _0207A74C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207A7AC: .word 0x020BA6D8

	arm_func_start FUN_0207a7b0
FUN_0207a7b0: ; 0x0207A7B0
	cmp r1, #1
	bne _0207A7F8
	ldrb r1, [r0, #4]
	ldr r2, [r0, #0xb0]
	orr r1, r1, #0x40
	strb r1, [r0, #4]
	cmp r2, #0
	bxeq lr
	mov r1, #0
	arm_func_end FUN_0207a7b0
_0207A7D4:
	str r1, [r2, #0x13c]
	str r1, [r2, #0x140]
	ldrh r0, [r2, #6]
	orr r0, r0, #0x30
	strh r0, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _0207A7D4
	bx lr
_0207A7F8:
	ldr r2, [r0, #0xb0]
	cmp r2, #0
	beq _0207A81C
_0207A804:
	ldrh r1, [r2, #6]
	orr r1, r1, #0x30
	strh r1, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _0207A804
_0207A81C:
	ldrb r1, [r0, #4]
	and r1, r1, #0xbf
	strb r1, [r0, #4]
	bx lr

	arm_func_start FUN_0207a82c
FUN_0207a82c: ; 0x0207A82C
	push {r4, lr}
	mov r4, r0
	mov r0, r1
	strh r1, [r4, #0xe]
	bl FUN_02075ec8
	str r0, [r4, #0xb8]
	cmp r0, #0
	moveq r0, #0
	streq r0, [r4, #0xbc]
	popeq {r4, pc}
	ldrh r1, [r4, #0x10]
	mov r0, r4
	bl FUN_0207a864
	pop {r4, pc}
	arm_func_end FUN_0207a82c

	arm_func_start FUN_0207a864
FUN_0207a864: ; 0x0207A864
	push {r4, r5, r6, r7, r8, lr}
	mov r5, r0
	ldr r0, [r5, #0xb8]
	mov r4, r1
	cmp r0, #0
	moveq r0, #0
	streq r0, [r5, #0xbc]
	strheq r0, [r5, #0x10]
	beq _0207A8E0
	lsl r1, r4, #0x10
	asr r1, r1, #0x10
	strh r1, [r5, #0x10]
	bl FUN_02075db4
	movs lr, r0
	beq _0207A8DC
	mov r6, #0
	strb r6, [r5, #0x55]
	add r7, lr, #0x10
	add r8, r5, #0x70
	mov ip, r6
	arm_func_end FUN_0207a864
_0207A8B4:
	ldrb r0, [r7, #1]
	add r6, r6, #1
	cmp r0, #0
	ldmne r7, {r0, r1, r2, r3}
	stmne r8, {r0, r1, r2, r3}
	strbeq ip, [r8, #1]
	cmp r6, #4
	add r7, r7, #0x10
	add r8, r8, #0x10
	blt _0207A8B4
_0207A8DC:
	str lr, [r5, #0xbc]
_0207A8E0:
	add r0, r5, #0x60
	bl FUN_0207b9c4
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0207a8f0
FUN_0207a8f0: ; 0x0207A8F0
	push {r3, r4, r5, lr}
	ldr r4, [r0, #0xb0]
	mov r5, r1
	strb r5, [r0, #0x4d]
	cmp r4, #0
	popeq {r3, r4, r5, pc}
	arm_func_end FUN_0207a8f0
_0207A908:
	mov r1, r5
	add r0, r4, #0x5c
	bl FUN_0207bf98
	ldr r4, [r4, #0x154]
	cmp r4, #0
	bne _0207A908
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0207a924
FUN_0207a924: ; 0x0207A924
	ldr r2, [r0, #0xb0]
	strh r1, [r0, #0x4e]
	cmp r2, #0
	bxeq lr
	lsl r3, r1, #8
	arm_func_end FUN_0207a924
_0207A938:
	ldrb r0, [r2, #0x10]
	mul r1, r0, r3
	asr r0, r1, #0xc
	add r0, r1, r0, lsr #19
	asr r0, r0, #0xd
	strh r0, [r2, #0x12]
	ldrh r0, [r2, #6]
	orr r0, r0, #0x10
	strh r0, [r2, #6]
	ldr r2, [r2, #0x154]
	cmp r2, #0
	bne _0207A938
	bx lr

	arm_func_start FUN_0207a96c
FUN_0207a96c: ; 0x0207A96C
	push {r4, r5, r6, lr}
	mov r5, r0
	ldrb r2, [r5, #0xd]
	mov r4, r1
	cmp r2, #0
	beq _0207A9AC
	ldrb r0, [r5, #0xc]
	sub r0, r2, r0
	add r6, r0, #1
	bl FUN_020751e8
	mul r1, r6, r0
	asr r0, r1, #0xe
	ldrb r2, [r5, #0xc]
	add r0, r1, r0, lsr #17
	add r0, r2, r0, asr #15
	strb r0, [r4, #2]
	arm_func_end FUN_0207a96c
_0207A9AC:
	ldr r1, _0207A9F8 ; =0x020B9FD8
	ldr r0, [r1, #0x658]
	cmp r0, #0
	moveq r0, #0
	ldrne r2, [r0, #8]
	strne r2, [r1, #0x658]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	ldr r3, [r4]
	ldr r2, [r4, #4]
	mov r1, #1
	str r3, [r0]
	str r2, [r0, #4]
	strb r1, [r0, #1]
	ldr r1, [r5, #0xb4]
	str r1, [r0, #8]
	str r0, [r5, #0xb4]
	pop {r4, r5, r6, pc}
	.align 2, 0_0207A9F8: .word 0x020B9FD8

	arm_func_start FUN_0207a9fc
FUN_0207a9fc: ; 0x0207A9FC
	push {r4, r5, r6, r7, r8, lr}
	mov r7, r0
	ldr r4, [r7, #0xb4]
	mov r6, r1
	cmp r4, #0
	add r5, r7, #0xb4
	beq _0207AA78
	ldrb r1, [r6, #2]
	arm_func_end FUN_0207a9fc
_0207AA1C:
	ldrb r0, [r4, #2]
	cmp r0, r1
	bne _0207AA68
	ldr r8, [r7, #0xb0]
	cmp r8, #0
	beq _0207AA5C
_0207AA34:
	ldrb r1, [r8, #0xd]
	ldrb r0, [r6, #2]
	cmp r1, r0
	bne _0207AA50
	mov r0, r7
	mov r1, r8
	bl FUN_0207b56c
_0207AA50:
	ldr r8, [r8, #0x154]
	cmp r8, #0
	bne _0207AA34
_0207AA5C:
	ldr r0, [r4, #8]
	str r0, [r5]
	b _0207AA78
_0207AA68:
	add r5, r4, #8
	ldr r4, [r4, #8]
	cmp r4, #0
	bne _0207AA1C
_0207AA78:
	cmp r4, #0
	beq _0207AAA0
	ldr r0, _0207AAA8 ; =0x020B9FD8
	mvn r2, #0
	ldr r3, [r0, #0x658]
	mov r1, #0
	str r3, [r4, #8]
	str r4, [r0, #0x658]
	str r2, [r4, #4]
	strb r1, [r4, #1]
_0207AAA0:
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0207AAA8: .word 0x020B9FD8

	arm_func_start FUN_0207aaac
FUN_0207aaac: ; 0x0207AAAC
	push {r4, lr}
	ldr r4, [r0, #0xb4]
	cmp r4, #0
	beq _0207AAF0
	arm_func_end FUN_0207aaac
_0207AABC:
	ldrb r3, [r4, #2]
	cmp r3, r2
	bne _0207AAE4
	ldr lr, [r1]
	ldr ip, [r1, #4]
	mov r3, #1
	str lr, [r4]
	str ip, [r4, #4]
	strb r3, [r4, #1]
	b _0207AAF0
_0207AAE4:
	ldr r4, [r4, #8]
	cmp r4, #0
	bne _0207AABC
_0207AAF0:
	ldr ip, [r0, #0xb0]
	cmp ip, #0
	popeq {r4, pc}
_0207AAFC:
	ldrb r0, [ip, #0xd]
	cmp r0, r2
	bne _0207AB2C
	ldrb r0, [r1, #2]
	strb r0, [ip, #0xd]
	ldrb r3, [r1, #2]
	ldrsh r0, [ip, #0x16]
	add r0, r0, r3, lsl #8
	strh r0, [ip, #0x14]
	ldrh r0, [ip, #6]
	orr r0, r0, #0x10
	strh r0, [ip, #6]
_0207AB2C:
	ldr ip, [ip, #0x154]
	cmp ip, #0
	bne _0207AAFC
	pop {r4, pc}

	arm_func_start FUN_0207ab3c
FUN_0207ab3c: ; 0x0207AB3C
	push {r3, lr}
	ldr r2, [r0, #0xb4]
	cmp r2, #0
	popeq {r3, pc}
	ldrb r3, [r1, #2]
	arm_func_end FUN_0207ab3c
_0207AB50:
	ldrb r1, [r2, #2]
	cmp r1, r3
	bne _0207AB68
	mov r1, r2
	bl FUN_0207a9fc
	pop {r3, pc}
_0207AB68:
	ldr r2, [r2, #8]
	cmp r2, #0
	bne _0207AB50
	pop {r3, pc}

	arm_func_start FUN_0207ab78
FUN_0207ab78: ; 0x0207AB78
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	ldrsh r4, [sl, #0xa]
	mov sb, r1
	cmp r4, #0
	moveq r0, #0
	streq r0, [sp]
	beq _0207ABC4
	bl FUN_020751e8
	lsl r1, r4, #1
	mul r2, r1, r0
	asr r0, r2, #0xe
	ldrsh r1, [sl, #0xa]
	add r0, r2, r0, lsr #17
	rsb r0, r1, r0, asr #15
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
	arm_func_end FUN_0207ab78
_0207ABC4:
	ldr r6, [sl, #0xbc]
	cmp r6, #0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r7, [sl, #0xb8]
	mov r5, #0
_0207ABDC:
	ldrb r2, [sb, #2]
	ldrsb r3, [sb, #3]
	mov r0, r6
	mov r1, r5
	bl FUN_02075dec
	movs r5, r0
	addeq sp, sp, #0xc
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrb r3, [r5, #0x1a]
	ldrb r0, [r7, #0xc]
	ldr r2, [r7, #0x18]
	cmp r3, r0
	movge r3, #0
	add r1, r2, r3, lsl #3
	ldr r2, [r1]
	ldr r1, [r1, #4]
	mov r0, r7
	str r2, [sp, #4]
	str r1, [sp, #8]
	ldrsh r1, [r5, #0x12]
	bl FUN_02075d7c
	movs fp, r0
	beq _0207ABDC
	ldrb r3, [sl, #5]
	ldrb r2, [r5, #0x1a]
	mov r0, sl
	add r1, sp, #4
	add r8, r2, r3, lsl #8
	mov r2, r8
	bl FUN_0207b2ac
	movs r4, r0
	beq _0207ABDC
	mov r0, #0
	strh r0, [r4, #4]
	ldr r0, [sl]
	add fp, fp, #0x10
	str r0, [r4]
	strh r8, [r4, #0x1a]
	ldrsh r0, [r5, #0x12]
	add ip, r4, #0x1c
	strh r0, [r4, #0xe]
	ldm fp!, {r0, r1, r2, r3}
	stm ip!, {r0, r1, r2, r3}
	ldm fp, {r0, r1, r2, r3}
	stm ip, {r0, r1, r2, r3}
	ldr r1, [r4, #0x30]
	ldr r0, [r7, #0x1c]
	add r0, r1, r0
	str r0, [r4, #0x30]
	ldrb r0, [sb, #2]
	strb r0, [r4, #0xd]
	ldrsb r1, [r5, #0x17]
	ldrsh r0, [r5, #0x14]
	add r1, r0, r1, lsl #8
	ldr r0, [sp]
	add r0, r0, r1
	strh r0, [r4, #0x16]
	ldrb r1, [sb, #2]
	ldrsh r0, [r4, #0x16]
	add r0, r0, r1, lsl #8
	strh r0, [r4, #0x14]
	ldrb r0, [r5, #0x19]
	strb r0, [r4, #0x19]
	ldr r0, _0207ADDC ; =0x020B9FD8
	ldrb r0, [r0, #0x41]
	cmp r0, #7
	bne _0207AD1C
	ldrb r1, [sl, #0x54]
	ldrb r0, [sb, #3]
	ldrb r2, [r6, #4]
	ldrb r3, [r5, #0x18]
	smulbb r0, r1, r0
	mul r0, r2, r0
	mul r2, r3, r0
	ldr r0, _0207ADE0 ; =0x4186143D
	smull r1, r3, r0, r2
	lsr r0, r2, #0x1f
	add r3, r0, r3, asr #19
	strb r3, [r4, #0x18]
	b _0207AD48
_0207AD1C:
	ldrb r1, [sb, #3]
	ldrb r0, [r6, #4]
	ldrb r2, [r5, #0x18]
	smulbb r0, r1, r0
	mul r3, r2, r0
	ldr r0, _0207ADE4 ; =0x82061029
	smull r1, r2, r0, r3
	add r2, r3, r2
	lsr r0, r3, #0x1f
	add r2, r0, r2, asr #13
	strb r2, [r4, #0x18]
_0207AD48:
	ldrb r2, [sl, #0x55]
	ldrsh r3, [sl, #0x4e]
	add r0, r4, #0x5c
	cmp r2, #0
	ldrbeq r2, [r5, #2]
	lsl r3, r3, #8
	add r1, sl, #0x70
	mul r8, r2, r3
	asr r3, r8, #0xc
	add r3, r8, r3, lsr #19
	asr r3, r3, #0xd
	strh r3, [r4, #0x12]
	strb r2, [r4, #0x10]
	ldrh r2, [r4, #6]
	orr r2, r2, #0xff0
	strh r2, [r4, #6]
	ldrsb r2, [sl, #0x4d]
	bl FUN_0207bdc8
	add r0, r5, #0x20
	add r8, r4, #0x3c
	ldm r0, {r0, r1, r2, r3}
	stm r8, {r0, r1, r2, r3}
	mov r0, #1
	strb r0, [r4, #0x3c]
	ldrb r0, [sl, #0x60]
	cmp r0, #0
	beq _0207ADC0
	mov r0, r8
	add r1, sl, #0x60
	bl FUN_0207ba34
_0207ADC0:
	mov r1, r4
	mov r0, sl
	ldrb r2, [sp, #7]
	bl FUN_0207b4b0
	b _0207ABDC
_0207ADD4:
	.byte 0x0C, 0xD0, 0x8D, 0xE2, 0xF0, 0x8F, 0xBD, 0xE8
_0207ADDC: .word 0x020B9FD8
_0207ADE0: .word 0x4186143D
_0207ADE4: .word 0x82061029

	arm_func_start FUN_0207ade8
FUN_0207ade8: ; 0x0207ADE8
	push {r4, r5, r6, lr}
	mov r6, r0
	ldr r4, [r6, #0xb0]
	mov r5, r1
	cmp r4, #0
	popeq {r4, r5, r6, pc}
	arm_func_end FUN_0207ade8
_0207AE00:
	ldrb r1, [r4, #0xd]
	ldrb r0, [r5, #2]
	cmp r1, r0
	bne _0207AE1C
	mov r0, r6
	mov r1, r4
	bl FUN_0207b56c
_0207AE1C:
	ldr r4, [r4, #0x154]
	cmp r4, #0
	bne _0207AE00
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0207ae2c
FUN_0207ae2c: ; 0x0207AE2C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr fp, _0207AFAC ; =0x020BA6D8
	ldr r7, _0207AFB0 ; =0x020BA720
	ldrh r0, [fp, #0x3a]
	mov sb, #0
	cmp r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r6, _0207AFB4 ; =0x02092014
	ldr r5, _0207AFB8 ; =0x02092098
	ldr r4, _0207AFBC ; =0x00FFB0FF
	arm_func_end FUN_0207ae2c
_0207AE54:
	ldr r8, [r7, #0x158]
	cmp r8, #0
	beq _0207AF94
	ldrh sl, [r7, #6]
	cmp sl, #0
	beq _0207AF90
	tst sl, #0x10
	beq _0207AEF4
	ldrh r2, [r8, #0x16]
	ldrsh r1, [r7, #0x14]
	ldrsh r3, [r7, #0x12]
	ldrsh r0, [r7, #0x5e]
	add r1, r2, r1
	add r1, r3, r1
	add r0, r0, r1
	lsl r0, r0, #0x10
	lsr r1, r0, #0x10
	asr r0, r1, #8
	and r0, r0, #0x7f
	ldrb r0, [r6, r0]
	and r2, r1, #0xff
	lsl r1, r0, #0x1c
	add r1, r2, r1, lsr #20
	lsl r1, r1, #1
	asr r0, r0, #4
	ldrh r1, [r5, r1]
	rsbs r0, r0, #4
	lsrpl r1, r1, r0
	rsbmi r0, r0, #0
	lslmi r1, r1, r0
	ldrb r0, [r7, #0x1f]
	cmp r0, #3
	mov r0, r4
	blo _0207AEEC
	asr r2, r1, #3
	add r1, r1, r2, lsr #28
	asr r1, r1, #4
	b _0207AEEC
_0207AEEC:
	bl FUN_0201f9bc
	str r0, [r7, #0x13c]
_0207AEF4:
	tst sl, #0x20
	beq _0207AF54
	ldrb r1, [r7, #0x18]
	ldrsh r0, [r7, #0x60]
	add r1, r1, r0, asr #6
	cmp r1, #0x7f
	movgt r1, #0x7f
	bgt _0207AF1C
	cmp r1, #0
	movlt r1, #0
_0207AF1C:
	ldrh r0, [r8, #0x18]
	ldrb r2, [r7, #0x14c]
	mul r1, r0, r1
	mul r3, r2, r1
	ldr r0, _0207AFC0 ; =0x828CBFBF
	smull r1, r2, r0, r3
	add r2, r3, r2
	lsr r0, r3, #0x1f
	add r2, r0, r2, asr #12
	mul r1, r2, r2
	asr r0, r1, #8
	add r0, r1, r0, lsr #23
	asr r0, r0, #9
	str r0, [r7, #0x140]
_0207AF54:
	tst sl, #0x40
	beq _0207AF90
	ldrsb r1, [r7, #0x19]
	ldrsh r2, [r8, #0x1a]
	ldrsh r0, [r7, #0x62]
	sub r1, r1, #0x40
	add r1, r2, r1
	adds r1, r1, r0, asr #6
	ldr r0, _0207AFC4 ; =0x020BAFD8
	movmi r1, #0
	cmp r1, #0x7f
	ldr r0, [r0, #0xee0]
	movgt r1, #0x7f
	ldrb r0, [r0, r1]
	str r0, [r7, #0x144]
_0207AF90:
	strh sl, [r7, #6]
_0207AF94:
	ldrh r0, [fp, #0x3a]
	add sb, sb, #1
	add r7, r7, #0x15c
	cmp sb, r0
	blt _0207AE54
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207AFAC: .word 0x020BA6D8
_0207AFB0: .word 0x020BA720
_0207AFB4: .word 0x02092014
_0207AFB8: .word 0x02092098
_0207AFBC: .word 0x00FFB0FF
_0207AFC0: .word 0x828CBFBF
_0207AFC4: .word 0x020BAFD8

	arm_func_start FUN_0207afc8
FUN_0207afc8: ; 0x0207AFC8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, _0207B064 ; =0x020BA6D8
	mov sb, #0
	ldrh r0, [r4, #0x3a]
	cmp r0, #0
	ble _0207B054
	ldr r8, _0207B068 ; =0x020BA720
	mov r7, sb
	mov r6, #1
	mov r5, #0x40
	mov fp, #0x15c
	arm_func_end FUN_0207afc8
_0207AFF4:
	mul r1, sb, fp
	add sl, r8, r1
	strh r7, [sl, #4]
	strh r7, [sl, #6]
	lsl r0, r6, sb
	strh sb, [sl, #8]
	strh r0, [sl, #0xa]
	str r7, [r8, r1]
	str r7, [sl, #0x14c]
	strb r7, [sl, #0xd]
	strh r7, [sl, #0xe]
	strh r7, [sl, #0x14]
	strb r7, [sl, #0x18]
	add r0, sl, #0x3c
	strb r5, [sl, #0x19]
	bl FUN_0207b9b0
	add r0, sl, #0x5c
	bl FUN_0207bdb0
	str r7, [sl, #0x154]
	str r7, [sl, #0x158]
	ldrh r0, [r4, #0x3a]
	add sb, sb, #1
	cmp sb, r0
	blt _0207AFF4
_0207B054:
	ldr r0, _0207B06C ; =0x020B9FD8
	mov r1, #0
	str r1, [r0, #0x65c]
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207B064: .word 0x020BA6D8
_0207B068: .word 0x020BA720
_0207B06C: .word 0x020B9FD8

	arm_func_start FUN_0207b070
FUN_0207b070: ; 0x0207B070
	push {r4, lr}
	cmp r0, #0
	ble _0207B0A8
	ldr r1, _0207B114 ; =0x020BA6D8
	mov r2, #0x10
	strh r2, [r1, #0x38]
	cmp r0, #0x10
	lslgt r0, r2, #0x10
	ldr r2, _0207B114 ; =0x020BA6D8
	asrgt r0, r0, #0x10
	strh r0, [r2, #0x3a]
	ldr r1, _0207B118 ; =0x020BAFD8
	mov r0, #0
	strb r0, [r1, #0xd18]
	arm_func_end FUN_0207b070
_0207B0A8:
	ldr r1, _0207B114 ; =0x020BA6D8
	mov r4, #0
	strh r4, [r1, #0x3e]
	strh r4, [r1, #0x40]
	ldr r0, _0207B11C ; =0x020B9FD8
	strh r4, [r1, #0x42]
	strb r4, [r0, #0x744]
	strb r4, [r0, #0x745]
	ldr ip, _0207B118 ; =0x020BAFD8
	strh r4, [r1, #0x3c]
	str r4, [ip, #0xd08]
	str r4, [ip, #0xd0c]
	sub r1, r4, #1
	str r1, [ip, #0xd10]
	ldrsh lr, [r0, #0x28]
	mov r0, r4
	mov r1, r4
	mov r2, r4
	mov r3, r4
	str lr, [ip, #0xd14]
	bl FUN_0200b810
	ldr r0, _0207B120 ; =0x0000FFFF
	mov r3, r4
	mov r1, r0
	mov r2, r0
	bl FUN_0200b838
	pop {r4, pc}
	.align 2, 0_0207B114: .word 0x020BA6D8
_0207B118: .word 0x020BAFD8
_0207B11C: .word 0x020B9FD8
_0207B120: .word 0x0000FFFF

	arm_func_start FUN_0207b124
FUN_0207b124: ; 0x0207B124
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr sb, _0207B204 ; =0x020BA6D8
	mov r7, #0
	ldrh r0, [sb, #0x3a]
	mov r6, r7
	ldr r5, _0207B208 ; =0x020BA720
	cmp r0, #0
	ble _0207B1C0
	mov r4, #2
	arm_func_end FUN_0207b124
_0207B148:
	add r0, r5, #0x3c
	bl FUN_0207bc7c
	ldrsb r1, [r5, #0x5a]
	mov r8, r0
	cmp r1, #1
	bne _0207B1A8
	add r0, r5, #0x5c
	bl FUN_0207bfe4
	ldrh r1, [r5, #6]
	orr r0, r1, r0
	strh r0, [r5, #6]
	ldrb r0, [r5, #0x58]
	cmp r0, #8
	strbeq r4, [r5, #0x58]
	ldrheq r0, [r5, #6]
	orreq r0, r0, #2
	strheq r0, [r5, #6]
	ldrb r0, [r5, #0x14c]
	cmp r0, r8
	ldrhne r0, [r5, #6]
	orrne r0, r0, #0x20
	strhne r0, [r5, #6]
	cmp r8, #0
	addgt r7, r7, #1
_0207B1A8:
	strb r8, [r5, #0x14c]
	ldrh r0, [sb, #0x3a]
	add r6, r6, #1
	add r5, r5, #0x15c
	cmp r6, r0
	blt _0207B148
_0207B1C0:
	ldr r0, _0207B20C ; =0x020BAFD8
	ldr r1, [r0, #0xd10]
	cmp r1, #0
	movlt r1, #0
	strlt r1, [r0, #0xd0c]
	ldr r0, _0207B20C ; =0x020BAFD8
	str r7, [r0, #0xd08]
	ldr r1, [r0, #0xd0c]
	cmp r1, r7
	strlt r7, [r0, #0xd0c]
	movlt r1, #0x64
	strlt r1, [r0, #0xd10]
	ldr r0, _0207B20C ; =0x020BAFD8
	ldr r1, [r0, #0xd10]
	sub r1, r1, #1
	str r1, [r0, #0xd10]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0207B204: .word 0x020BA6D8
_0207B208: .word 0x020BA720
_0207B20C: .word 0x020BAFD8

	arm_func_start FUN_0207b210
FUN_0207b210: ; 0x0207B210
	push {r4, r5, r6, r7, r8, lr}
	ldr r6, _0207B2A4 ; =0x020BA720
	bl FUN_0200c39c
	ldr r4, _0207B2A8 ; =0x020BA6D8
	lsl r0, r0, #0x10
	ldrh r2, [r4, #0x3c]
	ldrh r1, [r4, #0x3a]
	mov r7, #0
	orr r0, r2, r0, lsr #16
	lsl r0, r0, #0x10
	lsr r8, r0, #0x10
	cmp r1, #0
	pople {r4, r5, r6, r7, r8, pc}
	mov r5, r7
	arm_func_end FUN_0207b210
_0207B248:
	ldrsb r0, [r6, #0x5a]
	cmp r0, #1
	bne _0207B270
	tst r8, #1
	bne _0207B284
	add r0, r6, #0x3c
	bl FUN_0207bc64
	add r0, r6, #0x100
	strh r5, [r0, #0x4c]
	b _0207B284
_0207B270:
	and r0, r8, #1
	cmp r0, #1
	bne _0207B284
	mov r0, r6
	bl FUN_0207b714
_0207B284:
	ldrh r1, [r4, #0x3a]
	lsl r0, r8, #0xf
	add r7, r7, #1
	cmp r7, r1
	lsr r8, r0, #0x10
	add r6, r6, #0x15c
	blt _0207B248
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0207B2A4: .word 0x020BA720
_0207B2A8: .word 0x020BA6D8

	arm_func_start FUN_0207b2ac
FUN_0207b2ac: ; 0x0207B2AC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldrb r6, [r1, #3]
	ldr r3, _0207B400 ; =0x020BA6D8
	ldrb r4, [r1, #5]
	ldrh r5, [r3, #0x3a]
	lsl r3, r6, #0x10
	add r3, r3, #0xff
	add r8, r3, #0x100
	sub r5, r5, #1
	cmp r4, r5
	ldrb r3, [r0, #7]
	movgt r4, r5
	ldrb r7, [r1, #4]
	mov r6, #0
	cmp r3, #0
	beq _0207B2F8
	cmp r3, #1
	beq _0207B304
	b _0207B3F8
	arm_func_end FUN_0207b2ac
_0207B2F8:
	ldr r6, [r0, #0xb0]
	cmp r6, #0
	bne _0207B3F8
_0207B304:
	ldrb r3, [r1]
	cmp r3, #0
	beq _0207B398
	ldr r5, _0207B404 ; =0x020BA720
	mov r3, #0x15c
	mla r3, r7, r3, r5
	mov ip, r7
	mov lr, r4
	mov r5, r8
	cmp r7, r4
	mov r6, #0
	bgt _0207B37C
	ldr r0, [r0]
_0207B338:
	ldr sb, [r3]
	cmp sb, r0
	ldrheq sb, [r3, #0x1a]
	cmpeq sb, r2
	bne _0207B36C
	ldr sb, [r3, #0x14c]
	add r6, r6, #1
	cmp r5, sb
	movhi r5, sb
	ldrb sb, [r1, #2]
	movhi lr, ip
	cmp r6, sb
	bge _0207B37C
_0207B36C:
	add ip, ip, #1
	cmp ip, r4
	add r3, r3, #0x15c
	ble _0207B338
_0207B37C:
	ldrb r0, [r1, #2]
	cmp r6, r0
	blt _0207B398
	ldr r1, _0207B404 ; =0x020BA720
	mov r0, #0x15c
	mla r6, lr, r0, r1
	b _0207B3F0
_0207B398:
	cmp r7, r4
	add r3, r4, #1
	bgt _0207B3D8
	ldr r2, _0207B408 ; =0x020B9FD8
	mov r0, #0x15c
_0207B3AC:
	mla r1, r7, r0, r2
	ldr r1, [r1, #0x894]
	cmp r8, r1
	bls _0207B3CC
	mov r3, r7
	cmp r1, #0
	beq _0207B3D8
	mov r8, r1
_0207B3CC:
	add r7, r7, #1
	cmp r7, r4
	ble _0207B3AC
_0207B3D8:
	cmp r3, r4
	movgt r6, #0
	bgt _0207B3F8
	ldr r1, _0207B404 ; =0x020BA720
	mov r0, #0x15c
	mla r6, r3, r0, r1
_0207B3F0:
	mov r0, r6
	bl FUN_0207b5b8
_0207B3F8:
	mov r0, r6
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0207B400: .word 0x020BA6D8
_0207B404: .word 0x020BA720
_0207B408: .word 0x020B9FD8

	arm_func_start FUN_0207b40c
FUN_0207b40c: ; 0x0207B40C
	push {r4, lr}
	ldr r1, _0207B4A4 ; =0x020BA6D8
	ldrb r2, [r0, #5]
	ldrh r3, [r1, #0x3a]
	ldrb r4, [r0, #4]
	ldrb r0, [r0, #3]
	sub r3, r3, #1
	add r1, r2, #1
	lsl r0, r0, #0x10
	cmp r2, r3
	movgt r2, r3
	add r0, r0, #0xff
	cmp r4, r2
	add lr, r0, #0x100
	bgt _0207B47C
	ldr ip, _0207B4A8 ; =0x020B9FD8
	mov r0, #0x15c
	arm_func_end FUN_0207b40c
_0207B450:
	mla r3, r4, r0, ip
	ldr r3, [r3, #0x894]
	cmp lr, r3
	bls _0207B470
	mov r1, r4
	cmp r3, #0
	beq _0207B47C
	mov lr, r3
_0207B470:
	add r4, r4, #1
	cmp r4, r2
	ble _0207B450
_0207B47C:
	cmp r1, r2
	movgt r4, #0
	bgt _0207B49C
	ldr r2, _0207B4AC ; =0x020BA720
	mov r0, #0x15c
	mla r4, r1, r0, r2
	mov r0, r4
	bl FUN_0207b5b8
_0207B49C:
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0207B4A4: .word 0x020BA6D8
_0207B4A8: .word 0x020B9FD8
_0207B4AC: .word 0x020BA720

	arm_func_start FUN_0207b4b0
FUN_0207b4b0: ; 0x0207B4B0
	push {r3, r4, r5, lr}
	mov r4, r1
	lsl r1, r2, #0x10
	ldrh r3, [r4, #6]
	add r1, r1, #0xff
	ldr r2, [r4, #0x14c]
	add r1, r1, #0x100
	orr r2, r2, r1
	orr r3, r3, #1
	mov r5, r0
	ldr r1, _0207B510 ; =0x0000FFFD
	lsl r0, r3, #0x10
	and r1, r1, r0, lsr #16
	add r0, r4, #0x3c
	strh r1, [r4, #6]
	str r2, [r4, #0x14c]
	bl FUN_0207bb44
	ldr r0, [r4, #0x158]
	cmp r0, r5
	ldrne r0, [r5, #0xb0]
	strne r0, [r4, #0x154]
	strne r4, [r5, #0xb0]
	strne r5, [r4, #0x158]
	pop {r3, r4, r5, pc}
	.align 2, 0_0207B510: .word 0x0000FFFD
	arm_func_end FUN_0207b4b0

	arm_func_start FUN_0207b514
FUN_0207b514: ; 0x0207B514
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrb r0, [r6, #4]
	tst r0, #3
	popne {r4, r5, r6, pc}
	ldr r1, [r6, #0xb4]
	add r5, r6, #0xb4
	cmp r1, #0
	beq _0207B560
	arm_func_end FUN_0207b514
_0207B538:
	ldmib r1, {r0, r4}
	cmp r0, #0
	strgt r1, [r5]
	addgt r5, r1, #8
	bgt _0207B554
	mov r0, r6
	bl FUN_0207a9fc
_0207B554:
	mov r1, r4
	cmp r4, #0
	bne _0207B538
_0207B560:
	mov r0, #0
	str r0, [r5]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0207b56c
FUN_0207b56c: ; 0x0207B56C
	push {r4, lr}
	mov r4, r1
	ldrh r1, [r4, #4]
	orr r1, r1, #2
	strh r1, [r4, #4]
	ldrb r0, [r0, #4]
	tst r0, #1
	popne {r4, pc}
	ldr r1, [r4, #0x14c]
	add r0, r4, #0x3c
	and r1, r1, #0xff
	str r1, [r4, #0x14c]
	bl FUN_0207bc00
	ldrh r1, [r4, #6]
	ldr r0, _0207B5B4 ; =0x0000FFFE
	and r0, r1, r0
	strh r0, [r4, #6]
	pop {r4, pc}
	.align 2, 0_0207B5B4: .word 0x0000FFFE
	arm_func_end FUN_0207b56c

	arm_func_start FUN_0207b5b8
FUN_0207b5b8: ; 0x0207B5B8
	push {r3, r4, r5, lr}
	mov r4, r0
	ldr r1, [r4, #0x158]
	cmp r1, #0
	beq _0207B660
	ldr r2, [r1, #0xb0]
	cmp r2, r4
	ldreq r0, [r4, #0x154]
	streq r0, [r1, #0xb0]
	beq _0207B608
	cmp r2, #0
	beq _0207B608
	arm_func_end FUN_0207b5b8
_0207B5E8:
	ldr r0, [r2, #0x154]
	cmp r0, r4
	ldreq r0, [r4, #0x154]
	streq r0, [r2, #0x154]
	beq _0207B608
	mov r2, r0
	cmp r0, #0
	bne _0207B5E8
_0207B608:
	mov r5, #0
	add r0, r4, #0x3c
	strh r5, [r4, #4]
	str r5, [r4, #0x158]
	str r5, [r4, #0x154]
	bl FUN_0207bc2c
	ldr r1, [r4, #0x14c]
	ldrh r0, [r4, #0xa]
	and r3, r1, #0xff
	ldr r2, _0207B6B8 ; =0x020BA6D8
	mvn r1, r0
	str r5, [r4]
	strh r5, [r4, #0x1a]
	str r3, [r4, #0x14c]
	ldrh r3, [r2, #0x3e]
	lsl r1, r1, #0x10
	and r1, r3, r1, lsr #16
	strh r1, [r2, #0x3e]
	ldrh r1, [r2, #0x42]
	orr r1, r1, r0
	strh r1, [r2, #0x42]
	pop {r3, r4, r5, pc}
_0207B660:
	mov r5, #0
	add r0, r4, #0x3c
	strh r5, [r4, #4]
	str r5, [r4, #0x158]
	str r5, [r4, #0x154]
	bl FUN_0207bc2c
	ldr r1, [r4, #0x14c]
	ldrh r0, [r4, #0xa]
	and r3, r1, #0xff
	ldr r2, _0207B6B8 ; =0x020BA6D8
	mvn r1, r0
	str r5, [r4]
	strh r5, [r4, #0x1a]
	str r3, [r4, #0x14c]
	ldrh r3, [r2, #0x3e]
	lsl r1, r1, #0x10
	and r1, r3, r1, lsr #16
	strh r1, [r2, #0x3e]
	ldrh r1, [r2, #0x42]
	orr r1, r1, r0
	strh r1, [r2, #0x42]
	pop {r3, r4, r5, pc}
	.align 2, 0_0207B6B8: .word 0x020BA6D8

	arm_func_start FUN_0207b6bc
FUN_0207b6bc: ; 0x0207B6BC
	push {r3, lr}
	ldr r1, [r0, #0x14c]
	ldrh ip, [r0, #0xa]
	orr r2, r1, #0xff
	orr r2, r2, #0x100
	mov lr, #0xff0
	ldr r1, _0207B710 ; =0x020BA6D8
	mvn r3, ip
	strh lr, [r0, #6]
	str r2, [r0, #0x14c]
	ldrh r2, [r1, #0x40]
	lsl r0, r3, #0x10
	and r2, r2, r0, lsr #16
	strh r2, [r1, #0x40]
	ldrh r2, [r1, #0x42]
	and r0, r2, r0, lsr #16
	strh r0, [r1, #0x42]
	ldrh r0, [r1, #0x3e]
	orr r0, r0, ip
	strh r0, [r1, #0x3e]
	pop {r3, pc}
	.align 2, 0_0207B710: .word 0x020BA6D8
	arm_func_end FUN_0207b6bc

	arm_func_start FUN_0207b714
FUN_0207b714: ; 0x0207B714
	ldr r1, [r0, #0x14c]
	ldrh r3, [r0, #0xa]
	bic r2, r1, #0xff00
	ldr r1, _0207B74C ; =0x020BA6D8
	str r2, [r0, #0x14c]
	mvn r0, r3
	ldrh r2, [r1, #0x3e]
	lsl r0, r0, #0x10
	and r0, r2, r0, lsr #16
	strh r0, [r1, #0x3e]
	ldrh r0, [r1, #0x40]
	orr r0, r0, r3
	strh r0, [r1, #0x40]
	bx lr
	.align 2, 0_0207B74C: .word 0x020BA6D8
	arm_func_end FUN_0207b714

	arm_func_start FUN_0207b750
FUN_0207b750: ; 0x0207B750
	ldr r2, [r0, #0xb0]
	mov r0, #0
	cmp r2, #0
	bxeq lr
	arm_func_end FUN_0207b750
_0207B760:
	ldrb r1, [r2, #0x14c]
	ldr r2, [r2, #0x154]
	cmp r1, #0
	addne r0, r0, #1
	cmp r2, #0
	bne _0207B760
	bx lr

	arm_func_start FUN_0207b77c
FUN_0207b77c: ; 0x0207B77C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	ldr r4, _0207B9A4 ; =0x020BA6D8
	mov r6, #0
	ldrh r0, [r4, #0x3a]
	mov r5, r6
	ldr r7, _0207B9A8 ; =0x020BA720
	cmp r0, #0
	mov r8, r6
	ble _0207B8EC
	mov fp, #2
	mov sl, #1
	arm_func_end FUN_0207b77c
_0207B7AC:
	ldrh sb, [r7, #6]
	cmp sb, #0
	beq _0207B8D8
	tst sb, #1
	beq _0207B880
	ldrsb r0, [r7, #0x21]
	ldrb r1, [r7, #0x1f]
	mov r3, sl
	cmp r0, #0
	moveq r3, fp
	cmp r1, #4

	arm_func_start switchD
switchD: ; 0x0207B7D8
	addls pc, pc, r1, lsl #2
	b _0207B874
	arm_func_end switchD
_0207B7E0: ; jump table
	b _0207B7F4 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0207B7E4
	b _0207B7F4
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0207B7E8
	b _0207B7F4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0207B7EC
	b _0207B830
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0207B7F0
	b _0207B858
	arm_func_end caseD_4
_0207B7F4:
	ldr r0, [r7, #0x34]
	str r0, [sp]
	ldr r0, [r7, #0x38]
	str r0, [sp, #4]
	ldr r0, [r7, #0x140]
	str r0, [sp, #8]
	str r6, [sp, #0xc]
	ldr r0, [r7, #0x13c]
	str r0, [sp, #0x10]
	ldr r0, [r7, #0x144]
	str r0, [sp, #0x14]
	ldrh r0, [r7, #8]
	ldr r2, [r7, #0x30]
	bl FUN_0200b9c4
	b _0207B874
_0207B830:
	ldr r0, [r7, #0x13c]
	mov r3, #0
	str r0, [sp]
	ldr r0, [r7, #0x144]
	str r0, [sp, #4]
	ldrh r0, [r7, #8]
	ldrb r1, [r7, #0x25]
	ldr r2, [r7, #0x140]
	bl FUN_0200ba10
	b _0207B874
_0207B858:
	ldr r0, [r7, #0x144]
	mov r2, #0
	str r0, [sp]
	ldrh r0, [r7, #8]
	ldr r1, [r7, #0x140]
	ldr r3, [r7, #0x13c]
	bl FUN_0200ba38
_0207B874:
	mov r0, r7
	bl FUN_0207b6bc
	b _0207B8D4
_0207B880:
	tst sb, #2
	beq _0207B894
	mov r0, r7
	bl FUN_0207b714
	mov sb, #0
_0207B894:
	tst sb, #0x10
	beq _0207B8A8
	ldrh r0, [r7, #0xa]
	ldr r1, [r7, #0x13c]
	bl FUN_0200b95c
_0207B8A8:
	tst sb, #0x20
	beq _0207B8C0
	ldrh r0, [r7, #0xa]
	ldr r1, [r7, #0x140]
	mov r2, #0
	bl FUN_0200b97c
_0207B8C0:
	tst sb, #0x40
	beq _0207B8D4
	ldrh r0, [r7, #0xa]
	ldr r1, [r7, #0x144]
	bl FUN_0200b9a4
_0207B8D4:
	strh r5, [r7, #6]
_0207B8D8:
	ldrh r0, [r4, #0x3a]
	add r8, r8, #1
	add r7, r7, #0x15c
	cmp r8, r0
	blt _0207B7AC
_0207B8EC:
	ldr r6, _0207B9A4 ; =0x020BA6D8
	ldr r0, _0207B9AC ; =0x020B9FD8
	ldrh r1, [r6, #0x3e]
	mov r4, #0
	strh r1, [r6, #0x3c]
	ldrb r2, [r0, #0x744]
	cmp r2, #0
	cmpeq r1, #0
	ldrbeq r0, [r0, #0x746]
	cmpeq r0, #0
	beq _0207B93C
	ldr r5, _0207B9AC ; =0x020B9FD8
	ldrh r0, [r6, #0x3e]
	ldrb r1, [r5, #0x746]
	mov r3, r4
	bl FUN_0200b810
	and r0, r4, #0xff
	strb r4, [r5, #0x744]
	strb r0, [r5, #0x746]
	strh r0, [r6, #0x3e]
_0207B93C:
	ldr r0, _0207B9AC ; =0x020B9FD8
	ldrb r2, [r0, #0x745]
	cmp r2, #0
	ldrbeq r0, [r0, #0x747]
	cmpeq r0, #0
	ldrheq r0, [r6, #0x40]
	cmpeq r0, #0
	ldrheq r0, [r6, #0x42]
	cmpeq r0, #0
	addeq sp, sp, #0x18
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r5, _0207B9AC ; =0x020B9FD8
	ldrh r7, [r6, #0x40]
	ldrh r0, [r6, #0x42]
	ldrb r1, [r5, #0x747]
	mov r3, r4
	orr r0, r7, r0
	bl FUN_0200b838
	and r0, r4, #0xff
	strb r4, [r5, #0x745]
	strb r0, [r5, #0x747]
	strh r0, [r6, #0x42]
	ldrh r0, [r6, #0x42]
	strh r0, [r6, #0x40]
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207B9A4: .word 0x020BA6D8
_0207B9A8: .word 0x020BA720
_0207B9AC: .word 0x020B9FD8

	arm_func_start FUN_0207b9b0
FUN_0207b9b0: ; 0x0207B9B0
	mov r1, #0
	strb r1, [r0]
	strb r1, [r0, #0x1c]
	str r1, [r0, #0x10]
	bx lr
	arm_func_end FUN_0207b9b0

	arm_func_start FUN_0207b9c4
FUN_0207b9c4: ; 0x0207B9C4
	mvn r2, #0xff
	add r1, r2, #0xff
	str r2, [r0]
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	bx lr
	arm_func_end FUN_0207b9c4

	arm_func_start FUN_0207b9e0
FUN_0207b9e0: ; 0x0207B9E0
	ldrb r1, [r0, #1]
	mov r2, #1
	strb r2, [r0]
	cmp r1, #0x7f
	ldrbhi r1, [r0, #8]
	cmphi r1, #0x7f
	ldrbhi r1, [r0, #9]
	cmphi r1, #0x7f
	ldrbhi r1, [r0, #0xa]
	cmphi r1, #0x7f
	ldrbhi r1, [r0, #0xb]
	cmphi r1, #0x7f
	ldrbhi r1, [r0, #0xc]
	cmphi r1, #0x7f
	ldrbhi r1, [r0, #0xd]
	cmphi r1, #0x7f
	ldrbhi r1, [r0, #0xe]
	cmphi r1, #0x7f
	movhi r1, #0
	strbhi r1, [r0]
	bx lr
	arm_func_end FUN_0207b9e0

	arm_func_start FUN_0207ba34
FUN_0207ba34: ; 0x0207BA34
	ldrb r2, [r1, #1]
	cmp r2, #0x7f
	strbls r2, [r0, #1]
	ldrb r2, [r1, #8]
	cmp r2, #0x7f
	strbls r2, [r0, #8]
	ldrb r2, [r1, #9]
	cmp r2, #0x7f
	strbls r2, [r0, #9]
	ldrb r2, [r1, #0xa]
	cmp r2, #0x7f
	strbls r2, [r0, #0xa]
	ldrb r2, [r1, #0xb]
	cmp r2, #0x7f
	strbls r2, [r0, #0xb]
	ldrb r2, [r1, #0xc]
	cmp r2, #0x7f
	strbls r2, [r0, #0xc]
	ldrb r2, [r1, #0xd]
	cmp r2, #0x7f
	strbls r2, [r0, #0xd]
	ldrb r1, [r1, #0xe]
	cmp r1, #0x7f
	strbls r1, [r0, #0xe]
	bx lr
	arm_func_end FUN_0207ba34

	arm_func_start FUN_0207ba98
FUN_0207ba98: ; 0x0207BA98
	push {r3, r4, r5, lr}
	mov r4, r1
	cmp r2, #0x7f
	moveq r1, #0
	mov r5, r0
	subeq r0, r1, #0x80000001
	streq r1, [r5, #0x14]
	streq r0, [r5, #0x18]
	popeq {r3, r4, r5, pc}
	ldrb r3, [r5, #1]
	strb r4, [r5, #0x1d]
	cmp r3, #0
	bne _0207BAEC
	ldr r0, _0207BB38 ; =0x02091C54
	ldr r1, _0207BB3C ; =0x020B9FD8
	ldr r2, [r0, r2, lsl #2]
	mov r0, #0x3e8
	mul r0, r2, r0
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	b _0207BB10
	arm_func_end FUN_0207ba98
_0207BAEC:
	ldr r0, _0207BB40 ; =0x02091B54
	lsl r1, r2, #1
	ldrh r2, [r0, r1]
	ldr r1, _0207BB3C ; =0x020B9FD8
	mov r0, #0x3e8
	mul r2, r3, r2
	mul r0, r2, r0
	ldrsh r1, [r1, #0x28]
	bl FUN_0201f9bc
_0207BB10:
	str r0, [r5, #0x18]
	movs r1, r0
	moveq r0, #0
	streq r0, [r5, #0x14]
	popeq {r3, r4, r5, pc}
	ldr r0, [r5, #0x10]
	rsb r0, r0, r4, lsl #23
	bl FUN_0201f9bc
	str r0, [r5, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_0207BB38: .word 0x02091C54
_0207BB3C: .word 0x020B9FD8
_0207BB40: .word 0x02091B54

	arm_func_start FUN_0207bb44
FUN_0207bb44: ; 0x0207BB44
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4]
	cmp r1, #0
	beq _0207BBE4
	ldrb r2, [r4, #9]
	cmp r2, #0
	beq _0207BB84
	ldrb ip, [r4, #8]
	mov r3, #3
	mov r1, #0x7f
	lsl ip, ip, #0x17
	str ip, [r4, #0x10]
	strb r3, [r4, #0x1c]
	bl FUN_0207ba98
	b _0207BBD8
	arm_func_end FUN_0207bb44
_0207BB84:
	ldrb r2, [r4, #0xc]
	mov r1, #0x3f800000
	str r1, [r4, #0x10]
	cmp r2, #0
	beq _0207BBA8
	mov r1, #0x7f
	bl FUN_0207ba98
	mov r0, #4
	b _0207BBD4
_0207BBA8:
	ldrb r2, [r4, #0xa]
	cmp r2, #0
	beq _0207BBC4
	ldrsb r1, [r4, #0xb]
	bl FUN_0207ba98
	mov r0, #5
	b _0207BBD4
_0207BBC4:
	ldrb r2, [r4, #0xd]
	mov r1, #0
	bl FUN_0207ba98
	mov r0, #6
_0207BBD4:
	strb r0, [r4, #0x1c]
_0207BBD8:
	mov r0, #1
	strb r0, [r4, #0x1e]
	pop {r4, pc}
_0207BBE4:
	ldrb r0, [r4, #0x1c]
	cmp r0, #1
	movne r1, #0
	movne r0, #0x3f800000
	strbne r1, [r4, #0x1c]
	strne r0, [r4, #0x10]
	pop {r4, pc}

	arm_func_start FUN_0207bc00
FUN_0207bc00: ; 0x0207BC00
	push {r4, lr}
	mov r4, r0
	ldrb r1, [r4, #0x1c]
	cmp r1, #0
	popeq {r4, pc}
	ldrb r2, [r4, #0xe]
	mov r1, #0
	bl FUN_0207ba98
	mov r0, #7
	strb r0, [r4, #0x1c]
	pop {r4, pc}
	arm_func_end FUN_0207bc00

	arm_func_start FUN_0207bc2c
FUN_0207bc2c: ; 0x0207BC2C
	mov r1, #0
	strb r1, [r0, #0x1c]
	str r1, [r0, #0x10]
	str r1, [r0, #0x18]
	strb r1, [r0, #0x1e]
	bx lr
	arm_func_end FUN_0207bc2c

	arm_func_start FUN_0207bc44
FUN_0207bc44: ; 0x0207BC44
	mov r3, #0
	mov r2, #1
	strb r3, [r0]
	strb r2, [r0, #0x1c]
	str r1, [r0, #0x10]
	str r3, [r0, #0x18]
	strb r2, [r0, #0x1e]
	bx lr
	arm_func_end FUN_0207bc44

	arm_func_start FUN_0207bc64
FUN_0207bc64: ; 0x0207BC64
	mov r1, #0
	strb r1, [r0, #0x1c]
	str r1, [r0, #0x10]
	str r1, [r0, #0x18]
	strb r1, [r0, #0x1e]
	bx lr
	arm_func_end FUN_0207bc64

	arm_func_start FUN_0207bc7c
FUN_0207bc7c: ; 0x0207BC7C
	push {r4, lr}
	mov r4, r0
	ldrb r2, [r4, #0x1c]
	cmp r2, #2
	bls _0207BD9C
	ldr r1, [r4, #0x18]
	cmp r1, #0
	bne _0207BD6C
	ldrb r1, [r4, #0x1d]
	cmp r2, #7
	lsl r1, r1, #0x17
	str r1, [r4, #0x10]
	arm_func_end FUN_0207bc7c

	arm_func_start switchD
switchD: ; 0x0207BCAC
	addls pc, pc, r2, lsl #2
	b _0207BD9C
	arm_func_end switchD
_0207BCB4: ; jump table
	b _0207BD9C ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0207BCB8
	b _0207BD9C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0207BCBC
	b _0207BD9C
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0207BCC0
	b _0207BCD4
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0207BCC4
	b _0207BCF4
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0207BCC8
	b _0207BD20
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0207BCCC
	b _0207BD40
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0207BCD0
	b _0207BD58
	arm_func_end caseD_7
_0207BCD4:
	ldrb r2, [r4, #0xc]
	cmp r2, #0
	beq _0207BCF4
	mov r1, #0x7f
	bl FUN_0207ba98
	mov r0, #4
_0207BCEC:
	strb r0, [r4, #0x1c]
	b _0207BD9C
_0207BCF4:
	ldrb r2, [r4, #0xa]
	cmp r2, #0
	beq _0207BD14
	ldrsb r1, [r4, #0xb]
	mov r0, r4
	bl FUN_0207ba98
	mov r0, #5
	b _0207BCEC
_0207BD14:
	ldrb r0, [r4, #0xb]
	lsl r0, r0, #0x17
	str r0, [r4, #0x10]
_0207BD20:
	ldrb r2, [r4, #0xd]
	cmp r2, #0
	beq _0207BD40
	mov r0, r4
	mov r1, #0
	bl FUN_0207ba98
	mov r0, #6
	b _0207BCEC
_0207BD40:
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_0207ba98
	mov r0, #2
	b _0207BCEC
_0207BD58:
	mov r0, #0
	mov r1, #8
	strb r1, [r4, #0x1c]
	str r0, [r4, #0x10]
	b _0207BD98
_0207BD6C:
	ldr r2, [r4, #0x10]
	ldr r1, [r4, #0x14]
	mvn r0, #0xc0000000
	add r1, r2, r1
	cmp r1, r0
	movgt r1, r0
	ldr r0, [r4, #0x18]
	cmp r1, #0
	movlt r1, #0
	str r1, [r4, #0x10]
	sub r0, r0, #1
_0207BD98:
	str r0, [r4, #0x18]
_0207BD9C:
	ldr r0, [r4, #0x10]
	asr r0, r0, #0x17
	lsl r0, r0, #0x18
	asr r0, r0, #0x18
	pop {r4, pc}

	arm_func_start FUN_0207bdb0
FUN_0207bdb0: ; 0x0207BDB0
	mov r1, #0
	str r1, [r0]
	str r1, [r0, #4]
	str r1, [r0, #8]
	str r1, [r0, #0xc]
	bx lr
	arm_func_end FUN_0207bdb0

	arm_func_start FUN_0207bdc8
FUN_0207bdc8: ; 0x0207BDC8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x20
	mov sl, r0
	ldr r8, _0207BF88 ; =0x0208C534
	add r4, sp, #0
	mov sb, r1
	add r5, sl, #0xc
	add r6, sl, #0x10
	mov r7, #0
	mov r3, #4
	arm_func_end FUN_0207bdc8
_0207BDF0:
	ldrh r0, [r8, #2]
	ldrh r1, [r8], #4
	subs r3, r3, #1
	strh r0, [r4, #2]
	strh r1, [r4], #4
	bne _0207BDF0
	ldr r1, _0207BF8C ; =0x81020409
	lsl r3, r2, #8
	smull r0, r4, r1, r3
	add r4, r4, r2, lsl #8
	lsr r0, r3, #0x1f
	add r4, r0, r4, asr #6
	lsl r8, r4, #0x10
_0207BE24:
	ldrb fp, [sb, #1]
	cmp fp, #0
	beq _0207BF64
	add r4, sp, #0
	add r3, sp, #0x10
	mov r2, #4
_0207BE3C:
	ldrh r0, [r4, #2]
	ldrh r1, [r4], #4
	subs r2, r2, #1
	strh r0, [r3, #2]
	strh r1, [r3], #4
	bne _0207BE3C
	strb fp, [r6, #1]
	mov r4, #0
	strb r4, [r6]
	str r4, [r6, #8]
	ldrb r0, [sb, #1]
	cmp r0, #1
	bne _0207BEC8
	ldrh r1, [sb, #0xa]
	mov r0, #0x3e8
	ldr fp, _0207BF90 ; =0x020B9FD8
	mul r0, r1, r0
	ldrsh r1, [fp, #0x28]
	bl FUN_0201f9bc
	strh r0, [r6, #0x1a]
	ldrh r2, [sb, #0xc]
	mov r0, #0x3e8
	ldrsh r1, [fp, #0x28]
	mul r0, r2, r0
	bl FUN_0201f9bc
	movs r1, r0
	strh r1, [r6, #0x1e]
	mov r0, #0x1000000
	streq r0, [r6, #0x20]
	streq r4, [r6, #0x24]
	beq _0207BED4
	str r4, [r6, #0x20]
	bl FUN_0201f9bc
	str r0, [r6, #0x24]
	b _0207BED4
_0207BEC8:
	strh r4, [r6, #0x1a]
	strh r4, [r6, #0x1e]
	str r8, [r6, #0x20]
_0207BED4:
	mov r4, #0
	strh r4, [r6, #6]
	str r4, [r6, #0x14]
	ldrh r1, [sb, #8]
	cmp r1, #0
	strheq r4, [r6, #6]
	strheq r4, [r6, #4]
	beq _0207BF2C
	mov r0, #0x3e8
	mul r0, r1, r0
	ldr r1, _0207BF90 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201f9bc
	movs r1, r0
	addeq r1, r1, #1
	strh r1, [r6, #4]
	strh r4, [r6, #6]
	ldr r0, [sb, #4]
	lsl r0, r0, #0xa
	str r0, [r6, #0xc]
	bl FUN_0201f9bc
	str r0, [r6, #0x14]
_0207BF2C:
	ldrb r2, [sb, #3]
	ldr r1, _0207BF94 ; =0x02091E54
	add r0, sp, #0x10
	ldr r1, [r1, r2, lsl #2]
	str r1, [r6, #0x2c]
	ldrb r1, [sb, #2]
	add r1, sl, r1, lsl #1
	str r1, [r6, #0x28]
	ldrb r1, [sb, #2]
	lsl r1, r1, #1
	ldrh r0, [r0, r1]
	strh r0, [r6, #2]
	str r6, [r5]
	add r5, r6, #0x30
_0207BF64:
	add r7, r7, #1
	cmp r7, #4
	add sb, sb, #0x10
	add r6, r6, #0x34
	blt _0207BE24
	mov r0, #0
	str r0, [r5]
	add sp, sp, #0x20
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207BF88: .word 0x0208C534
_0207BF8C: .word 0x81020409
_0207BF90: .word 0x020B9FD8
_0207BF94: .word 0x02091E54

	arm_func_start FUN_0207bf98
FUN_0207bf98: ; 0x0207BF98
	push {r3, lr}
	ldr lr, [r0, #0xc]
	cmp lr, #0
	popeq {r3, pc}
	ldr r2, _0207BFE0 ; =0x81020409
	lsl r3, r1, #8
	smull r0, ip, r2, r3
	add ip, ip, r1, lsl #8
	lsr r0, r3, #0x1f
	add ip, r0, ip, asr #6
	lsl r1, ip, #0x10
	arm_func_end FUN_0207bf98
_0207BFC4:
	ldrb r0, [lr, #1]
	cmp r0, #3
	streq r1, [lr, #0x20]
	ldr lr, [lr, #0x30]
	cmp lr, #0
	bne _0207BFC4
	pop {r3, pc}
	.align 2, 0_0207BFE0: .word 0x81020409

	arm_func_start FUN_0207bfe4
FUN_0207bfe4: ; 0x0207BFE4
	push {r4, r5, r6, lr}
	ldr r5, [r0, #0xc]
	mov r6, #0
	str r6, [r0]
	str r6, [r0, #4]
	str r6, [r0, #8]
	cmp r5, #0
	beq _0207C094
	mov r4, #0x1000000
	arm_func_end FUN_0207bfe4
_0207C008:
	ldrh r0, [r5, #0x1a]
	cmp r0, #0
	subne r0, r0, #1
	strhne r0, [r5, #0x1a]
	bne _0207C088
	ldr r1, [r5, #0x2c]
	mov r0, r5
	blx r1
	ldrh r1, [r5, #0x1e]
	asr r0, r0, #8
	cmp r1, #0
	beq _0207C05C
	sub r1, r1, #1
	strh r1, [r5, #0x1e]
	ldrh r1, [r5, #0x1e]
	cmp r1, #0
	ldrne r2, [r5, #0x20]
	ldrne r1, [r5, #0x24]
	addne r1, r2, r1
	strne r1, [r5, #0x20]
	streq r4, [r5, #0x20]
_0207C05C:
	ldr r1, [r5, #0x20]
	ldr r2, [r5, #0x28]
	lsr r1, r1, #8
	mul r1, r0, r1
	asr r0, r1, #0x10
	ldrsh r1, [r2]
	lsl r0, r0, #0x10
	add r0, r1, r0, asr #16
	strh r0, [r2]
	ldrh r0, [r5, #2]
	orr r6, r6, r0
_0207C088:
	ldr r5, [r5, #0x30]
	cmp r5, #0
	bne _0207C008
_0207C094:
	mov r0, r6
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0207c09c
FUN_0207c09c: ; 0x0207C09C
	mov r1, #0
	strb r1, [r0]
	strb r1, [r0, #1]
	mov r0, r1
	bx lr
	arm_func_end FUN_0207c09c

	arm_func_start FUN_0207c0b0
FUN_0207c0b0: ; 0x0207C0B0
	ldrh r1, [r0, #6]
	cmp r1, #0
	bne _0207C0D8
	ldr r1, [r0, #8]
	ldrh r2, [r0, #4]
	cmp r1, #0
	movne r1, #0
	ldreq r1, [r0, #0xc]
	strh r2, [r0, #6]
	str r1, [r0, #8]
	arm_func_end FUN_0207c0b0
_0207C0D8:
	ldrh r1, [r0, #6]
	sub r1, r1, #1
	strh r1, [r0, #6]
	ldr r0, [r0, #8]
	bx lr

	arm_func_start FUN_0207c0ec
FUN_0207c0ec: ; 0x0207C0EC
	ldrh r1, [r0, #6]
	cmp r1, #0
	bne _0207C124
	ldrb r1, [r0]
	ldrh r2, [r0, #4]
	tst r1, #2
	ldrne r1, [r0, #0xc]
	strh r2, [r0, #6]
	rsbne r2, r1, #0
	ldrb r1, [r0]
	ldreq r2, [r0, #0xc]
	eor r1, r1, #2
	str r2, [r0, #8]
	strb r1, [r0]
	arm_func_end FUN_0207c0ec
_0207C124:
	ldrh r1, [r0, #6]
	sub r1, r1, #1
	strh r1, [r0, #6]
	ldr r0, [r0, #8]
	bx lr

	arm_func_start FUN_0207c138
FUN_0207c138: ; 0x0207C138
	ldrh r1, [r0, #6]
	cmp r1, #0
	bne _0207C168
	ldrb r2, [r0]
	ldrh r1, [r0, #4]
	tst r2, #1
	strh r1, [r0, #6]
	ldrne r1, [r0, #0x14]
	rsbne r1, r1, #0
	strne r1, [r0, #0x14]
	orr r1, r2, #1
	strb r1, [r0]
	arm_func_end FUN_0207c138
_0207C168:
	ldrh r3, [r0, #6]
	ldr r2, [r0, #8]
	ldr r1, [r0, #0x14]
	sub r3, r3, #1
	add r1, r2, r1
	strh r3, [r0, #6]
	str r1, [r0, #8]
	mov r0, r1
	bx lr

	arm_func_start FUN_0207c18c
FUN_0207c18c: ; 0x0207C18C
	ldrh r3, [r0, #6]
	cmp r3, #0
	bne _0207C1CC
	ldrb r2, [r0]
	ldrh r3, [r0, #4]
	tst r2, #1
	ldrne r1, [r0, #0x14]
	rsbne r1, r1, #0
	strne r1, [r0, #0x14]
	bne _0207C1C4
	lsl r1, r3, #0xf
	lsr r3, r1, #0x10
	cmp r3, #1
	movlo r3, #1
	arm_func_end FUN_0207c18c
_0207C1C4:
	orr r1, r2, #1
	strb r1, [r0]
_0207C1CC:
	ldr r2, [r0, #8]
	ldr r1, [r0, #0x14]
	sub r3, r3, #1
	add r1, r2, r1
	strh r3, [r0, #6]
	str r1, [r0, #8]
	mov r0, r1
	bx lr

	arm_func_start FUN_0207c1ec
FUN_0207c1ec: ; 0x0207C1EC
	ldrh r1, [r0, #6]
	cmp r1, #0
	ldrheq r2, [r0, #4]
	moveq r1, #0
	streq r1, [r0, #8]
	strheq r2, [r0, #6]
	ldrne r2, [r0, #8]
	ldrne r1, [r0, #0x14]
	addne r1, r2, r1
	strne r1, [r0, #8]
	ldrh r1, [r0, #6]
	sub r1, r1, #1
	strh r1, [r0, #6]
	ldr r0, [r0, #8]
	bx lr
	arm_func_end FUN_0207c1ec

	arm_func_start FUN_0207c228
FUN_0207c228: ; 0x0207C228
	ldrh r1, [r0, #6]
	cmp r1, #0
	ldrheq r2, [r0, #4]
	ldreq r1, [r0, #0xc]
	strheq r2, [r0, #6]
	ldrne r2, [r0, #8]
	ldrne r1, [r0, #0x14]
	subne r1, r2, r1
	str r1, [r0, #8]
	ldrh r1, [r0, #6]
	sub r1, r1, #1
	strh r1, [r0, #6]
	ldr r0, [r0, #8]
	bx lr
	arm_func_end FUN_0207c228

	arm_func_start FUN_0207c260
FUN_0207c260: ; 0x0207C260
	push {r4, lr}
	mov r4, r0
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0207C290
	ldrh r0, [r4, #4]
	strh r0, [r4, #6]
	bl FUN_020751e8
	ldr r1, [r4, #0xc]
	asr r1, r1, #0x10
	mul r0, r1, r0
	str r0, [r4, #8]
	arm_func_end FUN_0207c260
_0207C290:
	ldrh r1, [r4, #6]
	ldr r0, [r4, #8]
	sub r1, r1, #1
	strh r1, [r4, #6]
	pop {r4, pc}

	arm_func_start FUN_0207c2a4
FUN_0207c2a4: ; 0x0207C2A4
	push {r3, r4, r5, lr}
	mov r4, r0
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0207C2D8
	ldrh r0, [r4, #4]
	ldr r5, [r4, #0xc]
	strh r0, [r4, #6]
	bl FUN_020751e8
	asr r1, r5, #0xf
	mul r0, r1, r0
	sub r0, r0, r5, asr #1
	str r0, [r4, #8]
	arm_func_end FUN_0207c2a4
_0207C2D8:
	ldrh r1, [r4, #6]
	ldr r0, [r4, #8]
	sub r1, r1, #1
	strh r1, [r4, #6]
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0207c2ec
FUN_0207c2ec: ; 0x0207C2EC
	push {r3, r4, r5, lr}
	mov r4, #0
	mov r1, r4
	mov r2, #0x40
	mov r5, r0
	bl MemWrite
	ldr r0, _0207C344 ; =0x020BAFD8
	mov ip, #0x14
	ldrb r0, [r0, #0xd1c]
	mov r3, #1
	mov r2, #2
	add lr, r0, #1
	mov r1, #0x1000
	mov r0, #0x800
	strb lr, [r5]
	strb ip, [r5, #1]
	strb r3, [r5, #2]
	strb r2, [r5, #3]
	strb r4, [r5, #4]
	str r1, [r5, #0x10]
	str r0, [r5, #0x20]
	pop {r3, r4, r5, pc}
	.align 2, 0_0207C344: .word 0x020BAFD8
	arm_func_end FUN_0207c2ec

	arm_func_start FUN_0207c348
FUN_0207c348: ; 0x0207C348
	ldr r2, _0207C364 ; =0x020BAFD8
	ldrb r2, [r2, #0xd1c]
	cmp r1, r2
	mvnls r0, #0x19
	strbhi r1, [r0]
	movhi r0, #0
	bx lr
	.align 2, 0_0207C364: .word 0x020BAFD8
	arm_func_end FUN_0207c348

	arm_func_start FUN_0207c368
FUN_0207c368: ; 0x0207C368
	ldr r2, _0207C384 ; =0x020BAFD8
	ldrb r2, [r2, #0xd1c]
	cmp r1, r2
	mvnls r0, #0x19
	strbhi r1, [r0, #1]
	movhi r0, #0
	bx lr
	.align 2, 0_0207C384: .word 0x020BAFD8
	arm_func_end FUN_0207c368

	arm_func_start FUN_0207c388
FUN_0207c388: ; 0x0207C388
	push {r4, lr}
	cmp r1, #1
	strbeq r1, [r0, #2]
	moveq r0, #0
	popeq {r4, pc}
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0207c388

	arm_func_start FUN_0207c3b8
FUN_0207c3b8: ; 0x0207C3B8
	cmp r1, #0x10
	cmplo r2, #0x10
	mvnhs r0, #0x17
	bxhs lr
	cmp r1, r2
	movhi r3, r2
	movhi r2, r1
	movhi r1, r3
	orr r3, r1, #0x80
	orr r1, r2, #0x80
	strb r3, [r0, #4]
	strb r1, [r0, #3]
	mov r0, #0
	bx lr
	arm_func_end FUN_0207c3b8

	arm_func_start FUN_0207c3f0
FUN_0207c3f0: ; 0x0207C3F0
	push {r4, lr}
	cmp r1, #0
	moveq r1, #0x1000
	beq _0207C424
	cmp r1, #0x400
	bge _0207C424
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0207c3f0
_0207C424:
	str r1, [r0, #0x10]
	mov r0, #0
	pop {r4, pc}

	arm_func_start FUN_0207c430
FUN_0207c430: ; 0x0207C430
	push {r4, lr}
	cmp r1, #0
	moveq r1, #0x800
	beq _0207C464
	cmp r1, #0x400
	bge _0207C464
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0207c430
_0207C464:
	str r1, [r0, #0x20]
	mov r0, #0
	pop {r4, pc}
_0207C470:
	.byte 0x0C, 0x20, 0x9F, 0xE5, 0x01, 0x00, 0xA0, 0xE1, 0x08, 0xC0, 0x9F, 0xE5, 0x20, 0x10, 0xA0, 0xE3
	.byte 0x1C, 0xFF, 0x2F, 0xE1, 0x73, 0x74, 0x62, 0x66, 0xB0, 0x52, 0x07, 0x02, 0x10, 0x40, 0x2D, 0xE9
	.byte 0x01, 0x40, 0xA0, 0xE1, 0x44, 0xE4, 0xFF, 0xEB, 0x04, 0x00, 0xA0, 0xE1, 0x16, 0xE4, 0xFF, 0xEB
	.byte 0x04, 0x00, 0xA0, 0xE1, 0x10, 0x80, 0xBD, 0xE8

	arm_func_start FUN_0207c4a8
FUN_0207c4a8: ; 0x0207C4A8
	ldr r0, _0207C4C4 ; =0x020BBEC0
	mov r2, #0
	strb r2, [r0, #4]
	mov r1, #1
	str r1, [r0]
	strb r2, [r0, #9]
	bx lr
	.align 2, 0_0207C4C4: .word 0x020BBEC0
	arm_func_end FUN_0207c4a8

	arm_func_start FUN_0207c4c8
FUN_0207c4c8: ; 0x0207C4C8
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sl, r0
	cmp sl, #0
	ldr r8, _0207C530 ; =0x020BC088
	mov sb, #0
	ble _0207C528
	ldr r5, _0207C534 ; =0x696D7473
	mov r4, sb
	mov r7, #0x35c
	mov r6, #0x10
	arm_func_end FUN_0207c4c8
_0207C4F0:
	mov r0, r7
	mov r1, r6
	mov r2, r5
	bl FUN_020752b0
	cmp r0, #0
	mvneq r0, #0x7f
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	str r4, [r0]
	strb r4, [r0, #4]
	add sb, sb, #1
	str r0, [r8]
	cmp sb, sl
	add r8, r0, #0x358
	blt _0207C4F0
_0207C528:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_0207C530: .word 0x020BC088
_0207C534: .word 0x696D7473

	arm_func_start FUN_0207c538
FUN_0207c538: ; 0x0207C538
	push {r4, r5, r6, lr}
	ldr r4, _0207C5BC ; =0x020BBEC0
	mov r5, #0
	ldr r0, [r4, #0x1c8]
	cmp r0, #0
	beq _0207C564
	arm_func_end FUN_0207c538
_0207C550:
	ldr r6, [r0, #0x358]
	bl FUN_020754fc
	mov r0, r6
	cmp r6, #0
	bne _0207C550
_0207C564:
	str r5, [r4, #0x1c8]
	ldr r0, [r4, #0xe8]
	cmp r0, #0
	beq _0207C578
	bl FUN_020754fc
_0207C578:
	str r5, [r4, #0xe8]
	ldr r0, [r4, #0x1b4]
	cmp r0, #0
	beq _0207C58C
	bl FUN_020754fc
_0207C58C:
	str r5, [r4, #0x1b4]
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _0207C5A0
	bl FUN_0207dc70
_0207C5A0:
	str r5, [r4, #0x18]
	ldr r0, [r4, #0x1c]
	cmp r0, #0
	beq _0207C5B4
	bl FUN_0207dc70
_0207C5B4:
	str r5, [r4, #0x1c]
	pop {r4, r5, r6, pc}
	.align 2, 0_0207C5BC: .word 0x020BBEC0

	arm_func_start FUN_0207c5c0
FUN_0207c5c0: ; 0x0207C5C0
	push {r4, r5, r6, lr}
	ldr r1, _0207C80C ; =0x020B9FD8
	mov r5, r0
	ldrsb r0, [r1]
	ldr r4, _0207C810 ; =0x020BBEC0
	mov r3, #0
	cmp r0, #0
	bne _0207C5FC
	mvn r4, #0xc1
	mov r1, r3
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0207c5c0
_0207C5FC:
	ldrsb r0, [r4, #4]
	cmp r0, #1
	moveq r0, r3
	popeq {r4, r5, r6, pc}
	cmp r5, #0
	bne _0207C630
	mvn r4, #0x17
	mov r1, r3
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
_0207C630:
	ldrb r2, [r5, #3]
	tst r2, #0x80
	beq _0207C658
	mov r0, #1
	strb r0, [r4, #6]
	ldrb r1, [r5, #4]
	and r0, r2, #0x7f
	and r1, r1, #0x7f
	strb r1, [r4, #7]
	b _0207C684
_0207C658:
	cmp r2, #0
	ldreq r0, _0207C814 ; =0x020BA6D8
	strb r3, [r4, #6]
	ldrbeq r1, [r5, #4]
	ldrheq r0, [r0, #0x3a]
	subeq r0, r0, r1
	ldrb r1, [r5, #4]
	andeq r2, r0, #0xff
	sub r0, r2, #1
	strb r1, [r4, #7]
	add r0, r1, r0
_0207C684:
	strb r0, [r4, #8]
	ldrb r0, [r5, #1]
	strb r0, [r4, #0xf0]
	ldrb r0, [r5, #2]
	strb r0, [r4, #5]
	ldr r0, [r5, #8]
	str r0, [r4, #0xc]
	ldr r0, [r5, #0x14]
	cmp r0, #0
	addne r0, r5, #0x14
	ldrne r6, _0207C818 ; =0x020BC07C
	ldmne r0, {r0, r1, r2}
	stmne r6, {r0, r1, r2}
	ldreq r1, _0207C81C ; =0x0207C470
	ldreq r0, _0207C820 ; =0x0207C48C
	streq r1, [r4, #0x1bc]
	streq r0, [r4, #0x1c0]
	streq r4, [r4, #0x1c4]
	ldr r1, [r5, #0x10]
	str r1, [r4, #0x20]
	str r3, [r4, #0x10]
	ldr r0, [r5, #0x20]
	str r0, [r4, #0x14]
	str r3, [r4, #0x1c8]
	ldrsb r0, [r5, #5]
	strb r0, [r4, #0x1e0]
	ldrsb r0, [r5, #6]
	strb r0, [r4, #0xa]
	str r3, [r4, #0xec]
	str r3, [r4, #0x1b8]
	cmp r0, #1
	bne _0207C710
	cmp r1, #0x1000
	movlt r0, #0x1000
	strlt r0, [r4, #0x20]
_0207C710:
	ldr r0, [r4, #0x20]
	ldr r1, _0207C824 ; =0x61746164
	add r0, r0, r0, lsr #31
	asr r0, r0, #1
	bl FUN_0207dbf4
	str r0, [r4, #0x18]
	cmp r0, #0
	bne _0207C750
	bl FUN_0207c538
	mvn r4, #0x7f
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
_0207C750:
	ldr r0, [r4, #0x14]
	ldr r1, _0207C828 ; =0x656C6966
	bl FUN_0207dbf4
	str r0, [r4, #0x1c]
	cmp r0, #0
	bne _0207C788
	bl FUN_0207c538
	mvn r4, #0x7f
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
_0207C788:
	ldrb r0, [r5, #2]
	bl FUN_0207c4c8
	movs r6, r0
	bpl _0207C7B4
	bl FUN_0207c538
	mov r1, #0
	mov r0, r6
	mov r2, r1
	bl FUN_02075144
	mov r0, r6
	pop {r4, r5, r6, pc}
_0207C7B4:
	bl FUN_0207f8c8
	ldrsb r0, [r5, #6]
	cmp r0, #1
	bne _0207C7C8
	bl FUN_0207f5b4
_0207C7C8:
	ldrb r0, [r5]
	strb r0, [r4, #0x24]
	ldrb r0, [r5, #1]
	strb r0, [r4, #0xf0]
	bl FUN_0207df40
	movs r5, r0
	movpl r0, #1
	strbpl r0, [r4, #4]
	movpl r0, #0
	poppl {r4, r5, r6, pc}
	bl FUN_0207c538
	mov r1, #0
	mov r0, r5
	mov r2, r1
	bl FUN_02075144
	mov r0, r5
	pop {r4, r5, r6, pc}
	.align 2, 0_0207C80C: .word 0x020B9FD8
_0207C810: .word 0x020BBEC0
_0207C814: .word 0x020BA6D8
_0207C818: .word 0x020BC07C
_0207C81C: .word 0x0207C470
_0207C820: .word 0x0207C48C
_0207C824: .word 0x61746164
_0207C828: .word 0x656C6966

	arm_func_start FUN_0207c82c
FUN_0207c82c: ; 0x0207C82C
	push {r4, lr}
	ldr r4, _0207C860 ; =0x020BBEC0
	ldrsb r0, [r4, #4]
	cmp r0, #0
	mvneq r0, #0x59
	popeq {r4, pc}
	bl FUN_0207cde4
	bl FUN_0207e040
	bl FUN_0207f600
	bl FUN_0207c538
	mov r0, #0
	strb r0, [r4, #4]
	pop {r4, pc}
	.align 2, 0_0207C860: .word 0x020BBEC0
	arm_func_end FUN_0207c82c

	arm_func_start FUN_0207c864
FUN_0207c864: ; 0x0207C864
	ldr r2, _0207C8AC ; =0x04000208
	mov r1, #0
	ldrh r3, [r2]
	ldr r0, _0207C8B0 ; =0x020BBEC0
	strh r1, [r2]
	ldr r0, [r0, #0x1c8]
	cmp r0, #0
	beq _0207C89C
	arm_func_end FUN_0207c864
_0207C884:
	ldr r1, [r0]
	cmp r1, #0
	beq _0207C89C
	ldr r0, [r0, #0x358]
	cmp r0, #0
	bne _0207C884
_0207C89C:
	ldr r2, _0207C8AC ; =0x04000208
	ldrh r1, [r2]
	strh r3, [r2]
	bx lr
	.align 2, 0_0207C8AC: .word 0x04000208
_0207C8B0: .word 0x020BBEC0

	arm_func_start FUN_0207c8b4
FUN_0207c8b4: ; 0x0207C8B4
	push {r3, r4, r5, r6, r7, lr}
	ldr r2, _0207C920 ; =0x04000208
	ldr r1, _0207C924 ; =0x020BBEC0
	ldrh r4, [r2]
	ldr r6, [r1, #0x1c8]
	mov r1, #0
	mov r7, r0
	strh r1, [r2]
	cmp r6, #0
	beq _0207C90C
	mov r5, #1
	arm_func_end FUN_0207c8b4
_0207C8E0:
	ldrsb r0, [r6, #0xa]
	cmp r0, #1
	bne _0207C900
	mov r0, r6
	mov r1, r5
	mov r2, r7
	bl FUN_0207d2c4
	strb r5, [r6, #0x12]
_0207C900:
	ldr r6, [r6, #0x358]
	cmp r6, #0
	bne _0207C8E0
_0207C90C:
	ldr r2, _0207C920 ; =0x04000208
	mov r0, #0
	ldrh r1, [r2]
	strh r4, [r2]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207C920: .word 0x04000208
_0207C924: .word 0x020BBEC0

	arm_func_start FUN_0207c928
FUN_0207c928: ; 0x0207C928
	push {r4, r5, r6, lr}
	ldr r1, _0207C978 ; =0x020BBEC0
	mov r6, r0
	ldr r5, [r1, #0x1c8]
	cmp r5, #0
	beq _0207C970
	mov r4, #0
	arm_func_end FUN_0207c928
_0207C944:
	ldrsb r0, [r5, #0x12]
	cmp r0, #1
	bne _0207C964
	mov r0, r5
	mov r1, r4
	mov r2, r6
	strb r4, [r5, #0x12]
	bl FUN_0207d2c4
_0207C964:
	ldr r5, [r5, #0x358]
	cmp r5, #0
	bne _0207C944
_0207C970:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_0207C978: .word 0x020BBEC0

	arm_func_start FUN_0207c97c
FUN_0207c97c: ; 0x0207C97C
	ldr r1, _0207C98C ; =0x020BBEC0
	strb r0, [r1, #9]
	mov r0, #0
	bx lr
	.align 2, 0_0207C98C: .word 0x020BBEC0
	arm_func_end FUN_0207c97c

	arm_func_start FUN_0207c990
FUN_0207c990: ; 0x0207C990
	push {r3, lr}
	ldr r1, _0207C9E0 ; =0x020BBEC0
	ldrsb r1, [r1, #4]
	cmp r1, #0
	mvneq r0, #0x59
	popeq {r3, pc}
	bl FUN_0207da9c
	cmp r0, #0
	mvneq r0, #0xb0
	popeq {r3, pc}
	ldr r1, [r0, #0x18]
	cmp r1, #0
	bne _0207C9D8
	ldrsb r1, [r0, #4]
	cmp r1, #0
	moveq r0, #0
	ldrne r0, [r0]
	pop {r3, pc}
	arm_func_end FUN_0207c990
_0207C9D8:
	mvn r0, #0xb0
	pop {r3, pc}
	.align 2, 0_0207C9E0: .word 0x020BBEC0

	arm_func_start FUN_0207c9e4
FUN_0207c9e4: ; 0x0207C9E4
	push {r3, r4, r5, lr}
	ldr r1, _0207CA20 ; =0x020BBEC0
	mov r5, r0
	ldrsb r0, [r1, #4]
	cmp r0, #0
	mvneq r0, #0x59
	popeq {r3, r4, r5, pc}
	bl FUN_0207c864
	movs r4, r0
	mvneq r0, #0xb4
	popeq {r3, r4, r5, pc}
	bl FUN_0207cb7c
	str r4, [r5]
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_0207CA20: .word 0x020BBEC0
	arm_func_end FUN_0207c9e4

	arm_func_start FUN_0207ca24
FUN_0207ca24: ; 0x0207CA24
	push {r3, r4, r5, r6, r7, lr}
	movs r6, r0
	mov r5, r1
	mov r4, r2
	bne _0207CA54
	mvn r4, #0x17
	mov r0, r4
	mov r2, r5
	mov r1, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0207ca24
_0207CA54:
	add r0, sp, #0
	bl FUN_0207c9e4
	movs r7, r0
	beq _0207CA78
	mov r1, #0
	mov r2, r1
	bl FUN_02075144
	mov r0, r7
	pop {r3, r4, r5, r6, r7, pc}
_0207CA78:
	ldr r0, [sp]
	add r1, r0, #0x140
_0207CA80:
	ldrsb r0, [r6], #1
	mov r2, r1
	strb r0, [r1], #1
	ldrsb r0, [r2]
	cmp r0, #0
	bne _0207CA80
	cmp r5, #0
	moveq r5, #0x1000
	ldr r0, [sp]
	mov r1, r5
	bl FUN_0207cf50
	movs r5, r0
	bpl _0207CAD8
	ldr r0, [sp]
	bl FUN_0207cd18
	mvn r4, #0xae
	mov r0, r4
	mov r2, r5
	mov r1, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
_0207CAD8:
	ldr r0, [sp]
	ldr r1, _0207CB60 ; =FUN_0207d734
	mov r2, #0
	str r1, [r0, #0x210]
	ldr r0, [sp]
	ldr r1, _0207CB64 ; =FUN_0207dafc
	str r2, [r0, #0x214]
	ldr r0, [sp]
	ldr r2, _0207CB68 ; =FUN_0207d75c
	str r1, [r0, #0x218]
	ldr r0, [sp]
	ldr r1, _0207CB6C ; =FUN_0207f864
	str r2, [r0, #0x21c]
	ldr r0, [sp]
	ldr r2, _0207CB70 ; =FUN_0207ed28
	str r1, [r0, #0x220]
	ldr r0, [sp]
	ldr r1, _0207CB74 ; =FUN_0207ed94
	str r2, [r0, #0x228]
	ldr r0, [sp]
	ldr r2, _0207CB78 ; =FUN_0207ee04
	str r1, [r0, #0x22c]
	ldr r0, [sp]
	mov r1, #1
	str r2, [r0, #0x230]
	ldr r0, [sp]
	strb r4, [r0, #0x16]
	ldr r0, [sp]
	strb r1, [r0, #0x1e]
	ldr r0, [sp]
	strb r1, [r0, #0x2f]
	ldr r0, [sp]
	ldr r0, [r0]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207CB60: .word FUN_0207d734
_0207CB64: .word FUN_0207dafc
_0207CB68: .word FUN_0207d75c
_0207CB6C: .word FUN_0207f864
_0207CB70: .word FUN_0207ed28
_0207CB74: .word FUN_0207ed94
_0207CB78: .word FUN_0207ee04

	arm_func_start FUN_0207cb7c
FUN_0207cb7c: ; 0x0207CB7C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r5, r0
	mov r0, #0
	mov r4, #1
	ldr r2, _0207CCF8 ; =0x0000BB80
	str r0, [r5, #0x10]
	str r0, [r5, #0x14]
	mov r3, #2
	strb r3, [r5, #0x1d]
	ldr r1, _0207CCFC ; =0x020B9FD8
	str r0, [r5, #4]
	str r0, [r5, #8]
	str r0, [r5, #0xc]
	strb r4, [r5, #0x10]
	strb r4, [r5, #0x14]
	str r0, [r5, #0x18]
	strb r0, [r5, #0x22]
	strb r0, [r5, #0x23]
	strb r4, [r5, #0x1f]
	strb r4, [r5, #0x25]
	strb r0, [r5, #0x20]
	str r2, [r5, #0x40]
	ldrsb r2, [r1, #0x49]
	ldr r1, _0207CD00 ; =0x020BBEC0
	ldr r4, _0207CD04 ; =FUN_0207d734
	strb r2, [r5, #0x26]
	strb r0, [r5, #0x2e]
	strb r0, [r5, #0x2f]
	str r0, [r5, #0xf8]
	str r0, [r5, #0xe4]
	str r0, [r5, #0xe8]
	str r0, [r5, #0x48]
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	str r0, [r5, #0x54]
	str r0, [r5, #0x58]
	str r0, [r5, #0x5c]
	strh r0, [r5, #0x60]
	str r0, [r5, #0x1c0]
	str r0, [r5, #0x1c4]
	str r0, [r5, #0x1c8]
	str r0, [r5, #0x1d4]
	ldr r6, [r1, #0x18]
	ldr r3, _0207CD08 ; =FUN_0207d73c
	ldr r2, _0207CD0C ; =FUN_0207d744
	ldr r1, _0207CD10 ; =FUN_0207f864
	str r2, [r5, #0x21c]
	str r6, [r5, #0x1f8]
	str r0, [r5, #0x30]
	strh r0, [r5, #0x3c]
	str r4, [r5, #0x210]
	str r0, [r5, #0x214]
	str r3, [r5, #0x218]
	str r0, [r5, #0x224]
	str r1, [r5, #0x220]
	mov r2, r0
	arm_func_end FUN_0207cb7c
_0207CC5C:
	add r1, r5, r0, lsl #2
	add r0, r0, #1
	str r2, [r1, #0x1f0]
	cmp r0, #2
	blt _0207CC5C
	mov r4, #0
_0207CC74:
	add r0, r5, r2, lsl #2
	add r0, r0, #0x200
	strh r4, [r0, #0x34]
	add r2, r2, #1
	strh r4, [r0, #0x36]
	cmp r2, #2
	blt _0207CC74
	add sb, r5, #0x23c
	mov r8, #0
	mov r7, #0x10
	mov r6, #0x2c
_0207CCA0:
	mla r0, r4, r6, sb
	mov r1, r8
	mov r2, r7
	bl MemWrite
	add r4, r4, #1
	cmp r4, #2
	blt _0207CCA0
	ldr r1, _0207CD00 ; =0x020BBEC0
	strb r8, [r5, #0x29]
	strb r8, [r5, #0x2a]
	ldr r2, [r1]
	ldr r0, _0207CD14 ; =0x0000FFFF
	lsl r2, r2, #0x10
	str r2, [r5]
	ldr r2, [r1]
	add r2, r2, #1
	cmp r2, r0
	str r2, [r1]
	movhs r0, #1
	strhs r0, [r1]
	mov r0, r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0207CCF8: .word 0x0000BB80
_0207CCFC: .word 0x020B9FD8
_0207CD00: .word 0x020BBEC0
_0207CD04: .word FUN_0207d734
_0207CD08: .word FUN_0207d73c
_0207CD0C: .word FUN_0207d744
_0207CD10: .word FUN_0207f864
_0207CD14: .word 0x0000FFFF

	arm_func_start FUN_0207cd18
FUN_0207cd18: ; 0x0207CD18
	push {r4, r5, r6, r7, r8, lr}
	ldr r1, _0207CDDC ; =0x04000208
	mov r8, r0
	ldrh r4, [r1]
	ldr r7, [r8]
	mov r5, #0
	strh r5, [r1]
	strb r5, [r8, #4]
	strb r5, [r8, #0xa]
	strb r5, [r8, #9]
	strb r5, [r8, #0x11]
	strb r5, [r8, #0x1e]
	strb r5, [r8, #0x2f]
	arm_func_end FUN_0207cd18
_0207CD4C:
	add r0, r8, r5, lsl #2
	ldr r0, [r0, #0x1f0]
	cmp r0, #0
	beq _0207CD60
	bl FUN_0207b5b8
_0207CD60:
	add r5, r5, #1
	cmp r5, #2
	blt _0207CD4C
	ldr r2, _0207CDDC ; =0x04000208
	mov r0, r8
	ldrh r1, [r2]
	strh r4, [r2]
	bl FUN_0207cf80
	ldr r0, [r8, #0x1d4]
	cmp r0, #0
	beq _0207CD98
	bl FUN_0207dc70
	mov r0, #0
	str r0, [r8, #0x1d4]
_0207CD98:
	ldr r6, _0207CDDC ; =0x04000208
	mov r4, #0
	ldrh r5, [r6]
	mov r0, r7
	mov r2, r4
	strh r4, [r6]
	ldr r3, [r8, #0x214]
	ldr r7, [r8, #0x210]
	mov r1, #2
	blx r7
	ldr r0, _0207CDE0 ; =FUN_0207d734
	str r4, [r8]
	str r0, [r8, #0x210]
	ldrh r0, [r6]
	mov r0, r4
	strh r5, [r6]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0207CDDC: .word 0x04000208
_0207CDE0: .word FUN_0207d734

	arm_func_start FUN_0207cde4
FUN_0207cde4: ; 0x0207CDE4
	push {r4, lr}
	ldr r0, _0207CE18 ; =0x020BBEC0
	ldr r4, [r0, #0x1c8]
	cmp r4, #0
	popeq {r4, pc}
	arm_func_end FUN_0207cde4
_0207CDF8:
	ldr r0, [r4]
	cmp r0, #0
	ble _0207CE08
	bl FUN_0207ce1c
_0207CE08:
	ldr r4, [r4, #0x358]
	cmp r4, #0
	bne _0207CDF8
	pop {r4, pc}
	.align 2, 0_0207CE18: .word 0x020BBEC0

	arm_func_start FUN_0207ce1c
FUN_0207ce1c: ; 0x0207CE1C
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _0207CF48 ; =0x020BBEC0
	mov r6, r0
	ldrsb r1, [r1, #4]
	mov r4, #0
	cmp r1, #0
	mvneq r0, #0x59
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_0207da9c
	movs r5, r0
	bne _0207CE64
	mvn r4, #0x3f
	mov r0, r4
	mov r1, r6
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0207ce1c
_0207CE64:
	strb r4, [r5, #0x2f]
	ldr r0, _0207CF4C ; =0x04000208
	strb r4, [r5, #9]
	ldrh r3, [r0]
	ldr r1, _0207CF4C ; =0x04000208
	strh r4, [r0]
	ldrsb r2, [r5, #6]
	cmp r2, #0
	moveq r0, #1
	strbeq r0, [r5, #6]
	ldrh r0, [r1]
	cmp r2, #0
	strh r3, [r1]
	bne _0207CF40
	mov r1, #0
	strb r1, [r5, #0x13]
	ldrsb r0, [r5, #0xa]
	cmp r0, #1
	bne _0207CEE4
	mov r0, r6
	bl FUN_0207d1c4
	mov r0, r6
	bl FUN_0207cf94
	cmp r0, #0
	ble _0207CEE4
	mov r7, #4
_0207CECC:
	mov r0, r7
	bl FUN_02001eb0
	mov r0, r6
	bl FUN_0207cf94
	cmp r0, #0
	bgt _0207CECC
_0207CEE4:
	ldrsb r0, [r5, #0x11]
	cmp r0, #1
	bne _0207CEF8
	mov r0, r5
	bl FUN_0207e80c
_0207CEF8:
	mov r1, #1
	strb r1, [r5, #5]
	strb r1, [r5, #0x10]
	strb r4, [r5, #0x12]
	ldrb r0, [r5, #0x1e]
	cmp r0, #2
	mov r0, r6
	strbeq r1, [r5, #7]
	bl FUN_0207c990
	cmp r0, #0
	blt _0207CF40
	mov r4, #4
_0207CF28:
	mov r0, r4
	bl FUN_02001eb0
	mov r0, r6
	bl FUN_0207c990
	cmp r0, #0
	bge _0207CF28
_0207CF40:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207CF48: .word 0x020BBEC0
_0207CF4C: .word 0x04000208

	arm_func_start FUN_0207cf50
FUN_0207cf50: ; 0x0207CF50
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0xe4
	mov r4, r1
	bl FUN_0208578c
	cmp r0, #0
	ldrgt r1, _0207CF7C ; =FUN_0207d75c
	mvnle r0, #0
	movgt r0, r4
	strgt r1, [r5, #0x21c]
	pop {r3, r4, r5, pc}
	.align 2, 0_0207CF7C: .word FUN_0207d75c
	arm_func_end FUN_0207cf50

	arm_func_start FUN_0207cf80
FUN_0207cf80: ; 0x0207CF80
	push {r3, lr}
	add r0, r0, #0xe4
	bl FUN_020857cc
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_0207cf80

	arm_func_start FUN_0207cf94
FUN_0207cf94: ; 0x0207CF94
	push {r3, lr}
	ldr r1, _0207CFE0 ; =0x020BBEC0
	ldrsb r1, [r1, #4]
	cmp r1, #0
	mvneq r0, #0x59
	popeq {r3, pc}
	bl FUN_0207da9c
	cmp r0, #0
	mvneq r0, #0x3f
	popeq {r3, pc}
	ldrsb r1, [r0, #0xa]
	ldrsb r0, [r0, #0xd]
	mov r2, #0
	cmp r1, #1
	orreq r2, r2, #1
	cmp r0, #1
	orreq r2, r2, #2
	mov r0, r2
	pop {r3, pc}
	.align 2, 0_0207CFE0: .word 0x020BBEC0
	arm_func_end FUN_0207cf94

	arm_func_start FUN_0207cfe4
FUN_0207cfe4: ; 0x0207CFE4
	push {r4, r5, r6, r7, r8, lr}
	ldr r3, _0207D170 ; =0x020BBEC0
	mov r8, r0
	ldrsb r3, [r3, #4]
	mov r7, r1
	mov r6, r2
	cmp r3, #0
	mov r4, #0
	mvneq r0, #0x59
	popeq {r4, r5, r6, r7, r8, pc}
	bl FUN_0207da9c
	movs r5, r0
	bne _0207D034
	mvn r4, #0x3f
	mov r0, r4
	mov r1, r8
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, pc}
	arm_func_end FUN_0207cfe4
_0207D034:
	ldrsb r0, [r5, #0xa]
	cmp r0, #1
	ldrsbeq r0, [r5, #0xb]
	cmpeq r0, #1
	bne _0207D080
	ldr r0, _0207D174 ; =0x04000208
	ldrh r6, [r0]
	strh r4, [r0]
	ldrsb r0, [r5, #0x12]
	cmp r0, #0
	strbeq r4, [r5, #0x13]
	ldrh r1, [r7, #0xc]
	ldrh r2, [r7, #0xe]
	mov r0, r5
	bl FUN_0207d42c
	ldr r1, _0207D174 ; =0x04000208
	ldrh r0, [r1]
	strh r6, [r1]
	b _0207D168
_0207D080:
	str r4, [r5, #0x44]
	ldrb r0, [r7, #1]
	strb r0, [r5, #0x1c]
	strb r4, [r5, #0x13]
	ldrh r0, [r7, #0xc]
	strb r0, [r5, #0x2e]
	bl FUN_02074f80
	strb r0, [r5, #0x12]
	str r4, [r5, #0x30]
	strh r4, [r5, #0x3c]
	cmp r6, #1
	ldrsbeq r0, [r5, #0xb]
	cmpeq r0, #1
	bne _0207D0C4
	mov r0, r8
	mov r1, r4
	bl FUN_0207d4ec
_0207D0C4:
	ldrsb r0, [r5, #0x12]
	cmp r0, #0
	bne _0207D168
	ldrsb r0, [r5, #8]
	cmp r0, #1
	bne _0207D14C
	ldrh r2, [r7, #0xe]
	mov r0, #0x3e8
	ldr r1, _0207D178 ; =0x020B9FD8
	mul r0, r2, r0
	ldrsh r1, [r1, #0x28]
	bl FUN_0201f9bc
	ldrh r1, [r7, #0xc]
	lsl r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsl r1, r1, #0x10
	str r1, [r5, #0x38]
	streq r1, [r5, #0x30]
	beq _0207D12C
	ldr r0, [r5, #0x30]
	subs r0, r1, r0
	moveq r6, #0
	beq _0207D12C
	mov r1, r6
	bl FUN_0201f9bc
	str r0, [r5, #0x34]
_0207D12C:
	mov r0, r5
	strh r6, [r5, #0x3c]
	bl FUN_0207e590
	mov r0, #1
	strb r0, [r5, #0xb]
	mov r0, #6
	strb r0, [r5, #0x2f]
	b _0207D15C
_0207D14C:
	ldrh r0, [r7, #0xc]
	strb r0, [r5, #0x2e]
	ldrh r0, [r7, #0xe]
	strh r0, [r5, #0x2c]
_0207D15C:
	mov r0, #1
	strb r0, [r5, #0xa]
	strb r4, [r5, #0xd]
_0207D168:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0207D170: .word 0x020BBEC0
_0207D174: .word 0x04000208
_0207D178: .word 0x020B9FD8

	arm_func_start FUN_0207d17c
FUN_0207d17c: ; 0x0207D17C
	push {r3, r4, r5, lr}
	ldr r1, _0207D1C0 ; =0x020BBEC0
	mov r5, r0
	ldr r4, [r1, #0x1c8]
	cmp r4, #0
	beq _0207D1B8
	arm_func_end FUN_0207d17c
_0207D194:
	ldrsb r0, [r4, #0xa]
	cmp r0, #1
	bne _0207D1AC
	ldr r0, [r4]
	mov r1, r5
	bl FUN_0207d1c4
_0207D1AC:
	ldr r4, [r4, #0x358]
	cmp r4, #0
	bne _0207D194
_0207D1B8:
	mov r0, #0
	pop {r3, r4, r5, pc}
	.align 2, 0_0207D1C0: .word 0x020BBEC0

	arm_func_start FUN_0207d1c4
FUN_0207d1c4: ; 0x0207D1C4
	push {r3, r4, r5, r6, r7, lr}
	ldr r2, _0207D2BC ; =0x020BBEC0
	mov r6, r0
	ldrsb r2, [r2, #4]
	mov r7, r1
	mov r4, #0
	cmp r2, #0
	mvneq r0, #0x59
	popeq {r3, r4, r5, r6, r7, pc}
	bl FUN_0207da9c
	movs r5, r0
	bne _0207D210
	mvn r4, #0x3f
	mov r0, r4
	mov r1, r6
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0207d1c4
_0207D210:
	mov r6, r4
	strb r6, [r5, #0x2e]
	cmp r7, #0
	beq _0207D240
	mov r0, #0x3e8
	mul r0, r7, r0
	ldr r1, _0207D2C0 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r6, r0, #0x10
	moveq r6, #1
_0207D240:
	cmp r6, #0
	bne _0207D280
	strb r4, [r5, #0x13]
	strb r4, [r5, #0xa]
	mov r0, r5
	strb r4, [r5, #0xd]
	bl FUN_0207e80c
	str r4, [r5, #0x30]
	strh r4, [r5, #0x3c]
	ldr r0, [r5]
	ldr r3, [r5, #0x214]
	ldr ip, [r5, #0x210]
	mov r2, r4
	mov r1, #9
	blx ip
	b _0207D2B4
_0207D280:
	mov r0, #1
	strb r0, [r5, #0x13]
	str r4, [r5, #0x38]
	streq r4, [r5, #0x30]
	beq _0207D2B0
	ldr r0, [r5, #0x30]
	rsbs r0, r0, #0
	moveq r6, r4
	beq _0207D2B0
	mov r1, r6
	bl FUN_0201f9bc
	str r0, [r5, #0x34]
_0207D2B0:
	strh r6, [r5, #0x3c]
_0207D2B4:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207D2BC: .word 0x020BBEC0
_0207D2C0: .word 0x020B9FD8

	arm_func_start FUN_0207d2c4
FUN_0207d2c4: ; 0x0207D2C4
	push {r4, r5, r6, lr}
	mov r3, #0x3e8
	mov r5, r0
	mul r0, r2, r3
	ldr r2, _0207D3E0 ; =0x020B9FD8
	mov r6, r1
	ldrsh r1, [r2, #0x28]
	mov r4, #0
	bl FUN_0201f9bc
	ldrsb r1, [r5, #0x12]
	cmp r1, #1
	moveq r0, r4
	popeq {r4, r5, r6, pc}
	cmp r6, #1
	bne _0207D378
	cmp r0, #0
	bne _0207D338
	ldrsb r0, [r5, #8]
	cmp r0, #1
	bne _0207D3D8
	mov r0, r5
	bl FUN_0207e80c
	ldr r0, [r5]
	ldr r3, [r5, #0x214]
	ldr r4, [r5, #0x210]
	mov r1, #9
	mov r2, #0
	blx r4
	b _0207D3D8
	arm_func_end FUN_0207d2c4
_0207D338:
	lsl r0, r0, #0x10
	mov r1, #1
	lsrs r6, r0, #0x10
	strb r1, [r5, #0x13]
	str r4, [r5, #0x38]
	streq r4, [r5, #0x30]
	beq _0207D370
	ldr r0, [r5, #0x30]
	rsbs r0, r0, #0
	moveq r6, r4
	beq _0207D370
	mov r1, r6
	bl FUN_0201f9bc
	str r0, [r5, #0x34]
_0207D370:
	strh r6, [r5, #0x3c]
	b _0207D3D8
_0207D378:
	ldrsb r1, [r5, #0x2e]
	lsl r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsl r1, r1, #0x10
	str r1, [r5, #0x38]
	streq r1, [r5, #0x30]
	beq _0207D3B0
	ldr r0, [r5, #0x30]
	subs r0, r1, r0
	moveq r6, r4
	beq _0207D3B0
	mov r1, r6
	bl FUN_0201f9bc
	str r0, [r5, #0x34]
_0207D3B0:
	ldrsb r0, [r5, #8]
	mov r1, #1
	strh r6, [r5, #0x3c]
	strb r4, [r5, #0x13]
	strb r1, [r5, #0xa]
	cmp r0, #1
	bne _0207D3D8
	mov r0, r5
	strb r1, [r5, #0x14]
	bl FUN_0207e590
_0207D3D8:
	mov r0, #0
	pop {r4, r5, r6, pc}
	.align 2, 0_0207D3E0: .word 0x020B9FD8

	arm_func_start FUN_0207d3e4
FUN_0207d3e4: ; 0x0207D3E4
	push {r3, r4, r5, lr}
	mov r5, r0
	mov r4, r1
	bl FUN_0207da9c
	cmp r0, #0
	bne _0207D418
	mvn r4, #0x3f
	mov r0, r4
	mov r1, r5
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, pc}
	arm_func_end FUN_0207d3e4
_0207D418:
	ldrh r1, [r4, #0xc]
	ldrh r2, [r4, #0xe]
	bl FUN_0207d42c
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0207d42c
FUN_0207d42c: ; 0x0207D42C
	push {r4, r5, r6, lr}
	mov r4, r0
	ldrsb r0, [r4, #0x12]
	mov r6, r1
	strb r6, [r4, #0x2e]
	cmp r0, #0
	popne {r4, r5, r6, pc}
	cmp r2, #0
	moveq r5, #0
	beq _0207D474
	mov r0, #0x3e8
	mul r0, r2, r0
	ldr r1, _0207D4BC ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r5, r0, #0x10
	moveq r5, #1
	arm_func_end FUN_0207d42c
_0207D474:
	lsl r1, r6, #0x10
	cmp r5, #0
	str r1, [r4, #0x38]
	streq r1, [r4, #0x30]
	beq _0207D4A4
	ldr r0, [r4, #0x30]
	subs r0, r1, r0
	moveq r5, #0
	beq _0207D4A4
	mov r1, r5
	bl FUN_0201f9bc
	str r0, [r4, #0x34]
_0207D4A4:
	strh r5, [r4, #0x3c]
	cmp r5, #0
	popne {r4, r5, r6, pc}
	mov r0, r4
	bl FUN_0207d9f4
	pop {r4, r5, r6, pc}
	.align 2, 0_0207D4BC: .word 0x020B9FD8

	arm_func_start FUN_0207d4c0
FUN_0207d4c0: ; 0x0207D4C0
	push {r4, lr}
	mov r4, r0
	bl FUN_0207d690
	movs r1, r0
	bmi _0207D4E4
	mov r0, r4
	bic r1, r1, #0xff
	bl FUN_0207d4ec
	mov r1, r0
	arm_func_end FUN_0207d4c0
_0207D4E4:
	mov r0, r1
	pop {r4, pc}

	arm_func_start FUN_0207d4ec
FUN_0207d4ec: ; 0x0207D4EC
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r4, #0
	bl FUN_0207da9c
	movs r5, r0
	bne _0207D524
	mvn r4, #0x3f
	mov r0, r4
	mov r1, r7
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0207d4ec
_0207D524:
	tst r6, #0xff
	beq _0207D540
	mov r1, r6
	mvn r0, #0x17
	mov r2, r4
	bl FUN_0207517c
	bic r6, r6, #0xff
_0207D540:
	cmp r6, #0
	beq _0207D570
	ldrsb r0, [r5, #0x27]
	cmp r0, #0
	bne _0207D570
	mvn r4, #0xb5
	mov r0, r4
	mov r1, r7
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
_0207D570:
	mov r1, #1
	add r0, r5, #0xe4
	strb r1, [r5, #0x14]
	bl FUN_020857f4
	cmp r6, #0
	movlt r6, #0
	blt _0207D5A0
	ldr r1, [r5, #0xa4]
	ldr r0, [r5, #0x4c]
	sub r0, r1, r0
	cmp r6, r0
	movgt r6, r0
_0207D5A0:
	ldr r3, _0207D68C ; =0x04000208
	mov r0, #0
	ldrh r1, [r3]
	mov r2, #1
	strh r0, [r3]
	ldr r3, [r5, #0x4c]
	add r3, r6, r3
	str r3, [r5, #0x50]
	str r3, [r5, #0x54]
	strb r0, [r5, #0xe]
	strb r0, [r5, #0xf]
	strb r2, [r5, #9]
	ldrb r2, [r5, #0x21]
	and r2, r2, #0xf0
	cmp r2, #0x70
	bne _0207D63C
	ldrsb r2, [r5, #0x27]
	cmp r2, #0
	mov r2, #0x2c
	bne _0207D620
_0207D5F0:
	mla ip, r0, r2, r5
	add r3, r5, r0, lsl #4
	add r3, r3, #0x200
	add r0, r0, #1
	ldrh r6, [r3, #0x94]
	ldrh r4, [r3, #0x96]
	add r3, ip, #0x200
	cmp r0, #2
	strh r6, [r3, #0x3c]
	strh r4, [r3, #0x3e]
	blt _0207D5F0
	b _0207D678
_0207D620:
	mov r4, #1
_0207D624:
	mla r3, r0, r2, r5
	add r0, r0, #1
	strb r4, [r3, #0x23f]
	cmp r0, #2
	blt _0207D624
	b _0207D678
_0207D63C:
	ldrb r2, [r5, #0x22]
	cmp r2, #0
	ble _0207D678
	mov r2, #0x2c
_0207D64C:
	mla ip, r0, r2, r5
	mov r6, r4
_0207D654:
	add r3, ip, r6, lsl #2
	add r6, r6, #1
	str r4, [r3, #0x23c]
	cmp r6, #4
	blt _0207D654
	ldrb r3, [r5, #0x22]
	add r0, r0, #1
	cmp r0, r3
	blt _0207D64C
_0207D678:
	ldr r3, _0207D68C ; =0x04000208
	mov r0, #0
	ldrh r2, [r3]
	strh r1, [r3]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207D68C: .word 0x04000208

	arm_func_start FUN_0207d690
FUN_0207d690: ; 0x0207D690
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r1
	bl FUN_0207da9c
	movs r4, r0
	bne _0207D6C4
	mvn r4, #0x3f
	mov r0, r4
	mov r1, r6
	mov r2, #0
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, pc}
	arm_func_end FUN_0207d690
_0207D6C4:
	ldrb r0, [r4, #0x21]
	and r0, r0, #0xf
	cmp r0, #2
	beq _0207D6E0
	cmp r0, #4
	beq _0207D6E8
	b _0207D6F0
_0207D6E0:
	ldr r0, _0207D728 ; =0x00003FEC
	b _0207D6F4
_0207D6E8:
	ldr r0, _0207D72C ; =0x00007FD8
	b _0207D6F4
_0207D6F0:
	ldr r0, _0207D730 ; =0x0000BB80
_0207D6F4:
	smull r0, r1, r5, r0
	mov r2, #0x3e8
	mov r3, #0
	bl FUN_0201f7a4
	ldrh r2, [r4, #0x9e]
	ldrh r1, [r4, #0xa0]
	mul r2, r0, r2
	mov r0, r2
	bl FUN_0201f9bc
	ldrb r1, [r4, #0x22]
	mul r1, r0, r1
	bic r0, r1, #0x8000000f
	pop {r4, r5, r6, pc}
	.align 2, 0_0207D728: .word 0x00003FEC
_0207D72C: .word 0x00007FD8
_0207D730: .word 0x0000BB80

	arm_func_start FUN_0207d734
FUN_0207d734: ; 0x0207D734
	mov r0, #0
	bx lr
	arm_func_end FUN_0207d734

	arm_func_start FUN_0207d73c
FUN_0207d73c: ; 0x0207D73C
	mov r0, #0
	bx lr
	arm_func_end FUN_0207d73c

	arm_func_start FUN_0207d744
FUN_0207d744: ; 0x0207D744
	push {r4, lr}
	mov r4, #0
	mov r0, r4
	bl FUN_0200787c
	mov r0, r4
	pop {r4, pc}
	arm_func_end FUN_0207d744

	arm_func_start FUN_0207d75c
FUN_0207d75c: ; 0x0207D75C
	push {r3, lr}
	ldrsb r3, [r0, #8]
	cmp r3, #0
	moveq r0, #0
	popeq {r3, pc}
	add r0, r0, #0xe4
	mov r3, #0
	bl FUN_020858bc
	pop {r3, pc}
	arm_func_end FUN_0207d75c

	arm_func_start FUN_0207d780
FUN_0207d780: ; 0x0207D780
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _0207D830 ; =0x020BBEC0
	ldr r4, [r0, #0x1c8]
	cmp r4, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r6, #0
	mov r5, #9
	arm_func_end FUN_0207d780
_0207D79C:
	ldrsb r0, [r4, #0xa]
	cmp r0, #0
	ldrsbne r0, [r4, #8]
	cmpne r0, #0
	ldrhne r0, [r4, #0x3c]
	cmpne r0, #0
	beq _0207D820
	sub r0, r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x3c]
	cmp r0, #0
	ldrne r1, [r4, #0x30]
	ldrne r0, [r4, #0x34]
	addne r0, r1, r0
	ldreq r0, [r4, #0x38]
	str r0, [r4, #0x30]
	ldrh r7, [r4, #0x3c]
	mov r0, r4
	bl FUN_0207d9f4
	cmp r7, #0
	ldrsbeq r0, [r4, #0x13]
	cmpeq r0, #1
	bne _0207D820
	strb r6, [r4, #0xa]
	mov r0, r4
	strb r6, [r4, #0x13]
	bl FUN_0207e80c
	ldr r0, [r4]
	ldr r3, [r4, #0x214]
	ldr ip, [r4, #0x210]
	mov r1, r5
	mov r2, r6
	blx ip
_0207D820:
	ldr r4, [r4, #0x358]
	cmp r4, #0
	bne _0207D79C
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207D830: .word 0x020BBEC0

	arm_func_start FUN_0207d834
FUN_0207d834: ; 0x0207D834
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sl, r0
	ldrb r0, [sl, #0x23]
	mov r8, #0
	mov r2, #2
	cmp r0, #1
	ldreq r0, _0207D908 ; =0x020BBEC0
	mov r1, #0x10
	ldrsbeq r0, [r0, #9]
	mov sb, r8
	cmpeq r0, #1
	moveq r0, #2
	strbeq r0, [sl, #0x23]
	ldr r0, _0207D908 ; =0x020BBEC0
	strb r8, [sp]
	ldrb r4, [r0, #7]
	ldrb r3, [r0, #8]
	ldr r0, _0207D90C ; =0x04000208
	strb r4, [sp, #4]
	strb r3, [sp, #5]
	strb r2, [sp, #2]
	strb r1, [sp, #3]
	ldrh fp, [r0]
	strh r8, [r0]
	ldrb r0, [sl, #0x23]
	cmp r0, #0
	ble _0207D8F4
	mov r5, r8
	mov r4, r1
	add r7, sp, #0
	arm_func_end FUN_0207d834
_0207D8B0:
	mov r0, r7
	bl FUN_0207b40c
	movs r6, r0
	beq _0207D8E4
	bl FUN_0207b5b8
	strh r5, [r6, #6]
	add r0, sl, r8, lsl #2
	strb r4, [r6, #0x14e]
	str r6, [r0, #0x1f0]
	ldrb r0, [sl, #0x23]
	add r8, r8, #1
	cmp r8, r0
	bge _0207D8F4
_0207D8E4:
	ldrb r0, [sl, #0x23]
	add sb, sb, #1
	cmp sb, r0
	blt _0207D8B0
_0207D8F4:
	ldr r1, _0207D90C ; =0x04000208
	ldrh r0, [r1]
	strh fp, [r1]
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207D908: .word 0x020BBEC0
_0207D90C: .word 0x04000208

	arm_func_start FUN_0207d910
FUN_0207d910: ; 0x0207D910
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldrb r8, [r0, #0x22]
	ldr r5, [r0, #0x1c0]
	str r0, [sp]
	add r4, r0, #0x1c0
	mov r0, r5
	mov r1, r8
	bl FUN_0201f9bc
	mov r6, r0
	ldr r0, [sp]
	add r1, r6, r6, lsr #31
	ldr r0, [r0, #0x204]
	asr sl, r1, #1
	add r7, r0, r1, asr #1
	add r0, sl, sl, lsr #31
	asr r0, r0, #1
	str r0, [r4, #0xc]
	mul fp, r7, r8
	ldr r1, _0207D9F0 ; =0x6F697473
	stmib r4, {r6, sl}
	mov sb, #0
	add r0, r5, fp
	str sb, [r4, #0x10]
	bl FUN_0207dbf4
	movs r1, r0
	str r1, [r4, #0x14]
	bne _0207D998
	sub r4, sb, #0x81
	mov r0, r4
	mov r1, sb
	mov r2, sb
	bl FUN_02075144
	mov r0, r4
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_0207d910
_0207D998:
	mov r0, sb
	add r2, r5, fp
	bl FUN_0200787c
	ldr r3, [r4, #0x14]
	cmp r8, #0
	add r5, r3, r5
	ble _0207D9DC
_0207D9B4:
	mla r1, r6, sb, r3
	add r2, r4, sb, lsl #2
	mla r0, r7, sb, r5
	add sb, sb, #1
	str r1, [r2, #0x18]
	add r1, r1, sl
	str r1, [r2, #0x20]
	str r0, [r2, #0x28]
	cmp sb, r8
	blt _0207D9B4
_0207D9DC:
	ldr r0, [sp]
	mov r1, #1
	strb r1, [r0, #0x14]
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207D9F0: .word 0x6F697473

	arm_func_start FUN_0207d9f4
FUN_0207d9f4: ; 0x0207D9F4
	push {r4, r5, r6, lr}
	ldr r1, [r0, #0x30]
	ldrb r2, [r0, #0xc4]
	asr r1, r1, #0x10
	ldr r4, _0207DA90 ; =0x04000208
	mul r1, r2, r1
	ldrb r5, [r0, #0x26]
	ldr r3, _0207DA94 ; =0x82061029
	ldrh r2, [r4]
	mul ip, r5, r1
	smull r1, lr, r3, ip
	mov r1, #0
	strh r1, [r4]
	ldrb r4, [r0, #0x23]
	add lr, ip, lr
	lsr r3, ip, #0x1f
	add lr, r3, lr, asr #13
	mul r5, lr, lr
	ldr lr, _0207DA98 ; =0x81020409
	lsr r3, r5, #0x1f
	smull ip, r6, lr, r5
	add r6, r5, r6
	cmp r4, #0
	add r6, r3, r6, asr #6
	ble _0207DA80
	arm_func_end FUN_0207d9f4
_0207DA58:
	add r3, r0, r1, lsl #2
	ldr ip, [r3, #0x1f0]
	add r1, r1, #1
	str r6, [ip, #0x140]
	ldrh r3, [ip, #6]
	orr r3, r3, #0x20
	strh r3, [ip, #6]
	ldrb r3, [r0, #0x23]
	cmp r1, r3
	blt _0207DA58
_0207DA80:
	ldr r1, _0207DA90 ; =0x04000208
	ldrh r0, [r1]
	strh r2, [r1]
	pop {r4, r5, r6, pc}
	.align 2, 0_0207DA90: .word 0x04000208
_0207DA94: .word 0x82061029
_0207DA98: .word 0x81020409

	arm_func_start FUN_0207da9c
FUN_0207da9c: ; 0x0207DA9C
	cmp r0, #0
	moveq r0, #0
	bxeq lr
	ldr r3, _0207DAF4 ; =0x04000208
	mov r2, #0
	ldrh ip, [r3]
	ldr r1, _0207DAF8 ; =0x020BBEC0
	strh r2, [r3]
	ldr r3, [r1, #0x1c8]
	cmp r3, #0
	beq _0207DAE0
	arm_func_end FUN_0207da9c
_0207DAC8:
	ldr r1, [r3]
	cmp r1, r0
	beq _0207DAE0
	ldr r3, [r3, #0x358]
	cmp r3, #0
	bne _0207DAC8
_0207DAE0:
	ldr r2, _0207DAF4 ; =0x04000208
	mov r0, r3
	ldrh r1, [r2]
	strh ip, [r2]
	bx lr
	.align 2, 0_0207DAF4: .word 0x04000208
_0207DAF8: .word 0x020BBEC0

	arm_func_start FUN_0207dafc
FUN_0207dafc: ; 0x0207DAFC
	mov r0, #0
	bx lr
	arm_func_end FUN_0207dafc

	arm_func_start FUN_0207db04
FUN_0207db04: ; 0x0207DB04
	push {r3, r4, r5, r6, r7, lr}
	ldr r0, _0207DBE4 ; =0x020BBEC0
	ldr r0, [r0, #0x1c8]
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0207db04
_0207DB18:
	ldrsb r1, [r0, #0x11]
	cmp r1, #1
	bne _0207DBD4
	ldr r1, [r0, #0x30]
	ldrb r2, [r0, #0xc4]
	asr r1, r1, #0x10
	ldrb r4, [r0, #0x22]
	mul r1, r2, r1
	ldrb r5, [r0, #0x26]
	ldr r2, _0207DBE8 ; =0x82061029
	ldr r3, _0207DBEC ; =0x81020409
	mul ip, r5, r1
	smull r1, lr, r2, ip
	add lr, ip, lr
	lsr r1, ip, #0x1f
	add lr, r1, lr, asr #13
	mul r5, lr, lr
	smull r2, r1, r3, r5
	add r1, r5, r1
	lsr r2, r5, #0x1f
	cmp r4, #0
	add r1, r2, r1, asr #6
	mov r6, #0
	ble _0207DBD4
	ldr r2, _0207DBF0 ; =0x020B9FD8
	mov lr, #0x7f
	mov r4, r6
	mov r5, #0x40
	mov ip, #0x60
_0207DB8C:
	add r3, r0, r6, lsl #2
	ldr r7, [r3, #0x1f0]
	str r1, [r7, #0x140]
	ldrb r3, [r0, #0x22]
	cmp r3, #1
	ldrbne r3, [r2, #0x41]
	cmpne r3, #1
	streq r5, [r7, #0x144]
	beq _0207DBC0
	tst r6, #1
	moveq r3, r4
	movne r3, lr
	str r3, [r7, #0x144]
_0207DBC0:
	strh ip, [r7, #6]
	ldrb r3, [r0, #0x22]
	add r6, r6, #1
	cmp r6, r3
	blt _0207DB8C
_0207DBD4:
	ldr r0, [r0, #0x358]
	cmp r0, #0
	bne _0207DB18
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207DBE4: .word 0x020BBEC0
_0207DBE8: .word 0x82061029
_0207DBEC: .word 0x81020409
_0207DBF0: .word 0x020B9FD8

	arm_func_start FUN_0207dbf4
FUN_0207dbf4: ; 0x0207DBF4
	push {r3, r4, r5, lr}
	mov r5, r0
	add r0, r5, #0x1f
	ldr r2, _0207DC60 ; =0x020BBEC0
	bic r3, r0, #0x1f
	ldr r0, [r2, #0x1c4]
	mov r4, r1
	ldr r2, [r2, #0x1bc]
	add r1, r3, #0x20
	blx r2
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	ldr r2, _0207DC64 ; =0x6D727473
	ldr r1, _0207DC68 ; =0x00007074
	stm r0, {r2, r4, r5}
	strh r1, [r0, #0xc]
	mov r3, #0
	strh r3, [r0, #0xe]
	add r0, r0, #0x10
	str r2, [r0, r5]
	add r2, r0, r5
	ldr r1, _0207DC6C ; =0x00007462
	stmib r2, {r4, r5}
	strh r1, [r2, #0xc]
	strh r3, [r2, #0xe]
	pop {r3, r4, r5, pc}
	.align 2, 0_0207DC60: .word 0x020BBEC0
_0207DC64: .word 0x6D727473
_0207DC68: .word 0x00007074
_0207DC6C: .word 0x00007462
	arm_func_end FUN_0207dbf4

	arm_func_start FUN_0207dc70
FUN_0207dc70: ; 0x0207DC70
	push {r4, lr}
	ldr r1, _0207DC94 ; =0x020BBEC0
	mov r4, r0
	ldr r0, [r1, #0x1c4]
	ldr r2, [r1, #0x1c0]
	sub r1, r4, #0x10
	blx r2
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_0207DC94: .word 0x020BBEC0
	arm_func_end FUN_0207dc70

	arm_func_start FUN_0207dc98
FUN_0207dc98: ; 0x0207DC98
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x100
	str r2, [sp]
	sub r2, r2, #1
	mov r4, r0
	mov r0, r1
	ldr r1, [sp, #0x128]
	add r2, r2, r2, lsr #31
	mov r6, r3
	asr sb, r2, #1
	str r1, [sp, #0x128]
	mov r8, #0
	bl FUN_0201f1c4
	mov r5, r0
	mov r7, r1
	mov r0, r4
	bl FUN_0201f1c4
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r7
	bl FUN_02020af8
	mov r2, r0
	mov fp, #0x40000000
	mov r3, r1
	mov r0, r8
	mov r1, fp
	bl FUN_0201ed5c
	mov r3, r1
	mov r2, r0
	ldr r1, _0207DED0 ; =0x400921FB
	mov r0, #0x60000000
	bl FUN_0201ed5c
	mov sl, r0
	mov r0, r4
	mov r7, r1
	mov r5, sl
	mov r4, r7
	bl FUN_0201f1c4
	mov r2, r0
	mov r3, r1
	sub r1, fp, #0x100000
	mov r0, r8
	bl FUN_02020af8
	cmp sb, #0
	ble _0207DE40
	ldr r0, [sp]
	add fp, sp, #8
	sub r0, r0, #1
	str r0, [sp, #4]
	arm_func_end FUN_0207dc98
_0207DD60:
	cmp r6, #0
	beq _0207DD74
	cmp r6, #1
	beq _0207DD9C
	b _0207DE14
_0207DD74:
	sub sl, r8, sb
	mov r0, sl
	bl FUN_0201f1c4
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	bl FUN_0202869c
	b _0207DDD4
_0207DD9C:
	sub sl, r8, sb
	mov r0, sl
	bl FUN_0201f1c4
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	bl FUN_0202869c
	mov r2, r0
	mov r0, #0
	mov r3, r1
	mov r1, r0
	bl FUN_0201e9a8
_0207DDD4:
	mov r7, r0
	mov r0, sl
	mov sl, r1
	bl FUN_0201f1c4
	mov r3, r1
	mov r2, r0
	ldr r1, _0207DED0 ; =0x400921FB
	mov r0, #0x60000000
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, sl
	bl FUN_02020af8
	mov sl, r0
	mov r7, r1
_0207DE14:
	str sl, [fp, r8, lsl #3]
	add r0, fp, r8, lsl #3
	str r7, [r0, #4]
	ldr r0, [sp, #4]
	sub r0, r0, r8
	str sl, [fp, r0, lsl #3]
	add r0, fp, r0, lsl #3
	add r8, r8, #1
	str r7, [r0, #4]
	cmp r8, sb
	blt _0207DD60
_0207DE40:
	ldr r3, _0207DED0 ; =0x400921FB
	mov r0, r5
	mov r1, r4
	mov r2, #0x60000000
	bl FUN_02020af8
	ldr r2, [sp]
	add r6, sp, #8
	cmp r2, #0
	str r0, [r6, sb, lsl #3]
	add r0, r6, sb, lsl #3
	mov r7, #0
	addle sp, sp, #0x100
	str r1, [r0, #4]
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r4, _0207DED4 ; =0x40E00000
	mov r5, r7
	sub r8, r4, #0x1000000
_0207DE84:
	add r0, r6, r7, lsl #3
	ldm r0, {r2, r3}
	mov r0, r5
	mov r1, r4
	bl FUN_0201ed5c
	mov r2, r0
	mov r3, r1
	mov r0, r5
	mov r1, r8
	bl FUN_0201e678
	bl FUN_0201fe20
	ldr r1, [sp, #0x128]
	str r0, [r1, r7, lsl #2]
	ldr r0, [sp]
	add r7, r7, #1
	cmp r7, r0
	blt _0207DE84
	add sp, sp, #0x100
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207DED0: .word 0x400921FB
_0207DED4: .word 0x40E00000

	arm_func_start FUN_0207ded8
FUN_0207ded8: ; 0x0207DED8
	push {r3, lr}
	ldr r3, _0207DF0C ; =0x020BBEC0
	cmp r1, #0
	str r1, [r3, #0x274]
	mov lr, #0
	pople {r3, pc}
	arm_func_end FUN_0207ded8
_0207DEF0:
	ldr ip, [r0, lr, lsl #2]
	add r2, r3, lr, lsl #2
	add lr, lr, #1
	str ip, [r2, #0x1f8]
	cmp lr, r1
	blt _0207DEF0
	pop {r3, pc}
	.align 2, 0_0207DF0C: .word 0x020BBEC0

	arm_func_start FUN_0207df10
FUN_0207df10: ; 0x0207DF10
	push {r3, lr}
	ldr r0, _0207DF38 ; =0x020BBEC0
	ldrsb r1, [r0, #0x26]
	cmp r1, #1
	ldrsbne r0, [r0, #0xf1]
	cmpne r0, #0
	popeq {r3, pc}
	ldr r0, _0207DF3C ; =0x020BBEE8
	bl FUN_02001ce0
	pop {r3, pc}
	.align 2, 0_0207DF38: .word 0x020BBEC0
_0207DF3C: .word 0x020BBEE8
	arm_func_end FUN_0207df10

	arm_func_start FUN_0207df40
FUN_0207df40: ; 0x0207DF40
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	ldr r7, _0207E028 ; =0x64737473
	mov r5, #0x1000
	mov r8, #0x10
	mov r0, r5
	mov r1, r8
	mov r2, r7
	bl FUN_020753b8
	ldr r6, _0207E02C ; =0x020BBEC0
	cmp r0, #0
	str r0, [r6, #0xe8]
	addeq sp, sp, #8
	subeq r0, r8, #0x90
	popeq {r4, r5, r6, r7, r8, pc}
	mov r4, #0
	strb r4, [r6, #0x25]
	strb r4, [r6, #0x26]
	mov r0, r5
	mov r1, r8
	sub r2, r7, #0xf2000000
	strb r4, [r6, #0x27]
	bl FUN_020753b8
	cmp r0, #0
	str r0, [r6, #0x1b4]
	addeq sp, sp, #8
	subeq r0, r4, #0x80
	popeq {r4, r5, r6, r7, r8, pc}
	strb r4, [r6, #0xf1]
	strb r4, [r6, #0xf2]
	strb r4, [r6, #0xf3]
	str r5, [sp]
	ldrb r0, [r6, #0x24]
	ldr r7, _0207E030 ; =0x020BBEE8
	ldr r1, _0207E034 ; =FUN_0207e0b8
	str r0, [sp, #4]
	ldr r3, [r6, #0xe8]
	mov r0, r7
	mov r2, r4
	add r3, r3, #0x1000
	bl FUN_02001948
	mov r0, r7
	bl FUN_02001ce0
	str r5, [sp]
	ldrb r0, [r6, #0xf0]
	ldr r5, _0207E038 ; =0x020BBFB4
	ldr r1, _0207E03C ; =FUN_0207e23c
	str r0, [sp, #4]
	ldr r3, [r6, #0x1b4]
	mov r0, r5
	mov r2, r4
	add r3, r3, #0x1000
	bl FUN_02001948
	mov r0, r5
	bl FUN_02001ce0
	mov r0, r4
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0207E028: .word 0x64737473
_0207E02C: .word 0x020BBEC0
_0207E030: .word 0x020BBEE8
_0207E034: .word FUN_0207e0b8
_0207E038: .word 0x020BBFB4
_0207E03C: .word FUN_0207e23c
	arm_func_end FUN_0207df40

	arm_func_start FUN_0207e040
FUN_0207e040: ; 0x0207E040
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _0207E0A8 ; =0x020B9FD8
	ldr r5, _0207E0AC ; =0x020BBEE8
	ldrb r0, [r1, #0x744]
	ldr r4, _0207E0B0 ; =0x020BBEC0
	mov r7, #0
	and r0, r0, #0xf9
	strb r0, [r1, #0x744]
	ldrb r2, [r1, #0x745]
	mov r0, r5
	strb r7, [r4, #0x25]
	orr r2, r2, #6
	mov r6, #1
	strb r2, [r1, #0x745]
	strb r6, [r4, #0x26]
	bl FUN_02001ce0
	mov r0, r5
	bl FUN_02001bd8
	ldr r5, _0207E0B4 ; =0x020BBFB4
	strb r7, [r4, #0xf1]
	mov r0, r5
	strb r6, [r4, #0xf2]
	bl FUN_02001ce0
	mov r0, r5
	bl FUN_02001bd8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207E0A8: .word 0x020B9FD8
_0207E0AC: .word 0x020BBEE8
_0207E0B0: .word 0x020BBEC0
_0207E0B4: .word 0x020BBFB4
	arm_func_end FUN_0207e040

	arm_func_start FUN_0207e0b8
FUN_0207e0b8: ; 0x0207E0B8
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, _0207E238 ; =0x020BBEC0
	add r0, r4, #0x100
	ldrsb r0, [r0, #0xe0]
	cmp r0, #1
	bne _0207E0D8
	bl FUN_02003410
	str r0, [r4, #0x1e4]
	arm_func_end FUN_0207e0b8
_0207E0D8:
	mov r0, #0
	str r0, [r4, #0x1e8]
	mov r0, #1
	strb r0, [r4, #0x25]
_0207E0E8:
	mov r5, #0
	mov r1, #1
	mov r0, r5
	strb r1, [r4, #0x27]
	bl FUN_02001c28
	strb r5, [r4, #0x27]
	add r0, r4, #0x100
	ldrsb r0, [r0, #0xe0]
	cmp r0, #1
	bne _0207E118
	bl FUN_02003410
	mov fp, r0
_0207E118:
	ldrsb r0, [r4, #0x26]
	cmp r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [r4, #0xec]
	add r0, r0, #1
	str r0, [r4, #0xec]
	ldr r8, [r4, #0x1c8]
	cmp r8, #0
	beq _0207E1FC
	mov r7, #0
	mov r5, r7
_0207E144:
	ldr r0, [r8]
	cmp r0, #0
	ble _0207E1F0
	ldrsb r0, [r8, #0x11]
	cmp r0, #1
	bne _0207E1F0
	ldrb r1, [r8, #0x1fc]
	mov r0, r8
	strb r1, [r8, #0x1fd]
	eor r1, r1, #1
	strb r1, [r8, #0x1fc]
	ldr r1, [r8, #0x218]
	blx r1
	ldrsb r0, [r8, #0x15]
	ldrb r1, [r8, #0x1fd]
	add r2, r8, #0x1d8
	cmp r0, #1
	add sl, r2, r1, lsl #3
	bne _0207E1C4
	ldrb r0, [r8, #0x22]
	mov sb, r7
	cmp r0, #0
	ble _0207E1C4
	add r6, r8, #0x234
_0207E1A4:
	ldr r1, [sl, sb, lsl #2]
	ldr r2, [r8, #0x1c8]
	add r0, r6, sb, lsl #2
	bl FUN_0207f55c
	ldrb r0, [r8, #0x22]
	add sb, sb, #1
	cmp sb, r0
	blt _0207E1A4
_0207E1C4:
	ldrb r0, [r8, #0x22]
	mov r6, r5
	cmp r0, #0
	ble _0207E1F0
_0207E1D4:
	ldr r0, [sl, r6, lsl #2]
	ldr r1, [r8, #0x1c8]
	bl FUN_020026d0
	ldrb r0, [r8, #0x22]
	add r6, r6, #1
	cmp r6, r0
	blt _0207E1D4
_0207E1F0:
	ldr r8, [r8, #0x358]
	cmp r8, #0
	bne _0207E144
_0207E1FC:
	ldr r5, _0207E238 ; =0x020BBEC0
	add r0, r5, #0x100
	ldrsb r0, [r0, #0xe0]
	cmp r0, #1
	bne _0207E0E8
	bl FUN_02003410
	ldr r2, [r5, #0x1e4]
	sub r1, r0, fp
	sub r0, r0, r2
	str r0, [r5, #0x1ec]
	ldr r0, [r5, #0x1e8]
	add r0, r0, r1
	str r0, [r5, #0x1e8]
	b _0207E0E8
_0207E234:
	.byte 0xF8, 0x8F, 0xBD, 0xE8
_0207E238: .word 0x020BBEC0

	arm_func_start FUN_0207e23c
FUN_0207e23c: ; 0x0207E23C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr r8, _0207E2DC ; =0x020BBEC0
	mov r0, #1
	strb r0, [r8, #0xf1]
	mov sb, #0
	mov r6, r0
	mov r5, #8
	mov r4, sb
	arm_func_end FUN_0207e23c
_0207E25C:
	mov r0, r5
	strb r6, [r8, #0xf3]
	bl FUN_02001eb0
	strb r4, [r8, #0xf3]
	ldrsb r0, [r8, #0xf2]
	cmp r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, [r8, #0x1b8]
	add r0, r0, #1
	str r0, [r8, #0x1b8]
	ldr r7, [r8, #0x1c8]
	cmp r7, #0
	beq _0207E25C
_0207E290:
	ldr r0, [r7]
	cmp r0, #0
	ble _0207E2C8
	ldrb r0, [r7, #0x1e]
	cmp r0, #1
	bne _0207E2B0
	mov r0, r7
	bl FUN_0207e2e0
_0207E2B0:
	ldrsb r0, [r7, #7]
	cmp r0, #1
	bne _0207E2C8
	mov r0, r7
	strb sb, [r7, #7]
	bl FUN_0207cd18
_0207E2C8:
	ldr r7, [r7, #0x358]
	cmp r7, #0
	bne _0207E290
	b _0207E25C
_0207E2D8:
	.byte 0xF8, 0x83, 0xBD, 0xE8
_0207E2DC: .word 0x020BBEC0

	arm_func_start FUN_0207e2e0
FUN_0207e2e0: ; 0x0207E2E0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r6, r0
	ldrsb r1, [r6, #0x10]
	mov r4, #1
	mov r5, #0
	cmp r1, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldrsb r1, [r6, #5]
	cmp r1, #1
	bne _0207E320
	ldr r1, [r6, #0x22c]
	strb r5, [r6, #0x2f]
	strb r5, [r6, #5]
	blx r1
	strb r4, [r6, #7]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	arm_func_end FUN_0207e2e0
_0207E320:
	ldrb r1, [r6, #0x2f]
	cmp r1, #6

	arm_func_start switchD
switchD: ; 0x0207E328
	addls pc, pc, r1, lsl #2
	b _0207E470
	arm_func_end switchD
_0207E330: ; jump table
	b _0207E470 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x0207E334
	b _0207E34C
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x0207E338
	b _0207E470
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0207E33C
	b _0207E34C
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x0207E340
	b _0207E34C
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x0207E344
	b _0207E3D8
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x0207E348
	b _0207E470
	arm_func_end caseD_6
_0207E34C:
	ldr r1, [r6, #0x228]
	blx r1
	cmp r0, #0
	strblt r4, [r6, #5]
	strblt r5, [r6, #0x2f]
	blt _0207E470
	ldr r7, _0207E584 ; =0x020BBEC0
	ldr r8, [r6, #0x230]
	ldr r1, [r7, #0x18]
	mov r0, r6
	mov r3, r5
	mov r2, #0x100
	blx r8
	cmp r0, #0
	strblt r5, [r6, #0x2f]
	blt _0207E470
	ldr r1, [r7, #0x18]
	mov r0, r6
	bl FUN_0207e89c
	cmp r0, #0
	strbne r5, [r6, #0x2f]
	bne _0207E470
	ldr r1, [r7, #0x18]
	mov r0, r6
	add r1, r1, #0x80
	bl FUN_0207ebe4
	mov r8, #5
	ldr r0, [r6]
	ldr r3, [r6, #0x214]
	ldr r7, [r6, #0x210]
	mov r2, r5
	mov r1, #3
	strb r8, [r6, #0x2f]
	blx r7
	b _0207E470
_0207E3D8:
	ldrsb r0, [r6, #0x12]
	cmp r0, #0
	ldrsbeq r0, [r6, #0xa]
	cmpeq r0, #1
	ldrsbeq r0, [r6, #0x11]
	cmpeq r0, #0
	bne _0207E470
	ldrh r1, [r6, #0x2c]
	cmp r1, #0
	moveq r7, r5
	beq _0207E424
	mov r0, #0x3e8
	mul r0, r1, r0
	ldr r1, _0207E588 ; =0x020B9FD8
	ldrsh r1, [r1, #0x28]
	bl FUN_0201fbc8
	lsl r0, r0, #0x10
	lsrs r7, r0, #0x10
	moveq r7, r4
_0207E424:
	ldrsb r0, [r6, #0x2e]
	cmp r7, #0
	lsl r1, r0, #0x10
	str r1, [r6, #0x38]
	streq r1, [r6, #0x30]
	beq _0207E458
	ldr r0, [r6, #0x30]
	subs r0, r1, r0
	moveq r7, #0
	beq _0207E458
	mov r1, r7
	bl FUN_0201f9bc
	str r0, [r6, #0x34]
_0207E458:
	mov r0, r6
	strh r7, [r6, #0x3c]
	bl FUN_0207e590
	mov r0, #6
	strb r4, [r6, #0xb]
	strb r0, [r6, #0x2f]
_0207E470:
	ldrsb r0, [r6, #9]
	cmp r0, #0
	ldrsbne r0, [r6, #6]
	cmpne r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r3, [r6, #0x50]
	ldr r0, [r6, #0x5c]
	sub sb, r0, r3
	cmp sb, #0
	ble _0207E534
	ldr r8, _0207E58C ; =0x04000208
	sub r0, r5, #0x200
	ldrh r7, [r8]
	strh r5, [r8]
	ldrh r1, [r8]
	ldr r4, [r6, #0xe8]
	ldr r2, [r6, #0xec]
	sub r1, r4, r2
	and r4, r1, r0
	strh r7, [r8]
	cmp r4, #0x200
	poplt {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr r0, _0207E584 ; =0x020BBEC0
	ldr r7, _0207E584 ; =0x020BBEC0
	ldr r0, [r0, #0x14]
	cmp r4, sb
	movgt r4, sb
	cmp r4, r0
	movgt r4, r0
	ldr r8, [r6, #0x230]
	ldr r1, [r7, #0x1c]
	mov r0, r6
	mov r2, r4
	blx r8
	cmp r0, #0
	pople {r3, r4, r5, r6, r7, r8, sb, pc}
	ldr sb, _0207E58C ; =0x04000208
	mov r2, r4
	ldrh r8, [sb]
	add r0, r6, #0xe4
	strh r5, [sb]
	ldr r1, [r7, #0x1c]
	bl FUN_02085810
	ldrh r0, [sb]
	strh r8, [sb]
	ldr r0, [r6, #0x50]
	add r0, r0, r4
	str r0, [r6, #0x50]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0207E534:
	ldrsb r0, [r6, #0xc]
	mov r2, #0
	cmp r0, #1
	bne _0207E564
	ldr r5, [r6, #0x58]
	ldr r0, [r6]
	ldr r3, [r6, #0x214]
	ldr r4, [r6, #0x210]
	mov r1, #0xf
	str r5, [r6, #0x50]
	blx r4
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
_0207E564:
	ldr r0, [r6]
	ldr r3, [r6, #0x214]
	ldr r5, [r6, #0x210]
	mov r1, #0x10
	strb r4, [r6, #0xe]
	strb r2, [r6, #9]
	blx r5
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0207E584: .word 0x020BBEC0
_0207E588: .word 0x020B9FD8
_0207E58C: .word 0x04000208

	arm_func_start FUN_0207e590
FUN_0207e590: ; 0x0207E590
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #8
	mov sl, r0
	ldrsb r0, [sl, #0x11]
	mov r4, #0
	cmp r0, #1
	addeq sp, sp, #8
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r0, [sl, #0x14]
	add r5, sl, #0x1c0
	cmp r0, #1
	bne _0207E61C
	mov r6, r4
	ldr r1, [r5, #0x14]
	ldr r2, [r5]
	mov r0, r6
	bl FUN_0200787c
	ldr r0, [r5, #0x14]
	ldr r1, [r5]
	bl FUN_020026d0
	ldrb r0, [sl, #0x22]
	str r6, [r5, #0x10]
	cmp r0, #0
	ble _0207E614
	mov r0, #0x2c
	arm_func_end FUN_0207e590
_0207E5F8:
	mla r1, r6, r0, sl
	add r1, r1, #0x200
	strh r4, [r1, #0x4c]
	ldrb r1, [sl, #0x22]
	add r6, r6, #1
	cmp r6, r1
	blt _0207E5F8
_0207E614:
	bl FUN_0207f640
	strb r4, [sl, #0x14]
_0207E61C:
	mov r8, #0
	mov r0, sl
	strb r8, [r5, #0x3c]
	bl FUN_0207d834
	ldr r1, [sl, #0x40]
	ldr r0, _0207E7F0 ; =0x00FFB0FF
	bl FUN_0201fbc8
	mov r4, r0
	ldr r1, [r5, #8]
	ldr r0, _0207E7F4 ; =0x020BBEC0
	mul r1, r4, r1
	lsr r1, r1, #6
	str r0, [sp]
	ldr r3, _0207E7F8 ; =FUN_0207df10
	mov r0, #2
	mov r2, r1
	bl FUN_0200b8dc
	ldr r0, [sl, #0x30]
	ldrb r1, [sl, #0xc4]
	asr r0, r0, #0x10
	ldrb r2, [sl, #0x26]
	mul r0, r1, r0
	mul r3, r2, r0
	ldr r2, _0207E7FC ; =0x82061029
	lsr r0, r3, #0x1f
	smull r1, r6, r2, r3
	add r6, r3, r6
	add r6, r0, r6, asr #13
	mul r3, r6, r6
	ldr r2, _0207E800 ; =0x81020409
	lsr r0, r3, #0x1f
	smull r1, sb, r2, r3
	add sb, r3, sb
	add sb, r0, sb, asr #6
	ldr r0, [r5, #4]
	ldr r1, _0207E804 ; =0x04000208
	lsr r7, r0, #2
	ldrh r0, [r1]
	strh r8, [r1]
	str r0, [sp, #4]
	ldrb r0, [sl, #0x23]
	cmp r0, #0
	ble _0207E77C
	mvn fp, #0xc0000000
_0207E6CC:
	add r0, r5, r8, lsl #2
	ldr r6, [r0, #0x30]
	mov r0, #0x1000
	strh r0, [r6, #4]
	mov r0, #1
	strb r0, [r6, #0xc]
	strb r0, [r6, #0x1f]
	ldrb r0, [sl, #0x22]
	cmp r0, #1
	moveq r0, #0
	movne r0, r8
	add r0, r5, r0, lsl #2
	ldr r0, [r0, #0x18]
	str r0, [r6, #0x30]
	mov r0, #0
	str r0, [r6, #0x34]
	str r7, [r6, #0x38]
	mov r0, #1
	strb r0, [r6, #0x21]
	str r4, [r6, #0x13c]
	str sb, [r6, #0x140]
	ldrb r0, [sl, #0x22]
	cmp r0, #1
	ldrne r0, _0207E808 ; =0x020B9FD8
	ldrbne r0, [r0, #0x41]
	cmpne r0, #1
	moveq r0, #0x40
	streq r0, [r6, #0x144]
	beq _0207E750
	tst r8, #1
	moveq r0, #0
	movne r0, #0x7f
	str r0, [r6, #0x144]
_0207E750:
	add r0, r6, #0x3c
	mov r1, fp
	bl FUN_0207bc44
	add r0, r6, #0x5c
	bl FUN_0207bdb0
	mov r0, #1
	strh r0, [r6, #6]
	ldrb r0, [sl, #0x23]
	add r8, r8, #1
	cmp r8, r0
	blt _0207E6CC
_0207E77C:
	ldr r1, _0207E808 ; =0x020B9FD8
	ldr r4, _0207E804 ; =0x04000208
	ldrb r0, [r1, #0x745]
	mov r3, #1
	mov r2, #0
	and r0, r0, #0xfb
	strb r0, [r1, #0x745]
	ldrb r5, [r1, #0x744]
	mov r0, r2
	orr r5, r5, #4
	strb r5, [r1, #0x744]
	ldrh r1, [r4]
	ldr r1, [sp, #4]
	strh r1, [r4]
	ldrb r1, [sl, #0x22]
	strb r3, [sl, #0x11]
	cmp r1, #0
	ble _0207E7E4
_0207E7C4:
	add r1, sl, r0, lsl #2
	add r1, r1, #0x200
	strh r2, [r1, #0x34]
	strh r2, [r1, #0x36]
	ldrb r1, [sl, #0x22]
	add r0, r0, #1
	cmp r0, r1
	blt _0207E7C4
_0207E7E4:
	mov r0, #0
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207E7F0: .word 0x00FFB0FF
_0207E7F4: .word 0x020BBEC0
_0207E7F8: .word FUN_0207df10
_0207E7FC: .word 0x82061029
_0207E800: .word 0x81020409
_0207E804: .word 0x04000208
_0207E808: .word 0x020B9FD8

	arm_func_start FUN_0207e80c
FUN_0207e80c: ; 0x0207E80C
	push {r3, r4, r5, r6, r7, lr}
	ldr r1, _0207E894 ; =0x04000208
	mov r4, #0
	ldrh r5, [r1]
	mov r6, r0
	strh r4, [r1]
	ldrsb r0, [r6, #0x11]
	cmp r0, #0
	ldrheq r0, [r1]
	moveq r0, r4
	strheq r5, [r1]
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r0, [r6, #0x23]
	strb r4, [r6, #0x11]
	cmp r0, #0
	ble _0207E870
	mov r7, #2
	arm_func_end FUN_0207e80c
_0207E850:
	add r0, r6, r4, lsl #2
	ldr r0, [r0, #0x1f0]
	strh r7, [r0, #6]
	bl FUN_0207b5b8
	ldrb r0, [r6, #0x23]
	add r4, r4, #1
	cmp r4, r0
	blt _0207E850
_0207E870:
	ldr r1, _0207E898 ; =0x020B9FD8
	ldr r2, _0207E894 ; =0x04000208
	ldrb r3, [r1, #0x745]
	mov r0, #0
	orr r3, r3, #4
	strb r3, [r1, #0x745]
	ldrh r1, [r2]
	strh r5, [r2]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207E894: .word 0x04000208
_0207E898: .word 0x020B9FD8

	arm_func_start FUN_0207e89c
FUN_0207e89c: ; 0x0207E89C
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x10
	mov r4, #0x80
	mov r6, r0
	mov r5, r1
	mov r0, r5
	mov r2, r4
	add r1, r6, #0x64
	mov r7, #0
	bl FUN_020078c8
	ldrb r0, [r5, #0x32]
	ldr r1, _0207EBA8 ; =0x020BA020
	ldr r2, _0207EBAC ; =0x00007FD8
	strb r0, [r6, #0x22]
	ldrb r3, [r5, #0x32]
	mov r0, #1
	strb r3, [r6, #0x23]
	ldrb r3, [r5, #0x35]
	strb r3, [r6, #0x20]
	ldrb r3, [r5, #0x62]
	strb r3, [r6, #0x25]
	ldrb r3, [r5, #0x62]
	ldrsb r1, [r1, r3]
	strb r1, [r6, #0x26]
	ldrb r3, [r5, #0x33]
	strb r3, [r6, #0x21]
	ldrb r1, [r5, #0x65]
	cmp r3, #0xb4
	strb r1, [r6, #0x27]
	ldr r1, [r5, #0x68]
	str r2, [r6, #0x40]
	strb r0, [r6, #0x1f]
	bgt _0207E954
	cmp r3, #0xb4
	bge _0207E9D0
	cmp r3, #0x74
	bgt _0207E948
	cmp r3, #0x72
	blt _0207EA34
	beq _0207E99C
	cmp r3, #0x74
	beq _0207E970
	b _0207EA34
	arm_func_end FUN_0207e89c
_0207E948:
	cmp r3, #0xb2
	beq _0207E9F0
	b _0207EA34
_0207E954:
	cmp r3, #0xc1
	bgt _0207E964
	beq _0207EA2C
	b _0207EA34
_0207E964:
	cmp r3, #0xc2
	beq _0207EA10
	b _0207EA34
_0207E970:
	ldrsb r0, [r6, #0x27]
	cmp r0, #0
	bne _0207E98C
	ldr r3, _0207EBB0 ; =FUN_0207f934
	mov r2, #0x20
	mov r0, #0x40
_0207E988:
	b _0207EA1C
_0207E98C:
	ldr r3, _0207EBB4 ; =FUN_0207fa78
	mov r2, #0x1e
	mov r0, #0x3c
	b _0207E988
_0207E99C:
	ldrsb r0, [r6, #0x27]
	cmp r0, #0
	bne _0207E9C0
	ldr r2, _0207EBB8 ; =FUN_0207fbd8
	mov r0, #0x40
	str r2, [r6, #0x220]
	str r0, [r6, #0x200]
	str r4, [r6, #0x204]
	b _0207EA40
_0207E9C0:
	ldr r3, _0207EBBC ; =FUN_0207fd6c
	mov r2, #0x3c
	mov r0, #0x78
	b _0207E988
_0207E9D0:
	ldr r2, _0207EBC0 ; =FUN_0207ff60
	mov r1, #0x1e
	mov r0, #0x3c
	str r1, [r6, #0x200]
	str r2, [r6, #0x220]
	str r0, [r6, #0x204]
	mov r1, r7
	b _0207EA40
_0207E9F0:
	ldr r2, _0207EBC4 ; =FUN_0208012c
	mov r1, #0x3c
	mov r0, #0x78
	str r2, [r6, #0x220]
	str r1, [r6, #0x200]
	str r0, [r6, #0x204]
	ldr r1, _0207EBC8 ; =0x00001770
	b _0207EA40
_0207EA10:
	ldr r3, _0207EBCC ; =FUN_0207f710
_0207EA14:
	mov r2, #0x280
	mov r0, #0x500
_0207EA1C:
	str r3, [r6, #0x220]
	str r2, [r6, #0x200]
	str r0, [r6, #0x204]
	b _0207EA40
_0207EA2C:
	ldr r3, _0207EBD0 ; =FUN_0207f85c
	b _0207EA14
_0207EA34:
	add sp, sp, #0x10
	mvn r0, #0
	pop {r3, r4, r5, r6, r7, pc}
_0207EA40:
	ldrb r0, [r6, #0x1d]
	ldr r2, [r6, #0xac]
	str r2, [r6, #0x4c]
	str r2, [r6, #0x50]
	str r2, [r6, #0x54]
	cmp r0, #0
	beq _0207EA74
	cmp r0, #1
	beq _0207EA7C
	cmp r0, #2
	ldrbeq r0, [r6, #0x95]
	strbeq r0, [r6, #0xc]
	b _0207EA84
_0207EA74:
	strb r7, [r6, #0xc]
	b _0207EA84
_0207EA7C:
	mov r0, #1
	strb r0, [r6, #0xc]
_0207EA84:
	ldrb r0, [r6, #0x21]
	and r0, r0, #0xf0
	cmp r0, #0xc0
	bne _0207EB04
	ldr r0, _0207EBD4 ; =0x020BBEC0
	ldr r3, [r6, #0x204]
	ldrsb r2, [r0, #0xa]
	lsl r3, r3, #1
	cmp r2, #0
	bne _0207EACC
	mvn r4, #0xfe
	ldr r1, [r6, #0x1c0]
	mov r0, r4
	mov r2, #0
	bl FUN_02075144
	add sp, sp, #0x10
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
_0207EACC:
	ldr r0, [r0, #0x20]
	cmp r0, r3
	bge _0207EAF8
	mvn r4, #0xfe
	ldr r1, [r6, #0x1c0]
	mov r0, r4
	mov r2, #0
	bl FUN_02075144
	add sp, sp, #0x10
	mov r0, r4
	pop {r3, r4, r5, r6, r7, pc}
_0207EAF8:
	ldr r0, _0207EBD8 ; =FUN_0207f3e0
	str r3, [r6, #0x1c0]
	b _0207EB20
_0207EB04:
	ldr r0, _0207EBD4 ; =0x020BBEC0
	ldrsb r2, [r6, #0xc]
	ldr r0, [r0, #0x20]
	str r0, [r6, #0x1c0]
	ldr r0, _0207EBDC ; =FUN_0207eed4
	cmp r2, #1
	ldrne r0, _0207EBE0 ; =FUN_0207f160
_0207EB20:
	str r0, [r6, #0x218]
	ldrb r0, [r6, #0x95]
	cmp r0, #0
	ldreq r0, [r6, #0xa4]
	ldreq r2, [r6, #0xac]
	ldrne r0, [r6, #0xbc]
	ldrne r2, [r6, #0xb8]
	str r0, [r6, #0x5c]
	ldrb r0, [r6, #0xc4]
	str r2, [r6, #0x58]
	cmp r0, #0
	moveq r0, #0x7f
	strbeq r0, [r6, #0xc4]
	ldrb r0, [r6, #0xc5]
	cmp r0, #0
	moveq r0, #0x40
	strbeq r0, [r6, #0xc5]
	cmp r1, #0
	beq _0207EB94
	mov r4, #3
	add r5, sp, #4
	ldr r0, _0207EBAC ; =0x00007FD8
	mov r2, r4
	mov r3, #0
	str r5, [sp]
	bl FUN_0207dc98
	mov r0, r5
	mov r1, r4
	bl FUN_0207ded8
_0207EB94:
	mov r0, r6
	bl FUN_0207d910
	mov r0, #0
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0207EBA8: .word 0x020BA020
_0207EBAC: .word 0x00007FD8
_0207EBB0: .word FUN_0207f934
_0207EBB4: .word FUN_0207fa78
_0207EBB8: .word FUN_0207fbd8
_0207EBBC: .word FUN_0207fd6c
_0207EBC0: .word FUN_0207ff60
_0207EBC4: .word FUN_0208012c
_0207EBC8: .word 0x00001770
_0207EBCC: .word FUN_0207f710
_0207EBD0: .word FUN_0207f85c
_0207EBD4: .word 0x020BBEC0
_0207EBD8: .word FUN_0207f3e0
_0207EBDC: .word FUN_0207eed4
_0207EBE0: .word FUN_0207f160

	arm_func_start FUN_0207ebe4
FUN_0207ebe4: ; 0x0207EBE4
	push {r3, r4, r5, lr}
	mov lr, r0
	ldrb r0, [lr, #0x21]
	mov ip, r1
	mov r2, #0
	and r0, r0, #0xf0
	cmp r0, #0x70
	beq _0207EC14
	cmp r0, #0xb0
	cmpne r0, #0xe0
	beq _0207ECA0
	b _0207ECD8
	arm_func_end FUN_0207ebe4
_0207EC14:
	ldrb r1, [lr, #0x22]
	mov r5, r2
	cmp r1, #0
	ble _0207EC64
	mov r0, #0x2c
_0207EC28:
	ldrh r4, [ip, #2]
	add r1, lr, r5, lsl #4
	mla r3, r5, r0, lr
	ldrh r2, [ip], #4
	add r1, r1, #0x200
	add r5, r5, #1
	strh r2, [r1, #0x94]
	strh r4, [r1, #0x96]
	ldrh r2, [r1, #0x94]
	add r1, r3, #0x200
	strh r2, [r1, #0x3c]
	strh r4, [r1, #0x3e]
	ldrb r1, [lr, #0x22]
	cmp r5, r1
	blt _0207EC28
_0207EC64:
	cmp r1, #0
	mov r3, #0
	ble _0207ED18
_0207EC70:
	ldrh r2, [ip]
	add r0, lr, r3, lsl #4
	ldrh r1, [ip, #2]
	add r0, r0, #0x200
	add r3, r3, #1
	strh r2, [r0, #0xb4]
	strh r1, [r0, #0xb6]
	ldrb r0, [lr, #0x22]
	add ip, ip, #4
	cmp r3, r0
	blt _0207EC70
	b _0207ED18
_0207ECA0:
	ldrb r0, [lr, #0x22]
	mov r5, #0
	cmp r0, #0
	ble _0207ED18
_0207ECB0:
	add r0, lr, r5, lsl #4
	add r4, r0, #0x2b4
	ldm ip, {r0, r1, r2, r3}
	stm r4, {r0, r1, r2, r3}
	ldrb r0, [lr, #0x22]
	add r5, r5, #1
	add ip, ip, #0x10
	cmp r5, r0
	blt _0207ECB0
	b _0207ED18
_0207ECD8:
	ldrb r0, [lr, #0x22]
	mov r5, r2
	cmp r0, #0
	ble _0207ED18
	mov r0, #0x2c
_0207ECEC:
	mla r4, r5, r0, lr
	mov r3, r2
_0207ECF4:
	add r1, r4, r3, lsl #2
	add r3, r3, #1
	str r2, [r1, #0x23c]
	cmp r3, #4
	blt _0207ECF4
	ldrb r1, [lr, #0x22]
	add r5, r5, #1
	cmp r5, r1
	blt _0207ECEC
_0207ED18:
	mov r0, #1
	strb r0, [lr, #8]
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_0207ed28
FUN_0207ed28: ; 0x0207ED28
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	add r0, r7, #0xf8
	bl FUN_0200dbf0
	add r0, r7, #0xf8
	add r1, r7, #0x140
	bl FUN_0200dfc8
	movs r6, r0
	movne r0, #1
	strbne r0, [r7, #4]
	strbne r0, [r7, #9]
	movne r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	mov r4, #0
	mvn r5, #0xb2
	mov r0, r5
	mov r1, r4
	mov r2, r4
	bl FUN_02075144
	ldr r0, [r7]
	ldr r3, [r7, #0x214]
	ldr ip, [r7, #0x210]
	mov r2, r6
	sub r1, r4, #4
	blx ip
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0207ed28

	arm_func_start FUN_0207ed94
FUN_0207ed94: ; 0x0207ED94
	push {r4, r5, r6, lr}
	mov r6, r0
	ldrsb r0, [r6, #4]
	cmp r0, #0
	moveq r0, #0
	popeq {r4, r5, r6, pc}
	mov r4, #0
	add r0, r6, #0xf8
	strb r4, [r6, #9]
	bl FUN_0200de0c
	movs r5, r0
	bne _0207EDDC
	ldr r0, [r6]
	ldr r3, [r6, #0x214]
	ldr ip, [r6, #0x210]
	mov r2, r5
	sub r1, r4, #5
	blx ip
	arm_func_end FUN_0207ed94
_0207EDDC:
	ldr r0, [r6]
	mov lr, #0
	ldr r3, [r6, #0x214]
	ldr ip, [r6, #0x210]
	mov r2, r5
	mov r1, #4
	strb lr, [r6, #4]
	blx ip
	mov r0, r5
	pop {r4, r5, r6, pc}

	arm_func_start FUN_0207ee04
FUN_0207ee04: ; 0x0207EE04
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	mov r4, #0
	mov r5, r2
	mov r1, r3
	mov r2, r4
	add r0, r7, #0xf8
	bl FUN_0200ded0
	movs r2, r0
	bne _0207EE4C
	ldr r0, [r7]
	ldr r3, [r7, #0x214]
	ldr ip, [r7, #0x210]
	sub r1, r4, #2
	blx ip
	sub r0, r4, #1
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_0207ee04
_0207EE4C:
	mov r1, r6
	mov r2, r5
	add r0, r7, #0xf8
	bl FUN_0200df50
	movs r2, r0
	bpl _0207EE80
	ldr r0, [r7]
	ldr r3, [r7, #0x214]
	ldr ip, [r7, #0x210]
	sub r1, r4, #2
	blx ip
	sub r0, r4, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207EE80:
	cmp r2, r5
	beq _0207EEA4
	ldr r0, [r7]
	ldr r3, [r7, #0x214]
	ldr ip, [r7, #0x210]
	sub r1, r4, #2
	blx ip
	sub r0, r4, #1
	pop {r3, r4, r5, r6, r7, pc}
_0207EEA4:
	add r0, r7, #0xf8
	bl FUN_0200da40
	movs r2, r0
	movne r0, r5
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, [r7]
	ldr r3, [r7, #0x214]
	ldr ip, [r7, #0x210]
	sub r1, r4, #2
	blx ip
	sub r0, r4, #1
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_0207eed4
FUN_0207eed4: ; 0x0207EED4
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	mov sl, r0
	add r4, sl, #0x1c0
	ldrb r3, [r4, #0x3d]
	ldr r2, [r4, #0xc]
	ldr r0, [r4, #0x10]
	add r5, r4, #0x18
	sub r0, r2, r0
	add r2, r5, r3, lsl #3
	str r2, [sp, #4]
	ldr r2, [sl, #0x54]
	ldr r1, [sl, #0x200]
	str r2, [sp, #8]
	bl FUN_0201f9bc
	add r2, r0, #1
	ldrh r0, [sl, #0x9e]
	ldrb r3, [sl, #0x22]
	ldr r1, [sl, #0x1f8]
	mul r0, r2, r0
	mul fp, r3, r0
	ldr r5, [sl, #0x21c]
	ldr r3, [sp, #8]
	mov r0, sl
	mov r2, fp
	blx r5
	cmp r0, #0
	bne _0207EFA8
	mov r5, #0
	ldr r0, [sl]
	ldr r3, [sl, #0x214]
	ldr r7, [sl, #0x210]
	mov r2, r5
	mov r1, #0xc
	mov r6, r5
	blx r7
	mov r1, r5
	mov r2, r5
	sub r0, r5, #0xb8
	bl FUN_0207517c
	ldrb r0, [sl, #0x22]
	cmp r0, #0
	ble _0207F154
	arm_func_end FUN_0207eed4
_0207EF80:
	ldr r0, [sp, #4]
	ldr r2, [r4, #8]
	ldr r1, [r0, r5, lsl #2]
	mov r0, r6
	bl FUN_0200787c
	ldrb r0, [sl, #0x22]
	add r5, r5, #1
	cmp r5, r0
	blt _0207EF80
	b _0207F154
_0207EFA8:
	ldrb r1, [sl, #0x22]
	mov r0, fp
	ldr r8, [r4, #0x10]
	bl FUN_0201f9bc
	ldrh r1, [sl, #0x9e]
	bl FUN_0201f9bc
	ldr r2, [sl, #0x200]
	ldr r1, [r4, #0xc]
	mla r0, r2, r0, r8
	sub r0, r0, r1
	cmp fp, #0
	str r0, [sp]
	ldr r6, [r4, #0x38]
	ble _0207F0EC
_0207EFE0:
	ldr r1, [sl, #0x5c]
	ldr r0, [sp, #8]
	ldrb sb, [sl, #0x22]
	sub r7, r1, r0
	cmp fp, r7
	movle r7, fp
	mov r0, r7
	mov r1, sb
	bl FUN_0201f9bc
	cmp sb, #0
	mov r5, r0
	mov sb, #0
	ble _0207F048
_0207F014:
	add r0, r4, sb, lsl #2
	ldr r1, [r0, #0x28]
	ldr ip, [sl, #0x220]
	mov r0, sl
	add r1, r1, r8, lsl #1
	strb sb, [sl, #0x28]
	mov r2, r6
	mov r3, r5
	blx ip
	ldrb r0, [sl, #0x22]
	add sb, sb, #1
	cmp sb, r0
	blt _0207F014
_0207F048:
	ldr r1, [sl, #0x54]
	ldr r0, [sl, #0x5c]
	add r1, r1, r7
	str r1, [sl, #0x54]
	cmp r1, r0
	add r6, r6, r7
	blt _0207F0CC
	ldrb r0, [sl, #0x22]
	ldr r1, [sl, #0x58]
	mov ip, #0
	str r1, [sl, #0x54]
	cmp r0, #0
	ble _0207F0A8
	mov lr, #0x2c
_0207F080:
	mla r1, ip, lr, sl
	add r0, sl, ip, lsl #4
	add r0, r0, #0x2b4
	add sb, r1, #0x23c
	add ip, ip, #1
	ldm r0, {r0, r1, r2, r3}
	stm sb, {r0, r1, r2, r3}
	ldrb r0, [sl, #0x22]
	cmp ip, r0
	blt _0207F080
_0207F0A8:
	ldrh r1, [sl, #0x60]
	ldr r0, [sl]
	ldr r3, [sl, #0x214]
	add r1, r1, #1
	strh r1, [sl, #0x60]
	ldrh r2, [sl, #0x60]
	ldr sb, [sl, #0x210]
	mov r1, #0xd
	blx sb
_0207F0CC:
	ldrh r1, [sl, #0x9e]
	mov r0, r5
	sub fp, fp, r7
	bl FUN_0201f9bc
	ldr r1, [sl, #0x200]
	cmp fp, #0
	mla r8, r1, r0, r8
	bgt _0207EFE0
_0207F0EC:
	ldrb r1, [sl, #0x22]
	ldr r0, [sp]
	mov r6, #0
	str r0, [r4, #0x10]
	cmp r1, #0
	ble _0207F154
	lsl r5, r0, #1
_0207F108:
	ldr r1, [sp, #4]
	add r0, r4, r6, lsl #2
	ldr r0, [r0, #0x28]
	ldr r1, [r1, r6, lsl #2]
	ldr r2, [r4, #8]
	bl FUN_020078c8
	ldr r0, [sp]
	cmp r0, #0
	ble _0207F144
	add r0, r4, r6, lsl #2
	ldr r1, [r0, #0x28]
	ldr r0, [r4, #0xc]
	mov r2, r5
	add r0, r1, r0, lsl #1
	bl FUN_020078c8
_0207F144:
	ldrb r0, [sl, #0x22]
	add r6, r6, #1
	cmp r6, r0
	blt _0207F108
_0207F154:
	mov r0, #0
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0207f160
FUN_0207f160: ; 0x0207F160
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov sl, r0
	add r4, sl, #0x1c0
	ldrb r1, [r4, #0x3d]
	ldr r7, [sl, #0x54]
	ldr r0, [sl, #0x5c]
	add r2, r4, #0x18
	add r5, r2, r1, lsl #3
	subs fp, r0, r7
	mov r6, #0
	beq _0207F36C
	ldr r1, [r4, #0xc]
	ldr r0, [r4, #0x10]
	ldr sb, [sl, #0x200]
	sub r0, r1, r0
	str r0, [sp]
	mov r1, sb
	bl FUN_0201f9bc
	mov r8, r0
	ldr r0, [sp]
	mov r1, sb
	bl FUN_0201f9bc
	cmp r1, #0
	ldrh r0, [sl, #0x9e]
	addne r8, r8, #1
	ldrb r1, [sl, #0x22]
	mul r0, r8, r0
	mul r0, r1, r0
	cmp r0, fp
	movle fp, r0
	ldr r1, [sl, #0x1f8]
	ldr r8, [sl, #0x21c]
	mov r0, sl
	mov r2, fp
	mov r3, r7
	blx r8
	cmp r0, #0
	bne _0207F254
	mov r7, #0
	ldr r0, [sl]
	ldr r3, [sl, #0x214]
	ldr r8, [sl, #0x210]
	mov r2, r7
	mov r1, #0xc
	blx r8
	ldrb r0, [sl, #0x22]
	cmp r0, #0
	ble _0207F240
	arm_func_end FUN_0207f160
_0207F220:
	ldr r1, [r5, r7, lsl #2]
	ldr r2, [r4, #8]
	mov r0, r6
	bl FUN_0200787c
	ldrb r0, [sl, #0x22]
	add r7, r7, #1
	cmp r7, r0
	blt _0207F220
_0207F240:
	mov r1, #0
	mov r2, r1
	mvn r0, #0xb7
	bl FUN_0207517c
	b _0207F3D8
_0207F254:
	ldrb r7, [sl, #0x22]
	mov r0, fp
	mov r1, r7
	bl FUN_0201f9bc
	ldrh r1, [sl, #0x9e]
	mov r6, r0
	bl FUN_0201fbc8
	ldr r3, [sl, #0x200]
	ldr r2, [r4, #0x10]
	ldr r1, [r4, #0xc]
	mla r0, r3, r0, r2
	cmp r7, #0
	sub sb, r0, r1
	mov r8, #0
	ble _0207F300
	lsl r7, sb, #1
_0207F294:
	add r0, r4, r8, lsl #2
	ldr lr, [r0, #0x28]
	ldr r1, [r4, #0x10]
	ldr r2, [r4, #0x38]
	ldr ip, [sl, #0x220]
	mov r0, sl
	mov r3, r6
	add r1, lr, r1, lsl #1
	strb r8, [sl, #0x28]
	blx ip
	add r0, r4, r8, lsl #2
	ldr r0, [r0, #0x28]
	ldr r1, [r5, r8, lsl #2]
	ldr r2, [r4, #8]
	bl FUN_020078c8
	cmp sb, #0
	ble _0207F2F0
	add r0, r4, r8, lsl #2
	ldr r1, [r0, #0x28]
	ldr r0, [r4, #0xc]
	mov r2, r7
	add r0, r1, r0, lsl #1
	bl FUN_020078c8
_0207F2F0:
	ldrb r0, [sl, #0x22]
	add r8, r8, #1
	cmp r8, r0
	blt _0207F294
_0207F300:
	ldr r0, [sl, #0x54]
	cmp sb, #0
	add r0, r0, fp
	str r0, [sl, #0x54]
	mov r6, #0
	bge _0207F364
	rsb r1, sb, #0
	lsls r8, r1, #1
	ldr r0, [r4, #8]
	movne sb, r6
	sub r1, r0, r8
	ldrbne r0, [sl, #0x22]
	cmpne r0, #0
	ble _0207F360
	bic r7, r1, #1
_0207F33C:
	ldr r1, [r5, sb, lsl #2]
	mov r0, r6
	mov r2, r8
	add r1, r1, r7
	bl FUN_0200787c
	ldrb r0, [sl, #0x22]
	add sb, sb, #1
	cmp sb, r0
	blt _0207F33C
_0207F360:
	mov sb, #0
_0207F364:
	str sb, [r4, #0x10]
	b _0207F3D8
_0207F36C:
	ldrb r0, [sl, #0x22]
	mov r7, r6
	cmp r0, #0
	ble _0207F39C
_0207F37C:
	ldr r1, [r5, r7, lsl #2]
	ldr r2, [r4, #8]
	mov r0, r6
	bl FUN_0200787c
	ldrb r0, [sl, #0x22]
	add r7, r7, #1
	cmp r7, r0
	blt _0207F37C
_0207F39C:
	ldrsb r0, [sl, #0xf]
	cmp r0, #1
	movne r0, #1
	strbne r0, [sl, #0xf]
	bne _0207F3D8
	mov r0, sl
	strb r6, [sl, #0xa]
	strb r6, [sl, #0x13]
	bl FUN_0207e80c
	ldr r0, [sl]
	ldr r3, [sl, #0x214]
	ldr r4, [sl, #0x210]
	mov r2, r6
	mov r1, #8
	blx r4
_0207F3D8:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_0207f3e0
FUN_0207f3e0: ; 0x0207F3E0
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	mov r7, r0
	ldrb r1, [r7, #0x1fd]
	ldr r3, [r7, #0x54]
	ldr r0, [r7, #0x5c]
	add r2, r7, #0x1d8
	add r5, r2, r1, lsl #3
	subs r6, r0, r3
	mov r4, #0
	beq _0207F4E8
	ldrh r0, [r7, #0x9e]
	ldr r1, [r7, #0x1f8]
	ldr ip, [r7, #0x21c]
	cmp r0, r6
	movle r6, r0
	mov r0, r7
	mov r2, r6
	blx ip
	cmp r0, #0
	bne _0207F48C
	mov r8, #0
	ldr r0, [r7]
	ldr r3, [r7, #0x214]
	ldr r6, [r7, #0x210]
	mov r2, r8
	mov r1, #0xc
	blx r6
	ldrb r0, [r7, #0x22]
	cmp r0, #0
	ble _0207F478
	arm_func_end FUN_0207f3e0
_0207F458:
	ldr r1, [r5, r8, lsl #2]
	ldr r2, [r7, #0x1c8]
	mov r0, r4
	bl FUN_0200787c
	ldrb r0, [r7, #0x22]
	add r8, r8, #1
	cmp r8, r0
	blt _0207F458
_0207F478:
	mov r1, #0
	mov r2, r1
	mvn r0, #0xb7
	bl FUN_0207517c
	b _0207F554
_0207F48C:
	ldrb r4, [r7, #0x22]
	mov r0, r6
	mov r1, r4
	bl FUN_0201f9bc
	mov r8, r0
	cmp r4, #0
	mov sb, #0
	ble _0207F4D8
_0207F4AC:
	strb sb, [r7, #0x28]
	ldr r1, [r5, sb, lsl #2]
	ldr r2, [r7, #0x1f8]
	ldr r4, [r7, #0x220]
	mov r0, r7
	mov r3, r8
	blx r4
	ldrb r0, [r7, #0x22]
	add sb, sb, #1
	cmp sb, r0
	blt _0207F4AC
_0207F4D8:
	ldr r0, [r7, #0x54]
	add r0, r0, r6
	str r0, [r7, #0x54]
	b _0207F554
_0207F4E8:
	ldrb r0, [r7, #0x22]
	mov r6, r4
	cmp r0, #0
	ble _0207F518
_0207F4F8:
	ldr r1, [r5, r6, lsl #2]
	ldr r2, [r7, #0x1c8]
	mov r0, r4
	bl FUN_0200787c
	ldrb r0, [r7, #0x22]
	add r6, r6, #1
	cmp r6, r0
	blt _0207F4F8
_0207F518:
	ldrsb r0, [r7, #0xf]
	cmp r0, #1
	movne r0, #1
	strbne r0, [r7, #0xf]
	bne _0207F554
	mov r0, r7
	strb r4, [r7, #0xa]
	strb r4, [r7, #0x13]
	bl FUN_0207e80c
	ldr r0, [r7]
	ldr r3, [r7, #0x214]
	ldr r5, [r7, #0x210]
	mov r2, r4
	mov r1, #8
	blx r5
_0207F554:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, pc}

	arm_func_start FUN_0207f55c
FUN_0207f55c: ; 0x0207F55C
	push {r4, lr}
	add r2, r2, r2, lsr #31
	asr r4, r2, #1
	mov r3, #0x8000
	cmp r4, #0
	rsb r3, r3, #0
	ldr r2, _0207F5B0 ; =0x00007FFF
	mov ip, #0
	ble _0207F5A0
	arm_func_end FUN_0207f55c
_0207F580:
	ldrsh lr, [r1], #2
	add ip, ip, #1
	cmp r2, lr
	movgt r2, lr
	cmp r3, lr
	movlt r3, lr
	cmp ip, r4
	blt _0207F580
_0207F5A0:
	strh r2, [r0]
	strh r3, [r0, #2]
	sub r0, r3, r2
	pop {r4, pc}
	.align 2, 0_0207F5B0: .word 0x00007FFF

	arm_func_start FUN_0207f5b4
FUN_0207f5b4: ; 0x0207F5B4
	push {r3, r4, r5, lr}
	mov r5, #0x5500
	ldr r1, _0207F5F8 ; =0x38646F63
	mov r0, r5
	bl FUN_0207dbf4
	mov r1, r0
	ldr r4, _0207F5FC ; =0x020BC138
	sub r2, r5, #0x280
	str r1, [r4]
	mov r0, #0
	bl FUN_0200787c
	ldr r1, [r4]
	add r0, r1, #0x1280
	add r0, r0, #0x4000
	str r0, [r1, #0x27c]
	bl FUN_0207f640
	pop {r3, r4, r5, pc}
	.align 2, 0_0207F5F8: .word 0x38646F63
_0207F5FC: .word 0x020BC138
	arm_func_end FUN_0207f5b4

	arm_func_start FUN_0207f600
FUN_0207f600: ; 0x0207F600
	push {r4, lr}
	ldr r4, _0207F63C ; =0x020BC138
	ldr r0, [r4]
	cmp r0, #0
	popeq {r4, pc}
	add r0, r0, #0x260
	bl FUN_0208490c
	ldr r0, [r4]
	ldr r0, [r0]
	bl FUN_02083da8
	ldr r0, [r4]
	bl FUN_0207dc70
	mov r0, #0
	str r0, [r4]
	pop {r4, pc}
	.align 2, 0_0207F63C: .word 0x020BC138
	arm_func_end FUN_0207f600

	arm_func_start FUN_0207f640
FUN_0207f640: ; 0x0207F640
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	ldr r5, _0207F708 ; =0x020BC138
	ldr r1, [r5]
	cmp r1, #0
	addeq sp, sp, #4
	popeq {r3, r4, r5, r6, pc}
	mov r4, #0
	mov r0, r4
	add r1, r1, #0x280
	mov r2, #0x800
	bl FUN_0200787c
	ldr r1, [r5]
	mov r0, r4
	add r1, r1, #0xa80
	mov r2, #0x4800
	bl FUN_0200787c
	ldr r2, [r5]
	ldr r0, _0207F70C ; =0x0208E96C
	add r1, r2, #0x280
	str r1, [r2, #0x68]
	ldr r2, [r5]
	add r1, r2, #0xa80
	str r1, [r2, #0x25c]
	ldr r1, [r5]
	add r1, r1, #4
	bl FUN_02083c60
	ldr r1, [r5]
	add r6, sp, #0
	str r0, [r1]
	mov r1, #1
	str r1, [sp]
	ldr r0, [r5]
	mov r1, r4
	ldr r0, [r0]
	mov r2, r6
	bl FUN_02084ad0
	ldr r0, [r5]
	str r4, [sp]
	ldr r0, [r0]
	mov r2, r6
	mov r1, #0x2c
	bl FUN_02084ad0
	ldr r0, [r5]
	mov r1, r4
	add r0, r0, #0x260
	mov r2, #0x80
	bl FUN_020848e4
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	.align 2, 0_0207F708: .word 0x020BC138
_0207F70C: .word 0x0208E96C
	arm_func_end FUN_0207f640

	arm_func_start FUN_0207f710
FUN_0207f710: ; 0x0207F710
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov fp, r0
	ldrh r7, [fp, #0x9e]
	ldrb r6, [fp, #0x28]
	mov r8, r2
	mov sb, r1
	mla r8, r6, r7, r8
	mov r1, #0x2c
	mov r0, r3
	str r3, [sp]
	cmp r0, #0
	add r5, fp, #0x23c
	smulbb r4, r6, r1
	add sb, sb, r6, lsl #1
	mov r6, #0
	ble _0207F84C
	arm_func_end FUN_0207f710
_0207F750:
	ldr r0, _0207F854 ; =0x020BC138
	ldrh r2, [fp, #0xd0]
	ldr r0, [r0]
	mov r1, #0
	str r8, [r0, #0x260]
	lsr r2, r2, #2
	str r8, [r0, #0x264]
	lsl r2, r2, #5
	str r2, [r0, #0x268]
	str r1, [r0, #0x26c]
	mov sl, r8
	str r1, [r0, #0x274]
	cmp r7, #0
	ble _0207F7A4
	ldr r2, _0207F858 ; =0x88888888
_0207F78C:
	ldr r3, [sl]
	add r1, r1, #4
	eor r3, r3, r2
	str r3, [sl], #4
	cmp r1, r7
	blt _0207F78C
_0207F7A4:
	ldr sl, _0207F854 ; =0x020BC138
	add r1, r0, #0x260
	ldr r2, [sl]
	ldr r0, [r2]
	ldr r2, [r2, #0x27c]
	bl FUN_02083db8
	ldr r0, [sl]
	ldrsh sl, [r5, r4]
	ldr ip, [r0, #0x27c]
	mov r0, #0x8000
	rsb r0, r0, #0
	mov r2, #0
	lsr r1, r0, #0x11
_0207F7D8:
	lsl r3, r2, #1
	ldrsh r3, [ip, r3]
	add sl, r3, sl
	add sl, sl, sl, lsr #31
	asr sl, sl, #1
	add lr, sl, #0x20
	cmp lr, r0, lsr #17
	movgt lr, r1
	bgt _0207F804
	cmp lr, r0
	movlt lr, r0
_0207F804:
	add sl, r3, #0x20
	cmp sl, r0, lsr #17
	movgt sl, r1
	bgt _0207F81C
	cmp sl, r0
	movlt sl, r0
_0207F81C:
	strh sl, [sb, #2]
	strh lr, [sb], #4
	add r2, r2, #1
	cmp r2, #0x140
	mov sl, r3
	blt _0207F7D8
	ldr r0, [sp]
	add r6, r6, r7
	strh r3, [r5, r4]
	cmp r6, r0
	add r8, r8, r7
	blt _0207F750
_0207F84C:
	mov r0, #0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207F854: .word 0x020BC138
_0207F858: .word 0x88888888

	arm_func_start FUN_0207f85c
FUN_0207f85c: ; 0x0207F85C
	mov r0, #0
	bx lr
	arm_func_end FUN_0207f85c

	arm_func_start FUN_0207f864
FUN_0207f864: ; 0x0207F864
	push {r3, lr}
	ldrh lr, [r0, #0x9e]
	ldrb ip, [r0, #0x22]
	ldrb r0, [r0, #0x28]
	cmp r3, #0
	mul ip, lr, ip
	mla lr, r0, lr, r2
	asr r2, ip, #2
	mov ip, #0
	ble _0207F8C0
	arm_func_end FUN_0207f864
_0207F88C:
	ldr r0, [lr]
	add ip, ip, #0x10
	str r0, [r1]
	ldr r0, [lr, #4]
	cmp ip, r3
	str r0, [r1, #4]
	ldr r0, [lr, #8]
	str r0, [r1, #8]
	ldr r0, [lr, #0xc]
	add lr, lr, r2, lsl #2
	str r0, [r1, #0xc]
	add r1, r1, #0x10
	blt _0207F88C
_0207F8C0:
	mov r0, r3
	pop {r3, pc}

	arm_func_start FUN_0207f8c8
FUN_0207f8c8: ; 0x0207F8C8
	push {r4, r5, r6, lr}
	mov r5, #0
	ldr r1, _0207F930 ; =0x020BC13C
	mvn lr, #0
	mov r2, #0x58
	mov r3, r5
	mov r4, r5
	arm_func_end FUN_0207f8c8
_0207F8E4:
	mov r6, r4
	add r0, r1, r5, lsl #3
_0207F8EC:
	cmp r6, #4
	movlt ip, lr
	lslge ip, r6, #1
	subge ip, ip, #6
	adds ip, r5, ip
	movmi ip, r3
	bmi _0207F910
	cmp ip, #0x58
	movgt ip, r2
_0207F910:
	strb ip, [r6, r0]
	add r6, r6, #1
	cmp r6, #8
	blt _0207F8EC
	add r5, r5, #1
	cmp r5, #0x58
	ble _0207F8E4
	pop {r4, r5, r6, pc}
	.align 2, 0_0207F930: .word 0x020BC13C

	arm_func_start FUN_0207f934
FUN_0207f934: ; 0x0207F934
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	ldrh r4, [r0, #0x9e]
	ldrb r5, [r0, #0x22]
	ldrb r7, [r0, #0x28]
	mov r6, #0x2c
	mul r5, r4, r5
	str r4, [sp, #0xc]
	str r5, [sp]
	smulbb r4, r7, r6
	add r5, r0, #0x23c
	add r0, r5, r4
	str r0, [sp, #0x14]
	ldr r0, [sp, #0xc]
	ldrsh r4, [r5, r4]
	mla r2, r7, r0, r2
	ldr r0, [sp, #0x14]
	cmp r3, #0
	ldrb r5, [r0, #2]
	ldrsh r0, [r0, #0x10]
	str r0, [sp, #0x10]
	mov r0, #0
	str r0, [sp, #8]
	ble _0207FA4C
	arm_func_end FUN_0207f934
_0207F994:
	mov r0, #0
	mov sb, #0x8000
	ldr r8, _0207FA6C ; =0x00007FDF
	ldr ip, _0207FA70 ; =0x0208C544
	ldr fp, _0207FA74 ; =0x020BC13C
	str r0, [sp, #4]
	rsb sb, sb, #0
_0207F9B0:
	ldr r0, [sp, #4]
	mov r7, #0
	ldr r6, [r2, r0, lsl #2]
_0207F9BC:
	lsl r0, r5, #1
	and lr, r6, #7
	lsl sl, lr, #1
	ldrsh r0, [ip, r0]
	add sl, sl, #1
	tst r6, #8
	mul sl, r0, sl
	add r0, fp, r5, lsl #3
	ldrb r5, [lr, r0]
	beq _0207F9F4
	sub r4, r4, sl, asr #3
	cmp r4, sb
	movlt r4, sb
	b _0207FA00
_0207F9F4:
	add r4, r4, sl, asr #3
	cmp r4, r8
	movgt r4, r8
_0207FA00:
	add r0, r4, #0x20
	strh r0, [r1], #2
	lsr r6, r6, #4
	add r7, r7, #1
	cmp r7, #8
	blt _0207F9BC
	ldr r0, [sp, #4]
	add r0, r0, #1
	str r0, [sp, #4]
	cmp r0, #4
	blt _0207F9B0
	ldr r6, [sp, #8]
	ldr r0, [sp, #0xc]
	add r0, r6, r0
	str r0, [sp, #8]
	cmp r0, r3
	ldr r0, [sp]
	add r2, r2, r0
	blt _0207F994
_0207FA4C:
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x10]
	strh r4, [r0]
	strb r5, [r0, #2]
	strh r1, [r0, #0x10]
	mov r0, #0
	add sp, sp, #0x18
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207FA6C: .word 0x00007FDF
_0207FA70: .word 0x0208C544
_0207FA74: .word 0x020BC13C

	arm_func_start FUN_0207fa78
FUN_0207fa78: ; 0x0207FA78
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	ldrb r4, [r0, #0x28]
	add r6, r0, #0x23c
	mov r5, #0x2c
	mla r5, r4, r5, r6
	ldrb r6, [r5, #3]
	str r5, [sp, #0x10]
	ldrh r5, [r0, #0x9e]
	cmp r6, #1
	ldrbeq r7, [r2, #0xf]
	str r5, [sp, #0xc]
	ldrb r5, [r0, #0x22]
	ldr r0, [sp, #0xc]
	moveq r6, #0
	mul r5, r0, r5
	ldreq r0, [sp, #0x10]
	str r5, [sp]
	strbeq r6, [r0, #3]
	ldrne r0, [sp, #0x10]
	ldrshne r6, [r0]
	ldrbne r7, [r0, #2]
	ldr r0, [sp, #0xc]
	cmp r3, #0
	mla r2, r4, r0, r2
	mov r0, #0
	str r0, [sp, #8]
	ble _0207FBB4
	arm_func_end FUN_0207fa78
_0207FAE8:
	mov r0, #0
	str r0, [sp, #4]
	mov ip, #0x8000
	ldr r0, _0207FBCC ; =0x00007FDF
	ldr fp, _0207FBD0 ; =0x0208C544
	rsb ip, ip, #0
_0207FB00:
	ldr r4, [sp, #4]
	mov sb, #0
	cmp r4, #3
	moveq sl, #6
	movne sl, #8
	ldr r8, [r2, r4, lsl #2]
	cmp sl, #0
	ble _0207FB80
_0207FB20:
	lsl r4, r7, #1
	and r5, r8, #7
	ldrsh lr, [fp, r4]
	lsl r4, r5, #1
	add r4, r4, #1
	mul r4, lr, r4
	ldr lr, _0207FBD4 ; =0x020BC13C
	tst r8, #8
	add r7, lr, r7, lsl #3
	ldrb r7, [r5, r7]
	beq _0207FB5C
	sub r6, r6, r4, asr #3
	cmp r6, ip
	movlt r6, ip
	b _0207FB68
_0207FB5C:
	add r6, r6, r4, asr #3
	cmp r6, r0
	movgt r6, r0
_0207FB68:
	add r4, r6, #0x20
	strh r4, [r1], #2
	lsr r8, r8, #4
	add sb, sb, #1
	cmp sb, sl
	blt _0207FB20
_0207FB80:
	ldr r4, [sp, #4]
	add r4, r4, #1
	str r4, [sp, #4]
	cmp r4, #4
	blt _0207FB00
	ldr r4, [sp, #8]
	ldr r0, [sp, #0xc]
	add r0, r4, r0
	str r0, [sp, #8]
	cmp r0, r3
	ldr r0, [sp]
	add r2, r2, r0
	blt _0207FAE8
_0207FBB4:
	ldr r0, [sp, #0x10]
	strh r6, [r0]
	strb r7, [r0, #2]
	mov r0, #0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207FBCC: .word 0x00007FDF
_0207FBD0: .word 0x0208C544
_0207FBD4: .word 0x020BC13C

	arm_func_start FUN_0207fbd8
FUN_0207fbd8: ; 0x0207FBD8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	ldrh r5, [r0, #0x9e]
	ldrb r4, [r0, #0x28]
	add r7, r0, #0x23c
	str r5, [sp, #0xc]
	mov r5, #0x2c
	smulbb r6, r4, r5
	add r5, r7, r6
	str r5, [sp, #0x10]
	ldr r5, [sp, #0xc]
	ldrsh r6, [r7, r6]
	ldrb r8, [r0, #0x22]
	mla r2, r4, r5, r2
	mul r7, r5, r8
	ldr r4, [sp, #0x10]
	str r7, [sp]
	ldrb r8, [r4, #2]
	ldrsh r7, [r4, #0x10]
	mov r4, #0
	mov fp, r6
	cmp r3, #0
	str r4, [sp, #8]
	ble _0207FD44
	arm_func_end FUN_0207fbd8
_0207FC38:
	mov r4, #0
	mov ip, #0x8000
	str r4, [sp, #4]
	rsb ip, ip, #0
_0207FC48:
	ldr r4, [sp, #4]
	mov sl, #0
	ldr sb, [r2, r4, lsl #2]
_0207FC54:
	ldr r4, _0207FD60 ; =0x0208C544
	lsl lr, r8, #1
	and r5, sb, #7
	ldrsh lr, [r4, lr]
	lsl r4, r5, #1
	add r4, r4, #1
	mul r4, lr, r4
	ldr lr, _0207FD64 ; =0x020BC13C
	tst sb, #8
	add r8, lr, r8, lsl #3
	ldrb r8, [r5, r8]
	beq _0207FC94
	sub r6, r6, r4, asr #3
	cmp r6, ip
	movlt r6, ip
	b _0207FCA4
_0207FC94:
	add r6, r6, r4, asr #3
	ldr r4, _0207FD68 ; =0x00007FFF
	cmp r6, r4
	movgt r6, r4
_0207FCA4:
	lsr sb, sb, #4
	ldr r5, [r0, #0x2d8]
	ldr r4, [r0, #0x2d4]
	add fp, r6, fp
	add fp, fp, fp, lsr #31
	asr fp, fp, #1
	mul r7, r5, r7
	mla fp, r4, fp, r7
	asr r7, fp, #7
	add r7, fp, r7, lsr #24
	lsl r7, r7, #8
	asr r7, r7, #0x10
	mul fp, r5, r7
	mla r5, r4, r6, fp
	add r4, r7, #0x20
	strh r4, [r1]
	asr r4, r5, #7
	add r4, r5, r4, lsr #24
	lsl r4, r4, #8
	asr r7, r4, #0x10
	add r4, r7, #0x20
	strh r4, [r1, #2]
	add r1, r1, #4
	mov fp, r6
	add sl, sl, #1
	cmp sl, #8
	blt _0207FC54
	ldr r4, [sp, #4]
	add r4, r4, #1
	str r4, [sp, #4]
	cmp r4, #4
	blt _0207FC48
	ldr r5, [sp, #8]
	ldr r4, [sp, #0xc]
	add r4, r5, r4
	str r4, [sp, #8]
	cmp r4, r3
	ldr r4, [sp]
	add r2, r2, r4
	blt _0207FC38
_0207FD44:
	ldr r0, [sp, #0x10]
	strh r6, [r0]
	strb r8, [r0, #2]
	strh r7, [r0, #0x10]
	mov r0, #0
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207FD60: .word 0x0208C544
_0207FD64: .word 0x020BC13C
_0207FD68: .word 0x00007FFF

	arm_func_start FUN_0207fd6c
FUN_0207fd6c: ; 0x0207FD6C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	ldrh r4, [r0, #0x9e]
	ldrb r7, [r0, #0x28]
	add r5, r0, #0x23c
	str r4, [sp, #0x10]
	mov r4, #0x2c
	mla r4, r7, r4, r5
	ldrb r6, [r4, #3]
	str r4, [sp, #0x18]
	ldr r4, [sp, #0x10]
	ldrb r5, [r0, #0x22]
	mla r2, r7, r4, r2
	mul r5, r4, r5
	cmp r6, #1
	ldrne r4, [sp, #0x18]
	str r5, [sp, #4]
	ldrshne ip, [r4]
	ldrbne lr, [r4, #2]
	ldrshne r5, [r4, #0x10]
	bne _0207FDD4
	ldrb lr, [r2, #0xf]
	ldr r4, [sp, #0x18]
	mov ip, #0
	mov r5, ip
	strb ip, [r4, #3]
	arm_func_end FUN_0207fd6c
_0207FDD4:
	mov r4, #0
	str ip, [sp, #0x14]
	cmp r3, #0
	str r4, [sp, #0xc]
	ble _0207FF38
_0207FDE8:
	mov r4, #0
	mov sl, #0x8000
	ldr sb, _0207FF54 ; =0x00007FFF
	str r4, [sp, #8]
	rsb sl, sl, #0
_0207FDFC:
	ldr r4, [sp, #8]
	mov fp, #0
	cmp r4, #3
	moveq r6, #6
	streq r6, [sp]
	movne r6, #8
	strne r6, [sp]
	ldr r6, [sp]
	ldr r4, [r2, r4, lsl #2]
	cmp r6, #0
	ble _0207FF04
_0207FE28:
	ldr r6, _0207FF58 ; =0x0208C544
	lsl r7, lr, #1
	and r8, r4, #7
	ldrsh r6, [r6, r7]
	lsl r7, r8, #1
	add r7, r7, #1
	mul r7, r6, r7
	ldr r6, _0207FF5C ; =0x020BC13C
	tst r4, #8
	add r6, r6, lr, lsl #3
	ldrb lr, [r8, r6]
	beq _0207FE68
	sub ip, ip, r7, asr #3
	cmp ip, sl
	movlt ip, sl
	b _0207FE74
_0207FE68:
	add ip, ip, r7, asr #3
	cmp ip, sb
	movgt ip, sb
_0207FE74:
	ldr r8, [r0, #0x2d8]
	ldr r6, [sp, #0x14]
	mul r5, r8, r5
	add r6, ip, r6
	add r6, r6, r6, lsr #31
	ldr r7, [r0, #0x2d4]
	asr r6, r6, #1
	mla r6, r7, r6, r5
	asr r5, r6, #7
	add r5, r6, r5, lsr #24
	asr r6, r5, #8
	mul r5, r8, r6
	mla r5, r7, ip, r5
	asr r7, r5, #7
	add r6, r6, #0x20
	add r5, r5, r7, lsr #24
	cmp r6, sb
	lsr r4, r4, #4
	asr r5, r5, #8
	movgt r6, sb
	bgt _0207FED0
	cmp r6, sl
	movlt r6, sl
_0207FED0:
	add r7, r5, #0x20
	cmp r7, sb
	movgt r7, sb
	bgt _0207FEE8
	cmp r7, sl
	movlt r7, sl
_0207FEE8:
	strh r7, [r1, #2]
	strh r6, [r1], #4
	ldr r6, [sp]
	add fp, fp, #1
	str ip, [sp, #0x14]
	cmp fp, r6
	blt _0207FE28
_0207FF04:
	ldr r4, [sp, #8]
	add r4, r4, #1
	str r4, [sp, #8]
	cmp r4, #4
	blt _0207FDFC
	ldr r6, [sp, #0xc]
	ldr r4, [sp, #0x10]
	add r4, r6, r4
	str r4, [sp, #0xc]
	cmp r4, r3
	ldr r4, [sp, #4]
	add r2, r2, r4
	blt _0207FDE8
_0207FF38:
	ldr r0, [sp, #0x18]
	strh ip, [r0]
	strb lr, [r0, #2]
	strh r5, [r0, #0x10]
	mov r0, #0
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_0207FF54: .word 0x00007FFF
_0207FF58: .word 0x0208C544
_0207FF5C: .word 0x020BC13C

	arm_func_start FUN_0207ff60
FUN_0207ff60: ; 0x0207FF60
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x20
	ldrh r4, [r0, #0x9e]
	ldrb r7, [r0, #0x28]
	add r6, r0, #0x23c
	str r4, [sp, #0x14]
	ldrb r4, [r0, #0x22]
	ldr r0, [sp, #0x14]
	mov r5, #0x2c
	mul r4, r0, r4
	mla r0, r7, r5, r6
	str r0, [sp, #0x18]
	ldr r0, [sp, #0x14]
	str r4, [sp]
	mla r2, r7, r0, r2
	mov r0, #0
	cmp r3, #0
	str r0, [sp, #0x10]
	ble _02080118
	arm_func_end FUN_0207ff60
_0207FFAC:
	ldrb r0, [r2, #0xf]
	mov r8, r1
	str r2, [sp, #0xc]
	eor r0, r0, #0x80
	and r0, r0, #0xff
	asr r4, r0, #4
	and r0, r0, #0xf
	rsb r0, r0, #0xc
	cmp r4, #4
	str r0, [sp, #4]
	movgt r4, #0
	ldr r0, _02080124 ; =0x0208C5F8
	lsl r4, r4, #1
	ldrh r4, [r0, r4]
	ldr r0, [sp, #0x18]
	ldr r7, [r0]
	ldr r6, [r0, #4]
	mvn r0, r4
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	asr r4, r0, #8
	lsl r0, r0, #0x18
	asr r5, r0, #0x18
	lsl r0, r4, #0x18
	asr fp, r0, #0x18
	mov r0, #0
	str r0, [sp, #8]
	mov r0, #0x8000
	rsb r0, r0, #0
	lsr r4, r0, #0x11
	str r4, [sp, #0x1c]
_02080028:
	ldr r4, [sp, #8]
	mov lr, #0
	cmp r4, #3
	ldr r4, [sp, #0xc]
	ldr sb, [r4], #4
	str r4, [sp, #0xc]
	ldr r4, _02080128 ; =0x80808080
	eor r4, sb, r4
	moveq sb, #6
	movne sb, #8
	and sb, sb, #0xff
	cmp sb, #0
	ble _020800CC
_0208005C:
	lsl sl, r4, #0x1c
	lsr sl, sl, #0x10
	lsl sl, sl, #0x10
	ldr ip, [sp, #4]
	asr sl, sl, #0x10
	asr ip, sl, ip
	mul sl, r6, fp
	mla sl, r7, r5, sl
	asr r6, sl, #5
	add r6, sl, r6, lsr #26
	asr r6, r6, #6
	add sl, r6, ip, lsl #6
	mov r6, r7
	asr ip, sl, #5
	mov r7, sl
	add sl, sl, ip, lsr #26
	asr sl, sl, #6
	add sl, sl, #0x20
	cmp sl, r0, lsr #17
	ldrgt sl, [sp, #0x1c]
	bgt _020800B8
	cmp sl, r0
	movlt sl, r0
_020800B8:
	strh sl, [r8], #2
	lsr r4, r4, #4
	add lr, lr, #1
	cmp lr, sb
	blt _0208005C
_020800CC:
	ldr r4, [sp, #8]
	add r4, r4, #1
	str r4, [sp, #8]
	cmp r4, #4
	blt _02080028
	ldr r0, [sp, #0x18]
	ldr r4, [sp, #0x10]
	str r7, [r0]
	ldr r0, [sp, #0x14]
	add r1, r1, #0x3c
	add r0, r4, r0
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x18]
	str r6, [r0, #4]
	ldr r0, [sp, #0x10]
	cmp r0, r3
	ldr r0, [sp]
	add r2, r2, r0
	blt _0207FFAC
_02080118:
	mov r0, #0
	add sp, sp, #0x20
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02080124: .word 0x0208C5F8
_02080128: .word 0x80808080

	arm_func_start FUN_0208012c
FUN_0208012c: ; 0x0208012C
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	ldrh r4, [r0, #0x9e]
	ldrb r7, [r0, #0x28]
	add r6, r0, #0x23c
	str r4, [sp, #0x1c]
	ldrb r4, [r0, #0x22]
	ldr r0, [sp, #0x1c]
	mov r5, #0x2c
	mul r4, r0, r4
	mla r0, r7, r5, r6
	str r0, [sp, #0x20]
	ldr r0, [sp, #0x1c]
	str r4, [sp]
	mla r2, r7, r0, r2
	mov r0, #0
	cmp r3, #0
	str r0, [sp, #0x18]
	ble _02080344
	arm_func_end FUN_0208012c
_02080178:
	ldrb r0, [r2, #0xf]
	mov r8, r1
	str r2, [sp, #0x14]
	eor r0, r0, #0x80
	and r0, r0, #0xff
	asr r4, r0, #4
	and r0, r0, #0xf
	rsb r0, r0, #0xc
	cmp r4, #4
	str r0, [sp, #0xc]
	movgt r4, #0
	ldr r0, _02080350 ; =0x0208C5F8
	lsl r4, r4, #1
	ldrh r5, [r0, r4]
	ldr r4, [sp, #0x20]
	ldr r0, [sp, #0x20]
	ldr lr, [r4]
	mvn r4, r5
	lsl r4, r4, #0x10
	lsr r4, r4, #0x10
	asr r5, r4, #8
	lsl r4, r4, #0x18
	asr r4, r4, #0x18
	str r4, [sp, #4]
	lsl r4, r5, #0x18
	asr r4, r4, #0x18
	str r4, [sp, #8]
	ldr r4, [sp, #0x20]
	ldrsh r0, [r0, #8]
	ldr ip, [r4, #4]
	ldr r7, [r4, #0x18]
	ldr r6, [r4, #0x1c]
	mov r4, #0
	str r4, [sp, #0x10]
	mov r4, #0x8000
	rsb r4, r4, #0
	lsr r5, r4, #0x11
_0208020C:
	ldr sb, [sp, #0x10]
	ldr sl, [sp, #0x14]
	cmp sb, #3
	ldr sb, [sl], #4
	str sl, [sp, #0x14]
	ldr sl, _02080354 ; =0x80808080
	eor sl, sb, sl
	moveq sb, #6
	movne sb, #8
	and fp, sb, #0xff
	cmp fp, #0
	mov sb, #0
	ble _020802E8
_02080240:
	lsl r6, sl, #0x1c
	lsr r6, r6, #0x10
	lsl r6, r6, #0x10
	asr r7, r6, #0x10
	ldr r6, [sp, #0xc]
	asr r7, r7, r6
	ldr r6, [sp, #8]
	mul r6, ip, r6
	ldr ip, [sp, #4]
	mla ip, lr, ip, r6
	asr r6, ip, #5
	add r6, ip, r6, lsr #26
	asr r6, r6, #6
	add r7, r6, r7, lsl #6
	asr r6, r7, #5
	add r6, r7, r6, lsr #26
	add r0, r0, r6, asr #6
	mov ip, lr
	add r0, r0, r0, lsr #31
	mov lr, r7
	asr r7, r0, #1
	cmp r7, r4, lsr #17
	asr r6, r6, #6
	movgt r0, r5
	bgt _020802B0
	mov r0, r4
	cmp r7, r4
	movge r0, r7
_020802B0:
	strh r0, [r8]
	cmp r6, r4, lsr #17
	movgt r0, r5
	bgt _020802CC
	mov r0, r4
	cmp r6, r4
	movge r0, r6
_020802CC:
	strh r0, [r8, #2]
	mov r0, r6
	add r8, r8, #4
	lsr sl, sl, #4
	add sb, sb, #1
	cmp sb, fp
	blt _02080240
_020802E8:
	ldr sb, [sp, #0x10]
	add sb, sb, #1
	str sb, [sp, #0x10]
	cmp sb, #4
	blt _0208020C
	ldr r4, [sp, #0x20]
	add r1, r1, #0x78
	str lr, [r4]
	str ip, [r4, #4]
	strh r0, [r4, #8]
	mov r0, r4
	str r7, [r0, #0x18]
	ldr r4, [sp, #0x18]
	ldr r0, [sp, #0x1c]
	add r0, r4, r0
	str r0, [sp, #0x18]
	ldr r0, [sp, #0x20]
	str r6, [r0, #0x1c]
	ldr r0, [sp, #0x18]
	cmp r0, r3
	ldr r0, [sp]
	add r2, r2, r0
	blt _02080178
_02080344:
	mov r0, #0
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02080350: .word 0x0208C5F8
_02080354: .word 0x80808080

	arm_func_start FUN_02080358
FUN_02080358: ; 0x02080358
	push {r4, lr}
	ldr r1, [r0, #0xc]
	ldr r4, [r0, #4]
	and r3, r1, #0x1f
	rsb r2, r3, #0x20
	ldr lr, [r4]
	add r1, r1, #4
	str r1, [r0, #0xc]
	cmp r2, #4
	lslgt r1, lr, r3
	lsrgt r2, r1, #0x1c
	bgt _020803B4
	add r1, r4, #4
	str r1, [r0, #4]
	mov r1, #1
	lsl r1, r1, r2
	rsb r3, r2, #4
	sub ip, r1, #1
	ldr r2, [r4, #4]
	rsb r1, r3, #0x20
	lsr r1, r2, r1
	and r2, lr, ip
	orr r2, r1, r2, lsl r3
	arm_func_end FUN_02080358
_020803B4:
	ldr r1, [r0, #0xc]
	lsl r2, r2, #3
	add r3, r2, #5
	and r2, r1, #0x1f
	add r2, r2, r3
	add r1, r1, r3
	ldr r3, [r0, #4]
	asr r2, r2, #5
	add r2, r3, r2, lsl #2
	str r2, [r0, #4]
	str r1, [r0, #0xc]
	mov r0, #0
	pop {r4, pc}

	arm_func_start FUN_020803e8
FUN_020803e8: ; 0x020803E8
	mov r1, r0
	cmp r0, #0x10000
	mov r2, #0
	lsrhs r1, r0, #0x10
	addhs r2, r2, #8
	cmp r1, #0x100
	lsrhs r1, r1, #8
	addhs r2, r2, #4
	cmp r1, #0x10
	lsrhs r1, r1, #4
	addhs r2, r2, #2
	cmp r1, #4
	addhs r2, r2, #1
	lsl r1, r2, #0x10
	asr r1, r1, #0x10
	sub r1, r1, #6
	lsl r2, r1, #1
	cmp r2, #0
	asrgt ip, r0, r2
	rsble r2, r2, #0
	lslle ip, r0, r2
	lsl r0, ip, #0x10
	ldr r2, _020804A8 ; =0x0000106C
	asr r3, r0, #0x10
	mul r0, r3, r2
	ldr r2, _020804AC ; =0xFFFFCEAD
	lsl r0, r0, #2
	add r0, r2, r0, asr #16
	smulbb r0, ip, r0
	lsl r0, r0, #2
	asr r0, r0, #0x10
	add r0, r0, #0xb5
	add r0, r0, #0x5200
	smulbb r0, ip, r0
	lsl r0, r0, #2
	asr r0, r0, #0x10
	add r0, r0, #0x32
	add r0, r0, #0xe00
	lsl r0, r0, #0x10
	rsb r1, r1, #7
	asr r2, r0, #0x10
	cmp r1, #0
	asrgt r0, r2, r1
	rsble r0, r1, #0
	lslle r0, r2, r0
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	bx lr
	.align 2, 0_020804A8: .word 0x0000106C
_020804AC: .word 0xFFFFCEAD
	arm_func_end FUN_020803e8

	arm_func_start FUN_020804b0
FUN_020804b0: ; 0x020804B0
	push {r4, lr}
	cmp r3, #0
	mov lr, #0
	pople {r4, pc}
	mov ip, lr
	arm_func_end FUN_020804b0
_020804C4:
	ldr r4, [r0, lr, lsl #2]
	cmp r4, r1
	blt _020804D8
	cmp r4, r2
	ble _020804F0
_020804D8:
	cmp r4, r1
	strlt r1, [r0, lr, lsl #2]
	blt _020804F0
	cmp r4, r2
	strgt r2, [r0, lr, lsl #2]
	strle ip, [r0, lr, lsl #2]
_020804F0:
	add lr, lr, #1
	cmp lr, r3
	blt _020804C4
	pop {r4, pc}

	arm_func_start FUN_02080500
FUN_02080500: ; 0x02080500
	push {r3, r4, r5, lr}
	cmp r3, #0
	mov ip, #0
	pople {r3, r4, r5, pc}
	ldr lr, _02080558 ; =0x00003FFF
	lsl r4, r2, #2
	and r2, r2, lr
	lsl r2, r2, #0x10
	asr lr, r2, #0x10
	asr r5, r4, #0x10
	arm_func_end FUN_02080500
_02080528:
	ldr r2, [r0, ip, lsl #2]
	lsl r2, r2, #9
	asr r2, r2, #0x10
	mul r4, r5, r2
	mul r2, lr, r2
	add r2, r4, r2, asr #14
	lsl r2, r2, #7
	str r2, [r1, ip, lsl #2]
	add ip, ip, #1
	cmp ip, r3
	blt _02080528
	pop {r3, r4, r5, pc}
	.align 2, 0_02080558: .word 0x00003FFF

	arm_func_start FUN_0208055c
FUN_0208055c: ; 0x0208055C
	push {r3, r4, r5, r6, r7, lr}
	cmp r1, #0
	mov r5, #0xa
	mov r3, #0
	ble _02080598
	arm_func_end FUN_0208055c
_02080570:
	lsl r2, r3, #1
	ldrsh r2, [r0, r2]
	add r3, r3, #1
	cmp r2, #0
	rsblt r2, r2, #0
	cmp r2, r5
	lslgt r2, r2, #0x10
	asrgt r5, r2, #0x10
	cmp r3, r1
	blt _02080570
_02080598:
	ldr r2, _020806BC ; =0x00003FFF
	cmp r5, r2
	mov r2, #0
	ble _02080614
	mov r3, r2
	cmp r1, #0
	ble _020805FC
_020805B4:
	add r7, r0, r3, lsl #1
	ldrsh r4, [r7, #2]
	lsl r5, r3, #1
	ldrsh r5, [r0, r5]
	asr r4, r4, #1
	smulbb r4, r4, r4
	asr r5, r5, #1
	mla r6, r5, r5, r4
	ldrsh r5, [r7, #4]
	ldrsh r4, [r7, #6]
	add r3, r3, #4
	asr r5, r5, #1
	mla r6, r5, r5, r6
	asr r5, r4, #1
	mla r4, r5, r5, r6
	cmp r3, r1
	add r2, r2, r4, asr #6
	blt _020805B4
_020805FC:
	mov r0, r2
	bl FUN_0201f9bc
	bl FUN_020803e8
	lsl r0, r0, #0x14
	asr r0, r0, #0x10
	pop {r3, r4, r5, r6, r7, pc}
_02080614:
	mov r4, r2
	cmp r5, #0x2000
	movlt r4, #1
	cmp r5, #0x1000
	movlt r4, #2
	cmp r5, #0x800
	movlt r4, #3
	cmp r1, #0
	mov r3, #0
	ble _0208069C
_0208063C:
	add r7, r0, r3, lsl #1
	lsl r5, r3, #1
	ldrsh ip, [r0, r5]
	ldrsh r6, [r7, #2]
	ldrsh r5, [r7, #4]
	lsl ip, ip, r4
	lsl r6, r6, r4
	lsl ip, ip, #0x10
	lsl r5, r5, r4
	lsl lr, r5, #0x10
	ldrsh r5, [r7, #6]
	smulbb r6, r6, r6
	asr r7, ip, #0x10
	lsl r5, r5, r4
	lsl ip, r5, #0x10
	mla r5, r7, r7, r6
	asr lr, lr, #0x10
	add r3, r3, #4
	mla r5, lr, lr, r5
	asr lr, ip, #0x10
	mla ip, lr, lr, r5
	cmp r3, r1
	add r2, r2, ip, asr #6
	blt _0208063C
_0208069C:
	mov r0, r2
	bl FUN_0201f9bc
	bl FUN_020803e8
	rsb r1, r4, #3
	lsl r0, r0, r1
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_020806BC: .word 0x00003FFF

	arm_func_start FUN_020806c0
FUN_020806c0: ; 0x020806C0
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, [sp, #0x28]
	ldr r8, [sp, #0x30]
	str r4, [sp, #0x28]
	ldr r4, [sp, #0x2c]
	mov r7, #0
	str r4, [sp, #0x2c]
	ldr r4, [sp, #0x28]
	cmp r4, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r4, [sp, #0x2c]
	sub fp, r4, #1
	arm_func_end FUN_020806c0
_020806F0:
	lsl r5, r7, #1
	ldr r4, [r8]
	ldrsh r6, [r0, r5]
	add r4, r4, #0x1000
	ldr r5, _020807B0 ; =0x00007FFF
	add sb, r6, r4, asr #13
	cmp sb, r5
	movgt sb, r5
	bgt _02080720
	rsb r4, r5, #0
	cmp sb, r4
	movlt sb, r4
_02080720:
	lsl r4, sb, #0x10
	asr r4, r4, #0x10
	str r4, [sp]
	rsb r4, r4, #0
	lsl r5, r4, #0x10
	ldr r4, [sp, #0x2c]
	asr r5, r5, #0x10
	sub lr, r4, #1
	cmp lr, #0
	mov r4, #0
	ble _02080778
_0208074C:
	add sb, r8, r4, lsl #2
	ldr ip, [sb, #4]
	lsl sb, r4, #1
	ldrsh sl, [r1, sb]
	ldrsh sb, [r2, sb]
	mla sl, r6, sl, ip
	mla sb, r5, sb, sl
	str sb, [r8, r4, lsl #2]
	add r4, r4, #1
	cmp r4, lr
	blt _0208074C
_02080778:
	lsl sb, fp, #1
	ldrsh r4, [r2, sb]
	ldrsh sl, [r1, sb]
	lsl sb, r7, #1
	smulbb r4, r5, r4
	smlabb r4, r6, sl, r4
	str r4, [r8, fp, lsl #2]
	ldr r4, [sp]
	add r7, r7, #1
	strh r4, [r3, sb]
	ldr r4, [sp, #0x28]
	cmp r7, r4
	blt _020806F0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020807B0: .word 0x00007FFF

	arm_func_start FUN_020807b4
FUN_020807b4: ; 0x020807B4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr sl, [sp, #0x28]
	ldr sb, [sp, #0x2c]
	mov r8, #0
	cmp r3, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	sub r6, sl, #1
	arm_func_end FUN_020807b4
_020807D0:
	lsl r4, r8, #1
	ldr r5, [sb]
	ldrsh r4, [r0, r4]
	add r7, r5, #0x1000
	ldr r5, _02080870 ; =0x00007FFF
	add r7, r4, r7, asr #13
	cmp r7, r5
	movgt r7, r5
	bgt _02080800
	rsb r4, r5, #0
	cmp r7, r4
	movlt r7, r4
_02080800:
	lsl r4, r7, #0x10
	asr r5, r4, #0x10
	rsb r4, r5, #0
	lsl r4, r4, #0x10
	sub lr, sl, #1
	cmp lr, #0
	asr r7, r4, #0x10
	mov r4, #0
	ble _02080848
_02080824:
	lsl fp, r4, #1
	add ip, sb, r4, lsl #2
	ldr ip, [ip, #4]
	ldrsh fp, [r1, fp]
	mla fp, r7, fp, ip
	str fp, [sb, r4, lsl #2]
	add r4, r4, #1
	cmp r4, lr
	blt _02080824
_02080848:
	lsl r4, r6, #1
	ldrsh ip, [r1, r4]
	lsl r4, r8, #1
	add r8, r8, #1
	smulbb r7, r7, ip
	str r7, [sb, r6, lsl #2]
	strh r5, [r2, r4]
	cmp r8, r3
	blt _020807D0
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02080870: .word 0x00007FFF

	arm_func_start FUN_02080874
FUN_02080874: ; 0x02080874
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x10
	ldr r5, [sp, #0x34]
	ldr r6, [sp, #0x30]
	rsb r4, r5, #4
	and r4, r4, #3
	add r4, r5, r4
	add r5, r4, r6, lsl #2
	mov r8, r2
	mov r7, r3
	cmp r6, #0
	sub r4, r5, r6, lsl #2
	mov r3, #0
	ble _020808C0
	mov r2, r3
	arm_func_end FUN_02080874
_020808B0:
	str r2, [r4, r3, lsl #2]
	add r3, r3, #1
	cmp r3, r6
	blt _020808B0
_020808C0:
	ldr r2, [sp, #0x28]
	str r6, [sp]
	ldr r3, [sp, #0x2c]
	stmib sp, {r4, r5}
	bl FUN_020807b4
	cmp r6, #0
	mov r1, #0
	ble _020808F4
	mov r0, r1
_020808E4:
	str r0, [r4, r1, lsl #2]
	add r1, r1, #1
	cmp r1, r6
	blt _020808E4
_020808F4:
	ldr r1, [sp, #0x2c]
	ldr r0, [sp, #0x28]
	stm sp, {r1, r6}
	str r4, [sp, #8]
	mov r1, r8
	mov r2, r7
	mov r3, r0
	str r5, [sp, #0xc]
	bl FUN_020806c0
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02080920
FUN_02080920: ; 0x02080920
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x24
	ldr r7, [sp, #0x58]
	ldr r4, [sp, #0x4c]
	rsb r6, r7, #2
	asr r4, r4, #1
	str r4, [sp, #0x10]
	and r4, r6, #1
	add r6, r7, r4
	ldr r5, [sp, #0x48]
	ldr r4, [sp, #0x10]
	add r4, r4, r5, asr #1
	add r7, r6, r4, lsl #1
	asr r5, r5, #1
	rsb r6, r7, #2
	and r6, r6, #1
	add r6, r7, r6
	add r6, r6, r4, lsl #1
	str r5, [sp, #0xc]
	cmp r5, #0
	sub fp, r7, r4, lsl #1
	sub r5, r6, r4, lsl #1
	ldr r4, [sp, #0x50]
	str r4, [sp, #0x50]
	ldr r4, [sp, #0x54]
	str r4, [sp, #0x54]
	mov r4, #0
	ble _020809BC
	ldr r6, [sp, #0xc]
	sub r8, r6, #1
	arm_func_end FUN_02080920
_02080998:
	sub r6, r8, r4
	lsl r6, r6, #1
	ldrsh r7, [r0, r6]
	lsl r6, r4, #1
	add r4, r4, #1
	strh r7, [fp, r6]
	ldr r6, [sp, #0xc]
	cmp r4, r6
	blt _02080998
_020809BC:
	ldr r0, [sp, #0x10]
	mov r8, #0
	cmp r0, #0
	ble _020809F8
	ldr r0, [sp, #0xc]
	add r4, fp, r0, lsl #1
_020809D4:
	ldr r0, [sp, #0x50]
	lsl r7, r8, #1
	add r0, r0, r7, lsl #1
	ldrsh r6, [r0, #2]
	ldr r0, [sp, #0x10]
	add r8, r8, #1
	cmp r8, r0
	strh r6, [r7, r4]
	blt _020809D4
_020809F8:
	ldr r0, [sp, #0xc]
	mov r7, #0
	cmp r0, #0
	ble _02080A30
	sub r6, r0, #1
_02080A0C:
	sub r0, r6, r7
	lsl r0, r0, #1
	ldrsh r4, [r1, r0]
	lsl r0, r7, #1
	add r7, r7, #1
	strh r4, [r5, r0]
	ldr r0, [sp, #0xc]
	cmp r7, r0
	blt _02080A0C
_02080A30:
	ldr r0, [sp, #0x10]
	mov r7, #0
	cmp r0, #0
	ble _02080A6C
	ldr r0, [sp, #0xc]
	add r1, r5, r0, lsl #1
_02080A48:
	ldr r0, [sp, #0x54]
	lsl r6, r7, #1
	add r0, r0, r6, lsl #1
	ldrsh r4, [r0, #2]
	ldr r0, [sp, #0x10]
	add r7, r7, #1
	cmp r7, r0
	strh r4, [r6, r1]
	blt _02080A48
_02080A6C:
	ldr r0, [sp, #0xc]
	mov r8, #0
	cmp r0, #0
	ble _02080C7C
_02080A7C:
	ldr r0, [sp, #0xc]
	sub r0, r0, #2
	sub r1, r0, r8
	mov r0, #0
	lsl r4, r1, #1
	str r0, [sp, #8]
	str r0, [sp, #4]
	str r0, [sp]
	mov r1, r0
	ldr r0, [sp, #0x10]
	ldrsh r6, [fp, r4]
	ldrsh r7, [r5, r4]
	cmp r0, #0
	ldr r4, [sp, #8]
	ble _02080BAC
	ldr r0, [sp, #0xc]
	sub r0, r0, #1
	str r0, [sp, #0x18]
_02080AC4:
	lsl sb, r4, #1
	lsl r0, sb, #1
	ldrsh sl, [r2, r0]
	add r0, r2, sb, lsl #1
	ldr sb, [sp, #0x18]
	str r0, [sp, #0x14]
	add sb, sb, r4
	sub sb, sb, r8
	lsl sb, sb, #1
	ldrsh ip, [fp, sb]
	ldrsh lr, [r5, sb]
	rsb sb, sl, #0
	mla r1, sl, ip, r1
	lsl sb, sb, #0x10
	asr sb, sb, #0x10
	mla r1, sb, lr, r1
	str r1, [sp, #0x1c]
	ldr r1, [sp, #4]
	ldrsh r0, [r0, #2]
	mla r1, sl, r6, r1
	mla r1, sb, r7, r1
	ldr sb, [sp]
	ldr sl, [sp, #0x1c]
	mla sb, r0, ip, sb
	mla sb, r0, lr, sb
	str sb, [sp, #0x20]
	ldr sb, [sp, #8]
	mla r6, r0, r6, sb
	mla r6, r0, r7, r6
	ldr r7, [sp, #0x14]
	ldr r0, [sp, #0x14]
	ldrsh sb, [r7, #6]
	ldr r7, [sp, #0xc]
	ldrsh r0, [r0, #4]
	add r7, r7, r4
	mla r6, sb, ip, r6
	mla r6, sb, lr, r6
	sub r7, r7, r8
	mla r1, r0, ip, r1
	lsl r7, r7, #1
	str r6, [sp, #8]
	ldrsh r6, [fp, r7]
	rsb ip, r0, #0
	ldrsh r7, [r5, r7]
	mla sl, r0, r6, sl
	lsl r0, ip, #0x10
	asr r0, r0, #0x10
	mla r1, r0, lr, r1
	str r1, [sp, #4]
	mla r1, r0, r7, sl
	ldr r0, [sp, #0x20]
	add r4, r4, #2
	mla r0, sb, r6, r0
	mla r0, sb, r7, r0
	str r0, [sp]
	ldr r0, [sp, #0x10]
	cmp r4, r0
	blt _02080AC4
_02080BAC:
	add r0, r1, #0x4000
	ldr r4, _02080CF0 ; =0x00007FFF
	asr r6, r0, #0xf
	cmp r4, r0, asr #15
	movlt r6, r4
	blt _02080BD0
	rsb r0, r4, #0
	cmp r6, r0
	movlt r6, r0
_02080BD0:
	ldr r1, [sp]
	lsl r0, r8, #1
	add r4, r1, #0x4000
	lsl r1, r0, #1
	strh r6, [r3, r1]
	ldr r6, _02080CF0 ; =0x00007FFF
	asr r1, r4, #0xf
	cmp r6, r4, asr #15
	movlt r1, r6
	blt _02080C04
	rsb r4, r6, #0
	cmp r1, r4
	movlt r1, r4
_02080C04:
	ldr r4, [sp, #4]
	ldr r6, _02080CF0 ; =0x00007FFF
	add r4, r4, #0x4000
	cmp r6, r4, asr #15
	asr r4, r4, #0xf
	add r7, r3, r0, lsl #1
	strh r1, [r7, #2]
	movlt r4, r6
	blt _02080C34
	rsb r1, r6, #0
	cmp r4, r1
	movlt r4, r1
_02080C34:
	ldr r1, [sp, #8]
	add r7, r3, r0, lsl #1
	ldr r6, _02080CF0 ; =0x00007FFF
	add r1, r1, #0x4000
	strh r4, [r7, #4]
	asr r4, r1, #0xf
	cmp r6, r1, asr #15
	movlt r4, r6
	blt _02080C64
	rsb r1, r6, #0
	cmp r4, r1
	movlt r4, r1
_02080C64:
	add r0, r3, r0, lsl #1
	strh r4, [r0, #6]
	ldr r0, [sp, #0xc]
	add r8, r8, #2
	cmp r8, r0
	blt _02080A7C
_02080C7C:
	ldr r0, [sp, #0x10]
	mov r3, #0
	cmp r0, #0
	ble _02080CB0
_02080C8C:
	lsl r2, r3, #1
	ldr r0, [sp, #0x50]
	ldrsh r1, [fp, r2]
	add r0, r0, r2, lsl #1
	add r3, r3, #1
	strh r1, [r0, #2]
	ldr r0, [sp, #0x10]
	cmp r3, r0
	blt _02080C8C
_02080CB0:
	ldr r0, [sp, #0x10]
	mov r3, #0
	cmp r0, #0
	addle sp, sp, #0x24
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02080CC4:
	lsl r2, r3, #1
	ldr r0, [sp, #0x54]
	ldrsh r1, [r5, r2]
	add r0, r0, r2, lsl #1
	add r3, r3, #1
	strh r1, [r0, #2]
	ldr r0, [sp, #0x10]
	cmp r3, r0
	blt _02080CC4
	add sp, sp, #0x24
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02080CF0: .word 0x00007FFF

	arm_func_start FUN_02080cf4
FUN_02080cf4: ; 0x02080CF4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x80
	str r1, [sp, #4]
	str r0, [sp]
	mov r1, r0
	mov r0, r2
	sub r0, r1, r0, lsl #1
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	mov r6, #0
	sub r5, r0, #6
	add r4, sp, #0x10
	arm_func_end FUN_02080cf4
_02080D24:
	ldr r0, [sp]
	ldr r2, [sp, #0xc]
	add r1, r5, r6, lsl #1
	bl FUN_020819f0
	str r0, [r4, r6, lsl #2]
	add r6, r6, #1
	cmp r6, #7
	blt _02080D24
	mov r2, #0
	mov fp, r2
_02080D4C:
	ldr r4, _02080EF0 ; =0x0208D2C4
	mov r0, #0xe
	add r3, sp, #0x10
	mov r1, #0x1c
	mla r6, fp, r0, r4
	mla r7, fp, r1, r3
	ldr r8, _02080EF4 ; =0x00007FFF
	mov ip, #0
_02080D6C:
	rsbs lr, ip, #3
	rsb r4, ip, #0xa
	movmi lr, r2
	cmp r4, #7
	movgt r4, #7
	mov r5, r2
	cmp lr, r4
	bge _02080DC4
	add r1, r3, ip, lsl #2
_02080D90:
	add r0, r1, lr, lsl #2
	ldr sb, [r0, #-0xc]
	lsl r0, lr, #1
	ldrsh r0, [r6, r0]
	asr sl, sb, #0xf
	and sb, sb, r8
	smulbb sl, r0, sl
	smulbb r0, r0, sb
	add r0, sl, r0, asr #15
	add r5, r5, r0
	add lr, lr, #1
	cmp lr, r4
	blt _02080D90
_02080DC4:
	add r0, r7, ip, lsl #2
	str r5, [r0, #0x1c]
	add ip, ip, #1
	cmp ip, #7
	blt _02080D6C
	add fp, fp, #1
	cmp fp, #3
	mov r5, #0
	blt _02080D4C
	mov r2, r5
	ldr r6, [sp, #0x10]
	mov r1, r2
	mov r8, r2
	add r4, sp, #0x10
	mov r0, #0x1c
_02080E00:
	mla r7, r8, r0, r4
	mov sb, r5
_02080E08:
	ldr r3, [r7, sb, lsl #2]
	cmp r3, r6
	movgt r2, sb
	add sb, sb, #1
	movgt r6, r3
	movgt r1, r8
	cmp sb, #7
	blt _02080E08
	add r8, r8, #1
	cmp r8, #4
	blt _02080E00
	ldr r0, [sp, #0xc]
	cmp r0, #0
	mov r0, #0
	mov r7, r0
	ble _02080EDC
	ldr r4, _02080EF0 ; =0x0208D2C4
	sub r5, r1, #1
	mov r3, #0xe
	mla r4, r5, r3, r4
	ldr r3, [sp, #8]
	sub r3, r3, r2
	add r5, r3, #6
	add r6, r3, #3
_02080E68:
	mov r3, r0
	cmp r1, #0
	ble _02080EA4
	ldr sb, [sp]
	sub sl, r7, r5
	mov r8, r0
	add fp, sb, sl, lsl #1
_02080E84:
	lsl sb, r8, #1
	ldrsh sl, [sb, fp]
	ldrsh sb, [r4, sb]
	add r8, r8, #1
	smlabb r3, sl, sb, r3
	cmp r8, #7
	blt _02080E84
	b _02080EB8
_02080EA4:
	sub r3, r7, r6
	lsl r8, r3, #1
	ldr r3, [sp]
	ldrsh r3, [r3, r8]
	lsl r3, r3, #0xf
_02080EB8:
	add r3, r3, #0x4000
	asr sb, r3, #0xf
	lsl r8, r7, #1
	ldr r3, [sp, #4]
	add r7, r7, #1
	strh sb, [r3, r8]
	ldr r3, [sp, #0xc]
	cmp r7, r3
	blt _02080E68
_02080EDC:
	ldr r0, [sp, #8]
	sub r0, r0, r2
	add r0, r0, #3
	add sp, sp, #0x80
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02080EF0: .word 0x0208D2C4
_02080EF4: .word 0x00007FFF

	arm_func_start FUN_02080ef8
FUN_02080ef8: ; 0x02080EF8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	ldr r3, [sp, #0x50]
	ldr r8, [sp, #0x40]
	rsb r2, r3, #2
	and r2, r2, #1
	add r2, r3, r2
	lsl r6, r8, #1
	add r2, r2, r6, lsl #1
	mov r5, #0x50
	mov fp, #0
	ldr r7, [sp, #0x44]
	sub r4, r2, r6, lsl #1
	mov sb, r1
	mov r1, r4
	mov r2, r7
	mov r3, r5
	mov sl, r0
	str fp, [sp, #0xc]
	bl FUN_02080cf4
	ldr r0, [sp, #0x48]
	mov r3, r5
	cmp r7, r0
	mov r0, sl
	add r1, r4, r8, lsl #1
	ble _02080F68
	lsl r2, r7, #1
	b _02080F6C
	arm_func_end FUN_02080ef8
_02080F68:
	rsb r2, r7, #0
_02080F6C:
	bl FUN_02080cf4
	cmp r8, #0
	mov r2, #0
	ble _02080FAC
	ldr r0, _02081418 ; =0x00003FFF
_02080F80:
	lsl r1, r2, #1
	ldrsh r1, [sl, r1]
	cmp r1, #0
	rsblt r1, r1, #0
	cmp r1, r0
	movgt r0, #1
	strgt r0, [sp, #0xc]
	bgt _02080FAC
	add r2, r2, #1
	cmp r2, r8
	blt _02080F80
_02080FAC:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	beq _02081014
	cmp r8, #0
	mov r2, #0
	ble _02080FEC
_02080FC4:
	lsl r1, r2, #1
	ldrsh r0, [sl, r1]
	add r2, r2, #1
	cmp r2, r8
	asr r0, r0, #1
	strh r0, [sl, r1]
	ldrsh r0, [r4, r1]
	asr r0, r0, #1
	strh r0, [r4, r1]
	blt _02080FC4
_02080FEC:
	mov r2, r8
	cmp r8, r6
	bge _02081014
_02080FF8:
	lsl r1, r2, #1
	ldrsh r0, [r4, r1]
	add r2, r2, #1
	cmp r2, r6
	asr r0, r0, #1
	strh r0, [r4, r1]
	blt _02080FF8
_02081014:
	mov r0, r4
	mov r1, r4
	mov r2, r8
	bl FUN_020819f0
	add r0, r0, #0x3e8
	bl FUN_020803e8
	add r1, r4, r8, lsl #1
	mov fp, r0
	mov r0, r1
	mov r2, r8
	str r1, [sp, #8]
	bl FUN_020819f0
	add r0, r0, #0x3e8
	bl FUN_020803e8
	mov r5, r0
	mov r0, sl
	mov r1, sl
	mov r2, r8
	bl FUN_020819f0
	add r0, r0, #1
	bl FUN_020803e8
	mov r6, r0
	mov r0, r4
	mov r1, sl
	mov r2, r8
	bl FUN_020819f0
	str r0, [sp, #0x18]
	cmp r0, #0
	movlt r0, #0
	strlt r0, [sp, #0x18]
	ldr r0, [sp, #8]
	mov r1, sl
	mov r2, r8
	bl FUN_020819f0
	str r0, [sp, #0x14]
	cmp r0, #0
	movlt r0, #0
	strlt r0, [sp, #0x14]
	cmp r6, fp, lsl #6
	ble _020810CC
	add r0, r6, #0x20
	lsl r0, r0, #0xa
	asr r0, r0, #0x10
	add r0, r0, #1
	lsl r0, r0, #0x10
	asr fp, r0, #0x10
_020810CC:
	cmp r6, r5, lsl #6
	ble _020810EC
	add r0, r6, #0x20
	lsl r0, r0, #0xa
	asr r0, r0, #0x10
	add r0, r0, #1
	lsl r0, r0, #0x10
	asr r5, r0, #0x10
_020810EC:
	mul r1, fp, r6
	ldr r0, [sp, #0x18]
	cmp r0, r1
	movgt r0, #0x4000
	strgt r0, [sp, #4]
	bgt _0208112C
	mov r1, r6
	add r0, r0, r6, asr #1
	bl FUN_0201f9bc
	lsl r0, r0, #0xe
	mov r1, fp
	add r0, r0, fp, asr #1
	bl FUN_0201f9bc
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp, #4]
_0208112C:
	mul r1, r5, r6
	ldr r0, [sp, #0x14]
	cmp r0, r1
	movgt r0, #0x4000
	strgt r0, [sp]
	bgt _0208116C
	mov r1, r6
	add r0, r0, r6, asr #1
	bl FUN_0201f9bc
	lsl r0, r0, #0xe
	mov r1, r5
	add r0, r0, r5, asr #1
	bl FUN_0201f9bc
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp]
_0208116C:
	asr r0, fp, #1
	mov r1, fp
	add r0, r0, r6, lsl #8
	bl FUN_0201f9bc
	lsl r2, r0, #0x10
	asr r0, r5, #1
	asr r2, r2, #0x10
	add r0, r0, r6, lsl #8
	mov r1, r5
	str r2, [sp, #0x10]
	bl FUN_0201f9bc
	ldrsh r2, [sp, #0x4c]
	lsl r0, r0, #0x10
	asr fp, r0, #0x10
	cmp r2, #0
	movle r3, #0
	movle r5, r3
	ble _020811F0
	ldr r0, _0208141C ; =0x00003333
	ldr r1, _02081420 ; =0xFFFFF70A
	smulbb r0, r2, r0
	asr r0, r0, #0xf
	add r0, r0, #0xf6
	add r0, r0, #0x800
	lsl r0, r0, #0x10
	ldr r2, _02081424 ; =0x00006E14
	add r1, r1, r0, asr #16
	smulbb r1, r1, r2
	asr r1, r1, #0xe
	add r1, r1, #0x4000
	lsl r1, r1, #0x10
	asr r5, r0, #0x10
	asr r3, r1, #0x10
_020811F0:
	ldr r0, [sp, #4]
	mul r2, r3, r0
	ldr r0, [sp]
	mul r1, r3, r0
	lsl r0, r2, #1
	asr r3, r0, #0x10
	ldr r0, [sp, #4]
	lsl r1, r1, #1
	mul r3, r0, r3
	asr r2, r1, #0x10
	ldr r0, [sp]
	ldr r1, _02081428 ; =0x00007FFF
	mul r2, r0, r2
	sub r0, r1, r3, asr #13
	lsl r0, r0, #0x10
	sub r1, r1, r2, asr #13
	lsl r2, r1, #0x10
	asr r1, r0, #0x10
	cmp r5, r0, asr #16
	movgt r1, r5
	asr r6, r2, #0x10
	asr r0, r1, #1
	cmp r6, r5
	movlt r6, r5
	add r0, r0, r5, lsl #14
	bl FUN_0201f9bc
	lsl r2, r0, #0x10
	asr r0, r6, #1
	add r0, r0, r5, lsl #14
	mov r1, r6
	asr r5, r2, #0x10
	bl FUN_0201f9bc
	ldr r1, [sp, #0x48]
	lsl r0, r0, #0x10
	cmp r7, r1
	asr r3, r0, #0x10
	ble _020812BC
	ldr r0, [sp, #0x10]
	smulbb r2, r3, fp
	smulbb r1, r5, r0
	ldr r0, _0208142C ; =0x0000599A
	asr r1, r1, #0xe
	smulbb r1, r1, r0
	asr r2, r2, #0xe
	rsb r0, r0, #0x8000
	smulbb r0, r2, r0
	lsl r1, r1, #1
	lsl r0, r0, #1
	asr r2, r1, #0x10
	asr r1, r0, #0x10
	b _020812EC
_020812BC:
	ldr r0, [sp, #0x10]
	smulbb r1, r3, fp
	smulbb r2, r5, r0
	ldr r0, _02081430 ; =0x00004CCD
	asr r2, r2, #0xe
	asr r1, r1, #0xe
	smulbb r1, r1, r0
	smulbb r2, r2, r0
	lsl r0, r2, #1
	lsl r1, r1, #1
	asr r2, r0, #0x10
	asr r1, r1, #0x10
_020812EC:
	cmp r8, #0
	mov r3, #0
	ble _02081330
	add r6, r4, r8, lsl #1
_020812FC:
	lsl r0, r3, #1
	ldrsh r5, [r0, r6]
	add r3, r3, #1
	ldrsh r7, [r4, r0]
	mul r5, r1, r5
	mla r5, r2, r7, r5
	add r5, r5, #0x80
	ldrsh r7, [sl, r0]
	lsl r5, r5, #8
	cmp r3, r8
	add r5, r7, r5, asr #16
	strh r5, [sb, r0]
	blt _020812FC
_02081330:
	mov r0, sb
	mov r1, r8
	bl FUN_0208055c
	mov r4, r0
	mov r0, sl
	mov r1, r8
	bl FUN_0208055c
	cmp r0, #1
	movlt r0, #1
	cmp r4, #1
	movlt r4, #1
	cmp r0, r4
	movgt r0, r4
	asr r2, r4, #1
	mov r1, r4
	add r0, r2, r0, lsl #14
	bl FUN_0201f9bc
	lsl r0, r0, #0x10
	cmp r8, #0
	asr r2, r0, #0x10
	mov r3, #0
	ble _020813A8
_02081388:
	lsl r1, r3, #1
	ldrsh r0, [sb, r1]
	add r3, r3, #1
	cmp r3, r8
	mul r0, r2, r0
	asr r0, r0, #0xe
	strh r0, [sb, r1]
	blt _02081388
_020813A8:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	addeq sp, sp, #0x1c
	popeq {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	cmp r8, #0
	mov r4, #0
	addle sp, sp, #0x1c
	pople {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r2, _02081434 ; =0xFFFFC001
	lsr r3, r2, #0x12
_020813D0:
	lsl r1, r4, #1
	ldrsh r0, [sl, r1]
	lsl r0, r0, #1
	strh r0, [sl, r1]
	ldrsh r1, [sb, r1]
	cmp r1, r2, lsr #18
	movgt r1, r3
	bgt _020813F8
	cmp r1, r2
	movlt r1, r2
_020813F8:
	lsl r0, r4, #1
	lsl r1, r1, #1
	add r4, r4, #1
	strh r1, [sb, r0]
	cmp r4, r8
	blt _020813D0
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02081418: .word 0x00003FFF
_0208141C: .word 0x00003333
_02081420: .word 0xFFFFF70A
_02081424: .word 0x00006E14
_02081428: .word 0x00007FFF
_0208142C: .word 0x0000599A
_02081430: .word 0x00004CCD
_02081434: .word 0xFFFFC001

	arm_func_start FUN_02081438
FUN_02081438: ; 0x02081438
	ldr r1, _020814F4 ; =0x00003244
	cmp r0, r1
	bge _02081498
	mul r1, r0, r0
	add r0, r1, #0x1000
	asr r2, r0, #0xd
	lsl r0, r2, #0x10
	asr r1, r0, #0x10
	mvn r0, #9
	mul r0, r1, r0
	add r0, r0, #0x1000
	asr r0, r0, #0xd
	add r0, r0, #0x154
	smulbb r0, r2, r0
	add r0, r0, #0x1000
	asr r0, r0, #0xd
	sub r0, r0, #0x1000
	smulbb r0, r2, r0
	add r0, r0, #0x1000
	asr r0, r0, #0xd
	add r0, r0, #0x2000
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	bx lr
	arm_func_end FUN_02081438
_02081498:
	rsb r0, r0, r1, lsl #1
	smulbb r0, r0, r0
	add r0, r0, #0x1000
	asr r2, r0, #0xd
	lsl r0, r2, #0x10
	asr r1, r0, #0x10
	mvn r0, #9
	mul r0, r1, r0
	add r0, r0, #0x1000
	asr r0, r0, #0xd
	add r0, r0, #0x154
	smulbb r0, r2, r0
	add r0, r0, #0x1000
	asr r0, r0, #0xd
	sub r0, r0, #0x1000
	smulbb r1, r2, r0
	mov r0, #0x2000
	add r1, r1, #0x1000
	rsb r0, r0, #0
	sub r0, r0, r1, asr #13
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	bx lr
	.align 2, 0_020814F4: .word 0x00003244

	arm_func_start FUN_020814f8
FUN_020814f8: ; 0x020814F8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x1c
	str r2, [sp, #4]
	asrs r2, r2, #1
	str r2, [sp, #8]
	rsb r2, r3, #4
	and r4, r2, #3
	ldr r2, [sp, #8]
	mov r7, r0
	add sb, r2, #1
	ldr r2, [sp, #4]
	str r1, [sp]
	add r6, r2, #3
	add r2, r3, r4
	add r4, r2, sb, lsl #2
	rsb r2, r4, #4
	and r2, r2, #3
	add r2, r4, r2
	mul r8, sb, r6
	add r5, r2, r8, lsl #2
	rsb r2, r5, #4
	and r2, r2, #3
	add r2, r5, r2
	add r2, r2, sb, lsl #2
	rsb r3, r2, #4
	and r3, r3, #3
	add r3, r2, r3
	sub r0, r5, r8, lsl #2
	add r3, r3, r8, lsl #2
	sub r4, r4, sb, lsl #2
	sub r5, r2, sb, lsl #2
	sub sb, r3, r8, lsl #2
	mov r8, #0
	bmi _020815A4
	arm_func_end FUN_020814f8
_02081580:
	mul r2, r8, r6
	add r1, r0, r2, lsl #2
	str r1, [r4, r8, lsl #2]
	add r1, sb, r2, lsl #2
	str r1, [r5, r8, lsl #2]
	ldr r1, [sp, #8]
	add r8, r8, #1
	cmp r8, r1
	ble _02081580
_020815A4:
	rsb r0, r3, #2
	and r0, r0, #1
	add r1, r3, r0
	ldr r0, [sp, #4]
	mov r8, #0
	add r1, r1, r0, lsl #1
	cmp r0, #0
	sub r6, r1, r0, lsl #1
	ble _020815F0
_020815C8:
	lsl r0, r8, #1
	ldrsh r0, [r7, r0]
	bl FUN_02081438
	lsl r1, r8, #1
	lsl r0, r0, #2
	strh r0, [r6, r1]
	ldr r0, [sp, #4]
	add r8, r8, #1
	cmp r8, r0
	blt _020815C8
_020815F0:
	ldr r0, [sp, #8]
	mov r1, #0
	cmp r0, #0
	mov r2, r1
	blt _02081654
	mov r0, #0x100000
_02081608:
	ldr r3, [r4, r2, lsl #2]
	lsl r7, r2, #1
	str r1, [r3, #4]
	ldr r3, [r4, r2, lsl #2]
	str r0, [r3, #8]
	ldr r3, [r4, r2, lsl #2]
	add r3, r3, r7, lsl #2
	str r0, [r3, #8]
	ldr r3, [r5, r2, lsl #2]
	str r1, [r3, #4]
	ldr r3, [r5, r2, lsl #2]
	str r0, [r3, #8]
	ldr r3, [r5, r2, lsl #2]
	add r2, r2, #1
	add r3, r3, r7, lsl #2
	str r0, [r3, #8]
	ldr r3, [sp, #8]
	cmp r2, r3
	ble _02081608
_02081654:
	ldr r1, [r4]
	mov r0, #0
	str r0, [sp, #0xc]
	ldr r1, [r1, #8]
	ldr r0, _020818C8 ; =0x00003FFF
	asr r2, r1, #0xe
	ldrsh r3, [r6]
	and r1, r1, r0
	smulbb r2, r3, r2
	smulbb r1, r3, r1
	add r2, r2, r1, asr #14
	ldr r1, [r4, #4]
	rsb r2, r2, #0
	str r2, [r1, #0xc]
	ldr r1, [r5]
	ldrsh r3, [r6, #2]
	ldr r7, [r1, #8]
	ldr r1, [r5, #4]
	asr r2, r7, #0xe
	and r0, r7, r0
	smulbb r2, r3, r2
	smulbb r0, r3, r0
	add r0, r2, r0, asr #14
	rsb r2, r0, #0
	ldr r0, [sp, #0xc]
	str r2, [r1, #0xc]
	str r0, [sp, #0x10]
	ldr r0, [sp, #8]
	mov r3, #1
	cmp r0, #1
	ble _02081838
_020816D0:
	add r0, r3, #1
	lsl r0, r0, #1
	sub r2, r0, #1
	cmp r2, #1
	mov r1, #1
	ble _020817A0
	lsl r7, r3, #1
	lsl r0, r7, #1
	add r7, r6, r7, lsl #1
	str r7, [sp, #0x18]
	add r7, r5, r3, lsl #2
	add fp, r4, r3, lsl #2
	str r7, [sp, #0x14]
_02081704:
	ldr r7, [r4, r3, lsl #2]
	ldrsh sl, [r6, r0]
	add r8, r7, r1, lsl #2
	ldr lr, [r8, #4]
	ldr ip, _020818C8 ; =0x00003FFF
	asr sb, lr, #0xe
	and ip, lr, ip
	smulbb sb, sl, sb
	smulbb sl, sl, ip
	ldr r8, [r8, #8]
	add sb, sb, sl, asr #14
	ldr r7, [r7, r1, lsl #2]
	sub r8, r8, sb
	add r8, r8, r7
	ldr r7, [fp, #4]
	ldr ip, _020818C8 ; =0x00003FFF
	add r7, r7, r1, lsl #2
	str r8, [r7, #8]
	ldr r8, [r5, r3, lsl #2]
	ldr r7, [sp, #0x18]
	ldr lr, [r8, r1, lsl #2]
	ldrsh sb, [r7, #2]
	add r7, r8, r1, lsl #2
	ldr sl, [r7, #4]
	ldr r8, [r7, #8]
	asr r7, sl, #0xe
	and sl, sl, ip
	smulbb r7, sb, r7
	smulbb sb, sb, sl
	add r7, r7, sb, asr #14
	sub r7, r8, r7
	add r8, r7, lr
	ldr r7, [sp, #0x14]
	ldr r7, [r7, #4]
	add r7, r7, r1, lsl #2
	add r1, r1, #1
	str r8, [r7, #8]
	cmp r1, r2
	blt _02081704
_020817A0:
	ldr sb, [r4, r3, lsl #2]
	lsl r8, r3, #1
	add r2, sb, r1, lsl #2
	ldr fp, [sb, r1, lsl #2]
	lsl r0, r8, #1
	ldr r7, [r2, #4]
	ldrsh r2, [r6, r0]
	add sb, r6, r8, lsl #1
	asr r0, r7, #0xe
	ldr r8, _020818C8 ; =0x00003FFF
	smulbb r0, r2, r0
	and r7, r7, r8
	smulbb r2, r2, r7
	add r0, r0, r2, asr #14
	add sl, r4, r3, lsl #2
	ldr r2, [sl, #4]
	sub r7, fp, r0
	add r2, r2, r1, lsl #2
	str r7, [r2, #8]
	add r0, r5, r3, lsl #2
	ldr sl, [r5, r3, lsl #2]
	ldr r7, [r0, #4]
	add r0, sl, r1, lsl #2
	ldrsh r2, [sb, #2]
	ldr sb, [r0, #4]
	ldr r0, [sl, r1, lsl #2]
	add r1, r7, r1, lsl #2
	and r7, sb, r8
	asr r8, sb, #0xe
	smulbb r8, r2, r8
	smulbb r2, r2, r7
	add r2, r8, r2, asr #14
	sub r0, r0, r2
	str r0, [r1, #8]
	ldr r0, [sp, #8]
	add r3, r3, #1
	cmp r3, r0
	blt _020816D0
_02081838:
	ldr r0, [sp, #4]
	cmp r0, #1
	addlt sp, sp, #0x1c
	mov r0, #1
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r3, _020818CC ; =0xFFFF8001
	lsr r2, r3, #0x11
_02081854:
	ldr r1, [sp, #8]
	ldr r6, [r4, r1, lsl #2]
	ldr r7, [r5, r1, lsl #2]
	add r1, r6, r0, lsl #2
	add r6, r7, r0, lsl #2
	ldr r7, [r1, #8]
	ldr r1, [sp, #0x10]
	ldr r8, [r6, #8]
	add r1, r1, r7
	add r6, r1, r8
	ldr r1, [sp, #0xc]
	str r7, [sp, #0x10]
	sub r1, r6, r1
	add r1, r1, #0x80
	cmp r3, r1, asr #8
	asr r6, r1, #8
	ldr r1, [sp]
	movgt r6, r3
	cmp r6, r3, lsr #17
	add r1, r1, r0, lsl #1
	movgt r6, r2
	strh r6, [r1, #-2]
	ldr r1, [sp, #4]
	add r0, r0, #1
	str r8, [sp, #0xc]
	cmp r0, r1
	ble _02081854
	add sp, sp, #0x1c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_020818C8: .word 0x00003FFF
_020818CC: .word 0xFFFF8001

	arm_func_start FUN_020818d0
FUN_020818d0: ; 0x020818D0
	push {r4, lr}
	ldr r3, _02081964 ; =0x00006488
	ldrsh r4, [r0]
	sub r3, r3, r2
	lsl r3, r3, #0x10
	asr ip, r3, #0x10
	sub r3, r1, #1
	cmp r4, r2
	strhlt r2, [r0]
	lsl r4, r3, #1
	ldrsh r3, [r0, r4]
	sub r1, r1, #1
	cmp r3, ip
	strhgt ip, [r0, r4]
	cmp r1, #1
	mov r3, #1
	pople {r4, pc}
	arm_func_end FUN_020818d0
_02081914:
	add r4, r0, r3, lsl #1
	ldrsh ip, [r4, #-2]
	lsl lr, r3, #1
	ldrsh r4, [r0, lr]
	add ip, r2, ip
	cmp r4, ip
	strhlt ip, [r0, lr]
	add ip, r0, r3, lsl #1
	lsl r4, r3, #1
	ldrsh ip, [ip, #2]
	ldrsh lr, [r0, r4]
	add r3, r3, #1
	sub ip, ip, r2
	cmp lr, ip
	asrgt ip, ip, #1
	addgt ip, ip, lr, asr #1
	strhgt ip, [r0, r4]
	cmp r3, r1
	blt _02081914
	pop {r4, pc}
	.align 2, 0_02081964: .word 0x00006488

	arm_func_start FUN_02081968
FUN_02081968: ; 0x02081968
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, [sp, #0x18]
	ldr r4, [sp, #0x1c]
	add r5, r5, #1
	mov r7, r0
	lsl r0, r5, #0xe
	lsl r4, r4, #0x10
	mov r6, r1
	asr r1, r4, #0x10
	mov r5, r2
	mov r4, r3
	bl FUN_0201f9bc
	lsl r0, r0, #0x10
	asr r1, r0, #0x10
	rsb r0, r1, #0x4000
	lsl r0, r0, #0x10
	asr r2, r0, #0x10
	cmp r4, #0
	mov r0, #0
	pople {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_02081968
_020819B8:
	lsl lr, r0, #1
	ldrsh r3, [r6, lr]
	ldrsh ip, [r7, lr]
	add r0, r0, #1
	mul r3, r1, r3
	mul ip, r2, ip
	add r3, r3, #0x2000
	add ip, ip, #0x2000
	asr r3, r3, #0xe
	add r3, r3, ip, asr #14
	strh r3, [r5, lr]
	cmp r0, r4
	blt _020819B8
	pop {r3, r4, r5, r6, r7, pc}

	arm_func_start FUN_020819f0
FUN_020819f0: ; 0x020819F0
	push {r4, r5, r6, r7, r8, lr}
	asrs r2, r2, #2
	sub r2, r2, #1
	mov r3, #0
	beq _02081A4C
	arm_func_end FUN_020819f0
_02081A04:
	ldrsh r5, [r0, #2]
	ldrsh r4, [r1, #2]
	ldrsh r8, [r0]
	ldrsh r7, [r1]
	smulbb lr, r5, r4
	smlabb r7, r8, r7, lr
	ldrsh r5, [r1, #4]
	ldrsh r6, [r0, #4]
	ldrsh lr, [r0, #6]
	ldrsh ip, [r1, #6]
	smlabb r4, r6, r5, r7
	smlabb ip, lr, ip, r4
	cmp r2, #0
	add r1, r1, #8
	add r0, r0, #8
	add r3, r3, ip, asr #6
	sub r2, r2, #1
	bne _02081A04
_02081A4C:
	mov r0, r3
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02081a54
FUN_02081a54: ; 0x02081A54
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0xc
	ldr r3, [sp, #0x34]
	ldr ip, [sp, #0x44]
	ldr r5, [r3, #4]
	mov r4, #1
	lsl r5, r4, r5
	ldr fp, [ip, #0xc]
	mov r7, r0
	and r6, fp, #0x1f
	lsl r0, r5, #2
	ldr r4, [ip, #4]
	ldr sl, [r3]
	ldr sb, [sp, #0x58]
	ldr r8, [r3, #8]
	mla r0, sb, r0, sl
	ldr sb, [r4]
	rsb lr, r6, #0x20
	str r6, [sp]
	mov r6, r1
	add r1, fp, r8
	str r1, [ip, #0xc]
	cmp lr, r8
	ldrgt r1, [sp]
	ldr r5, [sp, #0x38]
	lslgt sb, sb, r1
	rsbgt r1, r8, #0x20
	ldr r4, [sp, #0x40]
	lsrgt r8, sb, r1
	bgt _02081AFC
	ldr sl, [ip, #4]
	mov r1, #1
	add sl, sl, #4
	str sl, [ip, #4]
	lsl r1, r1, lr
	sub r1, r1, #1
	sub r8, r8, lr
	ldr fp, [sl]
	rsb sl, r8, #0x20
	lsr sl, fp, sl
	and r1, sb, r1
	orr r8, sl, r1, lsl r8
	arm_func_end FUN_02081a54
_02081AFC:
	ldr sl, [ip, #4]
	ldr sb, [ip, #0xc]
	ldr r1, [r3, #4]
	and fp, sb, #0x1f
	rsb r3, fp, #0x20
	ldr sl, [sl]
	add sb, sb, r1
	cmp r3, r1
	add r8, r8, r2
	lslgt r2, sl, fp
	rsbgt r1, r1, #0x20
	str sb, [ip, #0xc]
	lsrgt r1, r2, r1
	bgt _02081B64
	ldr r2, [ip, #4]
	mov sb, #1
	add r2, r2, #4
	str r2, [ip, #4]
	lsl sb, sb, r3
	sub r3, r1, r3
	sub sb, sb, #1
	ldr r2, [r2]
	rsb r1, r3, #0x20
	lsr r1, r2, r1
	and r2, sl, sb
	orr r1, r1, r2, lsl r3
_02081B64:
	lsl r3, r1, #2
	add r2, r3, #1
	add r1, r3, #2
	ldrsb r3, [r0, r3]
	ldrsb r2, [r0, r2]
	ldrsb r0, [r0, r1]
	ldr r1, [sp, #0x4c]
	add r3, r3, #0x20
	add r0, r0, #0x20
	add r2, r2, #0x20
	strh r0, [sp, #8]
	cmp r1, #0
	ldrne r0, [sp, #0x50]
	strh r3, [sp, #4]
	strh r2, [sp, #6]
	cmpne r8, r0
	ble _02081C44
	cmp r1, #4
	ldrshlt r0, [sp, #0x54]
	ldrsh r1, [sp, #4]
	ldrsh r3, [sp, #6]
	ldrshge r0, [sp, #0x54]
	ldrsh sb, [sp, #8]
	asrge r0, r0, #1
	lsl r0, r0, #0x10
	asr r2, r0, #0x10
	cmp r2, #0x3e
	movgt r2, #0x3e
	cmp r1, #0
	asrle r0, r1, #1
	rsble r1, r0, #0
	cmp r3, #0
	rsblt r3, r3, #0
	cmp sb, #0
	asrle r0, sb, #1
	rsble sb, r0, #0
	add r0, r3, r1
	add r0, sb, r0
	lsl r0, r0, #0x10
	cmp r2, r0, asr #16
	asr r1, r0, #0x10
	bge _02081C44
	lsl r0, r2, #0xe
	mov sb, #0
	bl FUN_0201f9bc
	lsl r0, r0, #0x10
	asr r3, r0, #0x10
	add r1, sp, #4
_02081C24:
	lsl r2, sb, #1
	ldrsh r0, [r1, r2]
	add sb, sb, #1
	cmp sb, #3
	mul r0, r3, r0
	asr r0, r0, #0xe
	strh r0, [r1, r2]
	blt _02081C24
_02081C44:
	ldr r2, [sp, #0x3c]
	ldrsh r1, [sp, #4]
	ldrsh r0, [sp, #6]
	ldrsh ip, [sp, #8]
	str r8, [r2]
	strh r1, [r4]
	mov sb, #0
	strh r0, [r4, #2]
	lsl fp, r1, #7
	lsl sl, r0, #7
	lsl r3, ip, #7
	mov r0, sb
	mov r1, r6
	lsl r2, r5, #2
	strh ip, [r4, #4]
	strh fp, [sp, #4]
	strh sl, [sp, #6]
	strh r3, [sp, #8]
	bl FUN_02007838
_02081C90:
	add r0, r8, #1
	sub r1, r0, sb
	mov r3, r5
	cmp r5, r1
	movgt r3, r1
	cmp r3, #0
	mov r0, #0
	ble _02081CE4
	rsb r4, sb, #2
	add r2, sp, #4
	lsl r4, r4, #1
	ldrsh sl, [r2, r4]
_02081CC0:
	sub r2, r0, r1
	lsl r2, r2, #1
	ldrsh r2, [r7, r2]
	ldr r4, [r6, r0, lsl #2]
	mla r2, sl, r2, r4
	str r2, [r6, r0, lsl #2]
	add r0, r0, #1
	cmp r0, r3
	blt _02081CC0
_02081CE4:
	add r2, r1, r8
	mov r0, r5
	cmp r5, r2
	movgt r0, r2
	cmp r3, r0
	bge _02081D34
	rsb r4, sb, #2
	add r2, sp, #4
	lsl r4, r4, #1
	ldrsh r2, [r2, r4]
_02081D0C:
	sub r4, r3, r1
	sub r4, r4, r8
	lsl r4, r4, #1
	ldrsh r4, [r7, r4]
	ldr sl, [r6, r3, lsl #2]
	mla r4, r2, r4, sl
	str r4, [r6, r3, lsl #2]
	add r3, r3, #1
	cmp r3, r0
	blt _02081D0C
_02081D34:
	add sb, sb, #1
	cmp sb, #3
	blt _02081C90
	add sp, sp, #0xc
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02081d48
FUN_02081d48: ; 0x02081D48
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x10
	ldrsh r1, [sp, #0x44]
	ldr lr, [sp, #0x54]
	mov r6, r0
	cmp r1, #0x3f
	movgt r0, #0x3f
	strhgt r0, [sp, #0x44]
	rsb r4, lr, #2
	and r5, r4, #1
	ldrsh sb, [sp, #0x44]
	ldr r4, [sp, #0x4c]
	add r5, lr, r5
	add lr, r5, r4, lsl #1
	lsl r0, sb, #0x17
	sub r7, lr, r4, lsl #1
	ldr r8, [sp, #0x34]
	ldr r5, [sp, #0x3c]
	ldr sl, [sp, #0x58]
	mov r1, #0
	asr r0, r0, #0x10
	b _02081DB8
	arm_func_end FUN_02081d48
_02081DA0:
	sub ip, r1, r5
	lsl ip, ip, #1
	ldrsh ip, [sl, ip]
	mul ip, r0, ip
	str ip, [r8, r1, lsl #2]
	add r1, r1, #1
_02081DB8:
	cmp r1, r4
	bge _02081DC8
	cmp r1, r5
	blt _02081DA0
_02081DC8:
	cmp r1, r4
	bge _02081E14
	lsl r0, sb, #0x19
	ldr sb, _02081EC4 ; =0x00007FFF
	asr ip, r0, #0x10
_02081DDC:
	sub r0, r1, r5
	ldr r0, [r8, r0, lsl #2]
	and sl, r0, sb
	lsl r0, r0, #1
	lsl sl, sl, #0x10
	asr r0, r0, #0x10
	asr sl, sl, #0x10
	mul r0, ip, r0
	mul sl, ip, sl
	add r0, r0, sl, asr #15
	str r0, [r8, r1, lsl #2]
	add r1, r1, #1
	cmp r1, r4
	blt _02081DDC
_02081E14:
	cmp r4, #0
	mov sb, #0
	ble _02081E40
_02081E20:
	ldr r1, [r8, sb, lsl #2]
	lsl r0, sb, #1
	add r1, r1, #0x1000
	asr r1, r1, #0xd
	add sb, sb, #1
	strh r1, [r7, r0]
	cmp sb, r4
	blt _02081E20
_02081E40:
	str r7, [sp]
	mov r1, r2
	mov r2, r3
	ldr r0, [sp, #0x48]
	str r4, [sp, #4]
	str r0, [sp, #8]
	ldr r3, [sp, #0x30]
	mov r0, r7
	str lr, [sp, #0xc]
	bl FUN_02080874
	cmp r4, #0
	mov sb, #0
	ble _02081EB8
	ldr r2, _02081EC8 ; =0xFFFF8044
	rsb r3, r2, #0
	mov r0, r3
_02081E80:
	lsl r1, sb, #1
	ldrsh r8, [r6, r1]
	ldrsh r1, [r7, r1]
	sub r8, r8, r1
	cmp r8, r0
	movgt r8, r3
	bgt _02081EA4
	cmp r8, r2
	movlt r8, r2
_02081EA4:
	lsl r1, sb, #1
	add sb, sb, #1
	strh r8, [r6, r1]
	cmp sb, r4
	blt _02081E80
_02081EB8:
	mov r0, r5
	add sp, sp, #0x10
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02081EC4: .word 0x00007FFF
_02081EC8: .word 0xFFFF8044

	arm_func_start FUN_02081ecc
FUN_02081ecc: ; 0x02081ECC
	push {r4, r5, r6, r7, r8, lr}
	ldr r5, [sp, #0x18]
	ldr r4, [sp, #0x20]
	cmp r5, #0x3f
	movgt r5, #0x3f
	ldr lr, [sp, #0x28]
	cmp r4, #0
	mov r3, #0
	ble _02081F28
	lsl ip, r5, #0x17
	asr ip, ip, #0x10
	arm_func_end FUN_02081ecc
_02081EF8:
	sub r6, r3, r2
	lsl r6, r6, #1
	ldrsh r7, [r0, r6]
	lsl r6, r3, #1
	mul r8, ip, r7
	add r7, r8, #0x1000
	str r8, [r1, r3, lsl #2]
	asr r7, r7, #0xd
	add r3, r3, #1
	strh r7, [r0, r6]
	cmp r3, r4
	blt _02081EF8
_02081F28:
	ldr r1, [sp, #0x24]
	mov r0, #0
	str r2, [r1]
	strh r0, [lr, #4]
	strh r0, [lr]
	strh r5, [lr, #2]
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02081f44
FUN_02081f44: ; 0x02081F44
	cmp r1, #0
	beq _02081F58
	cmp r1, #1
	beq _02081F68
	b _02081F9C
	arm_func_end FUN_02081f44
_02081F58:
	ldr r0, [r0, #4]
	lsl r0, r0, #1
	str r0, [r2]
	b _02081FA4
_02081F68:
	ldr r1, [r2]
	cmp r1, #0
	moveq r0, #4
	streq r0, [r2]
	beq _02081FA4
	add r0, r0, r1, lsl #2
	ldr r0, [r0, #0x18]
	cmp r0, #0
	mvneq r0, #0
	streq r0, [r2]
	ldrne r0, [r0, #0x34]
	strne r0, [r2]
	b _02081FA4
_02081F9C:
	mvn r0, #0
	bx lr
_02081FA4:
	mov r0, #0
	bx lr

	arm_func_start FUN_02081fac
FUN_02081fac: ; 0x02081FAC
	mov r1, r0
	cmp r0, #0x10000
	mov r2, #0
	lsrhs r1, r0, #0x10
	addhs r2, r2, #8
	cmp r1, #0x100
	lsrhs r1, r1, #8
	addhs r2, r2, #4
	cmp r1, #0x10
	lsrhs r1, r1, #4
	addhs r2, r2, #2
	cmp r1, #4
	addhs r2, r2, #1
	lsl r1, r2, #0x10
	asr r1, r1, #0x10
	sub r1, r1, #6
	lsl r2, r1, #1
	cmp r2, #0
	asrgt ip, r0, r2
	rsble r2, r2, #0
	lslle ip, r0, r2
	lsl r0, ip, #0x10
	ldr r2, _0208206C ; =0x0000106C
	asr r3, r0, #0x10
	mul r0, r3, r2
	ldr r2, _02082070 ; =0xFFFFCEAD
	lsl r0, r0, #2
	add r0, r2, r0, asr #16
	smulbb r0, ip, r0
	lsl r0, r0, #2
	asr r0, r0, #0x10
	add r0, r0, #0xb5
	add r0, r0, #0x5200
	smulbb r0, ip, r0
	lsl r0, r0, #2
	asr r0, r0, #0x10
	add r0, r0, #0x32
	add r0, r0, #0xe00
	lsl r0, r0, #0x10
	rsb r1, r1, #7
	asr r2, r0, #0x10
	cmp r1, #0
	asrgt r0, r2, r1
	rsble r0, r1, #0
	lslle r0, r2, r0
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	bx lr
	.align 2, 0_0208206C: .word 0x0000106C
_02082070: .word 0xFFFFCEAD
	arm_func_end FUN_02081fac

	arm_func_start FUN_02082074
FUN_02082074: ; 0x02082074
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r1
	mov r4, #1
	str r4, [r6, #0x70]
	ldr r5, [r0]
	stm r6, {r0, r4}
	ldr r0, [r5]
	str r0, [r6, #0xc]
	ldm r5, {r0, r1}
	bl FUN_0201f9bc
	str r0, [r6, #0x14]
	ldr r7, [r5, #4]
	lsl r0, r0, #2
	str r7, [r6, #0x10]
	ldr r8, [r5, #8]
	ldr ip, [r6, #0xc]
	str r8, [r6, #0x18]
	ldr r2, [r5, #0xc]
	lsl r1, r8, #1
	add r1, r1, #0xf
	str r2, [r6, #0x1c]
	bic r3, r1, #0xf
	lsl r1, r8, #2
	ldr lr, [r5, #0x10]
	add r1, r1, #0xf
	bic r2, r1, #0xf
	add r1, r5, #0x1c
	str r1, [r6, #0x74]
	str lr, [r6, #0x20]
	ldr r5, [r5, #0x5c]
	ldr r1, [r6, #0x1f0]
	str r4, [r6, #0x7c]
	add r4, ip, lr, lsl #1
	add r4, r7, r4
	add r4, r4, #0xc
	lsl r4, r4, #1
	add r4, r4, #0xf
	bic r4, r4, #0xf
	add r8, r1, r4
	str r5, [r6, #0x78]
	add r5, ip, lr
	add ip, r8, r3
	add r0, r0, #0xf
	add r4, r1, lr, lsl #2
	str r8, [r6, #0x3c]
	add r8, ip, r3
	add r7, r4, r7, lsl #1
	add lr, r8, r2
	add r3, r7, #0xc
	bic r0, r0, #0xf
	str ip, [r6, #0x38]
	add ip, lr, r0
	mov r4, #0
	mov r0, r4
	lsl r2, r5, #1
	str r8, [r6, #0x40]
	str r1, [r6, #0x30]
	str lr, [r6, #0x4c]
	str ip, [r6, #0x2c]
	str r3, [r6, #0x34]
	bl FUN_02007838
	ldr r0, _020821F0 ; =FUN_02080358
	mov r3, #0x28
	mov r2, #0x3e8
	mov r1, #0x1f40
	str r0, [r6, #0x1c4]
	str r3, [r6, #0x5c]
	str r4, [r6, #8]
	strh r4, [r6, #0x66]
	strh r4, [r6, #0x64]
	strh r4, [r6, #0x62]
	str r4, [r6, #0x68]
	str r2, [r6, #0x6c]
	str r1, [r6, #0x24]
	strh r4, [r6, #0x28]
	str r4, [r6, #0x1c8]
	mov r5, r4
	mov r0, #0x14
	arm_func_end FUN_02082074
_020821AC:
	mla r1, r4, r0, r6
	add r4, r4, #1
	str r5, [r1, #0x84]
	cmp r4, #0x10
	blt _020821AC
	add r1, r6, #0x100
	strh r5, [r1, #0xdc]
	ldrsh r3, [r1, #0xdc]
	mov r2, #1
	mov r0, r6
	str r3, [r6, #0x1d8]
	strh r3, [r1, #0xd4]
	str r5, [r6, #0x1e0]
	str r5, [r6, #0x1e4]
	str r5, [r6, #0x1e8]
	str r2, [r6, #0x1ec]
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020821F0: .word FUN_02080358

	arm_func_start LAB_020821f4
LAB_020821f4: ; 0x020821F4
	bx lr
	arm_func_end LAB_020821f4

	arm_func_start FUN_020821f8
FUN_020821f8: ; 0x020821F8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x8c
	mov r3, #0
	mov sl, r0
	mov r0, r3
	str r0, [sp, #0x68]
	str r0, [sp, #0x30]
	str r0, [sp, #0x5c]
	ldr r0, [sl, #0x2c]
	str r3, [sp, #0x6c]
	str r0, [sp, #0x60]
	mov r0, #0x28
	movs sb, r1
	str r2, [sp, #0x2c]
	str r0, [sp, #0x64]
	bne _0208224C
	ldr r0, [sl, #0x1e4]
	cmp r0, #0
	movne r0, r3
	strne r0, [sl, #0x78]
	bne _020822E0
	arm_func_end FUN_020821f8
_0208224C:
	ldr r0, [sl, #0x70]
	cmp r0, #0
	beq _020822E0
	mov r3, #1
_0208225C:
	ldr r0, [sb, #0xc]
	ldr r1, [sb, #0xc]
	and r0, r0, #0x1f
	cmp r0, #0x1f
	ldreq r0, [sb, #4]
	add r5, r1, #1
	addeq r0, r0, #4
	streq r0, [sb, #4]
	and r1, r5, #0x1f
	rsb r2, r1, #0x20
	ldr r0, [sb, #4]
	str r5, [sb, #0xc]
	ldr r4, [r0]
	add r0, r5, #4
	str r0, [sb, #0xc]
	cmp r2, #4
	lslgt r0, r4, r1
	lsrgt r0, r0, #0x1c
	bgt _020822D4
	ldr r0, [sb, #4]
	lsl r1, r3, r2
	sub r1, r1, #1
	and r4, r4, r1
	add r1, r0, #4
	str r1, [sb, #4]
	rsb r2, r2, #4
	ldr r1, [r0, #4]
	rsb r0, r2, #0x20
	lsr r0, r1, r0
	orr r0, r0, r4, lsl r2
_020822D4:
	cmp r0, #8
	bgt _0208225C
	str r0, [sl, #0x78]
_020822E0:
	ldr r2, [sl, #0x10]
	ldr r0, [sl, #0x20]
	ldr r1, [sl, #0x30]
	add r0, r2, r0, lsl #1
	add r2, r0, #0xc
	ldr r3, [sl, #0xc]
	lsl r2, r2, #1
	add r0, r1, r3, lsl #1
	bl FUN_020078c8
	ldr r0, [sp, #0x60]
	ldr r4, [sl, #0x74]
	rsb r0, r0, #2
	and r1, r0, #1
	ldr r0, [sp, #0x60]
	ldr r3, [sl, #0x78]
	add r0, r0, r1
	ldr r1, [sl, #0x18]
	ldr r3, [r4, r3, lsl #2]
	add r0, r0, r1, lsl #1
	str r0, [sp, #0x60]
	sub r0, r0, r1, lsl #1
	ldr r3, [r3, #0x14]
	mov r2, sb
	str r0, [sp, #0x4c]
	blx r3
	ldr r0, [sl, #8]
	cmp r0, #0
	beq _02082398
	ldr r1, [sl, #0x18]
	ldr r0, [sl, #0x40]
	cmp r1, #0
	mov r6, #0
	ble _02082398
	ldr r2, _02083178 ; =0x00004CCD
	ldr r1, _0208317C ; =0x00007FFF
_0208236C:
	ldr r5, [r0]
	add r6, r6, #1
	asr r3, r5, #0xf
	smulbb r4, r3, r2
	and r3, r5, r1
	smulbb r3, r3, r2
	add r3, r4, r3, asr #15
	str r3, [r0], #4
	ldr r3, [sl, #0x18]
	cmp r6, r3
	blt _0208236C
_02082398:
	ldr r0, [sl, #4]
	cmp r0, #0
	bne _020823B0
	ldr r0, [sl, #8]
	cmp r0, #0
	beq _020823E4
_020823B0:
	ldr r0, [sl, #0x18]
	mov r3, #0
	cmp r0, #0
	ble _020823E4
_020823C0:
	ldr r0, [sp, #0x4c]
	lsl r2, r3, #1
	ldrsh r1, [r0, r2]
	ldr r0, [sl, #0x38]
	add r3, r3, #1
	strh r1, [r0, r2]
	ldr r0, [sl, #0x18]
	cmp r3, r0
	blt _020823C0
_020823E4:
	ldr r1, [sl, #0x74]
	ldr r0, [sl, #0x78]
	ldr r0, [r1, r0, lsl #2]
	ldr r0, [r0]
	cmn r0, #1
	beq _02082460
	ldr r1, [sb, #0xc]
	ldr r5, [sb, #4]
	and r3, r1, #0x1f
	rsb r2, r3, #0x20
	ldr r0, [r5]
	cmp r2, #7
	add r1, r1, #7
	lslgt r0, r0, r3
	str r1, [sb, #0xc]
	lsrgt r1, r0, #0x19
	bgt _02082454
	add r1, r5, #4
	str r1, [sb, #4]
	mov r1, #1
	lsl r1, r1, r2
	rsb r3, r2, #7
	sub r4, r1, #1
	ldr r2, [r5, #4]
	rsb r1, r3, #0x20
	and r4, r0, r4
	lsr r0, r2, r1
	orr r1, r0, r4, lsl r3
_02082454:
	ldr r0, [sl, #0x1c]
	add r0, r0, r1
	str r0, [sp, #0x6c]
_02082460:
	ldr r1, [sl, #0x74]
	ldr r0, [sl, #0x78]
	ldr r0, [r1, r0, lsl #2]
	ldr r0, [r0, #4]
	cmp r0, #0
	beq _020824EC
	ldr r1, [sb, #0xc]
	ldr r5, [sb, #4]
	and r3, r1, #0x1f
	rsb r2, r3, #0x20
	ldr r0, [r5]
	cmp r2, #4
	add r1, r1, #4
	lslgt r0, r0, r3
	str r1, [sb, #0xc]
	lsrgt r1, r0, #0x1c
	bgt _020824D0
	add r1, r5, #4
	str r1, [sb, #4]
	mov r1, #1
	lsl r1, r1, r2
	rsb r3, r2, #4
	sub r4, r1, #1
	ldr r2, [r5, #4]
	rsb r1, r3, #0x20
	and r4, r0, r4
	lsr r0, r2, r1
	orr r1, r0, r4, lsl r3
_020824D0:
	ldr r0, _02083180 ; =0x00000889
	lsl r1, r1, #6
	smulbb r0, r1, r0
	add r0, r0, #0x4000
	lsl r0, r0, #1
	asr r0, r0, #0x10
	str r0, [sp, #0x68]
_020824EC:
	ldr r1, [sb, #0xc]
	ldr r0, [sb, #4]
	and r3, r1, #0x1f
	rsb r2, r3, #0x20
	ldr r4, [r0]
	cmp r2, #5
	add r1, r1, #5
	lslgt r0, r4, r3
	str r1, [sb, #0xc]
	lsrgt r1, r0, #0x1b
	bgt _02082544
	add r1, r0, #4
	str r1, [sb, #4]
	mov r1, #1
	lsl r1, r1, r2
	sub r1, r1, #1
	and r3, r4, r1
	rsb r2, r2, #5
	ldr r1, [r0, #4]
	rsb r0, r2, #0x20
	lsr r0, r1, r0
	orr r1, r0, r3, lsl r2
_02082544:
	ldr r0, [sp, #0x60]
	ldr r4, _02083184 ; =0x0208EA40
	rsb r0, r0, #2
	and r2, r0, #1
	ldr r0, [sp, #0x60]
	ldr r3, [sl, #0x18]
	add r0, r0, r2
	add r2, r0, r3, lsl #1
	rsb r0, r2, #4
	and r0, r0, #3
	sub r5, r2, r3, lsl #1
	add r2, r2, r0
	ldr r0, [sl, #0x10]
	ldr r7, [r4, r1, lsl #2]
	add r3, r2, r0, lsl #2
	ldr r2, _02083188 ; =0x00006EF6
	asr r1, r7, #0xf
	smulbb r6, r1, r2
	ldr r1, _0208317C ; =0x00007FFF
	sub r4, r3, r0, lsl #2
	and r1, r7, r1
	smulbb r1, r1, r2
	add r1, r6, r1, asr #15
	str r1, [sp, #0x70]
	rsb r1, r3, #4
	and r1, r1, #3
	add r1, r3, r1
	add r1, r1, r0, lsl #2
	sub r0, r1, r0, lsl #2
	str r0, [sp, #0x58]
	ldr r0, [sl, #0x78]
	str r1, [sp, #0x60]
	cmp r0, #1
	bne _02082638
	ldr r0, [sb, #4]
	ldr r1, [sb, #0xc]
	ldr r6, [r0]
	and r3, r1, #0x1f
	rsb r2, r3, #0x20
	cmp r2, #4
	lslgt r0, r6, r3
	add r1, r1, #4
	str r1, [sb, #0xc]
	lsrgt r0, r0, #0x1c
	bgt _02082624
	mov r1, #1
	lsl r1, r1, r2
	sub r1, r1, #1
	and r3, r6, r1
	rsb r2, r2, #4
	add r1, r0, #4
	str r1, [sb, #4]
	ldr r1, [r0, #4]
	rsb r0, r2, #0x20
	lsr r0, r1, r0
	orr r0, r0, r3, lsl r2
_02082624:
	cmp r0, #0xf
	moveq r0, #1
	streq r0, [sl, #0x1e4]
	movne r0, #0
	strne r0, [sl, #0x1e4]
_02082638:
	ldr r0, [sl, #0x78]
	cmp r0, #1
	movgt r0, #0
	strgt r0, [sl, #0x1e4]
	mov r0, #0
	str r0, [sp, #0x74]
	ldr r0, [sl, #0x14]
	cmp r0, #0
	ble _02082DD4
	ldr r0, [sp, #0x70]
	ldr r1, _0208318C ; =0x00003FFF
	lsl r2, r0, #2
	and r0, r0, r1
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp, #0x48]
	asr r0, r2, #0x10
	str r0, [sp, #0x44]
	ldr r0, [sp, #0x68]
	sub r1, r0, #0xd
	mov r0, #0x6000
	smulbb r0, r1, r0
	add r0, r0, #0x2000
	asr r0, r0, #0xe
	str r0, [sp, #0x40]
	ldr r0, [sp, #0x6c]
	lsl r0, r0, #0x10
	asr r0, r0, #0xf
	str r0, [sp, #0x3c]
	ldr r0, [sp, #0x70]
	add r0, r0, #0x2000
	lsl r0, r0, #2
	asr r0, r0, #0x10
	str r0, [sp, #0x38]
_020826C0:
	ldr r2, [sl, #0x10]
	ldr r0, [sp, #0x74]
	ldr r1, [sl, #0x34]
	mul r7, r2, r0
	ldr r0, [sl, #0x50]
	add r6, r1, r7, lsl #1
	mov fp, #0
	cmp r0, #0
	mov r8, #0
	addne fp, r0, r7, lsl #1
	lsl r2, r2, #1
	mov r0, r8
	mov r1, r6
	bl FUN_02007838
	ldr r2, [sl, #0x74]
	ldr r0, [sl, #0x78]
	sub r1, r8, #1
	ldr r8, [r2, r0, lsl #2]
	ldr r0, [r8]
	cmp r0, r1
	beq _02082758
	cmp r0, #0
	beq _0208274C
	ldr r1, [sp, #0x6c]
	sub r1, r1, r0
	add r2, r1, #1
	ldr r1, [sl, #0x1c]
	cmp r2, r1
	movlt r2, r1
	ldr r1, [sp, #0x6c]
	add r3, r1, r0
	ldr r0, [sl, #0x20]
	cmp r3, r0
	movgt r3, r0
	b _02082760
_0208274C:
	ldr r3, [sp, #0x6c]
	mov r2, r3
	b _02082760
_02082758:
	ldr r2, [sl, #0x1c]
	ldr r3, [sl, #0x20]
_02082760:
	ldr r0, [sp, #0x68]
	add r1, sp, #0x88
	str r0, [sp]
	ldr r0, [r8, #0x20]
	str r0, [sp, #4]
	ldr ip, [sl, #0x10]
	add r0, sp, #0x80
	str ip, [sp, #8]
	str r1, [sp, #0xc]
	str r0, [sp, #0x10]
	ldr r0, [sp, #0x60]
	str sb, [sp, #0x14]
	str r0, [sp, #0x18]
	ldr r0, [sl, #8]
	ldr r1, [sp, #0x58]
	str r0, [sp, #0x1c]
	str r7, [sp, #0x20]
	ldrsh r7, [sl, #0x60]
	mov r0, r6
	str r7, [sp, #0x24]
	mov r7, #0
	str r7, [sp, #0x28]
	ldr r7, [r8, #0x1c]
	blx r7
	mov r0, #0
	sub r1, r0, #0xfa00000
	ldr r0, [sp, #0x58]
	ldr r3, [sl, #0x10]
	mov r2, #0xfa00000
	bl FUN_020804b0
	ldrsh r1, [sp, #0x80]
	ldrsh r2, [sp, #0x82]
	ldrsh r3, [sp, #0x84]
	cmp r1, #0
	asrle r0, r1, #1
	rsble r1, r0, #0
	cmp r2, #0
	rsblt r2, r2, #0
	cmp r3, #0
	asrle r0, r3, #1
	rsble r3, r0, #0
	add r0, r2, r1
	add r0, r3, r0
	lsl r2, r0, #0x10
	ldr r1, [sp, #0x5c]
	ldr r0, [sp, #0x30]
	add r1, r1, r2, asr #16
	lsl r1, r1, #0x10
	asr r1, r1, #0x10
	cmp r0, r2, asr #16
	asr r0, r2, #0x10
	str r1, [sp, #0x5c]
	bge _02082878
	ldr r1, [sp, #0x88]
	ldr r2, [sp, #0x64]
	rsbs r2, r1, r2, lsl #1
	rsbmi r2, r2, #0
	cmp r2, #3
	blt _02082878
	ldr r2, [sp, #0x64]
	add r2, r2, r2, lsl #1
	subs r2, r2, r1
	rsbmi r2, r2, #0
	cmp r2, #4
	blt _02082878
	ldr r2, [sp, #0x64]
	rsbs r2, r1, r2, lsl #2
	rsbmi r2, r2, #0
	cmp r2, #5
	bge _02082928
_02082878:
	ldr r2, _02083178 ; =0x00004CCD
	ldr r1, [sp, #0x30]
	mul r2, r1, r2
	cmp r0, r2, asr #15
	ble _020828D0
	ldr r1, [sp, #0x88]
	ldr r2, [sp, #0x64]
	subs r2, r2, r1, lsl #1
	rsbmi r2, r2, #0
	cmp r2, #3
	blt _02082928
	ldr r2, [sp, #0x64]
	add r3, r1, r1, lsl #1
	subs r2, r2, r3
	rsbmi r2, r2, #0
	cmp r2, #4
	blt _02082928
	ldr r2, [sp, #0x64]
	subs r2, r2, r1, lsl #2
	rsbmi r2, r2, #0
	cmp r2, #5
	blt _02082928
_020828D0:
	ldr r1, _02083190 ; =0x000055C3
	mul r2, r0, r1
	ldr r1, [sp, #0x30]
	cmp r1, r2, asr #15
	bge _02082938
	ldr r1, [sp, #0x88]
	ldr r2, [sp, #0x64]
	rsbs r2, r1, r2, lsl #1
	rsbmi r2, r2, #0
	cmp r2, #3
	blt _02082928
	ldr r2, [sp, #0x64]
	add r2, r2, r2, lsl #1
	subs r2, r2, r1
	rsbmi r2, r2, #0
	cmp r2, #4
	blt _02082928
	ldr r2, [sp, #0x64]
	rsbs r2, r1, r2, lsl #2
	rsbmi r2, r2, #0
	cmp r2, #5
	bge _02082938
_02082928:
	str r1, [sp, #0x64]
	ldr r1, [sp, #0x30]
	cmp r0, r1
	strgt r0, [sp, #0x30]
_02082938:
	mov r0, #0
	mov r1, r4
	ldr r2, [sl, #0x10]
	lsl r2, r2, #2
	bl FUN_02007838
	ldr r1, [sl, #0x74]
	ldr r0, [sl, #0x78]
	ldr r0, [r1, r0, lsl #2]
	ldr r0, [r0, #8]
	cmp r0, #3
	bne _020829E0
	ldr r1, [sb, #4]
	ldr r2, [sb, #0xc]
	ldr r0, [r1]
	and r3, r2, #0x1f
	rsb r7, r3, #0x20
	cmp r7, #3
	lslgt r0, r0, r3
	add r2, r2, #3
	str r2, [sb, #0xc]
	lsrgt r0, r0, #0x1d
	bgt _020829BC
	mov r2, #1
	lsl r2, r2, r7
	sub r2, r2, #1
	and r3, r0, r2
	rsb r2, r7, #3
	add r0, r1, #4
	str r0, [sb, #4]
	ldr r1, [r1, #4]
	rsb r0, r2, #0x20
	lsr r0, r1, r0
	orr r0, r0, r3, lsl r2
_020829BC:
	lsl r1, r0, #1
	ldr r0, _02083194 ; =0x0208EA30
	ldrsh r1, [r0, r1]
_020829C8:
	ldr r0, [sp, #0x44]
	mul r2, r0, r1
	ldr r0, [sp, #0x48]
	mul r1, r0, r1
	add r0, r2, r1, asr #14
	b _02082A30
_020829E0:
	cmp r0, #1
	bne _02082A2C
	ldr r0, [sb, #0xc]
	ldr r2, [sb, #4]
	and r0, r0, #0x1f
	cmp r0, #0x1f
	ldr r1, [r2]
	rsb r0, r0, #0x1f
	lsr r0, r1, r0
	and r1, r0, #1
	addeq r0, r2, #4
	ldr r2, [sb, #0xc]
	streq r0, [sb, #4]
	add r2, r2, #1
	ldr r0, _02083198 ; =0x0208EA2C
	lsl r1, r1, #1
	ldrsh r1, [r0, r1]
	str r2, [sb, #0xc]
	b _020829C8
_02082A2C:
	ldr r0, [sp, #0x70]
_02082A30:
	str r0, [sp, #0x54]
	ldr r1, [sl, #0x74]
	ldr r0, [sl, #0x78]
	add r2, sl, #0x6c
	ldr r3, [r1, r0, lsl #2]
	ldr r1, [sp, #0x60]
	mov r0, r4
	stm sp, {r1, r2}
	ldr r1, [r3, #0x2c]
	ldr r7, [r3, #0x28]
	ldr r2, [sl, #0x10]
	mov r3, sb
	blx r7
	ldr r2, [sp, #0x54]
	ldr r3, [sl, #0x10]
	mov r0, r4
	mov r1, r4
	bl FUN_02080500
	ldr r1, [sl, #0x74]
	ldr r0, [sl, #0x78]
	ldr r0, [r1, r0, lsl #2]
	ldr r0, [r0, #0xc]
	cmp r0, #0
	beq _02082B64
	ldr r0, [sp, #0x60]
	mov r8, #0
	str r0, [sp, #0x50]
	rsb r0, r0, #4
	and r1, r0, #3
	ldr r0, [sp, #0x60]
	add r0, r0, r1
	ldr r1, [sl, #0x10]
	add r0, r0, r1, lsl #2
	sub r7, r0, r1, lsl #2
	str r0, [sp, #0x60]
	lsl r2, r1, #2
	mov r0, r8
	mov r1, r7
	bl FUN_02007838
	ldr r1, [sl, #0x74]
	ldr r0, [sl, #0x78]
	add r2, sl, #0x6c
	ldr r3, [r1, r0, lsl #2]
	ldr r1, [sp, #0x60]
	mov r0, r7
	stm sp, {r1, r2}
	ldr r1, [r3, #0x2c]
	ldr ip, [r3, #0x28]
	ldr r2, [sl, #0x10]
	mov r3, sb
	blx ip
	ldr r2, [sp, #0x54]
	ldr r3, _0208319C ; =0x00003A2F
	asr r2, r2, #0xf
	smulbb ip, r2, r3
	ldr lr, _0208317C ; =0x00007FFF
	ldr r2, [sp, #0x54]
	mov r0, r7
	and r2, r2, lr
	smulbb r2, r2, r3
	ldr r3, [sl, #0x10]
	mov r1, r7
	add r2, ip, r2, asr #15
	bl FUN_02080500
	ldr r0, [sl, #0x10]
	cmp r0, #0
	ble _02082B5C
_02082B3C:
	ldr r1, [r4, r8, lsl #2]
	ldr r0, [r7, r8, lsl #2]
	add r0, r1, r0
	str r0, [r4, r8, lsl #2]
	add r8, r8, #1
	ldr r0, [sl, #0x10]
	cmp r8, r0
	blt _02082B3C
_02082B5C:
	ldr r0, [sp, #0x50]
	str r0, [sp, #0x60]
_02082B64:
	mov r1, #0
	ldr r0, [sl, #0x10]
	cmp r0, #0
	ble _02082BC0
	ldr r2, _020831A0 ; =0xFFFF8001
	lsr r3, r2, #0x11
_02082B7C:
	ldr r0, [sp, #0x58]
	ldr r7, [r0, r1, lsl #2]
	ldr r0, [r4, r1, lsl #2]
	add r0, r0, r7, lsl #1
	add r0, r0, #0x2000
	asr r7, r0, #0xe
	cmp r7, r2, lsr #17
	movgt r7, r3
	bgt _02082BA8
	cmp r7, r2
	movlt r7, r2
_02082BA8:
	lsl r0, r1, #1
	strh r7, [r6, r0]
	add r1, r1, #1
	ldr r0, [sl, #0x10]
	cmp r1, r0
	blt _02082B7C
_02082BC0:
	cmp fp, #0
	beq _02082BF8
	cmp r0, #0
	mov r2, #0
	ble _02082BF8
_02082BD4:
	ldr r1, [r4, r2, lsl #2]
	lsl r0, r2, #1
	add r1, r1, #0x2000
	asr r1, r1, #0xe
	strh r1, [fp, r0]
	add r2, r2, #1
	ldr r0, [sl, #0x10]
	cmp r2, r0
	blt _02082BD4
_02082BF8:
	ldr r1, [sl, #0x78]
	cmp r1, #1
	bne _02082DBC
	ldr r1, [sp, #0x40]
	lsl r2, r0, #1
	lsl r1, r1, #0x10
	asrs r7, r1, #0x10
	movmi r7, #0
	cmp r7, #0x40
	mov r0, #0
	mov r1, r6
	movgt r7, #0x40
	bl FUN_02007838
	ldr r2, [sl, #0x10]
	ldr r1, [sl, #0x1e0]
	cmp r1, r2
	bge _02082C8C
	ldr r0, [sp, #0x38]
	mul r0, r7, r0
	add r0, r0, #0x20
	lsl r0, r0, #0xa
	asr r8, r0, #0x10
_02082C50:
	cmp r1, #0
	blt _02082C70
	ldr r0, [sp, #0x3c]
	bl FUN_02081fac
	mul r1, r8, r0
	ldr r0, [sl, #0x1e0]
	lsl r0, r0, #1
	strh r1, [r6, r0]
_02082C70:
	ldr r1, [sl, #0x1e0]
	ldr r0, [sp, #0x6c]
	ldr r2, [sl, #0x10]
	add r1, r1, r0
	str r1, [sl, #0x1e0]
	cmp r1, r2
	blt _02082C50
_02082C8C:
	ldr r0, [sl, #0x1e0]
	mov r3, #0
	sub r0, r0, r2
	str r0, [sl, #0x1e0]
	ldr r0, [sl, #0x10]
	cmp r0, #0
	ble _02082DBC
	mov r1, #0x4d
	mul r0, r7, r1
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	str r0, [sp, #0x34]
	rsb r0, r1, #0x200
	mul r1, r7, r0
	ldr r0, _0208317C ; =0x00007FFF
	sub r0, r0, r1
	ldr r1, _020831A4 ; =0x0000599A
	lsl r0, r0, #0x10
	rsb r1, r1, #0x8000
	str r1, [sp, #0x7c]
	ldr r1, _020831A4 ; =0x0000599A
	asr r2, r0, #0x10
	rsb r1, r1, #0xc000
	str r1, [sp, #0x78]
	ldr r1, _020831A4 ; =0x0000599A
	add r0, sl, #0x100
	sub lr, r1, #0x4000
_02082CF8:
	ldrsh r1, [r6]
	ldr r7, _020831A4 ; =0x0000599A
	ldrsh ip, [r0, #0xd4]
	smulbb r7, r1, r7
	lsl r8, r7, #1
	ldr r7, [sp, #0x7c]
	ldr fp, [r4]
	smulbb r7, ip, r7
	lsl r7, r7, #1
	asr r7, r7, #0x10
	add r7, r7, r8, asr #16
	lsl r8, r7, #0x10
	add r7, fp, #0x2000
	lsl r7, r7, #2
	asr r7, r7, #0x10
	mul fp, r7, r2
	ldr r7, [sl, #0x1d8]
	lsl fp, fp, #1
	add r7, r7, #0x2000
	lsl r7, r7, #2
	asr ip, r7, #0x10
	ldr r7, [sp, #0x34]
	add r3, r3, #1
	mul r7, ip, r7
	lsl r7, r7, #1
	asr r7, r7, #0x10
	rsb r7, r7, fp, asr #16
	lsl r7, r7, #0x10
	asr r7, r7, #0x10
	add r7, r7, r8, asr #16
	strh r7, [r6]
	strh r1, [r0, #0xd4]
	ldr r1, [r4]
	ldrsh r8, [r0, #0xdc]
	str r1, [sl, #0x1d8]
	ldrsh r1, [r6]
	smulbb r7, r1, lr
	ldr r1, [sp, #0x78]
	smlabb r1, r8, r1, r7
	add r1, r1, #0x4000
	asr r1, r1, #0xf
	strh r1, [r0, #0xdc]
	ldrsh r7, [r6]
	ldrsh r1, [r0, #0xdc]
	sub r1, r7, r1
	strh r1, [r6], #2
	ldr r1, [sl, #0x10]
	cmp r3, r1
	blt _02082CF8
_02082DBC:
	ldr r0, [sp, #0x74]
	ldr r1, [sl, #0x14]
	add r0, r0, #1
	str r0, [sp, #0x74]
	cmp r0, r1
	blt _020826C0
_02082DD4:
	ldr r0, [sp, #0x60]
	ldr r1, [sl, #0x7c]
	rsb r0, r0, #2
	and r2, r0, #1
	ldr r0, [sp, #0x60]
	ldr r3, [sl, #0x18]
	add r0, r0, r2
	add r0, r0, r3, lsl #1
	cmp r1, #0
	str r0, [sp, #0x60]
	sub r6, r0, r3, lsl #1
	ldrne r1, [sl, #0x74]
	ldrne r0, [sl, #0x78]
	ldrne r0, [r1, r0, lsl #2]
	ldrshne r2, [r0, #0x30]
	cmpne r2, #0
	ble _02082EAC
	ldr r0, [sl, #8]
	cmp r0, #0
	bne _02082EAC
	ldr r1, [sl, #0x10]
	mov r4, #0x28
	lsl r0, r1, #1
	str r0, [sp]
	ldr r0, [sp, #0x64]
	stmib sp, {r0, r4}
	ldr r0, [sp, #0x60]
	str r2, [sp, #0xc]
	str r0, [sp, #0x10]
	ldr r0, [sl, #0x34]
	ldr r2, [sl, #0x3c]
	sub r0, r0, r1, lsl #1
	ldr r1, [sp, #0x2c]
	bl FUN_02080ef8
	ldr r0, [sl, #0x10]
	ldr r1, [sp, #0x2c]
	lsl r2, r0, #1
	str r2, [sp]
	add r1, r1, r2, lsl #1
	ldr r2, [sp, #0x64]
	stmib sp, {r2, r4}
	ldr r3, [sl, #0x74]
	ldr r2, [sl, #0x78]
	ldr r2, [r3, r2, lsl #2]
	ldrsh r2, [r2, #0x30]
	str r2, [sp, #0xc]
	ldr r2, [sp, #0x60]
	str r2, [sp, #0x10]
	ldr r3, [sl, #0x34]
	ldr r2, [sl, #0x3c]
	add r0, r3, r0, lsl #1
	ldr r3, [sl, #0x18]
	bl FUN_02080ef8
	b _02082ECC
_02082EAC:
	ldr r0, [sl, #0x10]
	ldr r2, [sl, #0xc]
	ldr r3, [sl, #0x34]
	rsb r0, r0, #0
	ldr r1, [sp, #0x2c]
	add r0, r3, r0, lsl #1
	lsl r2, r2, #1
	bl _memcpy
_02082ECC:
	ldr r0, [sl, #8]
	cmp r0, #0
	beq _02082F64
	ldr r0, [sl, #0x34]
	ldr r1, [sl, #0xc]
	bl FUN_0208055c
	add r0, r0, #1
	lsl r0, r0, #0x10
	asr r1, r0, #0x10
	ldr r0, [sp, #0x70]
	add r0, r0, r1, asr #1
	bl FUN_0201f9bc
	ldr r1, _0208317C ; =0x00007FFF
	cmp r0, r1
	movgt r0, r1
	ldr r1, [sl, #0xc]
	lsl r0, r0, #0x10
	cmp r1, #0
	asr r0, r0, #0x10
	mov r1, #0
	ble _02082F64
_02082F20:
	ldr r3, [sl, #0x34]
	lsl r4, r1, #1
	ldrsh r2, [r3, r4]
	mul r2, r0, r2
	asr r2, r2, #0xe
	strh r2, [r3, r4]
	ldr r2, [sl, #0x10]
	ldr r3, [sl, #0x34]
	sub r2, r1, r2
	lsl r2, r2, #1
	ldrsh r3, [r3, r2]
	ldr r2, [sp, #0x2c]
	add r1, r1, #1
	strh r3, [r2, r4]
	ldr r2, [sl, #0xc]
	cmp r1, r2
	blt _02082F20
_02082F64:
	ldr r2, [sl, #0x14]
	mov r7, #0
	cmp r2, #0
	ble _02083070
_02082F74:
	ldr r0, [sl, #0x10]
	ldr r1, [sp, #0x4c]
	mul r4, r0, r7
	str r7, [sp]
	str r2, [sp, #4]
	ldr r2, [sp, #0x2c]
	ldr r0, [sl, #0x38]
	add r4, r2, r4, lsl #1
	ldr r3, [sl, #0x18]
	mov r2, r6
	bl FUN_02081968
	ldr r1, [sl, #0x18]
	mov r0, r6
	mov r2, #0x10
	bl FUN_020818d0
	ldr r2, [sl, #0x18]
	ldr r3, [sp, #0x60]
	mov r0, r6
	mov r1, r5
	bl FUN_020814f8
	ldr r3, [sl, #0x18]
	mov r2, #0x2000
	mov r8, #0
	cmp r3, #0
	ble _02082FFC
_02082FD8:
	lsl r0, r8, #1
	ldrsh r0, [r5, r0]
	add r1, r5, r8, lsl #1
	ldrsh r1, [r1, #2]
	add r8, r8, #2
	cmp r8, r3
	sub r0, r1, r0
	add r2, r2, r0
	blt _02082FD8
_02082FFC:
	ldr r1, [sl, #0x4c]
	mov r0, r4
	str r2, [r1, r7, lsl #2]
	ldr r1, [sl, #0x18]
	mov r2, r4
	str r1, [sp]
	ldr r1, [sl, #0x40]
	str r1, [sp, #4]
	ldr r1, [sp, #0x60]
	str r1, [sp, #8]
	ldr r1, [sl, #0x3c]
	ldr r3, [sl, #0x10]
	bl FUN_020807b4
	ldr r0, [sl, #0x18]
	mov r3, #0
	cmp r0, #0
	ble _02083060
_02083040:
	lsl r2, r3, #1
	ldrsh r1, [r5, r2]
	ldr r0, [sl, #0x3c]
	add r3, r3, #1
	strh r1, [r0, r2]
	ldr r0, [sl, #0x18]
	cmp r3, r0
	blt _02083040
_02083060:
	ldr r2, [sl, #0x14]
	add r7, r7, #1
	cmp r7, r2
	blt _02082F74
_02083070:
	ldr r0, [sp, #0x70]
	ldrsh r2, [sl, #0x56]
	add r0, r0, #0x2000
	asr r0, r0, #0xe
	add r0, r0, #1
	strh r0, [sl, #0x54]
	ldr r0, _020831A8 ; =0x00007EB8
	ldrsh r1, [sl, #0x54]
	smulbb r0, r2, r0
	asr r4, r0, #0xf
	cmp r1, r0, asr #15
	movge r4, r1
	ldrsh r3, [sl, #0x58]
	ldr r1, _020831AC ; =0x000040A4
	ldrsh r2, [sl, #0x54]
	smulbb r1, r3, r1
	lsl r1, r1, #2
	asr r1, r1, #0x10
	add r1, r1, #1
	lsl r1, r1, #0x10
	cmp r2, r1, asr #16
	asr r1, r1, #0x10
	movle r1, r2
	strh r1, [sl, #0x58]
	strh r4, [sl, #0x56]
	ldrsh r2, [sl, #0x58]
	ldrsh r1, [sl, #0x56]
	mov r0, #0
	add r2, r2, #1
	cmp r1, r2
	ldr r1, [sl, #0x18]
	strhlt r2, [sl, #0x56]
	cmp r1, #0
	mov r4, #0
	ble _02083120
_020830FC:
	ldr r1, [sp, #0x4c]
	lsl r3, r4, #1
	ldrsh r2, [r1, r3]
	ldr r1, [sl, #0x38]
	add r4, r4, #1
	strh r2, [r1, r3]
	ldr r1, [sl, #0x18]
	cmp r4, r1
	blt _020830FC
_02083120:
	ldr r1, [sp, #0x5c]
	ldr r4, [sl, #0x68]
	add r1, r1, #2
	asr r1, r1, #2
	strh r1, [sl, #0x60]
	ldr r1, [sp, #0x64]
	add r3, r4, #1
	str r1, [sl, #0x5c]
	ldrsh r2, [sl, #0x60]
	str r0, [sl, #4]
	str r0, [sl, #8]
	str r3, [sl, #0x68]
	add r1, sl, r4, lsl #1
	strh r2, [r1, #0x62]
	ldr r1, [sl, #0x68]
	cmp r1, #2
	strgt r0, [sl, #0x68]
	ldr r0, [sp, #0x70]
	strh r0, [sl, #0x28]
	mov r0, #0
	add sp, sp, #0x8c
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02083178: .word 0x00004CCD
_0208317C: .word 0x00007FFF
_02083180: .word 0x00000889
_02083184: .word 0x0208EA40
_02083188: .word 0x00006EF6
_0208318C: .word 0x00003FFF
_02083190: .word 0x000055C3
_02083194: .word 0x0208EA30
_02083198: .word 0x0208EA2C
_0208319C: .word 0x00003A2F
_020831A0: .word 0xFFFF8001
_020831A4: .word 0x0000599A
_020831A8: .word 0x00007EB8
_020831AC: .word 0x000040A4

	arm_func_start FUN_020831b0
FUN_020831b0: ; 0x020831B0
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r0
	mov r5, r2
	cmp r1, #0x2f
	mov r4, #0
	bgt _0208328C
	cmp r1, #0x2f
	bge _02083448
	cmp r1, #0x25
	bgt _02083268
	bge _02083424
	cmp r1, #0x1a
	bgt _0208325C
	cmp r1, #0
	arm_func_end FUN_020831b0

	arm_func_start switchD
switchD: ; 0x020831E8
	addge pc, pc, r1, lsl #2
	b _02083560
	arm_func_end switchD
_020831F0: ; jump table
	b LAB_020832ec ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x020831F4
	b _020832F8
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x020831F8
	b _02083560
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x020831FC
	b _02083300
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02083200
	b _02083560
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02083204
	b _02083560
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02083208
	b _020832D8
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0208320C
	b _020832E4
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02083210
	b _020832D8
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02083214
	b _020832E4
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x02083218
	b _02083560
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0208321C
	b _02083560
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x02083220
	b _02083560
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x02083224
	b _02083560
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x02083228
	b _02083560
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x0208322C
	b _02083560
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x02083230
	b _02083560
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x02083234
	b _02083560
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x02083238
	b _02083560
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x0208323C
	b _02083308
	arm_func_end caseD_13

	arm_func_start caseD_14
caseD_14: ; 0x02083240
	b _02083358
	arm_func_end caseD_14

	arm_func_start caseD_15
caseD_15: ; 0x02083244
	b _02083560
	arm_func_end caseD_15

	arm_func_start caseD_16
caseD_16: ; 0x02083248
	b _0208338C
	arm_func_end caseD_16

	arm_func_start caseD_17
caseD_17: ; 0x0208324C
	b _02083560
	arm_func_end caseD_17

	arm_func_start caseD_18
caseD_18: ; 0x02083250
	b _02083344
	arm_func_end caseD_18

	arm_func_start caseD_19
caseD_19: ; 0x02083254
	b _02083350
	arm_func_end caseD_19

	arm_func_start caseD_1a
caseD_1a: ; 0x02083258
	b _020833A8
	arm_func_end caseD_1a
_0208325C:
	cmp r1, #0x24
	beq _02083418
	b _02083560
_02083268:
	cmp r1, #0x2c
	bgt _02083280
	bge _02083434
	cmp r1, #0x27
	beq _0208342C
	b _02083560
_02083280:
	cmp r1, #0x2d
	beq _02083440
	b _02083560
_0208328C:
	cmp r1, #0x67
	bgt _020832B4
	bge _0208353C
	cmp r1, #0x64
	bgt _020832A8
	beq _020834D0
	b _02083560
_020832A8:
	cmp r1, #0x65
	beq _02083500
	b _02083560
_020832B4:
	cmp r1, #0x69
	bgt _020832CC
	bge _0208354C
	cmp r1, #0x68
	beq _02083544
	b _02083560
_020832CC:
	cmp r1, #0x6a
	beq _02083558
	b _02083560
_020832D8:
	ldr r0, [r5]
	str r0, [r6, #0x78]
	b _02083568
_020832E4:
	ldr r0, [r6, #0x78]
	b _020834C8
LAB_020832ec:
	ldr r0, [r5]
	str r0, [r6, #0x7c]
	b _02083568
_020832F8:
	ldr r0, [r6, #0x7c]
	b _020834C8
_02083300:
	ldr r0, [r6, #0xc]
	b _020834C8
_02083308:
	ldr r1, [r6, #0x74]
	ldr r0, [r6, #0x78]
	ldr r0, [r1, r0, lsl #2]
	cmp r0, #0
	beq _02083330
	ldr r2, [r6, #0x24]
	ldr r0, [r0, #0x34]
	ldr r1, [r6, #0xc]
	mul r0, r2, r0
	b _0208333C
_02083330:
	ldr r0, [r6, #0x24]
	ldr r1, [r6, #0xc]
	add r0, r0, r0, lsl #2
_0208333C:
	bl FUN_0201f9bc
	b _020834C8
_02083344:
	ldr r0, [r5]
	str r0, [r6, #0x24]
	b _02083568
_02083350:
	ldr r0, [r6, #0x24]
	b _020834C8
_02083358:
	ldr r2, [r5]
	mov r0, #0x14
	mla r1, r2, r0, r6
	ldr r2, [r5, #4]
	str r2, [r1, #0x84]
	ldr r2, [r5]
	ldr r3, [r5, #8]
	mla r1, r2, r0, r6
	str r3, [r1, #0x88]
	ldr r1, [r5]
	mla r0, r1, r0, r6
	str r1, [r0, #0x80]
	b _02083568
_0208338C:
	ldr r0, [r5, #4]
	str r0, [r6, #0x1c4]
	ldr r0, [r5, #8]
	str r0, [r6, #0x1c8]
	ldr r0, [r5]
	str r0, [r6, #0x1c0]
	b _02083568
_020833A8:
	ldr r0, [r6, #0x18]
	mov r1, r4
	cmp r0, #0
	ble _020833D0
_020833B8:
	ldr r0, [r6, #0x40]
	str r4, [r0, r1, lsl #2]
	ldr r0, [r6, #0x18]
	add r1, r1, #1
	cmp r1, r0
	blt _020833B8
_020833D0:
	ldr r1, [r6, #0xc]
	ldr r0, [r6, #0x20]
	mov r2, #0
	add r0, r1, r0
	add r0, r0, #1
	cmp r0, #0
	ble _02083568
_020833EC:
	ldr r1, [r6, #0x30]
	lsl r0, r2, #1
	strh r4, [r1, r0]
	ldr r1, [r6, #0xc]
	ldr r0, [r6, #0x20]
	add r2, r2, #1
	add r0, r1, r0
	add r0, r0, #1
	cmp r2, r0
	blt _020833EC
	b _02083568
_02083418:
	ldr r0, [r5]
	str r0, [r6, #0x70]
	b _02083568
_02083424:
	ldr r0, [r6, #0x70]
	b _020834C8
_0208342C:
	ldr r0, [r6, #0x10]
	b _020834C8
_02083434:
	ldr r0, [r5]
	str r0, [r6, #0x1ec]
	b _02083568
_02083440:
	ldr r0, [r6, #0x1ec]
	b _020834C8
_02083448:
	ldrsh r8, [r6, #0x58]
	ldrsh r0, [r6, #0x54]
	mov r1, r8
	bl FUN_0201f9bc
	bl FUN_0201f1c4
	bl thunk_FUN_02025094
	mov r7, r0
	ldrsh r0, [r6, #0x56]
	mov r6, r1
	mov r1, r8
	bl FUN_0201f9bc
	bl FUN_0201f1c4
	bl thunk_FUN_02025094
	mov r2, r0
	mov r3, r1
	mov r0, r7
	mov r1, r6
	bl FUN_02020af8
	bl FUN_0201f0c0
	mov r6, #0x3f800000
	mov r7, r0
	mov r1, r6
	bl FUN_0201f5c8
	movhi r7, r6
	mov r0, r7
	mov r1, r4
	bl FUN_0201f5c8
	movls r7, r4
	ldr r0, _02083570 ; =0x42C80000
	mov r1, r7
	bl FUN_02020094
	bl FUN_0201fdac
_020834C8:
	str r0, [r5]
	b _02083568
_020834D0:
	ldr r0, [r6, #0x14]
	mov r1, r4
	cmp r0, #0
	ble _02083568
_020834E0:
	ldr r0, [r6, #0x4c]
	ldr r0, [r0, r1, lsl #2]
	str r0, [r5, r1, lsl #2]
	ldr r0, [r6, #0x14]
	add r1, r1, #1
	cmp r1, r0
	blt _020834E0
	b _02083568
_02083500:
	ldr r0, [r6, #0x14]
	cmp r0, #0
	ble _02083568
_0208350C:
	ldr r1, [r6, #0x10]
	ldr r2, [r6, #0x34]
	mul r0, r4, r1
	add r0, r2, r0, lsl #1
	bl FUN_0208055c
	lsl r1, r4, #1
	strh r0, [r5, r1]
	ldr r0, [r6, #0x14]
	add r4, r4, #1
	cmp r4, r0
	blt _0208350C
	b _02083568
_0208353C:
	ldr r0, [r6, #0x1e4]
	b _020834C8
_02083544:
	str r5, [r6, #0x50]
	b _02083568
_0208354C:
	ldr r0, [r5]
	str r0, [r6, #0x1e8]
	b _02083568
_02083558:
	ldr r0, [r6, #0x2c]
	b _020834C8
_02083560:
	mvn r0, #0
	pop {r4, r5, r6, r7, r8, pc}
_02083568:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02083570: .word 0x42C80000

	arm_func_start FUN_02083574
FUN_02083574: ; 0x02083574
	push {r4, r5, r6, lr}
	cmp r1, #0
	mov r3, #1
	mov ip, #0
	ble _020835A4
	arm_func_end FUN_02083574
_02083588:
	add r5, ip, #1
	lsl r4, ip, #1
	lsl r6, r5, #0xb
	mov ip, r5
	strh r6, [r0, r4]
	cmp r5, r1
	blt _02083588
_020835A4:
	ldr r4, [r2, #0xc]
	ldr lr, [r2, #4]
	and r6, r4, #0x1f
	rsb r5, r6, #0x20
	ldr r1, [lr]
	cmp r5, #6
	lslgt r1, r1, r6
	add r4, r4, #6
	str r4, [r2, #0xc]
	lsrgt r5, r1, #0x1a
	bgt _020835F8
	add r4, lr, #4
	str r4, [r2, #4]
	lsl r4, r3, r5
	rsb r6, r5, #6
	sub ip, r4, #1
	ldr r5, [lr, #4]
	rsb r4, r6, #0x20
	lsr r4, r5, r4
	and r1, r1, ip
	orr r5, r4, r1, lsl r6
_020835F8:
	ldr r4, _02083840 ; =0x0208E3B0
	mov r1, #0xa
	mla r6, r5, r1, r4
	mov ip, #0
_02083608:
	lsl r5, ip, #1
	ldrsb r1, [r6, ip]
	ldrsh r4, [r0, r5]
	add ip, ip, #1
	cmp ip, #0xa
	add r1, r4, r1, lsl #5
	strh r1, [r0, r5]
	blt _02083608
	ldr r4, [r2, #0xc]
	ldr lr, [r2, #4]
	and r6, r4, #0x1f
	rsb r5, r6, #0x20
	ldr r1, [lr]
	cmp r5, #6
	lslgt r1, r1, r6
	add r4, r4, #6
	str r4, [r2, #0xc]
	lsrgt r1, r1, #0x1a
	bgt _0208367C
	add r4, lr, #4
	str r4, [r2, #4]
	lsl r4, r3, r5
	rsb r6, r5, #6
	sub ip, r4, #1
	ldr r5, [lr, #4]
	rsb r4, r6, #0x20
	lsr r4, r5, r4
	and r1, r1, ip
	orr r1, r4, r1, lsl r6
_0208367C:
	ldr r4, _02083844 ; =0x0208E130
	add r1, r1, r1, lsl #2
	add r6, r4, r1
	mov ip, #0
_0208368C:
	lsl r5, ip, #1
	ldrsb r1, [r6, ip]
	ldrsh r4, [r0, r5]
	add ip, ip, #1
	lsl r1, r1, #0x14
	add r1, r4, r1, asr #16
	strh r1, [r0, r5]
	cmp ip, #5
	blt _0208368C
	ldr r4, [r2, #0xc]
	ldr lr, [r2, #4]
	and r6, r4, #0x1f
	rsb r5, r6, #0x20
	ldr r1, [lr]
	cmp r5, #6
	lslgt r1, r1, r6
	add r4, r4, #6
	str r4, [r2, #0xc]
	lsrgt r1, r1, #0x1a
	bgt _02083704
	add r4, lr, #4
	str r4, [r2, #4]
	lsl r4, r3, r5
	rsb r6, r5, #6
	sub ip, r4, #1
	ldr r5, [lr, #4]
	rsb r4, r6, #0x20
	lsr r4, r5, r4
	and r1, r1, ip
	orr r1, r4, r1, lsl r6
_02083704:
	ldr r4, _02083848 ; =0x0208DFF0
	add r1, r1, r1, lsl #2
	add r6, r4, r1
	mov ip, #0
_02083714:
	lsl r5, ip, #1
	ldrsb r1, [r6, ip]
	ldrsh r4, [r0, r5]
	add ip, ip, #1
	cmp ip, #5
	add r1, r4, r1, lsl #3
	strh r1, [r0, r5]
	blt _02083714
	ldr r4, [r2, #0xc]
	ldr r6, [r2, #4]
	and ip, r4, #0x1f
	rsb r5, ip, #0x20
	ldr r1, [r6]
	cmp r5, #6
	lslgt r1, r1, ip
	add r4, r4, #6
	str r4, [r2, #0xc]
	lsrgt r1, r1, #0x1a
	bgt _02083788
	add r4, r6, #4
	str r4, [r2, #4]
	lsl r4, r3, r5
	rsb ip, r5, #6
	sub lr, r4, #1
	ldr r5, [r6, #4]
	rsb r4, ip, #0x20
	lsr r4, r5, r4
	and r1, r1, lr
	orr r1, r4, r1, lsl ip
_02083788:
	ldr r4, _0208384C ; =0x0208E270
	add r1, r1, r1, lsl #2
	add r6, r4, r1
	mov ip, #0
_02083798:
	add r5, r0, ip, lsl #1
	ldrsb r1, [r6, ip]
	ldrsh r4, [r5, #0xa]
	add ip, ip, #1
	cmp ip, #5
	add r1, r4, r1, lsl #4
	strh r1, [r5, #0xa]
	blt _02083798
	ldr ip, [r2, #0xc]
	ldr r5, [r2, #4]
	and r4, ip, #0x1f
	rsb lr, r4, #0x20
	ldr r1, [r5]
	cmp lr, #6
	lslgt r1, r1, r4
	add ip, ip, #6
	str ip, [r2, #0xc]
	lsrgt r1, r1, #0x1a
	bgt _0208380C
	add ip, r5, #4
	str ip, [r2, #4]
	lsl r2, r3, lr
	rsb ip, lr, #6
	sub lr, r2, #1
	ldr r3, [r5, #4]
	rsb r2, ip, #0x20
	lsr r2, r3, r2
	and r1, r1, lr
	orr r1, r2, r1, lsl ip
_0208380C:
	ldr r2, _02083850 ; =0x0208DEB0
	add r1, r1, r1, lsl #2
	add r4, r2, r1
	mov r5, #0
_0208381C:
	add r3, r0, r5, lsl #1
	ldrsb r1, [r4, r5]
	ldrsh r2, [r3, #0xa]
	add r5, r5, #1
	cmp r5, #5
	add r1, r2, r1, lsl #3
	strh r1, [r3, #0xa]
	blt _0208381C
	pop {r4, r5, r6, pc}
	.align 2, 0_02083840: .word 0x0208E3B0
_02083844: .word 0x0208E130
_02083848: .word 0x0208DFF0
_0208384C: .word 0x0208E270
_02083850: .word 0x0208DEB0

	arm_func_start FUN_02083854
FUN_02083854: ; 0x02083854
	push {r3, r4, r5, lr}
	cmp r1, #0
	mov ip, #0
	ble _02083880
	arm_func_end FUN_02083854
_02083864:
	add r4, ip, #1
	lsl r3, ip, #1
	lsl r5, r4, #0xb
	mov ip, r4
	strh r5, [r0, r3]
	cmp r4, r1
	blt _02083864
_02083880:
	ldr r3, [r2, #0xc]
	ldr lr, [r2, #4]
	and r5, r3, #0x1f
	rsb r4, r5, #0x20
	ldr r1, [lr]
	cmp r4, #6
	lslgt r1, r1, r5
	add r3, r3, #6
	str r3, [r2, #0xc]
	lsrgt r4, r1, #0x1a
	bgt _020838D8
	add r3, lr, #4
	str r3, [r2, #4]
	mov r3, #1
	lsl r3, r3, r4
	rsb r5, r4, #6
	sub ip, r3, #1
	ldr r4, [lr, #4]
	rsb r3, r5, #0x20
	lsr r3, r4, r3
	and r1, r1, ip
	orr r4, r3, r1, lsl r5
_020838D8:
	ldr r3, _02083A28 ; =0x0208E3B0
	mov r1, #0xa
	mla r5, r4, r1, r3
	mov ip, #0
_020838E8:
	lsl r4, ip, #1
	ldrsb r1, [r5, ip]
	ldrsh r3, [r0, r4]
	add ip, ip, #1
	lsl r1, r1, #0x15
	add r1, r3, r1, asr #16
	strh r1, [r0, r4]
	cmp ip, #0xa
	blt _020838E8
	ldr r3, [r2, #0xc]
	ldr r5, [r2, #4]
	and ip, r3, #0x1f
	rsb r4, ip, #0x20
	ldr r1, [r5]
	cmp r4, #6
	lslgt r1, r1, ip
	add r3, r3, #6
	str r3, [r2, #0xc]
	lsrgt r1, r1, #0x1a
	bgt _02083964
	add r3, r5, #4
	str r3, [r2, #4]
	mov r3, #1
	lsl r3, r3, r4
	rsb ip, r4, #6
	sub lr, r3, #1
	ldr r4, [r5, #4]
	rsb r3, ip, #0x20
	lsr r3, r4, r3
	and r1, r1, lr
	orr r1, r3, r1, lsl ip
_02083964:
	ldr r3, _02083A2C ; =0x0208E130
	add r1, r1, r1, lsl #2
	add r5, r3, r1
	mov ip, #0
_02083974:
	lsl r4, ip, #1
	ldrsb r1, [r5, ip]
	ldrsh r3, [r0, r4]
	add ip, ip, #1
	lsl r1, r1, #0x14
	add r1, r3, r1, asr #16
	strh r1, [r0, r4]
	cmp ip, #5
	blt _02083974
	ldr r3, [r2, #0xc]
	ldr r4, [r2, #4]
	and lr, r3, #0x1f
	rsb ip, lr, #0x20
	ldr r1, [r4]
	cmp ip, #6
	lslgt r1, r1, lr
	add r3, r3, #6
	str r3, [r2, #0xc]
	lsrgt r1, r1, #0x1a
	bgt _020839F0
	add r3, r4, #4
	str r3, [r2, #4]
	mov r2, #1
	lsl r2, r2, ip
	rsb ip, ip, #6
	sub lr, r2, #1
	ldr r3, [r4, #4]
	rsb r2, ip, #0x20
	lsr r2, r3, r2
	and r1, r1, lr
	orr r1, r2, r1, lsl ip
_020839F0:
	ldr r2, _02083A30 ; =0x0208E270
	add r1, r1, r1, lsl #2
	add r4, r2, r1
	mov r5, #0
_02083A00:
	add r3, r0, r5, lsl #1
	ldrsb r1, [r4, r5]
	ldrsh r2, [r3, #0xa]
	add r5, r5, #1
	lsl r1, r1, #0x14
	add r1, r2, r1, asr #16
	strh r1, [r3, #0xa]
	cmp r5, #5
	blt _02083A00
	pop {r3, r4, r5, pc}
	.align 2, 0_02083A28: .word 0x0208E3B0
_02083A2C: .word 0x0208E130
_02083A30: .word 0x0208E270

	arm_func_start FUN_02083a34
FUN_02083a34: ; 0x02083A34
	push {r4, r5, r6, lr}
	cmp r1, #0
	mov r6, #0
	ble _02083A6C
	mov r3, #0xa00
	arm_func_end FUN_02083a34
_02083A48:
	smulbb r4, r6, r3
	lsl ip, r4, #0x10
	asr r5, ip, #0x10
	lsl r4, r6, #1
	add r5, r5, #0x1800
	add r6, r6, #1
	strh r5, [r0, r4]
	cmp r6, r1
	blt _02083A48
_02083A6C:
	ldr r4, [r2, #0xc]
	ldr r6, [r2, #4]
	and ip, r4, #0x1f
	rsb r5, ip, #0x20
	ldr r3, [r6]
	cmp r5, #6
	add r4, r4, #6
	lslgt r3, r3, ip
	str r4, [r2, #0xc]
	lsrgt r4, r3, #0x1a
	bgt _02083AC4
	add r4, r6, #4
	str r4, [r2, #4]
	mov r4, #1
	lsl r4, r4, r5
	rsb ip, r5, #6
	sub lr, r4, #1
	ldr r5, [r6, #4]
	rsb r4, ip, #0x20
	lsr r4, r5, r4
	and r3, r3, lr
	orr r4, r4, r3, lsl ip
_02083AC4:
	cmp r1, #0
	mov ip, #0
	ble _02083AFC
	ldr r3, _02083B90 ; =0x0208DAB0
	mla r6, r4, r1, r3
_02083AD8:
	lsl r5, ip, #1
	ldrsb r3, [r6, ip]
	ldrsh r4, [r0, r5]
	add ip, ip, #1
	lsl r3, r3, #0x15
	add r3, r4, r3, asr #16
	strh r3, [r0, r5]
	cmp ip, r1
	blt _02083AD8
_02083AFC:
	ldr ip, [r2, #0xc]
	ldr r5, [r2, #4]
	and lr, ip, #0x1f
	rsb r4, lr, #0x20
	ldr r3, [r5]
	add ip, ip, #6
	str ip, [r2, #0xc]
	cmp r4, #6
	lslgt r2, r3, lr
	lsrgt r3, r2, #0x1a
	bgt _02083B54
	add ip, r5, #4
	str ip, [r2, #4]
	mov r2, #1
	lsl r2, r2, r4
	rsb lr, r4, #6
	sub r4, r2, #1
	ldr ip, [r5, #4]
	rsb r2, lr, #0x20
	lsr r2, ip, r2
	and r3, r3, r4
	orr r3, r2, r3, lsl lr
_02083B54:
	mov r5, #0
	cmp r1, #0
	pople {r4, r5, r6, pc}
	ldr r2, _02083B94 ; =0x0208DCB0
	mla r4, r3, r1, r2
_02083B68:
	lsl ip, r5, #1
	ldrsb r2, [r4, r5]
	ldrsh r3, [r0, ip]
	add r5, r5, #1
	lsl r2, r2, #0x14
	add r2, r3, r2, asr #16
	strh r2, [r0, ip]
	cmp r5, r1
	blt _02083B68
	pop {r4, r5, r6, pc}
	.align 2, 0_02083B90: .word 0x0208DAB0
_02083B94: .word 0x0208DCB0

	arm_func_start FUN_02083b98
FUN_02083b98: ; 0x02083B98
	mov r1, r0
	cmp r0, #0x10000
	mov r2, #0
	lsrhs r1, r0, #0x10
	addhs r2, r2, #8
	cmp r1, #0x100
	lsrhs r1, r1, #8
	addhs r2, r2, #4
	cmp r1, #0x10
	lsrhs r1, r1, #4
	addhs r2, r2, #2
	cmp r1, #4
	addhs r2, r2, #1
	lsl r1, r2, #0x10
	asr r1, r1, #0x10
	sub r1, r1, #6
	lsl r2, r1, #1
	cmp r2, #0
	asrgt ip, r0, r2
	rsble r2, r2, #0
	lslle ip, r0, r2
	lsl r0, ip, #0x10
	ldr r2, _02083C58 ; =0x0000106C
	asr r3, r0, #0x10
	mul r0, r3, r2
	ldr r2, _02083C5C ; =0xFFFFCEAD
	lsl r0, r0, #2
	add r0, r2, r0, asr #16
	smulbb r0, ip, r0
	lsl r0, r0, #2
	asr r0, r0, #0x10
	add r0, r0, #0xb5
	add r0, r0, #0x5200
	smulbb r0, ip, r0
	lsl r0, r0, #2
	asr r0, r0, #0x10
	add r0, r0, #0x32
	add r0, r0, #0xe00
	lsl r0, r0, #0x10
	rsb r1, r1, #7
	asr r2, r0, #0x10
	cmp r1, #0
	asrgt r0, r2, r1
	rsble r0, r1, #0
	lslle r0, r2, r0
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	bx lr
	.align 2, 0_02083C58: .word 0x0000106C
_02083C5C: .word 0xFFFFCEAD
	arm_func_end FUN_02083b98

	arm_func_start FUN_02083c60
FUN_02083c60: ; 0x02083C60
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r1
	mov r4, #1
	ldr r5, [r0]
	str r4, [r6, #0x58]
	str r0, [r6]
	ldr r0, [r5]
	add r1, r6, #0x68
	bl FUN_02082074
	str r0, [r6, #4]
	add r2, r6, #0x28
	mov r1, #0x6a
	bl FUN_02084ad0
	ldr r0, [r5, #4]
	lsl r0, r0, #1
	str r0, [r6, #8]
	ldr r0, [r5, #4]
	str r0, [r6, #0xc]
	ldr r0, [r5, #8]
	str r0, [r6, #0x10]
	ldmib r5, {r0, r1}
	bl FUN_0201f9bc
	str r0, [r6, #0x14]
	ldr r1, [r5, #0xc]
	ldr r0, [r6, #4]
	str r1, [r6, #0x18]
	mov r1, #0x19
	add r2, r6, #0x20
	bl FUN_02084ad0
	ldr r0, [r6, #0x20]
	mov r1, #0x69
	lsl r0, r0, #1
	str r0, [r6, #0x20]
	str r4, [sp]
	ldr r0, [r6, #4]
	add r2, sp, #0
	bl FUN_02084ad0
	add r0, r5, #0x18
	str r0, [r6, #0x5c]
	ldr r0, [r5, #0x38]
	ldr r1, [r6, #0x64]
	str r0, [r6, #0x60]
	add r0, r1, #0x80
	add r2, r1, #0x100
	str r1, [r6, #0x2c]
	ldr r1, [r6, #0x10]
	str r0, [r6, #0x30]
	ldr r0, [r6, #0x18]
	lsl r1, r1, #1
	add r1, r1, #0xf
	lsl r0, r0, #1
	bic r1, r1, #0xf
	add r0, r0, #0xf
	add r1, r2, r1
	bic r0, r0, #0xf
	str r1, [r6, #0x38]
	add r1, r1, r0
	str r2, [r6, #0x34]
	add r2, r1, r0
	mov r0, #0
	str r1, [r6, #0x3c]
	ldr r1, [r6, #0x14]
	str r0, [r6, #0x4c]
	str r0, [r6, #0x24]
	lsl r0, r1, #2
	add r0, r0, #0xf
	bic r0, r0, #0xf
	str r2, [r6, #0x44]
	add r2, r2, r0
	lsl r0, r1, #1
	add r0, r0, #0xf
	bic r0, r0, #0xf
	add r0, r2, r0
	str r0, [r6, #0x40]
	mov r0, #0x3e8
	str r0, [r6, #0x54]
	str r4, [r6, #0x1c]
	str r2, [r6, #0x48]
	mov r0, r6
	add sp, sp, #4
	pop {r3, r4, r5, r6, pc}
	arm_func_end FUN_02083c60

	arm_func_start FUN_02083da8
FUN_02083da8: ; 0x02083DA8
	ldr r0, [r0, #4]
	ldr ip, _02083DB4 ; =LAB_020821f4
	bx ip
	.align 2, 0_02083DB4: .word LAB_020821f4
	arm_func_end FUN_02083da8

	arm_func_start FUN_02083db8
FUN_02083db8: ; 0x02083DB8
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x44
	mov sl, r0
	ldr r3, [sl, #0xc]
	str r1, [sp, #0x14]
	ldr r0, [sl, #4]
	mov r1, r2
	str r2, [sp, #0x18]
	add r2, r1, r3, lsl #1
	mov r5, #0
	mov r3, r5
	mov r1, #0x68
	ldr r4, [sl, #0x28]
	str r3, [sp, #0x30]
	bl FUN_02084ad0
	ldr r0, [sl, #4]
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x18]
	bl FUN_020821f8
	ldr r0, [sl, #4]
	mov r1, #0x67
	add r2, sp, #0x40
	bl FUN_02084ad0
	ldr r0, [sl, #0x58]
	cmp r0, #0
	beq _02083F30
	ldr r0, [sp, #0x14]
	ldr r2, [r0, #0xc]
	ldr r0, [r0, #8]
	sub r0, r0, r2
	cmp r0, #0
	ble _02083E58
	ldr r0, [sp, #0x14]
	ldr r1, [r0, #4]
	and r0, r2, #0x1f
	ldr r1, [r1]
	rsb r0, r0, #0x1f
	lsr r0, r1, r0
	and r6, r0, #1
	b _02083E60
	arm_func_end FUN_02083db8
_02083E58:
	ldr r6, [sp, #0x30]
	bl FUN_02004160
_02083E60:
	cmp r6, #0
	beq _02083EFC
	ldr r0, [sp, #0x14]
	ldr r0, [r0, #0xc]
	and r0, r0, #0x1f
	cmp r0, #0x1f
	ldreq r0, [sp, #0x14]
	ldreq r0, [r0, #4]
	addeq r1, r0, #4
	ldreq r0, [sp, #0x14]
	streq r1, [r0, #4]
	ldr r0, [sp, #0x14]
	ldr r2, [r0, #0xc]
	ldr r1, [r0, #4]
	add r2, r2, #1
	str r2, [r0, #0xc]
	and r6, r2, #0x1f
	rsb r5, r6, #0x20
	add r3, r2, #3
	ldr r0, [r1]
	ldr r2, [sp, #0x14]
	cmp r5, #3
	lslgt r0, r0, r6
	str r3, [r2, #0xc]
	lsrgt r0, r0, #0x1d
	bgt _02083EF4
	add r3, r1, #4
	str r3, [r2, #4]
	mov r2, #1
	lsl r2, r2, r5
	rsb r3, r5, #3
	sub r5, r2, #1
	ldr r2, [r1, #4]
	rsb r1, r3, #0x20
	lsr r1, r2, r1
	and r0, r0, r5
	orr r0, r1, r0, lsl r3
_02083EF4:
	str r0, [sl, #0x60]
	b _02083F04
_02083EFC:
	str r5, [sl, #0x60]
	bl FUN_02004160
_02083F04:
	ldr r1, [sl, #0x60]
	cmp r1, #0
	beq _02083F30
	ldr r0, [sl, #0x5c]
	ldr r0, [r0, r1, lsl #2]
	cmp r0, #0
	bne _02083F30
	bl FUN_02004160
	add sp, sp, #0x44
	mvn r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02083F30:
	rsb r0, r4, #4
	and r0, r0, #3
	ldr r3, [sl, #0x14]
	add r0, r4, r0
	add r2, r0, r3, lsl #2
	rsb r0, r2, #2
	and r1, r0, #1
	sub r0, r2, r3, lsl #2
	str r0, [sp, #0x24]
	add r0, r2, r1
	add r4, r0, r3, lsl #1
	sub r3, r4, r3, lsl #1
	ldr r0, [sl, #4]
	ldr r2, [sp, #0x24]
	mov r1, #0x64
	str r3, [sp, #0x20]
	bl FUN_02084ad0
	ldr r0, [sl, #4]
	ldr r2, [sp, #0x20]
	mov r1, #0x65
	bl FUN_02084ad0
	rsb r0, r4, #2
	and r0, r0, #1
	ldr r1, [sl, #0x18]
	add r0, r4, r0
	add r3, r0, r1, lsl #1
	sub r0, r3, r1, lsl #1
	str r0, [sp, #0x1c]
	rsb r0, r3, #2
	and r0, r0, #1
	add r0, r3, r0
	add r4, r0, r1, lsl #1
	sub r0, r4, r1, lsl #1
	str r0, [sp, #0x34]
	ldr r5, [sl, #0x5c]
	ldr r3, [sl, #0x60]
	ldr r2, [sp, #0x14]
	ldr r3, [r5, r3, lsl #2]
	ldr r0, [sp, #0x1c]
	ldr r3, [r3, #0x14]
	blx r3
	ldr r0, [sl, #0x1c]
	cmp r0, #0
	ldrne r0, [sl, #0x18]
	movne r3, #0
	cmpne r0, #0
	ble _02084010
_02083FEC:
	ldr r0, [sp, #0x1c]
	lsl r2, r3, #1
	ldrsh r1, [r0, r2]
	ldr r0, [sl, #0x38]
	add r3, r3, #1
	strh r1, [r0, r2]
	ldr r0, [sl, #0x18]
	cmp r3, r0
	blt _02083FEC
_02084010:
	rsb r0, r4, #2
	and r2, r0, #1
	ldr r0, [sl, #0x14]
	ldr r1, [sl, #0x18]
	add r2, r4, r2
	add r4, r2, r1, lsl #1
	cmp r0, #0
	sub r5, r4, r1, lsl #1
	mov r8, #0
	ble _02084488
_02084038:
	ldr r1, [sl, #0x10]
	rsb r2, r4, #4
	mul r0, r1, r8
	lsl r0, r0, #1
	str r0, [sp, #0x3c]
	and r0, r2, #3
	add r0, r4, r0
	add r4, r0, r1, lsl #2
	mov r0, #0
	ldr r3, [sl, #0xc]
	ldr r2, [sp, #0x18]
	mov fp, r0
	add r2, r2, r3, lsl #1
	ldr r3, [sl, #0x4c]
	sub r6, r4, r1, lsl #2
	str r2, [sp, #0x38]
	cmp r3, #0
	beq _02084094
	ldr r2, [sp, #0x3c]
	add fp, r3, r2, lsl #1
	lsl r2, r1, #2
	mov r1, fp
	bl FUN_02007838
_02084094:
	str r8, [sp]
	ldr r0, [sl, #0x14]
	ldr r1, [sp, #0x1c]
	str r0, [sp, #4]
	ldr r0, [sl, #0x38]
	ldr r2, [sp, #0x34]
	ldr r3, [sl, #0x18]
	bl FUN_02081968
	ldr r0, [sp, #0x34]
	ldr r1, [sl, #0x18]
	ldr r2, _02084518 ; =0x0000019A
	bl FUN_020818d0
	ldr r0, [sp, #0x34]
	ldr r2, [sl, #0x18]
	mov r1, r5
	mov r3, r4
	bl FUN_020814f8
	ldr r2, [sl, #0x44]
	mov r0, #0x2000
	str r0, [r2, r8, lsl #2]
	ldr r2, [sl, #0x18]
	mov r1, #0
	cmp r2, #0
	ble _02084130
_020840F4:
	lsl r2, r1, #1
	ldrsh sb, [r5, r2]
	add r2, r5, r1, lsl #1
	ldrsh r2, [r2, #2]
	ldr r7, [sl, #0x44]
	add r1, r1, #2
	sub r3, r2, sb
	add r2, sb, r2
	add r0, r0, r3
	ldr r3, [r7, r8, lsl #2]
	add r2, r3, r2
	str r2, [r7, r8, lsl #2]
	ldr r2, [sl, #0x18]
	cmp r1, r2
	blt _020840F4
_02084130:
	add r1, r0, #0x52
	ldr r0, [sp, #0x24]
	ldr r2, [r0, r8, lsl #2]
	lsl r0, r1, #0x10
	add r2, r2, #0x52
	asr r0, r0, #0x11
	add r0, r0, r2, lsl #7
	bl FUN_0201f9bc
	ldr r2, _0208451C ; =0x00007FFF
	cmp r0, r2
	movgt r0, r2
	bgt _0208416C
	rsb r1, r2, #0
	cmp r0, r1
	movlt r0, r1
_0208416C:
	ldr r2, [sl, #0x10]
	lsl r0, r0, #0x10
	asr sb, r0, #0x10
	mov r0, #0
	mov r1, r6
	lsl r2, r2, #2
	bl FUN_02007838
	ldr r0, [sp, #0x14]
	ldr r3, [r0, #4]
	ldr r0, [r0, #0xc]
	ldr r2, [r3]
	and r1, r0, #0x1f
	add r7, r0, #4
	ldr r0, [sp, #0x14]
	str r7, [r0, #0xc]
	rsb r0, r1, #0x20
	cmp r0, #4
	lslgt r0, r2, r1
	lsrgt r0, r0, #0x1c
	bgt _020841EC
	mov r1, #1
	lsl r1, r1, r0
	sub r1, r1, #1
	and r1, r2, r1
	ldr r2, [sp, #0x14]
	add r7, r3, #4
	str r7, [r2, #4]
	rsb r0, r0, #4
	ldr r3, [r3, #4]
	rsb r2, r0, #0x20
	lsr r2, r3, r2
	orr r0, r2, r1, lsl r0
_020841EC:
	ldr r2, _02084520 ; =0x0208EAC0
	lsl r3, r0, #1
	ldr r0, [sp, #0x20]
	lsl r1, r8, #1
	ldrsh r0, [r0, r1]
	ldrsh r2, [r2, r3]
	ldr r1, _02084524 ; =0x00006FD2
	ldr r7, [sl, #0x10]
	smulbb r1, r2, r1
	lsl r1, r1, #1
	asr r2, r1, #0x10
	cmp r7, #0x50
	ldreq r1, _02084528 ; =0x00005A82
	smulbbeq r1, r2, r1
	addeq r1, r1, #0x2000
	lsleq r1, r1, #2
	asreq r2, r1, #0x10
	smulbb r0, r2, r0
	lsl r0, r0, #3
	add r0, r0, sb, asr #1
	mov r1, sb
	bl FUN_0201f9bc
	lsl r0, r0, #0xb
	str r0, [sp, #0x2c]
	ldr r3, [sl, #0x5c]
	ldr r0, [sl, #0x60]
	add r1, sl, #0x54
	ldr r3, [r3, r0, lsl #2]
	mov r2, r7
	str r4, [sp]
	str r1, [sp, #4]
	ldr r1, [r3, #0x2c]
	ldr r7, [r3, #0x28]
	ldr r3, [sp, #0x14]
	mov r0, r6
	blx r7
	ldr r2, [sp, #0x2c]
	ldr r3, [sl, #0x10]
	mov r0, r6
	mov r1, r6
	bl FUN_02080500
	ldr r1, [sl, #0x5c]
	ldr r0, [sl, #0x60]
	ldr r0, [r1, r0, lsl #2]
	ldr r0, [r0, #0xc]
	cmp r0, #0
	beq _02084370
	rsb r0, r4, #4
	and r0, r0, #3
	add r1, r4, r0
	ldr r0, [sl, #0x10]
	str r4, [sp, #0x28]
	add r4, r1, r0, lsl #2
	sub r7, r4, r0, lsl #2
	mov sb, #0
	lsl r2, r0, #2
	mov r0, sb
	mov r1, r7
	bl FUN_02007838
	ldr r2, [sl, #0x5c]
	ldr r0, [sl, #0x60]
	add r1, sl, #0x54
	ldr r2, [r2, r0, lsl #2]
	ldr r3, [sp, #0x14]
	str r4, [sp]
	str r1, [sp, #4]
	ldr r1, [r2, #0x2c]
	ldr r4, [r2, #0x28]
	ldr r2, [sl, #0x10]
	mov r0, r7
	blx r4
	ldr r2, [sp, #0x2c]
	ldr r4, _0208451C ; =0x00007FFF
	ldr r3, [sp, #0x2c]
	ldr ip, _0208452C ; =0x00003333
	and r3, r3, r4
	asr r2, r2, #0xf
	smulbb r3, r3, ip
	smulbb r2, r2, ip
	add r3, r3, #0x4000
	add r2, r2, r3, asr #15
	ldr r3, [sl, #0x10]
	mov r0, r7
	mov r1, r7
	bl FUN_02080500
	ldr r0, [sl, #0x10]
	cmp r0, #0
	ble _0208436C
_0208434C:
	ldr r1, [r6, sb, lsl #2]
	ldr r0, [r7, sb, lsl #2]
	add r0, r1, r0
	str r0, [r6, sb, lsl #2]
	add sb, sb, #1
	ldr r0, [sl, #0x10]
	cmp sb, r0
	blt _0208434C
_0208436C:
	ldr r4, [sp, #0x28]
_02084370:
	ldr r0, [sl, #0x4c]
	cmp r0, #0
	ldrne r0, [sl, #0x10]
	movne r2, #0
	cmpne r0, #0
	ble _020843AC
_02084388:
	ldr r1, [r6, r2, lsl #2]
	lsl r0, r2, #2
	add r1, r1, #0x2000
	asr r1, r1, #0xe
	strh r1, [fp, r0]
	add r2, r2, #1
	ldr r0, [sl, #0x10]
	cmp r2, r0
	blt _02084388
_020843AC:
	ldr r1, [sp, #0x38]
	ldr r0, [sp, #0x3c]
	add r2, r1, r0
	ldr r0, [sl, #0x18]
	str r0, [sp]
	ldr r0, [sl, #0x40]
	stmib sp, {r0, r4}
	ldr r0, [sl, #0x34]
	ldr r1, [sl, #0x3c]
	ldr r3, [sl, #0x10]
	bl FUN_020807b4
	ldr r0, [sl, #0x10]
	mov r3, #0
	cmp r0, #0
	ble _02084410
_020843E8:
	ldr r0, [r6, r3, lsl #2]
	ldr r1, [sl, #0x34]
	add r0, r0, #0x2000
	asr r2, r0, #0xe
	lsl r0, r3, #1
	strh r2, [r1, r0]
	ldr r0, [sl, #0x10]
	add r3, r3, #1
	cmp r3, r0
	blt _020843E8
_02084410:
	ldr r0, [sl, #0x18]
	mov r3, #0
	cmp r0, #0
	ble _02084440
_02084420:
	lsl r2, r3, #1
	ldrsh r1, [r5, r2]
	ldr r0, [sl, #0x3c]
	add r3, r3, #1
	strh r1, [r0, r2]
	ldr r0, [sl, #0x18]
	cmp r3, r0
	blt _02084420
_02084440:
	ldr r0, [sl, #0x34]
	ldr r1, [sl, #0x10]
	bl FUN_0208055c
	ldr r2, [sl, #0x48]
	lsl r1, r8, #1
	strh r0, [r2, r1]
	ldr r0, [sl, #0x48]
	ldr r6, [sl, #0x14]
	ldrsh r0, [r0, r1]
	mov r1, r6
	smulbb r0, r0, r0
	bl FUN_0201f9bc
	ldr r1, [sp, #0x30]
	add r8, r8, #1
	add r0, r1, r0
	str r0, [sp, #0x30]
	cmp r8, r6
	blt _02084038
_02084488:
	ldr r0, [sp, #0x30]
	bl FUN_02083b98
	strh r0, [sl, #0x50]
	ldr r1, [sl, #8]
	mov r0, #0x40
	str r1, [sp]
	str r0, [sp, #4]
	ldr r0, [sl, #0x2c]
	ldr r2, _02084530 ; =0x0208EAE0
	str r0, [sp, #8]
	ldr r1, [sl, #0x30]
	ldr r0, [sp, #0x18]
	str r1, [sp, #0xc]
	str r4, [sp, #0x10]
	ldr r4, [sl, #0xc]
	mov r1, r0
	mov r3, r0
	add r1, r1, r4, lsl #1
	bl FUN_02080920
	ldr r0, [sl, #0x18]
	mov r3, #0
	cmp r0, #0
	ble _02084508
_020844E4:
	ldr r0, [sp, #0x1c]
	lsl r2, r3, #1
	ldrsh r1, [r0, r2]
	ldr r0, [sl, #0x38]
	add r3, r3, #1
	strh r1, [r0, r2]
	ldr r0, [sl, #0x18]
	cmp r3, r0
	blt _020844E4
_02084508:
	mov r0, #0
	str r0, [sl, #0x1c]
	add sp, sp, #0x44
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02084518: .word 0x0000019A
_0208451C: .word 0x00007FFF
_02084520: .word 0x0208EAC0
_02084524: .word 0x00006FD2
_02084528: .word 0x00005A82
_0208452C: .word 0x00003333
_02084530: .word 0x0208EAE0

	arm_func_start FUN_02084534
FUN_02084534: ; 0x02084534
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	mov r4, r2
	cmp r1, #0x67
	mov r3, #0
	bgt _0208463C
	cmp r1, #0x67
	bge _020848A4
	cmp r1, #0x64
	bgt _02084630
	bge _02084840
	cmp r1, #0x2f
	arm_func_end FUN_02084534

	arm_func_start switchD
switchD: ; 0x02084568
	addls pc, pc, r1, lsl #2
	b _020848CC
	arm_func_end switchD
_02084570: ; jump table
	b LAB_02084690 ; case 0

	arm_func_start caseD_1
caseD_1: ; 0x02084574
	b _020846A4
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02084578
	b _020848CC
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x0208457C
	b _02084684
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02084580
	b _020846AC
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02084584
	b _020848CC
	arm_func_end caseD_5

	arm_func_start caseD_6
caseD_6: ; 0x02084588
	b _020846AC
	arm_func_end caseD_6

	arm_func_start caseD_7
caseD_7: ; 0x0208458C
	b _020848CC
	arm_func_end caseD_7

	arm_func_start caseD_8
caseD_8: ; 0x02084590
	b _0208466C
	arm_func_end caseD_8

	arm_func_start caseD_9
caseD_9: ; 0x02084594
	b _02084678
	arm_func_end caseD_9

	arm_func_start caseD_a
caseD_a: ; 0x02084598
	b _02084660
	arm_func_end caseD_a

	arm_func_start caseD_b
caseD_b: ; 0x0208459C
	b _020848CC
	arm_func_end caseD_b

	arm_func_start caseD_c
caseD_c: ; 0x020845A0
	b _020848CC
	arm_func_end caseD_c

	arm_func_start caseD_d
caseD_d: ; 0x020845A4
	b _020848CC
	arm_func_end caseD_d

	arm_func_start caseD_e
caseD_e: ; 0x020845A8
	b _020848CC
	arm_func_end caseD_e

	arm_func_start caseD_f
caseD_f: ; 0x020845AC
	b _020848CC
	arm_func_end caseD_f

	arm_func_start caseD_10
caseD_10: ; 0x020845B0
	b _020848CC
	arm_func_end caseD_10

	arm_func_start caseD_11
caseD_11: ; 0x020845B4
	b _020848CC
	arm_func_end caseD_11

	arm_func_start caseD_12
caseD_12: ; 0x020845B8
	b _020848CC
	arm_func_end caseD_12

	arm_func_start caseD_13
caseD_13: ; 0x020845BC
	b _020846F8
	arm_func_end caseD_13

	arm_func_start caseD_14
caseD_14: ; 0x020845C0
	b _02084770
	arm_func_end caseD_14

	arm_func_start caseD_15
caseD_15: ; 0x020845C4
	b _020848CC
	arm_func_end caseD_15

	arm_func_start caseD_16
caseD_16: ; 0x020845C8
	b _0208477C
	arm_func_end caseD_16

	arm_func_start caseD_17
caseD_17: ; 0x020845CC
	b _020848CC
	arm_func_end caseD_17

	arm_func_start caseD_18
caseD_18: ; 0x020845D0
	b _02084744
	arm_func_end caseD_18

	arm_func_start caseD_19
caseD_19: ; 0x020845D4
	b _02084768
	arm_func_end caseD_19

	arm_func_start caseD_1a
caseD_1a: ; 0x020845D8
	b _02084788
	arm_func_end caseD_1a

	arm_func_start caseD_1b
caseD_1b: ; 0x020845DC
	b _020848CC
	arm_func_end caseD_1b

	arm_func_start caseD_1c
caseD_1c: ; 0x020845E0
	b _020848CC
	arm_func_end caseD_1c

	arm_func_start caseD_1d
caseD_1d: ; 0x020845E4
	b _020848CC
	arm_func_end caseD_1d

	arm_func_start caseD_1e
caseD_1e: ; 0x020845E8
	b _020848CC
	arm_func_end caseD_1e

	arm_func_start caseD_1f
caseD_1f: ; 0x020845EC
	b _020848CC
	arm_func_end caseD_1f

	arm_func_start caseD_20
caseD_20: ; 0x020845F0
	b _020848CC
	arm_func_end caseD_20

	arm_func_start caseD_21
caseD_21: ; 0x020845F4
	b _020848CC
	arm_func_end caseD_21

	arm_func_start caseD_22
caseD_22: ; 0x020845F8
	b _020848CC
	arm_func_end caseD_22

	arm_func_start caseD_23
caseD_23: ; 0x020845FC
	b _020848CC
	arm_func_end caseD_23

	arm_func_start caseD_24
caseD_24: ; 0x02084600
	b _020847E8
	arm_func_end caseD_24

	arm_func_start caseD_25
caseD_25: ; 0x02084604
	b _020847FC
	arm_func_end caseD_25

	arm_func_start caseD_26
caseD_26: ; 0x02084608
	b _020848CC
	arm_func_end caseD_26

	arm_func_start caseD_27
caseD_27: ; 0x0208460C
	b _02084804
	arm_func_end caseD_27

	arm_func_start caseD_28
caseD_28: ; 0x02084610
	b _020848CC
	arm_func_end caseD_28

	arm_func_start caseD_29
caseD_29: ; 0x02084614
	b _020848CC
	arm_func_end caseD_29

	arm_func_start caseD_2a
caseD_2a: ; 0x02084618
	b _020848CC
	arm_func_end caseD_2a

	arm_func_start caseD_2b
caseD_2b: ; 0x0208461C
	b _020848CC
	arm_func_end caseD_2b

	arm_func_start caseD_2c
caseD_2c: ; 0x02084620
	b _0208481C
	arm_func_end caseD_2c

	arm_func_start caseD_2d
caseD_2d: ; 0x02084624
	b _02084828
	arm_func_end caseD_2d

	arm_func_start caseD_2e
caseD_2e: ; 0x02084628
	b _020848CC
	arm_func_end caseD_2e

	arm_func_start caseD_2f
caseD_2f: ; 0x0208462C
	b _02084834
	arm_func_end caseD_2f
_02084630:
	cmp r1, #0x65
	beq _02084870
	b _020848CC
_0208463C:
	cmp r1, #0x69
	bgt _02084654
	bge _020848B8
	cmp r1, #0x68
	beq _020848B0
	b _020848CC
_02084654:
	cmp r1, #0x6a
	beq _020848C4
	b _020848CC
_02084660:
	ldr r0, [r4]
	str r0, [r5, #0x60]
	b _020848D8
_0208466C:
	ldr r0, [r5, #4]
	mov r1, #8
	b _020846F0
_02084678:
	ldr r0, [r5, #4]
	mov r1, #9
	b _020846F0
_02084684:
	ldr r0, [r5, #8]
_02084688:
	str r0, [r4]
	b _020848D8
LAB_02084690:
	ldr r0, [r5, #4]
	bl FUN_02084ad0
	ldr r0, [r4]
	str r0, [r5, #0x24]
	b _020848D8
_020846A4:
	ldr r0, [r5, #0x24]
	b _02084688
_020846AC:
	ldr r4, [r4]
	add r2, sp, #4
	cmp r4, #0
	movlt r4, r3
	ldr r3, [r5]
	cmp r4, #0xa
	ldr r0, [r3]
	movgt r4, #0xa
	add r0, r0, r4, lsl #2
	ldr r0, [r0, #0x68]
	mov r1, #6
	str r0, [r5, #0x60]
	ldr r0, [r3]
	add r0, r0, r4, lsl #2
	ldr r0, [r0, #0x3c]
	str r0, [sp, #4]
_020846EC:
	ldr r0, [r5, #4]
_020846F0:
	bl FUN_02084ad0
	b _020848D8
_020846F8:
	ldr r0, [r5, #4]
	bl FUN_02084ad0
	ldr r1, [r5, #0x5c]
	ldr r0, [r5, #0x60]
	ldr r0, [r1, r0, lsl #2]
	cmp r0, #0
	beq _02084728
	ldr r2, [r5, #0x20]
	ldr r0, [r0, #0x34]
	ldr r1, [r5, #8]
	mul r0, r2, r0
	b _02084734
_02084728:
	ldr r0, [r5, #0x20]
	ldr r1, [r5, #8]
	lsl r0, r0, #2
_02084734:
	bl FUN_0201f9bc
	ldr r1, [r4]
	add r0, r1, r0
	b _02084688
_02084744:
	ldr r0, [r4]
	add r2, sp, #0
	str r0, [sp]
	str r0, [r5, #0x20]
	ldr r0, [sp]
	mov r1, #0x18
	asr r0, r0, #1
	str r0, [sp]
	b _020846EC
_02084768:
	ldr r0, [r5, #0x20]
	b _02084688
_02084770:
	ldr r0, [r5, #4]
	mov r1, #0x14
	b _020846F0
_0208477C:
	ldr r0, [r5, #4]
	mov r1, #0x16
	b _020846F0
_02084788:
	ldr r0, [r5, #0x18]
	mov r1, r3
	lsl r0, r0, #1
	cmp r0, #0
	ble _020847B4
_0208479C:
	ldr r0, [r5, #0x40]
	str r3, [r0, r1, lsl #2]
	ldr r0, [r5, #0x18]
	add r1, r1, #1
	cmp r1, r0, lsl #1
	blt _0208479C
_020847B4:
	mov r4, #0
_020847B8:
	ldr r0, [r5, #0x30]
	lsl r2, r4, #1
	strh r3, [r0, r2]
	ldr r0, [r5, #0x30]
	add r4, r4, #1
	ldrsh r1, [r0, r2]
	ldr r0, [r5, #0x2c]
	cmp r4, #0x40
	strh r1, [r0, r2]
	blt _020847B8
	strh r3, [r5, #0x50]
	b _020848D8
_020847E8:
	ldr r3, [r4]
	ldr r0, [r5, #4]
	mov r1, #0x24
	str r3, [r5, #0x58]
	b _020846F0
_020847FC:
	ldr r0, [r5, #0x58]
	b _02084688
_02084804:
	ldr r0, [r5, #4]
	mov r1, #0x27
	bl FUN_02084ad0
	ldr r0, [r4]
	lsl r0, r0, #1
	b _02084688
_0208481C:
	ldr r0, [r5, #4]
	mov r1, #0x2c
	b _020846F0
_02084828:
	ldr r0, [r5, #4]
	mov r1, #0x2d
	b _020846F0
_02084834:
	ldr r0, [r5, #4]
	mov r1, #0x2f
	b _020846F0
_02084840:
	ldr r0, [r5, #0x14]
	mov r1, r3
	cmp r0, #0
	ble _020848D8
_02084850:
	ldr r0, [r5, #0x44]
	ldr r0, [r0, r1, lsl #2]
	str r0, [r4, r1, lsl #2]
	ldr r0, [r5, #0x14]
	add r1, r1, #1
	cmp r1, r0
	blt _02084850
	b _020848D8
_02084870:
	ldr r0, [r5, #0x14]
	mov r2, #0
	cmp r0, #0
	ble _020848D8
_02084880:
	ldr r0, [r5, #0x48]
	lsl r1, r2, #1
	ldrsh r0, [r0, r1]
	add r2, r2, #1
	strh r0, [r4, r1]
	ldr r0, [r5, #0x14]
	cmp r2, r0
	blt _02084880
	b _020848D8
_020848A4:
	ldr r0, [r5, #4]
	mov r1, #0x67
	b _020846F0
_020848B0:
	str r4, [r5, #0x4c]
	b _020848D8
_020848B8:
	ldr r0, [r5, #4]
	mov r1, #0x69
	b _020846F0
_020848C4:
	ldr r0, [r5, #0x28]
	b _02084688
_020848CC:
	add sp, sp, #8
	mvn r0, #0
	pop {r3, r4, r5, pc}
_020848D8:
	mov r0, #0
	add sp, sp, #8
	pop {r3, r4, r5, pc}

	arm_func_start FUN_020848e4
FUN_020848e4: ; 0x020848E4
	mov r3, #0
	mov r1, #1
	str r3, [r0]
	str r2, [r0, #0x18]
	str r1, [r0, #0x10]
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r3, [r0, #0xc]
	str r3, [r0, #0x14]
	bx lr
	arm_func_end FUN_020848e4

	arm_func_start FUN_0208490c
FUN_0208490c: ; 0x0208490C
	bx lr
	arm_func_end FUN_0208490c

	arm_func_start FUN_02084910
FUN_02084910: ; 0x02084910
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r4, [sp, #0x28]
	ldr sb, [r1, #4]
	rsb r2, r4, #4
	and r2, r2, #3
	add r2, r4, r2
	add r4, r2, sb, lsl #2
	rsb r2, r4, #4
	and r2, r2, #3
	add r2, r4, r2
	add r2, r2, sb, lsl #2
	sub r6, r2, sb, lsl #2
	ldr r2, [r1, #0x10]
	cmp sb, #0
	sub r5, r4, sb, lsl #2
	ldr r8, [r1]
	ldr r7, [r1, #8]
	str r2, [sp]
	mov sl, #0
	ble _02084A28
	arm_func_end FUN_02084910
_02084960:
	ldr r2, [sp]
	cmp r2, #0
	beq _020849A8
	ldr r4, [r3, #0xc]
	ldr r2, [r3, #4]
	and fp, r4, #0x1f
	ldr r4, [r2]
	rsb r2, fp, #0x1f
	lsr r2, r4, r2
	cmp fp, #0x1f
	ldreq r4, [r3, #4]
	and r2, r2, #1
	addeq r4, r4, #4
	streq r4, [r3, #4]
	ldr r4, [r3, #0xc]
	add r4, r4, #1
	str r4, [r3, #0xc]
	b _020849AC
_020849A8:
	mov r2, #0
_020849AC:
	str r2, [r6, sl, lsl #2]
	ldr r2, [r3, #4]
	ldr r4, [r3, #0xc]
	ldr r2, [r2]
	and lr, r4, #0x1f
	ldr r4, [r1, #0xc]
	ldr ip, [r3, #0xc]
	rsb fp, lr, #0x20
	cmp fp, r4
	lslgt fp, r2, lr
	add ip, ip, r4
	rsbgt r2, r4, #0x20
	str ip, [r3, #0xc]
	lsrgt r2, fp, r2
	bgt _02084A18
	sub lr, r4, fp
	mov r4, #1
	lsl r4, r4, fp
	sub r4, r4, #1
	and r4, r2, r4
	ldr r2, [r3, #4]
	rsb fp, lr, #0x20
	add ip, r2, #4
	str ip, [r3, #4]
	ldr r2, [r2, #4]
	lsr r2, r2, fp
	orr r2, r2, r4, lsl lr
_02084A18:
	str r2, [r5, sl, lsl #2]
	add sl, sl, #1
	cmp sl, sb
	blt _02084960
_02084A28:
	cmp sb, #0
	mov r2, #0
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02084A34:
	ldr r1, [r6, r2, lsl #2]
	mov r3, #1
	cmp r1, #0
	subne r3, r3, #2
	cmp r3, #1
	mov r1, #0
	bne _02084A88
	cmp r8, #0
	ble _02084AC0
	mul r3, r8, r2
	add r3, r0, r3, lsl #2
_02084A60:
	ldr sl, [r5, r2, lsl #2]
	add r4, r7, r1
	mul sl, r8, sl
	ldrsb r4, [sl, r4]
	lsl r4, r4, #9
	str r4, [r3, r1, lsl #2]
	add r1, r1, #1
	cmp r1, r8
	blt _02084A60
	b _02084AC0
_02084A88:
	cmp r8, #0
	ble _02084AC0
	mul r3, r8, r2
	add r3, r0, r3, lsl #2
_02084A98:
	ldr sl, [r5, r2, lsl #2]
	add r4, r7, r1
	mul sl, r8, sl
	ldrsb r4, [sl, r4]
	lsl r4, r4, #9
	rsb r4, r4, #0
	str r4, [r3, r1, lsl #2]
	add r1, r1, #1
	cmp r1, r8
	blt _02084A98
_02084AC0:
	add r2, r2, #1
	cmp r2, sb
	blt _02084A34
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02084ad0
FUN_02084ad0: ; 0x02084AD0
	push {r3, lr}
	ldr r3, [r0]
	ldr r3, [r3, #0x24]
	blx r3
	pop {r3, pc}
	arm_func_end FUN_02084ad0

	arm_func_start FUN_02084ae4
FUN_02084ae4: ; 0x02084AE4
	cmp r1, #0
	beq _02084AF8
	cmp r1, #1
	beq _02084B04
	b _02084B38
	arm_func_end FUN_02084ae4
_02084AF8:
	ldr r0, [r0]
	str r0, [r2]
	b _02084B40
_02084B04:
	ldr r1, [r2]
	cmp r1, #0
	moveq r0, #5
	streq r0, [r2]
	beq _02084B40
	add r0, r0, r1, lsl #2
	ldr r0, [r0, #0x1c]
	cmp r0, #0
	mvneq r0, #0
	streq r0, [r2]
	ldrne r0, [r0, #0x34]
	strne r0, [r2]
	b _02084B40
_02084B38:
	mvn r0, #0
	bx lr
_02084B40:
	mov r0, #0
	bx lr

	arm_func_start FUN_02084b48
FUN_02084b48: ; 0x02084B48
	push {r4, lr}
	ldr r0, _02084B6C ; =0x020B9FD8
	mov r4, #0
	add r0, r0, #0x700
	strh r4, [r0, #0x1a]
	strh r4, [r0, #0x1c]
	bl FUN_02084c18
	mov r0, r4
	pop {r4, pc}
	.align 2, 0_02084B6C: .word 0x020B9FD8
	arm_func_end FUN_02084b48

	arm_func_start FUN_02084b70
FUN_02084b70: ; 0x02084B70
	push {r3, lr}
	bl FUN_02084cac
	mov r0, #0
	pop {r3, pc}
	arm_func_end FUN_02084b70

	arm_func_start FUN_02084b80
FUN_02084b80: ; 0x02084B80
	push {r3, lr}
	ldr r0, _02084BAC ; =0x020BA6D8
	ldrh r0, [r0, #0x1a]
	cmp r0, #0
	beq _02084BA4
	mov r0, #0
	mov r1, r0
	mov r2, r0
	bl FUN_02084d14
	arm_func_end FUN_02084b80
_02084BA4:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_02084BAC: .word 0x020BA6D8

	arm_func_start FUN_02084bb0
FUN_02084bb0: ; 0x02084BB0
	push {r3, lr}
	ldr r0, _02084BCC ; =0x020BC404
	ldrsb r1, [r0, #0x24]
	cmp r1, #0
	popeq {r3, pc}
	bl FUN_02085278
	pop {r3, pc}
	.align 2, 0_02084BCC: .word 0x020BC404
	arm_func_end FUN_02084bb0

	arm_func_start FUN_02084bd0
FUN_02084bd0: ; 0x02084BD0
	push {r3, r4, r5, lr}
	ldr r5, _02084C14 ; =0x020BC404
	ldrsb r0, [r5, #0x24]
	cmp r0, #0
	popeq {r3, r4, r5, pc}
	mov r4, #1
	mov r0, r5
	mov r2, r4
	mov r1, #0
	bl FUN_02085018
	mov r0, r5
	mov r1, r4
	mov r2, #3
	bl FUN_02085018
	mov r0, r5
	bl FUN_02085084
	pop {r3, r4, r5, pc}
	.align 2, 0_02084C14: .word 0x020BC404
	arm_func_end FUN_02084bd0

	arm_func_start FUN_02084c18
FUN_02084c18: ; 0x02084C18
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #8
	ldr r5, _02084C98 ; =0x020BC404
	mov r4, #0
	str r4, [r5]
	str r4, [r5, #8]
	strb r4, [r5, #0x24]
	strb r4, [r5, #0x25]
	mov r7, #0x400
	ldr r2, _02084C9C ; =0x78667473
	mov r0, r7
	strb r4, [r5, #0x26]
	mov r1, #0x10
	bl FUN_020753b8
	str r0, [r5, #0x34]
	ldr r6, _02084CA0 ; =0x020BC43C
	ldr r0, _02084CA4 ; =0x020BAFD8
	str r7, [sp]
	ldrb r2, [r0, #0xd1c]
	ldr r1, _02084CA8 ; =FUN_02085324
	mov r0, r6
	add r2, r2, #1
	str r2, [sp, #4]
	ldr r3, [r5, #0x34]
	mov r2, r4
	add r3, r3, #0x400
	bl FUN_02001948
	mov r0, r6
	bl FUN_02001ce0
	mov r0, r4
	add sp, sp, #8
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02084C98: .word 0x020BC404
_02084C9C: .word 0x78667473
_02084CA0: .word 0x020BC43C
_02084CA4: .word 0x020BAFD8
_02084CA8: .word FUN_02085324
	arm_func_end FUN_02084c18

	arm_func_start FUN_02084cac
FUN_02084cac: ; 0x02084CAC
	push {r4, r5, r6, r7, r8, lr}
	mov r8, #0
	mov r0, r8
	mov r1, r8
	mov r2, r8
	bl FUN_02084d14
	ldr r5, _02084D08 ; =0x020BC43C
	ldr r4, _02084D0C ; =0x020BC404
	mov r0, #1
	ldr r7, _02084D10 ; =0x04000208
	strb r0, [r4, #0x26]
	ldrh r6, [r7]
	mov r0, r5
	strh r8, [r7]
	bl FUN_02001ce0
	ldrh r0, [r7]
	mov r0, r5
	strh r6, [r7]
	bl FUN_02001bd8
	ldr r0, [r4, #0x34]
	bl FUN_020754fc
	mov r0, r8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02084D08: .word 0x020BC43C
_02084D0C: .word 0x020BC404
_02084D10: .word 0x04000208
	arm_func_end FUN_02084cac

	arm_func_start FUN_02084d14
FUN_02084d14: ; 0x02084D14
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldr r3, _02084FF0 ; =0x0000FFFF
	mov r7, r1
	ldr r8, _02084FF4 ; =0x020BC404
	mov sl, #0
	cmp r7, r3
	moveq r0, sl
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r7, #0
	ldrheq r1, [r8, #0x1c]
	cmpeq r1, #0
	moveq r0, sl
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r7, #0
	beq _02084D98
	cmp r0, #1
	blo _02084D74
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02084d14
_02084D74:
	tst r7, #0xff00
	bne _02084D98
	mvn r4, #0x17
	mov r1, #0
	mov r0, r4
	mov r2, r1
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02084D98:
	mov r1, #0xc
	mul r1, r0, r1
	cmp r2, #0
	ldrbne r6, [r2, #2]
	ldrbne r4, [r2]
	ldrbne r5, [r2, #1]
	moveq r6, #0
	ldr r0, _02084FF8 ; =0x020BA6F2
	moveq r4, r6
	strh r7, [r0, r1]
	add r1, r0, r1
	moveq r5, r6
	strh r4, [r1, #2]
	strh r5, [r1, #8]
	mov r0, r8
	strh r6, [r1, #0xa]
	bl FUN_02085278
	strb sl, [r8, #0x24]
	ldr r0, [r8]
	cmp r0, #0
	beq _02084DF4
	bl FUN_020754fc
	str sl, [r8]
_02084DF4:
	ldr r8, _02084FF4 ; =0x020BC404
	ldr r0, [r8, #8]
	cmp r0, #0
	beq _02084E0C
	bl FUN_020754fc
	str sl, [r8, #8]
_02084E0C:
	cmp r7, #0
	mov sl, #1
	mov r1, #0x7f
	bgt _02084E28
	cmp r7, #0
	beq _02084EDC
	b _02084ED4
_02084E28:
	sub r0, r7, #0x300
	cmp r0, #5

	arm_func_start switchD
switchD: ; 0x02084E30
	addls pc, pc, r0, lsl #2
	b _02084ED4
	arm_func_end switchD
_02084E38: ; jump table
	b LAB_02084e50 ; case 0

	arm_func_start caseD_301
caseD_301: ; 0x02084E3C
	b _02084E6C
	arm_func_end caseD_301

	arm_func_start caseD_302
caseD_302: ; 0x02084E40
	b _02084E80
	arm_func_end caseD_302

	arm_func_start caseD_303
caseD_303: ; 0x02084E44
	b _02084E94
	arm_func_end caseD_303

	arm_func_start caseD_304
caseD_304: ; 0x02084E48
	b _02084EA0
	arm_func_end caseD_304

	arm_func_start caseD_305
caseD_305: ; 0x02084E4C
	b _02084EB4
	arm_func_end caseD_305
LAB_02084e50:
	ldr r0, _02084FFC ; =FUN_020853c4
	cmp r5, #0
	moveq r7, #0
	strb r4, [r8, #0x1e]
_02084E60:
	str r0, [r8, #0x30]
	mov sb, #0
	b _02084EDC
_02084E6C:
	cmp r5, #0
	moveq r7, #0
	strb r1, [r8, #0x1e]
	ldr r0, _02085000 ; =FUN_0208541c
	b _02084EC4
_02084E80:
	cmp r5, #0
	moveq r7, #0
	strb r1, [r8, #0x1e]
	ldr r0, _02085004 ; =FUN_020854f4
	b _02084EC4
_02084E94:
	ldr r0, _02085008 ; =FUN_020855b0
	strb r1, [r8, #0x1e]
	b _02084E60
_02084EA0:
	cmp r5, #0
	moveq r7, #0
	strb r1, [r8, #0x1e]
	ldr r0, _0208500C ; =FUN_020855d8
	b _02084EC4
_02084EB4:
	ldr r0, _02085010 ; =FUN_020856c4
	cmp r5, #0
	moveq r7, #0
	strb r1, [r8, #0x1e]
_02084EC4:
	strb r4, [r8, #0x21]
	str r0, [r8, #0x30]
	mov sb, #1
	b _02084EDC
_02084ED4:
	mvn r0, #0x5f
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02084EDC:
	cmp r7, #0
	beq _02084FE8
	mov r0, #0xc0
	mul r3, r6, r0
	lsl r0, r5, #8
	add r1, r0, r0, lsr #31
	asr r4, r1, #1
	str r0, [r8, #0x10]
	add r1, r4, r4, lsr #31
	ldr r2, _02085014 ; =0x81020409
	str r4, [r8, #0x14]
	asr r1, r1, #1
	str r1, [r8, #0x18]
	smull r1, r4, r2, r3
	strh r7, [r8, #0x1c]
	add r4, r3, r4
	lsr r1, r3, #0x1f
	add r4, r1, r4, asr #6
	strb r6, [r8, #0x1f]
	add r1, r4, #0x40
	strh r1, [r8, #0x22]
	ldr r1, [r8]
	cmp r1, #0
	bne _02084F58
	mov r4, #0x20
	mov r1, r4
	bl FUN_0207529c
	movs r1, r0
	str r1, [r8]
	subeq r0, r4, #0xa0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
_02084F58:
	ldr r0, [r8, #0x14]
	cmp sb, #1
	add r0, r1, r0
	str r0, [r8, #4]
	bne _02084FB8
	ldr r0, [r8, #0x10]
	mov r1, #0x20
	bl FUN_0207529c
	str r0, [r8, #8]
	cmp r0, #0
	bne _02084FAC
	ldr r0, [r8]
	bl FUN_020754fc
	mov r1, #0
	sub r4, r1, #0x80
	mov r0, r4
	mov r2, r1
	str r1, [r8]
	bl FUN_02075144
	mov r0, r4
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02084FAC:
	ldr r1, [r8, #0x14]
	add r0, r0, r1
	str r0, [r8, #0xc]
_02084FB8:
	mov r1, #0
	mov r0, r8
	mov r2, sl
	strb r1, [r8, #0x20]
	bl FUN_02085018
	mov r0, r8
	mov r1, sl
	mov r2, #3
	bl FUN_02085018
	mov r0, r8
	bl FUN_02085084
	strb sl, [r8, #0x24]
_02084FE8:
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02084FF0: .word 0x0000FFFF
_02084FF4: .word 0x020BC404
_02084FF8: .word 0x020BA6F2
_02084FFC: .word FUN_020853c4
_02085000: .word FUN_0208541c
_02085004: .word FUN_020854f4
_02085008: .word FUN_020855b0
_0208500C: .word FUN_020855d8
_02085010: .word FUN_020856c4
_02085014: .word 0x81020409

	arm_func_start FUN_02085018
FUN_02085018: ; 0x02085018
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	ldr ip, _0208507C ; =0x020BA720
	mov r3, #0x15c
	mla r7, r2, r3, ip
	ldr r6, _02085080 ; =0x04000208
	mov sb, r0
	ldrh r5, [r6]
	mov r4, #0
	mov r0, r7
	mov r8, r1
	strh r4, [r6]
	bl FUN_0207b5b8
	add r0, r7, #0x3c
	sub r1, r4, #0xc0000001
	bl FUN_0207bc44
	add r0, r7, #0x5c
	bl FUN_0207bdb0
	strh r4, [r7, #6]
	mov r0, #0x10
	strb r0, [r7, #0x14e]
	add r0, sb, r8, lsl #2
	str r7, [r0, #0x28]
	ldrh r0, [r6]
	strh r5, [r6]
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_0208507C: .word 0x020BA720
_02085080: .word 0x04000208
	arm_func_end FUN_02085018

	arm_func_start FUN_02085084
FUN_02085084: ; 0x02085084
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x10
	mov r4, r0
	ldr r6, [r4, #0x18]
	ldrh r3, [r4, #0x1c]
	add r5, r6, #0x20
	lsr r6, r6, #1
	sub r3, r3, #0x300
	mov r7, #0
	lsr r5, r5, #1
	lsl r8, r6, #9
	lsl r6, r5, #9
	lsr r5, r8, #5
	strb r7, [r4, #0x20]
	cmp r3, #7
	lsr r6, r6, #5
	mov r8, #1
	arm_func_end FUN_02085084

	arm_func_start switchD
switchD: ; 0x020850C8
	addls pc, pc, r3, lsl #2
	b _02085110
	arm_func_end switchD
_020850D0: ; jump table
	b LAB_020850f0 ; case 0

	arm_func_start caseD_301
caseD_301: ; 0x020850D4
	b _02085100
	arm_func_end caseD_301

	arm_func_start caseD_302
caseD_302: ; 0x020850D8
	b _02085100
	arm_func_end caseD_302

	arm_func_start caseD_303
caseD_303: ; 0x020850DC
	b _02085104
	arm_func_end caseD_303

	arm_func_start caseD_304
caseD_304: ; 0x020850E0
	b _02085104
	arm_func_end caseD_304

	arm_func_start caseD_305
caseD_305: ; 0x020850E4
	b _02085104
	arm_func_end caseD_305

	arm_func_start caseD_306
caseD_306: ; 0x020850E8
	b _02085104
	arm_func_end caseD_306

	arm_func_start caseD_307
caseD_307: ; 0x020850EC
	b _02085104
	arm_func_end caseD_307
LAB_020850f0:
	mov r0, r7
	mov r1, r7
	mov r2, r7
	b _02085110
_02085100:
	b _02085104
_02085104:
	mov r0, r8
	mov r2, r0
	mov r1, #2
_02085110:
	mov r3, r2
	bl FUN_0200baac
	mov sb, #0
	stm sp, {r8, sb}
	str sb, [sp, #8]
	ldr r3, [r4, #0x14]
	ldr r2, [r4]
	mov r0, sb
	mov r1, sb
	lsr r3, r3, #2
	bl FUN_0200b89c
	stm sp, {r8, sb}
	str sb, [sp, #8]
	ldr r1, [r4, #0x14]
	ldr r2, [r4, #4]
	lsr r3, r1, #2
	mov r0, r8
	mov r1, sb
	bl FUN_0200b89c
	ldr r3, _02085268 ; =LAB_02085310
	mov r1, r6
	mov r2, r5
	mov r0, #4
	str r4, [sp]
	bl FUN_0200b8dc
	ldr r1, _0208526C ; =0x04000208
	ldrh r0, [r1]
	str r0, [sp, #0xc]
	strh sb, [r1]
	mov r7, sb
	mvn r6, #0xc0000000
	mov r5, #1
	mov fp, #0x1000
_02085194:
	add r0, r4, sb, lsl #2
	ldr sl, [r0, #0x28]
	cmp sb, #0
	strh fp, [sl, #4]
	strb r8, [sl, #0xc]
	strb r8, [sl, #0x1f]
	ldreq r0, [r4]
	mov r1, r6
	ldrne r0, [r4, #4]
	tst sb, #1
	str r0, [sl, #0x30]
	str r7, [sl, #0x34]
	ldr r0, [r4, #0x14]
	lsr r0, r0, #2
	str r0, [sl, #0x38]
	mov r0, #1
	strb r0, [sl, #0x21]
	mov r0, #0x200
	str r0, [sl, #0x13c]
	ldrb r0, [r4, #0x1e]
	str r0, [sl, #0x140]
	moveq r0, r7
	movne r0, #0x7f
	str r0, [sl, #0x144]
	add r0, sl, #0x3c
	bl FUN_0207bc44
	add r0, sl, #0x5c
	bl FUN_0207bdb0
	add sb, sb, #1
	strh r5, [sl, #6]
	cmp sb, #2
	blt _02085194
	ldr r1, _02085270 ; =0x020B9FD8
	ldr r0, _02085274 ; =0x020BC404
	ldrb r3, [r1, #0x745]
	strb r5, [r0, #0x25]
	ldr r2, _0208526C ; =0x04000208
	and r0, r3, #0xef
	strb r0, [r1, #0x745]
	ldrb r0, [r1, #0x747]
	and r0, r0, #0xfc
	strb r0, [r1, #0x747]
	ldrb r0, [r1, #0x744]
	orr r0, r0, #0x10
	strb r0, [r1, #0x744]
	ldrb r0, [r1, #0x746]
	orr r0, r0, #3
	strb r0, [r1, #0x746]
	ldrh r0, [r2]
	ldr r0, [sp, #0xc]
	strh r0, [r2]
	add sp, sp, #0x10
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02085268: .word LAB_02085310
_0208526C: .word 0x04000208
_02085270: .word 0x020B9FD8
_02085274: .word 0x020BC404

	arm_func_start FUN_02085278
FUN_02085278: ; 0x02085278
	push {r4, r5, r6, lr}
	ldr r1, _02085304 ; =0x020BC404
	mov r6, r0
	ldrsb r0, [r1, #0x25]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r5, #0
	ldr r0, _02085308 ; =0x04000208
	strb r5, [r1, #0x25]
	ldrh r4, [r0]
	strh r5, [r0]
	arm_func_end FUN_02085278
_020852A4:
	add r0, r6, r5, lsl #2
	ldr r0, [r0, #0x28]
	cmp r0, #0
	beq _020852B8
	bl FUN_0207b5b8
_020852B8:
	add r5, r5, #1
	cmp r5, #2
	blt _020852A4
	ldr ip, _0208530C ; =0x020B9FD8
	mov r0, #0
	ldrb r2, [ip, #0x745]
	ldr lr, _02085308 ; =0x04000208
	mov r1, r0
	orr r2, r2, #0x10
	strb r2, [ip, #0x745]
	ldrb r5, [ip, #0x747]
	mov r2, r0
	mov r3, r0
	orr r5, r5, #3
	strb r5, [ip, #0x747]
	ldrh ip, [lr]
	strh r4, [lr]
	bl FUN_0200baac
	pop {r4, r5, r6, pc}
	.align 2, 0_02085304: .word 0x020BC404
_02085308: .word 0x04000208
_0208530C: .word 0x020B9FD8

	arm_func_start LAB_02085310
LAB_02085310: ; 0x02085310
	ldr r0, _0208531C ; =0x020BC43C
	ldr ip, _02085320 ; =FUN_02001ce0
	bx ip
	.align 2, 0_0208531C: .word 0x020BC43C
_02085320: .word FUN_02001ce0
	arm_func_end LAB_02085310

	arm_func_start FUN_02085324
FUN_02085324: ; 0x02085324
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov fp, #0
	ldr r5, _020853C0 ; =0x020BC404
	mov r4, #1
	mov r6, fp
	arm_func_end FUN_02085324
_02085338:
	mov r0, r6
	bl FUN_02001c28
	ldrsb r0, [r5, #0x26]
	cmp r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldrsb r0, [r5, #0x25]
	cmp r0, #1
	bne _02085338
	ldrb r7, [r5, #0x20]
	ldr sl, [r5, #0x18]
	ldr sb, [r5]
	cmp r7, #1
	ldr r8, [r5, #4]
	addeq sb, sb, sl
	addeq r8, r8, sl
	ldr ip, [r5, #0x30]
	mov r0, r5
	mov r1, sb
	mov r2, r8
	mov r3, sl
	blx ip
	mov r0, sb
	mov r1, sl
	bl FUN_020026d0
	mov r0, r8
	mov r1, sl
	bl FUN_020026d0
	bl FUN_020026f4
	mov r0, r4
	cmp r7, #0
	movne r0, fp
	strb r0, [r5, #0x20]
	b _02085338
_020853BC:
	.byte 0xF8, 0x8F, 0xBD, 0xE8
_020853C0: .word 0x020BC404

	arm_func_start FUN_020853c4
FUN_020853c4: ; 0x020853C4
	push {r3, lr}
	ldrb r0, [r0, #0x1f]
	asr ip, r3, #1
	cmp ip, #0
	add lr, r0, #0x80
	pople {r3, pc}
	arm_func_end FUN_020853c4
_020853DC:
	ldrsh r0, [r1]
	sub ip, ip, #1
	cmp ip, #0
	mul r3, r0, lr
	asr r0, r3, #7
	add r0, r3, r0, lsr #24
	asr r0, r0, #8
	strh r0, [r1], #2
	ldrsh r0, [r2]
	mul r3, r0, lr
	asr r0, r3, #7
	add r0, r3, r0, lsr #24
	asr r0, r0, #8
	strh r0, [r2], #2
	bgt _020853DC
	pop {r3, pc}

	arm_func_start FUN_0208541c
FUN_0208541c: ; 0x0208541C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldrb r5, [r0, #0x20]
	ldr lr, [r0, #8]
	ldr r4, [r0, #0xc]
	cmp r5, #1
	biceq r5, r3, #1
	ldrh r6, [r0, #0x22]
	ldrb r7, [r0, #0x21]
	addeq lr, lr, r5
	addeq r4, r4, r5
	asr r5, r3, #1
	cmp r5, #0
	pople {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r3, #0x8000
	rsb r3, r3, #0
	lsr ip, r3, #0x11
	arm_func_end FUN_0208541c
_0208545C:
	ldrsh r8, [lr]
	ldrsh r0, [r1]
	sub r5, r5, #1
	mul sl, r8, r6
	mul sb, sl, r7
	asr r8, sl, #7
	add r8, sl, r8, lsr #24
	asr r8, r8, #8
	add r8, r8, r0, asr #8
	add r0, r0, sb, asr #7
	cmp r0, r3, lsr #17
	strh r8, [lr]
	movgt r0, ip
	bgt _0208549C
	cmp r0, r3
	movlt r0, r3
_0208549C:
	strh r0, [r1], #2
	ldrsh r8, [r4]
	ldrsh r0, [r2]
	add lr, lr, #2
	mul sl, r8, r6
	mul sb, sl, r7
	asr r8, sl, #7
	add r8, sl, r8, lsr #24
	asr r8, r8, #8
	add r8, r8, r0, asr #8
	add r0, r0, sb, asr #7
	cmp r0, r3, lsr #17
	strh r8, [r4]
	movgt r0, ip
	bgt _020854E0
	cmp r0, r3
	movlt r0, r3
_020854E0:
	cmp r5, #0
	strh r0, [r2], #2
	add r4, r4, #2
	bgt _0208545C
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_020854f4
FUN_020854f4: ; 0x020854F4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldrb r4, [r0, #0x20]
	ldr lr, [r0, #8]
	ldrh r5, [r0, #0x22]
	cmp r4, #1
	biceq r4, r3, #1
	addeq lr, lr, r4
	asr r4, r3, #1
	ldrb r6, [r0, #0x21]
	cmp r4, #0
	pople {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, #0x8000
	rsb r0, r0, #0
	lsr r3, r0, #0x11
	arm_func_end FUN_020854f4
_0208552C:
	ldrsh r8, [lr]
	ldrsh ip, [r1]
	ldrsh r7, [r2]
	mul sb, r8, r5
	mul sl, sb, r6
	asr r8, sb, #7
	add sb, sb, r8, lsr #24
	asr r8, sl, #6
	add sl, sl, r8, lsr #25
	add r8, ip, sl, asr #7
	cmp r8, r0, lsr #17
	add ip, ip, r7
	asr sb, sb, #8
	add sb, sb, ip, asr #9
	strh sb, [lr]
	sub r4, r4, #1
	movgt r8, r3
	bgt _0208557C
	cmp r8, r0
	movlt r8, r0
_0208557C:
	add r7, r7, sl, asr #7
	cmp r7, r0, lsr #17
	strh r8, [r1]
	movgt r7, r3
	bgt _02085598
	cmp r7, r0
	movlt r7, r0
_02085598:
	cmp r4, #0
	strh r7, [r2], #2
	add r1, r1, #2
	add lr, lr, #2
	bgt _0208552C
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_020855b0
FUN_020855b0: ; 0x020855B0
	asr r2, r3, #1
	cmp r2, #0
	bxle lr
	arm_func_end FUN_020855b0
_020855BC:
	ldrsh r0, [r1]
	sub r2, r2, #1
	cmp r2, #0
	rsb r0, r0, #0
	strh r0, [r1], #2
	bgt _020855BC
	bx lr

	arm_func_start FUN_020855d8
FUN_020855d8: ; 0x020855D8
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldrb r5, [r0, #0x20]
	ldr lr, [r0, #8]
	ldr r4, [r0, #0xc]
	cmp r5, #1
	biceq r5, r3, #1
	ldrh r6, [r0, #0x22]
	ldrb r7, [r0, #0x21]
	addeq lr, lr, r5
	addeq r4, r4, r5
	asr r5, r3, #1
	cmp r5, #0
	pople {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r3, #0x8000
	rsb r3, r3, #0
	lsr ip, r3, #0x11
	arm_func_end FUN_020855d8
_02085618:
	ldrsh r8, [lr]
	ldrsh r0, [r1]
	sub r5, r5, #1
	mul sl, r8, r6
	mul sb, sl, r7
	asr r8, sl, #7
	add r8, sl, r8, lsr #24
	asr r8, r8, #8
	add r8, r8, r0, asr #8
	add r0, r0, sb, asr #7
	cmp r0, r3, lsr #17
	strh r8, [lr]
	movgt r0, ip
	bgt _02085658
	cmp r0, r3
	movlt r0, r3
_02085658:
	strh r0, [r1], #2
	ldrsh r8, [r4]
	ldrsh r0, [r2]
	add lr, lr, #2
	mul sl, r8, r6
	mul sb, sl, r7
	asr r8, sl, #7
	add r8, sl, r8, lsr #24
	asr r8, r8, #8
	add r8, r8, r0, asr #8
	add r0, r0, sb, asr #7
	cmp r0, r3, lsr #17
	strh r8, [r4]
	movgt r0, ip
	bgt _0208569C
	cmp r0, r3
	movlt r0, r3
_0208569C:
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	lsl r0, r0, #0x10
	asr r0, r0, #0x10
	rsb r0, r0, #0
	cmp r5, #0
	strh r0, [r2], #2
	add r4, r4, #2
	bgt _02085618
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_020856c4
FUN_020856c4: ; 0x020856C4
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	ldrb r4, [r0, #0x20]
	ldr lr, [r0, #8]
	ldrh r5, [r0, #0x22]
	cmp r4, #1
	biceq r4, r3, #1
	addeq lr, lr, r4
	asr r4, r3, #1
	ldrb r6, [r0, #0x21]
	cmp r4, #0
	pople {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, #0x8000
	rsb r0, r0, #0
	lsr r3, r0, #0x11
	arm_func_end FUN_020856c4
_020856FC:
	ldrsh r8, [lr]
	ldrsh ip, [r1]
	ldrsh r7, [r2]
	mul sb, r8, r5
	mul sl, sb, r6
	asr r8, sb, #7
	add sb, sb, r8, lsr #24
	add r8, ip, sl, asr #7
	cmp r8, r0, lsr #17
	add ip, ip, r7
	asr sb, sb, #8
	add sb, sb, ip, asr #9
	strh sb, [lr]
	sub r4, r4, #1
	movgt r8, r3
	bgt _02085744
	cmp r8, r0
	movlt r8, r0
_02085744:
	add r7, r7, sl, asr #7
	cmp r7, r0, lsr #17
	strh r8, [r1]
	movgt r7, r3
	bgt _02085760
	cmp r7, r0
	movlt r7, r0
_02085760:
	lsl r7, r7, #0x10
	lsr r7, r7, #0x10
	lsl r7, r7, #0x10
	asr r7, r7, #0x10
	rsb r7, r7, #0
	cmp r4, #0
	strh r7, [r2], #2
	add lr, lr, #2
	add r1, r1, #2
	bgt _020856FC
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_0208578c
FUN_0208578c: ; 0x0208578C
	push {r3, r4, r5, lr}
	mov r4, r1
	mov r5, r0
	ldr r1, _020857C8 ; =0x6F666966
	mov r0, r4
	bl FUN_0207dbf4
	cmp r0, #0
	mvneq r0, #0
	popeq {r3, r4, r5, pc}
	str r0, [r5]
	mov r0, r5
	str r4, [r5, #4]
	bl FUN_020857f4
	mov r0, r4
	pop {r3, r4, r5, pc}
	.align 2, 0_020857C8: .word 0x6F666966
	arm_func_end FUN_0208578c

	arm_func_start FUN_020857cc
FUN_020857cc: ; 0x020857CC
	push {r4, lr}
	mov r4, r0
	ldr r0, [r4]
	cmp r0, #0
	popeq {r4, pc}
	bl FUN_0207dc70
	mov r0, #0
	str r0, [r4]
	str r0, [r4, #4]
	pop {r4, pc}
	arm_func_end FUN_020857cc

	arm_func_start FUN_020857f4
FUN_020857f4: ; 0x020857F4
	ldr r1, [r0]
	cmp r1, #0
	movne r1, #0
	strne r1, [r0, #0xc]
	strne r1, [r0, #0x10]
	strne r1, [r0, #8]
	bx lr
	arm_func_end FUN_020857f4

	arm_func_start FUN_02085810
FUN_02085810: ; 0x02085810
	push {r4, r5, r6, r7, r8, lr}
	mov r6, r2
	mov r8, r0
	cmp r6, #0
	mov r7, r1
	movle r0, #0
	pople {r4, r5, r6, r7, r8, pc}
	ldr r1, [r8, #4]
	ldr r0, [r8, #8]
	sub r3, r1, r0
	cmp r3, r6
	movlt r0, #0
	poplt {r4, r5, r6, r7, r8, pc}
	ldr r3, [r8, #0xc]
	add r0, r0, r6
	sub r4, r1, r3
	str r0, [r8, #8]
	mov r5, r6
	cmp r4, r6
	ldr r1, [r8]
	mov r0, r7
	bge _02085890
	mov r2, r4
	add r1, r1, r3
	bl FUN_020078c8
	sub r6, r6, r4
	ldr r1, [r8]
	mov r2, r6
	add r0, r7, r4
	bl FUN_020078c8
	str r6, [r8, #0xc]
	b _020858B4
	arm_func_end FUN_02085810
_02085890:
	add r1, r1, r3
	bl FUN_020078c8
	ldr r1, [r8, #0xc]
	ldr r0, [r8, #4]
	add r1, r1, r6
	cmp r1, r0
	str r1, [r8, #0xc]
	moveq r0, #0
	streq r0, [r8, #0xc]
_020858B4:
	mov r0, r5
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_020858bc
FUN_020858bc: ; 0x020858BC
	push {r4, r5, r6, r7, r8, lr}
	mov r8, r0
	ldr r0, [r8, #8]
	mov r6, r2
	mov r7, r1
	cmp r0, r6
	bge _020858EC
	cmp r0, #0
	cmpne r3, #0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, pc}
	mov r6, r0
	arm_func_end FUN_020858bc
_020858EC:
	ldr r3, [r8, #0x10]
	ldmib r8, {r0, r1}
	sub r4, r0, r3
	sub r1, r1, r6
	str r1, [r8, #8]
	mov r5, r6
	cmp r4, r6
	ldr r0, [r8]
	mov r1, r7
	bge _0208593C
	mov r2, r4
	add r0, r0, r3
	bl FUN_020078c8
	sub r6, r6, r4
	ldr r0, [r8]
	mov r2, r6
	add r1, r7, r4
	bl FUN_020078c8
	str r6, [r8, #0x10]
	b _02085964
_0208593C:
	mov r2, r6
	add r0, r0, r3
	bl FUN_020078c8
	ldr r1, [r8, #0x10]
	ldr r0, [r8, #4]
	add r1, r1, r6
	cmp r1, r0
	str r1, [r8, #0x10]
	moveq r0, #0
	streq r0, [r8, #0x10]
_02085964:
	mov r0, r5
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_0208596c
FUN_0208596c: ; 0x0208596C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov r4, r2
	add r2, r4, #0xff
	add r3, r2, #0x3f00
	asr r2, r3, #0xd
	add r2, r3, r2, lsr #18
	asr r6, r2, #0xe
	mov r7, #0
	mov sl, r0
	mov sb, r1
	mov r8, r7
	cmp r6, #0
	ble _020859D0
	mov r5, #0x4000
	arm_func_end FUN_0208596c
_020859A4:
	mov r2, r5
	cmp r4, #0x4000
	movlt r2, r4
	mov r0, sl
	add r1, sb, r8, lsl #14
	sub r4, r4, r2
	bl FUN_0200defc
	add r8, r8, #1
	cmp r8, r6
	add r7, r7, r0
	blt _020859A4
_020859D0:
	mov r0, r7
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_020859d8
FUN_020859d8: ; 0x020859D8
	mov r3, r0
	mov r2, r1
	ldr r0, _020859F0 ; =0x020BC738
	ldr ip, _020859F4 ; =FUN_0200aa6c
	mov r1, r3
	bx ip
	.align 2, 0_020859F0: .word 0x020BC738
_020859F4: .word FUN_0200aa6c
	arm_func_end FUN_020859d8

	arm_func_start FUN_020859f8
FUN_020859f8: ; 0x020859F8
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, r7, lr}
	sub sp, sp, #0x48
	add r4, sp, #0
	mov r7, r0
	mov r0, r4
	mov r5, r3
	ldr r6, [sp, #0x70]
	bl FUN_0200dbf0
	add r1, sp, #0x64
	mov r0, r4
	ldm r1, {r1, r2}
	bl FUN_0200dd30
	cmp r0, #0
	bne _02085A38
	bl FUN_02004160
	arm_func_end FUN_020859f8
_02085A38:
	cmp r6, #0
	bgt _02085A4C
	add r0, sp, #0
	bl thunk_FUN_0200de20
	mov r6, r0
_02085A4C:
	cmp r5, #0
	ble _02085A64
	add r0, sp, #0
	mov r1, r5
	mov r2, #0
	bl FUN_0200ded0
_02085A64:
	ldr r0, [r7]
	cmp r0, #0
	bne _02085A80
	mov r0, r6
	mvn r1, #0
	bl FUN_020866d8
	str r0, [r7]
_02085A80:
	add r5, sp, #0
	ldr r1, [r7]
	mov r0, r5
	mov r2, r6
	bl FUN_0208596c
	mov r4, r0
	mov r0, r5
	bl FUN_0200de0c
	mov r0, r4
	add sp, sp, #0x48
	pop {r3, r4, r5, r6, r7, lr}
	add sp, sp, #0x10
	bx lr

	arm_func_start FUN_02085ab4
FUN_02085ab4: ; 0x02085AB4
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x50
	ldr r6, _02085BB4 ; =0x020BC504
	add r0, sp, #8
	ldr sl, [r6, #8]
	mov sb, #0
	bl FUN_0200dbf0
	ldr r5, _02085BB8 ; =0x92492493
	add fp, sp, #4
	mov r7, sb
	mov r8, #1
	mov r4, #0x38
	arm_func_end FUN_02085ab4
_02085AE4:
	mov r0, r8
	bl FUN_02001eb0
	ldr r0, [sl]
	cmp r0, #0
	beq _02085AE4
	ldr r1, [sl, #4]
	cmp r1, #0
	moveq r1, r0
	str r1, [sp, #4]
	ldr r1, [sl, #0x18]
	mov r0, fp
	str r1, [sp]
	add r1, sl, #0xc
	ldr r3, [sl, #0x14]
	ldm r1, {r1, r2}
	bl FUN_020859f8
	ldr r0, [sl, #4]
	cmp r0, #0
	beq _02085B88
	ldr r0, [sl, #0x1c]
	and r0, r0, #0xf0
	cmp r0, #0x10
	beq _02085B4C
	cmp r0, #0x20
	beq _02085B5C
	b _02085B6C
_02085B4C:
	ldr r0, [sp, #4]
	ldr r1, [sl]
	bl LzPkbDecompression
	b _02085B70
_02085B5C:
	ldr r0, [sp, #4]
	ldr r1, [sl]
	bl UnkPkbDecompression
	b _02085B70
_02085B6C:
	bl FUN_02004160
_02085B70:
	ldr r0, [sl, #4]
	bl FUN_02086738
	ldr r1, [sl, #0x1c]
	ldr r0, [sl]
	lsr r1, r1, #8
	bl FUN_020026d0
_02085B88:
	add r0, sb, #1
	smull r1, sb, r5, r0
	str r7, [sl]
	add sb, r0, sb
	lsr r1, r0, #0x1f
	add sb, r1, sb, asr #5
	smull r1, r2, r4, sb
	ldr r2, [r6, #8]
	sub sb, r0, r1
	add sl, r2, sb, lsl #5
	b _02085AE4
	.align 2, 0_02085BB4: .word 0x020BC504
_02085BB8: .word 0x92492493

	arm_func_start FUN_02085bbc
FUN_02085bbc: ; 0x02085BBC
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x48
	add r4, sp, #0
	mov r8, r0
	mov r7, r1
	mov r0, r4
	mov r5, r2
	mov r6, r3
	bl FUN_0200dbf0
	mov r0, r4
	mov r1, r7
	bl FUN_0200dfc8
	cmp r0, #0
	bne _02085BF8
	bl FUN_02004160
	arm_func_end FUN_02085bbc
_02085BF8:
	cmp r6, #0
	bgt _02085C0C
	add r0, sp, #0
	bl thunk_FUN_0200de20
	mov r6, r0
_02085C0C:
	cmp r5, #0
	ble _02085C24
	add r0, sp, #0
	mov r1, r5
	mov r2, #0
	bl FUN_0200ded0
_02085C24:
	ldr r0, [r8]
	cmp r0, #0
	bne _02085C40
	mov r0, r6
	mvn r1, #0
	bl FUN_020866d8
	str r0, [r8]
_02085C40:
	add r5, sp, #0
	ldr r1, [r8]
	mov r0, r5
	mov r2, r6
	bl FUN_0208596c
	mov r4, r0
	mov r0, r5
	bl FUN_0200de0c
	mov r0, r4
	add sp, sp, #0x48
	pop {r4, r5, r6, r7, r8, pc}

	arm_func_start FUN_02085c6c
FUN_02085c6c: ; 0x02085C6C
	push {r3, r4, r5, lr}
	ldr r1, _02085CDC ; =0x020BC504
	mov r5, r0
	ldr r2, [r1, #8]
	ldr r1, [r1]
	ldr r0, [r2, r1, lsl #5]
	add r4, r2, r1, lsl #5
	cmp r0, #0
	beq _02085C94
	bl FUN_02004160
	arm_func_end FUN_02085c6c
_02085C94:
	cmp r5, #0
	ldrne r0, _02085CDC ; =0x020BC504
	ldr r3, _02085CDC ; =0x020BC504
	ldrne r0, [r0]
	ldr r1, _02085CE0 ; =0x92492493
	strbne r0, [r5]
	ldr r0, [r3]
	mov r2, #0x38
	add r5, r0, #1
	smull r0, ip, r1, r5
	add ip, r5, ip
	lsr r0, r5, #0x1f
	add ip, r0, ip, asr #5
	smull r0, r1, r2, ip
	sub ip, r5, r0
	mov r0, r4
	str ip, [r3]
	pop {r3, r4, r5, pc}
	.align 2, 0_02085CDC: .word 0x020BC504
_02085CE0: .word 0x92492493

	arm_func_start FUN_02085ce4
FUN_02085ce4: ; 0x02085CE4
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r1
	ldr r1, [r6]
	mov r7, r0
	lsl r0, r1, #0x18
	mov r4, r3
	lsrs r0, r0, #0x1c
	mov r5, r2
	ldr r0, [r4]
	bne _02085D38
	cmp r0, #0
	strne r0, [r7]
	bne _02085D2C
	mov r0, r5
	mvn r1, #0
	bl FUN_020866d8
	str r0, [r7]
	str r0, [r4]
	arm_func_end FUN_02085ce4
_02085D2C:
	mov r0, #0
	str r0, [r7, #4]
	b _02085D70
_02085D38:
	cmp r0, #0
	strne r0, [r7]
	bne _02085D58
	lsr r0, r1, #8
	mvn r1, #0
	bl FUN_020866d8
	str r0, [r7]
	str r0, [r4]
_02085D58:
	ldr r1, _02085D78 ; =0x00000101
	mov r0, r5
	bl FUN_020866d8
	str r0, [r7, #4]
	ldr r0, [r6]
	lsr r5, r0, #8
_02085D70:
	mov r0, r5
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02085D78: .word 0x00000101

	arm_func_start FUN_02085d7c
FUN_02085d7c: ; 0x02085D7C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x58
	mov r8, r0
	add r0, sp, #4
	mov r7, r1
	mov r6, r2
	mov r5, r3
	ldr r4, [sp, #0x78]
	bl FUN_0200dc64
	cmp r0, #0
	bne _02085DAC
	bl FUN_02004160
	arm_func_end FUN_02085d7c
_02085DAC:
	add sb, sp, #0x10
	mov r0, sb
	bl FUN_0200dbf0
	add r1, sp, #4
	mov r0, sb
	ldm r1, {r1, r2}
	bl FUN_0200dd30
	cmp r0, #0
	bne _02085DD4
	bl FUN_02004160
_02085DD4:
	add sl, sp, #0x10
	mov r0, sl
	bl thunk_FUN_0200de20
	mov sb, r0
	mov r0, sl
	bl FUN_0200de0c
	mov r1, #0
	cmp r4, #0
	movle r4, sb
	mov r0, r6
	str r1, [sp, #0xc]
	bl FUN_02085c6c
	add r1, sp, #0xc
	mov r2, r4
	mov r3, r8
	str r7, [sp]
	mov r6, r0
	bl FUN_02085ce4
	ldr r1, [sp, #4]
	str r1, [r6, #0xc]
	ldr r1, [sp, #8]
	str r1, [r6, #0x10]
	str r5, [r6, #0x14]
	str r4, [r6, #0x18]
	ldr r1, [sp, #0xc]
	str r1, [r6, #0x1c]
	ldr r1, [r6]
	str r1, [r6, #8]
	add sp, sp, #0x58
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02085e4c
FUN_02085e4c: ; 0x02085E4C
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x104
	mov r4, r1
	mov r5, r0
	ldr r1, _02085F3C ; =0x020938B8
	add r0, sp, #0x84
	mov r2, r4
	bl FUN_02015184
	ldr r1, _02085F40 ; =0x020938C0
	add r0, sp, #4
	mov r2, r4
	bl FUN_02015184
	cmp r5, #0
	moveq r5, #0
	str r5, [sp]
	ldr r4, _02085F44 ; =0x020BC5D0
	mov r5, #0
	mov r0, #0x14
	arm_func_end FUN_02085e4c
_02085E94:
	mul r6, r5, r0
	ldr r1, [r4, r6]
	add r2, r4, r6
	cmp r1, #0
	ldreq r1, [r2, #4]
	cmpeq r1, #0
	bne _02085F20
	mov r7, #0
	add r0, sp, #0
	add r1, sp, #0x84
	mov r2, r7
	mov r3, r7
	bl FUN_02085bbc
	cmp r0, #0
	addlt sp, sp, #0x104
	sublt r0, r7, #1
	poplt {r4, r5, r6, r7, pc}
	ldr r2, _02085F48 ; =0x020BC5D4
	mov r3, #1
	str r3, [r2, r6]
	lsr r3, r0, #4
	ldr r1, _02085F4C ; =0x020BC5E2
	add r0, r4, r6
	strh r3, [r1, r6]
	ldr r2, [sp]
	add r1, sp, #4
	add r0, r0, #8
	str r2, [r4, r6]
	bl FUN_0200dc64
	cmp r0, #0
	bne _02085F14
	bl FUN_02004160
_02085F14:
	add sp, sp, #0x104
	mov r0, r5
	pop {r4, r5, r6, r7, pc}
_02085F20:
	add r5, r5, #1
	cmp r5, #0x12
	blt _02085E94
	bl FUN_02004160
	mvn r0, #0
	add sp, sp, #0x104
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_02085F3C: .word 0x020938B8
_02085F40: .word 0x020938C0
_02085F44: .word 0x020BC5D0
_02085F48: .word 0x020BC5D4
_02085F4C: .word 0x020BC5E2

	arm_func_start FUN_02085f50
FUN_02085f50: ; 0x02085F50
	push {r4, r5, r6, r7, lr}
	sub sp, sp, #0x104
	mov r4, r1
	mov r6, r0
	ldr r1, _0208602C ; =0x020938C8
	add r0, sp, #0x84
	mov r2, r4
	bl FUN_02015184
	ldr r1, _02086030 ; =0x020938D0
	add r0, sp, #4
	mov r2, r4
	bl FUN_02015184
	ldr r2, _02086034 ; =0x020BC5D0
	mov r4, #0
	mov r0, #0x14
	arm_func_end FUN_02085f50
_02085F8C:
	mul r5, r4, r0
	ldr r1, [r2, r5]
	add r3, r2, r5
	cmp r1, #0
	ldreq r1, [r3, #4]
	cmpeq r1, #0
	bne _02086010
	ldr r0, _02086038 ; =0x020BC5D4
	mov r1, #1
	str r1, [r0, r5]
	ldr r0, _02086034 ; =0x020BC5D0
	cmp r6, #0
	add r7, r0, r5
	strne r6, [r3]
	mvn r6, #0
	add r1, sp, #0x84
	mov r0, r7
	add r2, r7, #0x10
	mov r3, #0
	str r6, [sp]
	bl FUN_02085d7c
	lsr r3, r0, #4
	ldr r2, _0208603C ; =0x020BC5E2
	add r1, sp, #4
	add r0, r7, #8
	strh r3, [r2, r5]
	bl FUN_0200dc64
	cmp r0, #0
	bne _02086004
	bl FUN_02004160
_02086004:
	add sp, sp, #0x104
	mov r0, r4
	pop {r4, r5, r6, r7, pc}
_02086010:
	add r4, r4, #1
	cmp r4, #0x12
	blt _02085F8C
	bl FUN_02004160
	mvn r0, #0
	add sp, sp, #0x104
	pop {r4, r5, r6, r7, pc}
	.align 2, 0_0208602C: .word 0x020938C8
_02086030: .word 0x020938D0
_02086034: .word 0x020BC5D0
_02086038: .word 0x020BC5D4
_0208603C: .word 0x020BC5E2

	arm_func_start FUN_02086040
FUN_02086040: ; 0x02086040
	push {r4, r5, r6, lr}
	cmp r0, #0
	poplt {r4, r5, r6, pc}
	mov r4, #0x14
	mul r6, r0, r4
	ldr r5, _0208607C ; =0x020BC5D0
	ldr r0, [r5, r6]
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	bl FUN_02086738
	mov r2, r4
	add r0, r5, r6
	mov r1, #0
	bl MemWrite
	pop {r4, r5, r6, pc}
	.align 2, 0_0208607C: .word 0x020BC5D0
	arm_func_end FUN_02086040

	arm_func_start FUN_02086080
FUN_02086080: ; 0x02086080
	push {r4, r5, r6, lr}
	mov r4, #0x14
	mul r5, r0, r4
	ldr r6, _020860C0 ; =0x020BC5E0
	ldrsb r0, [r6, r5]
	cmp r0, #0
	blt _020860B8
	bl FUN_02086480
	cmp r0, #0
	movne r0, #0
	subeq r0, r4, #0x15
	strbeq r0, [r6, r5]
	moveq r0, #1
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02086080
_020860B8:
	mov r0, #1
	pop {r4, r5, r6, pc}
	.align 2, 0_020860C0: .word 0x020BC5E0

	arm_func_start FUN_020860c4
FUN_020860c4: ; 0x020860C4
	push {r4, lr}
	mov r4, r0
	arm_func_end FUN_020860c4
_020860CC:
	mov r0, r4
	bl FUN_02086080
	cmp r0, #0
	popne {r4, pc}
	bl FUN_0206ee5c
	b _020860CC
_020860E4:
	.byte 0x10, 0x80, 0xBD, 0xE8

	arm_func_start FUN_020860e8
FUN_020860e8: ; 0x020860E8
	ldr r3, _0208610C ; =0x020BC5D0
	mov r2, #0x14
	mla r2, r0, r2, r3
	ldrh r0, [r2, #0x12]
	cmp r1, r0
	movge r0, #0
	ldrlt r0, [r2]
	addlt r0, r0, r1, lsl #4
	bx lr
	.align 2, 0_0208610C: .word 0x020BC5D0
	arm_func_end FUN_020860e8

	arm_func_start FUN_02086110
FUN_02086110: ; 0x02086110
	push {r0, r1, r2, r3}
	push {r3, r4, r5, lr}
	sub sp, sp, #8
	mov r5, r0
	ldr r0, [r5]
	mov r4, r1
	cmp r0, #0
	bne _02086150
	ldr r0, [r4, #0xc]
	lsl r1, r0, #0x18
	lsrs r1, r1, #0x1c
	ldreq r0, [r4, #8]
	mvn r1, #0
	lsrne r0, r0, #8
	bl FUN_020866d8
	str r0, [r5]
	arm_func_end FUN_02086110
_02086150:
	ldr r0, [r4, #0xc]
	lsl r0, r0, #0x18
	lsrs r0, r0, #0x1c
	ldr r0, [r4, #8]
	bne _02086184
	str r0, [sp]
	ldr r3, [r4, #4]
	add r1, sp, #0x20
	mov r0, r5
	ldm r1, {r1, r2}
	bl FUN_020859f8
	mov r4, r0
	b _02086214
_02086184:
	ldr r1, _02086228 ; =0x00000101
	bl FUN_020866d8
	str r0, [sp, #4]
	ldr r0, [r4, #8]
	add r1, sp, #0x20
	str r0, [sp]
	ldr r3, [r4, #4]
	add r0, sp, #4
	ldm r1, {r1, r2}
	bl FUN_020859f8
	cmp r0, #0
	bge _020861B8
	bl FUN_02004160
_020861B8:
	ldr r0, [r4, #0xc]
	and r0, r0, #0xf0
	cmp r0, #0x10
	beq _020861D4
	cmp r0, #0x20
	beq _020861E4
	b _020861F4
_020861D4:
	ldr r0, [sp, #4]
	ldr r1, [r5]
	bl LzPkbDecompression
	b _020861F8
_020861E4:
	ldr r0, [sp, #4]
	ldr r1, [r5]
	bl UnkPkbDecompression
	b _020861F8
_020861F4:
	bl FUN_02004160
_020861F8:
	ldr r0, [sp, #4]
	bl FUN_02086738
	ldr r1, [r4, #0xc]
	ldr r0, [r5]
	lsr r4, r1, #8
	mov r1, r4
	bl FUN_020026d0
_02086214:
	mov r0, r4
	add sp, sp, #8
	pop {r3, r4, r5, lr}
	add sp, sp, #0x10
	bx lr
	.align 2, 0_02086228: .word 0x00000101

	arm_func_start FUN_0208622c
FUN_0208622c: ; 0x0208622C
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	cmp r1, #0
	mov r6, r2
	mvnlt r0, #0
	poplt {r3, r4, r5, r6, r7, pc}
	ldr r0, _02086280 ; =0x020BC5D0
	mov r4, #0x14
	mla r5, r1, r4, r0
	mov r0, r1
	mov r1, r6
	bl FUN_02086684
	movs r1, r0
	subeq r0, r4, #0x15
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r7
	str r6, [sp]
	add r2, r5, #8
	ldm r2, {r2, r3}
	bl FUN_02086110
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02086280: .word 0x020BC5D0
	arm_func_end FUN_0208622c

	arm_func_start FUN_02086284
FUN_02086284: ; 0x02086284
	push {r3, r4, r5, r6, r7, r8, lr}
	sub sp, sp, #0x84
	mov r4, r2
	cmp r1, #0
	cmpge r4, #0
	mov r5, r0
	addlt sp, sp, #0x84
	mvnlt r0, #0
	poplt {r3, r4, r5, r6, r7, r8, pc}
	ldr r3, _0208630C ; =0x020BC5D0
	mov r0, #0x14
	mla r7, r1, r0, r3
	ldrh r1, [r7, #0x12]
	cmp r4, r1
	addge sp, sp, #0x84
	subge r0, r0, #0x15
	popge {r3, r4, r5, r6, r7, r8, pc}
	ldr r8, [r7]
	cmp r8, #0
	addeq sp, sp, #0x84
	subeq r0, r0, #0x15
	popeq {r3, r4, r5, r6, r7, r8, pc}
	add r6, sp, #4
	ldr r1, _02086310 ; =0x020938D8
	mov r0, r6
	bl FUN_02015184
	mov r0, r5
	str r6, [sp]
	add r2, r7, #8
	add r1, r8, r4, lsl #4
	ldm r2, {r2, r3}
	bl FUN_02086110
	add sp, sp, #0x84
	pop {r3, r4, r5, r6, r7, r8, pc}
	.align 2, 0_0208630C: .word 0x020BC5D0
_02086310: .word 0x020938D8
	arm_func_end FUN_02086284

	arm_func_start FUN_02086314
FUN_02086314: ; 0x02086314
	push {r0, r1, r2, r3}
	push {r3, r4, r5, r6, lr}
	sub sp, sp, #4
	mov r6, r0
	mov r5, r1
	ldr r0, [sp, #0x28]
	ldr r4, [r5, #8]
	bl FUN_02085c6c
	ldr ip, [sp, #0x2c]
	mov r2, r4
	mov r3, r6
	add r1, r5, #0xc
	mov r4, r0
	str ip, [sp]
	bl FUN_02085ce4
	ldr r2, [sp, #0x20]
	ldr r1, [sp, #0x24]
	str r2, [r4, #0xc]
	str r1, [r4, #0x10]
	ldr r1, [r5, #4]
	str r1, [r4, #0x14]
	ldr r1, [r5, #8]
	str r1, [r4, #0x18]
	ldr r1, [r5, #0xc]
	str r1, [r4, #0x1c]
	ldr r1, [r4]
	str r1, [r4, #8]
	add sp, sp, #4
	pop {r3, r4, r5, r6, lr}
	add sp, sp, #0x10
	bx lr
	arm_func_end FUN_02086314

	arm_func_start FUN_02086390
FUN_02086390: ; 0x02086390
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	cmp r1, #0
	mov r8, r0
	mov r7, r2
	mov r6, r3
	addlt sp, sp, #8
	mvnlt r0, #0
	poplt {r4, r5, r6, r7, r8, pc}
	ldr r0, _020863F8 ; =0x020BC5D0
	mov r4, #0x14
	mla r5, r1, r4, r0
	mov r0, r1
	mov r1, r7
	bl FUN_02086684
	movs r1, r0
	addeq sp, sp, #8
	subeq r0, r4, #0x15
	popeq {r4, r5, r6, r7, r8, pc}
	stm sp, {r6, r7}
	add r2, r5, #8
	mov r0, r8
	ldm r2, {r2, r3}
	bl FUN_02086314
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_020863F8: .word 0x020BC5D0
	arm_func_end FUN_02086390

	arm_func_start FUN_020863fc
FUN_020863fc: ; 0x020863FC
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	sub sp, sp, #0x88
	mov r6, r2
	cmp r1, #0
	cmpge r6, #0
	mov r7, r0
	mov r5, r3
	addlt sp, sp, #0x88
	mvnlt r0, #0
	poplt {r3, r4, r5, r6, r7, r8, sb, pc}
	mov r0, #0x14
	mul r3, r1, r0
	ldr r1, _02086478 ; =0x020BC5D0
	ldr r4, [r1, r3]
	add sb, r1, r3
	cmp r4, #0
	addeq sp, sp, #0x88
	subeq r0, r0, #0x15
	popeq {r3, r4, r5, r6, r7, r8, sb, pc}
	add r8, sp, #8
	ldr r1, _0208647C ; =0x020938E0
	mov r0, r8
	bl FUN_02015184
	stm sp, {r5, r8}
	add r2, sb, #8
	mov r0, r7
	add r1, r4, r6, lsl #4
	ldm r2, {r2, r3}
	bl FUN_02086314
	add sp, sp, #0x88
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02086478: .word 0x020BC5D0
_0208647C: .word 0x020938E0
	arm_func_end FUN_020863fc

	arm_func_start FUN_02086480
FUN_02086480: ; 0x02086480
	ldr r1, _020864A4 ; =0x020BC504
	ldr r2, [r1, #8]
	ldr r1, [r2, r0, lsl #5]
	cmp r1, #0
	addeq r1, r2, r0, lsl #5
	moveq r0, #0
	streq r0, [r1, #8]
	movne r0, #1
	bx lr
	.align 2, 0_020864A4: .word 0x020BC504
	arm_func_end FUN_02086480

	arm_func_start thunk_FUN_02004160
thunk_FUN_02004160: ; 0x020864A8
	ldr ip, _020864B0 ; =FUN_02004160
	bx ip
	.align 2, 0_020864B0: .word FUN_02004160
	arm_func_end thunk_FUN_02004160

	arm_func_start FUN_020864b4
FUN_020864b4: ; 0x020864B4
	push {r4, r5, r6, lr}
	sub sp, sp, #8
	ldr r0, _02086548 ; =0x020BC738
	ldr r1, _0208654C ; =0xEDB88320
	bl FUN_0200a9c8
	mov r6, #0
	ldr r0, _02086550 ; =0x020BC5D0
	mov r1, r6
	mov r2, #0x168
	bl MemWrite
	sub r5, r6, #1
	mov r1, r5
	mov r0, #0x700
	bl FUN_0208670c
	ldr r4, _02086554 ; =0x020BC504
	str r0, [r4, #8]
	ldr r0, _02086558 ; =0x020938E8
	bl thunk_FUN_0200d1e4
	mov r1, r5
	mov r5, #0x800
	mov r0, r5
	bl FUN_020866d8
	mov r2, r6
	str r0, [r4, #4]
	str r5, [sp]
	mov r0, #0x1c
	str r0, [sp, #4]
	ldr r0, [r4, #4]
	ldr r4, _0208655C ; =0x020BC510
	add r3, r0, #0x800
	mov r0, r4
	ldr r1, _02086560 ; =FUN_02085ab4
	bl FUN_02001948
	mov r0, r4
	bl FUN_02001ce0
	add sp, sp, #8
	pop {r4, r5, r6, pc}
	.align 2, 0_02086548: .word 0x020BC738
_0208654C: .word 0xEDB88320
_02086550: .word 0x020BC5D0
_02086554: .word 0x020BC504
_02086558: .word 0x020938E8
_0208655C: .word 0x020BC510
_02086560: .word FUN_02085ab4
	arm_func_end FUN_020864b4

	arm_func_start FUN_02086564
FUN_02086564: ; 0x02086564
	push {r3, lr}
	sub sp, sp, #0x80
	mov r2, #0
	add r1, sp, #0
	arm_func_end FUN_02086564
_02086574:
	ldrsb ip, [r0], #1
	cmp ip, #0x41
	blt _02086590
	cmp ip, #0x5a
	addle r3, ip, #0x20
	strble r3, [r1, r2]
	ble _02086594
_02086590:
	strb ip, [r1, r2]
_02086594:
	cmp ip, #0
	bne _020865B0
	ldr r0, _020865C8 ; =0x020BC738
	add r1, sp, #0
	bl FUN_0200aa6c
	add sp, sp, #0x80
	pop {r3, pc}
_020865B0:
	add r2, r2, #1
	cmp r2, #0x80
	blo _02086574
	mov r0, #0
	add sp, sp, #0x80
	pop {r3, pc}
	.align 2, 0_020865C8: .word 0x020BC738

	arm_func_start FUN_020865cc
FUN_020865cc: ; 0x020865CC
	push {r3, r4, r5, lr}
	mov r4, r0
	mov r0, r2
	mov r5, r1
	bl FUN_02086564
	mov r2, #0
	mov lr, r2
	sub r3, r5, #1
	lsr ip, r5, #1
	arm_func_end FUN_020865cc
_020865F0:
	ldr r1, [r4, ip, lsl #4]
	cmp r0, r1
	moveq r0, ip
	popeq {r3, r4, r5, pc}
	cmp r2, r3
	beq _02086638
	cmp r0, r1
	sublo r1, ip, r2
	addlo r1, r1, #1
	sublo r3, ip, #1
	sublo ip, ip, r1, lsr #1
	subhs r1, r3, ip
	addhs r1, r1, #1
	addhs r2, ip, #1
	add lr, lr, #1
	addhs ip, ip, r1, lsr #1
	cmp lr, #0x10000
	blt _020865F0
_02086638:
	mvn r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02086640
FUN_02086640: ; 0x02086640
	push {r3, lr}
	cmp r0, #0
	mov r2, r1
	mvnlt r0, #0
	poplt {r3, pc}
	mov r1, #0x14
	mul r3, r0, r1
	ldr ip, _02086680 ; =0x020BC5D0
	ldr r0, [ip, r3]
	add r3, ip, r3
	cmp r0, #0
	subeq r0, r1, #0x15
	popeq {r3, pc}
	ldrh r1, [r3, #0x12]
	bl FUN_020865cc
	pop {r3, pc}
	.align 2, 0_02086680: .word 0x020BC5D0
	arm_func_end FUN_02086640

	arm_func_start FUN_02086684
FUN_02086684: ; 0x02086684
	push {r4, lr}
	cmp r0, #0
	mov r2, r1
	movlt r0, #0
	poplt {r4, pc}
	mov r1, #0x14
	mul r1, r0, r1
	ldr r0, _020866D4 ; =0x020BC5D0
	ldr r4, [r0, r1]
	add r0, r0, r1
	cmp r4, #0
	moveq r0, #0
	popeq {r4, pc}
	ldrh r1, [r0, #0x12]
	mov r0, r4
	bl FUN_020865cc
	cmp r0, #0
	addge r0, r4, r0, lsl #4
	movlt r0, #0
	pop {r4, pc}
	.align 2, 0_020866D4: .word 0x020BC5D0
	arm_func_end FUN_02086684

	arm_func_start FUN_020866d8
FUN_020866d8: ; 0x020866D8
	push {r4, lr}
	mov r4, r0
	cmp r1, #0
	blt _020866F0
	ldr r0, _02086708 ; =0x0209A250
	bl FUN_0202e19c
	arm_func_end FUN_020866d8
_020866F0:
	ldr r0, _02086708 ; =0x0209A250
	mov r1, r4
	mov r2, #0
	mov r3, #1
	bl FUN_0202de58
	pop {r4, pc}
	.align 2, 0_02086708: .word 0x0209A250

	arm_func_start FUN_0208670c
FUN_0208670c: ; 0x0208670C
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_020866d8
	movs r4, r0
	beq _02086730
	mov r1, r4
	mov r2, r5
	mov r0, #0
	bl FUN_0200787c
	arm_func_end FUN_0208670c
_02086730:
	mov r0, r4
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02086738
FUN_02086738: ; 0x02086738
	mov r1, r0
	ldr r0, _02086748 ; =0x0209A250
	ldr ip, _0208674C ; =FUN_0202e1c0
	bx ip
	.align 2, 0_02086748: .word 0x0209A250
_0208674C: .word FUN_0202e1c0
	arm_func_end FUN_02086738

	arm_func_start FUN_02086750
FUN_02086750: ; 0x02086750
	mov r1, r0
	ldr r0, _02086760 ; =0x0209A250
	ldr ip, _02086764 ; =FUN_0202e19c
	bx ip
	.align 2, 0_02086760: .word 0x0209A250
_02086764: .word FUN_0202e19c
	arm_func_end FUN_02086750

	arm_func_start FUN_02086768
FUN_02086768: ; 0x02086768
	push {r4, r5, r6, lr}
	mov r0, #0x2000
	bl FUN_020095ac
	ldr r4, _02086A04 ; =0x0208F680
	str r0, [r4, #0x10]
	ldr r0, _02086A08 ; =0x00009CCD
	bl FUN_020095ac
	mov lr, #0x800
	mov r1, #0x32000
	umull r2, r3, lr, r1
	asr r5, lr, #0x1f
	adds ip, r2, #0x800
	mla r3, r5, r1, r3
	mov r2, #0x41000
	adc r3, r3, #0
	lsr r6, ip, #0xc
	orr r6, r6, r3, lsl #20
	str r0, [r4, #8]
	str lr, [r4, #4]
	umull r3, r0, lr, r2
	mla r0, r5, r2, r0
	ldr r5, _02086A0C ; =0x0000EA3C
	asr ip, r6, #0x1f
	str r5, [r4]
	umull r5, lr, r6, r1
	mla lr, ip, r1, lr
	adds r5, r5, #0x800
	adc r1, lr, #0
	lsr r5, r5, #0xc
	orr r5, r5, r1, lsl #20
	str r5, [r4, #0x14]
	adds r1, r3, #0x800
	adc r0, r0, #0
	lsr ip, r1, #0xc
	orr ip, ip, r0, lsl #20
	asr r0, ip, #0x1f
	umull r3, r1, ip, r2
	mla r1, r0, r2, r1
	adds r2, r3, #0x800
	adc r0, r1, #0
	lsr r1, r2, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [r4, #0xc]
	ldr r4, _02086A10 ; =0x02099F78
	mov r0, r4
	bl FUN_020417a0
	mov r0, r4
	ldr r1, _02086A14 ; =FUN_020417b4
	ldr r2, _02086A18 ; =0x02099FA8
	bl FUN_0201ddfc
	ldr r4, _02086A1C ; =0x0209C2C4
	mov r0, r4
	bl FUN_0202ed48
	mov r0, r4
	ldr r1, _02086A20 ; =FUN_0202ed70
	ldr r2, _02086A24 ; =0x02099FB4
	bl FUN_0201ddfc
	ldr r4, _02086A28 ; =0x0209A5D0
	mov r0, r4
	bl FUN_0205ff80
	mov r0, r4
	ldr r1, _02086A2C ; =FUN_0205ff98
	ldr r2, _02086A30 ; =0x02099FC0
	bl FUN_0201ddfc
	ldr r4, _02086A34 ; =0x0209A014
	mov r0, r4
	bl FUN_02063400
	mov r0, r4
	ldr r1, _02086A38 ; =FUN_02063404
	ldr r2, _02086A3C ; =0x02099FCC
	bl FUN_0201ddfc
	ldr r4, _02086A40 ; =0x0209A250
	mov r0, r4
	bl FUN_0202dbf8
	mov r0, r4
	ldr r1, _02086A44 ; =FUN_0202dc1c
	ldr r2, _02086A48 ; =0x02099FD8
	bl FUN_0201ddfc
	ldr r4, _02086A4C ; =0x0209AC44
	mov r0, r4
	bl FUN_0202b3dc
	mov r0, r4
	ldr r1, _02086A50 ; =FUN_0202b3e0
	ldr r2, _02086A54 ; =0x02099FE4
	bl FUN_0201ddfc
	ldr r4, _02086A58 ; =0x0209A8A0
	mov r0, r4
	bl FUN_0202e474
	mov r0, r4
	ldr r1, _02086A5C ; =FUN_0202e480
	ldr r2, _02086A60 ; =0x02099FF0
	bl FUN_0201ddfc
	ldr r2, _02086A64 ; =0x0208F6C0
	ldr r0, _02086A68 ; =0x020A3D14
	ldr r1, _02086A6C ; =0x0208F6B0
	str r2, [r0]
	ldr r0, _02086A70 ; =0x0209F5C0
	ldr r2, _02086A74 ; =0x0208F6D0
	str r1, [r0]
	ldr r0, _02086A78 ; =0x02099E8C
	ldr r1, _02086A7C ; =0x0209A3E0
	str r2, [r0, #0x1e4]
	ldr r0, _02086A80 ; =0x02118988
	ldr r4, _02086A84 ; =0x020AF81C
	str r0, [r1]
	mov r0, r4
	bl FUN_02041ac8
	ldr r1, _02086A88 ; =0x0209007C
	add r0, r4, #0x90
	str r1, [r4]
	bl FUN_02047a7c
	add r0, r4, #0x324
	add r0, r0, #0x1c00
	bl FUN_0202ffa4
	mov r0, r4
	ldr r1, _02086A8C ; =FUN_02029d18
	ldr r2, _02086A90 ; =0x02099FFC
	bl FUN_0201ddfc
	ldr r4, _02086A94 ; =0x020A9C40
	mov r0, r4
	bl FUN_020453e0
	mov r0, r4
	ldr r1, _02086A98 ; =FUN_02045458
	ldr r2, _02086A9C ; =0x0209A008
	bl FUN_0201ddfc
	ldr r4, _02086AA0 ; =0x0209BA20
	mov r0, r4
	bl FUN_0206f0b8
	mov r0, r4
	ldr r1, _02086AA4 ; =FUN_0206f150
	ldr r2, _02086AA8 ; =0x0209A020
	bl FUN_0201ddfc
	ldr r4, _02086AAC ; =0x0209A320
	mov r0, r4
	bl FUN_020495b4
	mov r0, r4
	ldr r1, _02086AB0 ; =FUN_020495cc
	ldr r2, _02086AB4 ; =0x0209A02C
	bl FUN_0201ddfc
	ldr r4, _02086AB8 ; =0x0209A380
	mov r0, r4
	bl FUN_0204947c
	mov r0, r4
	ldr r1, _02086ABC ; =LAB_0204949c
	ldr r2, _02086AC0 ; =0x0209A038
	bl FUN_0201ddfc
	ldr r4, _02086AC4 ; =0x0209A0AC
	mov r0, r4
	bl FUN_0206c0d8
	mov r0, r4
	ldr r1, _02086AC8 ; =FUN_0206c110
	ldr r2, _02086ACC ; =0x0209A044
	bl FUN_0201ddfc
	ldr r4, _02086AD0 ; =0x020A18A0
	mov r0, r4
	bl FUN_0203df80
	mov r0, r4
	ldr r1, _02086AD4 ; =FUN_0203df84
	ldr r2, _02086AD8 ; =0x02099F90
	bl FUN_0201ddfc
	ldr r2, _02086ADC ; =0x02090204
	ldr r0, _02086AE0 ; =0x0209AEC0
	ldr r1, _02086AE4 ; =FUN_020463f4
	str r2, [r0]
	ldr r2, _02086AE8 ; =0x02099F9C
	bl FUN_0201ddfc
	pop {r4, r5, r6, pc}
	.align 2, 0_02086A04: .word 0x0208F680
_02086A08: .word 0x00009CCD
_02086A0C: .word 0x0000EA3C
_02086A10: .word 0x02099F78
_02086A14: .word FUN_020417b4
_02086A18: .word 0x02099FA8
_02086A1C: .word 0x0209C2C4
_02086A20: .word FUN_0202ed70
_02086A24: .word 0x02099FB4
_02086A28: .word 0x0209A5D0
_02086A2C: .word FUN_0205ff98
_02086A30: .word 0x02099FC0
_02086A34: .word 0x0209A014
_02086A38: .word FUN_02063404
_02086A3C: .word 0x02099FCC
_02086A40: .word 0x0209A250
_02086A44: .word FUN_0202dc1c
_02086A48: .word 0x02099FD8
_02086A4C: .word 0x0209AC44
_02086A50: .word FUN_0202b3e0
_02086A54: .word 0x02099FE4
_02086A58: .word 0x0209A8A0
_02086A5C: .word FUN_0202e480
_02086A60: .word 0x02099FF0
_02086A64: .word 0x0208F6C0
_02086A68: .word 0x020A3D14
_02086A6C: .word 0x0208F6B0
_02086A70: .word 0x0209F5C0
_02086A74: .word 0x0208F6D0
_02086A78: .word 0x02099E8C
_02086A7C: .word 0x0209A3E0
_02086A80: .word 0x02118988
_02086A84: .word 0x020AF81C
_02086A88: .word 0x0209007C
_02086A8C: .word FUN_02029d18
_02086A90: .word 0x02099FFC
_02086A94: .word 0x020A9C40
_02086A98: .word FUN_02045458
_02086A9C: .word 0x0209A008
_02086AA0: .word 0x0209BA20
_02086AA4: .word FUN_0206f150
_02086AA8: .word 0x0209A020
_02086AAC: .word 0x0209A320
_02086AB0: .word FUN_020495cc
_02086AB4: .word 0x0209A02C
_02086AB8: .word 0x0209A380
_02086ABC: .word LAB_0204949c
_02086AC0: .word 0x0209A038
_02086AC4: .word 0x0209A0AC
_02086AC8: .word FUN_0206c110
_02086ACC: .word 0x0209A044
_02086AD0: .word 0x020A18A0
_02086AD4: .word FUN_0203df84
_02086AD8: .word 0x02099F90
_02086ADC: .word 0x02090204
_02086AE0: .word 0x0209AEC0
_02086AE4: .word FUN_020463f4
_02086AE8: .word 0x02099F9C
	arm_func_end FUN_02086768

	arm_func_start FUN_02086aec
FUN_02086aec: ; 0x02086AEC
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086B34 ; =0x0208F880
	str r0, [r4, #0x10]
	ldr r0, _02086B38 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #8]
	ldr r0, _02086B3C ; =0x0000EA3C
	str r1, [r4, #0x14]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086B34: .word 0x0208F880
_02086B38: .word 0x00009CCD
_02086B3C: .word 0x0000EA3C
	arm_func_end FUN_02086aec

	arm_func_start FUN_02086b40
FUN_02086b40: ; 0x02086B40
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086B88 ; =0x0208FA30
	str r0, [r4, #8]
	ldr r0, _02086B8C ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x14]
	ldr r0, _02086B90 ; =0x0000EA3C
	str r1, [r4, #0x10]
	str r0, [r4, #4]
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0xc]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086B88: .word 0x0208FA30
_02086B8C: .word 0x00009CCD
_02086B90: .word 0x0000EA3C
	arm_func_end FUN_02086b40

	arm_func_start FUN_02086b94
FUN_02086b94: ; 0x02086B94
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086BDC ; =0x0208FBB0
	str r0, [r4, #0x14]
	ldr r0, _02086BE0 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02086BE4 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086BDC: .word 0x0208FBB0
_02086BE0: .word 0x00009CCD
_02086BE4: .word 0x0000EA3C
	arm_func_end FUN_02086b94

	arm_func_start FUN_02086be8
FUN_02086be8: ; 0x02086BE8
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086C30 ; =0x0208FC08
	str r0, [r4, #4]
	ldr r0, _02086C34 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0xc]
	ldr r0, _02086C38 ; =0x0000EA3C
	str r1, [r4, #0x10]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086C30: .word 0x0208FC08
_02086C34: .word 0x00009CCD
_02086C38: .word 0x0000EA3C
	arm_func_end FUN_02086be8

	arm_func_start FUN_02086c3c
FUN_02086c3c: ; 0x02086C3C
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086C80 ; =0x0208FF14
	str r0, [r4, #0x10]
	ldr r0, _02086C84 ; =0x00009CCD
	bl FUN_020095ac
	str r0, [r4, #0xc]
	ldr r0, _02086C88 ; =0x0000EA3C
	mov r1, #0x800
	stmib r4, {r0, r1}
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086C80: .word 0x0208FF14
_02086C84: .word 0x00009CCD
_02086C88: .word 0x0000EA3C
	arm_func_end FUN_02086c3c

	arm_func_start FUN_02086c8c
FUN_02086c8c: ; 0x02086C8C
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086CD4 ; =0x0208FF2C
	str r0, [r4, #0x14]
	ldr r0, _02086CD8 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02086CDC ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086CD4: .word 0x0208FF2C
_02086CD8: .word 0x00009CCD
_02086CDC: .word 0x0000EA3C
	arm_func_end FUN_02086c8c

	arm_func_start FUN_02086ce0
FUN_02086ce0: ; 0x02086CE0
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086D28 ; =0x0208FF44
	str r0, [r4, #0x14]
	ldr r0, _02086D2C ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02086D30 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086D28: .word 0x0208FF44
_02086D2C: .word 0x00009CCD
_02086D30: .word 0x0000EA3C
	arm_func_end FUN_02086ce0

	arm_func_start FUN_02086d34
FUN_02086d34: ; 0x02086D34
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086D7C ; =0x0208FF5C
	str r0, [r4, #0x14]
	ldr r0, _02086D80 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02086D84 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086D7C: .word 0x0208FF5C
_02086D80: .word 0x00009CCD
_02086D84: .word 0x0000EA3C
	arm_func_end FUN_02086d34

	arm_func_start FUN_02086d88
FUN_02086d88: ; 0x02086D88
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086DD0 ; =0x0208FF74
	str r0, [r4]
	ldr r0, _02086DD4 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x14]
	ldr r0, _02086DD8 ; =0x0000EA3C
	str r1, [r4, #0x10]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #8]
	add r0, r1, #0x840000
	str r0, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086DD0: .word 0x0208FF74
_02086DD4: .word 0x00009CCD
_02086DD8: .word 0x0000EA3C
	arm_func_end FUN_02086d88

	arm_func_start FUN_02086ddc
FUN_02086ddc: ; 0x02086DDC
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086E24 ; =0x0209000C
	str r0, [r4, #0x14]
	ldr r0, _02086E28 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02086E2C ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086E24: .word 0x0209000C
_02086E28: .word 0x00009CCD
_02086E2C: .word 0x0000EA3C
	arm_func_end FUN_02086ddc

	arm_func_start FUN_02086e30
FUN_02086e30: ; 0x02086E30
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086E78 ; =0x02090034
	str r0, [r4]
	ldr r0, _02086E7C ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x14]
	ldr r0, _02086E80 ; =0x0000EA3C
	str r1, [r4, #0x10]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #8]
	add r0, r1, #0x840000
	str r0, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086E78: .word 0x02090034
_02086E7C: .word 0x00009CCD
_02086E80: .word 0x0000EA3C
	arm_func_end FUN_02086e30

	arm_func_start FUN_02086e84
FUN_02086e84: ; 0x02086E84
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086ECC ; =0x0209005C
	str r0, [r4]
	ldr r0, _02086ED0 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x14]
	ldr r0, _02086ED4 ; =0x0000EA3C
	str r1, [r4, #0x10]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #8]
	add r0, r1, #0x840000
	str r0, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086ECC: .word 0x0209005C
_02086ED0: .word 0x00009CCD
_02086ED4: .word 0x0000EA3C
	arm_func_end FUN_02086e84

	arm_func_start FUN_02086ed8
FUN_02086ed8: ; 0x02086ED8
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086F20 ; =0x0209010C
	str r0, [r4, #0x14]
	ldr r0, _02086F24 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02086F28 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086F20: .word 0x0209010C
_02086F24: .word 0x00009CCD
_02086F28: .word 0x0000EA3C
	arm_func_end FUN_02086ed8

	arm_func_start FUN_02086f2c
FUN_02086f2c: ; 0x02086F2C
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086F74 ; =0x020901D0
	str r0, [r4, #0x14]
	ldr r0, _02086F78 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #4]
	ldr r0, _02086F7C ; =0x0000EA3C
	str r1, [r4]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #8]
	add r0, r1, #0x840000
	str r0, [r4, #0x18]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086F74: .word 0x020901D0
_02086F78: .word 0x00009CCD
_02086F7C: .word 0x0000EA3C
	arm_func_end FUN_02086f2c

	arm_func_start FUN_02086f80
FUN_02086f80: ; 0x02086F80
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02086FC8 ; =0x02090224
	str r0, [r4, #8]
	ldr r0, _02086FCC ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #4]
	ldr r0, _02086FD0 ; =0x0000EA3C
	str r1, [r4]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #0x10]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_02086FC8: .word 0x02090224
_02086FCC: .word 0x00009CCD
_02086FD0: .word 0x0000EA3C
	arm_func_end FUN_02086f80

	arm_func_start FUN_02086fd4
FUN_02086fd4: ; 0x02086FD4
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _0208701C ; =0x020902D0
	str r0, [r4, #8]
	ldr r0, _02087020 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x14]
	ldr r0, _02087024 ; =0x0000EA3C
	str r1, [r4]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #0x10]
	add r0, r1, #0x840000
	str r0, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_0208701C: .word 0x020902D0
_02087020: .word 0x00009CCD
_02087024: .word 0x0000EA3C
	arm_func_end FUN_02086fd4

	arm_func_start FUN_02087028
FUN_02087028: ; 0x02087028
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087070 ; =0x02090408
	str r0, [r4, #0x14]
	ldr r0, _02087074 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02087078 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087070: .word 0x02090408
_02087074: .word 0x00009CCD
_02087078: .word 0x0000EA3C
	arm_func_end FUN_02087028

	arm_func_start FUN_0208707c
FUN_0208707c: ; 0x0208707C
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020870C4 ; =0x02090464
	str r0, [r4, #0x14]
	ldr r0, _020870C8 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _020870CC ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_020870C4: .word 0x02090464
_020870C8: .word 0x00009CCD
_020870CC: .word 0x0000EA3C
	arm_func_end FUN_0208707c

	arm_func_start FUN_020870d0
FUN_020870d0: ; 0x020870D0
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087114 ; =0x020904C0
	str r0, [r4, #0x10]
	ldr r0, _02087118 ; =0x00009CCD
	bl FUN_020095ac
	str r0, [r4, #0xc]
	ldr r0, _0208711C ; =0x0000EA3C
	mov r1, #0x800
	stmib r4, {r0, r1}
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087114: .word 0x020904C0
_02087118: .word 0x00009CCD
_0208711C: .word 0x0000EA3C
	arm_func_end FUN_020870d0

	arm_func_start FUN_02087120
FUN_02087120: ; 0x02087120
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087168 ; =0x020904F4
	str r0, [r4, #0x14]
	ldr r0, _0208716C ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02087170 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087168: .word 0x020904F4
_0208716C: .word 0x00009CCD
_02087170: .word 0x0000EA3C
	arm_func_end FUN_02087120

	arm_func_start FUN_02087174
FUN_02087174: ; 0x02087174
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020871BC ; =0x0209055C
	str r0, [r4, #0x14]
	ldr r0, _020871C0 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _020871C4 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_020871BC: .word 0x0209055C
_020871C0: .word 0x00009CCD
_020871C4: .word 0x0000EA3C
	arm_func_end FUN_02087174

	arm_func_start FUN_020871c8
FUN_020871c8: ; 0x020871C8
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _0208720C ; =0x02090584
	str r0, [r4, #0x10]
	ldr r0, _02087210 ; =0x00009CCD
	bl FUN_020095ac
	str r0, [r4, #0xc]
	ldr r0, _02087214 ; =0x0000EA3C
	mov r1, #0x800
	stmib r4, {r0, r1}
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_0208720C: .word 0x02090584
_02087210: .word 0x00009CCD
_02087214: .word 0x0000EA3C
	arm_func_end FUN_020871c8

	arm_func_start FUN_02087218
FUN_02087218: ; 0x02087218
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _0208725C ; =0x0209059C
	str r0, [r4, #0x10]
	ldr r0, _02087260 ; =0x00009CCD
	bl FUN_020095ac
	str r0, [r4, #0xc]
	ldr r0, _02087264 ; =0x0000EA3C
	mov r1, #0x800
	stmib r4, {r0, r1}
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_0208725C: .word 0x0209059C
_02087260: .word 0x00009CCD
_02087264: .word 0x0000EA3C
	arm_func_end FUN_02087218

	arm_func_start FUN_02087268
FUN_02087268: ; 0x02087268
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020872B0 ; =0x020905B4
	str r0, [r4]
	ldr r0, _020872B4 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x14]
	ldr r0, _020872B8 ; =0x0000EA3C
	str r1, [r4, #0x10]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #8]
	add r0, r1, #0x840000
	str r0, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_020872B0: .word 0x020905B4
_020872B4: .word 0x00009CCD
_020872B8: .word 0x0000EA3C
	arm_func_end FUN_02087268

	arm_func_start FUN_020872bc
FUN_020872bc: ; 0x020872BC
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087304 ; =0x020905E8
	str r0, [r4]
	ldr r0, _02087308 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #4]
	ldr r0, _0208730C ; =0x0000EA3C
	str r1, [r4, #0x14]
	str r0, [r4, #0x10]
	add r0, r5, #0x4e0000
	str r0, [r4, #0xc]
	add r0, r1, #0x840000
	str r0, [r4, #8]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087304: .word 0x020905E8
_02087308: .word 0x00009CCD
_0208730C: .word 0x0000EA3C
	arm_func_end FUN_020872bc

	arm_func_start FUN_02087310
FUN_02087310: ; 0x02087310
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087354 ; =0x02090698
	str r0, [r4, #0x10]
	ldr r0, _02087358 ; =0x00009CCD
	bl FUN_020095ac
	str r0, [r4, #0xc]
	ldr r0, _0208735C ; =0x0000EA3C
	mov r1, #0x800
	stmib r4, {r0, r1}
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087354: .word 0x02090698
_02087358: .word 0x00009CCD
_0208735C: .word 0x0000EA3C
	arm_func_end FUN_02087310

	arm_func_start FUN_02087360
FUN_02087360: ; 0x02087360
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020873A8 ; =0x020906B0
	str r0, [r4]
	ldr r0, _020873AC ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #4]
	ldr r0, _020873B0 ; =0x0000EA3C
	str r1, [r4, #0x14]
	str r0, [r4, #0x10]
	add r0, r5, #0x4e0000
	str r0, [r4, #0xc]
	add r0, r1, #0x840000
	str r0, [r4, #8]
	pop {r3, r4, r5, pc}
	.align 2, 0_020873A8: .word 0x020906B0
_020873AC: .word 0x00009CCD
_020873B0: .word 0x0000EA3C
	arm_func_end FUN_02087360

	arm_func_start FUN_020873b4
FUN_020873b4: ; 0x020873B4
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020873FC ; =0x020906C8
	str r0, [r4, #0x14]
	ldr r0, _02087400 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _02087404 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_020873FC: .word 0x020906C8
_02087400: .word 0x00009CCD
_02087404: .word 0x0000EA3C
	arm_func_end FUN_020873b4

	arm_func_start FUN_02087408
FUN_02087408: ; 0x02087408
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087450 ; =0x020906FC
	str r0, [r4]
	ldr r0, _02087454 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x14]
	ldr r0, _02087458 ; =0x0000EA3C
	str r1, [r4, #0x10]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #8]
	add r0, r1, #0x840000
	str r0, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087450: .word 0x020906FC
_02087454: .word 0x00009CCD
_02087458: .word 0x0000EA3C
	arm_func_end FUN_02087408

	arm_func_start FUN_0208745c
FUN_0208745c: ; 0x0208745C
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020874A4 ; =0x020907BC
	str r0, [r4]
	ldr r0, _020874A8 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x14]
	ldr r0, _020874AC ; =0x0000EA3C
	str r1, [r4, #0x10]
	str r0, [r4, #0xc]
	add r0, r5, #0x4e0000
	str r0, [r4, #8]
	add r0, r1, #0x840000
	str r0, [r4, #4]
	pop {r3, r4, r5, pc}
	.align 2, 0_020874A4: .word 0x020907BC
_020874A8: .word 0x00009CCD
_020874AC: .word 0x0000EA3C
	arm_func_end FUN_0208745c

	arm_func_start FUN_020874b0
FUN_020874b0: ; 0x020874B0
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020874F4 ; =0x02090804
	str r0, [r4, #0x10]
	ldr r0, _020874F8 ; =0x00009CCD
	bl FUN_020095ac
	str r0, [r4, #0xc]
	ldr r0, _020874FC ; =0x0000EA3C
	mov r1, #0x800
	stmib r4, {r0, r1}
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_020874F4: .word 0x02090804
_020874F8: .word 0x00009CCD
_020874FC: .word 0x0000EA3C
	arm_func_end FUN_020874b0

	arm_func_start FUN_02087500
FUN_02087500: ; 0x02087500
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087548 ; =0x02090894
	str r0, [r4, #4]
	ldr r0, _0208754C ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4]
	ldr r0, _02087550 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #0x14]
	add r0, r5, #0x4e0000
	str r0, [r4, #8]
	add r0, r1, #0x840000
	str r0, [r4, #0x10]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087548: .word 0x02090894
_0208754C: .word 0x00009CCD
_02087550: .word 0x0000EA3C
	arm_func_end FUN_02087500

	arm_func_start FUN_02087554
FUN_02087554: ; 0x02087554
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _0208759C ; =0x0209093C
	str r0, [r4, #8]
	ldr r0, _020875A0 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4]
	ldr r0, _020875A4 ; =0x0000EA3C
	str r1, [r4, #4]
	str r0, [r4, #0x14]
	add r0, r5, #0x4e0000
	str r0, [r4, #0x10]
	add r0, r1, #0x840000
	str r0, [r4, #0xc]
	pop {r3, r4, r5, pc}
	.align 2, 0_0208759C: .word 0x0209093C
_020875A0: .word 0x00009CCD
_020875A4: .word 0x0000EA3C
	arm_func_end FUN_02087554

	arm_func_start FUN_020875a8
FUN_020875a8: ; 0x020875A8
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020875F0 ; =0x020909B0
	str r0, [r4]
	ldr r0, _020875F4 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #4]
	ldr r0, _020875F8 ; =0x0000EA3C
	str r1, [r4, #0x14]
	str r0, [r4, #0x10]
	add r0, r5, #0x4e0000
	str r0, [r4, #0xc]
	add r0, r1, #0x840000
	str r0, [r4, #8]
	pop {r3, r4, r5, pc}
	.align 2, 0_020875F0: .word 0x020909B0
_020875F4: .word 0x00009CCD
_020875F8: .word 0x0000EA3C
	arm_func_end FUN_020875a8

	arm_func_start FUN_020875fc
FUN_020875fc: ; 0x020875FC
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087644 ; =0x02090B3C
	str r0, [r4, #4]
	ldr r0, _02087648 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _0208764C ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4]
	add r0, r5, #0x4e0000
	str r0, [r4, #0x14]
	add r0, r1, #0x840000
	str r0, [r4, #8]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087644: .word 0x02090B3C
_02087648: .word 0x00009CCD
_0208764C: .word 0x0000EA3C
	arm_func_end FUN_020875fc

	arm_func_start FUN_02087650
FUN_02087650: ; 0x02087650
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087698 ; =0x02090DB4
	str r0, [r4, #0x14]
	ldr r0, _0208769C ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _020876A0 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #4]
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #8]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087698: .word 0x02090DB4
_0208769C: .word 0x00009CCD
_020876A0: .word 0x0000EA3C
	arm_func_end FUN_02087650

	arm_func_start FUN_020876a4
FUN_020876a4: ; 0x020876A4
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020876EC ; =0x020912B0
	str r0, [r4, #0x14]
	ldr r0, _020876F0 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #0x10]
	ldr r0, _020876F4 ; =0x0000EA3C
	str r1, [r4, #0xc]
	str r0, [r4, #8]
	add r0, r5, #0x4e0000
	str r0, [r4, #4]
	add r0, r1, #0x840000
	str r0, [r4]
	pop {r3, r4, r5, pc}
	.align 2, 0_020876EC: .word 0x020912B0
_020876F0: .word 0x00009CCD
_020876F4: .word 0x0000EA3C
	arm_func_end FUN_020876a4

	arm_func_start FUN_020876f8
FUN_020876f8: ; 0x020876F8
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087740 ; =0x020912D8
	str r0, [r4, #4]
	ldr r0, _02087744 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #8]
	ldr r0, _02087748 ; =0x0000EA3C
	str r1, [r4]
	str r0, [r4, #0x14]
	add r0, r5, #0x4e0000
	str r0, [r4, #0x10]
	add r0, r1, #0x840000
	str r0, [r4, #0xc]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087740: .word 0x020912D8
_02087744: .word 0x00009CCD
_02087748: .word 0x0000EA3C
	arm_func_end FUN_020876f8

	arm_func_start FUN_0208774c
FUN_0208774c: ; 0x0208774C
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _02087794 ; =0x020938A0
	str r0, [r4]
	ldr r0, _02087798 ; =0x00009CCD
	bl FUN_020095ac
	mov r1, #0x800
	str r0, [r4, #4]
	ldr r0, _0208779C ; =0x0000EA3C
	str r1, [r4, #0x14]
	str r0, [r4, #0x10]
	add r0, r5, #0x4e0000
	str r0, [r4, #0xc]
	add r0, r1, #0x840000
	str r0, [r4, #8]
	pop {r3, r4, r5, pc}
	.align 2, 0_02087794: .word 0x020938A0
_02087798: .word 0x00009CCD
_0208779C: .word 0x0000EA3C
	arm_func_end FUN_0208774c

	arm_func_start FUN_020877a0
FUN_020877a0: ; 0x020877A0
	push {r3, r4, r5, lr}
	mov r5, #0x2000
	mov r0, r5
	bl FUN_020095ac
	ldr r4, _020877E4 ; =0x020938F4
	str r0, [r4, #0x10]
	ldr r0, _020877E8 ; =0x00009CCD
	bl FUN_020095ac
	str r0, [r4, #0xc]
	ldr r0, _020877EC ; =0x0000EA3C
	mov r1, #0x800
	stmib r4, {r0, r1}
	add r0, r5, #0x4e0000
	str r0, [r4]
	add r0, r1, #0x840000
	str r0, [r4, #0x14]
	pop {r3, r4, r5, pc}
	.align 2, 0_020877E4: .word 0x020938F4
_020877E8: .word 0x00009CCD
_020877EC: .word 0x0000EA3C
	arm_func_end FUN_020877a0
_020877F0:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00
	.byte 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x68, 0x90, 0x68, 0x80, 0x68, 0x94, 0x68, 0x00, 0x00
	.byte 0x90, 0x68, 0x80, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00
	.byte 0x20, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x40, 0x68, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x68, 0x40, 0x68, 0x20, 0x00, 0x20, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68
	.byte 0x00, 0x00, 0x00, 0x00, 0x60, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x60, 0x68, 0x20, 0x00
	.byte 0x20, 0x68, 0x60, 0x68, 0x20, 0x00, 0x00, 0x68, 0x60, 0x68, 0x40, 0x00, 0x40, 0x68, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x68, 0x40, 0x68, 0x20, 0x00, 0x20, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00, 0x10, 0x0D, 0x00, 0x00, 0x10
	.byte 0x13, 0x00, 0x00, 0x10, 0x19, 0x00, 0x00, 0x10, 0x1F, 0x00, 0x00, 0x10, 0x26, 0x00, 0x00, 0x10
	.byte 0x2C, 0x00, 0x00, 0x10, 0x32, 0x00, 0x00, 0x10, 0x39, 0x00, 0x00, 0x10, 0x3F, 0x00, 0x00, 0x10
	.byte 0x45, 0x00, 0xFF, 0x0F, 0x4B, 0x00, 0xFF, 0x0F, 0x52, 0x00, 0xFF, 0x0F, 0x58, 0x00, 0xFF, 0x0F
	.byte 0x5E, 0x00, 0xFF, 0x0F, 0x65, 0x00, 0xFF, 0x0F, 0x6B, 0x00, 0xFF, 0x0F, 0x71, 0x00, 0xFE, 0x0F
	.byte 0x77, 0x00, 0xFE, 0x0F, 0x7E, 0x00, 0xFE, 0x0F, 0x84, 0x00, 0xFE, 0x0F, 0x8A, 0x00, 0xFE, 0x0F
	.byte 0x90, 0x00, 0xFD, 0x0F, 0x97, 0x00, 0xFD, 0x0F, 0x9D, 0x00, 0xFD, 0x0F, 0xA3, 0x00, 0xFD, 0x0F
	.byte 0xAA, 0x00, 0xFC, 0x0F, 0xB0, 0x00, 0xFC, 0x0F, 0xB6, 0x00, 0xFC, 0x0F, 0xBC, 0x00, 0xFC, 0x0F
	.byte 0xC3, 0x00, 0xFB, 0x0F, 0xC9, 0x00, 0xFB, 0x0F, 0xCF, 0x00, 0xFB, 0x0F, 0xD6, 0x00, 0xFA, 0x0F
	.byte 0xDC, 0x00, 0xFA, 0x0F, 0xE2, 0x00, 0xFA, 0x0F, 0xE8, 0x00, 0xF9, 0x0F, 0xEF, 0x00, 0xF9, 0x0F
	.byte 0xF5, 0x00, 0xF9, 0x0F, 0xFB, 0x00, 0xF8, 0x0F, 0x01, 0x01, 0xF8, 0x0F, 0x08, 0x01, 0xF8, 0x0F
	.byte 0x0E, 0x01, 0xF7, 0x0F, 0x14, 0x01, 0xF7, 0x0F, 0x1B, 0x01, 0xF6, 0x0F, 0x21, 0x01, 0xF6, 0x0F
	.byte 0x27, 0x01, 0xF5, 0x0F, 0x2D, 0x01, 0xF5, 0x0F, 0x34, 0x01, 0xF4, 0x0F, 0x3A, 0x01, 0xF4, 0x0F
	.byte 0x40, 0x01, 0xF3, 0x0F, 0x46, 0x01, 0xF3, 0x0F, 0x4D, 0x01, 0xF2, 0x0F, 0x53, 0x01, 0xF2, 0x0F
	.byte 0x59, 0x01, 0xF1, 0x0F, 0x5F, 0x01, 0xF1, 0x0F, 0x66, 0x01, 0xF0, 0x0F, 0x6C, 0x01, 0xF0, 0x0F
	.byte 0x72, 0x01, 0xEF, 0x0F, 0x78, 0x01, 0xEF, 0x0F, 0x7F, 0x01, 0xEE, 0x0F, 0x85, 0x01, 0xED, 0x0F
	.byte 0x8B, 0x01, 0xED, 0x0F, 0x91, 0x01, 0xEC, 0x0F, 0x98, 0x01, 0xEC, 0x0F, 0x9E, 0x01, 0xEB, 0x0F
	.byte 0xA4, 0x01, 0xEA, 0x0F, 0xAA, 0x01, 0xEA, 0x0F, 0xB1, 0x01, 0xE9, 0x0F, 0xB7, 0x01, 0xE8, 0x0F
	.byte 0xBD, 0x01, 0xE8, 0x0F, 0xC3, 0x01, 0xE7, 0x0F, 0xCA, 0x01, 0xE6, 0x0F, 0xD0, 0x01, 0xE6, 0x0F
	.byte 0xD6, 0x01, 0xE5, 0x0F, 0xDC, 0x01, 0xE4, 0x0F, 0xE3, 0x01, 0xE3, 0x0F, 0xE9, 0x01, 0xE3, 0x0F
	.byte 0xEF, 0x01, 0xE2, 0x0F, 0xF5, 0x01, 0xE1, 0x0F, 0xFC, 0x01, 0xE0, 0x0F, 0x02, 0x02, 0xE0, 0x0F
	.byte 0x08, 0x02, 0xDF, 0x0F, 0x0E, 0x02, 0xDE, 0x0F, 0x15, 0x02, 0xDD, 0x0F, 0x1B, 0x02, 0xDC, 0x0F
	.byte 0x21, 0x02, 0xDC, 0x0F, 0x27, 0x02, 0xDB, 0x0F, 0x2D, 0x02, 0xDA, 0x0F, 0x34, 0x02, 0xD9, 0x0F
	.byte 0x3A, 0x02, 0xD8, 0x0F, 0x40, 0x02, 0xD7, 0x0F, 0x46, 0x02, 0xD6, 0x0F, 0x4D, 0x02, 0xD5, 0x0F
	.byte 0x53, 0x02, 0xD5, 0x0F, 0x59, 0x02, 0xD4, 0x0F, 0x5F, 0x02, 0xD3, 0x0F, 0x65, 0x02, 0xD2, 0x0F
	.byte 0x6C, 0x02, 0xD1, 0x0F, 0x72, 0x02, 0xD0, 0x0F, 0x78, 0x02, 0xCF, 0x0F, 0x7E, 0x02, 0xCE, 0x0F
	.byte 0x84, 0x02, 0xCD, 0x0F, 0x8B, 0x02, 0xCC, 0x0F, 0x91, 0x02, 0xCB, 0x0F, 0x97, 0x02, 0xCA, 0x0F
	.byte 0x9D, 0x02, 0xC9, 0x0F, 0xA3, 0x02, 0xC8, 0x0F, 0xAA, 0x02, 0xC7, 0x0F, 0xB0, 0x02, 0xC6, 0x0F
	.byte 0xB6, 0x02, 0xC5, 0x0F, 0xBC, 0x02, 0xC4, 0x0F, 0xC2, 0x02, 0xC3, 0x0F, 0xC9, 0x02, 0xC2, 0x0F
	.byte 0xCF, 0x02, 0xC0, 0x0F, 0xD5, 0x02, 0xBF, 0x0F, 0xDB, 0x02, 0xBE, 0x0F, 0xE1, 0x02, 0xBD, 0x0F
	.byte 0xE8, 0x02, 0xBC, 0x0F, 0xEE, 0x02, 0xBB, 0x0F, 0xF4, 0x02, 0xBA, 0x0F, 0xFA, 0x02, 0xB8, 0x0F
	.byte 0x00, 0x03, 0xB7, 0x0F, 0x06, 0x03, 0xB6, 0x0F, 0x0D, 0x03, 0xB5, 0x0F, 0x13, 0x03, 0xB4, 0x0F
	.byte 0x19, 0x03, 0xB3, 0x0F, 0x1F, 0x03, 0xB1, 0x0F, 0x25, 0x03, 0xB0, 0x0F, 0x2B, 0x03, 0xAF, 0x0F
	.byte 0x32, 0x03, 0xAE, 0x0F, 0x38, 0x03, 0xAC, 0x0F, 0x3E, 0x03, 0xAB, 0x0F, 0x44, 0x03, 0xAA, 0x0F
	.byte 0x4A, 0x03, 0xA8, 0x0F, 0x50, 0x03, 0xA7, 0x0F, 0x56, 0x03, 0xA6, 0x0F, 0x5D, 0x03, 0xA5, 0x0F
	.byte 0x63, 0x03, 0xA3, 0x0F, 0x69, 0x03, 0xA2, 0x0F, 0x6F, 0x03, 0xA1, 0x0F, 0x75, 0x03, 0x9F, 0x0F
	.byte 0x7B, 0x03, 0x9E, 0x0F, 0x81, 0x03, 0x9C, 0x0F, 0x88, 0x03, 0x9B, 0x0F, 0x8E, 0x03, 0x9A, 0x0F
	.byte 0x94, 0x03, 0x98, 0x0F, 0x9A, 0x03, 0x97, 0x0F, 0xA0, 0x03, 0x95, 0x0F, 0xA6, 0x03, 0x94, 0x0F
	.byte 0xAC, 0x03, 0x93, 0x0F, 0xB2, 0x03, 0x91, 0x0F, 0xB9, 0x03, 0x90, 0x0F, 0xBF, 0x03, 0x8E, 0x0F
	.byte 0xC5, 0x03, 0x8D, 0x0F, 0xCB, 0x03, 0x8B, 0x0F, 0xD1, 0x03, 0x8A, 0x0F, 0xD7, 0x03, 0x88, 0x0F
	.byte 0xDD, 0x03, 0x87, 0x0F, 0xE3, 0x03, 0x85, 0x0F, 0xE9, 0x03, 0x84, 0x0F, 0xEF, 0x03, 0x82, 0x0F
	.byte 0xF6, 0x03, 0x81, 0x0F, 0xFC, 0x03, 0x7F, 0x0F, 0x02, 0x04, 0x7D, 0x0F, 0x08, 0x04, 0x7C, 0x0F
	.byte 0x0E, 0x04, 0x7A, 0x0F, 0x14, 0x04, 0x79, 0x0F, 0x1A, 0x04, 0x77, 0x0F, 0x20, 0x04, 0x76, 0x0F
	.byte 0x26, 0x04, 0x74, 0x0F, 0x2C, 0x04, 0x72, 0x0F, 0x32, 0x04, 0x71, 0x0F, 0x38, 0x04, 0x6F, 0x0F
	.byte 0x3E, 0x04, 0x6D, 0x0F, 0x44, 0x04, 0x6C, 0x0F, 0x4B, 0x04, 0x6A, 0x0F, 0x51, 0x04, 0x68, 0x0F
	.byte 0x57, 0x04, 0x67, 0x0F, 0x5D, 0x04, 0x65, 0x0F, 0x63, 0x04, 0x63, 0x0F, 0x69, 0x04, 0x61, 0x0F
	.byte 0x6F, 0x04, 0x60, 0x0F, 0x75, 0x04, 0x5E, 0x0F, 0x7B, 0x04, 0x5C, 0x0F, 0x81, 0x04, 0x5A, 0x0F
	.byte 0x87, 0x04, 0x59, 0x0F, 0x8D, 0x04, 0x57, 0x0F, 0x93, 0x04, 0x55, 0x0F, 0x99, 0x04, 0x53, 0x0F
	.byte 0x9F, 0x04, 0x51, 0x0F, 0xA5, 0x04, 0x50, 0x0F, 0xAB, 0x04, 0x4E, 0x0F, 0xB1, 0x04, 0x4C, 0x0F
	.byte 0xB7, 0x04, 0x4A, 0x0F, 0xBD, 0x04, 0x48, 0x0F, 0xC3, 0x04, 0x46, 0x0F, 0xC9, 0x04, 0x45, 0x0F
	.byte 0xCF, 0x04, 0x43, 0x0F, 0xD5, 0x04, 0x41, 0x0F, 0xDB, 0x04, 0x3F, 0x0F, 0xE1, 0x04, 0x3D, 0x0F
	.byte 0xE7, 0x04, 0x3B, 0x0F, 0xED, 0x04, 0x39, 0x0F, 0xF3, 0x04, 0x37, 0x0F, 0xF9, 0x04, 0x35, 0x0F
	.byte 0xFF, 0x04, 0x33, 0x0F, 0x05, 0x05, 0x31, 0x0F, 0x0B, 0x05, 0x2F, 0x0F, 0x11, 0x05, 0x2D, 0x0F
	.byte 0x17, 0x05, 0x2B, 0x0F, 0x1D, 0x05, 0x29, 0x0F, 0x23, 0x05, 0x27, 0x0F, 0x29, 0x05, 0x25, 0x0F
	.byte 0x2F, 0x05, 0x23, 0x0F, 0x34, 0x05, 0x21, 0x0F, 0x3A, 0x05, 0x1F, 0x0F, 0x40, 0x05, 0x1D, 0x0F
	.byte 0x46, 0x05, 0x1B, 0x0F, 0x4C, 0x05, 0x19, 0x0F, 0x52, 0x05, 0x17, 0x0F, 0x58, 0x05, 0x15, 0x0F
	.byte 0x5E, 0x05, 0x13, 0x0F, 0x64, 0x05, 0x11, 0x0F, 0x6A, 0x05, 0x0E, 0x0F, 0x70, 0x05, 0x0C, 0x0F
	.byte 0x76, 0x05, 0x0A, 0x0F, 0x7C, 0x05, 0x08, 0x0F, 0x81, 0x05, 0x06, 0x0F, 0x87, 0x05, 0x04, 0x0F
	.byte 0x8D, 0x05, 0x02, 0x0F, 0x93, 0x05, 0xFF, 0x0E, 0x99, 0x05, 0xFD, 0x0E, 0x9F, 0x05, 0xFB, 0x0E
	.byte 0xA5, 0x05, 0xF9, 0x0E, 0xAB, 0x05, 0xF7, 0x0E, 0xB1, 0x05, 0xF4, 0x0E, 0xB6, 0x05, 0xF2, 0x0E
	.byte 0xBC, 0x05, 0xF0, 0x0E, 0xC2, 0x05, 0xEE, 0x0E, 0xC8, 0x05, 0xEB, 0x0E, 0xCE, 0x05, 0xE9, 0x0E
	.byte 0xD4, 0x05, 0xE7, 0x0E, 0xDA, 0x05, 0xE4, 0x0E, 0xDF, 0x05, 0xE2, 0x0E, 0xE5, 0x05, 0xE0, 0x0E
	.byte 0xEB, 0x05, 0xDD, 0x0E, 0xF1, 0x05, 0xDB, 0x0E, 0xF7, 0x05, 0xD9, 0x0E, 0xFD, 0x05, 0xD6, 0x0E
	.byte 0x02, 0x06, 0xD4, 0x0E, 0x08, 0x06, 0xD2, 0x0E, 0x0E, 0x06, 0xCF, 0x0E, 0x14, 0x06, 0xCD, 0x0E
	.byte 0x1A, 0x06, 0xCB, 0x0E, 0x1F, 0x06, 0xC8, 0x0E, 0x25, 0x06, 0xC6, 0x0E, 0x2B, 0x06, 0xC3, 0x0E
	.byte 0x31, 0x06, 0xC1, 0x0E, 0x37, 0x06, 0xBF, 0x0E, 0x3C, 0x06, 0xBC, 0x0E, 0x42, 0x06, 0xBA, 0x0E
	.byte 0x48, 0x06, 0xB7, 0x0E, 0x4E, 0x06, 0xB5, 0x0E, 0x54, 0x06, 0xB2, 0x0E, 0x59, 0x06, 0xB0, 0x0E
	.byte 0x5F, 0x06, 0xAD, 0x0E, 0x65, 0x06, 0xAB, 0x0E, 0x6B, 0x06, 0xA8, 0x0E, 0x70, 0x06, 0xA6, 0x0E
	.byte 0x76, 0x06, 0xA3, 0x0E, 0x7C, 0x06, 0xA1, 0x0E, 0x82, 0x06, 0x9E, 0x0E, 0x87, 0x06, 0x9B, 0x0E
	.byte 0x8D, 0x06, 0x99, 0x0E, 0x93, 0x06, 0x96, 0x0E, 0x99, 0x06, 0x94, 0x0E, 0x9E, 0x06, 0x91, 0x0E
	.byte 0xA4, 0x06, 0x8F, 0x0E, 0xAA, 0x06, 0x8C, 0x0E, 0xAF, 0x06, 0x89, 0x0E, 0xB5, 0x06, 0x87, 0x0E
	.byte 0xBB, 0x06, 0x84, 0x0E, 0xC1, 0x06, 0x81, 0x0E, 0xC6, 0x06, 0x7F, 0x0E, 0xCC, 0x06, 0x7C, 0x0E
	.byte 0xD2, 0x06, 0x79, 0x0E, 0xD7, 0x06, 0x77, 0x0E, 0xDD, 0x06, 0x74, 0x0E, 0xE3, 0x06, 0x71, 0x0E
	.byte 0xE8, 0x06, 0x6F, 0x0E, 0xEE, 0x06, 0x6C, 0x0E, 0xF4, 0x06, 0x69, 0x0E, 0xF9, 0x06, 0x66, 0x0E
	.byte 0xFF, 0x06, 0x64, 0x0E, 0x05, 0x07, 0x61, 0x0E, 0x0A, 0x07, 0x5E, 0x0E, 0x10, 0x07, 0x5B, 0x0E
	.byte 0x15, 0x07, 0x59, 0x0E, 0x1B, 0x07, 0x56, 0x0E, 0x21, 0x07, 0x53, 0x0E, 0x26, 0x07, 0x50, 0x0E
	.byte 0x2C, 0x07, 0x4D, 0x0E, 0x32, 0x07, 0x4B, 0x0E, 0x37, 0x07, 0x48, 0x0E, 0x3D, 0x07, 0x45, 0x0E
	.byte 0x42, 0x07, 0x42, 0x0E, 0x48, 0x07, 0x3F, 0x0E, 0x4E, 0x07, 0x3C, 0x0E, 0x53, 0x07, 0x3A, 0x0E
	.byte 0x59, 0x07, 0x37, 0x0E, 0x5E, 0x07, 0x34, 0x0E, 0x64, 0x07, 0x31, 0x0E, 0x6A, 0x07, 0x2E, 0x0E
	.byte 0x6F, 0x07, 0x2B, 0x0E, 0x75, 0x07, 0x28, 0x0E, 0x7A, 0x07, 0x25, 0x0E, 0x80, 0x07, 0x22, 0x0E
	.byte 0x85, 0x07, 0x1F, 0x0E, 0x8B, 0x07, 0x1C, 0x0E, 0x90, 0x07, 0x19, 0x0E, 0x96, 0x07, 0x16, 0x0E
	.byte 0x9B, 0x07, 0x13, 0x0E, 0xA1, 0x07, 0x10, 0x0E, 0xA6, 0x07, 0x0D, 0x0E, 0xAC, 0x07, 0x0A, 0x0E
	.byte 0xB2, 0x07, 0x07, 0x0E, 0xB7, 0x07, 0x04, 0x0E, 0xBD, 0x07, 0x01, 0x0E, 0xC2, 0x07, 0xFE, 0x0D
	.byte 0xC8, 0x07, 0xFB, 0x0D, 0xCD, 0x07, 0xF8, 0x0D, 0xD2, 0x07, 0xF5, 0x0D, 0xD8, 0x07, 0xF2, 0x0D
	.byte 0xDD, 0x07, 0xEF, 0x0D, 0xE3, 0x07, 0xEC, 0x0D, 0xE8, 0x07, 0xE9, 0x0D, 0xEE, 0x07, 0xE6, 0x0D
	.byte 0xF3, 0x07, 0xE3, 0x0D, 0xF9, 0x07, 0xDF, 0x0D, 0xFE, 0x07, 0xDC, 0x0D, 0x04, 0x08, 0xD9, 0x0D
	.byte 0x09, 0x08, 0xD6, 0x0D, 0x0E, 0x08, 0xD3, 0x0D, 0x14, 0x08, 0xD0, 0x0D, 0x19, 0x08, 0xCC, 0x0D
	.byte 0x1F, 0x08, 0xC9, 0x0D, 0x24, 0x08, 0xC6, 0x0D, 0x2A, 0x08, 0xC3, 0x0D, 0x2F, 0x08, 0xC0, 0x0D
	.byte 0x34, 0x08, 0xBC, 0x0D, 0x3A, 0x08, 0xB9, 0x0D, 0x3F, 0x08, 0xB6, 0x0D, 0x45, 0x08, 0xB3, 0x0D
	.byte 0x4A, 0x08, 0xB0, 0x0D, 0x4F, 0x08, 0xAC, 0x0D, 0x55, 0x08, 0xA9, 0x0D, 0x5A, 0x08, 0xA6, 0x0D
	.byte 0x5F, 0x08, 0xA2, 0x0D, 0x65, 0x08, 0x9F, 0x0D, 0x6A, 0x08, 0x9C, 0x0D, 0x6F, 0x08, 0x99, 0x0D
	.byte 0x75, 0x08, 0x95, 0x0D, 0x7A, 0x08, 0x92, 0x0D, 0x7F, 0x08, 0x8F, 0x0D, 0x85, 0x08, 0x8B, 0x0D
	.byte 0x8A, 0x08, 0x88, 0x0D, 0x8F, 0x08, 0x85, 0x0D, 0x95, 0x08, 0x81, 0x0D, 0x9A, 0x08, 0x7E, 0x0D
	.byte 0x9F, 0x08, 0x7A, 0x0D, 0xA5, 0x08, 0x77, 0x0D, 0xAA, 0x08, 0x74, 0x0D, 0xAF, 0x08, 0x70, 0x0D
	.byte 0xB4, 0x08, 0x6D, 0x0D, 0xBA, 0x08, 0x69, 0x0D, 0xBF, 0x08, 0x66, 0x0D, 0xC4, 0x08, 0x62, 0x0D
	.byte 0xC9, 0x08, 0x5F, 0x0D, 0xCF, 0x08, 0x5C, 0x0D, 0xD4, 0x08, 0x58, 0x0D, 0xD9, 0x08, 0x55, 0x0D
	.byte 0xDE, 0x08, 0x51, 0x0D, 0xE4, 0x08, 0x4E, 0x0D, 0xE9, 0x08, 0x4A, 0x0D, 0xEE, 0x08, 0x47, 0x0D
	.byte 0xF3, 0x08, 0x43, 0x0D, 0xF8, 0x08, 0x40, 0x0D, 0xFE, 0x08, 0x3C, 0x0D, 0x03, 0x09, 0x39, 0x0D
	.byte 0x08, 0x09, 0x35, 0x0D, 0x0D, 0x09, 0x32, 0x0D, 0x12, 0x09, 0x2E, 0x0D, 0x18, 0x09, 0x2A, 0x0D
	.byte 0x1D, 0x09, 0x27, 0x0D, 0x22, 0x09, 0x23, 0x0D, 0x27, 0x09, 0x20, 0x0D, 0x2C, 0x09, 0x1C, 0x0D
	.byte 0x31, 0x09, 0x18, 0x0D, 0x37, 0x09, 0x15, 0x0D, 0x3C, 0x09, 0x11, 0x0D, 0x41, 0x09, 0x0E, 0x0D
	.byte 0x46, 0x09, 0x0A, 0x0D, 0x4B, 0x09, 0x06, 0x0D, 0x50, 0x09, 0x03, 0x0D, 0x55, 0x09, 0xFF, 0x0C
	.byte 0x5A, 0x09, 0xFB, 0x0C, 0x5F, 0x09, 0xF8, 0x0C, 0x65, 0x09, 0xF4, 0x0C, 0x6A, 0x09, 0xF0, 0x0C
	.byte 0x6F, 0x09, 0xED, 0x0C, 0x74, 0x09, 0xE9, 0x0C, 0x79, 0x09, 0xE5, 0x0C, 0x7E, 0x09, 0xE1, 0x0C
	.byte 0x83, 0x09, 0xDE, 0x0C, 0x88, 0x09, 0xDA, 0x0C, 0x8D, 0x09, 0xD6, 0x0C, 0x92, 0x09, 0xD2, 0x0C
	.byte 0x97, 0x09, 0xCF, 0x0C, 0x9C, 0x09, 0xCB, 0x0C, 0xA1, 0x09, 0xC7, 0x0C, 0xA6, 0x09, 0xC3, 0x0C
	.byte 0xAB, 0x09, 0xC0, 0x0C, 0xB0, 0x09, 0xBC, 0x0C, 0xB5, 0x09, 0xB8, 0x0C, 0xBA, 0x09, 0xB4, 0x0C
	.byte 0xBF, 0x09, 0xB0, 0x0C, 0xC4, 0x09, 0xAC, 0x0C, 0xC9, 0x09, 0xA9, 0x0C, 0xCE, 0x09, 0xA5, 0x0C
	.byte 0xD3, 0x09, 0xA1, 0x0C, 0xD8, 0x09, 0x9D, 0x0C, 0xDD, 0x09, 0x99, 0x0C, 0xE2, 0x09, 0x95, 0x0C
	.byte 0xE7, 0x09, 0x91, 0x0C, 0xEC, 0x09, 0x8E, 0x0C, 0xF1, 0x09, 0x8A, 0x0C, 0xF6, 0x09, 0x86, 0x0C
	.byte 0xFB, 0x09, 0x82, 0x0C, 0xFF, 0x09, 0x7E, 0x0C, 0x04, 0x0A, 0x7A, 0x0C, 0x09, 0x0A, 0x76, 0x0C
	.byte 0x0E, 0x0A, 0x72, 0x0C, 0x13, 0x0A, 0x6E, 0x0C, 0x18, 0x0A, 0x6A, 0x0C, 0x1D, 0x0A, 0x66, 0x0C
	.byte 0x22, 0x0A, 0x62, 0x0C, 0x26, 0x0A, 0x5E, 0x0C, 0x2B, 0x0A, 0x5A, 0x0C, 0x30, 0x0A, 0x56, 0x0C
	.byte 0x35, 0x0A, 0x52, 0x0C, 0x3A, 0x0A, 0x4E, 0x0C, 0x3F, 0x0A, 0x4A, 0x0C, 0x44, 0x0A, 0x46, 0x0C
	.byte 0x48, 0x0A, 0x42, 0x0C, 0x4D, 0x0A, 0x3E, 0x0C, 0x52, 0x0A, 0x3A, 0x0C, 0x57, 0x0A, 0x36, 0x0C
	.byte 0x5C, 0x0A, 0x32, 0x0C, 0x60, 0x0A, 0x2E, 0x0C, 0x65, 0x0A, 0x2A, 0x0C, 0x6A, 0x0A, 0x26, 0x0C
	.byte 0x6F, 0x0A, 0x22, 0x0C, 0x73, 0x0A, 0x1E, 0x0C, 0x78, 0x0A, 0x19, 0x0C, 0x7D, 0x0A, 0x15, 0x0C
	.byte 0x82, 0x0A, 0x11, 0x0C, 0x86, 0x0A, 0x0D, 0x0C, 0x8B, 0x0A, 0x09, 0x0C, 0x90, 0x0A, 0x05, 0x0C
	.byte 0x95, 0x0A, 0x01, 0x0C, 0x99, 0x0A, 0xFC, 0x0B, 0x9E, 0x0A, 0xF8, 0x0B, 0xA3, 0x0A, 0xF4, 0x0B
	.byte 0xA7, 0x0A, 0xF0, 0x0B, 0xAC, 0x0A, 0xEC, 0x0B, 0xB1, 0x0A, 0xE8, 0x0B, 0xB5, 0x0A, 0xE3, 0x0B
	.byte 0xBA, 0x0A, 0xDF, 0x0B, 0xBF, 0x0A, 0xDB, 0x0B, 0xC3, 0x0A, 0xD7, 0x0B, 0xC8, 0x0A, 0xD2, 0x0B
	.byte 0xCD, 0x0A, 0xCE, 0x0B, 0xD1, 0x0A, 0xCA, 0x0B, 0xD6, 0x0A, 0xC6, 0x0B, 0xDB, 0x0A, 0xC1, 0x0B
	.byte 0xDF, 0x0A, 0xBD, 0x0B, 0xE4, 0x0A, 0xB9, 0x0B, 0xE8, 0x0A, 0xB5, 0x0B, 0xED, 0x0A, 0xB0, 0x0B
	.byte 0xF2, 0x0A, 0xAC, 0x0B, 0xF6, 0x0A, 0xA8, 0x0B, 0xFB, 0x0A, 0xA3, 0x0B, 0xFF, 0x0A, 0x9F, 0x0B
	.byte 0x04, 0x0B, 0x9B, 0x0B, 0x08, 0x0B, 0x97, 0x0B, 0x0D, 0x0B, 0x92, 0x0B, 0x11, 0x0B, 0x8E, 0x0B
	.byte 0x16, 0x0B, 0x89, 0x0B, 0x1B, 0x0B, 0x85, 0x0B, 0x1F, 0x0B, 0x81, 0x0B, 0x24, 0x0B, 0x7C, 0x0B
	.byte 0x28, 0x0B, 0x78, 0x0B, 0x2D, 0x0B, 0x74, 0x0B, 0x31, 0x0B, 0x6F, 0x0B, 0x36, 0x0B, 0x6B, 0x0B
	.byte 0x3A, 0x0B, 0x66, 0x0B, 0x3E, 0x0B, 0x62, 0x0B, 0x43, 0x0B, 0x5E, 0x0B, 0x47, 0x0B, 0x59, 0x0B
	.byte 0x4C, 0x0B, 0x55, 0x0B, 0x50, 0x0B, 0x50, 0x0B, 0x55, 0x0B, 0x4C, 0x0B, 0x59, 0x0B, 0x47, 0x0B
	.byte 0x5E, 0x0B, 0x43, 0x0B, 0x62, 0x0B, 0x3E, 0x0B, 0x66, 0x0B, 0x3A, 0x0B, 0x6B, 0x0B, 0x36, 0x0B
	.byte 0x6F, 0x0B, 0x31, 0x0B, 0x74, 0x0B, 0x2D, 0x0B, 0x78, 0x0B, 0x28, 0x0B, 0x7C, 0x0B, 0x24, 0x0B
	.byte 0x81, 0x0B, 0x1F, 0x0B, 0x85, 0x0B, 0x1B, 0x0B, 0x89, 0x0B, 0x16, 0x0B, 0x8E, 0x0B, 0x11, 0x0B
	.byte 0x92, 0x0B, 0x0D, 0x0B, 0x97, 0x0B, 0x08, 0x0B, 0x9B, 0x0B, 0x04, 0x0B, 0x9F, 0x0B, 0xFF, 0x0A
	.byte 0xA3, 0x0B, 0xFB, 0x0A, 0xA8, 0x0B, 0xF6, 0x0A, 0xAC, 0x0B, 0xF2, 0x0A, 0xB0, 0x0B, 0xED, 0x0A
	.byte 0xB5, 0x0B, 0xE8, 0x0A, 0xB9, 0x0B, 0xE4, 0x0A, 0xBD, 0x0B, 0xDF, 0x0A, 0xC1, 0x0B, 0xDB, 0x0A
	.byte 0xC6, 0x0B, 0xD6, 0x0A, 0xCA, 0x0B, 0xD1, 0x0A, 0xCE, 0x0B, 0xCD, 0x0A, 0xD2, 0x0B, 0xC8, 0x0A
	.byte 0xD7, 0x0B, 0xC3, 0x0A, 0xDB, 0x0B, 0xBF, 0x0A, 0xDF, 0x0B, 0xBA, 0x0A, 0xE3, 0x0B, 0xB5, 0x0A
	.byte 0xE8, 0x0B, 0xB1, 0x0A, 0xEC, 0x0B, 0xAC, 0x0A, 0xF0, 0x0B, 0xA7, 0x0A, 0xF4, 0x0B, 0xA3, 0x0A
	.byte 0xF8, 0x0B, 0x9E, 0x0A, 0xFC, 0x0B, 0x99, 0x0A, 0x01, 0x0C, 0x95, 0x0A, 0x05, 0x0C, 0x90, 0x0A
	.byte 0x09, 0x0C, 0x8B, 0x0A, 0x0D, 0x0C, 0x86, 0x0A, 0x11, 0x0C, 0x82, 0x0A, 0x15, 0x0C, 0x7D, 0x0A
	.byte 0x19, 0x0C, 0x78, 0x0A, 0x1E, 0x0C, 0x73, 0x0A, 0x22, 0x0C, 0x6F, 0x0A, 0x26, 0x0C, 0x6A, 0x0A
	.byte 0x2A, 0x0C, 0x65, 0x0A, 0x2E, 0x0C, 0x60, 0x0A, 0x32, 0x0C, 0x5C, 0x0A, 0x36, 0x0C, 0x57, 0x0A
	.byte 0x3A, 0x0C, 0x52, 0x0A, 0x3E, 0x0C, 0x4D, 0x0A, 0x42, 0x0C, 0x48, 0x0A, 0x46, 0x0C, 0x44, 0x0A
	.byte 0x4A, 0x0C, 0x3F, 0x0A, 0x4E, 0x0C, 0x3A, 0x0A, 0x52, 0x0C, 0x35, 0x0A, 0x56, 0x0C, 0x30, 0x0A
	.byte 0x5A, 0x0C, 0x2B, 0x0A, 0x5E, 0x0C, 0x26, 0x0A, 0x62, 0x0C, 0x22, 0x0A, 0x66, 0x0C, 0x1D, 0x0A
	.byte 0x6A, 0x0C, 0x18, 0x0A, 0x6E, 0x0C, 0x13, 0x0A, 0x72, 0x0C, 0x0E, 0x0A, 0x76, 0x0C, 0x09, 0x0A
	.byte 0x7A, 0x0C, 0x04, 0x0A, 0x7E, 0x0C, 0xFF, 0x09, 0x82, 0x0C, 0xFB, 0x09, 0x86, 0x0C, 0xF6, 0x09
	.byte 0x8A, 0x0C, 0xF1, 0x09, 0x8E, 0x0C, 0xEC, 0x09, 0x91, 0x0C, 0xE7, 0x09, 0x95, 0x0C, 0xE2, 0x09
	.byte 0x99, 0x0C, 0xDD, 0x09, 0x9D, 0x0C, 0xD8, 0x09, 0xA1, 0x0C, 0xD3, 0x09, 0xA5, 0x0C, 0xCE, 0x09
	.byte 0xA9, 0x0C, 0xC9, 0x09, 0xAC, 0x0C, 0xC4, 0x09, 0xB0, 0x0C, 0xBF, 0x09, 0xB4, 0x0C, 0xBA, 0x09
	.byte 0xB8, 0x0C, 0xB5, 0x09, 0xBC, 0x0C, 0xB0, 0x09, 0xC0, 0x0C, 0xAB, 0x09, 0xC3, 0x0C, 0xA6, 0x09
	.byte 0xC7, 0x0C, 0xA1, 0x09, 0xCB, 0x0C, 0x9C, 0x09, 0xCF, 0x0C, 0x97, 0x09, 0xD2, 0x0C, 0x92, 0x09
	.byte 0xD6, 0x0C, 0x8D, 0x09, 0xDA, 0x0C, 0x88, 0x09, 0xDE, 0x0C, 0x83, 0x09, 0xE1, 0x0C, 0x7E, 0x09
	.byte 0xE5, 0x0C, 0x79, 0x09, 0xE9, 0x0C, 0x74, 0x09, 0xED, 0x0C, 0x6F, 0x09, 0xF0, 0x0C, 0x6A, 0x09
	.byte 0xF4, 0x0C, 0x65, 0x09, 0xF8, 0x0C, 0x5F, 0x09, 0xFB, 0x0C, 0x5A, 0x09, 0xFF, 0x0C, 0x55, 0x09
	.byte 0x03, 0x0D, 0x50, 0x09, 0x06, 0x0D, 0x4B, 0x09, 0x0A, 0x0D, 0x46, 0x09, 0x0E, 0x0D, 0x41, 0x09
	.byte 0x11, 0x0D, 0x3C, 0x09, 0x15, 0x0D, 0x37, 0x09, 0x18, 0x0D, 0x31, 0x09, 0x1C, 0x0D, 0x2C, 0x09
	.byte 0x20, 0x0D, 0x27, 0x09, 0x23, 0x0D, 0x22, 0x09, 0x27, 0x0D, 0x1D, 0x09, 0x2A, 0x0D, 0x18, 0x09
	.byte 0x2E, 0x0D, 0x12, 0x09, 0x32, 0x0D, 0x0D, 0x09, 0x35, 0x0D, 0x08, 0x09, 0x39, 0x0D, 0x03, 0x09
	.byte 0x3C, 0x0D, 0xFE, 0x08, 0x40, 0x0D, 0xF8, 0x08, 0x43, 0x0D, 0xF3, 0x08, 0x47, 0x0D, 0xEE, 0x08
	.byte 0x4A, 0x0D, 0xE9, 0x08, 0x4E, 0x0D, 0xE4, 0x08, 0x51, 0x0D, 0xDE, 0x08, 0x55, 0x0D, 0xD9, 0x08
	.byte 0x58, 0x0D, 0xD4, 0x08, 0x5C, 0x0D, 0xCF, 0x08, 0x5F, 0x0D, 0xC9, 0x08, 0x62, 0x0D, 0xC4, 0x08
	.byte 0x66, 0x0D, 0xBF, 0x08, 0x69, 0x0D, 0xBA, 0x08, 0x6D, 0x0D, 0xB4, 0x08, 0x70, 0x0D, 0xAF, 0x08
	.byte 0x74, 0x0D, 0xAA, 0x08, 0x77, 0x0D, 0xA5, 0x08, 0x7A, 0x0D, 0x9F, 0x08, 0x7E, 0x0D, 0x9A, 0x08
	.byte 0x81, 0x0D, 0x95, 0x08, 0x85, 0x0D, 0x8F, 0x08, 0x88, 0x0D, 0x8A, 0x08, 0x8B, 0x0D, 0x85, 0x08
	.byte 0x8F, 0x0D, 0x7F, 0x08, 0x92, 0x0D, 0x7A, 0x08, 0x95, 0x0D, 0x75, 0x08, 0x99, 0x0D, 0x6F, 0x08
	.byte 0x9C, 0x0D, 0x6A, 0x08, 0x9F, 0x0D, 0x65, 0x08, 0xA2, 0x0D, 0x5F, 0x08, 0xA6, 0x0D, 0x5A, 0x08
	.byte 0xA9, 0x0D, 0x55, 0x08, 0xAC, 0x0D, 0x4F, 0x08, 0xB0, 0x0D, 0x4A, 0x08, 0xB3, 0x0D, 0x45, 0x08
	.byte 0xB6, 0x0D, 0x3F, 0x08, 0xB9, 0x0D, 0x3A, 0x08, 0xBC, 0x0D, 0x34, 0x08, 0xC0, 0x0D, 0x2F, 0x08
	.byte 0xC3, 0x0D, 0x2A, 0x08, 0xC6, 0x0D, 0x24, 0x08, 0xC9, 0x0D, 0x1F, 0x08, 0xCC, 0x0D, 0x19, 0x08
	.byte 0xD0, 0x0D, 0x14, 0x08, 0xD3, 0x0D, 0x0E, 0x08, 0xD6, 0x0D, 0x09, 0x08, 0xD9, 0x0D, 0x04, 0x08
	.byte 0xDC, 0x0D, 0xFE, 0x07, 0xDF, 0x0D, 0xF9, 0x07, 0xE3, 0x0D, 0xF3, 0x07, 0xE6, 0x0D, 0xEE, 0x07
	.byte 0xE9, 0x0D, 0xE8, 0x07, 0xEC, 0x0D, 0xE3, 0x07, 0xEF, 0x0D, 0xDD, 0x07, 0xF2, 0x0D, 0xD8, 0x07
	.byte 0xF5, 0x0D, 0xD2, 0x07, 0xF8, 0x0D, 0xCD, 0x07, 0xFB, 0x0D, 0xC8, 0x07, 0xFE, 0x0D, 0xC2, 0x07
	.byte 0x01, 0x0E, 0xBD, 0x07, 0x04, 0x0E, 0xB7, 0x07, 0x07, 0x0E, 0xB2, 0x07, 0x0A, 0x0E, 0xAC, 0x07
	.byte 0x0D, 0x0E, 0xA6, 0x07, 0x10, 0x0E, 0xA1, 0x07, 0x13, 0x0E, 0x9B, 0x07, 0x16, 0x0E, 0x96, 0x07
	.byte 0x19, 0x0E, 0x90, 0x07, 0x1C, 0x0E, 0x8B, 0x07, 0x1F, 0x0E, 0x85, 0x07, 0x22, 0x0E, 0x80, 0x07
	.byte 0x25, 0x0E, 0x7A, 0x07, 0x28, 0x0E, 0x75, 0x07, 0x2B, 0x0E, 0x6F, 0x07, 0x2E, 0x0E, 0x6A, 0x07
	.byte 0x31, 0x0E, 0x64, 0x07, 0x34, 0x0E, 0x5E, 0x07, 0x37, 0x0E, 0x59, 0x07, 0x3A, 0x0E, 0x53, 0x07
	.byte 0x3C, 0x0E, 0x4E, 0x07, 0x3F, 0x0E, 0x48, 0x07, 0x42, 0x0E, 0x42, 0x07, 0x45, 0x0E, 0x3D, 0x07
	.byte 0x48, 0x0E, 0x37, 0x07, 0x4B, 0x0E, 0x32, 0x07, 0x4D, 0x0E, 0x2C, 0x07, 0x50, 0x0E, 0x26, 0x07
	.byte 0x53, 0x0E, 0x21, 0x07, 0x56, 0x0E, 0x1B, 0x07, 0x59, 0x0E, 0x15, 0x07, 0x5B, 0x0E, 0x10, 0x07
	.byte 0x5E, 0x0E, 0x0A, 0x07, 0x61, 0x0E, 0x05, 0x07, 0x64, 0x0E, 0xFF, 0x06, 0x66, 0x0E, 0xF9, 0x06
	.byte 0x69, 0x0E, 0xF4, 0x06, 0x6C, 0x0E, 0xEE, 0x06, 0x6F, 0x0E, 0xE8, 0x06, 0x71, 0x0E, 0xE3, 0x06
	.byte 0x74, 0x0E, 0xDD, 0x06, 0x77, 0x0E, 0xD7, 0x06, 0x79, 0x0E, 0xD2, 0x06, 0x7C, 0x0E, 0xCC, 0x06
	.byte 0x7F, 0x0E, 0xC6, 0x06, 0x81, 0x0E, 0xC1, 0x06, 0x84, 0x0E, 0xBB, 0x06, 0x87, 0x0E, 0xB5, 0x06
	.byte 0x89, 0x0E, 0xAF, 0x06, 0x8C, 0x0E, 0xAA, 0x06, 0x8F, 0x0E, 0xA4, 0x06, 0x91, 0x0E, 0x9E, 0x06
	.byte 0x94, 0x0E, 0x99, 0x06, 0x96, 0x0E, 0x93, 0x06, 0x99, 0x0E, 0x8D, 0x06, 0x9B, 0x0E, 0x87, 0x06
	.byte 0x9E, 0x0E, 0x82, 0x06, 0xA1, 0x0E, 0x7C, 0x06, 0xA3, 0x0E, 0x76, 0x06, 0xA6, 0x0E, 0x70, 0x06
	.byte 0xA8, 0x0E, 0x6B, 0x06, 0xAB, 0x0E, 0x65, 0x06, 0xAD, 0x0E, 0x5F, 0x06, 0xB0, 0x0E, 0x59, 0x06
	.byte 0xB2, 0x0E, 0x54, 0x06, 0xB5, 0x0E, 0x4E, 0x06, 0xB7, 0x0E, 0x48, 0x06, 0xBA, 0x0E, 0x42, 0x06
	.byte 0xBC, 0x0E, 0x3C, 0x06, 0xBF, 0x0E, 0x37, 0x06, 0xC1, 0x0E, 0x31, 0x06, 0xC3, 0x0E, 0x2B, 0x06
	.byte 0xC6, 0x0E, 0x25, 0x06, 0xC8, 0x0E, 0x1F, 0x06, 0xCB, 0x0E, 0x1A, 0x06, 0xCD, 0x0E, 0x14, 0x06
	.byte 0xCF, 0x0E, 0x0E, 0x06, 0xD2, 0x0E, 0x08, 0x06, 0xD4, 0x0E, 0x02, 0x06, 0xD6, 0x0E, 0xFD, 0x05
	.byte 0xD9, 0x0E, 0xF7, 0x05, 0xDB, 0x0E, 0xF1, 0x05, 0xDD, 0x0E, 0xEB, 0x05, 0xE0, 0x0E, 0xE5, 0x05
	.byte 0xE2, 0x0E, 0xDF, 0x05, 0xE4, 0x0E, 0xDA, 0x05, 0xE7, 0x0E, 0xD4, 0x05, 0xE9, 0x0E, 0xCE, 0x05
	.byte 0xEB, 0x0E, 0xC8, 0x05, 0xEE, 0x0E, 0xC2, 0x05, 0xF0, 0x0E, 0xBC, 0x05, 0xF2, 0x0E, 0xB6, 0x05
	.byte 0xF4, 0x0E, 0xB1, 0x05, 0xF7, 0x0E, 0xAB, 0x05, 0xF9, 0x0E, 0xA5, 0x05, 0xFB, 0x0E, 0x9F, 0x05
	.byte 0xFD, 0x0E, 0x99, 0x05, 0xFF, 0x0E, 0x93, 0x05, 0x02, 0x0F, 0x8D, 0x05, 0x04, 0x0F, 0x87, 0x05
	.byte 0x06, 0x0F, 0x81, 0x05, 0x08, 0x0F, 0x7C, 0x05, 0x0A, 0x0F, 0x76, 0x05, 0x0C, 0x0F, 0x70, 0x05
	.byte 0x0E, 0x0F, 0x6A, 0x05, 0x11, 0x0F, 0x64, 0x05, 0x13, 0x0F, 0x5E, 0x05, 0x15, 0x0F, 0x58, 0x05
	.byte 0x17, 0x0F, 0x52, 0x05, 0x19, 0x0F, 0x4C, 0x05, 0x1B, 0x0F, 0x46, 0x05, 0x1D, 0x0F, 0x40, 0x05
	.byte 0x1F, 0x0F, 0x3A, 0x05, 0x21, 0x0F, 0x34, 0x05, 0x23, 0x0F, 0x2F, 0x05, 0x25, 0x0F, 0x29, 0x05
	.byte 0x27, 0x0F, 0x23, 0x05, 0x29, 0x0F, 0x1D, 0x05, 0x2B, 0x0F, 0x17, 0x05, 0x2D, 0x0F, 0x11, 0x05
	.byte 0x2F, 0x0F, 0x0B, 0x05, 0x31, 0x0F, 0x05, 0x05, 0x33, 0x0F, 0xFF, 0x04, 0x35, 0x0F, 0xF9, 0x04
	.byte 0x37, 0x0F, 0xF3, 0x04, 0x39, 0x0F, 0xED, 0x04, 0x3B, 0x0F, 0xE7, 0x04, 0x3D, 0x0F, 0xE1, 0x04
	.byte 0x3F, 0x0F, 0xDB, 0x04, 0x41, 0x0F, 0xD5, 0x04, 0x43, 0x0F, 0xCF, 0x04, 0x45, 0x0F, 0xC9, 0x04
	.byte 0x46, 0x0F, 0xC3, 0x04, 0x48, 0x0F, 0xBD, 0x04, 0x4A, 0x0F, 0xB7, 0x04, 0x4C, 0x0F, 0xB1, 0x04
	.byte 0x4E, 0x0F, 0xAB, 0x04, 0x50, 0x0F, 0xA5, 0x04, 0x51, 0x0F, 0x9F, 0x04, 0x53, 0x0F, 0x99, 0x04
	.byte 0x55, 0x0F, 0x93, 0x04, 0x57, 0x0F, 0x8D, 0x04, 0x59, 0x0F, 0x87, 0x04, 0x5A, 0x0F, 0x81, 0x04
	.byte 0x5C, 0x0F, 0x7B, 0x04, 0x5E, 0x0F, 0x75, 0x04, 0x60, 0x0F, 0x6F, 0x04, 0x61, 0x0F, 0x69, 0x04
	.byte 0x63, 0x0F, 0x63, 0x04, 0x65, 0x0F, 0x5D, 0x04, 0x67, 0x0F, 0x57, 0x04, 0x68, 0x0F, 0x51, 0x04
	.byte 0x6A, 0x0F, 0x4B, 0x04, 0x6C, 0x0F, 0x44, 0x04, 0x6D, 0x0F, 0x3E, 0x04, 0x6F, 0x0F, 0x38, 0x04
	.byte 0x71, 0x0F, 0x32, 0x04, 0x72, 0x0F, 0x2C, 0x04, 0x74, 0x0F, 0x26, 0x04, 0x76, 0x0F, 0x20, 0x04
	.byte 0x77, 0x0F, 0x1A, 0x04, 0x79, 0x0F, 0x14, 0x04, 0x7A, 0x0F, 0x0E, 0x04, 0x7C, 0x0F, 0x08, 0x04
	.byte 0x7D, 0x0F, 0x02, 0x04, 0x7F, 0x0F, 0xFC, 0x03, 0x81, 0x0F, 0xF6, 0x03, 0x82, 0x0F, 0xEF, 0x03
	.byte 0x84, 0x0F, 0xE9, 0x03, 0x85, 0x0F, 0xE3, 0x03, 0x87, 0x0F, 0xDD, 0x03, 0x88, 0x0F, 0xD7, 0x03
	.byte 0x8A, 0x0F, 0xD1, 0x03, 0x8B, 0x0F, 0xCB, 0x03, 0x8D, 0x0F, 0xC5, 0x03, 0x8E, 0x0F, 0xBF, 0x03
	.byte 0x90, 0x0F, 0xB9, 0x03, 0x91, 0x0F, 0xB2, 0x03, 0x93, 0x0F, 0xAC, 0x03, 0x94, 0x0F, 0xA6, 0x03
	.byte 0x95, 0x0F, 0xA0, 0x03, 0x97, 0x0F, 0x9A, 0x03, 0x98, 0x0F, 0x94, 0x03, 0x9A, 0x0F, 0x8E, 0x03
	.byte 0x9B, 0x0F, 0x88, 0x03, 0x9C, 0x0F, 0x81, 0x03, 0x9E, 0x0F, 0x7B, 0x03, 0x9F, 0x0F, 0x75, 0x03
	.byte 0xA1, 0x0F, 0x6F, 0x03, 0xA2, 0x0F, 0x69, 0x03, 0xA3, 0x0F, 0x63, 0x03, 0xA5, 0x0F, 0x5D, 0x03
	.byte 0xA6, 0x0F, 0x56, 0x03, 0xA7, 0x0F, 0x50, 0x03, 0xA8, 0x0F, 0x4A, 0x03, 0xAA, 0x0F, 0x44, 0x03
	.byte 0xAB, 0x0F, 0x3E, 0x03, 0xAC, 0x0F, 0x38, 0x03, 0xAE, 0x0F, 0x32, 0x03, 0xAF, 0x0F, 0x2B, 0x03
	.byte 0xB0, 0x0F, 0x25, 0x03, 0xB1, 0x0F, 0x1F, 0x03, 0xB3, 0x0F, 0x19, 0x03, 0xB4, 0x0F, 0x13, 0x03
	.byte 0xB5, 0x0F, 0x0D, 0x03, 0xB6, 0x0F, 0x06, 0x03, 0xB7, 0x0F, 0x00, 0x03, 0xB8, 0x0F, 0xFA, 0x02
	.byte 0xBA, 0x0F, 0xF4, 0x02, 0xBB, 0x0F, 0xEE, 0x02, 0xBC, 0x0F, 0xE8, 0x02, 0xBD, 0x0F, 0xE1, 0x02
	.byte 0xBE, 0x0F, 0xDB, 0x02, 0xBF, 0x0F, 0xD5, 0x02, 0xC0, 0x0F, 0xCF, 0x02, 0xC2, 0x0F, 0xC9, 0x02
	.byte 0xC3, 0x0F, 0xC2, 0x02, 0xC4, 0x0F, 0xBC, 0x02, 0xC5, 0x0F, 0xB6, 0x02, 0xC6, 0x0F, 0xB0, 0x02
	.byte 0xC7, 0x0F, 0xAA, 0x02, 0xC8, 0x0F, 0xA3, 0x02, 0xC9, 0x0F, 0x9D, 0x02, 0xCA, 0x0F, 0x97, 0x02
	.byte 0xCB, 0x0F, 0x91, 0x02, 0xCC, 0x0F, 0x8B, 0x02, 0xCD, 0x0F, 0x84, 0x02, 0xCE, 0x0F, 0x7E, 0x02
	.byte 0xCF, 0x0F, 0x78, 0x02, 0xD0, 0x0F, 0x72, 0x02, 0xD1, 0x0F, 0x6C, 0x02, 0xD2, 0x0F, 0x65, 0x02
	.byte 0xD3, 0x0F, 0x5F, 0x02, 0xD4, 0x0F, 0x59, 0x02, 0xD5, 0x0F, 0x53, 0x02, 0xD5, 0x0F, 0x4D, 0x02
	.byte 0xD6, 0x0F, 0x46, 0x02, 0xD7, 0x0F, 0x40, 0x02, 0xD8, 0x0F, 0x3A, 0x02, 0xD9, 0x0F, 0x34, 0x02
	.byte 0xDA, 0x0F, 0x2D, 0x02, 0xDB, 0x0F, 0x27, 0x02, 0xDC, 0x0F, 0x21, 0x02, 0xDC, 0x0F, 0x1B, 0x02
	.byte 0xDD, 0x0F, 0x15, 0x02, 0xDE, 0x0F, 0x0E, 0x02, 0xDF, 0x0F, 0x08, 0x02, 0xE0, 0x0F, 0x02, 0x02
	.byte 0xE0, 0x0F, 0xFC, 0x01, 0xE1, 0x0F, 0xF5, 0x01, 0xE2, 0x0F, 0xEF, 0x01, 0xE3, 0x0F, 0xE9, 0x01
	.byte 0xE3, 0x0F, 0xE3, 0x01, 0xE4, 0x0F, 0xDC, 0x01, 0xE5, 0x0F, 0xD6, 0x01, 0xE6, 0x0F, 0xD0, 0x01
	.byte 0xE6, 0x0F, 0xCA, 0x01, 0xE7, 0x0F, 0xC3, 0x01, 0xE8, 0x0F, 0xBD, 0x01, 0xE8, 0x0F, 0xB7, 0x01
	.byte 0xE9, 0x0F, 0xB1, 0x01, 0xEA, 0x0F, 0xAA, 0x01, 0xEA, 0x0F, 0xA4, 0x01, 0xEB, 0x0F, 0x9E, 0x01
	.byte 0xEC, 0x0F, 0x98, 0x01, 0xEC, 0x0F, 0x91, 0x01, 0xED, 0x0F, 0x8B, 0x01, 0xED, 0x0F, 0x85, 0x01
	.byte 0xEE, 0x0F, 0x7F, 0x01, 0xEF, 0x0F, 0x78, 0x01, 0xEF, 0x0F, 0x72, 0x01, 0xF0, 0x0F, 0x6C, 0x01
	.byte 0xF0, 0x0F, 0x66, 0x01, 0xF1, 0x0F, 0x5F, 0x01, 0xF1, 0x0F, 0x59, 0x01, 0xF2, 0x0F, 0x53, 0x01
	.byte 0xF2, 0x0F, 0x4D, 0x01, 0xF3, 0x0F, 0x46, 0x01, 0xF3, 0x0F, 0x40, 0x01, 0xF4, 0x0F, 0x3A, 0x01
	.byte 0xF4, 0x0F, 0x34, 0x01, 0xF5, 0x0F, 0x2D, 0x01, 0xF5, 0x0F, 0x27, 0x01, 0xF6, 0x0F, 0x21, 0x01
	.byte 0xF6, 0x0F, 0x1B, 0x01, 0xF7, 0x0F, 0x14, 0x01, 0xF7, 0x0F, 0x0E, 0x01, 0xF8, 0x0F, 0x08, 0x01
	.byte 0xF8, 0x0F, 0x01, 0x01, 0xF8, 0x0F, 0xFB, 0x00, 0xF9, 0x0F, 0xF5, 0x00, 0xF9, 0x0F, 0xEF, 0x00
	.byte 0xF9, 0x0F, 0xE8, 0x00, 0xFA, 0x0F, 0xE2, 0x00, 0xFA, 0x0F, 0xDC, 0x00, 0xFA, 0x0F, 0xD6, 0x00
	.byte 0xFB, 0x0F, 0xCF, 0x00, 0xFB, 0x0F, 0xC9, 0x00, 0xFB, 0x0F, 0xC3, 0x00, 0xFC, 0x0F, 0xBC, 0x00
	.byte 0xFC, 0x0F, 0xB6, 0x00, 0xFC, 0x0F, 0xB0, 0x00, 0xFC, 0x0F, 0xAA, 0x00, 0xFD, 0x0F, 0xA3, 0x00
	.byte 0xFD, 0x0F, 0x9D, 0x00, 0xFD, 0x0F, 0x97, 0x00, 0xFD, 0x0F, 0x90, 0x00, 0xFE, 0x0F, 0x8A, 0x00
	.byte 0xFE, 0x0F, 0x84, 0x00, 0xFE, 0x0F, 0x7E, 0x00, 0xFE, 0x0F, 0x77, 0x00, 0xFE, 0x0F, 0x71, 0x00
	.byte 0xFF, 0x0F, 0x6B, 0x00, 0xFF, 0x0F, 0x65, 0x00, 0xFF, 0x0F, 0x5E, 0x00, 0xFF, 0x0F, 0x58, 0x00
	.byte 0xFF, 0x0F, 0x52, 0x00, 0xFF, 0x0F, 0x4B, 0x00, 0xFF, 0x0F, 0x45, 0x00, 0x00, 0x10, 0x3F, 0x00
	.byte 0x00, 0x10, 0x39, 0x00, 0x00, 0x10, 0x32, 0x00, 0x00, 0x10, 0x2C, 0x00, 0x00, 0x10, 0x26, 0x00
	.byte 0x00, 0x10, 0x1F, 0x00, 0x00, 0x10, 0x19, 0x00, 0x00, 0x10, 0x13, 0x00, 0x00, 0x10, 0x0D, 0x00
	.byte 0x00, 0x10, 0x06, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0xFA, 0xFF, 0x00, 0x10, 0xF3, 0xFF
	.byte 0x00, 0x10, 0xED, 0xFF, 0x00, 0x10, 0xE7, 0xFF, 0x00, 0x10, 0xE1, 0xFF, 0x00, 0x10, 0xDA, 0xFF
	.byte 0x00, 0x10, 0xD4, 0xFF, 0x00, 0x10, 0xCE, 0xFF, 0x00, 0x10, 0xC7, 0xFF, 0x00, 0x10, 0xC1, 0xFF
	.byte 0xFF, 0x0F, 0xBB, 0xFF, 0xFF, 0x0F, 0xB5, 0xFF, 0xFF, 0x0F, 0xAE, 0xFF, 0xFF, 0x0F, 0xA8, 0xFF
	.byte 0xFF, 0x0F, 0xA2, 0xFF, 0xFF, 0x0F, 0x9B, 0xFF, 0xFF, 0x0F, 0x95, 0xFF, 0xFE, 0x0F, 0x8F, 0xFF
	.byte 0xFE, 0x0F, 0x89, 0xFF, 0xFE, 0x0F, 0x82, 0xFF, 0xFE, 0x0F, 0x7C, 0xFF, 0xFE, 0x0F, 0x76, 0xFF
	.byte 0xFD, 0x0F, 0x70, 0xFF, 0xFD, 0x0F, 0x69, 0xFF, 0xFD, 0x0F, 0x63, 0xFF, 0xFD, 0x0F, 0x5D, 0xFF
	.byte 0xFC, 0x0F, 0x56, 0xFF, 0xFC, 0x0F, 0x50, 0xFF, 0xFC, 0x0F, 0x4A, 0xFF, 0xFC, 0x0F, 0x44, 0xFF
	.byte 0xFB, 0x0F, 0x3D, 0xFF, 0xFB, 0x0F, 0x37, 0xFF, 0xFB, 0x0F, 0x31, 0xFF, 0xFA, 0x0F, 0x2A, 0xFF
	.byte 0xFA, 0x0F, 0x24, 0xFF, 0xFA, 0x0F, 0x1E, 0xFF, 0xF9, 0x0F, 0x18, 0xFF, 0xF9, 0x0F, 0x11, 0xFF
	.byte 0xF9, 0x0F, 0x0B, 0xFF, 0xF8, 0x0F, 0x05, 0xFF, 0xF8, 0x0F, 0xFF, 0xFE, 0xF8, 0x0F, 0xF8, 0xFE
	.byte 0xF7, 0x0F, 0xF2, 0xFE, 0xF7, 0x0F, 0xEC, 0xFE, 0xF6, 0x0F, 0xE5, 0xFE, 0xF6, 0x0F, 0xDF, 0xFE
	.byte 0xF5, 0x0F, 0xD9, 0xFE, 0xF5, 0x0F, 0xD3, 0xFE, 0xF4, 0x0F, 0xCC, 0xFE, 0xF4, 0x0F, 0xC6, 0xFE
	.byte 0xF3, 0x0F, 0xC0, 0xFE, 0xF3, 0x0F, 0xBA, 0xFE, 0xF2, 0x0F, 0xB3, 0xFE, 0xF2, 0x0F, 0xAD, 0xFE
	.byte 0xF1, 0x0F, 0xA7, 0xFE, 0xF1, 0x0F, 0xA1, 0xFE, 0xF0, 0x0F, 0x9A, 0xFE, 0xF0, 0x0F, 0x94, 0xFE
	.byte 0xEF, 0x0F, 0x8E, 0xFE, 0xEF, 0x0F, 0x88, 0xFE, 0xEE, 0x0F, 0x81, 0xFE, 0xED, 0x0F, 0x7B, 0xFE
	.byte 0xED, 0x0F, 0x75, 0xFE, 0xEC, 0x0F, 0x6F, 0xFE, 0xEC, 0x0F, 0x68, 0xFE, 0xEB, 0x0F, 0x62, 0xFE
	.byte 0xEA, 0x0F, 0x5C, 0xFE, 0xEA, 0x0F, 0x56, 0xFE, 0xE9, 0x0F, 0x4F, 0xFE, 0xE8, 0x0F, 0x49, 0xFE
	.byte 0xE8, 0x0F, 0x43, 0xFE, 0xE7, 0x0F, 0x3D, 0xFE, 0xE6, 0x0F, 0x36, 0xFE, 0xE6, 0x0F, 0x30, 0xFE
	.byte 0xE5, 0x0F, 0x2A, 0xFE, 0xE4, 0x0F, 0x24, 0xFE, 0xE3, 0x0F, 0x1D, 0xFE, 0xE3, 0x0F, 0x17, 0xFE
	.byte 0xE2, 0x0F, 0x11, 0xFE, 0xE1, 0x0F, 0x0B, 0xFE, 0xE0, 0x0F, 0x04, 0xFE, 0xE0, 0x0F, 0xFE, 0xFD
	.byte 0xDF, 0x0F, 0xF8, 0xFD, 0xDE, 0x0F, 0xF2, 0xFD, 0xDD, 0x0F, 0xEB, 0xFD, 0xDC, 0x0F, 0xE5, 0xFD
	.byte 0xDC, 0x0F, 0xDF, 0xFD, 0xDB, 0x0F, 0xD9, 0xFD, 0xDA, 0x0F, 0xD3, 0xFD, 0xD9, 0x0F, 0xCC, 0xFD
	.byte 0xD8, 0x0F, 0xC6, 0xFD, 0xD7, 0x0F, 0xC0, 0xFD, 0xD6, 0x0F, 0xBA, 0xFD, 0xD5, 0x0F, 0xB3, 0xFD
	.byte 0xD5, 0x0F, 0xAD, 0xFD, 0xD4, 0x0F, 0xA7, 0xFD, 0xD3, 0x0F, 0xA1, 0xFD, 0xD2, 0x0F, 0x9B, 0xFD
	.byte 0xD1, 0x0F, 0x94, 0xFD, 0xD0, 0x0F, 0x8E, 0xFD, 0xCF, 0x0F, 0x88, 0xFD, 0xCE, 0x0F, 0x82, 0xFD
	.byte 0xCD, 0x0F, 0x7C, 0xFD, 0xCC, 0x0F, 0x75, 0xFD, 0xCB, 0x0F, 0x6F, 0xFD, 0xCA, 0x0F, 0x69, 0xFD
	.byte 0xC9, 0x0F, 0x63, 0xFD, 0xC8, 0x0F, 0x5D, 0xFD, 0xC7, 0x0F, 0x56, 0xFD, 0xC6, 0x0F, 0x50, 0xFD
	.byte 0xC5, 0x0F, 0x4A, 0xFD, 0xC4, 0x0F, 0x44, 0xFD, 0xC3, 0x0F, 0x3E, 0xFD, 0xC2, 0x0F, 0x37, 0xFD
	.byte 0xC0, 0x0F, 0x31, 0xFD, 0xBF, 0x0F, 0x2B, 0xFD, 0xBE, 0x0F, 0x25, 0xFD, 0xBD, 0x0F, 0x1F, 0xFD
	.byte 0xBC, 0x0F, 0x18, 0xFD, 0xBB, 0x0F, 0x12, 0xFD, 0xBA, 0x0F, 0x0C, 0xFD, 0xB8, 0x0F, 0x06, 0xFD
	.byte 0xB7, 0x0F, 0x00, 0xFD, 0xB6, 0x0F, 0xFA, 0xFC, 0xB5, 0x0F, 0xF3, 0xFC, 0xB4, 0x0F, 0xED, 0xFC
	.byte 0xB3, 0x0F, 0xE7, 0xFC, 0xB1, 0x0F, 0xE1, 0xFC, 0xB0, 0x0F, 0xDB, 0xFC, 0xAF, 0x0F, 0xD5, 0xFC
	.byte 0xAE, 0x0F, 0xCE, 0xFC, 0xAC, 0x0F, 0xC8, 0xFC, 0xAB, 0x0F, 0xC2, 0xFC, 0xAA, 0x0F, 0xBC, 0xFC
	.byte 0xA8, 0x0F, 0xB6, 0xFC, 0xA7, 0x0F, 0xB0, 0xFC, 0xA6, 0x0F, 0xAA, 0xFC, 0xA5, 0x0F, 0xA3, 0xFC
	.byte 0xA3, 0x0F, 0x9D, 0xFC, 0xA2, 0x0F, 0x97, 0xFC, 0xA1, 0x0F, 0x91, 0xFC, 0x9F, 0x0F, 0x8B, 0xFC
	.byte 0x9E, 0x0F, 0x85, 0xFC, 0x9C, 0x0F, 0x7F, 0xFC, 0x9B, 0x0F, 0x78, 0xFC, 0x9A, 0x0F, 0x72, 0xFC
	.byte 0x98, 0x0F, 0x6C, 0xFC, 0x97, 0x0F, 0x66, 0xFC, 0x95, 0x0F, 0x60, 0xFC, 0x94, 0x0F, 0x5A, 0xFC
	.byte 0x93, 0x0F, 0x54, 0xFC, 0x91, 0x0F, 0x4E, 0xFC, 0x90, 0x0F, 0x47, 0xFC, 0x8E, 0x0F, 0x41, 0xFC
	.byte 0x8D, 0x0F, 0x3B, 0xFC, 0x8B, 0x0F, 0x35, 0xFC, 0x8A, 0x0F, 0x2F, 0xFC, 0x88, 0x0F, 0x29, 0xFC
	.byte 0x87, 0x0F, 0x23, 0xFC, 0x85, 0x0F, 0x1D, 0xFC, 0x84, 0x0F, 0x17, 0xFC, 0x82, 0x0F, 0x11, 0xFC
	.byte 0x81, 0x0F, 0x0A, 0xFC, 0x7F, 0x0F, 0x04, 0xFC, 0x7D, 0x0F, 0xFE, 0xFB, 0x7C, 0x0F, 0xF8, 0xFB
	.byte 0x7A, 0x0F, 0xF2, 0xFB, 0x79, 0x0F, 0xEC, 0xFB, 0x77, 0x0F, 0xE6, 0xFB, 0x76, 0x0F, 0xE0, 0xFB
	.byte 0x74, 0x0F, 0xDA, 0xFB, 0x72, 0x0F, 0xD4, 0xFB, 0x71, 0x0F, 0xCE, 0xFB, 0x6F, 0x0F, 0xC8, 0xFB
	.byte 0x6D, 0x0F, 0xC2, 0xFB, 0x6C, 0x0F, 0xBC, 0xFB, 0x6A, 0x0F, 0xB5, 0xFB, 0x68, 0x0F, 0xAF, 0xFB
	.byte 0x67, 0x0F, 0xA9, 0xFB, 0x65, 0x0F, 0xA3, 0xFB, 0x63, 0x0F, 0x9D, 0xFB, 0x61, 0x0F, 0x97, 0xFB
	.byte 0x60, 0x0F, 0x91, 0xFB, 0x5E, 0x0F, 0x8B, 0xFB, 0x5C, 0x0F, 0x85, 0xFB, 0x5A, 0x0F, 0x7F, 0xFB
	.byte 0x59, 0x0F, 0x79, 0xFB, 0x57, 0x0F, 0x73, 0xFB, 0x55, 0x0F, 0x6D, 0xFB, 0x53, 0x0F, 0x67, 0xFB
	.byte 0x51, 0x0F, 0x61, 0xFB, 0x50, 0x0F, 0x5B, 0xFB, 0x4E, 0x0F, 0x55, 0xFB, 0x4C, 0x0F, 0x4F, 0xFB
	.byte 0x4A, 0x0F, 0x49, 0xFB, 0x48, 0x0F, 0x43, 0xFB, 0x46, 0x0F, 0x3D, 0xFB, 0x45, 0x0F, 0x37, 0xFB
	.byte 0x43, 0x0F, 0x31, 0xFB, 0x41, 0x0F, 0x2B, 0xFB, 0x3F, 0x0F, 0x25, 0xFB, 0x3D, 0x0F, 0x1F, 0xFB
	.byte 0x3B, 0x0F, 0x19, 0xFB, 0x39, 0x0F, 0x13, 0xFB, 0x37, 0x0F, 0x0D, 0xFB, 0x35, 0x0F, 0x07, 0xFB
	.byte 0x33, 0x0F, 0x01, 0xFB, 0x31, 0x0F, 0xFB, 0xFA, 0x2F, 0x0F, 0xF5, 0xFA, 0x2D, 0x0F, 0xEF, 0xFA
	.byte 0x2B, 0x0F, 0xE9, 0xFA, 0x29, 0x0F, 0xE3, 0xFA, 0x27, 0x0F, 0xDD, 0xFA, 0x25, 0x0F, 0xD7, 0xFA
	.byte 0x23, 0x0F, 0xD1, 0xFA, 0x21, 0x0F, 0xCC, 0xFA, 0x1F, 0x0F, 0xC6, 0xFA, 0x1D, 0x0F, 0xC0, 0xFA
	.byte 0x1B, 0x0F, 0xBA, 0xFA, 0x19, 0x0F, 0xB4, 0xFA, 0x17, 0x0F, 0xAE, 0xFA, 0x15, 0x0F, 0xA8, 0xFA
	.byte 0x13, 0x0F, 0xA2, 0xFA, 0x11, 0x0F, 0x9C, 0xFA, 0x0E, 0x0F, 0x96, 0xFA, 0x0C, 0x0F, 0x90, 0xFA
	.byte 0x0A, 0x0F, 0x8A, 0xFA, 0x08, 0x0F, 0x84, 0xFA, 0x06, 0x0F, 0x7F, 0xFA, 0x04, 0x0F, 0x79, 0xFA
	.byte 0x02, 0x0F, 0x73, 0xFA, 0xFF, 0x0E, 0x6D, 0xFA, 0xFD, 0x0E, 0x67, 0xFA, 0xFB, 0x0E, 0x61, 0xFA
	.byte 0xF9, 0x0E, 0x5B, 0xFA, 0xF7, 0x0E, 0x55, 0xFA, 0xF4, 0x0E, 0x4F, 0xFA, 0xF2, 0x0E, 0x4A, 0xFA
	.byte 0xF0, 0x0E, 0x44, 0xFA, 0xEE, 0x0E, 0x3E, 0xFA, 0xEB, 0x0E, 0x38, 0xFA, 0xE9, 0x0E, 0x32, 0xFA
	.byte 0xE7, 0x0E, 0x2C, 0xFA, 0xE4, 0x0E, 0x26, 0xFA, 0xE2, 0x0E, 0x21, 0xFA, 0xE0, 0x0E, 0x1B, 0xFA
	.byte 0xDD, 0x0E, 0x15, 0xFA, 0xDB, 0x0E, 0x0F, 0xFA, 0xD9, 0x0E, 0x09, 0xFA, 0xD6, 0x0E, 0x03, 0xFA
	.byte 0xD4, 0x0E, 0xFE, 0xF9, 0xD2, 0x0E, 0xF8, 0xF9, 0xCF, 0x0E, 0xF2, 0xF9, 0xCD, 0x0E, 0xEC, 0xF9
	.byte 0xCB, 0x0E, 0xE6, 0xF9, 0xC8, 0x0E, 0xE1, 0xF9, 0xC6, 0x0E, 0xDB, 0xF9, 0xC3, 0x0E, 0xD5, 0xF9
	.byte 0xC1, 0x0E, 0xCF, 0xF9, 0xBF, 0x0E, 0xC9, 0xF9, 0xBC, 0x0E, 0xC4, 0xF9, 0xBA, 0x0E, 0xBE, 0xF9
	.byte 0xB7, 0x0E, 0xB8, 0xF9, 0xB5, 0x0E, 0xB2, 0xF9, 0xB2, 0x0E, 0xAC, 0xF9, 0xB0, 0x0E, 0xA7, 0xF9
	.byte 0xAD, 0x0E, 0xA1, 0xF9, 0xAB, 0x0E, 0x9B, 0xF9, 0xA8, 0x0E, 0x95, 0xF9, 0xA6, 0x0E, 0x90, 0xF9
	.byte 0xA3, 0x0E, 0x8A, 0xF9, 0xA1, 0x0E, 0x84, 0xF9, 0x9E, 0x0E, 0x7E, 0xF9, 0x9B, 0x0E, 0x79, 0xF9
	.byte 0x99, 0x0E, 0x73, 0xF9, 0x96, 0x0E, 0x6D, 0xF9, 0x94, 0x0E, 0x67, 0xF9, 0x91, 0x0E, 0x62, 0xF9
	.byte 0x8F, 0x0E, 0x5C, 0xF9, 0x8C, 0x0E, 0x56, 0xF9, 0x89, 0x0E, 0x51, 0xF9, 0x87, 0x0E, 0x4B, 0xF9
	.byte 0x84, 0x0E, 0x45, 0xF9, 0x81, 0x0E, 0x3F, 0xF9, 0x7F, 0x0E, 0x3A, 0xF9, 0x7C, 0x0E, 0x34, 0xF9
	.byte 0x79, 0x0E, 0x2E, 0xF9, 0x77, 0x0E, 0x29, 0xF9, 0x74, 0x0E, 0x23, 0xF9, 0x71, 0x0E, 0x1D, 0xF9
	.byte 0x6F, 0x0E, 0x18, 0xF9, 0x6C, 0x0E, 0x12, 0xF9, 0x69, 0x0E, 0x0C, 0xF9, 0x66, 0x0E, 0x07, 0xF9
	.byte 0x64, 0x0E, 0x01, 0xF9, 0x61, 0x0E, 0xFB, 0xF8, 0x5E, 0x0E, 0xF6, 0xF8, 0x5B, 0x0E, 0xF0, 0xF8
	.byte 0x59, 0x0E, 0xEB, 0xF8, 0x56, 0x0E, 0xE5, 0xF8, 0x53, 0x0E, 0xDF, 0xF8, 0x50, 0x0E, 0xDA, 0xF8
	.byte 0x4D, 0x0E, 0xD4, 0xF8, 0x4B, 0x0E, 0xCE, 0xF8, 0x48, 0x0E, 0xC9, 0xF8, 0x45, 0x0E, 0xC3, 0xF8
	.byte 0x42, 0x0E, 0xBE, 0xF8, 0x3F, 0x0E, 0xB8, 0xF8, 0x3C, 0x0E, 0xB2, 0xF8, 0x3A, 0x0E, 0xAD, 0xF8
	.byte 0x37, 0x0E, 0xA7, 0xF8, 0x34, 0x0E, 0xA2, 0xF8, 0x31, 0x0E, 0x9C, 0xF8, 0x2E, 0x0E, 0x96, 0xF8
	.byte 0x2B, 0x0E, 0x91, 0xF8, 0x28, 0x0E, 0x8B, 0xF8, 0x25, 0x0E, 0x86, 0xF8, 0x22, 0x0E, 0x80, 0xF8
	.byte 0x1F, 0x0E, 0x7B, 0xF8, 0x1C, 0x0E, 0x75, 0xF8, 0x19, 0x0E, 0x70, 0xF8, 0x16, 0x0E, 0x6A, 0xF8
	.byte 0x13, 0x0E, 0x65, 0xF8, 0x10, 0x0E, 0x5F, 0xF8, 0x0D, 0x0E, 0x5A, 0xF8, 0x0A, 0x0E, 0x54, 0xF8
	.byte 0x07, 0x0E, 0x4E, 0xF8, 0x04, 0x0E, 0x49, 0xF8, 0x01, 0x0E, 0x43, 0xF8, 0xFE, 0x0D, 0x3E, 0xF8
	.byte 0xFB, 0x0D, 0x38, 0xF8, 0xF8, 0x0D, 0x33, 0xF8, 0xF5, 0x0D, 0x2E, 0xF8, 0xF2, 0x0D, 0x28, 0xF8
	.byte 0xEF, 0x0D, 0x23, 0xF8, 0xEC, 0x0D, 0x1D, 0xF8, 0xE9, 0x0D, 0x18, 0xF8, 0xE6, 0x0D, 0x12, 0xF8
	.byte 0xE3, 0x0D, 0x0D, 0xF8, 0xDF, 0x0D, 0x07, 0xF8, 0xDC, 0x0D, 0x02, 0xF8, 0xD9, 0x0D, 0xFC, 0xF7
	.byte 0xD6, 0x0D, 0xF7, 0xF7, 0xD3, 0x0D, 0xF2, 0xF7, 0xD0, 0x0D, 0xEC, 0xF7, 0xCC, 0x0D, 0xE7, 0xF7
	.byte 0xC9, 0x0D, 0xE1, 0xF7, 0xC6, 0x0D, 0xDC, 0xF7, 0xC3, 0x0D, 0xD6, 0xF7, 0xC0, 0x0D, 0xD1, 0xF7
	.byte 0xBC, 0x0D, 0xCC, 0xF7, 0xB9, 0x0D, 0xC6, 0xF7, 0xB6, 0x0D, 0xC1, 0xF7, 0xB3, 0x0D, 0xBB, 0xF7
	.byte 0xB0, 0x0D, 0xB6, 0xF7, 0xAC, 0x0D, 0xB1, 0xF7, 0xA9, 0x0D, 0xAB, 0xF7, 0xA6, 0x0D, 0xA6, 0xF7
	.byte 0xA2, 0x0D, 0xA1, 0xF7, 0x9F, 0x0D, 0x9B, 0xF7, 0x9C, 0x0D, 0x96, 0xF7, 0x99, 0x0D, 0x91, 0xF7
	.byte 0x95, 0x0D, 0x8B, 0xF7, 0x92, 0x0D, 0x86, 0xF7, 0x8F, 0x0D, 0x81, 0xF7, 0x8B, 0x0D, 0x7B, 0xF7
	.byte 0x88, 0x0D, 0x76, 0xF7, 0x85, 0x0D, 0x71, 0xF7, 0x81, 0x0D, 0x6B, 0xF7, 0x7E, 0x0D, 0x66, 0xF7
	.byte 0x7A, 0x0D, 0x61, 0xF7, 0x77, 0x0D, 0x5B, 0xF7, 0x74, 0x0D, 0x56, 0xF7, 0x70, 0x0D, 0x51, 0xF7
	.byte 0x6D, 0x0D, 0x4C, 0xF7, 0x69, 0x0D, 0x46, 0xF7, 0x66, 0x0D, 0x41, 0xF7, 0x62, 0x0D, 0x3C, 0xF7
	.byte 0x5F, 0x0D, 0x37, 0xF7, 0x5C, 0x0D, 0x31, 0xF7, 0x58, 0x0D, 0x2C, 0xF7, 0x55, 0x0D, 0x27, 0xF7
	.byte 0x51, 0x0D, 0x22, 0xF7, 0x4E, 0x0D, 0x1C, 0xF7, 0x4A, 0x0D, 0x17, 0xF7, 0x47, 0x0D, 0x12, 0xF7
	.byte 0x43, 0x0D, 0x0D, 0xF7, 0x40, 0x0D, 0x08, 0xF7, 0x3C, 0x0D, 0x02, 0xF7, 0x39, 0x0D, 0xFD, 0xF6
	.byte 0x35, 0x0D, 0xF8, 0xF6, 0x32, 0x0D, 0xF3, 0xF6, 0x2E, 0x0D, 0xEE, 0xF6, 0x2A, 0x0D, 0xE8, 0xF6
	.byte 0x27, 0x0D, 0xE3, 0xF6, 0x23, 0x0D, 0xDE, 0xF6, 0x20, 0x0D, 0xD9, 0xF6, 0x1C, 0x0D, 0xD4, 0xF6
	.byte 0x18, 0x0D, 0xCF, 0xF6, 0x15, 0x0D, 0xC9, 0xF6, 0x11, 0x0D, 0xC4, 0xF6, 0x0E, 0x0D, 0xBF, 0xF6
	.byte 0x0A, 0x0D, 0xBA, 0xF6, 0x06, 0x0D, 0xB5, 0xF6, 0x03, 0x0D, 0xB0, 0xF6, 0xFF, 0x0C, 0xAB, 0xF6
	.byte 0xFB, 0x0C, 0xA6, 0xF6, 0xF8, 0x0C, 0xA1, 0xF6, 0xF4, 0x0C, 0x9B, 0xF6, 0xF0, 0x0C, 0x96, 0xF6
	.byte 0xED, 0x0C, 0x91, 0xF6, 0xE9, 0x0C, 0x8C, 0xF6, 0xE5, 0x0C, 0x87, 0xF6, 0xE1, 0x0C, 0x82, 0xF6
	.byte 0xDE, 0x0C, 0x7D, 0xF6, 0xDA, 0x0C, 0x78, 0xF6, 0xD6, 0x0C, 0x73, 0xF6, 0xD2, 0x0C, 0x6E, 0xF6
	.byte 0xCF, 0x0C, 0x69, 0xF6, 0xCB, 0x0C, 0x64, 0xF6, 0xC7, 0x0C, 0x5F, 0xF6, 0xC3, 0x0C, 0x5A, 0xF6
	.byte 0xC0, 0x0C, 0x55, 0xF6, 0xBC, 0x0C, 0x50, 0xF6, 0xB8, 0x0C, 0x4B, 0xF6, 0xB4, 0x0C, 0x46, 0xF6
	.byte 0xB0, 0x0C, 0x41, 0xF6, 0xAC, 0x0C, 0x3C, 0xF6, 0xA9, 0x0C, 0x37, 0xF6, 0xA5, 0x0C, 0x32, 0xF6
	.byte 0xA1, 0x0C, 0x2D, 0xF6, 0x9D, 0x0C, 0x28, 0xF6, 0x99, 0x0C, 0x23, 0xF6, 0x95, 0x0C, 0x1E, 0xF6
	.byte 0x91, 0x0C, 0x19, 0xF6, 0x8E, 0x0C, 0x14, 0xF6, 0x8A, 0x0C, 0x0F, 0xF6, 0x86, 0x0C, 0x0A, 0xF6
	.byte 0x82, 0x0C, 0x05, 0xF6, 0x7E, 0x0C, 0x01, 0xF6, 0x7A, 0x0C, 0xFC, 0xF5, 0x76, 0x0C, 0xF7, 0xF5
	.byte 0x72, 0x0C, 0xF2, 0xF5, 0x6E, 0x0C, 0xED, 0xF5, 0x6A, 0x0C, 0xE8, 0xF5, 0x66, 0x0C, 0xE3, 0xF5
	.byte 0x62, 0x0C, 0xDE, 0xF5, 0x5E, 0x0C, 0xDA, 0xF5, 0x5A, 0x0C, 0xD5, 0xF5, 0x56, 0x0C, 0xD0, 0xF5
	.byte 0x52, 0x0C, 0xCB, 0xF5, 0x4E, 0x0C, 0xC6, 0xF5, 0x4A, 0x0C, 0xC1, 0xF5, 0x46, 0x0C, 0xBC, 0xF5
	.byte 0x42, 0x0C, 0xB8, 0xF5, 0x3E, 0x0C, 0xB3, 0xF5, 0x3A, 0x0C, 0xAE, 0xF5, 0x36, 0x0C, 0xA9, 0xF5
	.byte 0x32, 0x0C, 0xA4, 0xF5, 0x2E, 0x0C, 0xA0, 0xF5, 0x2A, 0x0C, 0x9B, 0xF5, 0x26, 0x0C, 0x96, 0xF5
	.byte 0x22, 0x0C, 0x91, 0xF5, 0x1E, 0x0C, 0x8D, 0xF5, 0x19, 0x0C, 0x88, 0xF5, 0x15, 0x0C, 0x83, 0xF5
	.byte 0x11, 0x0C, 0x7E, 0xF5, 0x0D, 0x0C, 0x7A, 0xF5, 0x09, 0x0C, 0x75, 0xF5, 0x05, 0x0C, 0x70, 0xF5
	.byte 0x01, 0x0C, 0x6B, 0xF5, 0xFC, 0x0B, 0x67, 0xF5, 0xF8, 0x0B, 0x62, 0xF5, 0xF4, 0x0B, 0x5D, 0xF5
	.byte 0xF0, 0x0B, 0x59, 0xF5, 0xEC, 0x0B, 0x54, 0xF5, 0xE8, 0x0B, 0x4F, 0xF5, 0xE3, 0x0B, 0x4B, 0xF5
	.byte 0xDF, 0x0B, 0x46, 0xF5, 0xDB, 0x0B, 0x41, 0xF5, 0xD7, 0x0B, 0x3D, 0xF5, 0xD2, 0x0B, 0x38, 0xF5
	.byte 0xCE, 0x0B, 0x33, 0xF5, 0xCA, 0x0B, 0x2F, 0xF5, 0xC6, 0x0B, 0x2A, 0xF5, 0xC1, 0x0B, 0x25, 0xF5
	.byte 0xBD, 0x0B, 0x21, 0xF5, 0xB9, 0x0B, 0x1C, 0xF5, 0xB5, 0x0B, 0x18, 0xF5, 0xB0, 0x0B, 0x13, 0xF5
	.byte 0xAC, 0x0B, 0x0E, 0xF5, 0xA8, 0x0B, 0x0A, 0xF5, 0xA3, 0x0B, 0x05, 0xF5, 0x9F, 0x0B, 0x01, 0xF5
	.byte 0x9B, 0x0B, 0xFC, 0xF4, 0x97, 0x0B, 0xF8, 0xF4, 0x92, 0x0B, 0xF3, 0xF4, 0x8E, 0x0B, 0xEF, 0xF4
	.byte 0x89, 0x0B, 0xEA, 0xF4, 0x85, 0x0B, 0xE5, 0xF4, 0x81, 0x0B, 0xE1, 0xF4, 0x7C, 0x0B, 0xDC, 0xF4
	.byte 0x78, 0x0B, 0xD8, 0xF4, 0x74, 0x0B, 0xD3, 0xF4, 0x6F, 0x0B, 0xCF, 0xF4, 0x6B, 0x0B, 0xCA, 0xF4
	.byte 0x66, 0x0B, 0xC6, 0xF4, 0x62, 0x0B, 0xC2, 0xF4, 0x5E, 0x0B, 0xBD, 0xF4, 0x59, 0x0B, 0xB9, 0xF4
	.byte 0x55, 0x0B, 0xB4, 0xF4, 0x50, 0x0B, 0xB0, 0xF4, 0x4C, 0x0B, 0xAB, 0xF4, 0x47, 0x0B, 0xA7, 0xF4
	.byte 0x43, 0x0B, 0xA2, 0xF4, 0x3E, 0x0B, 0x9E, 0xF4, 0x3A, 0x0B, 0x9A, 0xF4, 0x36, 0x0B, 0x95, 0xF4
	.byte 0x31, 0x0B, 0x91, 0xF4, 0x2D, 0x0B, 0x8C, 0xF4, 0x28, 0x0B, 0x88, 0xF4, 0x24, 0x0B, 0x84, 0xF4
	.byte 0x1F, 0x0B, 0x7F, 0xF4, 0x1B, 0x0B, 0x7B, 0xF4, 0x16, 0x0B, 0x77, 0xF4, 0x11, 0x0B, 0x72, 0xF4
	.byte 0x0D, 0x0B, 0x6E, 0xF4, 0x08, 0x0B, 0x69, 0xF4, 0x04, 0x0B, 0x65, 0xF4, 0xFF, 0x0A, 0x61, 0xF4
	.byte 0xFB, 0x0A, 0x5D, 0xF4, 0xF6, 0x0A, 0x58, 0xF4, 0xF2, 0x0A, 0x54, 0xF4, 0xED, 0x0A, 0x50, 0xF4
	.byte 0xE8, 0x0A, 0x4B, 0xF4, 0xE4, 0x0A, 0x47, 0xF4, 0xDF, 0x0A, 0x43, 0xF4, 0xDB, 0x0A, 0x3F, 0xF4
	.byte 0xD6, 0x0A, 0x3A, 0xF4, 0xD1, 0x0A, 0x36, 0xF4, 0xCD, 0x0A, 0x32, 0xF4, 0xC8, 0x0A, 0x2E, 0xF4
	.byte 0xC3, 0x0A, 0x29, 0xF4, 0xBF, 0x0A, 0x25, 0xF4, 0xBA, 0x0A, 0x21, 0xF4, 0xB5, 0x0A, 0x1D, 0xF4
	.byte 0xB1, 0x0A, 0x18, 0xF4, 0xAC, 0x0A, 0x14, 0xF4, 0xA7, 0x0A, 0x10, 0xF4, 0xA3, 0x0A, 0x0C, 0xF4
	.byte 0x9E, 0x0A, 0x08, 0xF4, 0x99, 0x0A, 0x04, 0xF4, 0x95, 0x0A, 0xFF, 0xF3, 0x90, 0x0A, 0xFB, 0xF3
	.byte 0x8B, 0x0A, 0xF7, 0xF3, 0x86, 0x0A, 0xF3, 0xF3, 0x82, 0x0A, 0xEF, 0xF3, 0x7D, 0x0A, 0xEB, 0xF3
	.byte 0x78, 0x0A, 0xE7, 0xF3, 0x73, 0x0A, 0xE2, 0xF3, 0x6F, 0x0A, 0xDE, 0xF3, 0x6A, 0x0A, 0xDA, 0xF3
	.byte 0x65, 0x0A, 0xD6, 0xF3, 0x60, 0x0A, 0xD2, 0xF3, 0x5C, 0x0A, 0xCE, 0xF3, 0x57, 0x0A, 0xCA, 0xF3
	.byte 0x52, 0x0A, 0xC6, 0xF3, 0x4D, 0x0A, 0xC2, 0xF3, 0x48, 0x0A, 0xBE, 0xF3, 0x44, 0x0A, 0xBA, 0xF3
	.byte 0x3F, 0x0A, 0xB6, 0xF3, 0x3A, 0x0A, 0xB2, 0xF3, 0x35, 0x0A, 0xAE, 0xF3, 0x30, 0x0A, 0xAA, 0xF3
	.byte 0x2B, 0x0A, 0xA6, 0xF3, 0x26, 0x0A, 0xA2, 0xF3, 0x22, 0x0A, 0x9E, 0xF3, 0x1D, 0x0A, 0x9A, 0xF3
	.byte 0x18, 0x0A, 0x96, 0xF3, 0x13, 0x0A, 0x92, 0xF3, 0x0E, 0x0A, 0x8E, 0xF3, 0x09, 0x0A, 0x8A, 0xF3
	.byte 0x04, 0x0A, 0x86, 0xF3, 0xFF, 0x09, 0x82, 0xF3, 0xFB, 0x09, 0x7E, 0xF3, 0xF6, 0x09, 0x7A, 0xF3
	.byte 0xF1, 0x09, 0x76, 0xF3, 0xEC, 0x09, 0x72, 0xF3, 0xE7, 0x09, 0x6F, 0xF3, 0xE2, 0x09, 0x6B, 0xF3
	.byte 0xDD, 0x09, 0x67, 0xF3, 0xD8, 0x09, 0x63, 0xF3, 0xD3, 0x09, 0x5F, 0xF3, 0xCE, 0x09, 0x5B, 0xF3
	.byte 0xC9, 0x09, 0x57, 0xF3, 0xC4, 0x09, 0x54, 0xF3, 0xBF, 0x09, 0x50, 0xF3, 0xBA, 0x09, 0x4C, 0xF3
	.byte 0xB5, 0x09, 0x48, 0xF3, 0xB0, 0x09, 0x44, 0xF3, 0xAB, 0x09, 0x40, 0xF3, 0xA6, 0x09, 0x3D, 0xF3
	.byte 0xA1, 0x09, 0x39, 0xF3, 0x9C, 0x09, 0x35, 0xF3, 0x97, 0x09, 0x31, 0xF3, 0x92, 0x09, 0x2E, 0xF3
	.byte 0x8D, 0x09, 0x2A, 0xF3, 0x88, 0x09, 0x26, 0xF3, 0x83, 0x09, 0x22, 0xF3, 0x7E, 0x09, 0x1F, 0xF3
	.byte 0x79, 0x09, 0x1B, 0xF3, 0x74, 0x09, 0x17, 0xF3, 0x6F, 0x09, 0x13, 0xF3, 0x6A, 0x09, 0x10, 0xF3
	.byte 0x65, 0x09, 0x0C, 0xF3, 0x5F, 0x09, 0x08, 0xF3, 0x5A, 0x09, 0x05, 0xF3, 0x55, 0x09, 0x01, 0xF3
	.byte 0x50, 0x09, 0xFD, 0xF2, 0x4B, 0x09, 0xFA, 0xF2, 0x46, 0x09, 0xF6, 0xF2, 0x41, 0x09, 0xF2, 0xF2
	.byte 0x3C, 0x09, 0xEF, 0xF2, 0x37, 0x09, 0xEB, 0xF2, 0x31, 0x09, 0xE8, 0xF2, 0x2C, 0x09, 0xE4, 0xF2
	.byte 0x27, 0x09, 0xE0, 0xF2, 0x22, 0x09, 0xDD, 0xF2, 0x1D, 0x09, 0xD9, 0xF2, 0x18, 0x09, 0xD6, 0xF2
	.byte 0x12, 0x09, 0xD2, 0xF2, 0x0D, 0x09, 0xCE, 0xF2, 0x08, 0x09, 0xCB, 0xF2, 0x03, 0x09, 0xC7, 0xF2
	.byte 0xFE, 0x08, 0xC4, 0xF2, 0xF8, 0x08, 0xC0, 0xF2, 0xF3, 0x08, 0xBD, 0xF2, 0xEE, 0x08, 0xB9, 0xF2
	.byte 0xE9, 0x08, 0xB6, 0xF2, 0xE4, 0x08, 0xB2, 0xF2, 0xDE, 0x08, 0xAF, 0xF2, 0xD9, 0x08, 0xAB, 0xF2
	.byte 0xD4, 0x08, 0xA8, 0xF2, 0xCF, 0x08, 0xA4, 0xF2, 0xC9, 0x08, 0xA1, 0xF2, 0xC4, 0x08, 0x9E, 0xF2
	.byte 0xBF, 0x08, 0x9A, 0xF2, 0xBA, 0x08, 0x97, 0xF2, 0xB4, 0x08, 0x93, 0xF2, 0xAF, 0x08, 0x90, 0xF2
	.byte 0xAA, 0x08, 0x8C, 0xF2, 0xA5, 0x08, 0x89, 0xF2, 0x9F, 0x08, 0x86, 0xF2, 0x9A, 0x08, 0x82, 0xF2
	.byte 0x95, 0x08, 0x7F, 0xF2, 0x8F, 0x08, 0x7B, 0xF2, 0x8A, 0x08, 0x78, 0xF2, 0x85, 0x08, 0x75, 0xF2
	.byte 0x7F, 0x08, 0x71, 0xF2, 0x7A, 0x08, 0x6E, 0xF2, 0x75, 0x08, 0x6B, 0xF2, 0x6F, 0x08, 0x67, 0xF2
	.byte 0x6A, 0x08, 0x64, 0xF2, 0x65, 0x08, 0x61, 0xF2, 0x5F, 0x08, 0x5E, 0xF2, 0x5A, 0x08, 0x5A, 0xF2
	.byte 0x55, 0x08, 0x57, 0xF2, 0x4F, 0x08, 0x54, 0xF2, 0x4A, 0x08, 0x50, 0xF2, 0x45, 0x08, 0x4D, 0xF2
	.byte 0x3F, 0x08, 0x4A, 0xF2, 0x3A, 0x08, 0x47, 0xF2, 0x34, 0x08, 0x44, 0xF2, 0x2F, 0x08, 0x40, 0xF2
	.byte 0x2A, 0x08, 0x3D, 0xF2, 0x24, 0x08, 0x3A, 0xF2, 0x1F, 0x08, 0x37, 0xF2, 0x19, 0x08, 0x34, 0xF2
	.byte 0x14, 0x08, 0x30, 0xF2, 0x0E, 0x08, 0x2D, 0xF2, 0x09, 0x08, 0x2A, 0xF2, 0x04, 0x08, 0x27, 0xF2
	.byte 0xFE, 0x07, 0x24, 0xF2, 0xF9, 0x07, 0x21, 0xF2, 0xF3, 0x07, 0x1D, 0xF2, 0xEE, 0x07, 0x1A, 0xF2
	.byte 0xE8, 0x07, 0x17, 0xF2, 0xE3, 0x07, 0x14, 0xF2, 0xDD, 0x07, 0x11, 0xF2, 0xD8, 0x07, 0x0E, 0xF2
	.byte 0xD2, 0x07, 0x0B, 0xF2, 0xCD, 0x07, 0x08, 0xF2, 0xC8, 0x07, 0x05, 0xF2, 0xC2, 0x07, 0x02, 0xF2
	.byte 0xBD, 0x07, 0xFF, 0xF1, 0xB7, 0x07, 0xFC, 0xF1, 0xB2, 0x07, 0xF9, 0xF1, 0xAC, 0x07, 0xF6, 0xF1
	.byte 0xA6, 0x07, 0xF3, 0xF1, 0xA1, 0x07, 0xF0, 0xF1, 0x9B, 0x07, 0xED, 0xF1, 0x96, 0x07, 0xEA, 0xF1
	.byte 0x90, 0x07, 0xE7, 0xF1, 0x8B, 0x07, 0xE4, 0xF1, 0x85, 0x07, 0xE1, 0xF1, 0x80, 0x07, 0xDE, 0xF1
	.byte 0x7A, 0x07, 0xDB, 0xF1, 0x75, 0x07, 0xD8, 0xF1, 0x6F, 0x07, 0xD5, 0xF1, 0x6A, 0x07, 0xD2, 0xF1
	.byte 0x64, 0x07, 0xCF, 0xF1, 0x5E, 0x07, 0xCC, 0xF1, 0x59, 0x07, 0xC9, 0xF1, 0x53, 0x07, 0xC6, 0xF1
	.byte 0x4E, 0x07, 0xC4, 0xF1, 0x48, 0x07, 0xC1, 0xF1, 0x42, 0x07, 0xBE, 0xF1, 0x3D, 0x07, 0xBB, 0xF1
	.byte 0x37, 0x07, 0xB8, 0xF1, 0x32, 0x07, 0xB5, 0xF1, 0x2C, 0x07, 0xB3, 0xF1, 0x26, 0x07, 0xB0, 0xF1
	.byte 0x21, 0x07, 0xAD, 0xF1, 0x1B, 0x07, 0xAA, 0xF1, 0x15, 0x07, 0xA7, 0xF1, 0x10, 0x07, 0xA5, 0xF1
	.byte 0x0A, 0x07, 0xA2, 0xF1, 0x05, 0x07, 0x9F, 0xF1, 0xFF, 0x06, 0x9C, 0xF1, 0xF9, 0x06, 0x9A, 0xF1
	.byte 0xF4, 0x06, 0x97, 0xF1, 0xEE, 0x06, 0x94, 0xF1, 0xE8, 0x06, 0x91, 0xF1, 0xE3, 0x06, 0x8F, 0xF1
	.byte 0xDD, 0x06, 0x8C, 0xF1, 0xD7, 0x06, 0x89, 0xF1, 0xD2, 0x06, 0x87, 0xF1, 0xCC, 0x06, 0x84, 0xF1
	.byte 0xC6, 0x06, 0x81, 0xF1, 0xC1, 0x06, 0x7F, 0xF1, 0xBB, 0x06, 0x7C, 0xF1, 0xB5, 0x06, 0x79, 0xF1
	.byte 0xAF, 0x06, 0x77, 0xF1, 0xAA, 0x06, 0x74, 0xF1, 0xA4, 0x06, 0x71, 0xF1, 0x9E, 0x06, 0x6F, 0xF1
	.byte 0x99, 0x06, 0x6C, 0xF1, 0x93, 0x06, 0x6A, 0xF1, 0x8D, 0x06, 0x67, 0xF1, 0x87, 0x06, 0x65, 0xF1
	.byte 0x82, 0x06, 0x62, 0xF1, 0x7C, 0x06, 0x5F, 0xF1, 0x76, 0x06, 0x5D, 0xF1, 0x70, 0x06, 0x5A, 0xF1
	.byte 0x6B, 0x06, 0x58, 0xF1, 0x65, 0x06, 0x55, 0xF1, 0x5F, 0x06, 0x53, 0xF1, 0x59, 0x06, 0x50, 0xF1
	.byte 0x54, 0x06, 0x4E, 0xF1, 0x4E, 0x06, 0x4B, 0xF1, 0x48, 0x06, 0x49, 0xF1, 0x42, 0x06, 0x46, 0xF1
	.byte 0x3C, 0x06, 0x44, 0xF1, 0x37, 0x06, 0x41, 0xF1, 0x31, 0x06, 0x3F, 0xF1, 0x2B, 0x06, 0x3D, 0xF1
	.byte 0x25, 0x06, 0x3A, 0xF1, 0x1F, 0x06, 0x38, 0xF1, 0x1A, 0x06, 0x35, 0xF1, 0x14, 0x06, 0x33, 0xF1
	.byte 0x0E, 0x06, 0x31, 0xF1, 0x08, 0x06, 0x2E, 0xF1, 0x02, 0x06, 0x2C, 0xF1, 0xFD, 0x05, 0x2A, 0xF1
	.byte 0xF7, 0x05, 0x27, 0xF1, 0xF1, 0x05, 0x25, 0xF1, 0xEB, 0x05, 0x23, 0xF1, 0xE5, 0x05, 0x20, 0xF1
	.byte 0xDF, 0x05, 0x1E, 0xF1, 0xDA, 0x05, 0x1C, 0xF1, 0xD4, 0x05, 0x19, 0xF1, 0xCE, 0x05, 0x17, 0xF1
	.byte 0xC8, 0x05, 0x15, 0xF1, 0xC2, 0x05, 0x12, 0xF1, 0xBC, 0x05, 0x10, 0xF1, 0xB6, 0x05, 0x0E, 0xF1
	.byte 0xB1, 0x05, 0x0C, 0xF1, 0xAB, 0x05, 0x09, 0xF1, 0xA5, 0x05, 0x07, 0xF1, 0x9F, 0x05, 0x05, 0xF1
	.byte 0x99, 0x05, 0x03, 0xF1, 0x93, 0x05, 0x01, 0xF1, 0x8D, 0x05, 0xFE, 0xF0, 0x87, 0x05, 0xFC, 0xF0
	.byte 0x81, 0x05, 0xFA, 0xF0, 0x7C, 0x05, 0xF8, 0xF0, 0x76, 0x05, 0xF6, 0xF0, 0x70, 0x05, 0xF4, 0xF0
	.byte 0x6A, 0x05, 0xF2, 0xF0, 0x64, 0x05, 0xEF, 0xF0, 0x5E, 0x05, 0xED, 0xF0, 0x58, 0x05, 0xEB, 0xF0
	.byte 0x52, 0x05, 0xE9, 0xF0, 0x4C, 0x05, 0xE7, 0xF0, 0x46, 0x05, 0xE5, 0xF0, 0x40, 0x05, 0xE3, 0xF0
	.byte 0x3A, 0x05, 0xE1, 0xF0, 0x34, 0x05, 0xDF, 0xF0, 0x2F, 0x05, 0xDD, 0xF0, 0x29, 0x05, 0xDB, 0xF0
	.byte 0x23, 0x05, 0xD9, 0xF0, 0x1D, 0x05, 0xD7, 0xF0, 0x17, 0x05, 0xD5, 0xF0, 0x11, 0x05, 0xD3, 0xF0
	.byte 0x0B, 0x05, 0xD1, 0xF0, 0x05, 0x05, 0xCF, 0xF0, 0xFF, 0x04, 0xCD, 0xF0, 0xF9, 0x04, 0xCB, 0xF0
	.byte 0xF3, 0x04, 0xC9, 0xF0, 0xED, 0x04, 0xC7, 0xF0, 0xE7, 0x04, 0xC5, 0xF0, 0xE1, 0x04, 0xC3, 0xF0
	.byte 0xDB, 0x04, 0xC1, 0xF0, 0xD5, 0x04, 0xBF, 0xF0, 0xCF, 0x04, 0xBD, 0xF0, 0xC9, 0x04, 0xBB, 0xF0
	.byte 0xC3, 0x04, 0xBA, 0xF0, 0xBD, 0x04, 0xB8, 0xF0, 0xB7, 0x04, 0xB6, 0xF0, 0xB1, 0x04, 0xB4, 0xF0
	.byte 0xAB, 0x04, 0xB2, 0xF0, 0xA5, 0x04, 0xB0, 0xF0, 0x9F, 0x04, 0xAF, 0xF0, 0x99, 0x04, 0xAD, 0xF0
	.byte 0x93, 0x04, 0xAB, 0xF0, 0x8D, 0x04, 0xA9, 0xF0, 0x87, 0x04, 0xA7, 0xF0, 0x81, 0x04, 0xA6, 0xF0
	.byte 0x7B, 0x04, 0xA4, 0xF0, 0x75, 0x04, 0xA2, 0xF0, 0x6F, 0x04, 0xA0, 0xF0, 0x69, 0x04, 0x9F, 0xF0
	.byte 0x63, 0x04, 0x9D, 0xF0, 0x5D, 0x04, 0x9B, 0xF0, 0x57, 0x04, 0x99, 0xF0, 0x51, 0x04, 0x98, 0xF0
	.byte 0x4B, 0x04, 0x96, 0xF0, 0x44, 0x04, 0x94, 0xF0, 0x3E, 0x04, 0x93, 0xF0, 0x38, 0x04, 0x91, 0xF0
	.byte 0x32, 0x04, 0x8F, 0xF0, 0x2C, 0x04, 0x8E, 0xF0, 0x26, 0x04, 0x8C, 0xF0, 0x20, 0x04, 0x8A, 0xF0
	.byte 0x1A, 0x04, 0x89, 0xF0, 0x14, 0x04, 0x87, 0xF0, 0x0E, 0x04, 0x86, 0xF0, 0x08, 0x04, 0x84, 0xF0
	.byte 0x02, 0x04, 0x83, 0xF0, 0xFC, 0x03, 0x81, 0xF0, 0xF6, 0x03, 0x7F, 0xF0, 0xEF, 0x03, 0x7E, 0xF0
	.byte 0xE9, 0x03, 0x7C, 0xF0, 0xE3, 0x03, 0x7B, 0xF0, 0xDD, 0x03, 0x79, 0xF0, 0xD7, 0x03, 0x78, 0xF0
	.byte 0xD1, 0x03, 0x76, 0xF0, 0xCB, 0x03, 0x75, 0xF0, 0xC5, 0x03, 0x73, 0xF0, 0xBF, 0x03, 0x72, 0xF0
	.byte 0xB9, 0x03, 0x70, 0xF0, 0xB2, 0x03, 0x6F, 0xF0, 0xAC, 0x03, 0x6D, 0xF0, 0xA6, 0x03, 0x6C, 0xF0
	.byte 0xA0, 0x03, 0x6B, 0xF0, 0x9A, 0x03, 0x69, 0xF0, 0x94, 0x03, 0x68, 0xF0, 0x8E, 0x03, 0x66, 0xF0
	.byte 0x88, 0x03, 0x65, 0xF0, 0x81, 0x03, 0x64, 0xF0, 0x7B, 0x03, 0x62, 0xF0, 0x75, 0x03, 0x61, 0xF0
	.byte 0x6F, 0x03, 0x5F, 0xF0, 0x69, 0x03, 0x5E, 0xF0, 0x63, 0x03, 0x5D, 0xF0, 0x5D, 0x03, 0x5B, 0xF0
	.byte 0x56, 0x03, 0x5A, 0xF0, 0x50, 0x03, 0x59, 0xF0, 0x4A, 0x03, 0x58, 0xF0, 0x44, 0x03, 0x56, 0xF0
	.byte 0x3E, 0x03, 0x55, 0xF0, 0x38, 0x03, 0x54, 0xF0, 0x32, 0x03, 0x52, 0xF0, 0x2B, 0x03, 0x51, 0xF0
	.byte 0x25, 0x03, 0x50, 0xF0, 0x1F, 0x03, 0x4F, 0xF0, 0x19, 0x03, 0x4D, 0xF0, 0x13, 0x03, 0x4C, 0xF0
	.byte 0x0D, 0x03, 0x4B, 0xF0, 0x06, 0x03, 0x4A, 0xF0, 0x00, 0x03, 0x49, 0xF0, 0xFA, 0x02, 0x48, 0xF0
	.byte 0xF4, 0x02, 0x46, 0xF0, 0xEE, 0x02, 0x45, 0xF0, 0xE8, 0x02, 0x44, 0xF0, 0xE1, 0x02, 0x43, 0xF0
	.byte 0xDB, 0x02, 0x42, 0xF0, 0xD5, 0x02, 0x41, 0xF0, 0xCF, 0x02, 0x40, 0xF0, 0xC9, 0x02, 0x3E, 0xF0
	.byte 0xC2, 0x02, 0x3D, 0xF0, 0xBC, 0x02, 0x3C, 0xF0, 0xB6, 0x02, 0x3B, 0xF0, 0xB0, 0x02, 0x3A, 0xF0
	.byte 0xAA, 0x02, 0x39, 0xF0, 0xA3, 0x02, 0x38, 0xF0, 0x9D, 0x02, 0x37, 0xF0, 0x97, 0x02, 0x36, 0xF0
	.byte 0x91, 0x02, 0x35, 0xF0, 0x8B, 0x02, 0x34, 0xF0, 0x84, 0x02, 0x33, 0xF0, 0x7E, 0x02, 0x32, 0xF0
	.byte 0x78, 0x02, 0x31, 0xF0, 0x72, 0x02, 0x30, 0xF0, 0x6C, 0x02, 0x2F, 0xF0, 0x65, 0x02, 0x2E, 0xF0
	.byte 0x5F, 0x02, 0x2D, 0xF0, 0x59, 0x02, 0x2C, 0xF0, 0x53, 0x02, 0x2B, 0xF0, 0x4D, 0x02, 0x2B, 0xF0
	.byte 0x46, 0x02, 0x2A, 0xF0, 0x40, 0x02, 0x29, 0xF0, 0x3A, 0x02, 0x28, 0xF0, 0x34, 0x02, 0x27, 0xF0
	.byte 0x2D, 0x02, 0x26, 0xF0, 0x27, 0x02, 0x25, 0xF0, 0x21, 0x02, 0x24, 0xF0, 0x1B, 0x02, 0x24, 0xF0
	.byte 0x15, 0x02, 0x23, 0xF0, 0x0E, 0x02, 0x22, 0xF0, 0x08, 0x02, 0x21, 0xF0, 0x02, 0x02, 0x20, 0xF0
	.byte 0xFC, 0x01, 0x20, 0xF0, 0xF5, 0x01, 0x1F, 0xF0, 0xEF, 0x01, 0x1E, 0xF0, 0xE9, 0x01, 0x1D, 0xF0
	.byte 0xE3, 0x01, 0x1D, 0xF0, 0xDC, 0x01, 0x1C, 0xF0, 0xD6, 0x01, 0x1B, 0xF0, 0xD0, 0x01, 0x1A, 0xF0
	.byte 0xCA, 0x01, 0x1A, 0xF0, 0xC3, 0x01, 0x19, 0xF0, 0xBD, 0x01, 0x18, 0xF0, 0xB7, 0x01, 0x18, 0xF0
	.byte 0xB1, 0x01, 0x17, 0xF0, 0xAA, 0x01, 0x16, 0xF0, 0xA4, 0x01, 0x16, 0xF0, 0x9E, 0x01, 0x15, 0xF0
	.byte 0x98, 0x01, 0x14, 0xF0, 0x91, 0x01, 0x14, 0xF0, 0x8B, 0x01, 0x13, 0xF0, 0x85, 0x01, 0x13, 0xF0
	.byte 0x7F, 0x01, 0x12, 0xF0, 0x78, 0x01, 0x11, 0xF0, 0x72, 0x01, 0x11, 0xF0, 0x6C, 0x01, 0x10, 0xF0
	.byte 0x66, 0x01, 0x10, 0xF0, 0x5F, 0x01, 0x0F, 0xF0, 0x59, 0x01, 0x0F, 0xF0, 0x53, 0x01, 0x0E, 0xF0
	.byte 0x4D, 0x01, 0x0E, 0xF0, 0x46, 0x01, 0x0D, 0xF0, 0x40, 0x01, 0x0D, 0xF0, 0x3A, 0x01, 0x0C, 0xF0
	.byte 0x34, 0x01, 0x0C, 0xF0, 0x2D, 0x01, 0x0B, 0xF0, 0x27, 0x01, 0x0B, 0xF0, 0x21, 0x01, 0x0A, 0xF0
	.byte 0x1B, 0x01, 0x0A, 0xF0, 0x14, 0x01, 0x09, 0xF0, 0x0E, 0x01, 0x09, 0xF0, 0x08, 0x01, 0x08, 0xF0
	.byte 0x01, 0x01, 0x08, 0xF0, 0xFB, 0x00, 0x08, 0xF0, 0xF5, 0x00, 0x07, 0xF0, 0xEF, 0x00, 0x07, 0xF0
	.byte 0xE8, 0x00, 0x07, 0xF0, 0xE2, 0x00, 0x06, 0xF0, 0xDC, 0x00, 0x06, 0xF0, 0xD6, 0x00, 0x06, 0xF0
	.byte 0xCF, 0x00, 0x05, 0xF0, 0xC9, 0x00, 0x05, 0xF0, 0xC3, 0x00, 0x05, 0xF0, 0xBC, 0x00, 0x04, 0xF0
	.byte 0xB6, 0x00, 0x04, 0xF0, 0xB0, 0x00, 0x04, 0xF0, 0xAA, 0x00, 0x04, 0xF0, 0xA3, 0x00, 0x03, 0xF0
	.byte 0x9D, 0x00, 0x03, 0xF0, 0x97, 0x00, 0x03, 0xF0, 0x90, 0x00, 0x03, 0xF0, 0x8A, 0x00, 0x02, 0xF0
	.byte 0x84, 0x00, 0x02, 0xF0, 0x7E, 0x00, 0x02, 0xF0, 0x77, 0x00, 0x02, 0xF0, 0x71, 0x00, 0x02, 0xF0
	.byte 0x6B, 0x00, 0x01, 0xF0, 0x65, 0x00, 0x01, 0xF0, 0x5E, 0x00, 0x01, 0xF0, 0x58, 0x00, 0x01, 0xF0
	.byte 0x52, 0x00, 0x01, 0xF0, 0x4B, 0x00, 0x01, 0xF0, 0x45, 0x00, 0x01, 0xF0, 0x3F, 0x00, 0x00, 0xF0
	.byte 0x39, 0x00, 0x00, 0xF0, 0x32, 0x00, 0x00, 0xF0, 0x2C, 0x00, 0x00, 0xF0, 0x26, 0x00, 0x00, 0xF0
	.byte 0x1F, 0x00, 0x00, 0xF0, 0x19, 0x00, 0x00, 0xF0, 0x13, 0x00, 0x00, 0xF0, 0x0D, 0x00, 0x00, 0xF0
	.byte 0x06, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0xFA, 0xFF, 0x00, 0xF0, 0xF3, 0xFF, 0x00, 0xF0
	.byte 0xED, 0xFF, 0x00, 0xF0, 0xE7, 0xFF, 0x00, 0xF0, 0xE1, 0xFF, 0x00, 0xF0, 0xDA, 0xFF, 0x00, 0xF0
	.byte 0xD4, 0xFF, 0x00, 0xF0, 0xCE, 0xFF, 0x00, 0xF0, 0xC7, 0xFF, 0x00, 0xF0, 0xC1, 0xFF, 0x00, 0xF0
	.byte 0xBB, 0xFF, 0x01, 0xF0, 0xB5, 0xFF, 0x01, 0xF0, 0xAE, 0xFF, 0x01, 0xF0, 0xA8, 0xFF, 0x01, 0xF0
	.byte 0xA2, 0xFF, 0x01, 0xF0, 0x9B, 0xFF, 0x01, 0xF0, 0x95, 0xFF, 0x01, 0xF0, 0x8F, 0xFF, 0x02, 0xF0
	.byte 0x89, 0xFF, 0x02, 0xF0, 0x82, 0xFF, 0x02, 0xF0, 0x7C, 0xFF, 0x02, 0xF0, 0x76, 0xFF, 0x02, 0xF0
	.byte 0x70, 0xFF, 0x03, 0xF0, 0x69, 0xFF, 0x03, 0xF0, 0x63, 0xFF, 0x03, 0xF0, 0x5D, 0xFF, 0x03, 0xF0
	.byte 0x56, 0xFF, 0x04, 0xF0, 0x50, 0xFF, 0x04, 0xF0, 0x4A, 0xFF, 0x04, 0xF0, 0x44, 0xFF, 0x04, 0xF0
	.byte 0x3D, 0xFF, 0x05, 0xF0, 0x37, 0xFF, 0x05, 0xF0, 0x31, 0xFF, 0x05, 0xF0, 0x2A, 0xFF, 0x06, 0xF0
	.byte 0x24, 0xFF, 0x06, 0xF0, 0x1E, 0xFF, 0x06, 0xF0, 0x18, 0xFF, 0x07, 0xF0, 0x11, 0xFF, 0x07, 0xF0
	.byte 0x0B, 0xFF, 0x07, 0xF0, 0x05, 0xFF, 0x08, 0xF0, 0xFF, 0xFE, 0x08, 0xF0, 0xF8, 0xFE, 0x08, 0xF0
	.byte 0xF2, 0xFE, 0x09, 0xF0, 0xEC, 0xFE, 0x09, 0xF0, 0xE5, 0xFE, 0x0A, 0xF0, 0xDF, 0xFE, 0x0A, 0xF0
	.byte 0xD9, 0xFE, 0x0B, 0xF0, 0xD3, 0xFE, 0x0B, 0xF0, 0xCC, 0xFE, 0x0C, 0xF0, 0xC6, 0xFE, 0x0C, 0xF0
	.byte 0xC0, 0xFE, 0x0D, 0xF0, 0xBA, 0xFE, 0x0D, 0xF0, 0xB3, 0xFE, 0x0E, 0xF0, 0xAD, 0xFE, 0x0E, 0xF0
	.byte 0xA7, 0xFE, 0x0F, 0xF0, 0xA1, 0xFE, 0x0F, 0xF0, 0x9A, 0xFE, 0x10, 0xF0, 0x94, 0xFE, 0x10, 0xF0
	.byte 0x8E, 0xFE, 0x11, 0xF0, 0x88, 0xFE, 0x11, 0xF0, 0x81, 0xFE, 0x12, 0xF0, 0x7B, 0xFE, 0x13, 0xF0
	.byte 0x75, 0xFE, 0x13, 0xF0, 0x6F, 0xFE, 0x14, 0xF0, 0x68, 0xFE, 0x14, 0xF0, 0x62, 0xFE, 0x15, 0xF0
	.byte 0x5C, 0xFE, 0x16, 0xF0, 0x56, 0xFE, 0x16, 0xF0, 0x4F, 0xFE, 0x17, 0xF0, 0x49, 0xFE, 0x18, 0xF0
	.byte 0x43, 0xFE, 0x18, 0xF0, 0x3D, 0xFE, 0x19, 0xF0, 0x36, 0xFE, 0x1A, 0xF0, 0x30, 0xFE, 0x1A, 0xF0
	.byte 0x2A, 0xFE, 0x1B, 0xF0, 0x24, 0xFE, 0x1C, 0xF0, 0x1D, 0xFE, 0x1D, 0xF0, 0x17, 0xFE, 0x1D, 0xF0
	.byte 0x11, 0xFE, 0x1E, 0xF0, 0x0B, 0xFE, 0x1F, 0xF0, 0x04, 0xFE, 0x20, 0xF0, 0xFE, 0xFD, 0x20, 0xF0
	.byte 0xF8, 0xFD, 0x21, 0xF0, 0xF2, 0xFD, 0x22, 0xF0, 0xEB, 0xFD, 0x23, 0xF0, 0xE5, 0xFD, 0x24, 0xF0
	.byte 0xDF, 0xFD, 0x24, 0xF0, 0xD9, 0xFD, 0x25, 0xF0, 0xD3, 0xFD, 0x26, 0xF0, 0xCC, 0xFD, 0x27, 0xF0
	.byte 0xC6, 0xFD, 0x28, 0xF0, 0xC0, 0xFD, 0x29, 0xF0, 0xBA, 0xFD, 0x2A, 0xF0, 0xB3, 0xFD, 0x2B, 0xF0
	.byte 0xAD, 0xFD, 0x2B, 0xF0, 0xA7, 0xFD, 0x2C, 0xF0, 0xA1, 0xFD, 0x2D, 0xF0, 0x9B, 0xFD, 0x2E, 0xF0
	.byte 0x94, 0xFD, 0x2F, 0xF0, 0x8E, 0xFD, 0x30, 0xF0, 0x88, 0xFD, 0x31, 0xF0, 0x82, 0xFD, 0x32, 0xF0
	.byte 0x7C, 0xFD, 0x33, 0xF0, 0x75, 0xFD, 0x34, 0xF0, 0x6F, 0xFD, 0x35, 0xF0, 0x69, 0xFD, 0x36, 0xF0
	.byte 0x63, 0xFD, 0x37, 0xF0, 0x5D, 0xFD, 0x38, 0xF0, 0x56, 0xFD, 0x39, 0xF0, 0x50, 0xFD, 0x3A, 0xF0
	.byte 0x4A, 0xFD, 0x3B, 0xF0, 0x44, 0xFD, 0x3C, 0xF0, 0x3E, 0xFD, 0x3D, 0xF0, 0x37, 0xFD, 0x3E, 0xF0
	.byte 0x31, 0xFD, 0x40, 0xF0, 0x2B, 0xFD, 0x41, 0xF0, 0x25, 0xFD, 0x42, 0xF0, 0x1F, 0xFD, 0x43, 0xF0
	.byte 0x18, 0xFD, 0x44, 0xF0, 0x12, 0xFD, 0x45, 0xF0, 0x0C, 0xFD, 0x46, 0xF0, 0x06, 0xFD, 0x48, 0xF0
	.byte 0x00, 0xFD, 0x49, 0xF0, 0xFA, 0xFC, 0x4A, 0xF0, 0xF3, 0xFC, 0x4B, 0xF0, 0xED, 0xFC, 0x4C, 0xF0
	.byte 0xE7, 0xFC, 0x4D, 0xF0, 0xE1, 0xFC, 0x4F, 0xF0, 0xDB, 0xFC, 0x50, 0xF0, 0xD5, 0xFC, 0x51, 0xF0
	.byte 0xCE, 0xFC, 0x52, 0xF0, 0xC8, 0xFC, 0x54, 0xF0, 0xC2, 0xFC, 0x55, 0xF0, 0xBC, 0xFC, 0x56, 0xF0
	.byte 0xB6, 0xFC, 0x58, 0xF0, 0xB0, 0xFC, 0x59, 0xF0, 0xAA, 0xFC, 0x5A, 0xF0, 0xA3, 0xFC, 0x5B, 0xF0
	.byte 0x9D, 0xFC, 0x5D, 0xF0, 0x97, 0xFC, 0x5E, 0xF0, 0x91, 0xFC, 0x5F, 0xF0, 0x8B, 0xFC, 0x61, 0xF0
	.byte 0x85, 0xFC, 0x62, 0xF0, 0x7F, 0xFC, 0x64, 0xF0, 0x78, 0xFC, 0x65, 0xF0, 0x72, 0xFC, 0x66, 0xF0
	.byte 0x6C, 0xFC, 0x68, 0xF0, 0x66, 0xFC, 0x69, 0xF0, 0x60, 0xFC, 0x6B, 0xF0, 0x5A, 0xFC, 0x6C, 0xF0
	.byte 0x54, 0xFC, 0x6D, 0xF0, 0x4E, 0xFC, 0x6F, 0xF0, 0x47, 0xFC, 0x70, 0xF0, 0x41, 0xFC, 0x72, 0xF0
	.byte 0x3B, 0xFC, 0x73, 0xF0, 0x35, 0xFC, 0x75, 0xF0, 0x2F, 0xFC, 0x76, 0xF0, 0x29, 0xFC, 0x78, 0xF0
	.byte 0x23, 0xFC, 0x79, 0xF0, 0x1D, 0xFC, 0x7B, 0xF0, 0x17, 0xFC, 0x7C, 0xF0, 0x11, 0xFC, 0x7E, 0xF0
	.byte 0x0A, 0xFC, 0x7F, 0xF0, 0x04, 0xFC, 0x81, 0xF0, 0xFE, 0xFB, 0x83, 0xF0, 0xF8, 0xFB, 0x84, 0xF0
	.byte 0xF2, 0xFB, 0x86, 0xF0, 0xEC, 0xFB, 0x87, 0xF0, 0xE6, 0xFB, 0x89, 0xF0, 0xE0, 0xFB, 0x8A, 0xF0
	.byte 0xDA, 0xFB, 0x8C, 0xF0, 0xD4, 0xFB, 0x8E, 0xF0, 0xCE, 0xFB, 0x8F, 0xF0, 0xC8, 0xFB, 0x91, 0xF0
	.byte 0xC2, 0xFB, 0x93, 0xF0, 0xBC, 0xFB, 0x94, 0xF0, 0xB5, 0xFB, 0x96, 0xF0, 0xAF, 0xFB, 0x98, 0xF0
	.byte 0xA9, 0xFB, 0x99, 0xF0, 0xA3, 0xFB, 0x9B, 0xF0, 0x9D, 0xFB, 0x9D, 0xF0, 0x97, 0xFB, 0x9F, 0xF0
	.byte 0x91, 0xFB, 0xA0, 0xF0, 0x8B, 0xFB, 0xA2, 0xF0, 0x85, 0xFB, 0xA4, 0xF0, 0x7F, 0xFB, 0xA6, 0xF0
	.byte 0x79, 0xFB, 0xA7, 0xF0, 0x73, 0xFB, 0xA9, 0xF0, 0x6D, 0xFB, 0xAB, 0xF0, 0x67, 0xFB, 0xAD, 0xF0
	.byte 0x61, 0xFB, 0xAF, 0xF0, 0x5B, 0xFB, 0xB0, 0xF0, 0x55, 0xFB, 0xB2, 0xF0, 0x4F, 0xFB, 0xB4, 0xF0
	.byte 0x49, 0xFB, 0xB6, 0xF0, 0x43, 0xFB, 0xB8, 0xF0, 0x3D, 0xFB, 0xBA, 0xF0, 0x37, 0xFB, 0xBB, 0xF0
	.byte 0x31, 0xFB, 0xBD, 0xF0, 0x2B, 0xFB, 0xBF, 0xF0, 0x25, 0xFB, 0xC1, 0xF0, 0x1F, 0xFB, 0xC3, 0xF0
	.byte 0x19, 0xFB, 0xC5, 0xF0, 0x13, 0xFB, 0xC7, 0xF0, 0x0D, 0xFB, 0xC9, 0xF0, 0x07, 0xFB, 0xCB, 0xF0
	.byte 0x01, 0xFB, 0xCD, 0xF0, 0xFB, 0xFA, 0xCF, 0xF0, 0xF5, 0xFA, 0xD1, 0xF0, 0xEF, 0xFA, 0xD3, 0xF0
	.byte 0xE9, 0xFA, 0xD5, 0xF0, 0xE3, 0xFA, 0xD7, 0xF0, 0xDD, 0xFA, 0xD9, 0xF0, 0xD7, 0xFA, 0xDB, 0xF0
	.byte 0xD1, 0xFA, 0xDD, 0xF0, 0xCC, 0xFA, 0xDF, 0xF0, 0xC6, 0xFA, 0xE1, 0xF0, 0xC0, 0xFA, 0xE3, 0xF0
	.byte 0xBA, 0xFA, 0xE5, 0xF0, 0xB4, 0xFA, 0xE7, 0xF0, 0xAE, 0xFA, 0xE9, 0xF0, 0xA8, 0xFA, 0xEB, 0xF0
	.byte 0xA2, 0xFA, 0xED, 0xF0, 0x9C, 0xFA, 0xEF, 0xF0, 0x96, 0xFA, 0xF2, 0xF0, 0x90, 0xFA, 0xF4, 0xF0
	.byte 0x8A, 0xFA, 0xF6, 0xF0, 0x84, 0xFA, 0xF8, 0xF0, 0x7F, 0xFA, 0xFA, 0xF0, 0x79, 0xFA, 0xFC, 0xF0
	.byte 0x73, 0xFA, 0xFE, 0xF0, 0x6D, 0xFA, 0x01, 0xF1, 0x67, 0xFA, 0x03, 0xF1, 0x61, 0xFA, 0x05, 0xF1
	.byte 0x5B, 0xFA, 0x07, 0xF1, 0x55, 0xFA, 0x09, 0xF1, 0x4F, 0xFA, 0x0C, 0xF1, 0x4A, 0xFA, 0x0E, 0xF1
	.byte 0x44, 0xFA, 0x10, 0xF1, 0x3E, 0xFA, 0x12, 0xF1, 0x38, 0xFA, 0x15, 0xF1, 0x32, 0xFA, 0x17, 0xF1
	.byte 0x2C, 0xFA, 0x19, 0xF1, 0x26, 0xFA, 0x1C, 0xF1, 0x21, 0xFA, 0x1E, 0xF1, 0x1B, 0xFA, 0x20, 0xF1
	.byte 0x15, 0xFA, 0x23, 0xF1, 0x0F, 0xFA, 0x25, 0xF1, 0x09, 0xFA, 0x27, 0xF1, 0x03, 0xFA, 0x2A, 0xF1
	.byte 0xFE, 0xF9, 0x2C, 0xF1, 0xF8, 0xF9, 0x2E, 0xF1, 0xF2, 0xF9, 0x31, 0xF1, 0xEC, 0xF9, 0x33, 0xF1
	.byte 0xE6, 0xF9, 0x35, 0xF1, 0xE1, 0xF9, 0x38, 0xF1, 0xDB, 0xF9, 0x3A, 0xF1, 0xD5, 0xF9, 0x3D, 0xF1
	.byte 0xCF, 0xF9, 0x3F, 0xF1, 0xC9, 0xF9, 0x41, 0xF1, 0xC4, 0xF9, 0x44, 0xF1, 0xBE, 0xF9, 0x46, 0xF1
	.byte 0xB8, 0xF9, 0x49, 0xF1, 0xB2, 0xF9, 0x4B, 0xF1, 0xAC, 0xF9, 0x4E, 0xF1, 0xA7, 0xF9, 0x50, 0xF1
	.byte 0xA1, 0xF9, 0x53, 0xF1, 0x9B, 0xF9, 0x55, 0xF1, 0x95, 0xF9, 0x58, 0xF1, 0x90, 0xF9, 0x5A, 0xF1
	.byte 0x8A, 0xF9, 0x5D, 0xF1, 0x84, 0xF9, 0x5F, 0xF1, 0x7E, 0xF9, 0x62, 0xF1, 0x79, 0xF9, 0x65, 0xF1
	.byte 0x73, 0xF9, 0x67, 0xF1, 0x6D, 0xF9, 0x6A, 0xF1, 0x67, 0xF9, 0x6C, 0xF1, 0x62, 0xF9, 0x6F, 0xF1
	.byte 0x5C, 0xF9, 0x71, 0xF1, 0x56, 0xF9, 0x74, 0xF1, 0x51, 0xF9, 0x77, 0xF1, 0x4B, 0xF9, 0x79, 0xF1
	.byte 0x45, 0xF9, 0x7C, 0xF1, 0x3F, 0xF9, 0x7F, 0xF1, 0x3A, 0xF9, 0x81, 0xF1, 0x34, 0xF9, 0x84, 0xF1
	.byte 0x2E, 0xF9, 0x87, 0xF1, 0x29, 0xF9, 0x89, 0xF1, 0x23, 0xF9, 0x8C, 0xF1, 0x1D, 0xF9, 0x8F, 0xF1
	.byte 0x18, 0xF9, 0x91, 0xF1, 0x12, 0xF9, 0x94, 0xF1, 0x0C, 0xF9, 0x97, 0xF1, 0x07, 0xF9, 0x9A, 0xF1
	.byte 0x01, 0xF9, 0x9C, 0xF1, 0xFB, 0xF8, 0x9F, 0xF1, 0xF6, 0xF8, 0xA2, 0xF1, 0xF0, 0xF8, 0xA5, 0xF1
	.byte 0xEB, 0xF8, 0xA7, 0xF1, 0xE5, 0xF8, 0xAA, 0xF1, 0xDF, 0xF8, 0xAD, 0xF1, 0xDA, 0xF8, 0xB0, 0xF1
	.byte 0xD4, 0xF8, 0xB3, 0xF1, 0xCE, 0xF8, 0xB5, 0xF1, 0xC9, 0xF8, 0xB8, 0xF1, 0xC3, 0xF8, 0xBB, 0xF1
	.byte 0xBE, 0xF8, 0xBE, 0xF1, 0xB8, 0xF8, 0xC1, 0xF1, 0xB2, 0xF8, 0xC4, 0xF1, 0xAD, 0xF8, 0xC6, 0xF1
	.byte 0xA7, 0xF8, 0xC9, 0xF1, 0xA2, 0xF8, 0xCC, 0xF1, 0x9C, 0xF8, 0xCF, 0xF1, 0x96, 0xF8, 0xD2, 0xF1
	.byte 0x91, 0xF8, 0xD5, 0xF1, 0x8B, 0xF8, 0xD8, 0xF1, 0x86, 0xF8, 0xDB, 0xF1, 0x80, 0xF8, 0xDE, 0xF1
	.byte 0x7B, 0xF8, 0xE1, 0xF1, 0x75, 0xF8, 0xE4, 0xF1, 0x70, 0xF8, 0xE7, 0xF1, 0x6A, 0xF8, 0xEA, 0xF1
	.byte 0x65, 0xF8, 0xED, 0xF1, 0x5F, 0xF8, 0xF0, 0xF1, 0x5A, 0xF8, 0xF3, 0xF1, 0x54, 0xF8, 0xF6, 0xF1
	.byte 0x4E, 0xF8, 0xF9, 0xF1, 0x49, 0xF8, 0xFC, 0xF1, 0x43, 0xF8, 0xFF, 0xF1, 0x3E, 0xF8, 0x02, 0xF2
	.byte 0x38, 0xF8, 0x05, 0xF2, 0x33, 0xF8, 0x08, 0xF2, 0x2E, 0xF8, 0x0B, 0xF2, 0x28, 0xF8, 0x0E, 0xF2
	.byte 0x23, 0xF8, 0x11, 0xF2, 0x1D, 0xF8, 0x14, 0xF2, 0x18, 0xF8, 0x17, 0xF2, 0x12, 0xF8, 0x1A, 0xF2
	.byte 0x0D, 0xF8, 0x1D, 0xF2, 0x07, 0xF8, 0x21, 0xF2, 0x02, 0xF8, 0x24, 0xF2, 0xFC, 0xF7, 0x27, 0xF2
	.byte 0xF7, 0xF7, 0x2A, 0xF2, 0xF2, 0xF7, 0x2D, 0xF2, 0xEC, 0xF7, 0x30, 0xF2, 0xE7, 0xF7, 0x34, 0xF2
	.byte 0xE1, 0xF7, 0x37, 0xF2, 0xDC, 0xF7, 0x3A, 0xF2, 0xD6, 0xF7, 0x3D, 0xF2, 0xD1, 0xF7, 0x40, 0xF2
	.byte 0xCC, 0xF7, 0x44, 0xF2, 0xC6, 0xF7, 0x47, 0xF2, 0xC1, 0xF7, 0x4A, 0xF2, 0xBB, 0xF7, 0x4D, 0xF2
	.byte 0xB6, 0xF7, 0x50, 0xF2, 0xB1, 0xF7, 0x54, 0xF2, 0xAB, 0xF7, 0x57, 0xF2, 0xA6, 0xF7, 0x5A, 0xF2
	.byte 0xA1, 0xF7, 0x5E, 0xF2, 0x9B, 0xF7, 0x61, 0xF2, 0x96, 0xF7, 0x64, 0xF2, 0x91, 0xF7, 0x67, 0xF2
	.byte 0x8B, 0xF7, 0x6B, 0xF2, 0x86, 0xF7, 0x6E, 0xF2, 0x81, 0xF7, 0x71, 0xF2, 0x7B, 0xF7, 0x75, 0xF2
	.byte 0x76, 0xF7, 0x78, 0xF2, 0x71, 0xF7, 0x7B, 0xF2, 0x6B, 0xF7, 0x7F, 0xF2, 0x66, 0xF7, 0x82, 0xF2
	.byte 0x61, 0xF7, 0x86, 0xF2, 0x5B, 0xF7, 0x89, 0xF2, 0x56, 0xF7, 0x8C, 0xF2, 0x51, 0xF7, 0x90, 0xF2
	.byte 0x4C, 0xF7, 0x93, 0xF2, 0x46, 0xF7, 0x97, 0xF2, 0x41, 0xF7, 0x9A, 0xF2, 0x3C, 0xF7, 0x9E, 0xF2
	.byte 0x37, 0xF7, 0xA1, 0xF2, 0x31, 0xF7, 0xA4, 0xF2, 0x2C, 0xF7, 0xA8, 0xF2, 0x27, 0xF7, 0xAB, 0xF2
	.byte 0x22, 0xF7, 0xAF, 0xF2, 0x1C, 0xF7, 0xB2, 0xF2, 0x17, 0xF7, 0xB6, 0xF2, 0x12, 0xF7, 0xB9, 0xF2
	.byte 0x0D, 0xF7, 0xBD, 0xF2, 0x08, 0xF7, 0xC0, 0xF2, 0x02, 0xF7, 0xC4, 0xF2, 0xFD, 0xF6, 0xC7, 0xF2
	.byte 0xF8, 0xF6, 0xCB, 0xF2, 0xF3, 0xF6, 0xCE, 0xF2, 0xEE, 0xF6, 0xD2, 0xF2, 0xE8, 0xF6, 0xD6, 0xF2
	.byte 0xE3, 0xF6, 0xD9, 0xF2, 0xDE, 0xF6, 0xDD, 0xF2, 0xD9, 0xF6, 0xE0, 0xF2, 0xD4, 0xF6, 0xE4, 0xF2
	.byte 0xCF, 0xF6, 0xE8, 0xF2, 0xC9, 0xF6, 0xEB, 0xF2, 0xC4, 0xF6, 0xEF, 0xF2, 0xBF, 0xF6, 0xF2, 0xF2
	.byte 0xBA, 0xF6, 0xF6, 0xF2, 0xB5, 0xF6, 0xFA, 0xF2, 0xB0, 0xF6, 0xFD, 0xF2, 0xAB, 0xF6, 0x01, 0xF3
	.byte 0xA6, 0xF6, 0x05, 0xF3, 0xA1, 0xF6, 0x08, 0xF3, 0x9B, 0xF6, 0x0C, 0xF3, 0x96, 0xF6, 0x10, 0xF3
	.byte 0x91, 0xF6, 0x13, 0xF3, 0x8C, 0xF6, 0x17, 0xF3, 0x87, 0xF6, 0x1B, 0xF3, 0x82, 0xF6, 0x1F, 0xF3
	.byte 0x7D, 0xF6, 0x22, 0xF3, 0x78, 0xF6, 0x26, 0xF3, 0x73, 0xF6, 0x2A, 0xF3, 0x6E, 0xF6, 0x2E, 0xF3
	.byte 0x69, 0xF6, 0x31, 0xF3, 0x64, 0xF6, 0x35, 0xF3, 0x5F, 0xF6, 0x39, 0xF3, 0x5A, 0xF6, 0x3D, 0xF3
	.byte 0x55, 0xF6, 0x40, 0xF3, 0x50, 0xF6, 0x44, 0xF3, 0x4B, 0xF6, 0x48, 0xF3, 0x46, 0xF6, 0x4C, 0xF3
	.byte 0x41, 0xF6, 0x50, 0xF3, 0x3C, 0xF6, 0x54, 0xF3, 0x37, 0xF6, 0x57, 0xF3, 0x32, 0xF6, 0x5B, 0xF3
	.byte 0x2D, 0xF6, 0x5F, 0xF3, 0x28, 0xF6, 0x63, 0xF3, 0x23, 0xF6, 0x67, 0xF3, 0x1E, 0xF6, 0x6B, 0xF3
	.byte 0x19, 0xF6, 0x6F, 0xF3, 0x14, 0xF6, 0x72, 0xF3, 0x0F, 0xF6, 0x76, 0xF3, 0x0A, 0xF6, 0x7A, 0xF3
	.byte 0x05, 0xF6, 0x7E, 0xF3, 0x01, 0xF6, 0x82, 0xF3, 0xFC, 0xF5, 0x86, 0xF3, 0xF7, 0xF5, 0x8A, 0xF3
	.byte 0xF2, 0xF5, 0x8E, 0xF3, 0xED, 0xF5, 0x92, 0xF3, 0xE8, 0xF5, 0x96, 0xF3, 0xE3, 0xF5, 0x9A, 0xF3
	.byte 0xDE, 0xF5, 0x9E, 0xF3, 0xDA, 0xF5, 0xA2, 0xF3, 0xD5, 0xF5, 0xA6, 0xF3, 0xD0, 0xF5, 0xAA, 0xF3
	.byte 0xCB, 0xF5, 0xAE, 0xF3, 0xC6, 0xF5, 0xB2, 0xF3, 0xC1, 0xF5, 0xB6, 0xF3, 0xBC, 0xF5, 0xBA, 0xF3
	.byte 0xB8, 0xF5, 0xBE, 0xF3, 0xB3, 0xF5, 0xC2, 0xF3, 0xAE, 0xF5, 0xC6, 0xF3, 0xA9, 0xF5, 0xCA, 0xF3
	.byte 0xA4, 0xF5, 0xCE, 0xF3, 0xA0, 0xF5, 0xD2, 0xF3, 0x9B, 0xF5, 0xD6, 0xF3, 0x96, 0xF5, 0xDA, 0xF3
	.byte 0x91, 0xF5, 0xDE, 0xF3, 0x8D, 0xF5, 0xE2, 0xF3, 0x88, 0xF5, 0xE7, 0xF3, 0x83, 0xF5, 0xEB, 0xF3
	.byte 0x7E, 0xF5, 0xEF, 0xF3, 0x7A, 0xF5, 0xF3, 0xF3, 0x75, 0xF5, 0xF7, 0xF3, 0x70, 0xF5, 0xFB, 0xF3
	.byte 0x6B, 0xF5, 0xFF, 0xF3, 0x67, 0xF5, 0x04, 0xF4, 0x62, 0xF5, 0x08, 0xF4, 0x5D, 0xF5, 0x0C, 0xF4
	.byte 0x59, 0xF5, 0x10, 0xF4, 0x54, 0xF5, 0x14, 0xF4, 0x4F, 0xF5, 0x18, 0xF4, 0x4B, 0xF5, 0x1D, 0xF4
	.byte 0x46, 0xF5, 0x21, 0xF4, 0x41, 0xF5, 0x25, 0xF4, 0x3D, 0xF5, 0x29, 0xF4, 0x38, 0xF5, 0x2E, 0xF4
	.byte 0x33, 0xF5, 0x32, 0xF4, 0x2F, 0xF5, 0x36, 0xF4, 0x2A, 0xF5, 0x3A, 0xF4, 0x25, 0xF5, 0x3F, 0xF4
	.byte 0x21, 0xF5, 0x43, 0xF4, 0x1C, 0xF5, 0x47, 0xF4, 0x18, 0xF5, 0x4B, 0xF4, 0x13, 0xF5, 0x50, 0xF4
	.byte 0x0E, 0xF5, 0x54, 0xF4, 0x0A, 0xF5, 0x58, 0xF4, 0x05, 0xF5, 0x5D, 0xF4, 0x01, 0xF5, 0x61, 0xF4
	.byte 0xFC, 0xF4, 0x65, 0xF4, 0xF8, 0xF4, 0x69, 0xF4, 0xF3, 0xF4, 0x6E, 0xF4, 0xEF, 0xF4, 0x72, 0xF4
	.byte 0xEA, 0xF4, 0x77, 0xF4, 0xE5, 0xF4, 0x7B, 0xF4, 0xE1, 0xF4, 0x7F, 0xF4, 0xDC, 0xF4, 0x84, 0xF4
	.byte 0xD8, 0xF4, 0x88, 0xF4, 0xD3, 0xF4, 0x8C, 0xF4, 0xCF, 0xF4, 0x91, 0xF4, 0xCA, 0xF4, 0x95, 0xF4
	.byte 0xC6, 0xF4, 0x9A, 0xF4, 0xC2, 0xF4, 0x9E, 0xF4, 0xBD, 0xF4, 0xA2, 0xF4, 0xB9, 0xF4, 0xA7, 0xF4
	.byte 0xB4, 0xF4, 0xAB, 0xF4, 0xB0, 0xF4, 0xB0, 0xF4, 0xAB, 0xF4, 0xB4, 0xF4, 0xA7, 0xF4, 0xB9, 0xF4
	.byte 0xA2, 0xF4, 0xBD, 0xF4, 0x9E, 0xF4, 0xC2, 0xF4, 0x9A, 0xF4, 0xC6, 0xF4, 0x95, 0xF4, 0xCA, 0xF4
	.byte 0x91, 0xF4, 0xCF, 0xF4, 0x8C, 0xF4, 0xD3, 0xF4, 0x88, 0xF4, 0xD8, 0xF4, 0x84, 0xF4, 0xDC, 0xF4
	.byte 0x7F, 0xF4, 0xE1, 0xF4, 0x7B, 0xF4, 0xE5, 0xF4, 0x77, 0xF4, 0xEA, 0xF4, 0x72, 0xF4, 0xEF, 0xF4
	.byte 0x6E, 0xF4, 0xF3, 0xF4, 0x69, 0xF4, 0xF8, 0xF4, 0x65, 0xF4, 0xFC, 0xF4, 0x61, 0xF4, 0x01, 0xF5
	.byte 0x5D, 0xF4, 0x05, 0xF5, 0x58, 0xF4, 0x0A, 0xF5, 0x54, 0xF4, 0x0E, 0xF5, 0x50, 0xF4, 0x13, 0xF5
	.byte 0x4B, 0xF4, 0x18, 0xF5, 0x47, 0xF4, 0x1C, 0xF5, 0x43, 0xF4, 0x21, 0xF5, 0x3F, 0xF4, 0x25, 0xF5
	.byte 0x3A, 0xF4, 0x2A, 0xF5, 0x36, 0xF4, 0x2F, 0xF5, 0x32, 0xF4, 0x33, 0xF5, 0x2E, 0xF4, 0x38, 0xF5
	.byte 0x29, 0xF4, 0x3D, 0xF5, 0x25, 0xF4, 0x41, 0xF5, 0x21, 0xF4, 0x46, 0xF5, 0x1D, 0xF4, 0x4B, 0xF5
	.byte 0x18, 0xF4, 0x4F, 0xF5, 0x14, 0xF4, 0x54, 0xF5, 0x10, 0xF4, 0x59, 0xF5, 0x0C, 0xF4, 0x5D, 0xF5
	.byte 0x08, 0xF4, 0x62, 0xF5, 0x04, 0xF4, 0x67, 0xF5, 0xFF, 0xF3, 0x6B, 0xF5, 0xFB, 0xF3, 0x70, 0xF5
	.byte 0xF7, 0xF3, 0x75, 0xF5, 0xF3, 0xF3, 0x7A, 0xF5, 0xEF, 0xF3, 0x7E, 0xF5, 0xEB, 0xF3, 0x83, 0xF5
	.byte 0xE7, 0xF3, 0x88, 0xF5, 0xE2, 0xF3, 0x8D, 0xF5, 0xDE, 0xF3, 0x91, 0xF5, 0xDA, 0xF3, 0x96, 0xF5
	.byte 0xD6, 0xF3, 0x9B, 0xF5, 0xD2, 0xF3, 0xA0, 0xF5, 0xCE, 0xF3, 0xA4, 0xF5, 0xCA, 0xF3, 0xA9, 0xF5
	.byte 0xC6, 0xF3, 0xAE, 0xF5, 0xC2, 0xF3, 0xB3, 0xF5, 0xBE, 0xF3, 0xB8, 0xF5, 0xBA, 0xF3, 0xBC, 0xF5
	.byte 0xB6, 0xF3, 0xC1, 0xF5, 0xB2, 0xF3, 0xC6, 0xF5, 0xAE, 0xF3, 0xCB, 0xF5, 0xAA, 0xF3, 0xD0, 0xF5
	.byte 0xA6, 0xF3, 0xD5, 0xF5, 0xA2, 0xF3, 0xDA, 0xF5, 0x9E, 0xF3, 0xDE, 0xF5, 0x9A, 0xF3, 0xE3, 0xF5
	.byte 0x96, 0xF3, 0xE8, 0xF5, 0x92, 0xF3, 0xED, 0xF5, 0x8E, 0xF3, 0xF2, 0xF5, 0x8A, 0xF3, 0xF7, 0xF5
	.byte 0x86, 0xF3, 0xFC, 0xF5, 0x82, 0xF3, 0x01, 0xF6, 0x7E, 0xF3, 0x05, 0xF6, 0x7A, 0xF3, 0x0A, 0xF6
	.byte 0x76, 0xF3, 0x0F, 0xF6, 0x72, 0xF3, 0x14, 0xF6, 0x6F, 0xF3, 0x19, 0xF6, 0x6B, 0xF3, 0x1E, 0xF6
	.byte 0x67, 0xF3, 0x23, 0xF6, 0x63, 0xF3, 0x28, 0xF6, 0x5F, 0xF3, 0x2D, 0xF6, 0x5B, 0xF3, 0x32, 0xF6
	.byte 0x57, 0xF3, 0x37, 0xF6, 0x54, 0xF3, 0x3C, 0xF6, 0x50, 0xF3, 0x41, 0xF6, 0x4C, 0xF3, 0x46, 0xF6
	.byte 0x48, 0xF3, 0x4B, 0xF6, 0x44, 0xF3, 0x50, 0xF6, 0x40, 0xF3, 0x55, 0xF6, 0x3D, 0xF3, 0x5A, 0xF6
	.byte 0x39, 0xF3, 0x5F, 0xF6, 0x35, 0xF3, 0x64, 0xF6, 0x31, 0xF3, 0x69, 0xF6, 0x2E, 0xF3, 0x6E, 0xF6
	.byte 0x2A, 0xF3, 0x73, 0xF6, 0x26, 0xF3, 0x78, 0xF6, 0x22, 0xF3, 0x7D, 0xF6, 0x1F, 0xF3, 0x82, 0xF6
	.byte 0x1B, 0xF3, 0x87, 0xF6, 0x17, 0xF3, 0x8C, 0xF6, 0x13, 0xF3, 0x91, 0xF6, 0x10, 0xF3, 0x96, 0xF6
	.byte 0x0C, 0xF3, 0x9B, 0xF6, 0x08, 0xF3, 0xA1, 0xF6, 0x05, 0xF3, 0xA6, 0xF6, 0x01, 0xF3, 0xAB, 0xF6
	.byte 0xFD, 0xF2, 0xB0, 0xF6, 0xFA, 0xF2, 0xB5, 0xF6, 0xF6, 0xF2, 0xBA, 0xF6, 0xF2, 0xF2, 0xBF, 0xF6
	.byte 0xEF, 0xF2, 0xC4, 0xF6, 0xEB, 0xF2, 0xC9, 0xF6, 0xE8, 0xF2, 0xCF, 0xF6, 0xE4, 0xF2, 0xD4, 0xF6
	.byte 0xE0, 0xF2, 0xD9, 0xF6, 0xDD, 0xF2, 0xDE, 0xF6, 0xD9, 0xF2, 0xE3, 0xF6, 0xD6, 0xF2, 0xE8, 0xF6
	.byte 0xD2, 0xF2, 0xEE, 0xF6, 0xCE, 0xF2, 0xF3, 0xF6, 0xCB, 0xF2, 0xF8, 0xF6, 0xC7, 0xF2, 0xFD, 0xF6
	.byte 0xC4, 0xF2, 0x02, 0xF7, 0xC0, 0xF2, 0x08, 0xF7, 0xBD, 0xF2, 0x0D, 0xF7, 0xB9, 0xF2, 0x12, 0xF7
	.byte 0xB6, 0xF2, 0x17, 0xF7, 0xB2, 0xF2, 0x1C, 0xF7, 0xAF, 0xF2, 0x22, 0xF7, 0xAB, 0xF2, 0x27, 0xF7
	.byte 0xA8, 0xF2, 0x2C, 0xF7, 0xA4, 0xF2, 0x31, 0xF7, 0xA1, 0xF2, 0x37, 0xF7, 0x9E, 0xF2, 0x3C, 0xF7
	.byte 0x9A, 0xF2, 0x41, 0xF7, 0x97, 0xF2, 0x46, 0xF7, 0x93, 0xF2, 0x4C, 0xF7, 0x90, 0xF2, 0x51, 0xF7
	.byte 0x8C, 0xF2, 0x56, 0xF7, 0x89, 0xF2, 0x5B, 0xF7, 0x86, 0xF2, 0x61, 0xF7, 0x82, 0xF2, 0x66, 0xF7
	.byte 0x7F, 0xF2, 0x6B, 0xF7, 0x7B, 0xF2, 0x71, 0xF7, 0x78, 0xF2, 0x76, 0xF7, 0x75, 0xF2, 0x7B, 0xF7
	.byte 0x71, 0xF2, 0x81, 0xF7, 0x6E, 0xF2, 0x86, 0xF7, 0x6B, 0xF2, 0x8B, 0xF7, 0x67, 0xF2, 0x91, 0xF7
	.byte 0x64, 0xF2, 0x96, 0xF7, 0x61, 0xF2, 0x9B, 0xF7, 0x5E, 0xF2, 0xA1, 0xF7, 0x5A, 0xF2, 0xA6, 0xF7
	.byte 0x57, 0xF2, 0xAB, 0xF7, 0x54, 0xF2, 0xB1, 0xF7, 0x50, 0xF2, 0xB6, 0xF7, 0x4D, 0xF2, 0xBB, 0xF7
	.byte 0x4A, 0xF2, 0xC1, 0xF7, 0x47, 0xF2, 0xC6, 0xF7, 0x44, 0xF2, 0xCC, 0xF7, 0x40, 0xF2, 0xD1, 0xF7
	.byte 0x3D, 0xF2, 0xD6, 0xF7, 0x3A, 0xF2, 0xDC, 0xF7, 0x37, 0xF2, 0xE1, 0xF7, 0x34, 0xF2, 0xE7, 0xF7
	.byte 0x30, 0xF2, 0xEC, 0xF7, 0x2D, 0xF2, 0xF2, 0xF7, 0x2A, 0xF2, 0xF7, 0xF7, 0x27, 0xF2, 0xFC, 0xF7
	.byte 0x24, 0xF2, 0x02, 0xF8, 0x21, 0xF2, 0x07, 0xF8, 0x1D, 0xF2, 0x0D, 0xF8, 0x1A, 0xF2, 0x12, 0xF8
	.byte 0x17, 0xF2, 0x18, 0xF8, 0x14, 0xF2, 0x1D, 0xF8, 0x11, 0xF2, 0x23, 0xF8, 0x0E, 0xF2, 0x28, 0xF8
	.byte 0x0B, 0xF2, 0x2E, 0xF8, 0x08, 0xF2, 0x33, 0xF8, 0x05, 0xF2, 0x38, 0xF8, 0x02, 0xF2, 0x3E, 0xF8
	.byte 0xFF, 0xF1, 0x43, 0xF8, 0xFC, 0xF1, 0x49, 0xF8, 0xF9, 0xF1, 0x4E, 0xF8, 0xF6, 0xF1, 0x54, 0xF8
	.byte 0xF3, 0xF1, 0x5A, 0xF8, 0xF0, 0xF1, 0x5F, 0xF8, 0xED, 0xF1, 0x65, 0xF8, 0xEA, 0xF1, 0x6A, 0xF8
	.byte 0xE7, 0xF1, 0x70, 0xF8, 0xE4, 0xF1, 0x75, 0xF8, 0xE1, 0xF1, 0x7B, 0xF8, 0xDE, 0xF1, 0x80, 0xF8
	.byte 0xDB, 0xF1, 0x86, 0xF8, 0xD8, 0xF1, 0x8B, 0xF8, 0xD5, 0xF1, 0x91, 0xF8, 0xD2, 0xF1, 0x96, 0xF8
	.byte 0xCF, 0xF1, 0x9C, 0xF8, 0xCC, 0xF1, 0xA2, 0xF8, 0xC9, 0xF1, 0xA7, 0xF8, 0xC6, 0xF1, 0xAD, 0xF8
	.byte 0xC4, 0xF1, 0xB2, 0xF8, 0xC1, 0xF1, 0xB8, 0xF8, 0xBE, 0xF1, 0xBE, 0xF8, 0xBB, 0xF1, 0xC3, 0xF8
	.byte 0xB8, 0xF1, 0xC9, 0xF8, 0xB5, 0xF1, 0xCE, 0xF8, 0xB3, 0xF1, 0xD4, 0xF8, 0xB0, 0xF1, 0xDA, 0xF8
	.byte 0xAD, 0xF1, 0xDF, 0xF8, 0xAA, 0xF1, 0xE5, 0xF8, 0xA7, 0xF1, 0xEB, 0xF8, 0xA5, 0xF1, 0xF0, 0xF8
	.byte 0xA2, 0xF1, 0xF6, 0xF8, 0x9F, 0xF1, 0xFB, 0xF8, 0x9C, 0xF1, 0x01, 0xF9, 0x9A, 0xF1, 0x07, 0xF9
	.byte 0x97, 0xF1, 0x0C, 0xF9, 0x94, 0xF1, 0x12, 0xF9, 0x91, 0xF1, 0x18, 0xF9, 0x8F, 0xF1, 0x1D, 0xF9
	.byte 0x8C, 0xF1, 0x23, 0xF9, 0x89, 0xF1, 0x29, 0xF9, 0x87, 0xF1, 0x2E, 0xF9, 0x84, 0xF1, 0x34, 0xF9
	.byte 0x81, 0xF1, 0x3A, 0xF9, 0x7F, 0xF1, 0x3F, 0xF9, 0x7C, 0xF1, 0x45, 0xF9, 0x79, 0xF1, 0x4B, 0xF9
	.byte 0x77, 0xF1, 0x51, 0xF9, 0x74, 0xF1, 0x56, 0xF9, 0x71, 0xF1, 0x5C, 0xF9, 0x6F, 0xF1, 0x62, 0xF9
	.byte 0x6C, 0xF1, 0x67, 0xF9, 0x6A, 0xF1, 0x6D, 0xF9, 0x67, 0xF1, 0x73, 0xF9, 0x65, 0xF1, 0x79, 0xF9
	.byte 0x62, 0xF1, 0x7E, 0xF9, 0x5F, 0xF1, 0x84, 0xF9, 0x5D, 0xF1, 0x8A, 0xF9, 0x5A, 0xF1, 0x90, 0xF9
	.byte 0x58, 0xF1, 0x95, 0xF9, 0x55, 0xF1, 0x9B, 0xF9, 0x53, 0xF1, 0xA1, 0xF9, 0x50, 0xF1, 0xA7, 0xF9
	.byte 0x4E, 0xF1, 0xAC, 0xF9, 0x4B, 0xF1, 0xB2, 0xF9, 0x49, 0xF1, 0xB8, 0xF9, 0x46, 0xF1, 0xBE, 0xF9
	.byte 0x44, 0xF1, 0xC4, 0xF9, 0x41, 0xF1, 0xC9, 0xF9, 0x3F, 0xF1, 0xCF, 0xF9, 0x3D, 0xF1, 0xD5, 0xF9
	.byte 0x3A, 0xF1, 0xDB, 0xF9, 0x38, 0xF1, 0xE1, 0xF9, 0x35, 0xF1, 0xE6, 0xF9, 0x33, 0xF1, 0xEC, 0xF9
	.byte 0x31, 0xF1, 0xF2, 0xF9, 0x2E, 0xF1, 0xF8, 0xF9, 0x2C, 0xF1, 0xFE, 0xF9, 0x2A, 0xF1, 0x03, 0xFA
	.byte 0x27, 0xF1, 0x09, 0xFA, 0x25, 0xF1, 0x0F, 0xFA, 0x23, 0xF1, 0x15, 0xFA, 0x20, 0xF1, 0x1B, 0xFA
	.byte 0x1E, 0xF1, 0x21, 0xFA, 0x1C, 0xF1, 0x26, 0xFA, 0x19, 0xF1, 0x2C, 0xFA, 0x17, 0xF1, 0x32, 0xFA
	.byte 0x15, 0xF1, 0x38, 0xFA, 0x12, 0xF1, 0x3E, 0xFA, 0x10, 0xF1, 0x44, 0xFA, 0x0E, 0xF1, 0x4A, 0xFA
	.byte 0x0C, 0xF1, 0x4F, 0xFA, 0x09, 0xF1, 0x55, 0xFA, 0x07, 0xF1, 0x5B, 0xFA, 0x05, 0xF1, 0x61, 0xFA
	.byte 0x03, 0xF1, 0x67, 0xFA, 0x01, 0xF1, 0x6D, 0xFA, 0xFE, 0xF0, 0x73, 0xFA, 0xFC, 0xF0, 0x79, 0xFA
	.byte 0xFA, 0xF0, 0x7F, 0xFA, 0xF8, 0xF0, 0x84, 0xFA, 0xF6, 0xF0, 0x8A, 0xFA, 0xF4, 0xF0, 0x90, 0xFA
	.byte 0xF2, 0xF0, 0x96, 0xFA, 0xEF, 0xF0, 0x9C, 0xFA, 0xED, 0xF0, 0xA2, 0xFA, 0xEB, 0xF0, 0xA8, 0xFA
	.byte 0xE9, 0xF0, 0xAE, 0xFA, 0xE7, 0xF0, 0xB4, 0xFA, 0xE5, 0xF0, 0xBA, 0xFA, 0xE3, 0xF0, 0xC0, 0xFA
	.byte 0xE1, 0xF0, 0xC6, 0xFA, 0xDF, 0xF0, 0xCC, 0xFA, 0xDD, 0xF0, 0xD1, 0xFA, 0xDB, 0xF0, 0xD7, 0xFA
	.byte 0xD9, 0xF0, 0xDD, 0xFA, 0xD7, 0xF0, 0xE3, 0xFA, 0xD5, 0xF0, 0xE9, 0xFA, 0xD3, 0xF0, 0xEF, 0xFA
	.byte 0xD1, 0xF0, 0xF5, 0xFA, 0xCF, 0xF0, 0xFB, 0xFA, 0xCD, 0xF0, 0x01, 0xFB, 0xCB, 0xF0, 0x07, 0xFB
	.byte 0xC9, 0xF0, 0x0D, 0xFB, 0xC7, 0xF0, 0x13, 0xFB, 0xC5, 0xF0, 0x19, 0xFB, 0xC3, 0xF0, 0x1F, 0xFB
	.byte 0xC1, 0xF0, 0x25, 0xFB, 0xBF, 0xF0, 0x2B, 0xFB, 0xBD, 0xF0, 0x31, 0xFB, 0xBB, 0xF0, 0x37, 0xFB
	.byte 0xBA, 0xF0, 0x3D, 0xFB, 0xB8, 0xF0, 0x43, 0xFB, 0xB6, 0xF0, 0x49, 0xFB, 0xB4, 0xF0, 0x4F, 0xFB
	.byte 0xB2, 0xF0, 0x55, 0xFB, 0xB0, 0xF0, 0x5B, 0xFB, 0xAF, 0xF0, 0x61, 0xFB, 0xAD, 0xF0, 0x67, 0xFB
	.byte 0xAB, 0xF0, 0x6D, 0xFB, 0xA9, 0xF0, 0x73, 0xFB, 0xA7, 0xF0, 0x79, 0xFB, 0xA6, 0xF0, 0x7F, 0xFB
	.byte 0xA4, 0xF0, 0x85, 0xFB, 0xA2, 0xF0, 0x8B, 0xFB, 0xA0, 0xF0, 0x91, 0xFB, 0x9F, 0xF0, 0x97, 0xFB
	.byte 0x9D, 0xF0, 0x9D, 0xFB, 0x9B, 0xF0, 0xA3, 0xFB, 0x99, 0xF0, 0xA9, 0xFB, 0x98, 0xF0, 0xAF, 0xFB
	.byte 0x96, 0xF0, 0xB5, 0xFB, 0x94, 0xF0, 0xBC, 0xFB, 0x93, 0xF0, 0xC2, 0xFB, 0x91, 0xF0, 0xC8, 0xFB
	.byte 0x8F, 0xF0, 0xCE, 0xFB, 0x8E, 0xF0, 0xD4, 0xFB, 0x8C, 0xF0, 0xDA, 0xFB, 0x8A, 0xF0, 0xE0, 0xFB
	.byte 0x89, 0xF0, 0xE6, 0xFB, 0x87, 0xF0, 0xEC, 0xFB, 0x86, 0xF0, 0xF2, 0xFB, 0x84, 0xF0, 0xF8, 0xFB
	.byte 0x83, 0xF0, 0xFE, 0xFB, 0x81, 0xF0, 0x04, 0xFC, 0x7F, 0xF0, 0x0A, 0xFC, 0x7E, 0xF0, 0x11, 0xFC
	.byte 0x7C, 0xF0, 0x17, 0xFC, 0x7B, 0xF0, 0x1D, 0xFC, 0x79, 0xF0, 0x23, 0xFC, 0x78, 0xF0, 0x29, 0xFC
	.byte 0x76, 0xF0, 0x2F, 0xFC, 0x75, 0xF0, 0x35, 0xFC, 0x73, 0xF0, 0x3B, 0xFC, 0x72, 0xF0, 0x41, 0xFC
	.byte 0x70, 0xF0, 0x47, 0xFC, 0x6F, 0xF0, 0x4E, 0xFC, 0x6D, 0xF0, 0x54, 0xFC, 0x6C, 0xF0, 0x5A, 0xFC
	.byte 0x6B, 0xF0, 0x60, 0xFC, 0x69, 0xF0, 0x66, 0xFC, 0x68, 0xF0, 0x6C, 0xFC, 0x66, 0xF0, 0x72, 0xFC
	.byte 0x65, 0xF0, 0x78, 0xFC, 0x64, 0xF0, 0x7F, 0xFC, 0x62, 0xF0, 0x85, 0xFC, 0x61, 0xF0, 0x8B, 0xFC
	.byte 0x5F, 0xF0, 0x91, 0xFC, 0x5E, 0xF0, 0x97, 0xFC, 0x5D, 0xF0, 0x9D, 0xFC, 0x5B, 0xF0, 0xA3, 0xFC
	.byte 0x5A, 0xF0, 0xAA, 0xFC, 0x59, 0xF0, 0xB0, 0xFC, 0x58, 0xF0, 0xB6, 0xFC, 0x56, 0xF0, 0xBC, 0xFC
	.byte 0x55, 0xF0, 0xC2, 0xFC, 0x54, 0xF0, 0xC8, 0xFC, 0x52, 0xF0, 0xCE, 0xFC, 0x51, 0xF0, 0xD5, 0xFC
	.byte 0x50, 0xF0, 0xDB, 0xFC, 0x4F, 0xF0, 0xE1, 0xFC, 0x4D, 0xF0, 0xE7, 0xFC, 0x4C, 0xF0, 0xED, 0xFC
	.byte 0x4B, 0xF0, 0xF3, 0xFC, 0x4A, 0xF0, 0xFA, 0xFC, 0x49, 0xF0, 0x00, 0xFD, 0x48, 0xF0, 0x06, 0xFD
	.byte 0x46, 0xF0, 0x0C, 0xFD, 0x45, 0xF0, 0x12, 0xFD, 0x44, 0xF0, 0x18, 0xFD, 0x43, 0xF0, 0x1F, 0xFD
	.byte 0x42, 0xF0, 0x25, 0xFD, 0x41, 0xF0, 0x2B, 0xFD, 0x40, 0xF0, 0x31, 0xFD, 0x3E, 0xF0, 0x37, 0xFD
	.byte 0x3D, 0xF0, 0x3E, 0xFD, 0x3C, 0xF0, 0x44, 0xFD, 0x3B, 0xF0, 0x4A, 0xFD, 0x3A, 0xF0, 0x50, 0xFD
	.byte 0x39, 0xF0, 0x56, 0xFD, 0x38, 0xF0, 0x5D, 0xFD, 0x37, 0xF0, 0x63, 0xFD, 0x36, 0xF0, 0x69, 0xFD
	.byte 0x35, 0xF0, 0x6F, 0xFD, 0x34, 0xF0, 0x75, 0xFD, 0x33, 0xF0, 0x7C, 0xFD, 0x32, 0xF0, 0x82, 0xFD
	.byte 0x31, 0xF0, 0x88, 0xFD, 0x30, 0xF0, 0x8E, 0xFD, 0x2F, 0xF0, 0x94, 0xFD, 0x2E, 0xF0, 0x9B, 0xFD
	.byte 0x2D, 0xF0, 0xA1, 0xFD, 0x2C, 0xF0, 0xA7, 0xFD, 0x2B, 0xF0, 0xAD, 0xFD, 0x2B, 0xF0, 0xB3, 0xFD
	.byte 0x2A, 0xF0, 0xBA, 0xFD, 0x29, 0xF0, 0xC0, 0xFD, 0x28, 0xF0, 0xC6, 0xFD, 0x27, 0xF0, 0xCC, 0xFD
	.byte 0x26, 0xF0, 0xD3, 0xFD, 0x25, 0xF0, 0xD9, 0xFD, 0x24, 0xF0, 0xDF, 0xFD, 0x24, 0xF0, 0xE5, 0xFD
	.byte 0x23, 0xF0, 0xEB, 0xFD, 0x22, 0xF0, 0xF2, 0xFD, 0x21, 0xF0, 0xF8, 0xFD, 0x20, 0xF0, 0xFE, 0xFD
	.byte 0x20, 0xF0, 0x04, 0xFE, 0x1F, 0xF0, 0x0B, 0xFE, 0x1E, 0xF0, 0x11, 0xFE, 0x1D, 0xF0, 0x17, 0xFE
	.byte 0x1D, 0xF0, 0x1D, 0xFE, 0x1C, 0xF0, 0x24, 0xFE, 0x1B, 0xF0, 0x2A, 0xFE, 0x1A, 0xF0, 0x30, 0xFE
	.byte 0x1A, 0xF0, 0x36, 0xFE, 0x19, 0xF0, 0x3D, 0xFE, 0x18, 0xF0, 0x43, 0xFE, 0x18, 0xF0, 0x49, 0xFE
	.byte 0x17, 0xF0, 0x4F, 0xFE, 0x16, 0xF0, 0x56, 0xFE, 0x16, 0xF0, 0x5C, 0xFE, 0x15, 0xF0, 0x62, 0xFE
	.byte 0x14, 0xF0, 0x68, 0xFE, 0x14, 0xF0, 0x6F, 0xFE, 0x13, 0xF0, 0x75, 0xFE, 0x13, 0xF0, 0x7B, 0xFE
	.byte 0x12, 0xF0, 0x81, 0xFE, 0x11, 0xF0, 0x88, 0xFE, 0x11, 0xF0, 0x8E, 0xFE, 0x10, 0xF0, 0x94, 0xFE
	.byte 0x10, 0xF0, 0x9A, 0xFE, 0x0F, 0xF0, 0xA1, 0xFE, 0x0F, 0xF0, 0xA7, 0xFE, 0x0E, 0xF0, 0xAD, 0xFE
	.byte 0x0E, 0xF0, 0xB3, 0xFE, 0x0D, 0xF0, 0xBA, 0xFE, 0x0D, 0xF0, 0xC0, 0xFE, 0x0C, 0xF0, 0xC6, 0xFE
	.byte 0x0C, 0xF0, 0xCC, 0xFE, 0x0B, 0xF0, 0xD3, 0xFE, 0x0B, 0xF0, 0xD9, 0xFE, 0x0A, 0xF0, 0xDF, 0xFE
	.byte 0x0A, 0xF0, 0xE5, 0xFE, 0x09, 0xF0, 0xEC, 0xFE, 0x09, 0xF0, 0xF2, 0xFE, 0x08, 0xF0, 0xF8, 0xFE
	.byte 0x08, 0xF0, 0xFF, 0xFE, 0x08, 0xF0, 0x05, 0xFF, 0x07, 0xF0, 0x0B, 0xFF, 0x07, 0xF0, 0x11, 0xFF
	.byte 0x07, 0xF0, 0x18, 0xFF, 0x06, 0xF0, 0x1E, 0xFF, 0x06, 0xF0, 0x24, 0xFF, 0x06, 0xF0, 0x2A, 0xFF
	.byte 0x05, 0xF0, 0x31, 0xFF, 0x05, 0xF0, 0x37, 0xFF, 0x05, 0xF0, 0x3D, 0xFF, 0x04, 0xF0, 0x44, 0xFF
	.byte 0x04, 0xF0, 0x4A, 0xFF, 0x04, 0xF0, 0x50, 0xFF, 0x04, 0xF0, 0x56, 0xFF, 0x03, 0xF0, 0x5D, 0xFF
	.byte 0x03, 0xF0, 0x63, 0xFF, 0x03, 0xF0, 0x69, 0xFF, 0x03, 0xF0, 0x70, 0xFF, 0x02, 0xF0, 0x76, 0xFF
	.byte 0x02, 0xF0, 0x7C, 0xFF, 0x02, 0xF0, 0x82, 0xFF, 0x02, 0xF0, 0x89, 0xFF, 0x02, 0xF0, 0x8F, 0xFF
	.byte 0x01, 0xF0, 0x95, 0xFF, 0x01, 0xF0, 0x9B, 0xFF, 0x01, 0xF0, 0xA2, 0xFF, 0x01, 0xF0, 0xA8, 0xFF
	.byte 0x01, 0xF0, 0xAE, 0xFF, 0x01, 0xF0, 0xB5, 0xFF, 0x01, 0xF0, 0xBB, 0xFF, 0x00, 0xF0, 0xC1, 0xFF
	.byte 0x00, 0xF0, 0xC7, 0xFF, 0x00, 0xF0, 0xCE, 0xFF, 0x00, 0xF0, 0xD4, 0xFF, 0x00, 0xF0, 0xDA, 0xFF
	.byte 0x00, 0xF0, 0xE1, 0xFF, 0x00, 0xF0, 0xE7, 0xFF, 0x00, 0xF0, 0xED, 0xFF, 0x00, 0xF0, 0xF3, 0xFF
	.byte 0x00, 0xF0, 0xFA, 0xFF, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x06, 0x00, 0x00, 0xF0, 0x0D, 0x00
	.byte 0x00, 0xF0, 0x13, 0x00, 0x00, 0xF0, 0x19, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0xF0, 0x26, 0x00
	.byte 0x00, 0xF0, 0x2C, 0x00, 0x00, 0xF0, 0x32, 0x00, 0x00, 0xF0, 0x39, 0x00, 0x00, 0xF0, 0x3F, 0x00
	.byte 0x01, 0xF0, 0x45, 0x00, 0x01, 0xF0, 0x4B, 0x00, 0x01, 0xF0, 0x52, 0x00, 0x01, 0xF0, 0x58, 0x00
	.byte 0x01, 0xF0, 0x5E, 0x00, 0x01, 0xF0, 0x65, 0x00, 0x01, 0xF0, 0x6B, 0x00, 0x02, 0xF0, 0x71, 0x00
	.byte 0x02, 0xF0, 0x77, 0x00, 0x02, 0xF0, 0x7E, 0x00, 0x02, 0xF0, 0x84, 0x00, 0x02, 0xF0, 0x8A, 0x00
	.byte 0x03, 0xF0, 0x90, 0x00, 0x03, 0xF0, 0x97, 0x00, 0x03, 0xF0, 0x9D, 0x00, 0x03, 0xF0, 0xA3, 0x00
	.byte 0x04, 0xF0, 0xAA, 0x00, 0x04, 0xF0, 0xB0, 0x00, 0x04, 0xF0, 0xB6, 0x00, 0x04, 0xF0, 0xBC, 0x00
	.byte 0x05, 0xF0, 0xC3, 0x00, 0x05, 0xF0, 0xC9, 0x00, 0x05, 0xF0, 0xCF, 0x00, 0x06, 0xF0, 0xD6, 0x00
	.byte 0x06, 0xF0, 0xDC, 0x00, 0x06, 0xF0, 0xE2, 0x00, 0x07, 0xF0, 0xE8, 0x00, 0x07, 0xF0, 0xEF, 0x00
	.byte 0x07, 0xF0, 0xF5, 0x00, 0x08, 0xF0, 0xFB, 0x00, 0x08, 0xF0, 0x01, 0x01, 0x08, 0xF0, 0x08, 0x01
	.byte 0x09, 0xF0, 0x0E, 0x01, 0x09, 0xF0, 0x14, 0x01, 0x0A, 0xF0, 0x1B, 0x01, 0x0A, 0xF0, 0x21, 0x01
	.byte 0x0B, 0xF0, 0x27, 0x01, 0x0B, 0xF0, 0x2D, 0x01, 0x0C, 0xF0, 0x34, 0x01, 0x0C, 0xF0, 0x3A, 0x01
	.byte 0x0D, 0xF0, 0x40, 0x01, 0x0D, 0xF0, 0x46, 0x01, 0x0E, 0xF0, 0x4D, 0x01, 0x0E, 0xF0, 0x53, 0x01
	.byte 0x0F, 0xF0, 0x59, 0x01, 0x0F, 0xF0, 0x5F, 0x01, 0x10, 0xF0, 0x66, 0x01, 0x10, 0xF0, 0x6C, 0x01
	.byte 0x11, 0xF0, 0x72, 0x01, 0x11, 0xF0, 0x78, 0x01, 0x12, 0xF0, 0x7F, 0x01, 0x13, 0xF0, 0x85, 0x01
	.byte 0x13, 0xF0, 0x8B, 0x01, 0x14, 0xF0, 0x91, 0x01, 0x14, 0xF0, 0x98, 0x01, 0x15, 0xF0, 0x9E, 0x01
	.byte 0x16, 0xF0, 0xA4, 0x01, 0x16, 0xF0, 0xAA, 0x01, 0x17, 0xF0, 0xB1, 0x01, 0x18, 0xF0, 0xB7, 0x01
	.byte 0x18, 0xF0, 0xBD, 0x01, 0x19, 0xF0, 0xC3, 0x01, 0x1A, 0xF0, 0xCA, 0x01, 0x1A, 0xF0, 0xD0, 0x01
	.byte 0x1B, 0xF0, 0xD6, 0x01, 0x1C, 0xF0, 0xDC, 0x01, 0x1D, 0xF0, 0xE3, 0x01, 0x1D, 0xF0, 0xE9, 0x01
	.byte 0x1E, 0xF0, 0xEF, 0x01, 0x1F, 0xF0, 0xF5, 0x01, 0x20, 0xF0, 0xFC, 0x01, 0x20, 0xF0, 0x02, 0x02
	.byte 0x21, 0xF0, 0x08, 0x02, 0x22, 0xF0, 0x0E, 0x02, 0x23, 0xF0, 0x15, 0x02, 0x24, 0xF0, 0x1B, 0x02
	.byte 0x24, 0xF0, 0x21, 0x02, 0x25, 0xF0, 0x27, 0x02, 0x26, 0xF0, 0x2D, 0x02, 0x27, 0xF0, 0x34, 0x02
	.byte 0x28, 0xF0, 0x3A, 0x02, 0x29, 0xF0, 0x40, 0x02, 0x2A, 0xF0, 0x46, 0x02, 0x2B, 0xF0, 0x4D, 0x02
	.byte 0x2B, 0xF0, 0x53, 0x02, 0x2C, 0xF0, 0x59, 0x02, 0x2D, 0xF0, 0x5F, 0x02, 0x2E, 0xF0, 0x65, 0x02
	.byte 0x2F, 0xF0, 0x6C, 0x02, 0x30, 0xF0, 0x72, 0x02, 0x31, 0xF0, 0x78, 0x02, 0x32, 0xF0, 0x7E, 0x02
	.byte 0x33, 0xF0, 0x84, 0x02, 0x34, 0xF0, 0x8B, 0x02, 0x35, 0xF0, 0x91, 0x02, 0x36, 0xF0, 0x97, 0x02
	.byte 0x37, 0xF0, 0x9D, 0x02, 0x38, 0xF0, 0xA3, 0x02, 0x39, 0xF0, 0xAA, 0x02, 0x3A, 0xF0, 0xB0, 0x02
	.byte 0x3B, 0xF0, 0xB6, 0x02, 0x3C, 0xF0, 0xBC, 0x02, 0x3D, 0xF0, 0xC2, 0x02, 0x3E, 0xF0, 0xC9, 0x02
	.byte 0x40, 0xF0, 0xCF, 0x02, 0x41, 0xF0, 0xD5, 0x02, 0x42, 0xF0, 0xDB, 0x02, 0x43, 0xF0, 0xE1, 0x02
	.byte 0x44, 0xF0, 0xE8, 0x02, 0x45, 0xF0, 0xEE, 0x02, 0x46, 0xF0, 0xF4, 0x02, 0x48, 0xF0, 0xFA, 0x02
	.byte 0x49, 0xF0, 0x00, 0x03, 0x4A, 0xF0, 0x06, 0x03, 0x4B, 0xF0, 0x0D, 0x03, 0x4C, 0xF0, 0x13, 0x03
	.byte 0x4D, 0xF0, 0x19, 0x03, 0x4F, 0xF0, 0x1F, 0x03, 0x50, 0xF0, 0x25, 0x03, 0x51, 0xF0, 0x2B, 0x03
	.byte 0x52, 0xF0, 0x32, 0x03, 0x54, 0xF0, 0x38, 0x03, 0x55, 0xF0, 0x3E, 0x03, 0x56, 0xF0, 0x44, 0x03
	.byte 0x58, 0xF0, 0x4A, 0x03, 0x59, 0xF0, 0x50, 0x03, 0x5A, 0xF0, 0x56, 0x03, 0x5B, 0xF0, 0x5D, 0x03
	.byte 0x5D, 0xF0, 0x63, 0x03, 0x5E, 0xF0, 0x69, 0x03, 0x5F, 0xF0, 0x6F, 0x03, 0x61, 0xF0, 0x75, 0x03
	.byte 0x62, 0xF0, 0x7B, 0x03, 0x64, 0xF0, 0x81, 0x03, 0x65, 0xF0, 0x88, 0x03, 0x66, 0xF0, 0x8E, 0x03
	.byte 0x68, 0xF0, 0x94, 0x03, 0x69, 0xF0, 0x9A, 0x03, 0x6B, 0xF0, 0xA0, 0x03, 0x6C, 0xF0, 0xA6, 0x03
	.byte 0x6D, 0xF0, 0xAC, 0x03, 0x6F, 0xF0, 0xB2, 0x03, 0x70, 0xF0, 0xB9, 0x03, 0x72, 0xF0, 0xBF, 0x03
	.byte 0x73, 0xF0, 0xC5, 0x03, 0x75, 0xF0, 0xCB, 0x03, 0x76, 0xF0, 0xD1, 0x03, 0x78, 0xF0, 0xD7, 0x03
	.byte 0x79, 0xF0, 0xDD, 0x03, 0x7B, 0xF0, 0xE3, 0x03, 0x7C, 0xF0, 0xE9, 0x03, 0x7E, 0xF0, 0xEF, 0x03
	.byte 0x7F, 0xF0, 0xF6, 0x03, 0x81, 0xF0, 0xFC, 0x03, 0x83, 0xF0, 0x02, 0x04, 0x84, 0xF0, 0x08, 0x04
	.byte 0x86, 0xF0, 0x0E, 0x04, 0x87, 0xF0, 0x14, 0x04, 0x89, 0xF0, 0x1A, 0x04, 0x8A, 0xF0, 0x20, 0x04
	.byte 0x8C, 0xF0, 0x26, 0x04, 0x8E, 0xF0, 0x2C, 0x04, 0x8F, 0xF0, 0x32, 0x04, 0x91, 0xF0, 0x38, 0x04
	.byte 0x93, 0xF0, 0x3E, 0x04, 0x94, 0xF0, 0x44, 0x04, 0x96, 0xF0, 0x4B, 0x04, 0x98, 0xF0, 0x51, 0x04
	.byte 0x99, 0xF0, 0x57, 0x04, 0x9B, 0xF0, 0x5D, 0x04, 0x9D, 0xF0, 0x63, 0x04, 0x9F, 0xF0, 0x69, 0x04
	.byte 0xA0, 0xF0, 0x6F, 0x04, 0xA2, 0xF0, 0x75, 0x04, 0xA4, 0xF0, 0x7B, 0x04, 0xA6, 0xF0, 0x81, 0x04
	.byte 0xA7, 0xF0, 0x87, 0x04, 0xA9, 0xF0, 0x8D, 0x04, 0xAB, 0xF0, 0x93, 0x04, 0xAD, 0xF0, 0x99, 0x04
	.byte 0xAF, 0xF0, 0x9F, 0x04, 0xB0, 0xF0, 0xA5, 0x04, 0xB2, 0xF0, 0xAB, 0x04, 0xB4, 0xF0, 0xB1, 0x04
	.byte 0xB6, 0xF0, 0xB7, 0x04, 0xB8, 0xF0, 0xBD, 0x04, 0xBA, 0xF0, 0xC3, 0x04, 0xBB, 0xF0, 0xC9, 0x04
	.byte 0xBD, 0xF0, 0xCF, 0x04, 0xBF, 0xF0, 0xD5, 0x04, 0xC1, 0xF0, 0xDB, 0x04, 0xC3, 0xF0, 0xE1, 0x04
	.byte 0xC5, 0xF0, 0xE7, 0x04, 0xC7, 0xF0, 0xED, 0x04, 0xC9, 0xF0, 0xF3, 0x04, 0xCB, 0xF0, 0xF9, 0x04
	.byte 0xCD, 0xF0, 0xFF, 0x04, 0xCF, 0xF0, 0x05, 0x05, 0xD1, 0xF0, 0x0B, 0x05, 0xD3, 0xF0, 0x11, 0x05
	.byte 0xD5, 0xF0, 0x17, 0x05, 0xD7, 0xF0, 0x1D, 0x05, 0xD9, 0xF0, 0x23, 0x05, 0xDB, 0xF0, 0x29, 0x05
	.byte 0xDD, 0xF0, 0x2F, 0x05, 0xDF, 0xF0, 0x34, 0x05, 0xE1, 0xF0, 0x3A, 0x05, 0xE3, 0xF0, 0x40, 0x05
	.byte 0xE5, 0xF0, 0x46, 0x05, 0xE7, 0xF0, 0x4C, 0x05, 0xE9, 0xF0, 0x52, 0x05, 0xEB, 0xF0, 0x58, 0x05
	.byte 0xED, 0xF0, 0x5E, 0x05, 0xEF, 0xF0, 0x64, 0x05, 0xF2, 0xF0, 0x6A, 0x05, 0xF4, 0xF0, 0x70, 0x05
	.byte 0xF6, 0xF0, 0x76, 0x05, 0xF8, 0xF0, 0x7C, 0x05, 0xFA, 0xF0, 0x81, 0x05, 0xFC, 0xF0, 0x87, 0x05
	.byte 0xFE, 0xF0, 0x8D, 0x05, 0x01, 0xF1, 0x93, 0x05, 0x03, 0xF1, 0x99, 0x05, 0x05, 0xF1, 0x9F, 0x05
	.byte 0x07, 0xF1, 0xA5, 0x05, 0x09, 0xF1, 0xAB, 0x05, 0x0C, 0xF1, 0xB1, 0x05, 0x0E, 0xF1, 0xB6, 0x05
	.byte 0x10, 0xF1, 0xBC, 0x05, 0x12, 0xF1, 0xC2, 0x05, 0x15, 0xF1, 0xC8, 0x05, 0x17, 0xF1, 0xCE, 0x05
	.byte 0x19, 0xF1, 0xD4, 0x05, 0x1C, 0xF1, 0xDA, 0x05, 0x1E, 0xF1, 0xDF, 0x05, 0x20, 0xF1, 0xE5, 0x05
	.byte 0x23, 0xF1, 0xEB, 0x05, 0x25, 0xF1, 0xF1, 0x05, 0x27, 0xF1, 0xF7, 0x05, 0x2A, 0xF1, 0xFD, 0x05
	.byte 0x2C, 0xF1, 0x02, 0x06, 0x2E, 0xF1, 0x08, 0x06, 0x31, 0xF1, 0x0E, 0x06, 0x33, 0xF1, 0x14, 0x06
	.byte 0x35, 0xF1, 0x1A, 0x06, 0x38, 0xF1, 0x1F, 0x06, 0x3A, 0xF1, 0x25, 0x06, 0x3D, 0xF1, 0x2B, 0x06
	.byte 0x3F, 0xF1, 0x31, 0x06, 0x41, 0xF1, 0x37, 0x06, 0x44, 0xF1, 0x3C, 0x06, 0x46, 0xF1, 0x42, 0x06
	.byte 0x49, 0xF1, 0x48, 0x06, 0x4B, 0xF1, 0x4E, 0x06, 0x4E, 0xF1, 0x54, 0x06, 0x50, 0xF1, 0x59, 0x06
	.byte 0x53, 0xF1, 0x5F, 0x06, 0x55, 0xF1, 0x65, 0x06, 0x58, 0xF1, 0x6B, 0x06, 0x5A, 0xF1, 0x70, 0x06
	.byte 0x5D, 0xF1, 0x76, 0x06, 0x5F, 0xF1, 0x7C, 0x06, 0x62, 0xF1, 0x82, 0x06, 0x65, 0xF1, 0x87, 0x06
	.byte 0x67, 0xF1, 0x8D, 0x06, 0x6A, 0xF1, 0x93, 0x06, 0x6C, 0xF1, 0x99, 0x06, 0x6F, 0xF1, 0x9E, 0x06
	.byte 0x71, 0xF1, 0xA4, 0x06, 0x74, 0xF1, 0xAA, 0x06, 0x77, 0xF1, 0xAF, 0x06, 0x79, 0xF1, 0xB5, 0x06
	.byte 0x7C, 0xF1, 0xBB, 0x06, 0x7F, 0xF1, 0xC1, 0x06, 0x81, 0xF1, 0xC6, 0x06, 0x84, 0xF1, 0xCC, 0x06
	.byte 0x87, 0xF1, 0xD2, 0x06, 0x89, 0xF1, 0xD7, 0x06, 0x8C, 0xF1, 0xDD, 0x06, 0x8F, 0xF1, 0xE3, 0x06
	.byte 0x91, 0xF1, 0xE8, 0x06, 0x94, 0xF1, 0xEE, 0x06, 0x97, 0xF1, 0xF4, 0x06, 0x9A, 0xF1, 0xF9, 0x06
	.byte 0x9C, 0xF1, 0xFF, 0x06, 0x9F, 0xF1, 0x05, 0x07, 0xA2, 0xF1, 0x0A, 0x07, 0xA5, 0xF1, 0x10, 0x07
	.byte 0xA7, 0xF1, 0x15, 0x07, 0xAA, 0xF1, 0x1B, 0x07, 0xAD, 0xF1, 0x21, 0x07, 0xB0, 0xF1, 0x26, 0x07
	.byte 0xB3, 0xF1, 0x2C, 0x07, 0xB5, 0xF1, 0x32, 0x07, 0xB8, 0xF1, 0x37, 0x07, 0xBB, 0xF1, 0x3D, 0x07
	.byte 0xBE, 0xF1, 0x42, 0x07, 0xC1, 0xF1, 0x48, 0x07, 0xC4, 0xF1, 0x4E, 0x07, 0xC6, 0xF1, 0x53, 0x07
	.byte 0xC9, 0xF1, 0x59, 0x07, 0xCC, 0xF1, 0x5E, 0x07, 0xCF, 0xF1, 0x64, 0x07, 0xD2, 0xF1, 0x6A, 0x07
	.byte 0xD5, 0xF1, 0x6F, 0x07, 0xD8, 0xF1, 0x75, 0x07, 0xDB, 0xF1, 0x7A, 0x07, 0xDE, 0xF1, 0x80, 0x07
	.byte 0xE1, 0xF1, 0x85, 0x07, 0xE4, 0xF1, 0x8B, 0x07, 0xE7, 0xF1, 0x90, 0x07, 0xEA, 0xF1, 0x96, 0x07
	.byte 0xED, 0xF1, 0x9B, 0x07, 0xF0, 0xF1, 0xA1, 0x07, 0xF3, 0xF1, 0xA6, 0x07, 0xF6, 0xF1, 0xAC, 0x07
	.byte 0xF9, 0xF1, 0xB2, 0x07, 0xFC, 0xF1, 0xB7, 0x07, 0xFF, 0xF1, 0xBD, 0x07, 0x02, 0xF2, 0xC2, 0x07
	.byte 0x05, 0xF2, 0xC8, 0x07, 0x08, 0xF2, 0xCD, 0x07, 0x0B, 0xF2, 0xD2, 0x07, 0x0E, 0xF2, 0xD8, 0x07
	.byte 0x11, 0xF2, 0xDD, 0x07, 0x14, 0xF2, 0xE3, 0x07, 0x17, 0xF2, 0xE8, 0x07, 0x1A, 0xF2, 0xEE, 0x07
	.byte 0x1D, 0xF2, 0xF3, 0x07, 0x21, 0xF2, 0xF9, 0x07, 0x24, 0xF2, 0xFE, 0x07, 0x27, 0xF2, 0x04, 0x08
	.byte 0x2A, 0xF2, 0x09, 0x08, 0x2D, 0xF2, 0x0E, 0x08, 0x30, 0xF2, 0x14, 0x08, 0x34, 0xF2, 0x19, 0x08
	.byte 0x37, 0xF2, 0x1F, 0x08, 0x3A, 0xF2, 0x24, 0x08, 0x3D, 0xF2, 0x2A, 0x08, 0x40, 0xF2, 0x2F, 0x08
	.byte 0x44, 0xF2, 0x34, 0x08, 0x47, 0xF2, 0x3A, 0x08, 0x4A, 0xF2, 0x3F, 0x08, 0x4D, 0xF2, 0x45, 0x08
	.byte 0x50, 0xF2, 0x4A, 0x08, 0x54, 0xF2, 0x4F, 0x08, 0x57, 0xF2, 0x55, 0x08, 0x5A, 0xF2, 0x5A, 0x08
	.byte 0x5E, 0xF2, 0x5F, 0x08, 0x61, 0xF2, 0x65, 0x08, 0x64, 0xF2, 0x6A, 0x08, 0x67, 0xF2, 0x6F, 0x08
	.byte 0x6B, 0xF2, 0x75, 0x08, 0x6E, 0xF2, 0x7A, 0x08, 0x71, 0xF2, 0x7F, 0x08, 0x75, 0xF2, 0x85, 0x08
	.byte 0x78, 0xF2, 0x8A, 0x08, 0x7B, 0xF2, 0x8F, 0x08, 0x7F, 0xF2, 0x95, 0x08, 0x82, 0xF2, 0x9A, 0x08
	.byte 0x86, 0xF2, 0x9F, 0x08, 0x89, 0xF2, 0xA5, 0x08, 0x8C, 0xF2, 0xAA, 0x08, 0x90, 0xF2, 0xAF, 0x08
	.byte 0x93, 0xF2, 0xB4, 0x08, 0x97, 0xF2, 0xBA, 0x08, 0x9A, 0xF2, 0xBF, 0x08, 0x9E, 0xF2, 0xC4, 0x08
	.byte 0xA1, 0xF2, 0xC9, 0x08, 0xA4, 0xF2, 0xCF, 0x08, 0xA8, 0xF2, 0xD4, 0x08, 0xAB, 0xF2, 0xD9, 0x08
	.byte 0xAF, 0xF2, 0xDE, 0x08, 0xB2, 0xF2, 0xE4, 0x08, 0xB6, 0xF2, 0xE9, 0x08, 0xB9, 0xF2, 0xEE, 0x08
	.byte 0xBD, 0xF2, 0xF3, 0x08, 0xC0, 0xF2, 0xF8, 0x08, 0xC4, 0xF2, 0xFE, 0x08, 0xC7, 0xF2, 0x03, 0x09
	.byte 0xCB, 0xF2, 0x08, 0x09, 0xCE, 0xF2, 0x0D, 0x09, 0xD2, 0xF2, 0x12, 0x09, 0xD6, 0xF2, 0x18, 0x09
	.byte 0xD9, 0xF2, 0x1D, 0x09, 0xDD, 0xF2, 0x22, 0x09, 0xE0, 0xF2, 0x27, 0x09, 0xE4, 0xF2, 0x2C, 0x09
	.byte 0xE8, 0xF2, 0x31, 0x09, 0xEB, 0xF2, 0x37, 0x09, 0xEF, 0xF2, 0x3C, 0x09, 0xF2, 0xF2, 0x41, 0x09
	.byte 0xF6, 0xF2, 0x46, 0x09, 0xFA, 0xF2, 0x4B, 0x09, 0xFD, 0xF2, 0x50, 0x09, 0x01, 0xF3, 0x55, 0x09
	.byte 0x05, 0xF3, 0x5A, 0x09, 0x08, 0xF3, 0x5F, 0x09, 0x0C, 0xF3, 0x65, 0x09, 0x10, 0xF3, 0x6A, 0x09
	.byte 0x13, 0xF3, 0x6F, 0x09, 0x17, 0xF3, 0x74, 0x09, 0x1B, 0xF3, 0x79, 0x09, 0x1F, 0xF3, 0x7E, 0x09
	.byte 0x22, 0xF3, 0x83, 0x09, 0x26, 0xF3, 0x88, 0x09, 0x2A, 0xF3, 0x8D, 0x09, 0x2E, 0xF3, 0x92, 0x09
	.byte 0x31, 0xF3, 0x97, 0x09, 0x35, 0xF3, 0x9C, 0x09, 0x39, 0xF3, 0xA1, 0x09, 0x3D, 0xF3, 0xA6, 0x09
	.byte 0x40, 0xF3, 0xAB, 0x09, 0x44, 0xF3, 0xB0, 0x09, 0x48, 0xF3, 0xB5, 0x09, 0x4C, 0xF3, 0xBA, 0x09
	.byte 0x50, 0xF3, 0xBF, 0x09, 0x54, 0xF3, 0xC4, 0x09, 0x57, 0xF3, 0xC9, 0x09, 0x5B, 0xF3, 0xCE, 0x09
	.byte 0x5F, 0xF3, 0xD3, 0x09, 0x63, 0xF3, 0xD8, 0x09, 0x67, 0xF3, 0xDD, 0x09, 0x6B, 0xF3, 0xE2, 0x09
	.byte 0x6F, 0xF3, 0xE7, 0x09, 0x72, 0xF3, 0xEC, 0x09, 0x76, 0xF3, 0xF1, 0x09, 0x7A, 0xF3, 0xF6, 0x09
	.byte 0x7E, 0xF3, 0xFB, 0x09, 0x82, 0xF3, 0xFF, 0x09, 0x86, 0xF3, 0x04, 0x0A, 0x8A, 0xF3, 0x09, 0x0A
	.byte 0x8E, 0xF3, 0x0E, 0x0A, 0x92, 0xF3, 0x13, 0x0A, 0x96, 0xF3, 0x18, 0x0A, 0x9A, 0xF3, 0x1D, 0x0A
	.byte 0x9E, 0xF3, 0x22, 0x0A, 0xA2, 0xF3, 0x26, 0x0A, 0xA6, 0xF3, 0x2B, 0x0A, 0xAA, 0xF3, 0x30, 0x0A
	.byte 0xAE, 0xF3, 0x35, 0x0A, 0xB2, 0xF3, 0x3A, 0x0A, 0xB6, 0xF3, 0x3F, 0x0A, 0xBA, 0xF3, 0x44, 0x0A
	.byte 0xBE, 0xF3, 0x48, 0x0A, 0xC2, 0xF3, 0x4D, 0x0A, 0xC6, 0xF3, 0x52, 0x0A, 0xCA, 0xF3, 0x57, 0x0A
	.byte 0xCE, 0xF3, 0x5C, 0x0A, 0xD2, 0xF3, 0x60, 0x0A, 0xD6, 0xF3, 0x65, 0x0A, 0xDA, 0xF3, 0x6A, 0x0A
	.byte 0xDE, 0xF3, 0x6F, 0x0A, 0xE2, 0xF3, 0x73, 0x0A, 0xE7, 0xF3, 0x78, 0x0A, 0xEB, 0xF3, 0x7D, 0x0A
	.byte 0xEF, 0xF3, 0x82, 0x0A, 0xF3, 0xF3, 0x86, 0x0A, 0xF7, 0xF3, 0x8B, 0x0A, 0xFB, 0xF3, 0x90, 0x0A
	.byte 0xFF, 0xF3, 0x95, 0x0A, 0x04, 0xF4, 0x99, 0x0A, 0x08, 0xF4, 0x9E, 0x0A, 0x0C, 0xF4, 0xA3, 0x0A
	.byte 0x10, 0xF4, 0xA7, 0x0A, 0x14, 0xF4, 0xAC, 0x0A, 0x18, 0xF4, 0xB1, 0x0A, 0x1D, 0xF4, 0xB5, 0x0A
	.byte 0x21, 0xF4, 0xBA, 0x0A, 0x25, 0xF4, 0xBF, 0x0A, 0x29, 0xF4, 0xC3, 0x0A, 0x2E, 0xF4, 0xC8, 0x0A
	.byte 0x32, 0xF4, 0xCD, 0x0A, 0x36, 0xF4, 0xD1, 0x0A, 0x3A, 0xF4, 0xD6, 0x0A, 0x3F, 0xF4, 0xDB, 0x0A
	.byte 0x43, 0xF4, 0xDF, 0x0A, 0x47, 0xF4, 0xE4, 0x0A, 0x4B, 0xF4, 0xE8, 0x0A, 0x50, 0xF4, 0xED, 0x0A
	.byte 0x54, 0xF4, 0xF2, 0x0A, 0x58, 0xF4, 0xF6, 0x0A, 0x5D, 0xF4, 0xFB, 0x0A, 0x61, 0xF4, 0xFF, 0x0A
	.byte 0x65, 0xF4, 0x04, 0x0B, 0x69, 0xF4, 0x08, 0x0B, 0x6E, 0xF4, 0x0D, 0x0B, 0x72, 0xF4, 0x11, 0x0B
	.byte 0x77, 0xF4, 0x16, 0x0B, 0x7B, 0xF4, 0x1B, 0x0B, 0x7F, 0xF4, 0x1F, 0x0B, 0x84, 0xF4, 0x24, 0x0B
	.byte 0x88, 0xF4, 0x28, 0x0B, 0x8C, 0xF4, 0x2D, 0x0B, 0x91, 0xF4, 0x31, 0x0B, 0x95, 0xF4, 0x36, 0x0B
	.byte 0x9A, 0xF4, 0x3A, 0x0B, 0x9E, 0xF4, 0x3E, 0x0B, 0xA2, 0xF4, 0x43, 0x0B, 0xA7, 0xF4, 0x47, 0x0B
	.byte 0xAB, 0xF4, 0x4C, 0x0B, 0xB0, 0xF4, 0x50, 0x0B, 0xB4, 0xF4, 0x55, 0x0B, 0xB9, 0xF4, 0x59, 0x0B
	.byte 0xBD, 0xF4, 0x5E, 0x0B, 0xC2, 0xF4, 0x62, 0x0B, 0xC6, 0xF4, 0x66, 0x0B, 0xCA, 0xF4, 0x6B, 0x0B
	.byte 0xCF, 0xF4, 0x6F, 0x0B, 0xD3, 0xF4, 0x74, 0x0B, 0xD8, 0xF4, 0x78, 0x0B, 0xDC, 0xF4, 0x7C, 0x0B
	.byte 0xE1, 0xF4, 0x81, 0x0B, 0xE5, 0xF4, 0x85, 0x0B, 0xEA, 0xF4, 0x89, 0x0B, 0xEF, 0xF4, 0x8E, 0x0B
	.byte 0xF3, 0xF4, 0x92, 0x0B, 0xF8, 0xF4, 0x97, 0x0B, 0xFC, 0xF4, 0x9B, 0x0B, 0x01, 0xF5, 0x9F, 0x0B
	.byte 0x05, 0xF5, 0xA3, 0x0B, 0x0A, 0xF5, 0xA8, 0x0B, 0x0E, 0xF5, 0xAC, 0x0B, 0x13, 0xF5, 0xB0, 0x0B
	.byte 0x18, 0xF5, 0xB5, 0x0B, 0x1C, 0xF5, 0xB9, 0x0B, 0x21, 0xF5, 0xBD, 0x0B, 0x25, 0xF5, 0xC1, 0x0B
	.byte 0x2A, 0xF5, 0xC6, 0x0B, 0x2F, 0xF5, 0xCA, 0x0B, 0x33, 0xF5, 0xCE, 0x0B, 0x38, 0xF5, 0xD2, 0x0B
	.byte 0x3D, 0xF5, 0xD7, 0x0B, 0x41, 0xF5, 0xDB, 0x0B, 0x46, 0xF5, 0xDF, 0x0B, 0x4B, 0xF5, 0xE3, 0x0B
	.byte 0x4F, 0xF5, 0xE8, 0x0B, 0x54, 0xF5, 0xEC, 0x0B, 0x59, 0xF5, 0xF0, 0x0B, 0x5D, 0xF5, 0xF4, 0x0B
	.byte 0x62, 0xF5, 0xF8, 0x0B, 0x67, 0xF5, 0xFC, 0x0B, 0x6B, 0xF5, 0x01, 0x0C, 0x70, 0xF5, 0x05, 0x0C
	.byte 0x75, 0xF5, 0x09, 0x0C, 0x7A, 0xF5, 0x0D, 0x0C, 0x7E, 0xF5, 0x11, 0x0C, 0x83, 0xF5, 0x15, 0x0C
	.byte 0x88, 0xF5, 0x19, 0x0C, 0x8D, 0xF5, 0x1E, 0x0C, 0x91, 0xF5, 0x22, 0x0C, 0x96, 0xF5, 0x26, 0x0C
	.byte 0x9B, 0xF5, 0x2A, 0x0C, 0xA0, 0xF5, 0x2E, 0x0C, 0xA4, 0xF5, 0x32, 0x0C, 0xA9, 0xF5, 0x36, 0x0C
	.byte 0xAE, 0xF5, 0x3A, 0x0C, 0xB3, 0xF5, 0x3E, 0x0C, 0xB8, 0xF5, 0x42, 0x0C, 0xBC, 0xF5, 0x46, 0x0C
	.byte 0xC1, 0xF5, 0x4A, 0x0C, 0xC6, 0xF5, 0x4E, 0x0C, 0xCB, 0xF5, 0x52, 0x0C, 0xD0, 0xF5, 0x56, 0x0C
	.byte 0xD5, 0xF5, 0x5A, 0x0C, 0xDA, 0xF5, 0x5E, 0x0C, 0xDE, 0xF5, 0x62, 0x0C, 0xE3, 0xF5, 0x66, 0x0C
	.byte 0xE8, 0xF5, 0x6A, 0x0C, 0xED, 0xF5, 0x6E, 0x0C, 0xF2, 0xF5, 0x72, 0x0C, 0xF7, 0xF5, 0x76, 0x0C
	.byte 0xFC, 0xF5, 0x7A, 0x0C, 0x01, 0xF6, 0x7E, 0x0C, 0x05, 0xF6, 0x82, 0x0C, 0x0A, 0xF6, 0x86, 0x0C
	.byte 0x0F, 0xF6, 0x8A, 0x0C, 0x14, 0xF6, 0x8E, 0x0C, 0x19, 0xF6, 0x91, 0x0C, 0x1E, 0xF6, 0x95, 0x0C
	.byte 0x23, 0xF6, 0x99, 0x0C, 0x28, 0xF6, 0x9D, 0x0C, 0x2D, 0xF6, 0xA1, 0x0C, 0x32, 0xF6, 0xA5, 0x0C
	.byte 0x37, 0xF6, 0xA9, 0x0C, 0x3C, 0xF6, 0xAC, 0x0C, 0x41, 0xF6, 0xB0, 0x0C, 0x46, 0xF6, 0xB4, 0x0C
	.byte 0x4B, 0xF6, 0xB8, 0x0C, 0x50, 0xF6, 0xBC, 0x0C, 0x55, 0xF6, 0xC0, 0x0C, 0x5A, 0xF6, 0xC3, 0x0C
	.byte 0x5F, 0xF6, 0xC7, 0x0C, 0x64, 0xF6, 0xCB, 0x0C, 0x69, 0xF6, 0xCF, 0x0C, 0x6E, 0xF6, 0xD2, 0x0C
	.byte 0x73, 0xF6, 0xD6, 0x0C, 0x78, 0xF6, 0xDA, 0x0C, 0x7D, 0xF6, 0xDE, 0x0C, 0x82, 0xF6, 0xE1, 0x0C
	.byte 0x87, 0xF6, 0xE5, 0x0C, 0x8C, 0xF6, 0xE9, 0x0C, 0x91, 0xF6, 0xED, 0x0C, 0x96, 0xF6, 0xF0, 0x0C
	.byte 0x9B, 0xF6, 0xF4, 0x0C, 0xA1, 0xF6, 0xF8, 0x0C, 0xA6, 0xF6, 0xFB, 0x0C, 0xAB, 0xF6, 0xFF, 0x0C
	.byte 0xB0, 0xF6, 0x03, 0x0D, 0xB5, 0xF6, 0x06, 0x0D, 0xBA, 0xF6, 0x0A, 0x0D, 0xBF, 0xF6, 0x0E, 0x0D
	.byte 0xC4, 0xF6, 0x11, 0x0D, 0xC9, 0xF6, 0x15, 0x0D, 0xCF, 0xF6, 0x18, 0x0D, 0xD4, 0xF6, 0x1C, 0x0D
	.byte 0xD9, 0xF6, 0x20, 0x0D, 0xDE, 0xF6, 0x23, 0x0D, 0xE3, 0xF6, 0x27, 0x0D, 0xE8, 0xF6, 0x2A, 0x0D
	.byte 0xEE, 0xF6, 0x2E, 0x0D, 0xF3, 0xF6, 0x32, 0x0D, 0xF8, 0xF6, 0x35, 0x0D, 0xFD, 0xF6, 0x39, 0x0D
	.byte 0x02, 0xF7, 0x3C, 0x0D, 0x08, 0xF7, 0x40, 0x0D, 0x0D, 0xF7, 0x43, 0x0D, 0x12, 0xF7, 0x47, 0x0D
	.byte 0x17, 0xF7, 0x4A, 0x0D, 0x1C, 0xF7, 0x4E, 0x0D, 0x22, 0xF7, 0x51, 0x0D, 0x27, 0xF7, 0x55, 0x0D
	.byte 0x2C, 0xF7, 0x58, 0x0D, 0x31, 0xF7, 0x5C, 0x0D, 0x37, 0xF7, 0x5F, 0x0D, 0x3C, 0xF7, 0x62, 0x0D
	.byte 0x41, 0xF7, 0x66, 0x0D, 0x46, 0xF7, 0x69, 0x0D, 0x4C, 0xF7, 0x6D, 0x0D, 0x51, 0xF7, 0x70, 0x0D
	.byte 0x56, 0xF7, 0x74, 0x0D, 0x5B, 0xF7, 0x77, 0x0D, 0x61, 0xF7, 0x7A, 0x0D, 0x66, 0xF7, 0x7E, 0x0D
	.byte 0x6B, 0xF7, 0x81, 0x0D, 0x71, 0xF7, 0x85, 0x0D, 0x76, 0xF7, 0x88, 0x0D, 0x7B, 0xF7, 0x8B, 0x0D
	.byte 0x81, 0xF7, 0x8F, 0x0D, 0x86, 0xF7, 0x92, 0x0D, 0x8B, 0xF7, 0x95, 0x0D, 0x91, 0xF7, 0x99, 0x0D
	.byte 0x96, 0xF7, 0x9C, 0x0D, 0x9B, 0xF7, 0x9F, 0x0D, 0xA1, 0xF7, 0xA2, 0x0D, 0xA6, 0xF7, 0xA6, 0x0D
	.byte 0xAB, 0xF7, 0xA9, 0x0D, 0xB1, 0xF7, 0xAC, 0x0D, 0xB6, 0xF7, 0xB0, 0x0D, 0xBB, 0xF7, 0xB3, 0x0D
	.byte 0xC1, 0xF7, 0xB6, 0x0D, 0xC6, 0xF7, 0xB9, 0x0D, 0xCC, 0xF7, 0xBC, 0x0D, 0xD1, 0xF7, 0xC0, 0x0D
	.byte 0xD6, 0xF7, 0xC3, 0x0D, 0xDC, 0xF7, 0xC6, 0x0D, 0xE1, 0xF7, 0xC9, 0x0D, 0xE7, 0xF7, 0xCC, 0x0D
	.byte 0xEC, 0xF7, 0xD0, 0x0D, 0xF2, 0xF7, 0xD3, 0x0D, 0xF7, 0xF7, 0xD6, 0x0D, 0xFC, 0xF7, 0xD9, 0x0D
	.byte 0x02, 0xF8, 0xDC, 0x0D, 0x07, 0xF8, 0xDF, 0x0D, 0x0D, 0xF8, 0xE3, 0x0D, 0x12, 0xF8, 0xE6, 0x0D
	.byte 0x18, 0xF8, 0xE9, 0x0D, 0x1D, 0xF8, 0xEC, 0x0D, 0x23, 0xF8, 0xEF, 0x0D, 0x28, 0xF8, 0xF2, 0x0D
	.byte 0x2E, 0xF8, 0xF5, 0x0D, 0x33, 0xF8, 0xF8, 0x0D, 0x38, 0xF8, 0xFB, 0x0D, 0x3E, 0xF8, 0xFE, 0x0D
	.byte 0x43, 0xF8, 0x01, 0x0E, 0x49, 0xF8, 0x04, 0x0E, 0x4E, 0xF8, 0x07, 0x0E, 0x54, 0xF8, 0x0A, 0x0E
	.byte 0x5A, 0xF8, 0x0D, 0x0E, 0x5F, 0xF8, 0x10, 0x0E, 0x65, 0xF8, 0x13, 0x0E, 0x6A, 0xF8, 0x16, 0x0E
	.byte 0x70, 0xF8, 0x19, 0x0E, 0x75, 0xF8, 0x1C, 0x0E, 0x7B, 0xF8, 0x1F, 0x0E, 0x80, 0xF8, 0x22, 0x0E
	.byte 0x86, 0xF8, 0x25, 0x0E, 0x8B, 0xF8, 0x28, 0x0E, 0x91, 0xF8, 0x2B, 0x0E, 0x96, 0xF8, 0x2E, 0x0E
	.byte 0x9C, 0xF8, 0x31, 0x0E, 0xA2, 0xF8, 0x34, 0x0E, 0xA7, 0xF8, 0x37, 0x0E, 0xAD, 0xF8, 0x3A, 0x0E
	.byte 0xB2, 0xF8, 0x3C, 0x0E, 0xB8, 0xF8, 0x3F, 0x0E, 0xBE, 0xF8, 0x42, 0x0E, 0xC3, 0xF8, 0x45, 0x0E
	.byte 0xC9, 0xF8, 0x48, 0x0E, 0xCE, 0xF8, 0x4B, 0x0E, 0xD4, 0xF8, 0x4D, 0x0E, 0xDA, 0xF8, 0x50, 0x0E
	.byte 0xDF, 0xF8, 0x53, 0x0E, 0xE5, 0xF8, 0x56, 0x0E, 0xEB, 0xF8, 0x59, 0x0E, 0xF0, 0xF8, 0x5B, 0x0E
	.byte 0xF6, 0xF8, 0x5E, 0x0E, 0xFB, 0xF8, 0x61, 0x0E, 0x01, 0xF9, 0x64, 0x0E, 0x07, 0xF9, 0x66, 0x0E
	.byte 0x0C, 0xF9, 0x69, 0x0E, 0x12, 0xF9, 0x6C, 0x0E, 0x18, 0xF9, 0x6F, 0x0E, 0x1D, 0xF9, 0x71, 0x0E
	.byte 0x23, 0xF9, 0x74, 0x0E, 0x29, 0xF9, 0x77, 0x0E, 0x2E, 0xF9, 0x79, 0x0E, 0x34, 0xF9, 0x7C, 0x0E
	.byte 0x3A, 0xF9, 0x7F, 0x0E, 0x3F, 0xF9, 0x81, 0x0E, 0x45, 0xF9, 0x84, 0x0E, 0x4B, 0xF9, 0x87, 0x0E
	.byte 0x51, 0xF9, 0x89, 0x0E, 0x56, 0xF9, 0x8C, 0x0E, 0x5C, 0xF9, 0x8F, 0x0E, 0x62, 0xF9, 0x91, 0x0E
	.byte 0x67, 0xF9, 0x94, 0x0E, 0x6D, 0xF9, 0x96, 0x0E, 0x73, 0xF9, 0x99, 0x0E, 0x79, 0xF9, 0x9B, 0x0E
	.byte 0x7E, 0xF9, 0x9E, 0x0E, 0x84, 0xF9, 0xA1, 0x0E, 0x8A, 0xF9, 0xA3, 0x0E, 0x90, 0xF9, 0xA6, 0x0E
	.byte 0x95, 0xF9, 0xA8, 0x0E, 0x9B, 0xF9, 0xAB, 0x0E, 0xA1, 0xF9, 0xAD, 0x0E, 0xA7, 0xF9, 0xB0, 0x0E
	.byte 0xAC, 0xF9, 0xB2, 0x0E, 0xB2, 0xF9, 0xB5, 0x0E, 0xB8, 0xF9, 0xB7, 0x0E, 0xBE, 0xF9, 0xBA, 0x0E
	.byte 0xC4, 0xF9, 0xBC, 0x0E, 0xC9, 0xF9, 0xBF, 0x0E, 0xCF, 0xF9, 0xC1, 0x0E, 0xD5, 0xF9, 0xC3, 0x0E
	.byte 0xDB, 0xF9, 0xC6, 0x0E, 0xE1, 0xF9, 0xC8, 0x0E, 0xE6, 0xF9, 0xCB, 0x0E, 0xEC, 0xF9, 0xCD, 0x0E
	.byte 0xF2, 0xF9, 0xCF, 0x0E, 0xF8, 0xF9, 0xD2, 0x0E, 0xFE, 0xF9, 0xD4, 0x0E, 0x03, 0xFA, 0xD6, 0x0E
	.byte 0x09, 0xFA, 0xD9, 0x0E, 0x0F, 0xFA, 0xDB, 0x0E, 0x15, 0xFA, 0xDD, 0x0E, 0x1B, 0xFA, 0xE0, 0x0E
	.byte 0x21, 0xFA, 0xE2, 0x0E, 0x26, 0xFA, 0xE4, 0x0E, 0x2C, 0xFA, 0xE7, 0x0E, 0x32, 0xFA, 0xE9, 0x0E
	.byte 0x38, 0xFA, 0xEB, 0x0E, 0x3E, 0xFA, 0xEE, 0x0E, 0x44, 0xFA, 0xF0, 0x0E, 0x4A, 0xFA, 0xF2, 0x0E
	.byte 0x4F, 0xFA, 0xF4, 0x0E, 0x55, 0xFA, 0xF7, 0x0E, 0x5B, 0xFA, 0xF9, 0x0E, 0x61, 0xFA, 0xFB, 0x0E
	.byte 0x67, 0xFA, 0xFD, 0x0E, 0x6D, 0xFA, 0xFF, 0x0E, 0x73, 0xFA, 0x02, 0x0F, 0x79, 0xFA, 0x04, 0x0F
	.byte 0x7F, 0xFA, 0x06, 0x0F, 0x84, 0xFA, 0x08, 0x0F, 0x8A, 0xFA, 0x0A, 0x0F, 0x90, 0xFA, 0x0C, 0x0F
	.byte 0x96, 0xFA, 0x0E, 0x0F, 0x9C, 0xFA, 0x11, 0x0F, 0xA2, 0xFA, 0x13, 0x0F, 0xA8, 0xFA, 0x15, 0x0F
	.byte 0xAE, 0xFA, 0x17, 0x0F, 0xB4, 0xFA, 0x19, 0x0F, 0xBA, 0xFA, 0x1B, 0x0F, 0xC0, 0xFA, 0x1D, 0x0F
	.byte 0xC6, 0xFA, 0x1F, 0x0F, 0xCC, 0xFA, 0x21, 0x0F, 0xD1, 0xFA, 0x23, 0x0F, 0xD7, 0xFA, 0x25, 0x0F
	.byte 0xDD, 0xFA, 0x27, 0x0F, 0xE3, 0xFA, 0x29, 0x0F, 0xE9, 0xFA, 0x2B, 0x0F, 0xEF, 0xFA, 0x2D, 0x0F
	.byte 0xF5, 0xFA, 0x2F, 0x0F, 0xFB, 0xFA, 0x31, 0x0F, 0x01, 0xFB, 0x33, 0x0F, 0x07, 0xFB, 0x35, 0x0F
	.byte 0x0D, 0xFB, 0x37, 0x0F, 0x13, 0xFB, 0x39, 0x0F, 0x19, 0xFB, 0x3B, 0x0F, 0x1F, 0xFB, 0x3D, 0x0F
	.byte 0x25, 0xFB, 0x3F, 0x0F, 0x2B, 0xFB, 0x41, 0x0F, 0x31, 0xFB, 0x43, 0x0F, 0x37, 0xFB, 0x45, 0x0F
	.byte 0x3D, 0xFB, 0x46, 0x0F, 0x43, 0xFB, 0x48, 0x0F, 0x49, 0xFB, 0x4A, 0x0F, 0x4F, 0xFB, 0x4C, 0x0F
	.byte 0x55, 0xFB, 0x4E, 0x0F, 0x5B, 0xFB, 0x50, 0x0F, 0x61, 0xFB, 0x51, 0x0F, 0x67, 0xFB, 0x53, 0x0F
	.byte 0x6D, 0xFB, 0x55, 0x0F, 0x73, 0xFB, 0x57, 0x0F, 0x79, 0xFB, 0x59, 0x0F, 0x7F, 0xFB, 0x5A, 0x0F
	.byte 0x85, 0xFB, 0x5C, 0x0F, 0x8B, 0xFB, 0x5E, 0x0F, 0x91, 0xFB, 0x60, 0x0F, 0x97, 0xFB, 0x61, 0x0F
	.byte 0x9D, 0xFB, 0x63, 0x0F, 0xA3, 0xFB, 0x65, 0x0F, 0xA9, 0xFB, 0x67, 0x0F, 0xAF, 0xFB, 0x68, 0x0F
	.byte 0xB5, 0xFB, 0x6A, 0x0F, 0xBC, 0xFB, 0x6C, 0x0F, 0xC2, 0xFB, 0x6D, 0x0F, 0xC8, 0xFB, 0x6F, 0x0F
	.byte 0xCE, 0xFB, 0x71, 0x0F, 0xD4, 0xFB, 0x72, 0x0F, 0xDA, 0xFB, 0x74, 0x0F, 0xE0, 0xFB, 0x76, 0x0F
	.byte 0xE6, 0xFB, 0x77, 0x0F, 0xEC, 0xFB, 0x79, 0x0F, 0xF2, 0xFB, 0x7A, 0x0F, 0xF8, 0xFB, 0x7C, 0x0F
	.byte 0xFE, 0xFB, 0x7D, 0x0F, 0x04, 0xFC, 0x7F, 0x0F, 0x0A, 0xFC, 0x81, 0x0F, 0x11, 0xFC, 0x82, 0x0F
	.byte 0x17, 0xFC, 0x84, 0x0F, 0x1D, 0xFC, 0x85, 0x0F, 0x23, 0xFC, 0x87, 0x0F, 0x29, 0xFC, 0x88, 0x0F
	.byte 0x2F, 0xFC, 0x8A, 0x0F, 0x35, 0xFC, 0x8B, 0x0F, 0x3B, 0xFC, 0x8D, 0x0F, 0x41, 0xFC, 0x8E, 0x0F
	.byte 0x47, 0xFC, 0x90, 0x0F, 0x4E, 0xFC, 0x91, 0x0F, 0x54, 0xFC, 0x93, 0x0F, 0x5A, 0xFC, 0x94, 0x0F
	.byte 0x60, 0xFC, 0x95, 0x0F, 0x66, 0xFC, 0x97, 0x0F, 0x6C, 0xFC, 0x98, 0x0F, 0x72, 0xFC, 0x9A, 0x0F
	.byte 0x78, 0xFC, 0x9B, 0x0F, 0x7F, 0xFC, 0x9C, 0x0F, 0x85, 0xFC, 0x9E, 0x0F, 0x8B, 0xFC, 0x9F, 0x0F
	.byte 0x91, 0xFC, 0xA1, 0x0F, 0x97, 0xFC, 0xA2, 0x0F, 0x9D, 0xFC, 0xA3, 0x0F, 0xA3, 0xFC, 0xA5, 0x0F
	.byte 0xAA, 0xFC, 0xA6, 0x0F, 0xB0, 0xFC, 0xA7, 0x0F, 0xB6, 0xFC, 0xA8, 0x0F, 0xBC, 0xFC, 0xAA, 0x0F
	.byte 0xC2, 0xFC, 0xAB, 0x0F, 0xC8, 0xFC, 0xAC, 0x0F, 0xCE, 0xFC, 0xAE, 0x0F, 0xD5, 0xFC, 0xAF, 0x0F
	.byte 0xDB, 0xFC, 0xB0, 0x0F, 0xE1, 0xFC, 0xB1, 0x0F, 0xE7, 0xFC, 0xB3, 0x0F, 0xED, 0xFC, 0xB4, 0x0F
	.byte 0xF3, 0xFC, 0xB5, 0x0F, 0xFA, 0xFC, 0xB6, 0x0F, 0x00, 0xFD, 0xB7, 0x0F, 0x06, 0xFD, 0xB8, 0x0F
	.byte 0x0C, 0xFD, 0xBA, 0x0F, 0x12, 0xFD, 0xBB, 0x0F, 0x18, 0xFD, 0xBC, 0x0F, 0x1F, 0xFD, 0xBD, 0x0F
	.byte 0x25, 0xFD, 0xBE, 0x0F, 0x2B, 0xFD, 0xBF, 0x0F, 0x31, 0xFD, 0xC0, 0x0F, 0x37, 0xFD, 0xC2, 0x0F
	.byte 0x3E, 0xFD, 0xC3, 0x0F, 0x44, 0xFD, 0xC4, 0x0F, 0x4A, 0xFD, 0xC5, 0x0F, 0x50, 0xFD, 0xC6, 0x0F
	.byte 0x56, 0xFD, 0xC7, 0x0F, 0x5D, 0xFD, 0xC8, 0x0F, 0x63, 0xFD, 0xC9, 0x0F, 0x69, 0xFD, 0xCA, 0x0F
	.byte 0x6F, 0xFD, 0xCB, 0x0F, 0x75, 0xFD, 0xCC, 0x0F, 0x7C, 0xFD, 0xCD, 0x0F, 0x82, 0xFD, 0xCE, 0x0F
	.byte 0x88, 0xFD, 0xCF, 0x0F, 0x8E, 0xFD, 0xD0, 0x0F, 0x94, 0xFD, 0xD1, 0x0F, 0x9B, 0xFD, 0xD2, 0x0F
	.byte 0xA1, 0xFD, 0xD3, 0x0F, 0xA7, 0xFD, 0xD4, 0x0F, 0xAD, 0xFD, 0xD5, 0x0F, 0xB3, 0xFD, 0xD5, 0x0F
	.byte 0xBA, 0xFD, 0xD6, 0x0F, 0xC0, 0xFD, 0xD7, 0x0F, 0xC6, 0xFD, 0xD8, 0x0F, 0xCC, 0xFD, 0xD9, 0x0F
	.byte 0xD3, 0xFD, 0xDA, 0x0F, 0xD9, 0xFD, 0xDB, 0x0F, 0xDF, 0xFD, 0xDC, 0x0F, 0xE5, 0xFD, 0xDC, 0x0F
	.byte 0xEB, 0xFD, 0xDD, 0x0F, 0xF2, 0xFD, 0xDE, 0x0F, 0xF8, 0xFD, 0xDF, 0x0F, 0xFE, 0xFD, 0xE0, 0x0F
	.byte 0x04, 0xFE, 0xE0, 0x0F, 0x0B, 0xFE, 0xE1, 0x0F, 0x11, 0xFE, 0xE2, 0x0F, 0x17, 0xFE, 0xE3, 0x0F
	.byte 0x1D, 0xFE, 0xE3, 0x0F, 0x24, 0xFE, 0xE4, 0x0F, 0x2A, 0xFE, 0xE5, 0x0F, 0x30, 0xFE, 0xE6, 0x0F
	.byte 0x36, 0xFE, 0xE6, 0x0F, 0x3D, 0xFE, 0xE7, 0x0F, 0x43, 0xFE, 0xE8, 0x0F, 0x49, 0xFE, 0xE8, 0x0F
	.byte 0x4F, 0xFE, 0xE9, 0x0F, 0x56, 0xFE, 0xEA, 0x0F, 0x5C, 0xFE, 0xEA, 0x0F, 0x62, 0xFE, 0xEB, 0x0F
	.byte 0x68, 0xFE, 0xEC, 0x0F, 0x6F, 0xFE, 0xEC, 0x0F, 0x75, 0xFE, 0xED, 0x0F, 0x7B, 0xFE, 0xED, 0x0F
	.byte 0x81, 0xFE, 0xEE, 0x0F, 0x88, 0xFE, 0xEF, 0x0F, 0x8E, 0xFE, 0xEF, 0x0F, 0x94, 0xFE, 0xF0, 0x0F
	.byte 0x9A, 0xFE, 0xF0, 0x0F, 0xA1, 0xFE, 0xF1, 0x0F, 0xA7, 0xFE, 0xF1, 0x0F, 0xAD, 0xFE, 0xF2, 0x0F
	.byte 0xB3, 0xFE, 0xF2, 0x0F, 0xBA, 0xFE, 0xF3, 0x0F, 0xC0, 0xFE, 0xF3, 0x0F, 0xC6, 0xFE, 0xF4, 0x0F
	.byte 0xCC, 0xFE, 0xF4, 0x0F, 0xD3, 0xFE, 0xF5, 0x0F, 0xD9, 0xFE, 0xF5, 0x0F, 0xDF, 0xFE, 0xF6, 0x0F
	.byte 0xE5, 0xFE, 0xF6, 0x0F, 0xEC, 0xFE, 0xF7, 0x0F, 0xF2, 0xFE, 0xF7, 0x0F, 0xF8, 0xFE, 0xF8, 0x0F
	.byte 0xFF, 0xFE, 0xF8, 0x0F, 0x05, 0xFF, 0xF8, 0x0F, 0x0B, 0xFF, 0xF9, 0x0F, 0x11, 0xFF, 0xF9, 0x0F
	.byte 0x18, 0xFF, 0xF9, 0x0F, 0x1E, 0xFF, 0xFA, 0x0F, 0x24, 0xFF, 0xFA, 0x0F, 0x2A, 0xFF, 0xFA, 0x0F
	.byte 0x31, 0xFF, 0xFB, 0x0F, 0x37, 0xFF, 0xFB, 0x0F, 0x3D, 0xFF, 0xFB, 0x0F, 0x44, 0xFF, 0xFC, 0x0F
	.byte 0x4A, 0xFF, 0xFC, 0x0F, 0x50, 0xFF, 0xFC, 0x0F, 0x56, 0xFF, 0xFC, 0x0F, 0x5D, 0xFF, 0xFD, 0x0F
	.byte 0x63, 0xFF, 0xFD, 0x0F, 0x69, 0xFF, 0xFD, 0x0F, 0x70, 0xFF, 0xFD, 0x0F, 0x76, 0xFF, 0xFE, 0x0F
	.byte 0x7C, 0xFF, 0xFE, 0x0F, 0x82, 0xFF, 0xFE, 0x0F, 0x89, 0xFF, 0xFE, 0x0F, 0x8F, 0xFF, 0xFE, 0x0F
	.byte 0x95, 0xFF, 0xFF, 0x0F, 0x9B, 0xFF, 0xFF, 0x0F, 0xA2, 0xFF, 0xFF, 0x0F, 0xA8, 0xFF, 0xFF, 0x0F
	.byte 0xAE, 0xFF, 0xFF, 0x0F, 0xB5, 0xFF, 0xFF, 0x0F, 0xBB, 0xFF, 0xFF, 0x0F, 0xC1, 0xFF, 0x00, 0x10
	.byte 0xC7, 0xFF, 0x00, 0x10, 0xCE, 0xFF, 0x00, 0x10, 0xD4, 0xFF, 0x00, 0x10, 0xDA, 0xFF, 0x00, 0x10
	.byte 0xE1, 0xFF, 0x00, 0x10, 0xE7, 0xFF, 0x00, 0x10, 0xED, 0xFF, 0x00, 0x10, 0xF3, 0xFF, 0x00, 0x10
	.byte 0xFA, 0xFF, 0x00, 0x10, 0x00, 0x00, 0x51, 0x00, 0xA3, 0x00, 0xF4, 0x00, 0x46, 0x01, 0x97, 0x01
	.byte 0xE9, 0x01, 0x3A, 0x02, 0x8B, 0x02, 0xDC, 0x02, 0x2D, 0x03, 0x7E, 0x03, 0xCF, 0x03, 0x20, 0x04
	.byte 0x70, 0x04, 0xC1, 0x04, 0x11, 0x05, 0x61, 0x05, 0xB1, 0x05, 0x01, 0x06, 0x51, 0x06, 0xA0, 0x06
	.byte 0xEF, 0x06, 0x3E, 0x07, 0x8D, 0x07, 0xDC, 0x07, 0x2A, 0x08, 0x78, 0x08, 0xC6, 0x08, 0x14, 0x09
	.byte 0x61, 0x09, 0xAE, 0x09, 0xFB, 0x09, 0x48, 0x0A, 0x94, 0x0A, 0xE0, 0x0A, 0x2C, 0x0B, 0x77, 0x0B
	.byte 0xC2, 0x0B, 0x0D, 0x0C, 0x57, 0x0C, 0xA1, 0x0C, 0xEB, 0x0C, 0x34, 0x0D, 0x7D, 0x0D, 0xC6, 0x0D
	.byte 0x0F, 0x0E, 0x56, 0x0E, 0x9E, 0x0E, 0xE5, 0x0E, 0x2C, 0x0F, 0x73, 0x0F, 0xB9, 0x0F, 0xFF, 0x0F
	.byte 0x44, 0x10, 0x89, 0x10, 0xCE, 0x10, 0x12, 0x11, 0x56, 0x11, 0x99, 0x11, 0xDC, 0x11, 0x1F, 0x12
	.byte 0x61, 0x12, 0xA3, 0x12, 0xE4, 0x12, 0x25, 0x13, 0x66, 0x13, 0xA6, 0x13, 0xE6, 0x13, 0x25, 0x14
	.byte 0x64, 0x14, 0xA2, 0x14, 0xE0, 0x14, 0x1E, 0x15, 0x5B, 0x15, 0x98, 0x15, 0xD5, 0x15, 0x11, 0x16
	.byte 0x4C, 0x16, 0x88, 0x16, 0xC2, 0x16, 0xFD, 0x16, 0x37, 0x17, 0x70, 0x17, 0xAA, 0x17, 0xE2, 0x17
	.byte 0x1B, 0x18, 0x53, 0x18, 0x8A, 0x18, 0xC1, 0x18, 0xF8, 0x18, 0x2E, 0x19, 0x64, 0x19, 0x9A, 0x19
	.byte 0xCF, 0x19, 0x04, 0x1A, 0x38, 0x1A, 0x6C, 0x1A, 0x9F, 0x1A, 0xD3, 0x1A, 0x05, 0x1B, 0x38, 0x1B
	.byte 0x6A, 0x1B, 0x9C, 0x1B, 0xCD, 0x1B, 0xFE, 0x1B, 0x2E, 0x1C, 0x5E, 0x1C, 0x8E, 0x1C, 0xBE, 0x1C
	.byte 0xED, 0x1C, 0x1B, 0x1D, 0x4A, 0x1D, 0x78, 0x1D, 0xA5, 0x1D, 0xD3, 0x1D, 0xFF, 0x1D, 0x2C, 0x1E
	.byte 0x58, 0x1E, 0x84, 0x1E, 0xB0, 0x1E, 0xDB, 0x1E, 0x06, 0x1F, 0x30, 0x1F, 0x5A, 0x1F, 0x84, 0x1F
	.byte 0xAE, 0x1F, 0xD7, 0x1F, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x80, 0x5B, 0xFE, 0x97, 0xFE, 0xBB, 0xFE, 0xD4, 0xFE, 0xE7, 0xFE, 0xF7, 0xFE, 0x04, 0xFF
	.byte 0x10, 0xFF, 0x1A, 0xFF, 0x23, 0xFF, 0x2C, 0xFF, 0x33, 0xFF, 0x3A, 0xFF, 0x40, 0xFF, 0x46, 0xFF
	.byte 0x4C, 0xFF, 0x51, 0xFF, 0x56, 0xFF, 0x5B, 0xFF, 0x5F, 0xFF, 0x64, 0xFF, 0x68, 0xFF, 0x6C, 0xFF
	.byte 0x6F, 0xFF, 0x73, 0xFF, 0x76, 0xFF, 0x7A, 0xFF, 0x7D, 0xFF, 0x80, 0xFF, 0x83, 0xFF, 0x86, 0xFF
	.byte 0x88, 0xFF, 0x8B, 0xFF, 0x8E, 0xFF, 0x90, 0xFF, 0x92, 0xFF, 0x95, 0xFF, 0x97, 0xFF, 0x99, 0xFF
	.byte 0x9C, 0xFF, 0x9E, 0xFF, 0xA0, 0xFF, 0xA2, 0xFF, 0xA4, 0xFF, 0xA6, 0xFF, 0xA8, 0xFF, 0xAA, 0xFF
	.byte 0xAB, 0xFF, 0xAD, 0xFF, 0xAF, 0xFF, 0xB1, 0xFF, 0xB2, 0xFF, 0xB4, 0xFF, 0xB6, 0xFF, 0xB7, 0xFF
	.byte 0xB9, 0xFF, 0xBA, 0xFF, 0xBC, 0xFF, 0xBD, 0xFF, 0xBF, 0xFF, 0xC0, 0xFF, 0xC2, 0xFF, 0xC3, 0xFF
	.byte 0xC4, 0xFF, 0xC6, 0xFF, 0xC7, 0xFF, 0xC8, 0xFF, 0xCA, 0xFF, 0xCB, 0xFF, 0xCC, 0xFF, 0xCD, 0xFF
	.byte 0xCF, 0xFF, 0xD0, 0xFF, 0xD1, 0xFF, 0xD2, 0xFF, 0xD3, 0xFF, 0xD5, 0xFF, 0xD6, 0xFF, 0xD7, 0xFF
	.byte 0xD8, 0xFF, 0xD9, 0xFF, 0xDA, 0xFF, 0xDB, 0xFF, 0xDC, 0xFF, 0xDD, 0xFF, 0xDE, 0xFF, 0xDF, 0xFF
	.byte 0xE0, 0xFF, 0xE1, 0xFF, 0xE2, 0xFF, 0xE3, 0xFF, 0xE4, 0xFF, 0xE5, 0xFF, 0xE6, 0xFF, 0xE7, 0xFF
	.byte 0xE8, 0xFF, 0xE9, 0xFF, 0xE9, 0xFF, 0xEA, 0xFF, 0xEB, 0xFF, 0xEC, 0xFF, 0xED, 0xFF, 0xEE, 0xFF
	.byte 0xEF, 0xFF, 0xEF, 0xFF, 0xF0, 0xFF, 0xF1, 0xFF, 0xF2, 0xFF, 0xF3, 0xFF, 0xF4, 0xFF, 0xF4, 0xFF
	.byte 0xF5, 0xFF, 0xF6, 0xFF, 0xF7, 0xFF, 0xF7, 0xFF, 0xF8, 0xFF, 0xF9, 0xFF, 0xFA, 0xFF, 0xFA, 0xFF
	.byte 0xFB, 0xFF, 0xFC, 0xFF, 0xFD, 0xFF, 0xFD, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02
	.byte 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03
	.byte 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
	.byte 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04
	.byte 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04
	.byte 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05
	.byte 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06
	.byte 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08
	.byte 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09
	.byte 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B
	.byte 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E
	.byte 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10
	.byte 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x14
	.byte 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x18
	.byte 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C
	.byte 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x21, 0x21, 0x22, 0x22
	.byte 0x22, 0x23, 0x23, 0x24, 0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x27, 0x27, 0x27, 0x28, 0x28, 0x29
	.byte 0x29, 0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E, 0x2F, 0x2F, 0x30, 0x31, 0x31
	.byte 0x32, 0x32, 0x33, 0x33, 0x34, 0x35, 0x35, 0x36, 0x36, 0x37, 0x38, 0x38, 0x39, 0x3A, 0x3A, 0x3B
	.byte 0x3C, 0x3C, 0x3D, 0x3E, 0x3F, 0x3F, 0x40, 0x41, 0x42, 0x42, 0x43, 0x44, 0x45, 0x45, 0x46, 0x47
	.byte 0x48, 0x49, 0x4A, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x52, 0x53, 0x54, 0x55
	.byte 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x67
	.byte 0x68, 0x69, 0x6A, 0x6B, 0x6D, 0x6E, 0x6F, 0x71, 0x72, 0x73, 0x75, 0x76, 0x77, 0x79, 0x7A, 0x7B
	.byte 0x7D, 0x7E, 0x7F, 0x20, 0x21, 0x21, 0x21, 0x22, 0x22, 0x23, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25
	.byte 0x26, 0x26, 0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D
	.byte 0x2D, 0x2E, 0x2E, 0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31, 0x32, 0x33, 0x33, 0x34, 0x34, 0x35, 0x36
	.byte 0x36, 0x37, 0x37, 0x38, 0x39, 0x39, 0x3A, 0x3B, 0x3B, 0x3C, 0x3D, 0x3E, 0x3E, 0x3F, 0x40, 0x40
	.byte 0x41, 0x42, 0x43, 0x43, 0x44, 0x45, 0x46, 0x47, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4D
	.byte 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D
	.byte 0x5E, 0x5F, 0x60, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6F, 0x70
	.byte 0x71, 0x73, 0x74, 0x75, 0x77, 0x78, 0x79, 0x7B, 0x7C, 0x7E, 0x7E, 0x40, 0x41, 0x42, 0x43, 0x43
	.byte 0x44, 0x45, 0x46, 0x47, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51
	.byte 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61
	.byte 0x62, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6B, 0x6C, 0x6D, 0x6E, 0x70, 0x71, 0x72, 0x74, 0x75
	.byte 0x76, 0x78, 0x79, 0x7B, 0x7C, 0x7D, 0x7E, 0x40, 0x41, 0x42, 0x42, 0x43, 0x44, 0x45, 0x46, 0x46
	.byte 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55
	.byte 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x65, 0x66
	.byte 0x67, 0x68, 0x69, 0x6A, 0x6C, 0x6D, 0x6E, 0x6F, 0x71, 0x72, 0x73, 0x75, 0x76, 0x77, 0x79, 0x7A
	.byte 0x7C, 0x7D, 0x7E, 0x7F, 0x21, 0x06, 0xC0, 0xDE, 0xBA, 0x98, 0xCE, 0x3F, 0xA6, 0x92, 0xE3, 0x9D
	.byte 0x46, 0xF2, 0xED, 0x01, 0x76, 0xE3, 0xCC, 0x08, 0x56, 0x23, 0x63, 0xFA, 0xCA, 0xD4, 0xEC, 0xDF
	.byte 0x9A, 0x62, 0x78, 0x34, 0x8F, 0x6D, 0x63, 0x3C, 0xFE, 0x22, 0xCA, 0x92, 0x20, 0x88, 0x97, 0x23
	.byte 0xD2, 0xCF, 0xAE, 0xC2, 0x32, 0x67, 0x8D, 0xFE, 0xCA, 0x83, 0x64, 0x98, 0xAC, 0xFD, 0x3E, 0x37
	.byte 0x87, 0x46, 0x58, 0x24, 0xB0, 0xEE, 0x00, 0x02, 0xE0, 0xEE, 0x00, 0x02, 0xAC, 0xE6, 0x00, 0x02
	.byte 0x48, 0xE7, 0x00, 0x02, 0x74, 0xE8, 0x00, 0x02, 0x88, 0xEA, 0x00, 0x02, 0x04, 0xEE, 0x00, 0x02
	.byte 0x8C, 0xEE, 0x00, 0x02, 0x10, 0xEF, 0x00, 0x02, 0x10, 0xEF, 0x00, 0x02, 0x10, 0xEF, 0x00, 0x02
	.byte 0x10, 0xEF, 0x00, 0x02, 0x10, 0xEF, 0x00, 0x02, 0xE8, 0xEF, 0x00, 0x02, 0x2C, 0xF0, 0x00, 0x02
	.byte 0x70, 0xF0, 0x00, 0x02, 0xC8, 0xF0, 0x00, 0x02, 0xF0, 0xF1, 0x00, 0x02, 0x7C, 0xF2, 0x00, 0x02
	.byte 0xC0, 0xF2, 0x00, 0x02, 0x08, 0xF3, 0x00, 0x02, 0x5C, 0xF3, 0x00, 0x02, 0x8C, 0xF3, 0x00, 0x02
	.byte 0xC0, 0xF3, 0x00, 0x02, 0xF4, 0xF3, 0x00, 0x02, 0x28, 0xF4, 0x00, 0x02, 0x5C, 0xF4, 0x00, 0x02
	.byte 0xAC, 0xF4, 0x00, 0x02, 0x18, 0xF5, 0x00, 0x02, 0x34, 0xF5, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x50, 0xF5, 0x00, 0x02, 0x80, 0xF5, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFC, 0xF5, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xF7, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0xF5, 0x00, 0x02, 0xE4, 0xF5, 0x00, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x84, 0x00, 0x02, 0xAC, 0x73, 0x00, 0x02
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x58, 0x89, 0x01, 0x02
	.byte 0x44, 0x8D, 0x01, 0x02, 0xC4, 0x8D, 0x01, 0x02, 0x58, 0x89, 0x01, 0x02, 0xF4, 0x8C, 0x01, 0x02
	.byte 0xC4, 0x8D, 0x01, 0x02, 0xEC, 0x8A, 0x01, 0x02, 0xF4, 0x8C, 0x01, 0x02, 0x5C, 0x8F, 0x01, 0x02
	.byte 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x01
	.byte 0x00, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x02, 0x00, 0x02, 0x01, 0x02, 0x02, 0x03, 0x03, 0x03
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x80, 0x00, 0x40, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0xC0
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0
	.byte 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
	.byte 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
	.byte 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27
	.byte 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
	.byte 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47
	.byte 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57
	.byte 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47
	.byte 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57
	.byte 0x58, 0x59, 0x5A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x06, 0x01, 0x04, 0x01, 0x04, 0x01
	.byte 0x04, 0x01, 0x04, 0x01, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00
	.byte 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x42, 0x01, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04
	.byte 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0x58, 0x04, 0xD0, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x51, 0x06, 0x51, 0x06, 0x51, 0x06
	.byte 0x51, 0x06, 0x51, 0x06, 0x51, 0x06, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02
	.byte 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02
	.byte 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x71, 0x04, 0x71, 0x04, 0x71, 0x04
	.byte 0x71, 0x04, 0x71, 0x04, 0x71, 0x04, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00
	.byte 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00
	.byte 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0xD0, 0x00
	.byte 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x40, 0x03, 0xB8, 0xE2, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x3F
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x06, 0xD0, 0xCF, 0x43, 0xEB, 0xFD, 0x4C, 0x3E, 0xFB, 0x21, 0xF9, 0x3F, 0xFB, 0x21, 0x09, 0x40
	.byte 0x7C, 0xD9, 0x12, 0x40, 0xFB, 0x21, 0x19, 0x40, 0x7A, 0x6A, 0x1F, 0x40, 0x7C, 0xD9, 0x22, 0x40
	.byte 0xBB, 0xFD, 0x25, 0x40, 0xFB, 0x21, 0x29, 0x40, 0x3A, 0x46, 0x2C, 0x40, 0x7A, 0x6A, 0x2F, 0x40
	.byte 0x5C, 0x47, 0x31, 0x40, 0x7C, 0xD9, 0x32, 0x40, 0x9C, 0x6B, 0x34, 0x40, 0xBB, 0xFD, 0x35, 0x40
	.byte 0xDB, 0x8F, 0x37, 0x40, 0xFB, 0x21, 0x39, 0x40, 0x1B, 0xB4, 0x3A, 0x40, 0x3A, 0x46, 0x3C, 0x40
	.byte 0x5A, 0xD8, 0x3D, 0x40, 0x7A, 0x6A, 0x3F, 0x40, 0x4C, 0x7E, 0x40, 0x40, 0x5C, 0x47, 0x41, 0x40
	.byte 0x6C, 0x10, 0x42, 0x40, 0x7C, 0xD9, 0x42, 0x40, 0x8C, 0xA2, 0x43, 0x40, 0x9C, 0x6B, 0x44, 0x40
	.byte 0xAC, 0x34, 0x45, 0x40, 0xBB, 0xFD, 0x45, 0x40, 0xCB, 0xC6, 0x46, 0x40, 0xDB, 0x8F, 0x47, 0x40
	.byte 0xEB, 0x58, 0x48, 0x40, 0xFB, 0x21, 0x49, 0x40, 0x83, 0xF9, 0xA2, 0x00, 0x44, 0x4E, 0x6E, 0x00
	.byte 0xFC, 0x29, 0x15, 0x00, 0xD1, 0x57, 0x27, 0x00, 0xDD, 0x34, 0xF5, 0x00, 0x62, 0xDB, 0xC0, 0x00
	.byte 0x3C, 0x99, 0x95, 0x00, 0x41, 0x90, 0x43, 0x00, 0x63, 0x51, 0xFE, 0x00, 0xBB, 0xDE, 0xAB, 0x00
	.byte 0xB7, 0x61, 0xC5, 0x00, 0x3A, 0x6E, 0x24, 0x00, 0xD2, 0x4D, 0x42, 0x00, 0x49, 0x06, 0xE0, 0x00
	.byte 0x09, 0xEA, 0x2E, 0x00, 0x1C, 0x92, 0xD1, 0x00, 0xEB, 0x1D, 0xFE, 0x00, 0x29, 0xB1, 0x1C, 0x00
	.byte 0xE8, 0x3E, 0xA7, 0x00, 0xF5, 0x35, 0x82, 0x00, 0x44, 0xBB, 0x2E, 0x00, 0x9C, 0xE9, 0x84, 0x00
	.byte 0xB4, 0x26, 0x70, 0x00, 0x41, 0x7E, 0x5F, 0x00, 0xD6, 0x91, 0x39, 0x00, 0x53, 0x83, 0x39, 0x00
	.byte 0x9C, 0xF4, 0x39, 0x00, 0x8B, 0x5F, 0x84, 0x00, 0x28, 0xF9, 0xBD, 0x00, 0xF8, 0x1F, 0x3B, 0x00
	.byte 0xDE, 0xFF, 0x97, 0x00, 0x0F, 0x98, 0x05, 0x00, 0x11, 0x2F, 0xEF, 0x00, 0x0A, 0x5A, 0x8B, 0x00
	.byte 0x6D, 0x1F, 0x6D, 0x00, 0xCF, 0x7E, 0x36, 0x00, 0x09, 0xCB, 0x27, 0x00, 0x46, 0x4F, 0xB7, 0x00
	.byte 0x9E, 0x66, 0x3F, 0x00, 0x2D, 0xEA, 0x5F, 0x00, 0xBA, 0x27, 0x75, 0x00, 0xE5, 0xEB, 0xC7, 0x00
	.byte 0x3D, 0x7B, 0xF1, 0x00, 0xF7, 0x39, 0x07, 0x00, 0x92, 0x52, 0x8A, 0x00, 0xFB, 0x6B, 0xEA, 0x00
	.byte 0x1F, 0xB1, 0x5F, 0x00, 0x08, 0x5D, 0x8D, 0x00, 0x30, 0x03, 0x56, 0x00, 0x7B, 0xFC, 0x46, 0x00
	.byte 0xF0, 0xAB, 0x6B, 0x00, 0x20, 0xBC, 0xCF, 0x00, 0x36, 0xF4, 0x9A, 0x00, 0xE3, 0xA9, 0x1D, 0x00
	.byte 0x5E, 0x61, 0x91, 0x00, 0x08, 0x1B, 0xE6, 0x00, 0x85, 0x99, 0x65, 0x00, 0xA0, 0x14, 0x5F, 0x00
	.byte 0x8D, 0x40, 0x68, 0x00, 0x80, 0xD8, 0xFF, 0x00, 0x27, 0x73, 0x4D, 0x00, 0x06, 0x06, 0x31, 0x00
	.byte 0xCA, 0x56, 0x15, 0x00, 0xC9, 0xA8, 0x73, 0x00, 0x7B, 0xE2, 0x60, 0x00, 0x6B, 0x8C, 0xC0, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x40, 0xFB, 0x21, 0xF9, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x44, 0x74, 0x3E
	.byte 0x00, 0x00, 0x00, 0x80, 0x98, 0x46, 0xF8, 0x3C, 0x00, 0x00, 0x00, 0x60, 0x51, 0xCC, 0x78, 0x3B
	.byte 0x00, 0x00, 0x00, 0x80, 0x83, 0x1B, 0xF0, 0x39, 0x00, 0x00, 0x00, 0x40, 0x20, 0x25, 0x7A, 0x38
	.byte 0x00, 0x00, 0x00, 0x80, 0x22, 0x82, 0xE3, 0x36, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xF3, 0x69, 0x35
	.byte 0x01, 0x00, 0x04, 0x02, 0x03, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0xD9, 0x03, 0x00, 0x00
	.byte 0xE0, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0xFF, 0x01, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0xF9, 0xFF, 0x78, 0x00, 0xF9, 0xFF, 0xE8, 0x00, 0xA8, 0x00
	.byte 0xD0, 0x00, 0xA8, 0x00, 0x01, 0x02, 0x00, 0x04, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x77, 0x00
	.byte 0x1A, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00
	.byte 0x26, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00
	.byte 0x32, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00
	.byte 0x4D, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00
	.byte 0x5C, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00
	.byte 0x6B, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00
	.byte 0x7C, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x75, 0x6E, 0x69, 0x74, 0x73, 0x74, 0x61, 0x74, 0x2E, 0x64, 0x61, 0x74, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0xFF, 0x7F, 0xFF, 0x7F, 0x00, 0x80, 0x00, 0x00
	.byte 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x04, 0x05, 0x07, 0x08
	.byte 0x03, 0x05, 0x06, 0x08, 0x03, 0x04, 0x06, 0x07, 0x01, 0x02, 0x07, 0x08, 0x00, 0x02, 0x06, 0x08
	.byte 0x00, 0x01, 0x06, 0x07, 0x01, 0x02, 0x04, 0x05, 0x00, 0x02, 0x03, 0x05, 0x00, 0x01, 0x03, 0x04
	.byte 0x04, 0x05, 0x07, 0x08, 0x03, 0x05, 0x06, 0x08, 0x03, 0x04, 0x06, 0x07, 0x01, 0x02, 0x07, 0x08
	.byte 0x00, 0x02, 0x06, 0x08, 0x00, 0x01, 0x06, 0x07, 0x01, 0x02, 0x04, 0x05, 0x00, 0x02, 0x03, 0x05
	.byte 0x00, 0x01, 0x03, 0x04, 0x23, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x73, 0x68, 0x6F, 0x6F, 0x74
	.byte 0x63, 0x68, 0x61, 0x69, 0x6E, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02
	.byte 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00
	.byte 0x0D, 0x00, 0x0E, 0x00, 0x10, 0x00, 0x11, 0x00, 0x13, 0x00, 0x15, 0x00, 0x17, 0x00, 0x19, 0x00
	.byte 0x1C, 0x00, 0x1F, 0x00, 0x22, 0x00, 0x25, 0x00, 0x29, 0x00, 0x2D, 0x00, 0x32, 0x00, 0x37, 0x00
	.byte 0x3C, 0x00, 0x42, 0x00, 0x49, 0x00, 0x50, 0x00, 0x58, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x76, 0x00
	.byte 0x82, 0x00, 0x8F, 0x00, 0x9D, 0x00, 0xAD, 0x00, 0xBE, 0x00, 0xD1, 0x00, 0xE6, 0x00, 0xFD, 0x00
	.byte 0x17, 0x01, 0x33, 0x01, 0x51, 0x01, 0x73, 0x01, 0x98, 0x01, 0xC1, 0x01, 0xEE, 0x01, 0x20, 0x02
	.byte 0x56, 0x02, 0x92, 0x02, 0xD4, 0x02, 0x1C, 0x03, 0x6C, 0x03, 0xC3, 0x03, 0x24, 0x04, 0x8E, 0x04
	.byte 0x02, 0x05, 0x83, 0x05, 0x10, 0x06, 0xAB, 0x06, 0x56, 0x07, 0x12, 0x08, 0xE0, 0x08, 0xC3, 0x09
	.byte 0xBD, 0x0A, 0xD0, 0x0B, 0xFF, 0x0C, 0x4C, 0x0E, 0xBA, 0x0F, 0x4C, 0x11, 0x07, 0x13, 0xEE, 0x14
	.byte 0x06, 0x17, 0x54, 0x19, 0xDC, 0x1B, 0xA5, 0x1E, 0xB6, 0x21, 0x15, 0x25, 0xCA, 0x28, 0xDF, 0x2C
	.byte 0x5B, 0x31, 0x4B, 0x36, 0xB9, 0x3B, 0xB2, 0x41, 0x44, 0x48, 0x7E, 0x4F, 0x71, 0x57, 0x2F, 0x60
	.byte 0xCE, 0x69, 0x62, 0x74, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xC3, 0xFF, 0x8C, 0x33, 0x9D, 0x36
	.byte 0x85, 0x3B, 0x00, 0x00, 0x01, 0x05, 0xF1, 0x31, 0xBE, 0xD0, 0xFC, 0x32, 0xD4, 0x07, 0x25, 0x10
	.byte 0xEE, 0x19, 0xE6, 0xE6, 0xF1, 0x13, 0x13, 0xE5, 0xD1, 0x1C, 0x39, 0x05, 0xEF, 0xE0, 0xD7, 0x44
	.byte 0x15, 0xFE, 0x40, 0x38, 0x08, 0xF0, 0xF3, 0xE6, 0xF7, 0xF0, 0x0B, 0x06, 0xD9, 0x19, 0xED, 0x16
	.byte 0xE1, 0x14, 0xD3, 0x37, 0xD5, 0x0A, 0xF0, 0x2F, 0xD8, 0x28, 0xEC, 0xCD, 0x03, 0xEF, 0xF2, 0xF1
	.byte 0xE8, 0x35, 0xEC, 0xD2, 0x2E, 0x1B, 0xBC, 0x20, 0x03, 0xEE, 0xFB, 0x09, 0xE1, 0x10, 0xF7, 0xF6
	.byte 0xFF, 0xE9, 0x30, 0x5F, 0x2F, 0x19, 0xD7, 0xE0, 0xFD, 0x0F, 0xE7, 0xC9, 0x24, 0x29, 0xE5, 0x14
	.byte 0x05, 0x0D, 0x0E, 0xEA, 0x05, 0x02, 0xE9, 0x12, 0x2E, 0xF1, 0x11, 0xEE, 0xDE, 0xFB, 0xF8, 0x1B
	.byte 0xC9, 0x49, 0x10, 0x02, 0xFF, 0xEF, 0x28, 0xB2, 0x21, 0x00, 0x02, 0x13, 0x04, 0x35, 0xF0, 0xF1
	.byte 0xF0, 0xE4, 0xFD, 0xF3, 0x31, 0x08, 0xF9, 0xE3, 0x1B, 0xF3, 0x20, 0x14, 0x20, 0xC3, 0x10, 0x0E
	.byte 0x29, 0x2C, 0x28, 0x18, 0x14, 0x07, 0x04, 0x30, 0xC4, 0xB3, 0x11, 0xFA, 0xD0, 0x41, 0xF1, 0x20
	.byte 0xE2, 0xB9, 0xF6, 0xFD, 0xFA, 0x0A, 0xFE, 0xF9, 0xE3, 0xC8, 0x43, 0xE2, 0x07, 0xFB, 0x56, 0xFA
	.byte 0xF6, 0x00, 0x05, 0xE1, 0x3C, 0x22, 0xDA, 0xFD, 0x18, 0x0A, 0xFE, 0x1E, 0x17, 0x18, 0xD7, 0x0C
	.byte 0x46, 0xD5, 0x0F, 0xEF, 0x06, 0x0D, 0x10, 0xF3, 0x08, 0x1E, 0xF1, 0xF8, 0x05, 0x17, 0xDE, 0x9E
	.byte 0xFC, 0xF3, 0x0D, 0xD0, 0xE1, 0x46, 0x0C, 0x1F, 0x19, 0x18, 0xE8, 0x1A, 0xF9, 0x21, 0xF0, 0x08
	.byte 0x05, 0xF5, 0xF2, 0xF8, 0xBF, 0x0D, 0x0A, 0xFE, 0xF7, 0x00, 0xFD, 0xBC, 0x05, 0x23, 0x07, 0x00
	.byte 0xE1, 0xFF, 0xEF, 0xF7, 0xF7, 0x10, 0xDB, 0xEE, 0xFF, 0x45, 0xD0, 0xE4, 0x16, 0xEB, 0xF5, 0x05
	.byte 0x31, 0x37, 0x17, 0xAA, 0xDC, 0x10, 0x02, 0x0D, 0x3F, 0xCD, 0x1E, 0xF5, 0x0D, 0x18, 0xEE, 0xFA
	.byte 0x0E, 0xED, 0x01, 0x29, 0x09, 0xFB, 0x1B, 0xDC, 0xD4, 0xDE, 0xDB, 0xEB, 0xE6, 0x1F, 0xD9, 0x0F
	.byte 0x2B, 0x05, 0xF8, 0x1D, 0x14, 0xF8, 0xEC, 0xCC, 0xE4, 0xFF, 0x0D, 0x1A, 0xDE, 0xF6, 0xF7, 0x1B
	.byte 0xF8, 0x08, 0x1B, 0xBE, 0x04, 0x0C, 0xEA, 0x31, 0x0A, 0xB3, 0x20, 0xEE, 0x03, 0xDA, 0x0C, 0xFD
	.byte 0xFF, 0x02, 0x02, 0x00, 0xF8, 0xDB, 0x05, 0xD5, 0x05, 0x49, 0x3D, 0x27, 0x0C, 0xFD, 0xC3, 0xE0
	.byte 0x02, 0x2A, 0x1E, 0xFD, 0x11, 0xE5, 0x09, 0x22, 0x14, 0xFF, 0xFB, 0x02, 0x17, 0xF9, 0xD2, 0x1A
	.byte 0x35, 0xD1, 0x14, 0xFE, 0xDF, 0xA7, 0xCD, 0xC0, 0x1B, 0x0B, 0x0F, 0xDE, 0xFB, 0xC8, 0x19, 0xF7
	.byte 0xFF, 0xE3, 0x01, 0x28, 0x43, 0xE9, 0xF0, 0x10, 0x21, 0x13, 0x07, 0x0E, 0x55, 0x16, 0xF6, 0xF6
	.byte 0xF4, 0xF9, 0xFF, 0x34, 0x59, 0x1D, 0x0B, 0xEC, 0xDB, 0xD2, 0xF1, 0x11, 0xE8, 0xE4, 0x18, 0x02
	.byte 0x01, 0x00, 0x17, 0x9B, 0x17, 0x0E, 0xFF, 0xE9, 0xEE, 0x09, 0x05, 0xF3, 0x26, 0x01, 0xE4, 0xE4
	.byte 0x04, 0x1B, 0x33, 0xE6, 0x22, 0xD8, 0x23, 0x2F, 0x36, 0x26, 0xCA, 0xE6, 0xFA, 0x2A, 0xE7, 0x0D
	.byte 0xE2, 0xDC, 0x12, 0x29, 0xFC, 0xDF, 0x17, 0xE0, 0xF9, 0xFC, 0x33, 0xFD, 0x11, 0xCC, 0x38, 0xD1
	.byte 0x24, 0xFE, 0xEB, 0x24, 0x0A, 0x08, 0xDF, 0x1F, 0x13, 0x09, 0xFB, 0xD8, 0x0A, 0xF7, 0xEB, 0x13
	.byte 0x12, 0xB2, 0xEE, 0xFB, 0x00, 0xE6, 0xDC, 0xD1, 0xCD, 0xD4, 0x12, 0x28, 0x1B, 0xFE, 0x1D, 0x31
	.byte 0xE6, 0x02, 0x20, 0xCA, 0x1E, 0xB7, 0x36, 0x03, 0xFB, 0x24, 0x16, 0x35, 0x0A, 0xFF, 0xAC, 0xCB
	.byte 0xE3, 0xFB, 0x03, 0xD4, 0x35, 0xCD, 0x04, 0x16, 0x47, 0xDD, 0xFF, 0x21, 0xFB, 0xE5, 0xF9, 0x24
	.byte 0x11, 0xE9, 0xD9, 0x10, 0xF7, 0xC9, 0xF1, 0xEC, 0x27, 0xDD, 0x06, 0xD9, 0xF2, 0x12, 0x30, 0xC0
	.byte 0xEF, 0xF1, 0x09, 0x27, 0x51, 0x25, 0xBC, 0x25, 0x2F, 0xEB, 0xFA, 0x98, 0x0D, 0x06, 0x09, 0xFE
	.byte 0x23, 0x08, 0xE9, 0x12, 0x2A, 0x2D, 0x15, 0x21, 0xFB, 0xCF, 0x09, 0xFA, 0xD5, 0xC8, 0x27, 0x02
	.byte 0xF0, 0xE7, 0x57, 0x01, 0xFD, 0xF7, 0x11, 0xE7, 0xF5, 0xF7, 0xFF, 0x0A, 0x02, 0xF2, 0xF2, 0x04
	.byte 0xFF, 0xF6, 0x1C, 0xE9, 0x28, 0xE0, 0x1A, 0xF7, 0x1A, 0x04, 0xE5, 0xE9, 0x03, 0x2A, 0xC4, 0x01
	.byte 0x31, 0xFD, 0x1B, 0x0A, 0xCC, 0xD8, 0xFE, 0x12, 0x2D, 0xE9, 0x11, 0xD4, 0x03, 0xFD, 0x11, 0xD2
	.byte 0x34, 0xD8, 0xD1, 0x19, 0x4B, 0x1F, 0xCF, 0x35, 0x1E, 0xE2, 0xE0, 0xDC, 0x26, 0xFA, 0xF1, 0xF0
	.byte 0x36, 0xE5, 0xD0, 0x03, 0x26, 0xE3, 0xE0, 0xEA, 0xF2, 0xFC, 0xE9, 0xF3, 0x20, 0xD9, 0x09, 0x08
	.byte 0xD3, 0xF3, 0x22, 0xF0, 0x31, 0x28, 0x20, 0x1F, 0x1C, 0x17, 0x17, 0x20, 0x2F, 0x3B, 0xBC, 0x08
	.byte 0x3E, 0x2C, 0x19, 0xF2, 0xE8, 0xBF, 0xF0, 0x24, 0x43, 0xE7, 0xDA, 0xEB, 0x04, 0xDF, 0xFE, 0x2A
	.byte 0x05, 0xC1, 0x28, 0x0B, 0x1A, 0xD6, 0xE9, 0xC3, 0x4F, 0xE1, 0x17, 0xEC, 0x0A, 0xE0, 0x35, 0xE7
	.byte 0xDC, 0x0A, 0xE6, 0xFB, 0x03, 0x00, 0xB9, 0x05, 0xF6, 0xDB, 0x01, 0xE8, 0x15, 0xCA, 0xEF, 0x01
	.byte 0xE3, 0xE7, 0xF1, 0xE5, 0x20, 0x44, 0x2D, 0xF0, 0xDB, 0xEE, 0xFB, 0x01, 0x00, 0xB3, 0x47, 0xFA
	.byte 0x03, 0xEC, 0x47, 0xBD, 0x1D, 0xDD, 0x0A, 0xE2, 0x13, 0x04, 0x10, 0x11, 0x05, 0x00, 0xF2, 0x13
	.byte 0x02, 0x1C, 0x1A, 0x3B, 0x03, 0x02, 0x18, 0x27, 0x37, 0xCE, 0xD3, 0xEE, 0xEF, 0x21, 0xDD, 0x0E
	.byte 0xFF, 0x01, 0x08, 0x57, 0xDD, 0xE3, 0x00, 0xE5, 0x0D, 0xF9, 0x17, 0xF3, 0x25, 0xD8, 0x32, 0xDD
	.byte 0x0E, 0x13, 0xF9, 0xF2, 0x31, 0x36, 0xFB, 0x16, 0xFE, 0xE3, 0xF8, 0xE5, 0x26, 0x0D, 0x1B, 0x30
	.byte 0x0C, 0xD7, 0xEB, 0xF1, 0x1C, 0x07, 0xF0, 0xE8, 0xED, 0xEC, 0x0B, 0xEC, 0x09, 0x02, 0x0D, 0x17
	.byte 0xEC, 0x0B, 0x1B, 0xE5, 0x47, 0xBB, 0x08, 0x02, 0xFA, 0x16, 0x0C, 0x10, 0x10, 0x09, 0xF0, 0xF8
	.byte 0xEF, 0x01, 0x19, 0x01, 0x28, 0xDB, 0xDF, 0x42, 0x5E, 0x35, 0x04, 0xEA, 0xE7, 0xD7, 0xD6, 0x19
	.byte 0x23, 0xF0, 0xF1, 0x39, 0x1F, 0xE3, 0xE0, 0x15, 0x10, 0xC4, 0x2D, 0x0F, 0xFF, 0x07, 0x39, 0xE6
	.byte 0xD1, 0xE3, 0x0B, 0x08, 0x0F, 0x13, 0x97, 0xF8, 0x36, 0x1B, 0x0A, 0xEF, 0x06, 0xF4, 0xFF, 0xF6
	.byte 0x04, 0x00, 0x17, 0xF6, 0x1F, 0x0D, 0x0B, 0x0A, 0x0C, 0xC0, 0x17, 0xFD, 0xF8, 0xED, 0x10, 0x34
	.byte 0x18, 0xD8, 0x10, 0x0A, 0x28, 0x05, 0x09, 0x00, 0xF3, 0xF9, 0xEB, 0xF8, 0xFA, 0xF9, 0xEB, 0x3B
	.byte 0x10, 0xCB, 0x12, 0xC4, 0x0B, 0xD1, 0x0E, 0xEE, 0x19, 0xF3, 0xE8, 0x04, 0xD9, 0x10, 0xE4, 0x36
	.byte 0x1A, 0xBD, 0x1E, 0x1B, 0xEC, 0xCC, 0x14, 0xF4, 0x37, 0x0C, 0x12, 0xF0, 0x27, 0xF2, 0xFA, 0xE6
	.byte 0x38, 0xA8, 0xC9, 0x0C, 0x19, 0x1A, 0xDB, 0x06, 0x4B, 0x00, 0xDE, 0xAF, 0x36, 0xE2, 0x01, 0xF9
	.byte 0x31, 0xE9, 0xF2, 0x15, 0x0A, 0xC2, 0xC6, 0xC7, 0xD1, 0xDE, 0x0F, 0xFC, 0x22, 0xB2, 0x1F, 0x19
	.byte 0xF5, 0x07, 0x32, 0xF6, 0x2A, 0xC1, 0x0E, 0xDC, 0xFC, 0x39, 0x37, 0x39, 0x35, 0x2A, 0xD6, 0xFF
	.byte 0x0F, 0x28, 0x25, 0x0F, 0x19, 0xF5, 0x06, 0x01, 0x1F, 0xFE, 0xFA, 0xFF, 0xF9, 0xC0, 0x22, 0x1C
	.byte 0x1E, 0xFF, 0x03, 0x15, 0x00, 0xA8, 0xF4, 0xC8, 0x19, 0xE4, 0x28, 0x08, 0xE4, 0xF2, 0x09, 0x0C
	.byte 0x02, 0xFA, 0xEF, 0x16, 0x31, 0xFA, 0xE6, 0x0E, 0x1C, 0xEC, 0x04, 0xF4, 0x32, 0x23, 0x28, 0x0D
	.byte 0xDA, 0xC6, 0xE3, 0x11, 0x1E, 0x16, 0x3C, 0x1A, 0xCA, 0xD9, 0xF4, 0x3A, 0xE4, 0xC1, 0x0A, 0xEB
	.byte 0xF8, 0xF4, 0x1A, 0xC2, 0x06, 0xF6, 0xF5, 0xEA, 0xFA, 0xF9, 0x04, 0x01, 0x12, 0x02, 0xBA, 0x0B
	.byte 0x0E, 0x04, 0x0D, 0x13, 0xE8, 0xDE, 0x18, 0x43, 0x11, 0x33, 0xEB, 0x0D, 0x17, 0x36, 0xE2, 0x30
	.byte 0x01, 0xF3, 0x50, 0x1A, 0xF0, 0xFE, 0x0D, 0xFC, 0x06, 0xE2, 0x1D, 0xE8, 0x49, 0xC6, 0x1E, 0xE5
	.byte 0x14, 0xFE, 0xEB, 0x29, 0x2D, 0x1E, 0xE5, 0xFD, 0xFB, 0xEE, 0xEC, 0xCF, 0xFD, 0xDD, 0x0A, 0x2A
	.byte 0xED, 0xBD, 0xCB, 0xF5, 0x09, 0x0D, 0xF1, 0xDF, 0xCD, 0xE2, 0x0F, 0x07, 0x19, 0xE2, 0x04, 0x1C
	.byte 0xEA, 0xDE, 0x36, 0xE3, 0x27, 0xD2, 0x14, 0x10, 0x22, 0xFC, 0x2F, 0x4B, 0x01, 0xD4, 0xC9, 0xE8
	.byte 0x07, 0xFF, 0x09, 0xD6, 0x32, 0xF8, 0xDC, 0x29, 0x44, 0x00, 0xFC, 0xF6, 0xE9, 0xF1, 0xCE, 0x40
	.byte 0x24, 0xF7, 0xE5, 0x0C, 0x19, 0xDA, 0xD1, 0xDB, 0x20, 0xCF, 0x33, 0xDC, 0x02, 0xFC, 0x45, 0xE6
	.byte 0x13, 0x07, 0x2D, 0x43, 0x2E, 0x0D, 0xC1, 0x2E, 0x0F, 0xD1, 0x04, 0xD7, 0x0D, 0xFA, 0x05, 0xEB
	.byte 0x25, 0x1A, 0xC9, 0xF9, 0x21, 0xFF, 0xE4, 0x0A, 0xEF, 0xC0, 0xF2, 0x00, 0xDC, 0xEF, 0x5D, 0xFD
	.byte 0xF7, 0xBE, 0x2C, 0xEB, 0x03, 0xF4, 0x26, 0xFA, 0xF3, 0xF4, 0x13, 0x0D, 0x2B, 0xD5, 0xF6, 0xF4
	.byte 0x06, 0xFB, 0x09, 0xCF, 0x20, 0xFB, 0x02, 0x04, 0x05, 0x0F, 0xF0, 0x0A, 0xEB, 0x08, 0xC2, 0xF8
	.byte 0x40, 0x08, 0x4F, 0xFF, 0xBE, 0xCF, 0xEE, 0x05, 0x28, 0xFB, 0xE2, 0xD3, 0x01, 0xFA, 0x15, 0xE0
	.byte 0x5D, 0xEE, 0xE2, 0xEB, 0x20, 0x15, 0xEE, 0x16, 0x08, 0x05, 0xD7, 0xCA, 0x50, 0x16, 0xF6, 0xF9
	.byte 0xF8, 0xE9, 0xC0, 0x42, 0x38, 0xF2, 0xE2, 0xD7, 0xD2, 0xF2, 0xE3, 0xDB, 0x1B, 0xF2, 0x2A, 0xFE
	.byte 0xF7, 0xE3, 0x22, 0x0E, 0x21, 0xF2, 0x16, 0x04, 0x0A, 0x1A, 0x1A, 0x1C, 0x20, 0x17, 0xB8, 0xE0
	.byte 0x03, 0x00, 0xF2, 0x23, 0xD6, 0xB2, 0xE0, 0x06, 0x1D, 0xEE, 0xD3, 0xFB, 0x07, 0xDF, 0xD3, 0xFD
	.byte 0xEA, 0xDE, 0x08, 0xF8, 0x04, 0xCD, 0xE7, 0xF7, 0x3B, 0xB2, 0x15, 0xFB, 0xE7, 0xD0, 0x42, 0xF1
	.byte 0xEF, 0xE8, 0xCF, 0xF3, 0x19, 0xE9, 0xC0, 0xFA, 0x28, 0xE8, 0xED, 0xF5, 0x39, 0xDF, 0xF8, 0x01
	.byte 0x0A, 0xCC, 0xCA, 0x1C, 0x27, 0x31, 0x22, 0xF5, 0xC3, 0xD7, 0xD5, 0x0A, 0x0F, 0xF1, 0x33, 0x1E
	.byte 0x0F, 0xCD, 0x20, 0xDE, 0xFE, 0xDE, 0x0E, 0x12, 0x10, 0x01, 0x01, 0xFD, 0xFD, 0x01, 0x01, 0xEE
	.byte 0x06, 0x10, 0x30, 0x0C, 0xFB, 0xD6, 0x07, 0x24, 0x30, 0x07, 0xEC, 0xF6, 0x07, 0x0C, 0x02, 0x36
	.byte 0x27, 0xDA, 0x25, 0x36, 0x04, 0xF5, 0xF8, 0xD2, 0xF6, 0x05, 0xF6, 0xDE, 0x2E, 0xF4, 0x1D, 0xDB
	.byte 0x27, 0x24, 0xF5, 0x18, 0x38, 0x11, 0x0E, 0x14, 0x19, 0x00, 0xE7, 0xE4, 0x37, 0xF9, 0xFB, 0x1B
	.byte 0x03, 0x09, 0xE6, 0xF8, 0x06, 0xE8, 0xF6, 0xE2, 0xE1, 0xDE, 0x12, 0x04, 0x16, 0x15, 0x28, 0xFF
	.byte 0xE3, 0xDB, 0xF8, 0xEB, 0x5C, 0xE3, 0x0B, 0xFD, 0x0B, 0x49, 0x17, 0x16, 0x07, 0x04, 0xD4, 0xF7
	.byte 0xF5, 0x15, 0xF3, 0x0B, 0x09, 0xB2, 0xFF, 0x2F, 0x72, 0xF4, 0xDB, 0xED, 0xFB, 0xF5, 0xEA, 0x13
	.byte 0x0C, 0xE2, 0x07, 0x26, 0x2D, 0xEB, 0xF8, 0xF7, 0x37, 0xD3, 0x38, 0xEB, 0x07, 0x11, 0x2E, 0xC7
	.byte 0xA9, 0xFA, 0x1B, 0x1F, 0x1F, 0x07, 0xC8, 0xF4, 0x2E, 0x15, 0xFB, 0xF4, 0x24, 0x03, 0x03, 0xEB
	.byte 0x2B, 0x13, 0x0C, 0xF9, 0x09, 0xF2, 0x00, 0xF7, 0xDF, 0xA5, 0x07, 0x1A, 0x03, 0xF5, 0x40, 0x53
	.byte 0xE1, 0xD2, 0x19, 0x02, 0x09, 0x05, 0x02, 0x02, 0xFF, 0x14, 0xEF, 0x0A, 0xFB, 0xE5, 0xF8, 0x14
	.byte 0x08, 0xED, 0x10, 0xEB, 0xF3, 0xE1, 0x05, 0x05, 0x2A, 0x18, 0x09, 0x22, 0xEC, 0x1C, 0xC3, 0x16
	.byte 0x0B, 0xD9, 0x40, 0xEC, 0xFF, 0xE2, 0xF7, 0xEC, 0x18, 0xE7, 0xE8, 0xE3, 0x16, 0xC4, 0x06, 0xFB
	.byte 0x29, 0xF7, 0xA9, 0x0E, 0x22, 0x0F, 0xC7, 0x34, 0x45, 0x0F, 0xFD, 0x9A, 0x3A, 0x10, 0x03, 0x06
	.byte 0x3C, 0xB5, 0xE0, 0x1A, 0x07, 0xC7, 0xE5, 0xE0, 0xE8, 0xEB, 0xE3, 0xF0, 0x3E, 0xD2, 0x1F, 0x1E
	.byte 0xE5, 0xF1, 0x07, 0x0F, 0xF2, 0x09, 0x0D, 0xE0, 0x02, 0xF6, 0x1F, 0xF6, 0xF8, 0xF8, 0x06, 0xFC
	.byte 0xFF, 0x0A, 0xC0, 0x17, 0x06, 0x14, 0x0D, 0x06, 0x08, 0xEA, 0x10, 0x22, 0x07, 0x2A, 0xCF, 0xE4
	.byte 0x05, 0x1A, 0x04, 0xF1, 0x29, 0x22, 0x29, 0x20, 0x21, 0x18, 0x17, 0x0E, 0x08, 0x28, 0x22, 0x04
	.byte 0xE8, 0xD7, 0xED, 0xF1, 0x0D, 0xF3, 0x21, 0xCA, 0x18, 0x1B, 0xD4, 0x21, 0x1B, 0xF1, 0xF1, 0x18
	.byte 0xED, 0x0E, 0xDC, 0x0E, 0xF7, 0x18, 0xF4, 0xFC, 0x25, 0xFB, 0x10, 0xDE, 0x05, 0x0A, 0x21, 0xF1
	.byte 0xCA, 0xF0, 0x0C, 0x19, 0x0C, 0x01, 0x02, 0x00, 0x03, 0xFF, 0xFC, 0xFC, 0x0B, 0x02, 0xC8, 0x36
	.byte 0x1B, 0xEC, 0x0D, 0xFA, 0xD2, 0xD7, 0xDF, 0xF5, 0xFB, 0x07, 0x0C, 0x0E, 0xF2, 0xFB, 0x08, 0x14
	.byte 0x06, 0x03, 0x04, 0xF8, 0xFB, 0xD6, 0x0B, 0x08, 0xF2, 0x19, 0xFE, 0x02, 0x0D, 0x0B, 0xEA, 0x27
	.byte 0xF7, 0x09, 0x05, 0xD3, 0xF7, 0x07, 0xF7, 0x0C, 0xF9, 0x22, 0xEF, 0x9A, 0x07, 0x02, 0xD6, 0x12
	.byte 0x23, 0xF7, 0xDE, 0x0B, 0xFB, 0xFE, 0x03, 0x16, 0x2E, 0xCC, 0xE7, 0xF7, 0xA2, 0x08, 0x0B, 0xFB
	.byte 0xFB, 0xFB, 0x04, 0xF9, 0xDD, 0xF9, 0x36, 0x05, 0xE0, 0x03, 0x18, 0xF7, 0xEA, 0x08, 0x41, 0x25
	.byte 0xFF, 0xF4, 0xE9, 0xFA, 0xF7, 0xE4, 0x37, 0xDF, 0x0E, 0xFD, 0x02, 0x12, 0xC4, 0x29, 0xEF, 0x08
	.byte 0xF0, 0x11, 0xF5, 0x00, 0xF5, 0x1D, 0xE4, 0x25, 0x09, 0xCB, 0x21, 0xF2, 0xF7, 0x07, 0xE7, 0xF9
	.byte 0xF5, 0x1A, 0xE0, 0xF8, 0x18, 0xEB, 0x16, 0xED, 0x13, 0xF6, 0x1D, 0xF2, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFB, 0xCC, 0x0A, 0x29, 0x06, 0xE2, 0xFC, 0x10, 0x20, 0x16, 0xE5, 0xEA
	.byte 0x20, 0xFD, 0xE4, 0xFD, 0x03, 0xDD, 0x06, 0x11, 0x17, 0x15, 0x08, 0x02, 0x04, 0xD3, 0xEF, 0x0E
	.byte 0x17, 0xFC, 0xE1, 0xF5, 0xFD, 0x0E, 0x01, 0x13, 0xF5, 0x02, 0x3D, 0xF8, 0x09, 0xF4, 0x07, 0xF6
	.byte 0x0C, 0xFD, 0xE8, 0x63, 0xD0, 0x17, 0x32, 0xDB, 0xFB, 0xE9, 0x00, 0x08, 0xF2, 0x23, 0xC0, 0xFB
	.byte 0x2E, 0xE7, 0x0D, 0xFF, 0xCF, 0xED, 0xF1, 0x09, 0x22, 0x32, 0x19, 0x0B, 0xFA, 0xF7, 0xF0, 0xEC
	.byte 0xE0, 0xDF, 0xE0, 0xE5, 0x0A, 0xF8, 0x0C, 0xF1, 0x38, 0xF2, 0xE0, 0x21, 0x03, 0xF7, 0x01, 0x41
	.byte 0xF7, 0xF7, 0xF6, 0xFE, 0xFA, 0xE9, 0x09, 0x11, 0x03, 0xE4, 0x0D, 0xE0, 0x04, 0xFE, 0xF6, 0x04
	.byte 0xF0, 0x4C, 0x0C, 0xCC, 0x06, 0x0D, 0x21, 0xFA, 0x04, 0xF2, 0xF7, 0xFD, 0x01, 0xF1, 0xF0, 0x1C
	.byte 0x01, 0xF1, 0x0B, 0x10, 0x09, 0x04, 0xEB, 0xDB, 0xD8, 0xFA, 0x16, 0x0C, 0xF1, 0xE9, 0xF2, 0xEF
	.byte 0xF0, 0xF7, 0xF6, 0xF7, 0x0D, 0xD9, 0x29, 0x05, 0xF7, 0x10, 0xDA, 0x19, 0x2E, 0xD1, 0x04, 0x31
	.byte 0xF2, 0x11, 0xFE, 0x06, 0x12, 0x05, 0xFA, 0xDF, 0xEA, 0x2C, 0x32, 0xFE, 0x01, 0x03, 0xFA, 0x07
	.byte 0x07, 0xFD, 0xEB, 0x26, 0xEE, 0x22, 0xF2, 0xD7, 0x3C, 0xF3, 0x06, 0x10, 0xE8, 0x23, 0x13, 0xF3
	.byte 0xDC, 0x18, 0x03, 0xEF, 0xF2, 0xF6, 0x24, 0x2C, 0xD4, 0xE3, 0xFD, 0x03, 0xCA, 0xF8, 0x0C, 0x37
	.byte 0x1A, 0x04, 0xFE, 0xFB, 0x02, 0xF5, 0x16, 0xE9, 0x02, 0x16, 0x01, 0xE7, 0xD9, 0x42, 0xCF, 0x15
	.byte 0xF8, 0xFE, 0x0A, 0xF2, 0xC4, 0x19, 0x06, 0x0A, 0x1B, 0xE7, 0x10, 0x05, 0xFE, 0xF7, 0x1A, 0xF3
	.byte 0xEC, 0x3A, 0xFE, 0x07, 0x34, 0xF7, 0x02, 0x05, 0xFC, 0xF1, 0x17, 0xFF, 0xDA, 0x17, 0x08, 0x1B
	.byte 0xFA, 0x00, 0xE5, 0xF9, 0x27, 0xF6, 0xF2, 0x1A, 0x0B, 0xD3, 0xF4, 0x09, 0xFB, 0x22, 0x04, 0xDD
	.byte 0x0A, 0x2B, 0xEA, 0xF5, 0x38, 0xF9, 0x14, 0x01, 0x0A, 0x01, 0xE6, 0x09, 0x5E, 0x0B, 0xE5, 0xF2
	.byte 0xF3, 0x01, 0xF5, 0x00, 0x0E, 0xFB, 0xFA, 0xF6, 0xFC, 0xF1, 0xF8, 0xD7, 0x15, 0xFB, 0x01, 0xE4
	.byte 0xF8, 0x16, 0xF7, 0x21, 0xE9, 0xFC, 0xFC, 0xF4, 0x27, 0x04, 0xF9, 0x03, 0xC4, 0x50, 0x08, 0xEF
	.byte 0x02, 0xFA, 0x0C, 0xFB, 0x01, 0x09, 0x0F, 0x1B, 0x1F, 0x1E, 0x1B, 0x17, 0x3D, 0x2F, 0x1A, 0x0A
	.byte 0xFB, 0xF8, 0xF4, 0xF3, 0x05, 0xEE, 0x19, 0xF1, 0xFC, 0xF1, 0xF5, 0x0C, 0xFE, 0xFE, 0xF0, 0xFE
	.byte 0xFA, 0x18, 0x0C, 0x0B, 0xFC, 0x09, 0x01, 0xF7, 0x0E, 0xD3, 0x39, 0x0C, 0x14, 0xDD, 0x1A, 0x0B
	.byte 0xC0, 0x20, 0xF6, 0xF6, 0x2A, 0xFC, 0xF7, 0xF0, 0x20, 0x18, 0x07, 0x0A, 0x34, 0xF5, 0xC7, 0x1D
	.byte 0x00, 0x08, 0x00, 0xFA, 0x11, 0xEF, 0xC8, 0xD8, 0x07, 0x14, 0x12, 0x0C, 0xFA, 0x10, 0x05, 0x07
	.byte 0xFF, 0x09, 0x01, 0x0A, 0x1D, 0x0C, 0x10, 0x0D, 0xFE, 0x17, 0x07, 0x09, 0xFD, 0xFC, 0xFB, 0x12
	.byte 0xC0, 0x0D, 0x37, 0xE7, 0x09, 0xF7, 0x18, 0x0E, 0xE7, 0x0F, 0xF5, 0xD8, 0xE2, 0x25, 0x01, 0xED
	.byte 0x16, 0xFB, 0xE1, 0x0D, 0xFE, 0x00, 0x07, 0xFC, 0x10, 0xBD, 0x0C, 0x42, 0xDC, 0x18, 0xF8, 0x12
	.byte 0xF1, 0xE9, 0x13, 0x00, 0xD3, 0xF9, 0x04, 0x03, 0xF3, 0x0D, 0x23, 0x05, 0x0D, 0x21, 0x0A, 0x1B
	.byte 0x17, 0x00, 0xF9, 0xF5, 0x2B, 0xB6, 0x24, 0xF4, 0x02, 0x05, 0xF8, 0x06, 0xDF, 0x0B, 0xF0, 0xF2
	.byte 0xFB, 0xF9, 0xFD, 0x11, 0xDE, 0x1B, 0xF0, 0x0B, 0xF7, 0x0F, 0x21, 0xE1, 0x08, 0xF0, 0x07, 0xFA
	.byte 0xF9, 0x3F, 0xC9, 0xEF, 0x0B, 0xFF, 0x14, 0xD2, 0x22, 0xE2, 0x06, 0x09, 0x13, 0x1C, 0xF7, 0x05
	.byte 0xE8, 0xF8, 0xE9, 0xFE, 0x1F, 0xED, 0xF0, 0xFB, 0xF1, 0xEE, 0x00, 0x1A, 0x12, 0x25, 0xFB, 0xF1
	.byte 0xFE, 0x11, 0x05, 0xE5, 0x15, 0xDF, 0x2C, 0x0C, 0xE5, 0xF7, 0x11, 0x0B, 0x19, 0xEB, 0xE1, 0xF9
	.byte 0x0D, 0x21, 0xF8, 0xE7, 0xF9, 0x07, 0xF6, 0x04, 0xFA, 0xF7, 0x30, 0xAE, 0xE9, 0xF8, 0x06, 0x0B
	.byte 0xE9, 0x03, 0xFD, 0x31, 0xE3, 0x19, 0x1F, 0x04, 0x0E, 0x10, 0x09, 0xFC, 0xEE, 0x0A, 0xE6, 0x03
	.byte 0x05, 0xD4, 0xF7, 0x09, 0xD1, 0xC9, 0x0F, 0x09, 0x1C, 0x01, 0x04, 0xFD, 0x2E, 0x06, 0xFA, 0xDA
	.byte 0xE3, 0xE1, 0xF1, 0xFA, 0x03, 0x00, 0x0E, 0xFA, 0x08, 0xCA, 0xCE, 0x21, 0xFB, 0x01, 0xF2, 0x21
	.byte 0xD0, 0x1A, 0xFC, 0xFB, 0xFD, 0xFB, 0xFD, 0xFB, 0xE4, 0xEA, 0x4D, 0x37, 0xFF, 0x02, 0x0A, 0x0A
	.byte 0xF7, 0xF2, 0xBE, 0xCF, 0x0B, 0xDC, 0xFA, 0xEC, 0x0A, 0xF6, 0x10, 0x0C, 0x04, 0xFF, 0xF0, 0x2D
	.byte 0xD4, 0xCE, 0x1F, 0xFE, 0x19, 0x2A, 0x17, 0xE0, 0xEA, 0x00, 0x0B, 0x14, 0xD8, 0xDD, 0xD8, 0xDC
	.byte 0xE0, 0xE6, 0xEB, 0xF3, 0x34, 0xEA, 0x06, 0xE8, 0xEC, 0x11, 0xFB, 0xF8, 0x24, 0xE7, 0xF5, 0x15
	.byte 0xE6, 0x06, 0x22, 0xF8, 0x07, 0x14, 0xFD, 0x05, 0xE7, 0xF8, 0x12, 0xFB, 0xF7, 0xFC, 0x01, 0xF7
	.byte 0x14, 0x14, 0x27, 0x30, 0xE8, 0x09, 0x05, 0xBF, 0x16, 0x1D, 0x04, 0x03, 0xD5, 0xF5, 0x20, 0xFA
	.byte 0x09, 0x13, 0xE5, 0xF6, 0xD1, 0xF2, 0x18, 0x0A, 0xF9, 0xDC, 0xF9, 0xFF, 0xFC, 0xFB, 0xFB, 0x10
	.byte 0x35, 0x19, 0xE6, 0xE3, 0xFC, 0xF4, 0x2D, 0xC6, 0xDE, 0x21, 0xFB, 0x02, 0xFF, 0x1B, 0xD0, 0x1F
	.byte 0xF1, 0x16, 0xFB, 0x04, 0x07, 0x07, 0xE7, 0xFD, 0x0B, 0xEA, 0x10, 0xF4, 0x08, 0xFD, 0x07, 0xF5
	.byte 0x2D, 0x0E, 0xB7, 0xED, 0x38, 0xD2, 0x18, 0xEC, 0x1C, 0xF4, 0xFE, 0xFF, 0xDC, 0xFD, 0xDF, 0x13
	.byte 0xFA, 0x07, 0x02, 0xF1, 0x05, 0xE1, 0xD3, 0x08, 0x23, 0x0D, 0x14, 0x00, 0xF7, 0x30, 0xF3, 0xD5
	.byte 0xFD, 0xF3, 0x02, 0xFB, 0x48, 0xBC, 0xE5, 0x02, 0x01, 0xFE, 0xF9, 0x05, 0x24, 0x21, 0xD8, 0xF4
	.byte 0xFC, 0xFB, 0x17, 0x13, 0x0C, 0x20, 0x19, 0x2E, 0x24, 0x21, 0x09, 0x0E, 0xFD, 0x06, 0x01, 0xF8
	.byte 0x00, 0xF6, 0xFB, 0xF9, 0xF9, 0xF9, 0xFB, 0xFB, 0x1F, 0xE5, 0x18, 0xE0, 0xFC, 0x0A, 0xF5, 0x15
	.byte 0xFD, 0x13, 0x17, 0xF7, 0x16, 0x18, 0xF6, 0xFF, 0xF6, 0xF3, 0xF9, 0xF5, 0x2A, 0xDF, 0x1F, 0x13
	.byte 0xF8, 0x00, 0xF6, 0xF0, 0x01, 0xEB, 0xEF, 0x0A, 0xF8, 0x0E, 0x08, 0x04, 0x0B, 0xFE, 0x05, 0xFE
	.byte 0xDF, 0x0B, 0xF0, 0x21, 0x0B, 0xFC, 0x09, 0xFC, 0x0B, 0x02, 0x06, 0xFB, 0x08, 0xFB, 0x0B, 0xFC
	.byte 0xFA, 0x1A, 0xDC, 0xF0, 0x00, 0x04, 0xFE, 0xF8, 0x0C, 0x06, 0xFF, 0x22, 0xD2, 0xEA, 0x09, 0x09
	.byte 0x15, 0x09, 0x05, 0xBE, 0xFB, 0x1A, 0x02, 0x0A, 0x0D, 0x02, 0x13, 0x09, 0x0C, 0xAF, 0x03, 0x0D
	.byte 0x0D, 0x00, 0xF2, 0x16, 0xDD, 0x06, 0xF9, 0xFC, 0x06, 0xFA, 0x0A, 0xFA, 0xE1, 0x26, 0xDF, 0x00
	.byte 0xF6, 0xF5, 0x05, 0xF4, 0x0C, 0xEF, 0x05, 0x00, 0xFA, 0x0D, 0xF7, 0x0A, 0x08, 0x19, 0x21, 0x02
	.byte 0xF4, 0x08, 0xFA, 0x0A, 0xFE, 0x15, 0x07, 0x11, 0x2B, 0x05, 0x0B, 0xF9, 0xF7, 0xEC, 0xDC, 0xEC
	.byte 0xE9, 0xFC, 0xFC, 0xFD, 0x1B, 0xF7, 0xF7, 0xCF, 0xD9, 0xDA, 0xF5, 0xF7, 0x06, 0x05, 0x17, 0x19
	.byte 0x05, 0x03, 0x03, 0x04, 0x01, 0x02, 0xFD, 0xFF, 0x57, 0x27, 0x11, 0xEB, 0xF7, 0xED, 0xF7, 0xF1
	.byte 0xF3, 0xF2, 0xEF, 0xF5, 0xF6, 0xF5, 0xF8, 0xFA, 0xFF, 0xFD, 0xFD, 0xFF, 0xCA, 0xDE, 0xE5, 0xF8
	.byte 0xF5, 0xFC, 0xFB, 0x00, 0x00, 0x04, 0x08, 0x06, 0x09, 0x07, 0x09, 0x07, 0x06, 0x05, 0x05, 0x05
	.byte 0x30, 0x0A, 0x13, 0xF6, 0x0C, 0xFF, 0x09, 0xFD, 0x02, 0x05, 0xFD, 0x02, 0xFE, 0xFE, 0x00, 0xFE
	.byte 0xE6, 0x06, 0x09, 0xF9, 0xF0, 0xF7, 0x02, 0x07, 0x07, 0xFB, 0xD5, 0x0B, 0x16, 0xF5, 0xF7, 0x22
	.byte 0x25, 0xF1, 0xF3, 0xFA, 0x01, 0xFF, 0x01, 0x01, 0xC0, 0x38, 0x34, 0xF5, 0xE5, 0x05, 0x04, 0x03
	.byte 0x01, 0x02, 0x01, 0x03, 0xFF, 0xFC, 0xFC, 0xF6, 0xF9, 0xFC, 0xFC, 0x02, 0xFF, 0xF9, 0xF9, 0xF4
	.byte 0xF6, 0xF1, 0xF7, 0xFB, 0xFB, 0xF5, 0xF0, 0xF3, 0x06, 0x10, 0x04, 0xF3, 0xF0, 0xF6, 0xFC, 0x02
	.byte 0xD1, 0xF3, 0x19, 0x2F, 0x13, 0xF2, 0xEC, 0xF8, 0xEF, 0x00, 0xFD, 0xF3, 0x01, 0x06, 0xEF, 0xF2
	.byte 0x0F, 0x01, 0x0A, 0x06, 0xE8, 0x00, 0xF6, 0x13, 0xBB, 0xF8, 0x0E, 0x31, 0x11, 0xFB, 0x21, 0xE3
	.byte 0x03, 0xFC, 0x00, 0x02, 0xF8, 0x05, 0xFA, 0x02, 0x78, 0xC8, 0xF4, 0xD1, 0x17, 0xF7, 0x06, 0xFB
	.byte 0x01, 0x02, 0xFB, 0x01, 0xF6, 0x04, 0xFF, 0xFF, 0x04, 0xFF, 0x00, 0xFD, 0x1E, 0xCC, 0xBD, 0x1E
	.byte 0x16, 0x0B, 0xFF, 0xFC, 0x03, 0x00, 0x07, 0x02, 0x00, 0x01, 0xF6, 0xFC, 0xF8, 0xF3, 0x05, 0x01
	.byte 0x01, 0xFF, 0x05, 0x0D, 0xF7, 0xFD, 0xF6, 0xC2, 0x16, 0x30, 0xFC, 0xFA, 0x02, 0x03, 0x05, 0x01
	.byte 0x01, 0x04, 0x01, 0x0D, 0x03, 0xEC, 0x0A, 0xF7, 0x0D, 0xFE, 0xFC, 0x09, 0xEC, 0x2C, 0xFF, 0x14
	.byte 0xE0, 0xBD, 0x13, 0x00, 0x1C, 0x0B, 0x08, 0x02, 0xF5, 0x0F, 0xED, 0xCB, 0x1F, 0x02, 0x22, 0x0A
	.byte 0x06, 0xFC, 0xC6, 0x08, 0x0A, 0x0D, 0x0E, 0x01, 0x0C, 0x02, 0x00, 0x00, 0x80, 0x25, 0xF8, 0x2C
	.byte 0xF7, 0x1A, 0xFD, 0x12, 0x02, 0x06, 0x0B, 0xFF, 0x09, 0x01, 0x05, 0x03, 0x00, 0x01, 0x01, 0x02
	.byte 0x0C, 0x03, 0xFE, 0xFD, 0x07, 0x19, 0x09, 0x12, 0xFA, 0xDB, 0x03, 0xF8, 0xF0, 0x03, 0xF6, 0xF9
	.byte 0x11, 0xDE, 0xD4, 0x0B, 0x11, 0xF1, 0xFD, 0xF0, 0xFF, 0xF3, 0x0B, 0xD2, 0xBF, 0xFE, 0x08, 0x0D
	.byte 0x02, 0x04, 0x04, 0x05, 0x0F, 0x05, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF7, 0x13, 0xF4, 0x0C
	.byte 0xE4, 0x26, 0x1D, 0xFF, 0x0C, 0x02, 0x05, 0x17, 0xF6, 0x03, 0x04, 0xF1, 0x15, 0xFC, 0x03, 0x03
	.byte 0x06, 0x11, 0xF7, 0xFC, 0xF8, 0xEC, 0x1A, 0x05, 0xF6, 0x06, 0x01, 0xED, 0x12, 0xF1, 0xF4, 0x2F
	.byte 0xFA, 0xFE, 0xF9, 0xF7, 0xFF, 0xEF, 0xFE, 0xFE, 0xF2, 0x1E, 0xF2, 0x02, 0xF9, 0xFC, 0xFF, 0xF4
	.byte 0x0B, 0xE7, 0x10, 0xFD, 0xF4, 0x0B, 0xF9, 0x07, 0xEF, 0x01, 0x13, 0xE4, 0x1F, 0xF9, 0xF6, 0x07
	.byte 0xF6, 0x03, 0x0C, 0x05, 0xF0, 0x06, 0x18, 0x29, 0xE3, 0xCA, 0x00, 0x01, 0x07, 0xFF, 0x05, 0xFA
	.byte 0x0D, 0x0A, 0xFC, 0xF8, 0x08, 0xF7, 0xE5, 0xCB, 0xDA, 0xFF, 0x0A, 0x13, 0x11, 0x10, 0x0C, 0x0C
	.byte 0x00, 0x03, 0xF9, 0xFC, 0x0D, 0x0C, 0xE1, 0xF2, 0x06, 0xFB, 0x03, 0x05, 0x11, 0x2B, 0x32, 0x19
	.byte 0x0A, 0x01, 0xFA, 0xFE, 0x7A, 0xFE, 0x04, 0x06, 0x7F, 0xEC, 0x9B, 0x4E, 0x9B, 0x4E, 0x7F, 0xEC
	.byte 0x04, 0x06, 0xD8, 0xFB, 0x01, 0x0B, 0xDA, 0xE5, 0x65, 0x7B, 0xB5, 0x1A, 0x22, 0xFC, 0x2F, 0xFF
	.byte 0x2F, 0xFF, 0x22, 0xFC, 0xB5, 0x1A, 0x65, 0x7B, 0xDA, 0xE5, 0x01, 0x0B, 0xD8, 0xFB, 0x00, 0x00
	.byte 0xE0, 0xE0, 0xE0, 0x00, 0xE4, 0xBD, 0xFB, 0x21, 0xD6, 0xFA, 0xE0, 0x12, 0xC7, 0xF6, 0xCA, 0x23
	.byte 0xF0, 0x1B, 0xD7, 0x2A, 0x13, 0xED, 0xD8, 0x24, 0xD3, 0x18, 0xEB, 0x28, 0xF8, 0xF2, 0xEE, 0x1C
	.byte 0x01, 0x0E, 0xC6, 0x35, 0xEE, 0xA8, 0xD9, 0x27, 0xDA, 0x15, 0xEE, 0x25, 0xED, 0x14, 0xD5, 0x26
	.byte 0x0A, 0x11, 0xD0, 0x36, 0xCC, 0xC6, 0xF3, 0x21, 0xD4, 0xFF, 0xF5, 0x20, 0xF4, 0xF5, 0xDE, 0x16
	.byte 0x0E, 0x00, 0xD2, 0x2E, 0xDB, 0xDD, 0xDE, 0x05, 0xE7, 0x2C, 0xE2, 0x2B, 0x06, 0xFC, 0xC1, 0x31
	.byte 0xE1, 0x2B, 0xD7, 0x2B, 0xE9, 0x1E, 0xD5, 0x29, 0xD5, 0x1A, 0xF2, 0x2C, 0xDF, 0x01, 0xF3, 0x1B
	.byte 0xF3, 0x12, 0xDB, 0x25, 0xD2, 0xB7, 0xD3, 0x22, 0xDC, 0x18, 0xE7, 0x22, 0xDC, 0xF5, 0xEC, 0x13
	.byte 0xE7, 0x0C, 0xEE, 0x21, 0xDC, 0xBB, 0xC5, 0x22, 0xD3, 0x06, 0x08, 0x2E, 0xEA, 0xF2, 0xE8, 0x12
	.byte 0xFF, 0x0D, 0xD4, 0x2C, 0xD9, 0xD0, 0xE6, 0x0F, 0xE0, 0x1F, 0xDB, 0x22, 0xDF, 0x0F, 0xD2, 0x1F
	.byte 0xE8, 0x1E, 0xDC, 0x25, 0xD7, 0x1F, 0xE9, 0x29, 0xCE, 0x16, 0xFC, 0x32, 0xEA, 0x02, 0xEB, 0x1C
	.byte 0xEF, 0x1E, 0xDE, 0x28, 0xF9, 0xC4, 0xE4, 0x1D, 0xDA, 0x2A, 0xE4, 0x2A, 0xD4, 0xF5, 0x15, 0x2B
	.byte 0xF0, 0x08, 0xD4, 0x22, 0xD9, 0xC9, 0xD5, 0x15, 0xF5, 0xDD, 0x1A, 0x29, 0xF7, 0x00, 0xDE, 0x1D
	.byte 0xF8, 0x79, 0xAF, 0x71, 0x07, 0xF0, 0xEA, 0x21, 0xDB, 0x21, 0xE1, 0x24, 0xE5, 0xF9, 0xDC, 0x11
	.byte 0xDE, 0x46, 0xC7, 0x41, 0xDB, 0xF5, 0xD0, 0x15, 0xD8, 0x11, 0xFF, 0x2C, 0xDF, 0x06, 0xFA, 0x21
	.byte 0xF7, 0x00, 0xEC, 0x22, 0xEB, 0x45, 0xDF, 0x39, 0xE3, 0x21, 0xE1, 0x23, 0xC9, 0x0C, 0xFF, 0x31
	.byte 0xDF, 0x1B, 0xEA, 0x23, 0xCE, 0xDF, 0xD1, 0x11, 0xCE, 0x36, 0x33, 0x5E, 0xFF, 0xFB, 0xD4, 0x23
	.byte 0xFC, 0x16, 0xD8, 0x2D, 0xD9, 0xBE, 0xE7, 0x18, 0xDF, 0x01, 0xE6, 0x14, 0xE8, 0xE9, 0xE7, 0x0C
	.byte 0xF5, 0x15, 0xD3, 0x2C, 0xE7, 0xD3, 0xED, 0x11, 0xD5, 0x69, 0xF0, 0x52, 0x05, 0xEB, 0x01, 0x29
	.byte 0xF0, 0x0B, 0xDF, 0x1E, 0xF3, 0x9D, 0xFC, 0x39, 0xDB, 0x21, 0xF1, 0x2C, 0xE7, 0x25, 0xC1, 0x36
	.byte 0xDC, 0x18, 0xE1, 0x1F, 0xCB, 0xC8, 0xDA, 0x1A, 0xD7, 0xFC, 0x04, 0x25, 0xDF, 0x0D, 0xE2, 0x18
	.byte 0x31, 0x34, 0xA2, 0x72, 0xFB, 0xE2, 0xF1, 0x17, 0x01, 0x26, 0xD8, 0x38, 0xE9, 0x0C, 0xDC, 0x1D
	.byte 0xEF, 0x28, 0xD1, 0x33, 0xDB, 0xD7, 0xD9, 0x0B, 0xCF, 0x22, 0x00, 0x3A, 0xEE, 0xF9, 0xFC, 0x22
	.byte 0xF0, 0x11, 0xE5, 0x23, 0x1E, 0x05, 0xC2, 0x41, 0x04, 0x30, 0xBC, 0x4C, 0xD5, 0x0B, 0xF5, 0x26
	.byte 0xEE, 0x13, 0xF1, 0x29, 0xE9, 0xC2, 0xD9, 0x17, 0xD6, 0x0A, 0xFE, 0x29, 0xEB, 0xF3, 0xF3, 0x19
	.byte 0xF7, 0x0D, 0xD1, 0x2A, 0xE9, 0xC2, 0xE8, 0x18, 0xD4, 0x3C, 0xEB, 0x3A, 0xEE, 0xFD, 0xCC, 0x20
	.byte 0xEA, 0x16, 0xDC, 0x22, 0xB5, 0x39, 0x10, 0x5A, 0xED, 0x03, 0x0A, 0x2D, 0xE3, 0x17, 0xDA, 0x20
	.byte 0xFB, 0xC2, 0xCD, 0x26, 0xCD, 0x28, 0xEE, 0x35, 0xD6, 0x0D, 0xE8, 0x20, 0xDE, 0x0E, 0xEC, 0x1E
	.byte 0xC8, 0xB5, 0xE6, 0x25, 0xE6, 0x20, 0x0F, 0x3B, 0xE6, 0x11, 0xE3, 0x1D, 0xF9, 0x1C, 0xCC, 0x35
	.byte 0xF4, 0xE2, 0x05, 0x1E, 0xFB, 0xD0, 0xFB, 0x23, 0x02, 0x02, 0xD5, 0x28, 0x15, 0x10, 0x10, 0x4B
	.byte 0xE7, 0xD3, 0xE0, 0x0A, 0xD5, 0x12, 0xF6, 0x2A, 0x09, 0x00, 0xFF, 0x34, 0xFF, 0x07, 0xE2, 0x24
	.byte 0x13, 0xD0, 0xFC, 0x30, 0xE4, 0x19, 0xE3, 0x20, 0xEA, 0x00, 0xE1, 0x16, 0xE0, 0x11, 0xF6, 0x24
	.byte 0xC0, 0xD7, 0xC2, 0x24, 0xCC, 0x0F, 0x10, 0x3A, 0xE2, 0xEA, 0xE0, 0x06, 0xF9, 0x09, 0xDA, 0x24
	.byte 0xE0, 0xE0, 0xE0, 0x00, 0xE1, 0xC6, 0xF0, 0x16, 0xD7, 0xE8, 0xD5, 0x0E, 0xC8, 0xEA, 0xC9, 0x1D
	.byte 0xF3, 0x21, 0xD7, 0x2F, 0xFC, 0xD9, 0xF7, 0x1D, 0xD7, 0x0F, 0xF4, 0x26, 0xF8, 0xF1, 0xF4, 0x1F
	.byte 0x01, 0x02, 0xD4, 0x28, 0xEA, 0xBE, 0xD6, 0x1B, 0xDA, 0x1C, 0xE9, 0x26, 0xEB, 0x0E, 0xDB, 0x1F
	.byte 0x00, 0x15, 0xCE, 0x34, 0xCB, 0xB9, 0xE5, 0x21, 0xDB, 0xFF, 0xED, 0x19, 0xED, 0xFB, 0xE4, 0x16
	.byte 0x06, 0x41, 0xD4, 0x4A, 0xDF, 0xD0, 0xDF, 0x09, 0xD8, 0x39, 0xF2, 0x3A, 0xEF, 0x04, 0xD3, 0x20
	.byte 0xE1, 0x26, 0xDF, 0x24, 0xE9, 0x1C, 0xD8, 0x27, 0xD5, 0x1D, 0xF4, 0x2E, 0xDE, 0x0D, 0xE9, 0x1C
	.byte 0xF0, 0x0F, 0xE5, 0x22, 0xF2, 0xAE, 0xF1, 0x2B, 0xE1, 0x19, 0xE0, 0x1D, 0xEB, 0x05, 0xFB, 0x26
	.byte 0xD1, 0xC1, 0xCD, 0x21, 0xD2, 0x0C, 0x03, 0x2F, 0xE4, 0xEF, 0xE3, 0x0B, 0xF6, 0x0E, 0xD8, 0x26
	.byte 0xFD, 0xFE, 0xFF, 0x00, 0xFC, 0x05, 0x23, 0xD8, 0xF7, 0x0D, 0xD4, 0x05, 0xE5, 0xFF, 0xF9, 0x06
	.byte 0xF5, 0x07, 0xF8, 0x07, 0x13, 0xF2, 0x0F, 0xFC, 0x09, 0xF6, 0x0A, 0xF8, 0x0A, 0xF7, 0xFF, 0x01
	.byte 0x00, 0x00, 0x02, 0x05, 0xEE, 0x16, 0xCB, 0x32, 0x01, 0xE9, 0x32, 0xDC, 0x0F, 0x03, 0xF3, 0x0E
	.byte 0xF6, 0x06, 0x01, 0x05, 0xFD, 0x04, 0xFE, 0x05, 0xE0, 0x19, 0x05, 0xFE, 0xFF, 0xFC, 0x01, 0x0B
	.byte 0xE3, 0x1A, 0xFA, 0xF1, 0x1E, 0xEE, 0x00, 0x0F, 0xEF, 0x28, 0xD7, 0x03, 0x09, 0xFE, 0xFE, 0x03
	.byte 0xFD, 0xFF, 0xFB, 0x02, 0x15, 0xFA, 0xF0, 0xEB, 0x17, 0x02, 0x3C, 0x0F, 0x10, 0xF0, 0xF7, 0x0E
	.byte 0x09, 0xFF, 0x07, 0xF7, 0x00, 0x01, 0x01, 0x00, 0xFF, 0xFA, 0x11, 0xE4, 0x36, 0xD3, 0xFF, 0x01
	.byte 0xFF, 0xFA, 0xFA, 0x02, 0x0B, 0x1A, 0xE3, 0xFE, 0x2E, 0xEB, 0x22, 0x0C, 0xE9, 0x20, 0xE9, 0x10
	.byte 0xF6, 0x03, 0x42, 0x13, 0xEC, 0x18, 0x07, 0x0B, 0xFD, 0x00, 0xFD, 0xFF, 0xCE, 0xD2, 0x02, 0xEE
	.byte 0xFD, 0x04, 0xFF, 0xFE, 0x03, 0xFD, 0xED, 0x29, 0xDC, 0x09, 0x0B, 0xE8, 0x15, 0xF0, 0x09, 0xFD
	.byte 0xE7, 0xFD, 0x0A, 0x12, 0xF7, 0xFE, 0xFB, 0xFF, 0xFB, 0x06, 0xFC, 0xFD, 0x02, 0xE6, 0x15, 0xED
	.byte 0x23, 0xF1, 0x07, 0xF3, 0x11, 0xED, 0x27, 0xD5, 0x30, 0xE1, 0x10, 0xF7, 0x07, 0xFE, 0xFB, 0x03
	.byte 0xFC, 0x09, 0xED, 0x1B, 0xC9, 0x3F, 0xDD, 0x0A, 0x1A, 0xD4, 0xFE, 0x09, 0x04, 0x01, 0xFA, 0x08
	.byte 0xF7, 0x05, 0xF8, 0xFF, 0xFD, 0xF0, 0x2D, 0xD6, 0x05, 0x0F, 0xF0, 0x0A, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x18, 0xC9, 0x2F, 0xDA, 0x1B, 0xED, 0x07, 0xFD, 0x01
	.byte 0x10, 0x1B, 0x14, 0xED, 0x12, 0x05, 0xF9, 0x01, 0xFB, 0x02, 0xFA, 0x08, 0xEA, 0x00, 0xFD, 0xFD
	.byte 0x08, 0xFF, 0x07, 0xF8, 0x01, 0xFD, 0x05, 0x00, 0x11, 0xD0, 0x3A, 0xCC, 0x1D, 0xF9, 0xFE, 0x03
	.byte 0xF6, 0x06, 0xE6, 0x3A, 0xE1, 0x01, 0xFA, 0x03, 0x5D, 0xE3, 0x27, 0x03, 0x11, 0x05, 0x06, 0xFF
	.byte 0xFF, 0xFF, 0x1B, 0x0D, 0x0A, 0x13, 0xF9, 0xDE, 0x0C, 0x0A, 0xFC, 0x09, 0xB4, 0x09, 0x08, 0xE4
	.byte 0xFE, 0xF5, 0x02, 0xFF, 0x03, 0x01, 0xAD, 0x26, 0xD9, 0x04, 0xF0, 0xFA, 0xFE, 0xFB, 0x05, 0xFE
	.byte 0xE8, 0x15, 0xEC, 0x05, 0xFB, 0xF9, 0x0E, 0xF6, 0x02, 0xE5, 0x10, 0xEC, 0x00, 0xE0, 0x1A, 0x13
	.byte 0x08, 0xF5, 0xD7, 0x1F, 0x1C, 0xE5, 0xE0, 0x22, 0x2A, 0x22, 0xEF, 0x16, 0xF6, 0x0D, 0xE3, 0x12
	.byte 0xF4, 0xE6, 0xE8, 0x0B, 0x16, 0x05, 0xFB, 0xFB, 0x36, 0xBC, 0xD5, 0x39, 0xE7, 0x18, 0x04, 0x04
	.byte 0x1A, 0xF8, 0xF4, 0xEF, 0x36, 0x1E, 0xD3, 0x01, 0x0A, 0xF1, 0x12, 0xD7, 0x0B, 0x44, 0xBD, 0x25
	.byte 0xF0, 0xE8, 0xF0, 0x26, 0xEA, 0x06, 0xE3, 0x1E, 0x42, 0xE5, 0x05, 0x07, 0xF0, 0x0D, 0x02, 0xF4
	.byte 0xF9, 0xFD, 0xEC, 0x24, 0x04, 0xE4, 0x09, 0x03, 0x20, 0x30, 0x1A, 0x27, 0x03, 0x00, 0x07, 0xEB
	.byte 0xF3, 0x05, 0xAE, 0xF9, 0x49, 0xEC, 0x22, 0xF7, 0xFB, 0x01, 0xFF, 0x0A, 0xFB, 0xF6, 0xFF, 0x09
	.byte 0x01, 0xF7, 0x0A, 0x00, 0xF2, 0x0B, 0xFF, 0xFE, 0xFF, 0x0B, 0x14, 0x60, 0xAF, 0xEA, 0xF4, 0xF7
	.byte 0xC6, 0x09, 0x18, 0xE2, 0x1A, 0xDD, 0x1B, 0xF4, 0x0D, 0xEE, 0x38, 0xC5, 0x0F, 0xF9, 0x17, 0xF1
	.byte 0xFF, 0x06, 0xE7, 0x0E, 0xEA, 0xEC, 0x2F, 0xF5, 0x10, 0x02, 0x26, 0xE9, 0xED, 0xE2, 0xF7, 0x28
	.byte 0xF5, 0x05, 0x04, 0xFA, 0x08, 0x1A, 0xEB, 0xF5, 0x7F, 0x04, 0x01, 0x06, 0xF7, 0x02, 0xF9, 0xFE
	.byte 0xFD, 0x07, 0xFB, 0x0A, 0xED, 0x07, 0x96, 0x5B, 0xFD, 0x09, 0xFC, 0x15, 0xF8, 0x1A, 0xB0, 0x08
	.byte 0x01, 0xFE, 0xF6, 0xEF, 0xEF, 0xE5, 0x20, 0x47, 0x06, 0xE3, 0x0B, 0xE9, 0x36, 0xDA, 0x1D, 0xEA
	.byte 0x27, 0x57, 0xE1, 0xF4, 0xEC, 0x03, 0xFE, 0xFE, 0x02, 0x14, 0x00, 0xFF, 0xDD, 0x1B, 0x09, 0xFA
	.byte 0xF4, 0x03, 0xF4, 0xFA, 0x0D, 0x01, 0x0E, 0xEA, 0xC5, 0xF1, 0xEF, 0xE7, 0x0D, 0xF9, 0x07, 0x03
	.byte 0x00, 0x01, 0xF9, 0x06, 0xFD, 0x3D, 0xDB, 0xE9, 0xE9, 0xE3, 0x26, 0xE1, 0x1B, 0x01, 0xF8, 0x02
	.byte 0xE5, 0x17, 0xE6, 0x24, 0xDE, 0x05, 0x18, 0xE8, 0xFA, 0x07, 0x03, 0xC5, 0x4E, 0xC2, 0x2C, 0xF0
	.byte 0x01, 0x06, 0x00, 0x11, 0x08, 0x2D, 0x00, 0x92, 0x06, 0x0E, 0xFE, 0x20, 0xB3, 0xC8, 0x3E, 0xFD
	.byte 0x03, 0xF3, 0x04, 0xF0, 0x66, 0xF1, 0xDC, 0xFF, 0x09, 0x8F, 0x06, 0x17, 0x00, 0x09, 0x09, 0x05
	.byte 0xF8, 0xFF, 0xF2, 0x05, 0xF4, 0x79, 0xCB, 0xE5, 0xF8, 0xF7, 0x16, 0xF3, 0x03, 0x02, 0xFD, 0x01
	.byte 0xFE, 0xB9, 0x5F, 0x26, 0xED, 0x0F, 0xF0, 0xFB, 0x47, 0x0A, 0x02, 0xE0, 0xF3, 0xFB, 0x0F, 0xFF
	.byte 0xFE, 0xF2, 0xAB, 0x1E, 0x1D, 0x06, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x02, 0xBF, 0xC8, 0xF7, 0x12, 0x12, 0x17, 0xF2, 0xFE, 0x00, 0x0C, 0xE3, 0x1A, 0xF4, 0x01, 0x02
	.byte 0xF4, 0xC0, 0x5A, 0xFA, 0x04, 0x01, 0x05, 0xFB, 0x92, 0xFD, 0xE1, 0x16, 0xE3, 0x09, 0x00, 0x08
	.byte 0xD8, 0xFB, 0x15, 0xFB, 0xFB, 0x0D, 0x0A, 0xEE, 0x28, 0x01, 0x23, 0xEC, 0x1E, 0xE4, 0x0B, 0xFA
	.byte 0x13, 0x07, 0x0E, 0x12, 0xC0, 0x09, 0xFA, 0x10, 0x33, 0x44, 0x08, 0x10, 0x0C, 0xF8, 0x00, 0xF7
	.byte 0x14, 0xEA, 0x19, 0x07, 0xFC, 0xF3, 0x29, 0xDD, 0x5D, 0xEE, 0xCA, 0x0B, 0xFF, 0x01, 0xF7, 0x04
	.byte 0xBE, 0x42, 0xE1, 0x14, 0xEA, 0x19, 0xE9, 0x0B, 0x0A, 0x09, 0x13, 0x0F, 0x0B, 0xFB, 0xE1, 0xF6
	.byte 0xE9, 0xE4, 0xFA, 0xFA, 0xFD, 0xFC, 0x05, 0x03, 0xE4, 0x16, 0xF5, 0xD6, 0x19, 0xE7, 0xF0, 0x29
	.byte 0x22, 0x2F, 0xFA, 0x02, 0x2A, 0xED, 0xEA, 0x05, 0xD9, 0x20, 0x06, 0xDD, 0x16, 0x11, 0xE2, 0x08
	.byte 0xE6, 0xF5, 0xF5, 0x03, 0xF4, 0x21, 0x21, 0xDB, 0x15, 0xFF, 0x06, 0xFC, 0x03, 0x00, 0xFB, 0x05
	.byte 0x0C, 0xF4, 0x39, 0x1B, 0xC3, 0xFD, 0x14, 0xEF, 0x02, 0x00, 0x04, 0x00, 0xFE, 0xDF, 0xC6, 0x51
	.byte 0xE9, 0x27, 0xF6, 0xFB, 0x02, 0x06, 0xF9, 0x05, 0x04, 0xFD, 0xFE, 0xF3, 0xE9, 0xB8, 0x6B, 0x0F
	.byte 0xFB, 0x00, 0xF9, 0xFD, 0xFA, 0x05, 0xFC, 0x0F, 0x2F, 0x0C, 0xE1, 0x19, 0xF0, 0x08, 0x16, 0xE7
	.byte 0xC2, 0xC8, 0xEE, 0x0E, 0x1C, 0x0C, 0x02, 0xF5, 0x4A, 0xBE, 0x29, 0xEC, 0xF9, 0x10, 0xEC, 0x10
	.byte 0xF8, 0x00, 0xF0, 0x04, 0xED, 0x5C, 0x0C, 0xC5, 0xF2, 0xD9, 0x31, 0xE7, 0xF0, 0x17, 0xE5, 0x13
	.byte 0xFD, 0xDF, 0x13, 0x55, 0xE3, 0x06, 0xF9, 0xF6, 0x10, 0xF9, 0xF4, 0x01, 0xFA, 0x02, 0x04, 0xFE
	.byte 0x40, 0x0A, 0xE7, 0x29, 0xFE, 0xE1, 0x0F, 0x00, 0x6E, 0x32, 0x45, 0x23, 0x1C, 0x13, 0xF6, 0x02
	.byte 0xD5, 0xCF, 0xC8, 0xF1, 0xF0, 0x0A, 0x03, 0x0C, 0xFF, 0xF8, 0x01, 0x1A, 0xF4, 0xFF, 0x07, 0xF5
	.byte 0xE5, 0x29, 0x19, 0x01, 0xF5, 0xEE, 0x16, 0xF9, 0xFF, 0xD1, 0xF8, 0x17, 0xFD, 0xEF, 0xF9, 0x12
	.byte 0x83, 0x3B, 0xFB, 0x03, 0x12, 0x01, 0x02, 0x03, 0x1B, 0xDD, 0x41, 0xCB, 0x32, 0xD2, 0x25, 0xEB
	.byte 0xE4, 0x07, 0x0E, 0xDB, 0xFB, 0xFB, 0x0C, 0x05, 0xF8, 0x4E, 0xED, 0x15, 0xFA, 0xF0, 0x08, 0xF9
	.byte 0x05, 0x02, 0x07, 0x02, 0x0A, 0xFA, 0x0C, 0xC4, 0x2C, 0x0B, 0xDC, 0xE0, 0x1F, 0x00, 0x02, 0xFE
	.byte 0x02, 0x01, 0xFD, 0x07, 0xF6, 0x11, 0xEB, 0x0A, 0x06, 0xFE, 0x13, 0xFE, 0x3B, 0xDA, 0xAA, 0x26
	.byte 0x08, 0xD7, 0xE2, 0xD3, 0xDF, 0x07, 0x0F, 0x1C, 0x1D, 0xF9, 0x18, 0xD8, 0x07, 0x07, 0x05, 0xFE
	.byte 0x09, 0x18, 0xE9, 0xEE, 0x06, 0xE3, 0x1E, 0x02, 0x1C, 0x31, 0xF5, 0xD2, 0x0A, 0x2B, 0xF3, 0xF7
	.byte 0xFF, 0xFD, 0xF9, 0xF9, 0xEF, 0xFA, 0x61, 0xDF, 0xEB, 0x03, 0x05, 0x01, 0x0C, 0xD5, 0xF8, 0x1C
	.byte 0x07, 0xD5, 0xF9, 0x11, 0xEC, 0x13, 0xFF, 0x02, 0xF3, 0x09, 0x36, 0x22, 0x09, 0xE4, 0xF5, 0xF7
	.byte 0xEF, 0x6E, 0xC5, 0x2C, 0xE6, 0x00, 0x03, 0xF4, 0xD1, 0x49, 0xDE, 0xD5, 0x26, 0xDF, 0x10, 0xFB
	.byte 0xD2, 0xFC, 0xFA, 0xFE, 0xE7, 0x13, 0xE3, 0x1C, 0xF3, 0x05, 0x0E, 0x1B, 0xD8, 0xD5, 0x04, 0x20
	.byte 0xF3, 0xFE, 0xDD, 0xFC, 0x70, 0xD6, 0x09, 0xF4, 0x25, 0xE4, 0x11, 0x0E, 0xED, 0x23, 0xD9, 0x17
	.byte 0x03, 0xF2, 0xFF, 0xC7, 0xFB, 0x5E, 0xF7, 0x03, 0xD9, 0x05, 0x1E, 0xF6, 0xE0, 0x2A, 0xF3, 0xF2
	.byte 0x9F, 0xC1, 0x1E, 0xF7, 0x01, 0xF9, 0x0C, 0x05, 0x14, 0x11, 0xF7, 0xDC, 0xE2, 0x19, 0x2F, 0xF7
	.byte 0xF1, 0x0C, 0xEA, 0x62, 0xF8, 0xCE, 0x0F, 0xE5, 0x15, 0xF0, 0xF5, 0x02, 0x0C, 0xF6, 0x0A, 0xFD
	.byte 0x21, 0x24, 0xA0, 0x00, 0xEF, 0x1F, 0xF7, 0x09, 0x03, 0xEC, 0x0D, 0xF5, 0x08, 0xFC, 0x0A, 0xF6
	.byte 0x09, 0x01, 0x70, 0xBA, 0xE5, 0x05, 0xEB, 0x02, 0xC7, 0xFD, 0xE3, 0x0A, 0x13, 0xEB, 0x15, 0xF6
	.byte 0xBE, 0xFD, 0x5B, 0xDD, 0x1E, 0xF4, 0x00, 0xF9, 0x3B, 0xE4, 0x1A, 0x02, 0x0E, 0xEE, 0x01, 0x01
	.byte 0x0B, 0x11, 0x14, 0xCA, 0xC5, 0x1B, 0x04, 0x1D, 0x20, 0x05, 0x13, 0x0C, 0xFC, 0x01, 0x07, 0xF6
	.byte 0x05, 0xFE, 0x0A, 0x00, 0x17, 0xFB, 0x1C, 0x98, 0x2E, 0x0B, 0x10, 0x03, 0x1D, 0x01, 0xF8, 0xF2
	.byte 0x01, 0x07, 0xCE, 0x58, 0xC2, 0x1A, 0x08, 0xEF, 0xF2, 0x32, 0x00, 0x20, 0xF4, 0xFD, 0xE5, 0x12
	.byte 0xF8, 0xFB, 0x08, 0x03, 0xEC, 0xF5, 0x25, 0xF4, 0x09, 0x21, 0x2E, 0x9B, 0xFF, 0xFC, 0x01, 0x06
	.byte 0xFF, 0x1C, 0xD6, 0xF1, 0x10, 0x05, 0xFF, 0xFE, 0xC9, 0x55, 0x26, 0xF7, 0xFC, 0x0B, 0xFE, 0xF7
	.byte 0xFA, 0x03, 0xEC, 0xF6, 0xB3, 0x59, 0x18, 0xFD, 0x98, 0xC7, 0xE6, 0xE1, 0xEC, 0xFA, 0xF7, 0x0E
	.byte 0x14, 0xE9, 0x2E, 0xF1, 0xE1, 0x1C, 0x01, 0xF1, 0xFE, 0x06, 0xFE, 0x1F, 0x2D, 0xB4, 0x17, 0xE7
	.byte 0x27, 0x0C, 0xF2, 0xEC, 0xE3, 0xC3, 0xBD, 0xB4, 0xE0, 0xB9, 0xBD, 0x44, 0x4D, 0x2E, 0x22, 0x05
	.byte 0xF3, 0xD0, 0xD2, 0xB8, 0xAF, 0xAC, 0xC4, 0xC6, 0xD8, 0xE4, 0x52, 0x5D, 0x44, 0x2D, 0x1D, 0x03
	.byte 0xED, 0xD1, 0xE4, 0xD5, 0xDD, 0xE2, 0xF8, 0xF3, 0xD9, 0xA5, 0xA5, 0x85, 0xA0, 0x0A, 0x0A, 0xFA
	.byte 0xEE, 0xC9, 0xC4, 0xA5, 0xC8, 0xDC, 0xE5, 0xF0, 0xD0, 0xB5, 0x28, 0x1C, 0xF6, 0xE4, 0x23, 0x09
	.byte 0x25, 0x13, 0x01, 0xEC, 0xE1, 0xD7, 0xEE, 0xE7, 0xDD, 0xBC, 0xB0, 0x2D, 0x1B, 0xFF, 0x2F, 0x0D
	.byte 0x00, 0xE3, 0xDD, 0xC7, 0xCE, 0xB1, 0xB7, 0xDA, 0xED, 0x05, 0x23, 0x0E, 0xF6, 0xE9, 0x10, 0xF8
	.byte 0x05, 0xE8, 0xD8, 0xC2, 0xE9, 0xE5, 0xEA, 0xF0, 0xEE, 0xD2, 0xB8, 0xB3, 0x2B, 0x15, 0x21, 0x01
	.byte 0xB0, 0xBA, 0xBA, 0xC0, 0xC8, 0xCC, 0xD9, 0xDF, 0xE1, 0xDA, 0xED, 0xED, 0xF1, 0x20, 0x21, 0xFE
	.byte 0x07, 0xF1, 0xF1, 0xE8, 0xE9, 0xDF, 0xD7, 0xC8, 0xE8, 0xC7, 0x05, 0x59, 0x40, 0x29, 0x1B, 0x05
	.byte 0xF7, 0xD1, 0xC4, 0x9F, 0x9F, 0x84, 0xEC, 0xF7, 0xD4, 0xB7, 0x1F, 0x1D, 0xFC, 0x40, 0x30, 0x07
	.byte 0xDD, 0xC7, 0x00, 0xFD, 0xE6, 0xD1, 0xFD, 0xFA, 0xD8, 0xB4, 0xB1, 0xD0, 0x0C, 0x51, 0x37, 0x0A
	.byte 0x09, 0xE8, 0xD5, 0xB7, 0xC7, 0xBB, 0x10, 0x05, 0xE4, 0xCB, 0x12, 0x1D, 0x14, 0x00, 0xFC, 0xF5
	.byte 0x06, 0xF3, 0x17, 0x07, 0xEF, 0xDD, 0xDB, 0xDB, 0xE2, 0xBC, 0xC1, 0x06, 0x18, 0xF7, 0xF2, 0x03
	.byte 0x15, 0xF3, 0xE5, 0xC7, 0xCF, 0xB0, 0xE8, 0xD7, 0xFB, 0xF0, 0xFB, 0x01, 0x2D, 0x19, 0x0C, 0xF9
	.byte 0x03, 0xF1, 0xFA, 0xF0, 0xF1, 0xF8, 0x06, 0xF3, 0xD6, 0xAF, 0xB0, 0xA9, 0x0E, 0x01, 0xF6, 0xFD
	.byte 0xD5, 0xBB, 0xD2, 0xE8, 0xE4, 0xE3, 0x24, 0x06, 0xD5, 0xC8, 0xF4, 0x0C, 0x36, 0x4F, 0x2B, 0x09
	.byte 0x36, 0x16, 0x02, 0x08, 0xF4, 0xD5, 0xD2, 0xCC, 0xDA, 0xBB, 0xA7, 0xFB, 0x4B, 0x26, 0x21, 0x05
	.byte 0xF3, 0xCB, 0xC2, 0xA9, 0xA7, 0x8F, 0x9D, 0xC9, 0xDE, 0xDB, 0x3E, 0x37, 0x21, 0x10, 0x15, 0xFE
	.byte 0xEF, 0xD2, 0xE3, 0xDA, 0xDA, 0xD0, 0xD9, 0xD6, 0xDC, 0xB5, 0xB8, 0xA8, 0xD0, 0xE2, 0x15, 0x02
	.byte 0xF1, 0xC7, 0xC0, 0x9E, 0xAC, 0xB4, 0x19, 0x01, 0xD2, 0xB0, 0xF4, 0x12, 0xF9, 0x03, 0x22, 0x06
	.byte 0x26, 0x1F, 0x17, 0x04, 0xFF, 0x14, 0x0E, 0xF1, 0xD5, 0xB2, 0xA5, 0xE8, 0x0E, 0xFD, 0x36, 0x10
	.byte 0x00, 0xE5, 0xE4, 0xD4, 0xC8, 0xAD, 0xA4, 0xA7, 0xFD, 0x22, 0x38, 0x29, 0x24, 0x16, 0x14, 0xF8
	.byte 0xF9, 0xDD, 0xD6, 0xC2, 0xCF, 0x03, 0x0C, 0xF6, 0xCE, 0xA9, 0xA0, 0xBE, 0x5C, 0x46, 0x26, 0x09
	.byte 0xBA, 0xB9, 0xC2, 0xD6, 0xD9, 0xD5, 0xF5, 0xF9, 0xCE, 0xB1, 0xC6, 0xCE, 0xE1, 0x20, 0x1F, 0xFA
	.byte 0xFC, 0xE7, 0x07, 0xEF, 0xDA, 0xBA, 0xC6, 0xE5, 0xD5, 0xAD, 0xE4, 0x3B, 0x24, 0x14, 0x1F, 0x02
	.byte 0xE5, 0xB9, 0xB0, 0x93, 0x9E, 0xB5, 0xDF, 0xE0, 0xE1, 0xFE, 0x21, 0x0F, 0xFA, 0x2B, 0x21, 0xFB
	.byte 0x00, 0xEA, 0xF6, 0xE5, 0xDE, 0xCF, 0xF5, 0xEC, 0xD7, 0xA5, 0x9C, 0x87, 0xD9, 0x39, 0x29, 0x0A
	.byte 0xED, 0xCE, 0xDA, 0xC5, 0xC4, 0xBA, 0xEE, 0xEC, 0xF8, 0xE1, 0xF8, 0xF1, 0x01, 0xF2, 0xE6, 0xE7
	.byte 0x21, 0x15, 0x20, 0x11, 0x01, 0xED, 0xED, 0xE6, 0xC6, 0xAF, 0xDD, 0xEA, 0x2D, 0x1E, 0x0B, 0xF5
	.byte 0x03, 0xE6, 0xD0, 0xA9, 0xBD, 0xAD, 0xC6, 0x03, 0xFF, 0xE6, 0xEC, 0x2C, 0x0A, 0x19, 0x27, 0x05
	.byte 0xF7, 0xDD, 0xE5, 0xDA, 0x07, 0x0A, 0x04, 0xF7, 0xD6, 0xAB, 0x9A, 0x81, 0x34, 0x2C, 0x1C, 0x0A
	.byte 0xD1, 0xC3, 0xD8, 0xD9, 0xEF, 0xFF, 0xF6, 0xDF, 0xD6, 0xB6, 0xD0, 0x15, 0xFC, 0x46, 0x34, 0x0A
	.byte 0xDC, 0xC2, 0x06, 0xF7, 0xF6, 0xF2, 0xC8, 0x17, 0x01, 0xE6, 0x17, 0xD0, 0xEF, 0x0C, 0x08, 0xF9
	.byte 0x17, 0x1D, 0xDC, 0xE4, 0xFA, 0xE3, 0xEF, 0xFB, 0x28, 0x17, 0x0A, 0x0A, 0xD2, 0xF3, 0x24, 0x06
	.byte 0x04, 0xE2, 0xE3, 0x3E, 0x20, 0xE0, 0xFF, 0x16, 0xF2, 0x01, 0xFC, 0xEA, 0xD3, 0x02, 0x36, 0x04
	.byte 0xE2, 0xC7, 0xC5, 0xF4, 0x1B, 0xFD, 0xE1, 0x08, 0xF7, 0x05, 0x0A, 0xF2, 0x20, 0x42, 0x13, 0x09
	.byte 0x02, 0xE7, 0xDB, 0x17, 0xF1, 0x12, 0xDA, 0xE1, 0x05, 0xF7, 0xEB, 0x0F, 0x00, 0x16, 0x3E, 0x1E
	.byte 0x0F, 0xF4, 0xF2, 0xD2, 0x4D, 0x15, 0x21, 0x03, 0x22, 0x1D, 0xED, 0x32, 0x02, 0x0B, 0x09, 0xDA
	.byte 0xF4, 0xDB, 0x3E, 0x01, 0xF1, 0x36, 0x20, 0x06, 0x02, 0xE8, 0x14, 0x23, 0xEB, 0x02, 0x13, 0x18
	.byte 0xF3, 0x37, 0x04, 0x09, 0x27, 0xED, 0x1E, 0xFF, 0xEB, 0x49, 0x36, 0x21, 0x08, 0x12, 0x03, 0x0F
	.byte 0x06, 0xED, 0xD1, 0x06, 0xFD, 0xD0, 0xCE, 0x01, 0x1A, 0x14, 0x08, 0xE9, 0xCE, 0x41, 0xF2, 0xC9
	.byte 0xEF, 0xE1, 0xDB, 0xE4, 0x35, 0xFF, 0xEF, 0xCB, 0x01, 0x39, 0x0B, 0xF8, 0xE7, 0xE2, 0xDB, 0x40
	.byte 0x05, 0xCC, 0xD3, 0x0F, 0x17, 0x1F, 0x0F, 0x0E, 0xE7, 0x18, 0x21, 0xFE, 0xD4, 0xC8, 0xEE, 0x06
	.byte 0xEB, 0xD5, 0x04, 0xF4, 0x11, 0xDB, 0x14, 0xF6, 0x22, 0x0F, 0x02, 0x0F, 0x37, 0x15, 0xF5, 0xE1
	.byte 0xFA, 0x2E, 0x19, 0x10, 0xF7, 0xE7, 0xF8, 0xC2, 0x1C, 0x11, 0x14, 0xE0, 0xE3, 0x1A, 0x1E, 0x19
	.byte 0xED, 0x02, 0xF0, 0xEF, 0x1A, 0xCD, 0x02, 0x32, 0x2A, 0x13, 0xBE, 0x17, 0x1D, 0xFE, 0x03, 0x13
	.byte 0xED, 0xDB, 0x20, 0x0F, 0x06, 0x1E, 0xDE, 0x0D, 0x0B, 0xFB, 0x28, 0x1F, 0x0A, 0xD6, 0x04, 0xF7
	.byte 0x1A, 0xF7, 0xBA, 0x11, 0xFE, 0xE9, 0x14, 0xEA, 0xC9, 0x33, 0xE8, 0xE1, 0x16, 0xEA, 0x0F, 0xF3
	.byte 0x03, 0xF6, 0xE4, 0xF0, 0x38, 0x04, 0xC1, 0x0B, 0xEE, 0xF1, 0xEE, 0xDA, 0xDD, 0x10, 0xF9, 0x22
	.byte 0xFF, 0xEB, 0xCF, 0xD1, 0x09, 0xDB, 0x07, 0x08, 0x45, 0x37, 0x14, 0x06, 0xDF, 0xD3, 0xF6, 0xF7
	.byte 0x06, 0xF7, 0x0C, 0x47, 0x0F, 0xFD, 0xD6, 0xF9, 0xE8, 0x20, 0xDD, 0xFE, 0xD6, 0xEF, 0xFB, 0x00
	.byte 0xFE, 0xDF, 0xCA, 0x0D, 0xF4, 0xDE, 0x2F, 0x17, 0x13, 0x37, 0x07, 0xF8, 0x4A, 0x1F, 0x0E, 0x10
	.byte 0xE9, 0xE6, 0x13, 0x0C, 0xEE, 0xCF, 0xE4, 0xE1, 0xEC, 0x02, 0xF2, 0xEC, 0xD1, 0x4E, 0x28, 0x0D
	.byte 0xE9, 0xF5, 0x15, 0xFA, 0x12, 0x01, 0x2F, 0x05, 0x26, 0x23, 0x20, 0x2E, 0x16, 0x08, 0x0D, 0x10
	.byte 0xF2, 0x12, 0x33, 0x13, 0x28, 0x27, 0x0B, 0xE6, 0xFF, 0xEF, 0x2F, 0x02, 0xCB, 0xF1, 0x1F, 0xEA
	.byte 0x26, 0x15, 0xF1, 0xF0, 0x05, 0xDF, 0x35, 0x0F, 0xDA, 0x56, 0x0B, 0xFD, 0xE8, 0x31, 0x0D, 0xFC
	.byte 0xF5, 0xEE, 0x1C, 0x14, 0xF4, 0xE5, 0xE6, 0x23, 0xE7, 0xDD, 0xFD, 0xEC, 0xC3, 0x1E, 0x0A, 0xC9
	.byte 0xF4, 0xEA, 0xCC, 0xCA, 0xF2, 0x13, 0xE0, 0xF4, 0x2D, 0x0F, 0xF8, 0xD0, 0xF7, 0x0B, 0xE0, 0x08
	.byte 0xF0, 0xDE, 0xF3, 0x33, 0x12, 0x26, 0xFE, 0xE0, 0xEF, 0x16, 0xFE, 0xEE, 0xE4, 0xBA, 0x3B, 0x1B
	.byte 0xE4, 0xED, 0xF6, 0xEC, 0xF7, 0xF7, 0xF8, 0xEB, 0x15, 0xF8, 0x23, 0xFE, 0x2D, 0xFD, 0xF7, 0x0C
	.byte 0x00, 0x1E, 0x07, 0xD9, 0x2B, 0x1B, 0xDA, 0xA5, 0x1E, 0x1A, 0x13, 0xC9, 0xFC, 0x3F, 0x0E, 0xEF
	.byte 0x0D, 0x09, 0x0D, 0x02, 0x07, 0x04, 0x06, 0x3D, 0x48, 0xFF, 0xEF, 0x1D, 0xFF, 0xEA, 0xEF, 0x08
	.byte 0xE4, 0xDB, 0x3F, 0x2C, 0x29, 0x03, 0x02, 0x0E, 0x09, 0xFA, 0x4B, 0xF8, 0xF9, 0xF4, 0xF1, 0xF4
	.byte 0x0D, 0x09, 0xFC, 0x1E, 0xEA, 0xBF, 0x0F, 0x00, 0xD3, 0x04, 0xFC, 0x01, 0x05, 0x16, 0x0B, 0x17
	.byte 0x0B, 0x2F, 0x10, 0xF7, 0xD2, 0xE0, 0x1A, 0xC0, 0x22, 0xFB, 0x26, 0xF9, 0x2F, 0x14, 0x02, 0xB7
	.byte 0x9D, 0xFD, 0xD3, 0x14, 0x46, 0xCC, 0x0F, 0xFA, 0xF9, 0xAE, 0x1F, 0x15, 0x2F, 0x33, 0x27, 0xFD
	.byte 0x09, 0x00, 0xD7, 0xF9, 0xF1, 0xCA, 0x02, 0x00, 0x1B, 0xE1, 0x09, 0xD3, 0xEA, 0xDA, 0xE8, 0xE8
	.byte 0x08, 0xDF, 0x17, 0x05, 0x32, 0xDC, 0xEF, 0xEE, 0xCD, 0xFE, 0x0D, 0x13, 0x2B, 0x0C, 0xF1, 0xF4
	.byte 0x3D, 0x26, 0x26, 0x07, 0x0D, 0x00, 0x06, 0xFF, 0x03, 0x3E, 0x09, 0x1B, 0x16, 0xDF, 0x26, 0xDD
	.byte 0xF7, 0x1E, 0xD5, 0xF7, 0xE0, 0xFF, 0x04, 0xFC, 0x01, 0xFB, 0xF5, 0xF8, 0x26, 0x1F, 0x0B, 0xF6
	.byte 0xD6, 0xEB, 0xDB, 0x01, 0x2B, 0x0F, 0xF3, 0xDD, 0xED, 0xEE, 0x0F, 0x17, 0xE6, 0x3B, 0x01, 0xEB
	.byte 0x35, 0x08, 0xD7, 0xCE, 0xF2, 0xE4, 0x04, 0x15, 0x19, 0xE4, 0xD8, 0x05, 0xD8, 0xD7, 0x04, 0x33
	.byte 0xDF, 0xF8, 0xF8, 0x01, 0x11, 0xC4, 0x0C, 0x19, 0xD7, 0x11, 0x22, 0x2B, 0x13, 0x2D, 0x07, 0xDB
	.byte 0x18, 0xF1, 0x38, 0xFE, 0x23, 0xF6, 0x30, 0x04, 0xD1, 0xFE, 0x05, 0xFB, 0xCA, 0x05, 0xFD, 0xDF
	.byte 0xF6, 0x1E, 0xFE, 0xD4, 0xE8, 0xDA, 0x09, 0xF7, 0x2A, 0x04, 0x06, 0xC8, 0x2C, 0xF0, 0x09, 0xD8
	.byte 0xE6, 0x12, 0xEC, 0x0A, 0x1C, 0xD7, 0xEB, 0xFC, 0x0D, 0xEE, 0x20, 0xE2, 0xFD, 0x25, 0x0F, 0x16
	.byte 0x1C, 0x32, 0xD8, 0x03, 0xE3, 0xC0, 0x07, 0x33, 0xED, 0xF5, 0x11, 0xE5, 0xD8, 0xC0, 0x18, 0xF4
	.byte 0xF9, 0xE5, 0x03, 0x25, 0x30, 0xFF, 0x02, 0xF7, 0xDA, 0xDE, 0x2E, 0x01, 0x1B, 0xFA, 0x13, 0xF3
	.byte 0x1A, 0x0A, 0x22, 0x14, 0x19, 0x28, 0x32, 0xFA, 0xF9, 0x1E, 0x09, 0xE8, 0x00, 0xE9, 0x47, 0xC3
	.byte 0x16, 0x3A, 0xDE, 0xFC, 0x02, 0xCF, 0xDF, 0x19, 0x1E, 0xF8, 0xFA, 0xF0, 0x4D, 0x02, 0x26, 0xF8
	.byte 0xDD, 0xFA, 0xE2, 0x38, 0x4E, 0x1F, 0x21, 0xEC, 0x0D, 0xD9, 0x14, 0x16, 0x04, 0x15, 0xF8, 0x04
	.byte 0xFA, 0x0A, 0xAD, 0xD7, 0x09, 0xE7, 0xD5, 0x0F, 0xF9, 0xF4, 0xDE, 0xD9, 0xDB, 0xDF, 0x13, 0x1E
	.byte 0x10, 0xDF, 0x2A, 0xE7, 0x19, 0xBC, 0x2C, 0xF1, 0xF5, 0xFC, 0x17, 0x32, 0x0E, 0x04, 0xD9, 0xD5
	.byte 0x14, 0xE2, 0x3C, 0x09, 0xEC, 0x07, 0x10, 0x13, 0xDF, 0x25, 0x1D, 0x10, 0xDD, 0x07, 0x26, 0xE5
	.byte 0xFA, 0x35, 0xEB, 0xE8, 0x04, 0x1A, 0x11, 0xFC, 0xDB, 0x19, 0x11, 0xDC, 0xF3, 0x1F, 0x03, 0xFA
	.byte 0x1B, 0x0F, 0xF6, 0x1F, 0x1C, 0x1A, 0xF6, 0xF6, 0xD8, 0x10, 0xF9, 0x0F, 0x0D, 0x29, 0xF7, 0x00
	.byte 0xFC, 0x32, 0xFA, 0xF9, 0x0E, 0x26, 0x16, 0x00, 0xD0, 0x02, 0x01, 0xF3, 0xED, 0x20, 0xFD, 0xC4
	.byte 0x0B, 0xEF, 0xFF, 0xE8, 0xDE, 0xFF, 0x23, 0xFB, 0xE5, 0x1C, 0x2C, 0x0D, 0x19, 0x0F, 0x2A, 0xF5
	.byte 0x0F, 0x33, 0x23, 0xDC, 0x14, 0x08, 0xFC, 0xF4, 0xE3, 0x13, 0xD1, 0x31, 0xF1, 0xFC, 0x10, 0xE3
	.byte 0xD9, 0x0E, 0xE2, 0x04, 0x19, 0xF7, 0xFB, 0xCD, 0xF2, 0xFD, 0xD8, 0xE0, 0x26, 0x05, 0xF7, 0xF8
	.byte 0xFC, 0xFF, 0xEA, 0x47, 0xFD, 0x0E, 0x1A, 0xEE, 0xEA, 0x18, 0xD7, 0xE7, 0xE8, 0x06, 0x17, 0x13
	.byte 0xF6, 0x27, 0xE6, 0xE5, 0x41, 0x2D, 0x02, 0xF9, 0xE6, 0xF8, 0x16, 0xF4, 0x10, 0x0F, 0x10, 0xDD
	.byte 0xFB, 0x21, 0xEB, 0xF8, 0x00, 0x17, 0x21, 0x22, 0x06, 0x15, 0x24, 0x06, 0xF9, 0xEA, 0x08, 0xDB
	.byte 0xF2, 0x1F, 0x26, 0x0B, 0xFC, 0xFD, 0xD9, 0xE0, 0xF8, 0x20, 0xE9, 0xFA, 0xF4, 0x10, 0x14, 0xE4
	.byte 0xFC, 0x17, 0x0D, 0xCC, 0xFF, 0x16, 0x06, 0xDF, 0xD8, 0xFA, 0x04, 0xC2, 0x0D, 0x05, 0xE6, 0x23
	.byte 0x27, 0x0B, 0x02, 0x39, 0xF5, 0x09, 0xEC, 0xE4, 0xDF, 0x34, 0xFB, 0xFA, 0xFE, 0x16, 0xF2, 0xF0
	.byte 0xD0, 0x23, 0x01, 0xC6, 0x14, 0x0D, 0x21, 0xFF, 0xB6, 0x38, 0xEE, 0xEA, 0xE1, 0x0C, 0x06, 0xF2
	.byte 0x04, 0xFE, 0xF7, 0xD1, 0x0A, 0xFD, 0x1D, 0xEF, 0xFB, 0x3D, 0x0E, 0x2F, 0xF4, 0x02, 0x48, 0xD9
	.byte 0xEF, 0x5C, 0x40, 0xCB, 0xCD, 0xF1, 0xE2, 0xDA, 0xD7, 0xE3, 0xE4, 0x1B, 0x09, 0x24, 0x09, 0xDD
	.byte 0xD6, 0x51, 0xEB, 0x14, 0x19, 0xF0, 0xFB, 0xEF, 0xDD, 0x15, 0x0F, 0xE4, 0x30, 0x02, 0xFE, 0x09
	.byte 0xED, 0x1D, 0xD8, 0x1E, 0xEE, 0xEE, 0x12, 0xF0, 0xC7, 0x0F, 0xEC, 0xF4, 0xF1, 0xDB, 0xF1, 0x21
	.byte 0xD9, 0x15, 0xEA, 0xF3, 0x23, 0x0B, 0x0D, 0xDA, 0xC1, 0x1D, 0x17, 0xE5, 0x20, 0x12, 0x03, 0xE6
	.byte 0x2A, 0x21, 0xC0, 0xBE, 0xEF, 0x10, 0x38, 0x02, 0x24, 0x03, 0x1F, 0x15, 0xD7, 0xD9, 0x08, 0xC7
	.byte 0x0E, 0x25, 0xFE, 0x13, 0xDC, 0xED, 0xE9, 0xE3, 0xF0, 0x01, 0xFD, 0xF8, 0xF6, 0x1F, 0x40, 0xBF
	.byte 0xDE, 0xCC, 0xF1, 0x2D, 0x02, 0x17, 0x15, 0x34, 0x18, 0xDF, 0xF7, 0xFF, 0x09, 0xD4, 0xD7, 0xF3
	.byte 0xEF, 0x2C, 0x16, 0xEF, 0xFA, 0xFC, 0xFF, 0x16, 0x26, 0x1A, 0x10, 0x02, 0x32, 0x1B, 0xDD, 0xDE
	.byte 0xF7, 0xD7, 0x06, 0x00, 0xF0, 0xDE, 0x33, 0x08, 0xF2, 0xE1, 0xCF, 0x0F, 0xDF, 0x2D, 0x31, 0x21
	.byte 0xF5, 0xDB, 0xC2, 0xCA, 0x2D, 0x0B, 0xFB, 0xB8, 0x0B, 0xFF, 0xF4, 0xF5, 0x18, 0x1B, 0xF5, 0xD5
	.byte 0x2E, 0x2B, 0x21, 0xF4, 0xF7, 0xFF, 0x01, 0xFC, 0xE9, 0xC7, 0xB9, 0x0B, 0x08, 0x10, 0x11, 0xF8
	.byte 0xEC, 0xE1, 0xD7, 0x35, 0x30, 0xF0, 0x03, 0x41, 0xE8, 0xF8, 0xE9, 0xE0, 0xDB, 0xE0, 0xCF, 0xF6
	.byte 0xEF, 0x06, 0x26, 0x05, 0xF7, 0xEF, 0xD2, 0x08, 0x34, 0x03, 0x06, 0x2D, 0x28, 0x27, 0xF9, 0xFA
	.byte 0xDE, 0xB6, 0x1F, 0x08, 0x01, 0xF0, 0x2B, 0x44, 0xF5, 0xED, 0xE1, 0x04, 0x06, 0x00, 0xFA, 0xEF
	.byte 0xF0, 0xDA, 0xF0, 0xE2, 0x02, 0x09, 0xD9, 0xF0, 0xFF, 0x2B, 0xF6, 0x30, 0x03, 0x03, 0xF0, 0xE1
	.byte 0xFD, 0x3E, 0x44, 0x2B, 0x0D, 0x03, 0xF6, 0x08, 0x14, 0xC8, 0x0C, 0x0C, 0xFE, 0xEE, 0x16, 0xF1
	.byte 0xD8, 0xDC, 0x01, 0x07, 0x29, 0x00, 0x01, 0x2E, 0xFA, 0xC2, 0xFC, 0xF4, 0xFE, 0xF5, 0xAD, 0xF3
	.byte 0xFE, 0x5B, 0x21, 0xF6, 0x00, 0x04, 0xF5, 0xF0, 0x4F, 0x20, 0x25, 0x0E, 0x09, 0x33, 0xEB, 0xE4
	.byte 0xC8, 0xDE, 0x00, 0x15, 0x09, 0xE6, 0x0B, 0x1C, 0xD6, 0xCA, 0xE9, 0xFE, 0xF1, 0x1F, 0x1E, 0x08
	.byte 0xD9, 0xBE, 0xD9, 0xDC, 0x1F, 0xE4, 0xD8, 0xD2, 0x23, 0x28, 0x16, 0x18, 0x21, 0x30, 0x17, 0xDE
	.byte 0x0E, 0x28, 0x20, 0x11, 0x1B, 0xFD, 0x19, 0x1A, 0xF3, 0xC3, 0xEF, 0x0B, 0x04, 0x1F, 0x3C, 0xFA
	.byte 0xE6, 0xD7, 0xC0, 0x0D, 0x10, 0xE6, 0x36, 0x1F, 0xF5, 0xE9, 0xF7, 0xF5, 0xDE, 0xB9, 0xEB, 0xDE
	.byte 0xDD, 0x37, 0x32, 0x1D, 0xEA, 0xE5, 0xCE, 0xDA, 0x39, 0x21, 0x2A, 0x39, 0x30, 0x1A, 0x0B, 0x00
	.byte 0xCF, 0xE1, 0x1A, 0xFC, 0xF2, 0x05, 0x4E, 0x25, 0x11, 0x00, 0xCF, 0xF4, 0xE9, 0x1A, 0x0E, 0x02
	.byte 0x02, 0xD5, 0xEF, 0xF4, 0x0A, 0xF8, 0xFC, 0x08, 0x12, 0x0C, 0xFA, 0x14, 0xF4, 0xFA, 0xF3, 0xE7
	.byte 0x22, 0x0F, 0x28, 0x31, 0x07, 0x08, 0x0D, 0x14, 0x14, 0xED, 0xEA, 0xFE, 0xF8, 0x02, 0x33, 0xCD
	.byte 0xE6, 0xF8, 0x1D, 0x15, 0x04, 0x13, 0xD9, 0x21, 0xF9, 0xDC, 0x38, 0x36, 0x30, 0x28, 0x1D, 0xFC
	.byte 0xE8, 0xD6, 0xBE, 0xD5, 0xC4, 0x13, 0xFE, 0x25, 0x29, 0xF6, 0xDB, 0xC4, 0xC0, 0x12, 0xEA, 0x4D
	.byte 0x49, 0x28, 0x19, 0x04, 0x13, 0xED, 0xBE, 0xFE, 0x0B, 0x05, 0x15, 0x0E, 0x1A, 0xE7, 0xAA, 0xFC
	.byte 0x12, 0x01, 0x1A, 0xDB, 0x0A, 0x25, 0xFF, 0x18, 0xF4, 0xC5, 0xF5, 0x14, 0xFA, 0x22, 0xF0, 0xF0
	.byte 0x2A, 0x13, 0xE4, 0xCD, 0x35, 0x20, 0x04, 0x0A, 0x3E, 0x15, 0xF4, 0xDE, 0x1B, 0x04, 0xD0, 0xD0
	.byte 0xCE, 0xCF, 0x1F, 0xF9, 0xEB, 0xD6, 0xE7, 0xFC, 0xD5, 0xEA, 0x3B, 0x02, 0x1B, 0x0C, 0xF7, 0xFA
	.byte 0xF0, 0xF8, 0xE0, 0xC6, 0xF0, 0xE3, 0xFB, 0x29, 0x17, 0xE2, 0xDF, 0xD2, 0xF3, 0xF6, 0xDA, 0x34
	.byte 0x34, 0x01, 0xEF, 0xF7, 0x0A, 0x1A, 0xE7, 0xFA, 0x21, 0xEC, 0x35, 0x37, 0x19, 0xE0, 0xFB, 0xD6
	.byte 0x17, 0x15, 0x42, 0x05, 0xE4, 0x14, 0x09, 0x4B, 0x1D, 0xF9, 0xD6, 0xD9, 0x0F, 0x03, 0xE9, 0x15
	.byte 0x06, 0x0B, 0x01, 0xE3, 0x0E, 0x3F, 0x0A, 0x36, 0x1A, 0xE8, 0xCD, 0xCF, 0x07, 0xE9, 0xCD, 0x0F
	.byte 0xBE, 0x01, 0x3C, 0x19, 0x0A, 0x00, 0xE2, 0xFC, 0xF1, 0x11, 0x13, 0x3B, 0x28, 0x04, 0xFB, 0x21
	.byte 0x06, 0xEA, 0xC6, 0xBA, 0xFB, 0x17, 0xFA, 0x3C, 0x2C, 0xE3, 0xF0, 0xD1, 0xE3, 0x34, 0xED, 0x32
	.byte 0x1C, 0x10, 0x23, 0x1F, 0x24, 0x00, 0xEB, 0x06, 0x15, 0x1B, 0x16, 0x2A, 0x07, 0xBE, 0xD8, 0xF8
	.byte 0x07, 0x13, 0x2E, 0x00, 0xFC, 0x3C, 0x24, 0x2D, 0xF9, 0xE3, 0xFA, 0xE0, 0xD9, 0x02, 0x06, 0xF7
	.byte 0x21, 0x14, 0xCD, 0xDE, 0x12, 0xFA, 0x13, 0x06, 0x0B, 0x05, 0xED, 0xE3, 0xFE, 0x2A, 0xF5, 0xD3
	.byte 0xEB, 0xC9, 0x39, 0x25, 0x02, 0xF2, 0xBD, 0xF0, 0xE5, 0xDA, 0x45, 0x30, 0x13, 0x02, 0xEF, 0x14
	.byte 0xEC, 0xF0, 0xDE, 0xEF, 0xE7, 0xC3, 0x0A, 0x49, 0x2D, 0x10, 0xD8, 0xC0, 0xEF, 0xE3, 0xEA, 0x38
	.byte 0x11, 0xD9, 0x08, 0xF5, 0x08, 0xE7, 0xEE, 0xF3, 0xED, 0x08, 0x36, 0x39, 0x24, 0xEF, 0xE6, 0xFC
	.byte 0x06, 0xEB, 0x28, 0x2A, 0xFC, 0x14, 0x1F, 0x35, 0x0A, 0xDE, 0xCB, 0x1F, 0xEF, 0x23, 0x00, 0x0F
	.byte 0xFA, 0xEC, 0xC1, 0xB7, 0x16, 0x19, 0x1D, 0x11, 0x08, 0xE3, 0xD9, 0xBB, 0x12, 0x0F, 0xF1, 0xFB
	.byte 0x1E, 0x13, 0x26, 0x22, 0x28, 0x20, 0x2E, 0x2B, 0x3A, 0x2B, 0x05, 0xEE, 0xE7, 0xD8, 0xDF, 0xC9
	.byte 0xCC, 0x14, 0x22, 0x1C, 0xEC, 0xC1, 0x9F, 0xA4, 0x3D, 0x35, 0x2F, 0x31, 0x35, 0x4B, 0xF2, 0xCB
	.byte 0xB3, 0xB1, 0x00, 0xFD, 0xFB, 0x13, 0x16, 0x1A, 0xF7, 0xCB, 0xC9, 0x42, 0x5A, 0x48, 0x55, 0x44
	.byte 0x4A, 0x34, 0xFC, 0xD7, 0xC6, 0xE1, 0xEE, 0xE1, 0x1B, 0x20, 0x1E, 0x12, 0x18, 0x03, 0x08, 0x05
	.byte 0xF4, 0xFD, 0x1A, 0x1C, 0x4A, 0x3F, 0xFE, 0xD9, 0xBD, 0xB3, 0x96, 0xB6, 0x3B, 0x3B, 0x49, 0x41
	.byte 0x2C, 0x28, 0x47, 0x48, 0x52, 0x53, 0x62, 0x58, 0x59, 0x3C, 0xFA, 0xE1, 0xD1, 0xD0, 0xF3, 0xD9
	.byte 0xF7, 0x07, 0x02, 0x4F, 0xFF, 0xD9, 0xC4, 0xEF, 0x57, 0x51, 0x41, 0x32, 0x2D, 0x13, 0xEB, 0xBD
	.byte 0xA5, 0xA9, 0xD7, 0xCE, 0x07, 0x12, 0x27, 0x4A, 0x0A, 0xE1, 0xE4, 0x27, 0x18, 0x0D, 0x17, 0x05
	.byte 0x38, 0x2D, 0x1D, 0x0A, 0xFB, 0xF3, 0xF5, 0xDD, 0xEE, 0xF8, 0xF6, 0xF8, 0xE7, 0xB9, 0xB3, 0xEB
	.byte 0x02, 0x10, 0x32, 0x3F, 0x57, 0x57, 0x05, 0xE0, 0xD8, 0xCD, 0xBC, 0x00, 0x0C, 0x06, 0x36, 0x22
	.byte 0x05, 0xF4, 0x20, 0x34, 0x44, 0x40, 0x45, 0x3B, 0x41, 0x2D, 0x0E, 0xF0, 0xE1, 0xD8, 0xBF, 0xBD
	.byte 0x29, 0x31, 0x2F, 0x25, 0xF5, 0xCC, 0xB5, 0xAC, 0xFC, 0x39, 0x30, 0x2A, 0x2A, 0x21, 0xF5, 0xCD
	.byte 0xBC, 0xFA, 0x0D, 0x00, 0x08, 0xF8, 0x1A, 0x20, 0xE9, 0xCB, 0x00, 0x24, 0x38, 0x4C, 0x61, 0x69
	.byte 0x6F, 0x61, 0xFF, 0xE4, 0xD9, 0xD8, 0xD5, 0xCA, 0xD4, 0xD8, 0xEE, 0x23, 0x10, 0xEC, 0xED, 0xE4
	.byte 0xD6, 0x1D, 0x2F, 0x26, 0x4A, 0x2D, 0x03, 0xE3, 0xD0, 0xC2, 0xB0, 0x98, 0xDF, 0x38, 0x3B, 0x3B
	.byte 0x0A, 0x11, 0x2E, 0x48, 0x54, 0x65, 0x75, 0x7B, 0x7B, 0x6A, 0xF9, 0xDF, 0xCF, 0xCD, 0xBA, 0xBD
	.byte 0xE5, 0xE1, 0x46, 0x43, 0xF0, 0xC2, 0xAB, 0xEC, 0x52, 0x47, 0x56, 0x50, 0x55, 0x4A, 0xED, 0xC6
	.byte 0xB5, 0xD3, 0xE3, 0xDF, 0xEE, 0xE7, 0x2D, 0x39, 0xF4, 0xD6, 0xFB, 0x0C, 0x1C, 0x24, 0x34, 0x40
	.byte 0x51, 0x52, 0x0D, 0xF7, 0xE5, 0xE4, 0x16, 0x03, 0x02, 0x16, 0x1A, 0x06, 0xFA, 0xD4, 0xCD, 0x02
	.byte 0x0F, 0x0A, 0x30, 0x2B, 0x31, 0x22, 0xED, 0xC2, 0xAC, 0xA7, 0x9A, 0xE8, 0x08, 0x11, 0x3D, 0x44
	.byte 0x27, 0x18, 0x17, 0x13, 0x10, 0xFB, 0x0C, 0x0F, 0x1B, 0x0F, 0xF8, 0xD4, 0xCF, 0xC4, 0xEE, 0xE0
	.byte 0xE4, 0x34, 0x36, 0x3E, 0xF8, 0xD0, 0xB3, 0xBA, 0x42, 0x65, 0x53, 0x3F, 0x3D, 0x25, 0xF4, 0xCE
	.byte 0xB5, 0xC0, 0x21, 0x11, 0x0D, 0x19, 0x0F, 0x4D, 0x01, 0xD6, 0xE3, 0x48, 0x40, 0x2E, 0x31, 0x1F
	.byte 0x3D, 0x2C, 0xF8, 0xD1, 0xCA, 0xD2, 0xE2, 0x13, 0x14, 0xFF, 0xF0, 0x00, 0x10, 0xF4, 0xEE, 0xF7
	.byte 0xE6, 0xE5, 0xF6, 0xEA, 0x35, 0x2D, 0xF6, 0xD1, 0xB5, 0xAE, 0x97, 0x93, 0x08, 0x19, 0x31, 0x4D
	.byte 0x32, 0x41, 0x72, 0x75, 0x7C, 0x76, 0x73, 0x60, 0x5A, 0x3D, 0xF7, 0xD3, 0xC1, 0xC4, 0xB5, 0xC7
	.byte 0x08, 0x0B, 0x14, 0x1D, 0x00, 0xDD, 0xCF, 0xD5, 0x28, 0x2F, 0x23, 0x28, 0x37, 0x26, 0xE8, 0xB4
	.byte 0x99, 0x90, 0xE5, 0x03, 0x17, 0x22, 0x34, 0x4B, 0x08, 0xE3, 0xD5, 0x0C, 0x3F, 0x26, 0x23, 0x1D
	.byte 0x18, 0x08, 0x19, 0x0B, 0x01, 0xF1, 0xEE, 0xD5, 0xF9, 0x25, 0x28, 0x15, 0xEC, 0xC8, 0xED, 0xED
	.byte 0xFC, 0xFE, 0x0B, 0x1D, 0x33, 0x3F, 0xFE, 0xD4, 0xC2, 0xB5, 0xA7, 0x1E, 0x39, 0x33, 0x4A, 0x33
	.byte 0x32, 0x2E, 0x44, 0x40, 0x41, 0x34, 0x3F, 0x37, 0x41, 0x2B, 0x12, 0xF7, 0xE6, 0xDD, 0xC9, 0xBB
	.byte 0x03, 0x06, 0x08, 0x11, 0xF1, 0xC3, 0xAA, 0x9F, 0x01, 0x56, 0x5D, 0x4A, 0x4E, 0x43, 0xFF, 0xDA
	.byte 0xBE, 0xD0, 0x30, 0x27, 0x1D, 0x19, 0x11, 0xFF, 0x0D, 0x0D, 0x1D, 0x27, 0x32, 0x33, 0x45, 0x52
	.byte 0x61, 0x62, 0xFE, 0xDC, 0xD2, 0xE5, 0xF0, 0xE2, 0xF3, 0xFC, 0xF9, 0xFC, 0x19, 0xFB, 0xF5, 0xFA
	.byte 0xE7, 0xEB, 0x21, 0x0C, 0x1F, 0x1D, 0xF8, 0xDA, 0xCC, 0xC1, 0xBC, 0xA7, 0xDF, 0xFF, 0x0A, 0x4A
	.byte 0xFE, 0xF1, 0x3B, 0x5B, 0x69, 0x69, 0x65, 0x57, 0x54, 0x3E, 0xF9, 0xDF, 0xCE, 0xDD, 0xCA, 0xD1
	.byte 0x19, 0x11, 0x52, 0x51, 0xF3, 0xC8, 0xAD, 0x15, 0x3A, 0x1F, 0x2A, 0x19, 0x48, 0x41, 0xE8, 0xBE
	.byte 0xA5, 0xC8, 0x09, 0xFE, 0x15, 0x0A, 0x45, 0x4B, 0x02, 0xE8, 0x0B, 0x16, 0x19, 0x1C, 0x26, 0x22
	.byte 0x30, 0x21, 0x07, 0xE3, 0xE6, 0x11, 0x0F, 0xFF, 0x0E, 0x00, 0xFE, 0x00, 0xFA, 0xD7, 0xBD, 0x06
	.byte 0xFE, 0xF7, 0x13, 0x02, 0x55, 0x4A, 0xEA, 0xBD, 0xAC, 0xB9, 0xCE, 0x03, 0x0B, 0xF7, 0x02, 0x3E
	.byte 0xF0, 0xD2, 0x08, 0x02, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xF0, 0xD4, 0x08, 0x02
	.byte 0x05, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x04, 0xC6, 0x08, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x44, 0xCC, 0x08, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x44, 0xC7, 0x08, 0x02, 0x08, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x44, 0xD0, 0x08, 0x02
	.byte 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x35, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x54, 0x1A, 0x08, 0x02, 0x30, 0xE6, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x10, 0x49, 0x08, 0x02, 0x48, 0xE6, 0x08, 0x02, 0x66, 0x26, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x74, 0x35, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x54, 0x1A, 0x08, 0x02
	.byte 0x30, 0xE6, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x49, 0x08, 0x02, 0x70, 0xE6, 0x08, 0x02
	.byte 0x9A, 0x19, 0x00, 0x00, 0x6C, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x35, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x54, 0x1A, 0x08, 0x02, 0x30, 0xE6, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x10, 0x49, 0x08, 0x02, 0x48, 0xE6, 0x08, 0x02, 0xCD, 0x0C, 0x00, 0x00, 0xEC, 0x01, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x54, 0x38, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x54, 0x1A, 0x08, 0x02
	.byte 0x3C, 0xE6, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x49, 0x08, 0x02, 0x5C, 0xE6, 0x08, 0x02
	.byte 0x9A, 0x39, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x38, 0x08, 0x02
	.byte 0x48, 0x1D, 0x08, 0x02, 0xCC, 0x1E, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x10, 0x49, 0x08, 0x02, 0x84, 0xE6, 0x08, 0x02, 0x00, 0x40, 0x00, 0x00, 0x4F, 0x00, 0x00, 0x00
	.byte 0xD8, 0xE7, 0x08, 0x02, 0xE4, 0x4A, 0x08, 0x02, 0x98, 0x38, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xB0, 0x31, 0x08, 0x02, 0xA0, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x33, 0x73, 0xCD, 0x4C
	.byte 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x40, 0xE7, 0x08, 0x02, 0x98, 0xE6, 0x08, 0x02, 0xD0, 0xE6, 0x08, 0x02
	.byte 0x08, 0xE7, 0x08, 0x02, 0x78, 0xE7, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xB0, 0xD6, 0x08, 0x02
	.byte 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x70, 0xD5, 0x08, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x34, 0x3A, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x10, 0x49, 0x08, 0x02, 0x78, 0xE8, 0x08, 0x02, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x3A, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x34, 0x3A, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x10, 0x49, 0x08, 0x02, 0x64, 0xE8, 0x08, 0x02, 0xFF, 0xFF, 0x00, 0x00
	.byte 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x3A, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x49, 0x08, 0x02
	.byte 0x64, 0xE8, 0x08, 0x02, 0xFF, 0xFF, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x94, 0xE9, 0x08, 0x02
	.byte 0x44, 0x1F, 0x08, 0x02, 0x9C, 0x38, 0x09, 0x02, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x34, 0x45, 0x08, 0x02, 0xB0, 0xE7, 0x08, 0x02, 0xA0, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x33, 0x73, 0xCD, 0x4C, 0x07, 0x00, 0x33, 0x73, 0x00, 0x00, 0x00, 0x00
	.byte 0xC4, 0xE8, 0x08, 0x02, 0x8C, 0xE8, 0x08, 0x02, 0xFC, 0xE8, 0x08, 0x02, 0x34, 0xE9, 0x08, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x1A, 0x2D, 0x48, 0x43
	.byte 0xEA, 0x03, 0x78, 0x0A, 0xDE, 0x13, 0x68, 0x1B, 0x94, 0x23, 0x05, 0x2E, 0x14, 0x3C, 0xEC, 0x54
	.byte 0xD4, 0x49, 0x00, 0x00, 0x3E, 0x62, 0x00, 0x00, 0xBC, 0x82, 0x00, 0x00, 0xF8, 0xAD, 0x00, 0x00
	.byte 0x81, 0xE7, 0x00, 0x00, 0x11, 0x34, 0x01, 0x00, 0xF2, 0x99, 0x01, 0x00, 0x85, 0x21, 0x02, 0x00
	.byte 0xEE, 0xD5, 0x02, 0x00, 0x01, 0xC6, 0x03, 0x00, 0x79, 0x05, 0x05, 0x00, 0x99, 0xAE, 0x06, 0x00
	.byte 0x50, 0xE4, 0x08, 0x00, 0x1E, 0xD5, 0x0B, 0x00, 0xE2, 0xBE, 0x0F, 0x00, 0xF1, 0xF3, 0x14, 0x00
	.byte 0xDD, 0xE1, 0x1B, 0x00, 0x71, 0x1A, 0x25, 0x00, 0xB1, 0x5F, 0x31, 0x00, 0xCB, 0xB3, 0x41, 0x00
	.byte 0x4E, 0x6E, 0x57, 0x00, 0x68, 0x58, 0x74, 0x00, 0x79, 0xD2, 0x9A, 0x00, 0x13, 0x06, 0xCE, 0x00
	.byte 0x86, 0x28, 0x12, 0x01, 0x66, 0xD3, 0x6C, 0x01, 0x66, 0x7A, 0xE5, 0x01, 0x1A, 0x08, 0x86, 0x02
	.byte 0xA4, 0xAE, 0x5B, 0x03, 0x55, 0xFD, 0x77, 0x04, 0x26, 0x52, 0xF2, 0x05, 0x5F, 0xC5, 0xE9, 0x07
	.byte 0x7D, 0x00, 0xA4, 0x00, 0xD7, 0x00, 0x1A, 0x01, 0x72, 0x01, 0xE4, 0x01, 0x7B, 0x02, 0x40, 0x03
	.byte 0x42, 0x04, 0x94, 0x05, 0x4F, 0x07, 0x94, 0x09, 0x8D, 0x0C, 0x72, 0x10, 0x8C, 0x15, 0x3C, 0x1C
	.byte 0x02, 0x00, 0xF9, 0xFF, 0xF9, 0xFF, 0x12, 0x00, 0x0F, 0x00, 0xD9, 0xFF, 0xE7, 0xFF, 0x4B, 0x00
	.byte 0x23, 0x00, 0x7E, 0xFF, 0xD7, 0xFF, 0xD4, 0x00, 0x26, 0x00, 0xB9, 0xFE, 0xEF, 0xFF, 0xE3, 0x01
	.byte 0xE0, 0xFF, 0x4F, 0xFD, 0x7C, 0x00, 0xBC, 0x03, 0xE5, 0xFE, 0xE5, 0xFA, 0x1F, 0x02, 0xF4, 0x06
	.byte 0x33, 0xFC, 0x5D, 0xF6, 0xC5, 0x06, 0x31, 0x0E, 0xF5, 0xF2, 0xF7, 0xE6, 0x63, 0x23, 0xC9, 0x75
	.byte 0xC9, 0x75, 0x63, 0x23, 0xF7, 0xE6, 0xF5, 0xF2, 0x31, 0x0E, 0xC5, 0x06, 0x5D, 0xF6, 0x33, 0xFC
	.byte 0xF4, 0x06, 0x1F, 0x02, 0xE5, 0xFA, 0xE5, 0xFE, 0xBC, 0x03, 0x7C, 0x00, 0x4F, 0xFD, 0xE0, 0xFF
	.byte 0xE3, 0x01, 0xEF, 0xFF, 0xB9, 0xFE, 0x26, 0x00, 0xD4, 0x00, 0xD7, 0xFF, 0x7E, 0xFF, 0x23, 0x00
	.byte 0x4B, 0x00, 0xE7, 0xFF, 0xD9, 0xFF, 0x0F, 0x00, 0x12, 0x00, 0xF9, 0xFF, 0xF9, 0xFF, 0x02, 0x00
	.byte 0x68, 0x67, 0x08, 0x02, 0xEC, 0x6A, 0x08, 0x02, 0x40, 0x6B, 0x08, 0x02, 0x94, 0x6B, 0x08, 0x02
	.byte 0xE8, 0x6B, 0x08, 0x02, 0x3C, 0x6C, 0x08, 0x02, 0x8C, 0x6C, 0x08, 0x02, 0xE0, 0x6C, 0x08, 0x02
	.byte 0x34, 0x6D, 0x08, 0x02, 0x88, 0x6D, 0x08, 0x02, 0xDC, 0x6D, 0x08, 0x02, 0x30, 0x6E, 0x08, 0x02
	.byte 0x84, 0x6E, 0x08, 0x02, 0xD8, 0x6E, 0x08, 0x02, 0x2C, 0x6F, 0x08, 0x02, 0x80, 0x6F, 0x08, 0x02
	.byte 0xD4, 0x6F, 0x08, 0x02, 0x28, 0x70, 0x08, 0x02, 0x7C, 0x70, 0x08, 0x02, 0xD0, 0x70, 0x08, 0x02
	.byte 0x20, 0x71, 0x08, 0x02, 0x74, 0x71, 0x08, 0x02, 0xC8, 0x71, 0x08, 0x02, 0x18, 0x72, 0x08, 0x02
	.byte 0x68, 0x72, 0x08, 0x02, 0xBC, 0x72, 0x08, 0x02, 0x10, 0x73, 0x08, 0x02, 0x60, 0x73, 0x08, 0x02
	.byte 0xB4, 0x73, 0x08, 0x02, 0x08, 0x74, 0x08, 0x02, 0x5C, 0x74, 0x08, 0x02, 0xB0, 0x74, 0x08, 0x02
	.byte 0x00, 0x75, 0x08, 0x02, 0x54, 0x75, 0x08, 0x02, 0xA8, 0x75, 0x08, 0x02, 0xFC, 0x75, 0x08, 0x02
	.byte 0x50, 0x76, 0x08, 0x02, 0xA4, 0x76, 0x08, 0x02, 0xF8, 0x76, 0x08, 0x02, 0x4C, 0x77, 0x08, 0x02
	.byte 0xA0, 0x77, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x30, 0x00, 0x02, 0x68, 0x30, 0x00, 0x02
	.byte 0x70, 0x30, 0x00, 0x02, 0x78, 0x30, 0x00, 0x02, 0x80, 0x30, 0x00, 0x02, 0x88, 0x30, 0x00, 0x02
	.byte 0x90, 0x30, 0x00, 0x02, 0x98, 0x30, 0x00, 0x02, 0xA0, 0x30, 0x00, 0x02, 0xA8, 0x30, 0x00, 0x02
	.byte 0xB0, 0x30, 0x00, 0x02, 0xB8, 0x30, 0x00, 0x02, 0xC0, 0x30, 0x00, 0x02, 0xC8, 0x30, 0x00, 0x02
	.byte 0xD0, 0x30, 0x00, 0x02, 0xD8, 0x30, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00
	.byte 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x0C, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00
	.byte 0x0E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00
	.byte 0x06, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00
	.byte 0x05, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
	.byte 0x0D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x09, 0x00, 0x00, 0x00, 0x78, 0xA4, 0x6A, 0xD7, 0x56, 0xB7, 0xC7, 0xE8, 0xDB, 0x70, 0x20, 0x24
	.byte 0xEE, 0xCE, 0xBD, 0xC1, 0xAF, 0x0F, 0x7C, 0xF5, 0x2A, 0xC6, 0x87, 0x47, 0x13, 0x46, 0x30, 0xA8
	.byte 0x01, 0x95, 0x46, 0xFD, 0xD8, 0x98, 0x80, 0x69, 0xAF, 0xF7, 0x44, 0x8B, 0xB1, 0x5B, 0xFF, 0xFF
	.byte 0xBE, 0xD7, 0x5C, 0x89, 0x22, 0x11, 0x90, 0x6B, 0x93, 0x71, 0x98, 0xFD, 0x8E, 0x43, 0x79, 0xA6
	.byte 0x21, 0x08, 0xB4, 0x49, 0x62, 0x25, 0x1E, 0xF6, 0x40, 0xB3, 0x40, 0xC0, 0x51, 0x5A, 0x5E, 0x26
	.byte 0xAA, 0xC7, 0xB6, 0xE9, 0x5D, 0x10, 0x2F, 0xD6, 0x53, 0x14, 0x44, 0x02, 0x81, 0xE6, 0xA1, 0xD8
	.byte 0xC8, 0xFB, 0xD3, 0xE7, 0xE6, 0xCD, 0xE1, 0x21, 0xD6, 0x07, 0x37, 0xC3, 0x87, 0x0D, 0xD5, 0xF4
	.byte 0xED, 0x14, 0x5A, 0x45, 0x05, 0xE9, 0xE3, 0xA9, 0xF8, 0xA3, 0xEF, 0xFC, 0xD9, 0x02, 0x6F, 0x67
	.byte 0x8A, 0x4C, 0x2A, 0x8D, 0x42, 0x39, 0xFA, 0xFF, 0x81, 0xF6, 0x71, 0x87, 0x22, 0x61, 0x9D, 0x6D
	.byte 0x0C, 0x38, 0xE5, 0xFD, 0x44, 0xEA, 0xBE, 0xA4, 0xA9, 0xCF, 0xDE, 0x4B, 0x60, 0x4B, 0xBB, 0xF6
	.byte 0x70, 0xBC, 0xBF, 0xBE, 0xC6, 0x7E, 0x9B, 0x28, 0xFA, 0x27, 0xA1, 0xEA, 0x85, 0x30, 0xEF, 0xD4
	.byte 0x05, 0x1D, 0x88, 0x04, 0x39, 0xD0, 0xD4, 0xD9, 0xE5, 0x99, 0xDB, 0xE6, 0xF8, 0x7C, 0xA2, 0x1F
	.byte 0x65, 0x56, 0xAC, 0xC4, 0x44, 0x22, 0x29, 0xF4, 0x97, 0xFF, 0x2A, 0x43, 0xA7, 0x23, 0x94, 0xAB
	.byte 0x39, 0xA0, 0x93, 0xFC, 0xC3, 0x59, 0x5B, 0x65, 0x92, 0xCC, 0x0C, 0x8F, 0x7D, 0xF4, 0xEF, 0xFF
	.byte 0xD1, 0x5D, 0x84, 0x85, 0x4F, 0x7E, 0xA8, 0x6F, 0xE0, 0xE6, 0x2C, 0xFE, 0x14, 0x43, 0x01, 0xA3
	.byte 0xA1, 0x11, 0x08, 0x4E, 0x82, 0x7E, 0x53, 0xF7, 0x35, 0xF2, 0x3A, 0xBD, 0xBB, 0xD2, 0xD7, 0x2A
	.byte 0x91, 0xD3, 0x86, 0xEB, 0xA8, 0xAA, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00
	.byte 0x3B, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00
	.byte 0xB5, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00, 0xF3, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x00
	.byte 0x30, 0x01, 0x00, 0x00, 0x4E, 0x01, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x72, 0x6F, 0x6D, 0x00
	.byte 0x3A, 0x2F, 0x00, 0x00, 0x72, 0x6F, 0x6D, 0x00, 0x72, 0x6F, 0x6D, 0x3A, 0x00, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00
	.byte 0x10, 0x9F, 0x01, 0x02, 0x18, 0x9F, 0x01, 0x02, 0x20, 0x9F, 0x01, 0x02, 0x28, 0x9F, 0x01, 0x02
	.byte 0x00, 0xF0, 0x08, 0x02, 0xD4, 0xEE, 0x08, 0x02, 0xF0, 0xEF, 0x08, 0x02, 0xE4, 0xEE, 0x08, 0x02
	.byte 0xB0, 0xEE, 0x08, 0x02, 0x62, 0x61, 0x64, 0x5F, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F
	.byte 0x6E, 0x00, 0x00, 0x00, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69
	.byte 0x6F, 0x6E, 0x00, 0x00, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x62, 0x61, 0x64, 0x5F, 0x65, 0x78, 0x63
	.byte 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0xEE, 0x08, 0x02
	.byte 0x68, 0xD9, 0x01, 0x02, 0x20, 0xDD, 0x01, 0x02, 0x34, 0xDD, 0x01, 0x02, 0x21, 0x73, 0x74, 0x64
	.byte 0x3A, 0x3A, 0x62, 0x61, 0x64, 0x5F, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21
	.byte 0x21, 0x00, 0x00, 0x00, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74
	.byte 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x62, 0x61, 0x64, 0x5F, 0x65, 0x78
	.byte 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x00, 0x00, 0x00, 0xB4, 0xDD, 0x01, 0x02
	.byte 0xC0, 0xDD, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x62, 0x61, 0x64, 0x5F, 0x61, 0x6C, 0x6C, 0x6F
	.byte 0x63, 0x00, 0x00, 0x00, 0xF0, 0xEF, 0x08, 0x02, 0x70, 0xEF, 0x08, 0x02, 0xB0, 0xEE, 0x08, 0x02
	.byte 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x62, 0x61, 0x64, 0x5F, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x64, 0xEF, 0x08, 0x02, 0x10, 0xE0, 0x01, 0x02, 0xC4, 0xE0, 0x01, 0x02
	.byte 0xD8, 0xE0, 0x01, 0x02, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74
	.byte 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x62, 0x61, 0x64, 0x5F, 0x61, 0x6C
	.byte 0x6C, 0x6F, 0x63, 0x21, 0x21, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x08, 0x02, 0xD8, 0xEF, 0x08, 0x02
	.byte 0xF0, 0xEF, 0x08, 0x02, 0x28, 0xF0, 0x08, 0x02, 0xCC, 0xEF, 0x08, 0x02, 0xF0, 0xEF, 0x08, 0x02
	.byte 0x08, 0xF0, 0x08, 0x02, 0xB8, 0xEF, 0x08, 0x02, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x74, 0x79, 0x70
	.byte 0x65, 0x5F, 0x69, 0x6E, 0x66, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xEF, 0x08, 0x02
	.byte 0x40, 0xE4, 0x01, 0x02, 0x54, 0xE4, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xEF, 0x08, 0x02
	.byte 0xFC, 0xE3, 0x01, 0x02, 0x10, 0xE4, 0x01, 0x02, 0x5F, 0x5F, 0x63, 0x78, 0x78, 0x61, 0x62, 0x69
	.byte 0x76, 0x31, 0x3A, 0x3A, 0x5F, 0x5F, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x5F, 0x74, 0x79, 0x70, 0x65
	.byte 0x5F, 0x69, 0x6E, 0x66, 0x6F, 0x00, 0x00, 0x00, 0x5F, 0x5F, 0x63, 0x78, 0x78, 0x61, 0x62, 0x69
	.byte 0x76, 0x31, 0x3A, 0x3A, 0x5F, 0x5F, 0x73, 0x69, 0x5F, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x5F, 0x74
	.byte 0x79, 0x70, 0x65, 0x5F, 0x69, 0x6E, 0x66, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x9D, 0x09, 0x02, 0x00, 0x01, 0x00, 0x00
	.byte 0x60, 0x9D, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xC8, 0x01, 0x02, 0x1C, 0xC9, 0x01, 0x02
	.byte 0x60, 0xC9, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x60, 0x9C, 0x09, 0x02, 0x00, 0x01, 0x00, 0x00, 0x60, 0x9C, 0x09, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xCC, 0xC8, 0x01, 0x02, 0x1C, 0xC9, 0x01, 0x02, 0x60, 0xC9, 0x01, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x60, 0x9B, 0x09, 0x02, 0x00, 0x01, 0x00, 0x00, 0x60, 0x9B, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xCC, 0xC8, 0x01, 0x02, 0x1C, 0xC9, 0x01, 0x02, 0x60, 0xC9, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x25, 0x54, 0x00, 0x00, 0x41, 0x4D, 0x7C, 0x50
	.byte 0x4D, 0x00, 0x00, 0x00, 0xF4, 0x17, 0x02, 0x02, 0x2C, 0x18, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00
	.byte 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xF2, 0x08, 0x02, 0x3C, 0xF1, 0x08, 0x02
	.byte 0xA0, 0xF1, 0x08, 0x02, 0x94, 0xF1, 0x08, 0x02, 0x7C, 0xF1, 0x08, 0x02, 0x38, 0xF1, 0x08, 0x02
	.byte 0xB0, 0xF1, 0x08, 0x02, 0x08, 0xF2, 0x08, 0x02, 0x34, 0xF1, 0x08, 0x02, 0x25, 0x6D, 0x2F, 0x25
	.byte 0x64, 0x2F, 0x25, 0x79, 0x00, 0x00, 0x00, 0x00, 0x5C, 0xF1, 0x08, 0x02, 0x4C, 0xF1, 0x08, 0x02
	.byte 0x44, 0xF1, 0x08, 0x02, 0x25, 0x49, 0x3A, 0x25, 0x4D, 0x3A, 0x25, 0x53, 0x20, 0x25, 0x70, 0x00
	.byte 0x25, 0x61, 0x20, 0x25, 0x62, 0x20, 0x25, 0x65, 0x20, 0x25, 0x54, 0x20, 0x25, 0x59, 0x00, 0x00
	.byte 0x53, 0x75, 0x6E, 0x7C, 0x53, 0x75, 0x6E, 0x64, 0x61, 0x79, 0x7C, 0x4D, 0x6F, 0x6E, 0x7C, 0x4D
	.byte 0x6F, 0x6E, 0x64, 0x61, 0x79, 0x7C, 0x54, 0x75, 0x65, 0x7C, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61
	.byte 0x79, 0x7C, 0x57, 0x65, 0x64, 0x7C, 0x57, 0x65, 0x64, 0x6E, 0x65, 0x73, 0x64, 0x61, 0x79, 0x7C
	.byte 0x54, 0x68, 0x75, 0x7C, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x7C, 0x46, 0x72, 0x69
	.byte 0x7C, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x7C, 0x53, 0x61, 0x74, 0x7C, 0x53, 0x61, 0x74, 0x75
	.byte 0x72, 0x64, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x61, 0x6E, 0x7C, 0x4A, 0x61, 0x6E, 0x75
	.byte 0x61, 0x72, 0x79, 0x7C, 0x46, 0x65, 0x62, 0x7C, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79
	.byte 0x7C, 0x4D, 0x61, 0x72, 0x7C, 0x4D, 0x61, 0x72, 0x63, 0x68, 0x7C, 0x41, 0x70, 0x72, 0x7C, 0x41
	.byte 0x70, 0x72, 0x69, 0x6C, 0x7C, 0x4D, 0x61, 0x79, 0x7C, 0x4D, 0x61, 0x79, 0x7C, 0x4A, 0x75, 0x6E
	.byte 0x7C, 0x4A, 0x75, 0x6E, 0x65, 0x7C, 0x4A, 0x75, 0x6C, 0x7C, 0x4A, 0x75, 0x6C, 0x79, 0x7C, 0x41
	.byte 0x75, 0x67, 0x7C, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x7C, 0x53, 0x65, 0x70, 0x7C, 0x53, 0x65
	.byte 0x70, 0x74, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x7C, 0x4F, 0x63, 0x74, 0x7C, 0x4F, 0x63, 0x74, 0x6F
	.byte 0x62, 0x65, 0x72, 0x7C, 0x4E, 0x6F, 0x76, 0x7C, 0x4E, 0x6F, 0x76, 0x65, 0x6D, 0x62, 0x65, 0x72
	.byte 0x7C, 0x44, 0x65, 0x63, 0x7C, 0x44, 0x65, 0x63, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00
	.byte 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x10, 0x00
	.byte 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x00, 0x27, 0x00, 0x28, 0x00
	.byte 0x29, 0x00, 0x2A, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00
	.byte 0x17, 0x00, 0x2B, 0x00, 0x2D, 0x00, 0x2F, 0x00, 0x31, 0x00, 0x33, 0x00, 0x35, 0x00, 0x37, 0x00
	.byte 0x39, 0x00, 0x3B, 0x00, 0x3D, 0x00, 0x3F, 0x00, 0x41, 0x00, 0x43, 0x00, 0x45, 0x00, 0x47, 0x00
	.byte 0x49, 0x00, 0x4B, 0x00, 0x4D, 0x00, 0x4F, 0x00, 0x51, 0x00, 0x53, 0x00, 0x55, 0x00, 0x57, 0x00
	.byte 0x59, 0x00, 0x5B, 0x00, 0x5D, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x1C, 0x00
	.byte 0x00, 0x00, 0x2C, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x32, 0x00, 0x34, 0x00, 0x36, 0x00, 0x38, 0x00
	.byte 0x3A, 0x00, 0x3C, 0x00, 0x3E, 0x00, 0x40, 0x00, 0x42, 0x00, 0x44, 0x00, 0x46, 0x00, 0x48, 0x00
	.byte 0x4A, 0x00, 0x4C, 0x00, 0x4E, 0x00, 0x50, 0x00, 0x52, 0x00, 0x54, 0x00, 0x56, 0x00, 0x58, 0x00
	.byte 0x5A, 0x00, 0x5C, 0x00, 0x5E, 0x00, 0x1D, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x00, 0x00
	.byte 0x2D, 0x49, 0x4E, 0x46, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x69, 0x6E, 0x66, 0x00, 0x00, 0x00, 0x00
	.byte 0x49, 0x4E, 0x46, 0x00, 0x69, 0x6E, 0x66, 0x00, 0x2D, 0x4E, 0x41, 0x4E, 0x00, 0x00, 0x00, 0x00
	.byte 0x2D, 0x6E, 0x61, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x41, 0x4E, 0x00, 0x6E, 0x61, 0x6E, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x35, 0x34, 0x32, 0x31
	.byte 0x30, 0x31, 0x30, 0x38, 0x36, 0x32, 0x34, 0x32, 0x37, 0x35, 0x32, 0x32, 0x31, 0x37, 0x30, 0x30
	.byte 0x33, 0x37, 0x32, 0x36, 0x34, 0x30, 0x30, 0x34, 0x33, 0x34, 0x39, 0x37, 0x30, 0x38, 0x35, 0x35
	.byte 0x37, 0x31, 0x32, 0x38, 0x39, 0x30, 0x36, 0x32, 0x35, 0x00, 0x00, 0x00, 0x31, 0x31, 0x31, 0x30
	.byte 0x32, 0x32, 0x33, 0x30, 0x32, 0x34, 0x36, 0x32, 0x35, 0x31, 0x35, 0x36, 0x35, 0x34, 0x30, 0x34
	.byte 0x32, 0x33, 0x36, 0x33, 0x31, 0x36, 0x36, 0x38, 0x30, 0x39, 0x30, 0x38, 0x32, 0x30, 0x33, 0x31
	.byte 0x32, 0x35, 0x00, 0x00, 0x32, 0x33, 0x32, 0x38, 0x33, 0x30, 0x36, 0x34, 0x33, 0x36, 0x35, 0x33
	.byte 0x38, 0x36, 0x39, 0x36, 0x32, 0x38, 0x39, 0x30, 0x36, 0x32, 0x35, 0x00, 0x31, 0x35, 0x32, 0x35
	.byte 0x38, 0x37, 0x38, 0x39, 0x30, 0x36, 0x32, 0x35, 0x00, 0x00, 0x00, 0x00, 0x33, 0x39, 0x30, 0x36
	.byte 0x32, 0x35, 0x00, 0x00, 0x37, 0x38, 0x31, 0x32, 0x35, 0x00, 0x00, 0x00, 0x31, 0x35, 0x36, 0x32
	.byte 0x35, 0x00, 0x00, 0x00, 0x33, 0x31, 0x32, 0x35, 0x00, 0x00, 0x00, 0x00, 0x36, 0x32, 0x35, 0x00
	.byte 0x31, 0x32, 0x35, 0x00, 0x32, 0x35, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00
	.byte 0x32, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x31, 0x36, 0x00, 0x00
	.byte 0x33, 0x32, 0x00, 0x00, 0x36, 0x34, 0x00, 0x00, 0x31, 0x32, 0x38, 0x00, 0x32, 0x35, 0x36, 0x00
	.byte 0x00, 0xF0, 0x08, 0x02, 0xB8, 0xF4, 0x08, 0x02, 0x00, 0xF0, 0x08, 0x02, 0x94, 0xF4, 0x08, 0x02
	.byte 0xF0, 0xEF, 0x08, 0x02, 0xE4, 0xF4, 0x08, 0x02, 0x60, 0xF4, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x70, 0xF4, 0x08, 0x02, 0x50, 0x89, 0x02, 0x02, 0x3C, 0x89, 0x02, 0x02, 0xA4, 0x88, 0x02, 0x02
	.byte 0xCC, 0x88, 0x02, 0x02, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x3A
	.byte 0x3A, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x5F, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x3C
	.byte 0x63, 0x68, 0x61, 0x72, 0x5B, 0x5D, 0x3E, 0x00, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x74, 0x72, 0x31
	.byte 0x3A, 0x3A, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x3A, 0x3A, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64
	.byte 0x5F, 0x70, 0x74, 0x72, 0x5F, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x72, 0x5F, 0x63, 0x6F, 0x6D
	.byte 0x6D, 0x6F, 0x6E, 0x00, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x74, 0x72, 0x31, 0x3A, 0x3A, 0x64, 0x65
	.byte 0x74, 0x61, 0x69, 0x6C, 0x3A, 0x3A, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5F, 0x70, 0x74, 0x72
	.byte 0x5F, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x72, 0x3C, 0x63, 0x68, 0x61, 0x72, 0x2C, 0x20, 0x73
	.byte 0x74, 0x64, 0x3A, 0x3A, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x3A, 0x3A, 0x64, 0x65, 0x66, 0x61
	.byte 0x75, 0x6C, 0x74, 0x5F, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x3C, 0x63, 0x68, 0x61, 0x72, 0x5B
	.byte 0x5D, 0x3E, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xF0, 0xEF, 0x08, 0x02
	.byte 0x60, 0xF5, 0x08, 0x02, 0xB0, 0xEE, 0x08, 0x02, 0xF0, 0xEF, 0x08, 0x02, 0x74, 0xF5, 0x08, 0x02
	.byte 0x3C, 0xF5, 0x08, 0x02, 0xF0, 0xEF, 0x08, 0x02, 0x88, 0xF5, 0x08, 0x02, 0x3C, 0xF5, 0x08, 0x02
	.byte 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72
	.byte 0x00, 0x00, 0x00, 0x00, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x6F, 0x75, 0x74, 0x5F, 0x6F, 0x66, 0x5F
	.byte 0x72, 0x61, 0x6E, 0x67, 0x65, 0x00, 0x00, 0x00, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x6C, 0x65, 0x6E
	.byte 0x67, 0x74, 0x68, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x48, 0xF5, 0x08, 0x02, 0x0C, 0x8F, 0x02, 0x02, 0x24, 0x8F, 0x02, 0x02, 0x54, 0x89, 0x02, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x54, 0xF5, 0x08, 0x02, 0xD4, 0x8E, 0x02, 0x02, 0xEC, 0x8E, 0x02, 0x02
	.byte 0x54, 0x89, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x3C, 0xF5, 0x08, 0x02, 0x9C, 0x8E, 0x02, 0x02
	.byte 0xB4, 0x8E, 0x02, 0x02, 0x54, 0x89, 0x02, 0x02, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x65, 0x78
	.byte 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A, 0x6C, 0x6F
	.byte 0x67, 0x69, 0x63, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x21, 0x73, 0x74, 0x64, 0x3A, 0x3A
	.byte 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x21, 0x00, 0x00
	.byte 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3A, 0x20, 0x6F, 0x75
	.byte 0x74, 0x5F, 0x6F, 0x66, 0x5F, 0x72, 0x61, 0x6E, 0x67, 0x65, 0x00, 0x00, 0x21, 0x73, 0x74, 0x64
	.byte 0x3A, 0x3A, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x21, 0x21, 0x73, 0x74, 0x64
	.byte 0x3A, 0x3A, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x21, 0x21, 0x73
	.byte 0x74, 0x64, 0x3A, 0x3A, 0x6F, 0x75, 0x74, 0x5F, 0x6F, 0x66, 0x5F, 0x72, 0x61, 0x6E, 0x67, 0x65
	.byte 0x21, 0x21, 0x00, 0x00, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5F, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67
	.byte 0x3A, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x5F, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x78, 0x9C, 0x02, 0x02, 0x64, 0x9C, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xA4, 0x8F, 0x02, 0x02, 0xEC, 0x9C, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xA0, 0x8F, 0x02, 0x02, 0xC4, 0x9C, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xA8, 0x8F, 0x02, 0x02, 0xD8, 0x9C, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x4C, 0x24, 0x05, 0x02, 0xA0, 0x24, 0x05, 0x02, 0xA4, 0x9C, 0x02, 0x02, 0x7C, 0x9C, 0x02, 0x02
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x48, 0x03, 0x00, 0x00
	.byte 0x46, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x40, 0x81, 0x49, 0x81, 0x68, 0x81, 0x94, 0x81
	.byte 0x90, 0x81, 0x93, 0x81, 0x95, 0x81, 0x66, 0x81, 0x69, 0x81, 0x6A, 0x81, 0x96, 0x81, 0x7B, 0x81
	.byte 0x43, 0x81, 0x7C, 0x81, 0x44, 0x81, 0x5E, 0x81, 0x46, 0x81, 0x47, 0x81, 0x83, 0x81, 0x81, 0x81
	.byte 0x84, 0x81, 0x48, 0x81, 0x97, 0x81, 0x6D, 0x81, 0x8F, 0x81, 0x6E, 0x81, 0x4F, 0x81, 0x51, 0x81
	.byte 0x6F, 0x81, 0x62, 0x81, 0x70, 0x81, 0x60, 0x81, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x77, 0x65, 0x61, 0x72, 0x73, 0x65, 0x74, 0x2E, 0x64
	.byte 0x61, 0x74, 0x00, 0x00, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x73, 0x68, 0x6F, 0x65, 0x73, 0x69
	.byte 0x6E, 0x66, 0x6F, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x67, 0x6C
	.byte 0x6F, 0x76, 0x65, 0x69, 0x6E, 0x66, 0x6F, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x6C, 0x6F, 0x67, 0x69
	.byte 0x63, 0x2F, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6E, 0x66, 0x6F, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00
	.byte 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x70, 0x61, 0x6C, 0x73, 0x6B, 0x69, 0x6E, 0x33, 0x64, 0x2E
	.byte 0x64, 0x61, 0x74, 0x00, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x70, 0x61, 0x6C, 0x73, 0x6B, 0x69
	.byte 0x6E, 0x32, 0x64, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x70, 0x61
	.byte 0x6C, 0x73, 0x6B, 0x69, 0x6E, 0x66, 0x61, 0x63, 0x65, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x2F, 0x46, 0x4F
	.byte 0x4E, 0x54, 0x38, 0x2E, 0x4E, 0x46, 0x54, 0x52, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x2F, 0x52, 0x55, 0x42, 0x49, 0x38, 0x2E
	.byte 0x4E, 0x46, 0x54, 0x52, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x66, 0x6F, 0x6E, 0x74, 0x2F, 0x46, 0x4F, 0x4E, 0x54, 0x31, 0x32, 0x2E, 0x4E, 0x46, 0x54
	.byte 0x52, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x66, 0x6F, 0x6E
	.byte 0x74, 0x2F, 0x46, 0x4F, 0x4E, 0x54, 0x31, 0x32, 0x54, 0x2E, 0x4E, 0x46, 0x54, 0x52, 0x00, 0x00
	.byte 0x46, 0x4F, 0x4E, 0x54, 0x5F, 0x42, 0x4C, 0x41, 0x4E, 0x4B, 0x5F, 0x43, 0x4F, 0x44, 0x45, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
	.byte 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
	.byte 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0xB2, 0x02, 0x02
	.byte 0x10, 0xB2, 0x02, 0x02, 0xA8, 0xB2, 0x02, 0x02, 0xA4, 0xB2, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x08, 0xB2, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x04, 0xB2, 0x02, 0x02, 0x00, 0xB2, 0x02, 0x02, 0xF8, 0xB1, 0x02, 0x02, 0xF0, 0xB1, 0x02, 0x02
	.byte 0xE8, 0xB1, 0x02, 0x02, 0xE0, 0xB1, 0x02, 0x02, 0x94, 0xB2, 0x02, 0x02, 0x84, 0xB2, 0x02, 0x02
	.byte 0x78, 0xB2, 0x02, 0x02, 0x6C, 0xB2, 0x02, 0x02, 0x5C, 0xB2, 0x02, 0x02, 0x4C, 0xB2, 0x02, 0x02
	.byte 0x3C, 0xB2, 0x02, 0x02, 0x30, 0xB2, 0x02, 0x02, 0x24, 0xB2, 0x02, 0x02, 0xD8, 0xB1, 0x02, 0x02
	.byte 0xD0, 0xB1, 0x02, 0x02, 0xC8, 0xB1, 0x02, 0x02, 0x4D, 0x44, 0x4C, 0x5F, 0x53, 0x43, 0x41, 0x4C
	.byte 0x45, 0x5F, 0x43, 0x48, 0x41, 0x52, 0x00, 0x00, 0x4D, 0x44, 0x4C, 0x5F, 0x53, 0x43, 0x41, 0x4C
	.byte 0x45, 0x5F, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x44, 0x4C, 0x5F
	.byte 0x53, 0x43, 0x41, 0x4C, 0x45, 0x5F, 0x4D, 0x41, 0x50, 0x4F, 0x42, 0x4A, 0x45, 0x43, 0x54, 0x00
	.byte 0x4D, 0x44, 0x4C, 0x5F, 0x53, 0x43, 0x41, 0x4C, 0x45, 0x5F, 0x43, 0x41, 0x4D, 0x45, 0x52, 0x41
	.byte 0x00, 0x00, 0x00, 0x00, 0x4D, 0x44, 0x4C, 0x5F, 0x46, 0x49, 0x45, 0x4C, 0x44, 0x5F, 0x57, 0x49
	.byte 0x44, 0x54, 0x48, 0x00, 0x4D, 0x44, 0x4C, 0x5F, 0x46, 0x49, 0x45, 0x4C, 0x44, 0x5F, 0x48, 0x45
	.byte 0x49, 0x47, 0x48, 0x54, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x44, 0x4C, 0x5F, 0x46, 0x49, 0x45, 0x4C
	.byte 0x44, 0x5F, 0x4D, 0x41, 0x52, 0x47, 0x49, 0x4E, 0x5F, 0x57, 0x00, 0x00, 0x4D, 0x44, 0x4C, 0x5F
	.byte 0x46, 0x49, 0x45, 0x4C, 0x44, 0x5F, 0x4D, 0x41, 0x52, 0x47, 0x49, 0x4E, 0x5F, 0x48, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x70, 0x69, 0x63, 0x32, 0x64, 0x2F, 0x64
	.byte 0x65, 0x62, 0x66, 0x6F, 0x6E, 0x74, 0x38, 0x2E, 0x70, 0x61, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0xFA, 0x08, 0x02, 0xA8, 0xFA, 0x08, 0x02
	.byte 0x80, 0xFA, 0x08, 0x02, 0xB4, 0xFA, 0x08, 0x02, 0xC0, 0xFA, 0x08, 0x02, 0x88, 0xFA, 0x08, 0x02
	.byte 0x9C, 0xFA, 0x08, 0x02, 0x70, 0xFA, 0x08, 0x02, 0x78, 0xFA, 0x08, 0x02, 0x90, 0xFA, 0x08, 0x02
	.byte 0x4A, 0x30, 0x32, 0x2E, 0x53, 0x41, 0x44, 0x00, 0x4A, 0x30, 0x36, 0x2E, 0x53, 0x41, 0x44, 0x00
	.byte 0x4A, 0x30, 0x36, 0x2E, 0x53, 0x4D, 0x57, 0x00, 0x50, 0x30, 0x31, 0x2E, 0x53, 0x4D, 0x57, 0x00
	.byte 0x50, 0x42, 0x30, 0x31, 0x2E, 0x53, 0x4D, 0x57, 0x00, 0x00, 0x00, 0x00, 0x54, 0x49, 0x54, 0x4C
	.byte 0x45, 0x2E, 0x53, 0x41, 0x44, 0x00, 0x00, 0x00, 0x53, 0x52, 0x5F, 0x30, 0x30, 0x30, 0x2E, 0x53
	.byte 0x4D, 0x57, 0x00, 0x00, 0x53, 0x52, 0x5F, 0x30, 0x30, 0x31, 0x2E, 0x53, 0x4D, 0x57, 0x00, 0x00
	.byte 0x53, 0x52, 0x5F, 0x30, 0x30, 0x32, 0x2E, 0x53, 0x4D, 0x57, 0x00, 0x00, 0x73, 0x6F, 0x75, 0x6E
	.byte 0x64, 0x2F, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x00, 0x53, 0x59, 0x5F, 0x30, 0x30, 0x31, 0x00, 0x00
	.byte 0x53, 0x59, 0x5F, 0x30, 0x30, 0x30, 0x00, 0x00, 0x53, 0x59, 0x5F, 0x30, 0x30, 0x32, 0x00, 0x00
	.byte 0x33, 0x44, 0x5F, 0x39, 0x30, 0x30, 0x00, 0x00, 0x33, 0x44, 0x5F, 0x39, 0x30, 0x31, 0x00, 0x00
	.byte 0x32, 0x44, 0x5F, 0x30, 0x30, 0x31, 0x00, 0x00, 0x32, 0x44, 0x5F, 0x30, 0x30, 0x32, 0x00, 0x00
	.byte 0x50, 0x25, 0x30, 0x32, 0x64, 0x00, 0x00, 0x00, 0x53, 0x52, 0x5F, 0x25, 0x30, 0x33, 0x64, 0x00
	.byte 0x32, 0x44, 0x5F, 0x30, 0x30, 0x30, 0x00, 0x00, 0x3C, 0x25, 0x33, 0x64, 0x3E, 0x00, 0x00, 0x00
	.byte 0x25, 0x73, 0x2E, 0x53, 0x4D, 0x57, 0x00, 0x00, 0x2E, 0x53, 0x41, 0x44, 0x00, 0x00, 0x00, 0x00
	.byte 0x2E, 0x73, 0x61, 0x64, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x53, 0x41, 0x44, 0x00, 0x00, 0x00, 0x00
	.byte 0x2E, 0x73, 0x61, 0x64, 0x00, 0x00, 0x00, 0x00, 0x73, 0x3C, 0x25, 0x64, 0x3E, 0x00, 0x00, 0x00
	.byte 0x6E, 0x3C, 0x25, 0x64, 0x3E, 0x00, 0x00, 0x00, 0x2E, 0x53, 0x41, 0x44, 0x00, 0x00, 0x00, 0x00
	.byte 0x2E, 0x73, 0x61, 0x64, 0x00, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x53, 0x4D, 0x57, 0x00, 0x00
	.byte 0x25, 0x73, 0x2E, 0x53, 0x45, 0x57, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x53, 0x45, 0x57, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x2F, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x2F, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6D, 0x6F, 0x76, 0x69, 0x65, 0x2F, 0x25, 0x73, 0x2E, 0x6D, 0x6F, 0x64, 0x73, 0x00, 0x00
	.byte 0x25, 0x73, 0x2E, 0x73, 0x61, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x70, 0xED, 0x02, 0x02, 0xA8, 0xED, 0x02, 0x02, 0x72, 0x6F, 0x6D, 0x00, 0x72, 0x6F, 0x6D, 0x00
	.byte 0x53, 0x46, 0x50, 0x00, 0x53, 0x46, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xD4, 0xFC, 0x08, 0x02, 0x70, 0x70, 0x75, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x66, 0x61, 0x63, 0x2E
	.byte 0x70, 0x6B, 0x62, 0x00, 0x66, 0x61, 0x62, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x2C, 0xFC, 0x08, 0x02
	.byte 0x34, 0xFC, 0x08, 0x02, 0x24, 0xFC, 0x08, 0x02, 0x6D, 0x6C, 0x6E, 0x5F, 0x77, 0x30, 0x32, 0x2E
	.byte 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x6C, 0x6E, 0x5F, 0x77, 0x30, 0x30, 0x2E
	.byte 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x6C, 0x6E, 0x5F, 0x70, 0x30, 0x32, 0x2E
	.byte 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x6C, 0x6E, 0x5F, 0x77, 0x30, 0x31, 0x2E
	.byte 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x6C, 0x6E, 0x5F, 0x70, 0x30, 0x30, 0x2E
	.byte 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x6C, 0x6E, 0x5F, 0x70, 0x30, 0x31, 0x2E
	.byte 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x6C, 0x6E, 0x5F, 0x77, 0x30, 0x33, 0x2E
	.byte 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x88, 0xFC, 0x08, 0x02, 0x98, 0xFC, 0x08, 0x02
	.byte 0xA8, 0xFC, 0x08, 0x02, 0x48, 0xFC, 0x08, 0x02, 0x58, 0xFC, 0x08, 0x02, 0x68, 0xFC, 0x08, 0x02
	.byte 0x78, 0xFC, 0x08, 0x02, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x70, 0x69, 0x63
	.byte 0x33, 0x64, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F, 0x67, 0x6F, 0x61, 0x6C, 0x49, 0x6D
	.byte 0x67, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x6D, 0x61
	.byte 0x70, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x25, 0x73, 0x2E, 0x70
	.byte 0x61, 0x63, 0x5F, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x70, 0x69, 0x63
	.byte 0x33, 0x64, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F, 0x25, 0x73, 0x2E, 0x70, 0x61, 0x63
	.byte 0x5F, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x66, 0x61, 0x63
	.byte 0x65, 0x32, 0x64, 0x2F, 0x66, 0x61, 0x63, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x66, 0x61, 0x63, 0x65, 0x32, 0x64, 0x2F, 0x66, 0x61, 0x62, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x66, 0x61, 0x63
	.byte 0x65, 0x32, 0x64, 0x2F, 0x70, 0x70, 0x75, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x66, 0x61, 0x63, 0x65, 0x32, 0x64, 0x2F, 0x00, 0x00, 0x00, 0x00
	.byte 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x2E, 0x6E, 0x62, 0x66, 0x70, 0x00, 0x00, 0x00
	.byte 0x66, 0x61, 0x63, 0x25, 0x30, 0x38, 0x64, 0x00, 0x66, 0x61, 0x62, 0x25, 0x30, 0x38, 0x64, 0x00
	.byte 0x70, 0x70, 0x75, 0x25, 0x30, 0x34, 0x64, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x66, 0x61, 0x63, 0x65, 0x32, 0x64, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x70, 0x61, 0x63
	.byte 0x5F, 0x00, 0x00, 0x00, 0x2E, 0x6E, 0x62, 0x66, 0x70, 0x00, 0x00, 0x00, 0x66, 0x61, 0x63, 0x25
	.byte 0x30, 0x38, 0x64, 0x00, 0x66, 0x61, 0x62, 0x25, 0x30, 0x38, 0x64, 0x00, 0x70, 0x70, 0x75, 0x25
	.byte 0x30, 0x34, 0x64, 0x00, 0x62, 0x61, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6C, 0x00
	.byte 0x25, 0x73, 0x2E, 0x70, 0x61, 0x63, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x50, 0x4C, 0x54, 0x00, 0x00
	.byte 0x25, 0x73, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x6D, 0x6F, 0x25, 0x30, 0x34, 0x64, 0x2E, 0x70
	.byte 0x61, 0x63, 0x5F, 0x00, 0x6D, 0x62, 0x64, 0x5F, 0x73, 0x30, 0x30, 0x31, 0x6C, 0x70, 0x31, 0x2E
	.byte 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x62, 0x64, 0x5F, 0x73, 0x30, 0x30, 0x31
	.byte 0x6C, 0x70, 0x32, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x62, 0x64, 0x5F
	.byte 0x73, 0x25, 0x30, 0x33, 0x64, 0x6C, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x6D, 0x62, 0x64, 0x5F
	.byte 0x73, 0x30, 0x30, 0x31, 0x72, 0x70, 0x32, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00
	.byte 0x6D, 0x62, 0x64, 0x5F, 0x73, 0x30, 0x30, 0x31, 0x72, 0x70, 0x31, 0x2E, 0x70, 0x61, 0x63, 0x5F
	.byte 0x00, 0x00, 0x00, 0x00, 0x6D, 0x62, 0x64, 0x5F, 0x73, 0x25, 0x30, 0x33, 0x64, 0x72, 0x2E, 0x70
	.byte 0x61, 0x63, 0x5F, 0x00, 0x6D, 0x62, 0x64, 0x5F, 0x70, 0x30, 0x31, 0x2E, 0x70, 0x61, 0x63, 0x5F
	.byte 0x00, 0x00, 0x00, 0x00, 0x6D, 0x62, 0x64, 0x5F, 0x67, 0x30, 0x25, 0x64, 0x2E, 0x70, 0x61, 0x63
	.byte 0x5F, 0x00, 0x00, 0x00, 0x52, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x5F, 0x46, 0x4C, 0x49, 0x43, 0x4B
	.byte 0x45, 0x52, 0x5F, 0x54, 0x49, 0x4D, 0x45, 0x5F, 0x4F, 0x4E, 0x00, 0x00, 0x52, 0x45, 0x50, 0x4C
	.byte 0x41, 0x59, 0x5F, 0x46, 0x4C, 0x49, 0x43, 0x4B, 0x45, 0x52, 0x5F, 0x54, 0x49, 0x4D, 0x45, 0x5F
	.byte 0x4F, 0x46, 0x46, 0x00, 0x67, 0x6D, 0x64, 0x6E, 0x5F, 0x72, 0x30, 0x30, 0x2E, 0x70, 0x61, 0x63
	.byte 0x5F, 0x00, 0x00, 0x00, 0x6D, 0x62, 0x76, 0x5F, 0x63, 0x30, 0x25, 0x64, 0x2E, 0x70, 0x61, 0x63
	.byte 0x5F, 0x00, 0x00, 0x00, 0x67, 0x6D, 0x64, 0x6E, 0x5F, 0x75, 0x30, 0x30, 0x2E, 0x70, 0x61, 0x63
	.byte 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xE8, 0x1A, 0x04, 0x02, 0xEC, 0x1A, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x28, 0x21, 0x04, 0x02, 0x10, 0x9D, 0x02, 0x02, 0x64, 0x1B, 0x04, 0x02, 0xEC, 0x1B, 0x04, 0x02
	.byte 0x58, 0x1C, 0x04, 0x02, 0x0C, 0x9D, 0x02, 0x02, 0xC8, 0x1C, 0x04, 0x02, 0x24, 0x21, 0x04, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xBC, 0x20, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x1D, 0x04, 0x02
	.byte 0xF8, 0x1D, 0x04, 0x02, 0x1C, 0x1E, 0x04, 0x02, 0x40, 0x1E, 0x04, 0x02, 0x64, 0x1E, 0x04, 0x02
	.byte 0x88, 0x1E, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x21, 0x04, 0x02
	.byte 0x04, 0x22, 0x04, 0x02, 0x4C, 0x2E, 0x04, 0x02, 0xB0, 0x30, 0x04, 0x02, 0x4C, 0x2B, 0x04, 0x02
	.byte 0x98, 0x22, 0x04, 0x02, 0xF4, 0x2C, 0x04, 0x02, 0x20, 0x24, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x3A, 0x04, 0x02
	.byte 0x80, 0x3A, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xE8, 0x3A, 0x04, 0x02, 0x08, 0x3B, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x9D, 0x02, 0x02
	.byte 0xAC, 0x53, 0x04, 0x02, 0x80, 0x3C, 0x04, 0x02, 0x28, 0x21, 0x04, 0x02, 0x10, 0x9D, 0x02, 0x02
	.byte 0xD8, 0x42, 0x04, 0x02, 0x20, 0x43, 0x04, 0x02, 0x80, 0x3D, 0x04, 0x02, 0x0C, 0x9D, 0x02, 0x02
	.byte 0xCC, 0x42, 0x04, 0x02, 0x24, 0x21, 0x04, 0x02, 0xD4, 0x42, 0x04, 0x02, 0xBC, 0x20, 0x04, 0x02
	.byte 0xA0, 0x43, 0x04, 0x02, 0xD4, 0x1D, 0x04, 0x02, 0xF8, 0x1D, 0x04, 0x02, 0x1C, 0x1E, 0x04, 0x02
	.byte 0x40, 0x1E, 0x04, 0x02, 0x64, 0x1E, 0x04, 0x02, 0x88, 0x1E, 0x04, 0x02, 0x70, 0x69, 0x63, 0x33
	.byte 0x64, 0x2F, 0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x73, 0x70, 0x72, 0x2F
	.byte 0x65, 0x66, 0x63, 0x74, 0x2F, 0x65, 0x66, 0x63, 0x74, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F, 0x74, 0x72, 0x65, 0x61
	.byte 0x73, 0x75, 0x72, 0x65, 0x62, 0x6F, 0x78, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x52, 0x50, 0x47, 0x5F, 0x43, 0x41, 0x4D, 0x45, 0x52, 0x41, 0x5F, 0x44
	.byte 0x49, 0x53, 0x54, 0x41, 0x4E, 0x43, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x49, 0x5A, 0x5F, 0x54, 0x59, 0x50, 0x45, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F, 0x72, 0x70, 0x67, 0x65, 0x6E, 0x63, 0x6F, 0x75
	.byte 0x6E, 0x74, 0x66, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F, 0x72, 0x70, 0x67, 0x65, 0x6E, 0x63, 0x6F, 0x75
	.byte 0x6E, 0x74, 0x62, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x49, 0x5A, 0x5F, 0x54, 0x59, 0x50, 0x45, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F
	.byte 0x72, 0x70, 0x67, 0x65, 0x6E, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x66, 0x2E, 0x64, 0x61, 0x74, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F
	.byte 0x72, 0x70, 0x67, 0x65, 0x6E, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x62, 0x2E, 0x64, 0x61, 0x74, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xEC, 0x01, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x4E, 0x41, 0x5A
	.byte 0x55, 0x4D, 0x41, 0x32, 0x5F, 0x56, 0x45, 0x52, 0x5F, 0x5F, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xF4, 0x63, 0x04, 0x02, 0x14, 0x64, 0x04, 0x02, 0x30, 0x31, 0x32, 0x33
	.byte 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x63, 0x74, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x65, 0x76, 0x65, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x6D, 0x63, 0x68, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x68, 0x65, 0x6C, 0x70, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00, 0x00, 0x00
	.byte 0x6D, 0x63, 0x68, 0x74, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x65, 0x74
	.byte 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x09, 0x02, 0x44, 0x02, 0x09, 0x02
	.byte 0x4C, 0x02, 0x09, 0x02, 0x3C, 0x02, 0x09, 0x02, 0x54, 0x02, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x6C, 0x02, 0x09, 0x02, 0x60, 0x02, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F
	.byte 0x25, 0x73, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72
	.byte 0x69, 0x70, 0x74, 0x2F, 0x25, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x63, 0x74, 0x2E, 0x70, 0x6B, 0x62, 0x00
	.byte 0x65, 0x76, 0x65, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x6D, 0x63, 0x68, 0x2E, 0x70, 0x6B, 0x62, 0x00
	.byte 0x68, 0x65, 0x6C, 0x70, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x65, 0x74
	.byte 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x63, 0x68, 0x74, 0x2E, 0x70, 0x6B, 0x62
	.byte 0x00, 0x00, 0x00, 0x00, 0xC8, 0x02, 0x09, 0x02, 0xF0, 0x02, 0x09, 0x02, 0xF8, 0x02, 0x09, 0x02
	.byte 0xE8, 0x02, 0x09, 0x02, 0x00, 0x03, 0x09, 0x02, 0xCC, 0x02, 0x09, 0x02, 0x0C, 0x03, 0x09, 0x02
	.byte 0x18, 0x03, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F, 0x00, 0x00, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F
	.byte 0x25, 0x73, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72
	.byte 0x69, 0x70, 0x74, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x73, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F
	.byte 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x73, 0x63, 0x72
	.byte 0x69, 0x70, 0x74, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x73, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00
	.byte 0x53, 0x53, 0x44, 0x00, 0x53, 0x53, 0x44, 0x00, 0x65, 0x76, 0x65, 0x25, 0x30, 0x38, 0x64, 0x2E
	.byte 0x73, 0x73, 0x64, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x63, 0x68, 0x25, 0x30, 0x38, 0x64, 0x2E
	.byte 0x73, 0x73, 0x64, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x61, 0x63, 0x74, 0x25, 0x30, 0x36, 0x64, 0x2E
	.byte 0x73, 0x73, 0x64, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x68, 0x65, 0x6C, 0x70, 0x25, 0x30, 0x36, 0x64
	.byte 0x2E, 0x73, 0x73, 0x64, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x94, 0x04, 0x02, 0xB0, 0x94, 0x04, 0x02
	.byte 0xE8, 0x95, 0x04, 0x02, 0xCC, 0x94, 0x04, 0x02, 0x04, 0x98, 0x04, 0x02, 0x18, 0x98, 0x04, 0x02
	.byte 0x2C, 0x98, 0x04, 0x02, 0x94, 0x95, 0x04, 0x02, 0x9C, 0x98, 0x04, 0x02, 0x6C, 0x99, 0x04, 0x02
	.byte 0xB8, 0x98, 0x04, 0x02, 0x04, 0x9A, 0x04, 0x02, 0xD8, 0x94, 0x04, 0x02, 0x40, 0x95, 0x04, 0x02
	.byte 0x30, 0x9A, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xCC, 0x95, 0x04, 0x02, 0xD0, 0x95, 0x04, 0x02, 0xE8, 0x95, 0x04, 0x02
	.byte 0xEC, 0x97, 0x04, 0x02, 0x04, 0x98, 0x04, 0x02, 0x18, 0x98, 0x04, 0x02, 0x2C, 0x98, 0x04, 0x02
	.byte 0x38, 0x9A, 0x04, 0x02, 0x9C, 0x98, 0x04, 0x02, 0x6C, 0x99, 0x04, 0x02, 0xB8, 0x98, 0x04, 0x02
	.byte 0x04, 0x9A, 0x04, 0x02, 0x40, 0x98, 0x04, 0x02, 0x28, 0x9A, 0x04, 0x02, 0x30, 0x9A, 0x04, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x63, 0x6D, 0x64, 0x5F, 0x63, 0x6F, 0x6E, 0x64, 0x2E
	.byte 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x75, 0x6E, 0x69, 0x74, 0x62
	.byte 0x61, 0x73, 0x65, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x75, 0x6E, 0x69, 0x74, 0x62, 0x61, 0x73, 0x65, 0x5F
	.byte 0x6E, 0x70, 0x63, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x75, 0x73
	.byte 0x65, 0x61, 0x72, 0x63, 0x68, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x10, 0x05, 0x02
	.byte 0xE4, 0x10, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xAC, 0x23, 0x05, 0x02, 0xFC, 0x23, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x28, 0x05, 0x02, 0xA0, 0x28, 0x05, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x27, 0x05, 0x02, 0x34, 0x31, 0x05, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x27, 0x05, 0x02, 0x64, 0x31, 0x05, 0x02
	.byte 0x65, 0x79, 0x65, 0x00, 0x6C, 0x6F, 0x6F, 0x6B, 0x61, 0x74, 0x00, 0x00, 0x72, 0x6F, 0x6C, 0x6C
	.byte 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64
	.byte 0x65, 0x6C, 0x2F, 0x70, 0x61, 0x63, 0x2F, 0x63, 0x6D, 0x72, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x70
	.byte 0x61, 0x63, 0x2F, 0x63, 0x6D, 0x72, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x70, 0x61, 0x63, 0x2F, 0x63
	.byte 0x6D, 0x72, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x48, 0x05, 0x02, 0xB0, 0x48, 0x05, 0x02
	.byte 0x48, 0x4F, 0x05, 0x02, 0x4C, 0x4F, 0x05, 0x02, 0x44, 0xC8, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x67, 0x05, 0x02
	.byte 0xE8, 0x67, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x63, 0x05, 0x02
	.byte 0x7C, 0x63, 0x05, 0x02, 0x52, 0x50, 0x47, 0x5F, 0x43, 0x48, 0x41, 0x52, 0x5F, 0x48, 0x45, 0x49
	.byte 0x47, 0x48, 0x54, 0x00, 0x70, 0x63, 0x68, 0x25, 0x30, 0x38, 0x64, 0x2E, 0x70, 0x61, 0x63, 0x5F
	.byte 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x68, 0x25, 0x30, 0x34, 0x64, 0x2E, 0x50, 0x4C, 0x54, 0x00
	.byte 0x70, 0x63, 0x62, 0x25, 0x30, 0x38, 0x64, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00
	.byte 0x70, 0x70, 0x62, 0x25, 0x30, 0x34, 0x64, 0x2E, 0x50, 0x4C, 0x54, 0x00, 0x73, 0x70, 0x72, 0x2F
	.byte 0x63, 0x68, 0x61, 0x72, 0x2F, 0x70, 0x63, 0x62, 0x00, 0x00, 0x00, 0x00, 0x73, 0x70, 0x72, 0x2F
	.byte 0x63, 0x68, 0x61, 0x72, 0x2F, 0x70, 0x63, 0x68, 0x00, 0x00, 0x00, 0x00, 0x73, 0x70, 0x72, 0x2F
	.byte 0x63, 0x68, 0x61, 0x72, 0x2F, 0x70, 0x70, 0x62, 0x00, 0x00, 0x00, 0x00, 0x73, 0x70, 0x72, 0x2F
	.byte 0x63, 0x68, 0x61, 0x72, 0x2F, 0x70, 0x70, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x1F, 0x7C, 0xFF, 0x7F, 0x00, 0x00, 0x1F, 0x00, 0xE0, 0x03, 0x00, 0x7C
	.byte 0xE0, 0x7F, 0x1F, 0x7C, 0xFF, 0x03, 0xB5, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x85, 0x05, 0x02
	.byte 0x1C, 0x86, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x41, 0x52, 0x43
	.byte 0x4C, 0x49, 0x50, 0x5F, 0x4C, 0x45, 0x4E, 0x47, 0x54, 0x48, 0x00, 0x00, 0x46, 0x41, 0x52, 0x43
	.byte 0x4C, 0x49, 0x50, 0x5F, 0x4C, 0x45, 0x4E, 0x47, 0x54, 0x48, 0x00, 0x00, 0x46, 0x41, 0x52, 0x43
	.byte 0x4C, 0x49, 0x50, 0x5F, 0x4C, 0x45, 0x4E, 0x47, 0x54, 0x48, 0x00, 0x00, 0x52, 0x50, 0x47, 0x5F
	.byte 0x46, 0x41, 0x52, 0x43, 0x4C, 0x49, 0x50, 0x5F, 0x4C, 0x45, 0x4E, 0x47, 0x54, 0x48, 0x00, 0x00
	.byte 0x52, 0x50, 0x47, 0x5F, 0x46, 0x41, 0x52, 0x43, 0x4C, 0x49, 0x50, 0x5F, 0x4C, 0x45, 0x4E, 0x47
	.byte 0x54, 0x48, 0x00, 0x00, 0x52, 0x50, 0x47, 0x5F, 0x46, 0x41, 0x52, 0x43, 0x4C, 0x49, 0x50, 0x5F
	.byte 0x4C, 0x45, 0x4E, 0x47, 0x54, 0x48, 0x00, 0x00, 0x52, 0x50, 0x47, 0x5F, 0x46, 0x4F, 0x56, 0x59
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x73, 0x73, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x70, 0x62, 0x68, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x70, 0x62, 0x73, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x70, 0x73, 0x66, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x70, 0x62, 0x66, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x70, 0x73, 0x68, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x70, 0x74, 0x62, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x70, 0x73, 0x62, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x70, 0x62, 0x62, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x70, 0x63, 0x6D, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0xD4, 0x08, 0x09, 0x02
	.byte 0xB4, 0x08, 0x09, 0x02, 0xC4, 0x08, 0x09, 0x02, 0xCC, 0x08, 0x09, 0x02, 0xE4, 0x08, 0x09, 0x02
	.byte 0xEC, 0x08, 0x09, 0x02, 0xAC, 0x08, 0x09, 0x02, 0xBC, 0x08, 0x09, 0x02, 0xDC, 0x08, 0x09, 0x02
	.byte 0xF4, 0x08, 0x09, 0x02, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64
	.byte 0x65, 0x6C, 0x2F, 0x63, 0x68, 0x61, 0x72, 0x2F, 0x25, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xB4, 0x05, 0x02
	.byte 0x04, 0xB5, 0x05, 0x02, 0x9C, 0xC9, 0x05, 0x02, 0xAC, 0x23, 0x05, 0x02, 0xFC, 0x23, 0x05, 0x02
	.byte 0x7C, 0xC9, 0x05, 0x02, 0x54, 0xC9, 0x05, 0x02, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x33, 0x64, 0x2F, 0x65, 0x66, 0x66, 0x2E, 0x70, 0x6B
	.byte 0x68, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x65, 0x66, 0x66
	.byte 0x65, 0x63, 0x74, 0x33, 0x64, 0x2F, 0x65, 0x66, 0x66, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x61, 0x63, 0x2F, 0x6D, 0x72, 0x5F, 0x70
	.byte 0x61, 0x63, 0x00, 0x00, 0x5F, 0x70, 0x61, 0x63, 0x2F, 0x6D, 0x76, 0x5F, 0x70, 0x61, 0x63, 0x00
	.byte 0x6F, 0x62, 0x6A, 0x2F, 0x6D, 0x72, 0x5F, 0x6E, 0x73, 0x62, 0x74, 0x78, 0x00, 0x00, 0x00, 0x00
	.byte 0x6F, 0x62, 0x6A, 0x2F, 0x6D, 0x72, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x00, 0x00, 0x00, 0x00
	.byte 0x5F, 0x6F, 0x62, 0x6A, 0x2F, 0x6D, 0x76, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x00, 0x00, 0x00
	.byte 0xF0, 0x09, 0x09, 0x02, 0x00, 0x0A, 0x09, 0x02, 0xC8, 0x09, 0x09, 0x02, 0xD4, 0x09, 0x09, 0x02
	.byte 0xE0, 0x09, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x78, 0xCA, 0x05, 0x02, 0xC8, 0xCA, 0x05, 0x02, 0x18, 0xCB, 0x05, 0x02, 0xAC, 0x23, 0x05, 0x02
	.byte 0x80, 0xE2, 0x05, 0x02, 0x38, 0xD1, 0x05, 0x02, 0x58, 0xD1, 0x05, 0x02, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x6D
	.byte 0x76, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x6D
	.byte 0x76, 0x5F, 0x6E, 0x73, 0x62, 0x74, 0x78, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x70, 0x61, 0x63, 0x2F, 0x6D
	.byte 0x76, 0x5F, 0x70, 0x61, 0x63, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x6D
	.byte 0x76, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x6D
	.byte 0x76, 0x5F, 0x6E, 0x73, 0x62, 0x74, 0x78, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x70, 0x61, 0x63, 0x2F, 0x6D
	.byte 0x76, 0x5F, 0x70, 0x61, 0x63, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x00, 0x6D, 0x76, 0x00, 0x00
	.byte 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x25, 0x73, 0x00, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x6E
	.byte 0x73, 0x62, 0x6D, 0x64, 0x5F, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x6E, 0x73, 0x62, 0x74, 0x78
	.byte 0x5F, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x70, 0x61, 0x63, 0x2F, 0x6D, 0x6F, 0x5F, 0x70, 0x61, 0x63, 0x00, 0x00
	.byte 0x6F, 0x62, 0x6A, 0x2F, 0x6D, 0x6F, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x00, 0x00, 0x00, 0x00
	.byte 0x5F, 0x70, 0x61, 0x63, 0x2F, 0x62, 0x61, 0x6C, 0x5F, 0x70, 0x61, 0x63, 0x2E, 0x70, 0x6B, 0x68
	.byte 0x00, 0x00, 0x00, 0x00, 0x5F, 0x70, 0x61, 0x63, 0x2F, 0x67, 0x6F, 0x6C, 0x5F, 0x70, 0x61, 0x63
	.byte 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x6F, 0x62, 0x6A, 0x2F, 0x6D, 0x66, 0x5F
	.byte 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00, 0x00, 0x5F, 0x6F, 0x62, 0x6A
	.byte 0x2F, 0x67, 0x6F, 0x6C, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00
	.byte 0x5F, 0x6F, 0x62, 0x6A, 0x2F, 0x62, 0x61, 0x6C, 0x6C, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x70, 0x0B, 0x09, 0x02, 0x54, 0x0B, 0x09, 0x02, 0x84, 0x0B, 0x09, 0x02
	.byte 0xC0, 0x0B, 0x09, 0x02, 0x60, 0x0B, 0x09, 0x02, 0xAC, 0x0B, 0x09, 0x02, 0x98, 0x0B, 0x09, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0xE2, 0x05, 0x02, 0x4C, 0xE3, 0x05, 0x02
	.byte 0xC0, 0xE3, 0x05, 0x02, 0xAC, 0x23, 0x05, 0x02, 0xFC, 0x23, 0x05, 0x02, 0x60, 0xFF, 0x05, 0x02
	.byte 0x38, 0xFF, 0x05, 0x02, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64
	.byte 0x65, 0x6C, 0x2F, 0x70, 0x61, 0x63, 0x2F, 0x62, 0x61, 0x6C, 0x5F, 0x70, 0x61, 0x63, 0x2E, 0x70
	.byte 0x6B, 0x68, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64
	.byte 0x65, 0x6C, 0x2F, 0x70, 0x61, 0x63, 0x2F, 0x67, 0x6F, 0x6C, 0x5F, 0x70, 0x61, 0x63, 0x2E, 0x70
	.byte 0x6B, 0x68, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64
	.byte 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x62, 0x61, 0x6C, 0x6C, 0x5F, 0x6E, 0x73, 0x62, 0x6D
	.byte 0x64, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x67, 0x6F, 0x6C, 0x5F, 0x6E
	.byte 0x73, 0x62, 0x6D, 0x64, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x6D
	.byte 0x66, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x70, 0x61, 0x63, 0x2F, 0x62
	.byte 0x61, 0x6C, 0x5F, 0x70, 0x61, 0x63, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x70, 0x61, 0x63, 0x2F, 0x67
	.byte 0x6F, 0x6C, 0x5F, 0x70, 0x61, 0x63, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x62
	.byte 0x61, 0x6C, 0x6C, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x6F
	.byte 0x62, 0x6A, 0x2F, 0x67, 0x6F, 0x6C, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E, 0x70, 0x6B, 0x62
	.byte 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6D, 0x6F, 0x64
	.byte 0x65, 0x6C, 0x2F, 0x6F, 0x62, 0x6A, 0x2F, 0x6D, 0x66, 0x5F, 0x6E, 0x73, 0x62, 0x6D, 0x64, 0x2E
	.byte 0x70, 0x6B, 0x62, 0x00, 0x2E, 0x70, 0x61, 0x63, 0x5F, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6C, 0x6C
	.byte 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6C, 0x00, 0x6D, 0x6F, 0x00, 0x00, 0x67, 0x6F, 0x6C, 0x00
	.byte 0x6D, 0x66, 0x00, 0x00, 0x25, 0x73, 0x25, 0x30, 0x34, 0x64, 0x00, 0x00, 0x25, 0x73, 0x25, 0x30
	.byte 0x36, 0x64, 0x25, 0x30, 0x32, 0x64, 0x00, 0x00, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x2F, 0x25, 0x73
	.byte 0x00, 0x00, 0x00, 0x00, 0x6D, 0x6F, 0x25, 0x30, 0x34, 0x64, 0x2E, 0x6E, 0x73, 0x62, 0x6D, 0x64
	.byte 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0D, 0x09, 0x02
	.byte 0xDC, 0x0D, 0x09, 0x02, 0xE4, 0x0D, 0x09, 0x02, 0xFC, 0x0D, 0x09, 0x02, 0x73, 0x74, 0x5F, 0x64
	.byte 0x61, 0x74, 0x61, 0x00, 0x53, 0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x49, 0x6E, 0x66, 0x6F, 0x00
	.byte 0x53, 0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x00, 0x81, 0xA6, 0x81, 0x40
	.byte 0x81, 0x44, 0x81, 0x48, 0x81, 0x49, 0x81, 0x5B, 0x81, 0x63, 0x82, 0x9F, 0x82, 0xA0, 0x82, 0xA1
	.byte 0x82, 0xA2, 0x82, 0xA3, 0x82, 0xA4, 0x82, 0xA5, 0x82, 0xA6, 0x82, 0xA7, 0x82, 0xA8, 0x82, 0xA9
	.byte 0x82, 0xAA, 0x82, 0xAB, 0x82, 0xAC, 0x82, 0xAD, 0x82, 0xAE, 0x82, 0xAF, 0x82, 0xB0, 0x82, 0xB1
	.byte 0x82, 0xB2, 0x82, 0xB3, 0x82, 0xB4, 0x82, 0xB5, 0x82, 0xB6, 0x82, 0xB7, 0x82, 0xB8, 0x82, 0xB9
	.byte 0x82, 0xBA, 0x82, 0xBB, 0x82, 0xBC, 0x82, 0xBD, 0x82, 0xBE, 0x82, 0xBF, 0x82, 0xC0, 0x82, 0xC1
	.byte 0x82, 0xC2, 0x82, 0xC3, 0x82, 0xC4, 0x82, 0xC5, 0x82, 0xC6, 0x82, 0xC7, 0x82, 0xC8, 0x82, 0xC9
	.byte 0x82, 0xCA, 0x82, 0xCB, 0x82, 0xCC, 0x82, 0xCD, 0x82, 0xCE, 0x82, 0xCF, 0x82, 0xD0, 0x82, 0xD1
	.byte 0x82, 0xD2, 0x82, 0xD3, 0x82, 0xD4, 0x82, 0xD5, 0x82, 0xD6, 0x82, 0xD7, 0x82, 0xD8, 0x82, 0xD9
	.byte 0x82, 0xDA, 0x82, 0xDB, 0x82, 0xDC, 0x82, 0xDD, 0x82, 0xDE, 0x82, 0xDF, 0x82, 0xE0, 0x82, 0xE1
	.byte 0x82, 0xE2, 0x82, 0xE3, 0x82, 0xE4, 0x82, 0xE5, 0x82, 0xE6, 0x82, 0xE7, 0x82, 0xE8, 0x82, 0xE9
	.byte 0x82, 0xEA, 0x82, 0xEB, 0x82, 0xEC, 0x82, 0xED, 0x82, 0xF0, 0x82, 0xF1, 0x83, 0x40, 0x83, 0x41
	.byte 0x83, 0x42, 0x83, 0x43, 0x83, 0x44, 0x83, 0x45, 0x83, 0x46, 0x83, 0x47, 0x83, 0x48, 0x83, 0x49
	.byte 0x83, 0x4A, 0x83, 0x4B, 0x83, 0x4C, 0x83, 0x4D, 0x83, 0x4E, 0x83, 0x4F, 0x83, 0x50, 0x83, 0x51
	.byte 0x83, 0x52, 0x83, 0x53, 0x83, 0x54, 0x83, 0x55, 0x83, 0x56, 0x83, 0x57, 0x83, 0x58, 0x83, 0x59
	.byte 0x83, 0x5A, 0x83, 0x5B, 0x83, 0x5C, 0x83, 0x5D, 0x83, 0x5E, 0x83, 0x5F, 0x83, 0x60, 0x83, 0x61
	.byte 0x83, 0x62, 0x83, 0x63, 0x83, 0x64, 0x83, 0x65, 0x83, 0x66, 0x83, 0x67, 0x83, 0x68, 0x83, 0x69
	.byte 0x83, 0x6A, 0x83, 0x6B, 0x83, 0x6C, 0x83, 0x6D, 0x83, 0x6E, 0x83, 0x6F, 0x83, 0x70, 0x83, 0x71
	.byte 0x83, 0x72, 0x83, 0x73, 0x83, 0x74, 0x83, 0x75, 0x83, 0x76, 0x83, 0x77, 0x83, 0x78, 0x83, 0x79
	.byte 0x83, 0x7A, 0x83, 0x7B, 0x83, 0x7C, 0x83, 0x7D, 0x83, 0x7E, 0x83, 0x80, 0x83, 0x81, 0x83, 0x82
	.byte 0x83, 0x83, 0x83, 0x84, 0x83, 0x85, 0x83, 0x86, 0x83, 0x87, 0x83, 0x88, 0x83, 0x89, 0x83, 0x8A
	.byte 0x83, 0x8B, 0x83, 0x8C, 0x83, 0x8D, 0x83, 0x8E, 0x83, 0x8F, 0x83, 0x92, 0x83, 0x93, 0x83, 0x94
	.byte 0x00, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x25, 0x73, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x25
	.byte 0x73, 0x5B, 0x25, 0x64, 0x5D, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x25, 0x73, 0x00, 0x00, 0x00
	.byte 0x25, 0x73, 0x2E, 0x25, 0x73, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x25, 0x73, 0x5B, 0x30, 0x5D
	.byte 0x00, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x25, 0x73, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x25
	.byte 0x73, 0x5B, 0x25, 0x64, 0x5D, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x62, 0x66, 0x6D, 0x74, 0x2F, 0x63, 0x6E, 0x76, 0x64, 0x61, 0x74, 0x2E, 0x62, 0x69, 0x6E
	.byte 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x62, 0x66, 0x6D
	.byte 0x74, 0x2F, 0x76, 0x65, 0x72, 0x25, 0x30, 0x34, 0x64, 0x2E, 0x62, 0x69, 0x6E, 0x00, 0x00, 0x00
	.byte 0x49, 0x4E, 0x41, 0x5A, 0x55, 0x4D, 0x41, 0x5F, 0x45, 0x4C, 0x45, 0x56, 0x45, 0x4E, 0x33, 0x00
	.byte 0x49, 0x4E, 0x41, 0x5A, 0x55, 0x4D, 0x41, 0x5F, 0x45, 0x4C, 0x45, 0x56, 0x45, 0x4E, 0x33, 0x00
	.byte 0x49, 0x4E, 0x41, 0x5A, 0x55, 0x4D, 0x41, 0x5F, 0x45, 0x4C, 0x45, 0x56, 0x45, 0x4E, 0x33, 0x00
	.byte 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x6D, 0x61, 0x70, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
	.byte 0xE4, 0x9F, 0x06, 0x02, 0xE8, 0x7F, 0x06, 0x02, 0xA4, 0x9C, 0x06, 0x02, 0x0C, 0x9F, 0x06, 0x02
	.byte 0xD0, 0x97, 0x06, 0x02, 0x74, 0x4A, 0x06, 0x02, 0x84, 0x46, 0x06, 0x02, 0xA8, 0x45, 0x06, 0x02
	.byte 0x4D, 0x00, 0x41, 0x4D, 0x04, 0x97, 0x06, 0x02, 0x4D, 0x00, 0x50, 0x54, 0x04, 0x9D, 0x06, 0x02
	.byte 0x4D, 0x00, 0x41, 0x54, 0xD8, 0x9B, 0x06, 0x02, 0x56, 0x00, 0x41, 0x56, 0x9C, 0x9F, 0x06, 0x02
	.byte 0x4A, 0x00, 0x41, 0x43, 0x6C, 0x7F, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x38, 0xA0, 0x06, 0x02, 0xE8, 0xA0, 0x06, 0x02, 0xA0, 0xA8, 0x06, 0x02, 0xAC, 0xA0, 0x06, 0x02
	.byte 0xA4, 0xA1, 0x06, 0x02, 0xC4, 0xA9, 0x06, 0x02, 0x68, 0xA7, 0x06, 0x02, 0xD8, 0xAB, 0x06, 0x02
	.byte 0x4C, 0xB2, 0x06, 0x02, 0x50, 0xB8, 0x06, 0x02, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x50, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x55, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x10, 0x17, 0x1B, 0x01, 0x00, 0x00, 0x00
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x12, 0x10, 0x17, 0x1B, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x06, 0x02, 0x48, 0x4E, 0x06, 0x02
	.byte 0x70, 0x4E, 0x06, 0x02, 0xE8, 0x4F, 0x06, 0x02, 0x28, 0x55, 0x06, 0x02, 0xAC, 0x56, 0x06, 0x02
	.byte 0x4C, 0x57, 0x06, 0x02, 0xA8, 0x5B, 0x06, 0x02, 0x94, 0x5E, 0x06, 0x02, 0xE0, 0x61, 0x06, 0x02
	.byte 0x28, 0x69, 0x06, 0x02, 0x04, 0x6A, 0x06, 0x02, 0x6C, 0x6A, 0x06, 0x02, 0xBC, 0x6D, 0x06, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xA2, 0x06, 0x02, 0xF4, 0xA3, 0x06, 0x02
	.byte 0xB8, 0xA4, 0x06, 0x02, 0x2C, 0xA5, 0x06, 0x02, 0x78, 0xA5, 0x06, 0x02, 0x58, 0xA6, 0x06, 0x02
	.byte 0x04, 0xA7, 0x06, 0x02, 0x44, 0xA7, 0x06, 0x02, 0x88, 0xAD, 0x06, 0x02, 0x8C, 0xAE, 0x06, 0x02
	.byte 0x64, 0xAF, 0x06, 0x02, 0xD8, 0xAF, 0x06, 0x02, 0x24, 0xB0, 0x06, 0x02, 0x18, 0xB1, 0x06, 0x02
	.byte 0xE0, 0xB1, 0x06, 0x02, 0x28, 0xB2, 0x06, 0x02, 0x84, 0xB3, 0x06, 0x02, 0xE4, 0xB4, 0x06, 0x02
	.byte 0xBC, 0xB5, 0x06, 0x02, 0x34, 0xB6, 0x06, 0x02, 0x84, 0xB6, 0x06, 0x02, 0x50, 0xB7, 0x06, 0x02
	.byte 0xF0, 0xB7, 0x06, 0x02, 0x2C, 0xB8, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xF4, 0xB9, 0x06, 0x02, 0x08, 0xBA, 0x06, 0x02, 0x4C, 0x2E, 0x04, 0x02, 0xB0, 0x30, 0x04, 0x02
	.byte 0x24, 0xBA, 0x06, 0x02, 0xAC, 0xBD, 0x06, 0x02, 0x20, 0xBC, 0x06, 0x02, 0x74, 0xBF, 0x06, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x10, 0xC1, 0x06, 0x02, 0x30, 0xC1, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xF1, 0x06, 0x02, 0x70, 0xF1, 0x06, 0x02
	.byte 0x47, 0x41, 0x4D, 0x45, 0x5F, 0x54, 0x49, 0x4D, 0x45, 0x5F, 0x53, 0x54, 0x45, 0x50, 0x53, 0x00
	.byte 0x43, 0x50, 0x55, 0x5F, 0x55, 0x53, 0x45, 0x5F, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4C, 0x5F
	.byte 0x50, 0x45, 0x52, 0x43, 0x45, 0x4E, 0x54, 0x00, 0x57, 0x41, 0x49, 0x54, 0x5F, 0x4E, 0x4F, 0x54
	.byte 0x49, 0x43, 0x45, 0x5F, 0x46, 0x52, 0x41, 0x4D, 0x45, 0x00, 0x00, 0x00, 0x4F, 0x46, 0x46, 0x53
	.byte 0x49, 0x44, 0x45, 0x5F, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x00, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x6C
	.byte 0x69, 0x76, 0x65, 0x74, 0x61, 0x6C, 0x6B, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x66, 0x69, 0x65, 0x6C, 0x64
	.byte 0x69, 0x6E, 0x66, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x69, 0x6E, 0x66, 0x2E
	.byte 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x67, 0x61, 0x6D, 0x65, 0x72, 0x75, 0x6C, 0x65, 0x2E, 0x64, 0x61, 0x74, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x67
	.byte 0x61, 0x6D, 0x65, 0x72, 0x75, 0x6C, 0x65, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x66, 0x6D, 0x74, 0x2E, 0x70
	.byte 0x6B, 0x68, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x66, 0x6D, 0x74, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x74, 0x65, 0x61, 0x6D, 0x2E
	.byte 0x70, 0x6B, 0x68, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x74, 0x65, 0x61, 0x6D, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x67, 0x61, 0x6D, 0x65, 0x73
	.byte 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x74, 0x65, 0x61, 0x6D, 0x2E, 0x70, 0x6B, 0x68, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x74
	.byte 0x65, 0x61, 0x6D, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x82, 0xB7, 0x82, 0xAF, 0x82, 0xC1, 0x82, 0xC6
	.byte 0x00, 0x00, 0x00, 0x00, 0x81, 0x40, 0x00, 0x00, 0x81, 0x40, 0x82, 0xC6, 0x92, 0x87, 0x8A, 0xD4
	.byte 0x00, 0x00, 0x00, 0x00, 0x82, 0xE6, 0x82, 0xB9, 0x82, 0xA0, 0x82, 0xC2, 0x82, 0xDF, 0x00, 0x00
	.byte 0x83, 0x74, 0x83, 0x40, 0x83, 0x43, 0x83, 0x5E, 0x81, 0x5B, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x61, 0x63, 0x74, 0x69, 0x6F
	.byte 0x6E, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x69, 0x74
	.byte 0x65, 0x6D, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x75, 0x6E, 0x69, 0x74, 0x6E, 0x6F, 0x2E, 0x64, 0x61
	.byte 0x74, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x75, 0x6E, 0x69, 0x74, 0x6E, 0x6F, 0x5F, 0x6E, 0x70, 0x63, 0x2E, 0x64, 0x61
	.byte 0x74, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x6C
	.byte 0x76, 0x75, 0x70, 0x5F, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x2E, 0x64, 0x61, 0x74, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x6D
	.byte 0x61, 0x70, 0x69, 0x64, 0x78, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x63, 0x6D, 0x64, 0x5F, 0x63
	.byte 0x6F, 0x6E, 0x64, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x63, 0x6D, 0x64, 0x5F, 0x63, 0x6F, 0x6E, 0x64, 0x2E
	.byte 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x73, 0x63, 0x6D, 0x64, 0x2E, 0x64, 0x61
	.byte 0x74, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x75, 0x6E, 0x69, 0x74, 0x63, 0x61, 0x6C, 0x63, 0x2E, 0x64, 0x61, 0x74, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x63
	.byte 0x61, 0x6C, 0x63, 0x62, 0x61, 0x73, 0x65, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x73, 0x74, 0x61, 0x74, 0x75
	.byte 0x73, 0x5F, 0x75, 0x70, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x6C, 0x76, 0x75, 0x70, 0x5F
	.byte 0x65, 0x78, 0x70, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x6C, 0x76, 0x75, 0x70, 0x5F, 0x65, 0x78, 0x70, 0x2E
	.byte 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x74, 0x65, 0x61, 0x6D, 0x74, 0x70, 0x6D, 0x61, 0x78, 0x2E, 0x64, 0x61, 0x74
	.byte 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67
	.byte 0x69, 0x63, 0x2F, 0x67, 0x61, 0x6D, 0x65, 0x73, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00
	.byte 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x75
	.byte 0x6E, 0x69, 0x74, 0x62, 0x61, 0x73, 0x65, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74
	.byte 0x61, 0x5F, 0x69, 0x7A, 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x75, 0x6E, 0x69, 0x74, 0x73
	.byte 0x74, 0x61, 0x74, 0x2E, 0x64, 0x61, 0x74, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x6C, 0x6F, 0x67, 0x69, 0x63, 0x2F, 0x72, 0x70, 0x67, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x2E
	.byte 0x64, 0x61, 0x74, 0x00

	arm_func_start FUN_020916F4
FUN_020916F4: ; 0x020916F4
	strbtvc r6, [r1], #-0x42f
	bvc _03AE9484
	strbvs r6, [pc, -pc, lsr #24]!
	eorvc r6, pc, #0xa4000001
	ldmdbvs r4!, {r4, r5, r6, r8, sb, sl, sp, lr} ^
	mcrhs p12, #3, r6, c5, c4, #3
	rsbseq r6, r4, r4, ror #2
	strbtvc r6, [r1], #-0x42f
	bvc _03AE94A0
	strbvs r6, [pc, -pc, lsr #24]!
	eorvc r6, pc, #0xa4000001
	ldmdbvs r4!, {r4, r5, r6, r8, sb, sl, sp, lr} ^
	mcrhs p12, #3, r6, c5, c4, #3
	subseq r5, r2, r3, asr r4
	strbtvc r6, [r1], #-0x42f
	bvc _03AE94BC
	strbvs r6, [pc, -pc, lsr #24]!
	strvc r6, [pc, #-0x369]!
	svcvs #0x686373
	strtvs r6, [lr], #-0xc6f
	andeq r7, r0, r1, ror #8
	arm_func_end FUN_020916F4
_02091748:
	.byte 0x69, 0x6E, 0x61, 0x33, 0x20, 0x68, 0x61, 0x73
	.byte 0x68, 0x20, 0x6B, 0x65, 0x79, 0x20, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6C, 0x20, 0x63, 0x6F, 0x64
	.byte 0x65, 0x21, 0x00, 0x00, 0x69, 0x6E, 0x61, 0x33, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x6B, 0x65
	.byte 0x79, 0x20, 0x62, 0x75, 0x72, 0x69, 0x61, 0x6C, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x21, 0x00, 0x00
	.byte 0x60, 0x48, 0x40, 0x30, 0x24, 0x20, 0x18, 0x12, 0x10, 0x0C, 0x09, 0x08, 0x06, 0x04, 0x03, 0x02
	.byte 0x00, 0x00, 0x00, 0x00, 0xCC, 0x85, 0x07, 0x02, 0xD8, 0x85, 0x07, 0x02, 0xF0, 0x85, 0x07, 0x02
	.byte 0x00, 0x86, 0x07, 0x02, 0x1C, 0x86, 0x07, 0x02, 0x40, 0x86, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0x6C, 0x86, 0x07, 0x02, 0xF0, 0x86, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0x30, 0x87, 0x07, 0x02, 0x70, 0x87, 0x07, 0x02, 0xA8, 0x87, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0xD0, 0x87, 0x07, 0x02, 0xDC, 0x87, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0xF4, 0x87, 0x07, 0x02, 0x34, 0x88, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0x74, 0x88, 0x07, 0x02, 0xA0, 0x88, 0x07, 0x02, 0xD0, 0x88, 0x07, 0x02
	.byte 0x00, 0x89, 0x07, 0x02, 0x08, 0x89, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0x50, 0x89, 0x07, 0x02, 0xDC, 0x89, 0x07, 0x02, 0xF4, 0x89, 0x07, 0x02, 0x14, 0x8A, 0x07, 0x02
	.byte 0x34, 0x8A, 0x07, 0x02, 0x54, 0x8A, 0x07, 0x02, 0x84, 0x8A, 0x07, 0x02, 0xA4, 0x8A, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0xC4, 0x8A, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xD0, 0x8A, 0x07, 0x02
	.byte 0xEC, 0x8A, 0x07, 0x02, 0x24, 0x8B, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0x34, 0x8B, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0x40, 0x8B, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0x48, 0x8B, 0x07, 0x02, 0xC8, 0x8B, 0x07, 0x02, 0x50, 0x8C, 0x07, 0x02
	.byte 0xD8, 0x8C, 0x07, 0x02, 0x68, 0x8D, 0x07, 0x02, 0x54, 0x8E, 0x07, 0x02, 0x7C, 0x8E, 0x07, 0x02
	.byte 0x94, 0x8E, 0x07, 0x02, 0xC0, 0x8E, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xD8, 0x8E, 0x07, 0x02, 0xE4, 0x8E, 0x07, 0x02, 0x3C, 0x8F, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0x64, 0x8F, 0x07, 0x02, 0x8C, 0x8F, 0x07, 0x02, 0x20, 0x90, 0x07, 0x02, 0xD0, 0x90, 0x07, 0x02
	.byte 0x2C, 0x91, 0x07, 0x02, 0xB8, 0x91, 0x07, 0x02, 0x14, 0x92, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0x3C, 0x92, 0x07, 0x02, 0x64, 0x92, 0x07, 0x02, 0xE4, 0x92, 0x07, 0x02, 0x78, 0x93, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0xD4, 0x93, 0x07, 0x02, 0x30, 0x94, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0x58, 0x94, 0x07, 0x02, 0x80, 0x94, 0x07, 0x02, 0xD8, 0x94, 0x07, 0x02, 0x0C, 0x95, 0x07, 0x02
	.byte 0x1C, 0x96, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0x50, 0x96, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0x80, 0x96, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02, 0xC0, 0x85, 0x07, 0x02
	.byte 0xC0, 0x85, 0x07, 0x02, 0xF4, 0x99, 0x07, 0x02, 0x34, 0x9A, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x9A, 0x07, 0x02, 0x48, 0x9C, 0x07, 0x02
	.byte 0x5C, 0x9A, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x9A, 0x07, 0x02
	.byte 0x54, 0x9B, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x94, 0x9E, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x9E, 0x07, 0x02, 0xA0, 0x9E, 0x07, 0x02
	.byte 0xA4, 0x9E, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x14, 0x9A, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xE0, 0x9B, 0x07, 0x02, 0x08, 0x9C, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x34, 0x9D, 0x07, 0x02, 0x48, 0x9D, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x5C, 0x9D, 0x07, 0x02, 0xBC, 0x9D, 0x07, 0x02, 0x04, 0x9E, 0x07, 0x02, 0x64, 0x9E, 0x07, 0x02
	.byte 0xD0, 0x9D, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x0C, 0x9C, 0x07, 0x02, 0x48, 0x9D, 0x07, 0x02, 0x5C, 0x9D, 0x07, 0x02
	.byte 0x70, 0x9D, 0x07, 0x02, 0x34, 0x9D, 0x07, 0x02, 0x7C, 0x9E, 0x07, 0x02, 0xF4, 0x9D, 0x07, 0x02
	.byte 0x10, 0x9C, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x9C, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x9C, 0x07, 0x02
	.byte 0x38, 0x9C, 0x07, 0x02, 0x18, 0x9C, 0x07, 0x02, 0x18, 0x9C, 0x07, 0x02, 0xAC, 0x9D, 0x07, 0x02
	.byte 0x48, 0x9D, 0x07, 0x02, 0x98, 0x9D, 0x07, 0x02, 0x5C, 0x9D, 0x07, 0x02, 0x70, 0x9D, 0x07, 0x02
	.byte 0x84, 0x9D, 0x07, 0x02, 0x34, 0x9D, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x9B, 0x07, 0x02
	.byte 0x4C, 0x9C, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x50, 0x9C, 0x07, 0x02, 0x78, 0x9C, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00
	.byte 0x9C, 0x9C, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x9D, 0x07, 0x02
	.byte 0x28, 0x9D, 0x07, 0x02, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00
	.byte 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00, 0x0D, 0x00
	.byte 0x0E, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00
	.byte 0x16, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1A, 0x00, 0x1B, 0x00, 0x1C, 0x00, 0x1D, 0x00
	.byte 0x1E, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x23, 0x00, 0x28, 0x00, 0x2D, 0x00, 0x33, 0x00, 0x39, 0x00
	.byte 0x40, 0x00, 0x48, 0x00, 0x50, 0x00, 0x58, 0x00, 0x62, 0x00, 0x6D, 0x00, 0x78, 0x00, 0x83, 0x00
	.byte 0x90, 0x00, 0x9E, 0x00, 0xAC, 0x00, 0xBC, 0x00, 0xCC, 0x00, 0xDE, 0x00, 0xF0, 0x00, 0x04, 0x01
	.byte 0x19, 0x01, 0x2F, 0x01, 0x47, 0x01, 0x60, 0x01, 0x7A, 0x01, 0x96, 0x01, 0xB3, 0x01, 0xD2, 0x01
	.byte 0xF2, 0x01, 0x14, 0x02, 0x38, 0x02, 0x5E, 0x02, 0x85, 0x02, 0xAE, 0x02, 0xD9, 0x02, 0x07, 0x03
	.byte 0x36, 0x03, 0x67, 0x03, 0x9B, 0x03, 0xD1, 0x03, 0x06, 0x04, 0x42, 0x04, 0x7E, 0x04, 0xC4, 0x04
	.byte 0x00, 0x05, 0x46, 0x05, 0x8C, 0x05, 0x22, 0x06, 0x72, 0x06, 0xCC, 0x06, 0x1C, 0x07, 0x76, 0x07
	.byte 0xDA, 0x07, 0x34, 0x08, 0x98, 0x08, 0x06, 0x09, 0x6A, 0x09, 0xD8, 0x09, 0x50, 0x0A, 0xBE, 0x0A
	.byte 0x40, 0x0B, 0xB8, 0x0B, 0x3A, 0x0C, 0xBC, 0x0C, 0x48, 0x0D, 0xDE, 0x0D, 0x6A, 0x0E, 0x00, 0x0F
	.byte 0xA0, 0x0F, 0x40, 0x10, 0xEA, 0x10, 0x94, 0x11, 0x3E, 0x12, 0xF2, 0x12, 0xB0, 0x13, 0x6E, 0x14
	.byte 0x36, 0x15, 0xFE, 0x15, 0xD0, 0x16, 0xA2, 0x17, 0x7E, 0x18, 0x5A, 0x19, 0x40, 0x1A, 0x30, 0x1B
	.byte 0x20, 0x1C, 0x1A, 0x1D, 0x1E, 0x1E, 0x22, 0x1F, 0x30, 0x20, 0x48, 0x21, 0x60, 0x22, 0x82, 0x23
	.byte 0x10, 0x27, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00
	.byte 0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00
	.byte 0x24, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00
	.byte 0x57, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00
	.byte 0xA8, 0x00, 0x00, 0x00, 0x85, 0x01, 0x00, 0x00, 0xBE, 0x01, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00
	.byte 0x3F, 0x02, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, 0xD6, 0x02, 0x00, 0x00, 0x2A, 0x03, 0x00, 0x00
	.byte 0x85, 0x03, 0x00, 0x00, 0xE5, 0x03, 0x00, 0x00, 0x4C, 0x04, 0x00, 0x00, 0xBA, 0x04, 0x00, 0x00
	.byte 0x2E, 0x05, 0x00, 0x00, 0xA9, 0x05, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0xB5, 0x06, 0x00, 0x00
	.byte 0x46, 0x07, 0x00, 0x00, 0xCF, 0x0B, 0x00, 0x00, 0xC0, 0x0C, 0x00, 0x00, 0xBD, 0x0D, 0x00, 0x00
	.byte 0xC6, 0x0E, 0x00, 0x00, 0xDC, 0x0F, 0x00, 0x00, 0xFF, 0x10, 0x00, 0x00, 0x2F, 0x12, 0x00, 0x00
	.byte 0x6C, 0x13, 0x00, 0x00, 0xB6, 0x14, 0x00, 0x00, 0x0F, 0x16, 0x00, 0x00, 0x75, 0x17, 0x00, 0x00
	.byte 0xEA, 0x18, 0x00, 0x00, 0x6D, 0x1A, 0x00, 0x00, 0xFF, 0x1B, 0x00, 0x00, 0xA0, 0x1D, 0x00, 0x00
	.byte 0x51, 0x1F, 0x00, 0x00, 0x16, 0x2C, 0x00, 0x00, 0x80, 0x2E, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00
	.byte 0x95, 0x33, 0x00, 0x00, 0x41, 0x36, 0x00, 0x00, 0x02, 0x39, 0x00, 0x00, 0xDB, 0x3B, 0x00, 0x00
	.byte 0xCA, 0x3E, 0x00, 0x00, 0xD0, 0x41, 0x00, 0x00, 0xEE, 0x44, 0x00, 0x00, 0x24, 0x48, 0x00, 0x00
	.byte 0x73, 0x4B, 0x00, 0x00, 0xD9, 0x4E, 0x00, 0x00, 0x59, 0x52, 0x00, 0x00, 0xF2, 0x55, 0x00, 0x00
	.byte 0xA4, 0x59, 0x00, 0x00, 0xCC, 0x74, 0x00, 0x00, 0xAB, 0x79, 0x00, 0x00, 0xAC, 0x7E, 0x00, 0x00
	.byte 0xCE, 0x83, 0x00, 0x00, 0x11, 0x89, 0x00, 0x00, 0x77, 0x8E, 0x00, 0x00, 0xFF, 0x93, 0x00, 0x00
	.byte 0xAA, 0x99, 0x00, 0x00, 0x78, 0x9F, 0x00, 0x00, 0x6A, 0xA5, 0x00, 0x00, 0x80, 0xAB, 0x00, 0x00
	.byte 0xBB, 0xB1, 0x00, 0x00, 0x1A, 0xB8, 0x00, 0x00, 0x9E, 0xBE, 0x00, 0x00, 0x47, 0xC5, 0x00, 0x00
	.byte 0x17, 0xCC, 0x00, 0x00, 0x42, 0xFD, 0x00, 0x00, 0xCB, 0x05, 0x01, 0x00, 0x82, 0x0E, 0x01, 0x00
	.byte 0x68, 0x17, 0x01, 0x00, 0x7E, 0x20, 0x01, 0x00, 0xC4, 0x29, 0x01, 0x00, 0x3B, 0x33, 0x01, 0x00
	.byte 0xE2, 0x3C, 0x01, 0x00, 0xBB, 0x46, 0x01, 0x00, 0xC5, 0x50, 0x01, 0x00, 0x02, 0x5B, 0x01, 0x00
	.byte 0x72, 0x65, 0x01, 0x00, 0x15, 0x70, 0x01, 0x00, 0xEB, 0x7A, 0x01, 0x00, 0xF5, 0x85, 0x01, 0x00
	.byte 0x33, 0x91, 0x01, 0x00, 0x6D, 0xE1, 0x01, 0x00, 0x07, 0xEF, 0x01, 0x00, 0xE0, 0xFC, 0x01, 0x00
	.byte 0xF7, 0x0A, 0x02, 0x00, 0x4F, 0x19, 0x02, 0x00, 0xE6, 0x27, 0x02, 0x00, 0xBE, 0x36, 0x02, 0x00
	.byte 0xD7, 0x45, 0x02, 0x00, 0x32, 0x55, 0x02, 0x00, 0xCF, 0x64, 0x02, 0x00, 0xAE, 0x74, 0x02, 0x00
	.byte 0xD0, 0x84, 0x02, 0x00, 0x36, 0x95, 0x02, 0x00, 0xE0, 0xA5, 0x02, 0x00, 0xCE, 0xB6, 0x02, 0x00
	.byte 0x02, 0xC8, 0x02, 0x00, 0xB0, 0x41, 0x03, 0x00, 0xF8, 0x55, 0x03, 0x00, 0x90, 0x6A, 0x03, 0x00
	.byte 0x79, 0x7F, 0x03, 0x00, 0xB4, 0x94, 0x03, 0x00, 0x41, 0xAA, 0x03, 0x00, 0x21, 0xC0, 0x03, 0x00
	.byte 0x54, 0xD6, 0x03, 0x00, 0xDA, 0xEC, 0x03, 0x00, 0xB5, 0x03, 0x04, 0x00, 0xE5, 0x1A, 0x04, 0x00
	.byte 0x6A, 0x32, 0x04, 0x00, 0x45, 0x4A, 0x04, 0x00, 0x77, 0x62, 0x04, 0x00, 0x00, 0x7B, 0x04, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0x7F, 0xB0, 0xC0, 0x07, 0x02, 0xEC, 0xC0, 0x07, 0x02, 0x38, 0xC1, 0x07, 0x02
	.byte 0x8C, 0xC1, 0x07, 0x02, 0xEC, 0xC1, 0x07, 0x02, 0x28, 0xC2, 0x07, 0x02, 0x60, 0xC2, 0x07, 0x02
	.byte 0xA4, 0xC2, 0x07, 0x02, 0x9C, 0xC0, 0x07, 0x02, 0x9C, 0xC0, 0x07, 0x02, 0x9C, 0xC0, 0x07, 0x02
	.byte 0x9C, 0xC0, 0x07, 0x02, 0x9C, 0xC0, 0x07, 0x02, 0x9C, 0xC0, 0x07, 0x02, 0x9C, 0xC0, 0x07, 0x02
	.byte 0x9C, 0xC0, 0x07, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40
	.byte 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40
	.byte 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40
	.byte 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40
	.byte 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40
	.byte 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40
	.byte 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40
	.byte 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40
	.byte 0x40, 0x40, 0x40, 0x40, 0x10, 0x11, 0x12, 0x12, 0x13, 0x14, 0x15, 0x15, 0x16, 0x17, 0x18, 0x18
	.byte 0x19, 0x1A, 0x1B, 0x1B, 0x1C, 0x1D, 0x1E, 0x1E, 0x1F, 0x20, 0x21, 0x21, 0x22, 0x23, 0x24, 0x24
	.byte 0x25, 0x26, 0x27, 0x27, 0x28, 0x29, 0x2A, 0x2A, 0x2B, 0x2C, 0x2D, 0x2D, 0x2E, 0x2F, 0x30, 0x30
	.byte 0x31, 0x32, 0x33, 0x33, 0x34, 0x35, 0x36, 0x36, 0x37, 0x38, 0x39, 0x39, 0x3A, 0x3B, 0x3C, 0x3C
	.byte 0x3D, 0x3E, 0x3F, 0x3F, 0x40, 0x41, 0x42, 0x42, 0x43, 0x44, 0x45, 0x45, 0x46, 0x47, 0x48, 0x48
	.byte 0x49, 0x4A, 0x4B, 0x4B, 0x4C, 0x4D, 0x4E, 0x4E, 0x4F, 0x50, 0x51, 0x51, 0x52, 0x53, 0x54, 0x54
	.byte 0x55, 0x56, 0x57, 0x57, 0x58, 0x59, 0x5A, 0x5A, 0x5B, 0x5C, 0x5D, 0x5D, 0x5E, 0x5F, 0x60, 0x60
	.byte 0x61, 0x62, 0x63, 0x63, 0x64, 0x65, 0x66, 0x66, 0x67, 0x68, 0x69, 0x69, 0x6A, 0x6B, 0x6C, 0x6C
	.byte 0x6D, 0x6E, 0x6F, 0x6F, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B
	.byte 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B
	.byte 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B
	.byte 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B
	.byte 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B
	.byte 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B
	.byte 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B
	.byte 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B
	.byte 0x7C, 0x7D, 0x7E, 0x7F, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B
	.byte 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x20, 0x21, 0x22, 0x23
	.byte 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
	.byte 0x38, 0x39, 0x3A, 0x3B, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B
	.byte 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x60, 0x61, 0x62, 0x63
	.byte 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77
	.byte 0x78, 0x79, 0x7A, 0x7B, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B
	.byte 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03
	.byte 0x04, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0xEC, 0x3F, 0xF0, 0x3F, 0xF3, 0x3F, 0xF7, 0x3F
	.byte 0xFB, 0x3F, 0xFE, 0x3F, 0x02, 0x40, 0x06, 0x40, 0x0A, 0x40, 0x0D, 0x40, 0x11, 0x40, 0x15, 0x40
	.byte 0x18, 0x40, 0x1C, 0x40, 0x20, 0x40, 0x23, 0x40, 0x27, 0x40, 0x2B, 0x40, 0x2F, 0x40, 0x32, 0x40
	.byte 0x36, 0x40, 0x3A, 0x40, 0x3D, 0x40, 0x41, 0x40, 0x45, 0x40, 0x49, 0x40, 0x4C, 0x40, 0x50, 0x40
	.byte 0x54, 0x40, 0x57, 0x40, 0x5B, 0x40, 0x5F, 0x40, 0x63, 0x40, 0x66, 0x40, 0x6A, 0x40, 0x6E, 0x40
	.byte 0x71, 0x40, 0x75, 0x40, 0x79, 0x40, 0x7D, 0x40, 0x80, 0x40, 0x84, 0x40, 0x88, 0x40, 0x8C, 0x40
	.byte 0x8F, 0x40, 0x93, 0x40, 0x97, 0x40, 0x9A, 0x40, 0x9E, 0x40, 0xA2, 0x40, 0xA6, 0x40, 0xA9, 0x40
	.byte 0xAD, 0x40, 0xB1, 0x40, 0xB5, 0x40, 0xB8, 0x40, 0xBC, 0x40, 0xC0, 0x40, 0xC4, 0x40, 0xC7, 0x40
	.byte 0xCB, 0x40, 0xCF, 0x40, 0xD3, 0x40, 0xD6, 0x40, 0xDA, 0x40, 0xDE, 0x40, 0xE2, 0x40, 0xE5, 0x40
	.byte 0xE9, 0x40, 0xED, 0x40, 0xF1, 0x40, 0xF4, 0x40, 0xF8, 0x40, 0xFC, 0x40, 0x00, 0x41, 0x03, 0x41
	.byte 0x07, 0x41, 0x0B, 0x41, 0x0F, 0x41, 0x12, 0x41, 0x16, 0x41, 0x1A, 0x41, 0x1E, 0x41, 0x21, 0x41
	.byte 0x25, 0x41, 0x29, 0x41, 0x2D, 0x41, 0x30, 0x41, 0x34, 0x41, 0x38, 0x41, 0x3C, 0x41, 0x3F, 0x41
	.byte 0x43, 0x41, 0x47, 0x41, 0x4B, 0x41, 0x4F, 0x41, 0x52, 0x41, 0x56, 0x41, 0x5A, 0x41, 0x5E, 0x41
	.byte 0x61, 0x41, 0x65, 0x41, 0x69, 0x41, 0x6D, 0x41, 0x71, 0x41, 0x74, 0x41, 0x78, 0x41, 0x7C, 0x41
	.byte 0x80, 0x41, 0x83, 0x41, 0x87, 0x41, 0x8B, 0x41, 0x8F, 0x41, 0x93, 0x41, 0x96, 0x41, 0x9A, 0x41
	.byte 0x9E, 0x41, 0xA2, 0x41, 0xA6, 0x41, 0xA9, 0x41, 0xAD, 0x41, 0xB1, 0x41, 0xB5, 0x41, 0xB9, 0x41
	.byte 0xBC, 0x41, 0xC0, 0x41, 0xC4, 0x41, 0xC8, 0x41, 0xCC, 0x41, 0xCF, 0x41, 0xD3, 0x41, 0xD7, 0x41
	.byte 0xDB, 0x41, 0xDF, 0x41, 0xE2, 0x41, 0xE6, 0x41, 0xEA, 0x41, 0xEE, 0x41, 0xF2, 0x41, 0xF5, 0x41
	.byte 0xF9, 0x41, 0xFD, 0x41, 0x01, 0x42, 0x05, 0x42, 0x08, 0x42, 0x0C, 0x42, 0x10, 0x42, 0x14, 0x42
	.byte 0x18, 0x42, 0x1C, 0x42, 0x1F, 0x42, 0x23, 0x42, 0x27, 0x42, 0x2B, 0x42, 0x2F, 0x42, 0x32, 0x42
	.byte 0x36, 0x42, 0x3A, 0x42, 0x3E, 0x42, 0x42, 0x42, 0x46, 0x42, 0x49, 0x42, 0x4D, 0x42, 0x51, 0x42
	.byte 0x55, 0x42, 0x59, 0x42, 0x5D, 0x42, 0x60, 0x42, 0x64, 0x42, 0x68, 0x42, 0x6C, 0x42, 0x70, 0x42
	.byte 0x74, 0x42, 0x77, 0x42, 0x7B, 0x42, 0x7F, 0x42, 0x83, 0x42, 0x87, 0x42, 0x8B, 0x42, 0x8E, 0x42
	.byte 0x92, 0x42, 0x96, 0x42, 0x9A, 0x42, 0x9E, 0x42, 0xA2, 0x42, 0xA6, 0x42, 0xA9, 0x42, 0xAD, 0x42
	.byte 0xB1, 0x42, 0xB5, 0x42, 0xB9, 0x42, 0xBD, 0x42, 0xC0, 0x42, 0xC4, 0x42, 0xC8, 0x42, 0xCC, 0x42
	.byte 0xD0, 0x42, 0xD4, 0x42, 0xD8, 0x42, 0xDC, 0x42, 0xDF, 0x42, 0xE3, 0x42, 0xE7, 0x42, 0xEB, 0x42
	.byte 0xEF, 0x42, 0xF3, 0x42, 0xF7, 0x42, 0xFA, 0x42, 0xFE, 0x42, 0x02, 0x43, 0x06, 0x43, 0x0A, 0x43
	.byte 0x0E, 0x43, 0x12, 0x43, 0x16, 0x43, 0x19, 0x43, 0x1D, 0x43, 0x21, 0x43, 0x25, 0x43, 0x29, 0x43
	.byte 0x2D, 0x43, 0x31, 0x43, 0x35, 0x43, 0x38, 0x43, 0x3C, 0x43, 0x40, 0x43, 0x44, 0x43, 0x48, 0x43
	.byte 0x4C, 0x43, 0x50, 0x43, 0x54, 0x43, 0x58, 0x43, 0x5B, 0x43, 0x5F, 0x43, 0x63, 0x43, 0x67, 0x43
	.byte 0x6B, 0x43, 0x6F, 0x43, 0x73, 0x43, 0x77, 0x43, 0x7B, 0x43, 0x7E, 0x43, 0x82, 0x43, 0x86, 0x43
	.byte 0x8A, 0x43, 0x8E, 0x43, 0x92, 0x43, 0x96, 0x43, 0x9A, 0x43, 0x9E, 0x43, 0xA2, 0x43, 0xA6, 0x43
	.byte 0xA9, 0x43, 0xAD, 0x43, 0xB1, 0x43, 0xB5, 0x43, 0xB9, 0x43, 0xBD, 0x43, 0xC1, 0x43, 0xC5, 0x43
	.byte 0xC9, 0x43, 0xCD, 0x43, 0xD1, 0x43, 0xD4, 0x43, 0xD8, 0x43, 0xDC, 0x43, 0xE0, 0x43, 0xE4, 0x43
	.byte 0xE8, 0x43, 0xEC, 0x43, 0xF0, 0x43, 0xF4, 0x43, 0xF8, 0x43, 0xFC, 0x43, 0x00, 0x44, 0x04, 0x44
	.byte 0x07, 0x44, 0x0B, 0x44, 0x0F, 0x44, 0x13, 0x44, 0x17, 0x44, 0x1B, 0x44, 0x1F, 0x44, 0x23, 0x44
	.byte 0x27, 0x44, 0x2B, 0x44, 0x2F, 0x44, 0x33, 0x44, 0x37, 0x44, 0x3B, 0x44, 0x3F, 0x44, 0x43, 0x44
	.byte 0x46, 0x44, 0x4A, 0x44, 0x4E, 0x44, 0x52, 0x44, 0x56, 0x44, 0x5A, 0x44, 0x5E, 0x44, 0x62, 0x44
	.byte 0x66, 0x44, 0x6A, 0x44, 0x6E, 0x44, 0x72, 0x44, 0x76, 0x44, 0x7A, 0x44, 0x7E, 0x44, 0x82, 0x44
	.byte 0x86, 0x44, 0x8A, 0x44, 0x8E, 0x44, 0x92, 0x44, 0x96, 0x44, 0x99, 0x44, 0x9D, 0x44, 0xA1, 0x44
	.byte 0xA5, 0x44, 0xA9, 0x44, 0xAD, 0x44, 0xB1, 0x44, 0xB5, 0x44, 0xB9, 0x44, 0xBD, 0x44, 0xC1, 0x44
	.byte 0xC5, 0x44, 0xC9, 0x44, 0xCD, 0x44, 0xD1, 0x44, 0xD5, 0x44, 0xD9, 0x44, 0xDD, 0x44, 0xE1, 0x44
	.byte 0xE5, 0x44, 0xE9, 0x44, 0xED, 0x44, 0xF1, 0x44, 0xF5, 0x44, 0xF9, 0x44, 0xFD, 0x44, 0x01, 0x45
	.byte 0x05, 0x45, 0x09, 0x45, 0x0D, 0x45, 0x11, 0x45, 0x15, 0x45, 0x19, 0x45, 0x1D, 0x45, 0x21, 0x45
	.byte 0x25, 0x45, 0x29, 0x45, 0x2D, 0x45, 0x31, 0x45, 0x35, 0x45, 0x39, 0x45, 0x3D, 0x45, 0x41, 0x45
	.byte 0x45, 0x45, 0x49, 0x45, 0x4D, 0x45, 0x51, 0x45, 0x55, 0x45, 0x59, 0x45, 0x5D, 0x45, 0x61, 0x45
	.byte 0x65, 0x45, 0x69, 0x45, 0x6D, 0x45, 0x71, 0x45, 0x75, 0x45, 0x79, 0x45, 0x7D, 0x45, 0x81, 0x45
	.byte 0x85, 0x45, 0x89, 0x45, 0x8D, 0x45, 0x91, 0x45, 0x95, 0x45, 0x99, 0x45, 0x9D, 0x45, 0xA1, 0x45
	.byte 0xA5, 0x45, 0xA9, 0x45, 0xAD, 0x45, 0xB1, 0x45, 0xB5, 0x45, 0xB9, 0x45, 0xBD, 0x45, 0xC1, 0x45
	.byte 0xC5, 0x45, 0xC9, 0x45, 0xCD, 0x45, 0xD1, 0x45, 0xD5, 0x45, 0xD9, 0x45, 0xDD, 0x45, 0xE1, 0x45
	.byte 0xE5, 0x45, 0xE9, 0x45, 0xEE, 0x45, 0xF2, 0x45, 0xF6, 0x45, 0xFA, 0x45, 0xFE, 0x45, 0x02, 0x46
	.byte 0x06, 0x46, 0x0A, 0x46, 0x0E, 0x46, 0x12, 0x46, 0x16, 0x46, 0x1A, 0x46, 0x1E, 0x46, 0x22, 0x46
	.byte 0x26, 0x46, 0x2A, 0x46, 0x2E, 0x46, 0x32, 0x46, 0x36, 0x46, 0x3A, 0x46, 0x3E, 0x46, 0x43, 0x46
	.byte 0x47, 0x46, 0x4B, 0x46, 0x4F, 0x46, 0x53, 0x46, 0x57, 0x46, 0x5B, 0x46, 0x5F, 0x46, 0x63, 0x46
	.byte 0x67, 0x46, 0x6B, 0x46, 0x6F, 0x46, 0x73, 0x46, 0x77, 0x46, 0x7B, 0x46, 0x80, 0x46, 0x84, 0x46
	.byte 0x88, 0x46, 0x8C, 0x46, 0x90, 0x46, 0x94, 0x46, 0x98, 0x46, 0x9C, 0x46, 0xA0, 0x46, 0xA4, 0x46
	.byte 0xA8, 0x46, 0xAC, 0x46, 0xB0, 0x46, 0xB5, 0x46, 0xB9, 0x46, 0xBD, 0x46, 0xC1, 0x46, 0xC5, 0x46
	.byte 0xC9, 0x46, 0xCD, 0x46, 0xD1, 0x46, 0xD5, 0x46, 0xD9, 0x46, 0xDD, 0x46, 0xE2, 0x46, 0xE6, 0x46
	.byte 0xEA, 0x46, 0xEE, 0x46, 0xF2, 0x46, 0xF6, 0x46, 0xFA, 0x46, 0xFE, 0x46, 0x02, 0x47, 0x06, 0x47
	.byte 0x0B, 0x47, 0x0F, 0x47, 0x13, 0x47, 0x17, 0x47, 0x1B, 0x47, 0x1F, 0x47, 0x23, 0x47, 0x27, 0x47
	.byte 0x2B, 0x47, 0x2F, 0x47, 0x34, 0x47, 0x38, 0x47, 0x3C, 0x47, 0x40, 0x47, 0x44, 0x47, 0x48, 0x47
	.byte 0x4C, 0x47, 0x50, 0x47, 0x55, 0x47, 0x59, 0x47, 0x5D, 0x47, 0x61, 0x47, 0x65, 0x47, 0x69, 0x47
	.byte 0x6D, 0x47, 0x71, 0x47, 0x76, 0x47, 0x7A, 0x47, 0x7E, 0x47, 0x82, 0x47, 0x86, 0x47, 0x8A, 0x47
	.byte 0x8E, 0x47, 0x92, 0x47, 0x97, 0x47, 0x9B, 0x47, 0x9F, 0x47, 0xA3, 0x47, 0xA7, 0x47, 0xAB, 0x47
	.byte 0xAF, 0x47, 0xB4, 0x47, 0xB8, 0x47, 0xBC, 0x47, 0xC0, 0x47, 0xC4, 0x47, 0xC8, 0x47, 0xCC, 0x47
	.byte 0xD1, 0x47, 0xD5, 0x47, 0xD9, 0x47, 0xDD, 0x47, 0xE1, 0x47, 0xE5, 0x47, 0xE9, 0x47, 0xEE, 0x47
	.byte 0xF2, 0x47, 0xF6, 0x47, 0xFA, 0x47, 0xFE, 0x47, 0x02, 0x48, 0x07, 0x48, 0x0B, 0x48, 0x0F, 0x48
	.byte 0x13, 0x48, 0x17, 0x48, 0x1B, 0x48, 0x20, 0x48, 0x24, 0x48, 0x28, 0x48, 0x2C, 0x48, 0x30, 0x48
	.byte 0x34, 0x48, 0x39, 0x48, 0x3D, 0x48, 0x41, 0x48, 0x45, 0x48, 0x49, 0x48, 0x4D, 0x48, 0x52, 0x48
	.byte 0x56, 0x48, 0x5A, 0x48, 0x5E, 0x48, 0x62, 0x48, 0x66, 0x48, 0x6B, 0x48, 0x6F, 0x48, 0x73, 0x48
	.byte 0x77, 0x48, 0x7B, 0x48, 0x80, 0x48, 0x84, 0x48, 0x88, 0x48, 0x8C, 0x48, 0x90, 0x48, 0x95, 0x48
	.byte 0x99, 0x48, 0x9D, 0x48, 0xA1, 0x48, 0xA5, 0x48, 0xAA, 0x48, 0xAE, 0x48, 0xB2, 0x48, 0xB6, 0x48
	.byte 0xBA, 0x48, 0xBF, 0x48, 0xC3, 0x48, 0xC7, 0x48, 0xCB, 0x48, 0xCF, 0x48, 0xD4, 0x48, 0xD8, 0x48
	.byte 0xDC, 0x48, 0xE0, 0x48, 0xE4, 0x48, 0xE9, 0x48, 0xED, 0x48, 0xF1, 0x48, 0xF5, 0x48, 0xF9, 0x48
	.byte 0xFE, 0x48, 0x02, 0x49, 0x06, 0x49, 0x0A, 0x49, 0x0F, 0x49, 0x13, 0x49, 0x17, 0x49, 0x1B, 0x49
	.byte 0x1F, 0x49, 0x24, 0x49, 0x28, 0x49, 0x2C, 0x49, 0x30, 0x49, 0x35, 0x49, 0x39, 0x49, 0x3D, 0x49
	.byte 0x41, 0x49, 0x45, 0x49, 0x4A, 0x49, 0x4E, 0x49, 0x52, 0x49, 0x56, 0x49, 0x5B, 0x49, 0x5F, 0x49
	.byte 0x63, 0x49, 0x67, 0x49, 0x6C, 0x49, 0x70, 0x49, 0x74, 0x49, 0x78, 0x49, 0x7D, 0x49, 0x81, 0x49
	.byte 0x85, 0x49, 0x89, 0x49, 0x8E, 0x49, 0x92, 0x49, 0x96, 0x49, 0x9A, 0x49, 0x9F, 0x49, 0xA3, 0x49
	.byte 0xA7, 0x49, 0xAB, 0x49, 0xB0, 0x49, 0xB4, 0x49, 0xB8, 0x49, 0xBC, 0x49, 0xC1, 0x49, 0xC5, 0x49
	.byte 0xC9, 0x49, 0xCD, 0x49, 0xD2, 0x49, 0xD6, 0x49, 0xDA, 0x49, 0xDE, 0x49, 0xE3, 0x49, 0xE7, 0x49
	.byte 0xEB, 0x49, 0xF0, 0x49, 0xF4, 0x49, 0xF8, 0x49, 0xFC, 0x49, 0x01, 0x4A, 0x05, 0x4A, 0x09, 0x4A
	.byte 0x0D, 0x4A, 0x12, 0x4A, 0x16, 0x4A, 0x1A, 0x4A, 0x1F, 0x4A, 0x23, 0x4A, 0x27, 0x4A, 0x2B, 0x4A
	.byte 0x30, 0x4A, 0x34, 0x4A, 0x38, 0x4A, 0x3D, 0x4A, 0x41, 0x4A, 0x45, 0x4A, 0x49, 0x4A, 0x4E, 0x4A
	.byte 0x52, 0x4A, 0x56, 0x4A, 0x5B, 0x4A, 0x5F, 0x4A, 0x63, 0x4A, 0x67, 0x4A, 0x6C, 0x4A, 0x70, 0x4A
	.byte 0x74, 0x4A, 0x79, 0x4A, 0x7D, 0x4A, 0x81, 0x4A, 0x86, 0x4A, 0x8A, 0x4A, 0x8E, 0x4A, 0x93, 0x4A
	.byte 0x97, 0x4A, 0x9B, 0x4A, 0x9F, 0x4A, 0xA4, 0x4A, 0xA8, 0x4A, 0xAC, 0x4A, 0xB1, 0x4A, 0xB5, 0x4A
	.byte 0xB9, 0x4A, 0xBE, 0x4A, 0xC2, 0x4A, 0xC6, 0x4A, 0xCB, 0x4A, 0xCF, 0x4A, 0xD3, 0x4A, 0xD8, 0x4A
	.byte 0xDC, 0x4A, 0xE0, 0x4A, 0xE5, 0x4A, 0xE9, 0x4A, 0xED, 0x4A, 0xF2, 0x4A, 0xF6, 0x4A, 0xFA, 0x4A
	.byte 0xFF, 0x4A, 0x03, 0x4B, 0x07, 0x4B, 0x0C, 0x4B, 0x10, 0x4B, 0x14, 0x4B, 0x19, 0x4B, 0x1D, 0x4B
	.byte 0x21, 0x4B, 0x26, 0x4B, 0x2A, 0x4B, 0x2E, 0x4B, 0x33, 0x4B, 0x37, 0x4B, 0x3B, 0x4B, 0x40, 0x4B
	.byte 0x44, 0x4B, 0x48, 0x4B, 0x4D, 0x4B, 0x51, 0x4B, 0x55, 0x4B, 0x5A, 0x4B, 0x5E, 0x4B, 0x62, 0x4B
	.byte 0x67, 0x4B, 0x6B, 0x4B, 0x6F, 0x4B, 0x74, 0x4B, 0x78, 0x4B, 0x7D, 0x4B, 0x81, 0x4B, 0x85, 0x4B
	.byte 0x8A, 0x4B, 0x8E, 0x4B, 0x92, 0x4B, 0x97, 0x4B, 0x9B, 0x4B, 0x9F, 0x4B, 0xA4, 0x4B, 0xA8, 0x4B
	.byte 0xAD, 0x4B, 0xB1, 0x4B, 0xB5, 0x4B, 0xBA, 0x4B, 0xBE, 0x4B, 0xC2, 0x4B, 0xC7, 0x4B, 0xCB, 0x4B
	.byte 0xD0, 0x4B, 0xD4, 0x4B, 0xD8, 0x4B, 0xDD, 0x4B, 0xE1, 0x4B, 0xE5, 0x4B, 0xEA, 0x4B, 0xEE, 0x4B
	.byte 0xF3, 0x4B, 0xF7, 0x4B, 0xFB, 0x4B, 0x00, 0x4C, 0x04, 0x4C, 0x09, 0x4C, 0x0D, 0x4C, 0x11, 0x4C
	.byte 0x16, 0x4C, 0x1A, 0x4C, 0x1F, 0x4C, 0x23, 0x4C, 0x27, 0x4C, 0x2C, 0x4C, 0x30, 0x4C, 0x35, 0x4C
	.byte 0x39, 0x4C, 0x3D, 0x4C, 0x42, 0x4C, 0x46, 0x4C, 0x4B, 0x4C, 0x4F, 0x4C, 0x53, 0x4C, 0x58, 0x4C
	.byte 0x5C, 0x4C, 0x61, 0x4C, 0x65, 0x4C, 0x69, 0x4C, 0x6E, 0x4C, 0x72, 0x4C, 0x77, 0x4C, 0x7B, 0x4C
	.byte 0x80, 0x4C, 0x84, 0x4C, 0x88, 0x4C, 0x8D, 0x4C, 0x91, 0x4C, 0x96, 0x4C, 0x9A, 0x4C, 0x9E, 0x4C
	.byte 0xA3, 0x4C, 0xA7, 0x4C, 0xAC, 0x4C, 0xB0, 0x4C, 0xB5, 0x4C, 0xB9, 0x4C, 0xBD, 0x4C, 0xC2, 0x4C
	.byte 0xC6, 0x4C, 0xCB, 0x4C, 0xCF, 0x4C, 0xD4, 0x4C, 0xD8, 0x4C, 0xDD, 0x4C, 0xE1, 0x4C, 0xE5, 0x4C
	.byte 0xEA, 0x4C, 0xEE, 0x4C, 0xF3, 0x4C, 0xF7, 0x4C, 0xFC, 0x4C, 0x00, 0x4D, 0x05, 0x4D, 0x09, 0x4D
	.byte 0x0D, 0x4D, 0x12, 0x4D, 0x16, 0x4D, 0x1B, 0x4D, 0x1F, 0x4D, 0x24, 0x4D, 0x28, 0x4D, 0x2D, 0x4D
	.byte 0x31, 0x4D, 0x36, 0x4D, 0x3A, 0x4D, 0x3E, 0x4D, 0x43, 0x4D, 0x47, 0x4D, 0x4C, 0x4D, 0x50, 0x4D
	.byte 0x55, 0x4D, 0x59, 0x4D, 0x5E, 0x4D, 0x62, 0x4D, 0x67, 0x4D, 0x6B, 0x4D, 0x70, 0x4D, 0x74, 0x4D
	.byte 0x79, 0x4D, 0x7D, 0x4D, 0x81, 0x4D, 0x86, 0x4D, 0x8A, 0x4D, 0x8F, 0x4D, 0x93, 0x4D, 0x98, 0x4D
	.byte 0x9C, 0x4D, 0xA1, 0x4D, 0xA5, 0x4D, 0xAA, 0x4D, 0xAE, 0x4D, 0xB3, 0x4D, 0xB7, 0x4D, 0xBC, 0x4D
	.byte 0xC0, 0x4D, 0xC5, 0x4D, 0xC9, 0x4D, 0xCE, 0x4D, 0xD2, 0x4D, 0xD7, 0x4D, 0xDB, 0x4D, 0xE0, 0x4D
	.byte 0xE4, 0x4D, 0xE9, 0x4D, 0xED, 0x4D, 0xF2, 0x4D, 0xF6, 0x4D, 0xFB, 0x4D, 0xFF, 0x4D, 0x04, 0x4E
	.byte 0x08, 0x4E, 0x0D, 0x4E, 0x11, 0x4E, 0x16, 0x4E, 0x1A, 0x4E, 0x1F, 0x4E, 0x23, 0x4E, 0x28, 0x4E
	.byte 0x2C, 0x4E, 0x31, 0x4E, 0x35, 0x4E, 0x3A, 0x4E, 0x3E, 0x4E, 0x43, 0x4E, 0x47, 0x4E, 0x4C, 0x4E
	.byte 0x50, 0x4E, 0x55, 0x4E, 0x5A, 0x4E, 0x5E, 0x4E, 0x63, 0x4E, 0x67, 0x4E, 0x6C, 0x4E, 0x70, 0x4E
	.byte 0x75, 0x4E, 0x79, 0x4E, 0x7E, 0x4E, 0x82, 0x4E, 0x87, 0x4E, 0x8B, 0x4E, 0x90, 0x4E, 0x94, 0x4E
	.byte 0x99, 0x4E, 0x9E, 0x4E, 0xA2, 0x4E, 0xA7, 0x4E, 0xAB, 0x4E, 0xB0, 0x4E, 0xB4, 0x4E, 0xB9, 0x4E
	.byte 0xBD, 0x4E, 0xC2, 0x4E, 0xC6, 0x4E, 0xCB, 0x4E, 0xD0, 0x4E, 0xD4, 0x4E, 0xD9, 0x4E, 0xDD, 0x4E
	.byte 0xE2, 0x4E, 0xE6, 0x4E, 0xEB, 0x4E, 0xEF, 0x4E, 0xF4, 0x4E, 0xF9, 0x4E, 0xFD, 0x4E, 0x02, 0x4F
	.byte 0x06, 0x4F, 0x0B, 0x4F, 0x0F, 0x4F, 0x14, 0x4F, 0x19, 0x4F, 0x1D, 0x4F, 0x22, 0x4F, 0x26, 0x4F
	.byte 0x2B, 0x4F, 0x2F, 0x4F, 0x34, 0x4F, 0x39, 0x4F, 0x3D, 0x4F, 0x42, 0x4F, 0x46, 0x4F, 0x4B, 0x4F
	.byte 0x4F, 0x4F, 0x54, 0x4F, 0x59, 0x4F, 0x5D, 0x4F, 0x62, 0x4F, 0x66, 0x4F, 0x6B, 0x4F, 0x70, 0x4F
	.byte 0x74, 0x4F, 0x79, 0x4F, 0x7D, 0x4F, 0x82, 0x4F, 0x86, 0x4F, 0x8B, 0x4F, 0x90, 0x4F, 0x94, 0x4F
	.byte 0x99, 0x4F, 0x9D, 0x4F, 0xA2, 0x4F, 0xA7, 0x4F, 0xAB, 0x4F, 0xB0, 0x4F, 0xB4, 0x4F, 0xB9, 0x4F
	.byte 0xBE, 0x4F, 0xC2, 0x4F, 0xC7, 0x4F, 0xCB, 0x4F, 0xD0, 0x4F, 0xD5, 0x4F, 0xD9, 0x4F, 0xDE, 0x4F
	.byte 0xE3, 0x4F, 0xE7, 0x4F, 0xEC, 0x4F, 0xF0, 0x4F, 0xF5, 0x4F, 0xFA, 0x4F, 0xFE, 0x4F, 0x03, 0x50
	.byte 0x08, 0x50, 0x0C, 0x50, 0x11, 0x50, 0x15, 0x50, 0x1A, 0x50, 0x1F, 0x50, 0x23, 0x50, 0x28, 0x50
	.byte 0x2D, 0x50, 0x31, 0x50, 0x36, 0x50, 0x3A, 0x50, 0x3F, 0x50, 0x44, 0x50, 0x48, 0x50, 0x4D, 0x50
	.byte 0x52, 0x50, 0x56, 0x50, 0x5B, 0x50, 0x60, 0x50, 0x64, 0x50, 0x69, 0x50, 0x6D, 0x50, 0x72, 0x50
	.byte 0x77, 0x50, 0x7B, 0x50, 0x80, 0x50, 0x85, 0x50, 0x89, 0x50, 0x8E, 0x50, 0x93, 0x50, 0x97, 0x50
	.byte 0x9C, 0x50, 0xA1, 0x50, 0xA5, 0x50, 0xAA, 0x50, 0xAF, 0x50, 0xB3, 0x50, 0xB8, 0x50, 0xBD, 0x50
	.byte 0xC1, 0x50, 0xC6, 0x50, 0xCB, 0x50, 0xCF, 0x50, 0xD4, 0x50, 0xD9, 0x50, 0xDD, 0x50, 0xE2, 0x50
	.byte 0xE7, 0x50, 0xEB, 0x50, 0xF0, 0x50, 0xF5, 0x50, 0xF9, 0x50, 0xFE, 0x50, 0x03, 0x51, 0x07, 0x51
	.byte 0x0C, 0x51, 0x11, 0x51, 0x15, 0x51, 0x1A, 0x51, 0x1F, 0x51, 0x23, 0x51, 0x28, 0x51, 0x2D, 0x51
	.byte 0x32, 0x51, 0x36, 0x51, 0x3B, 0x51, 0x40, 0x51, 0x44, 0x51, 0x49, 0x51, 0x4E, 0x51, 0x52, 0x51
	.byte 0x57, 0x51, 0x5C, 0x51, 0x60, 0x51, 0x65, 0x51, 0x6A, 0x51, 0x6F, 0x51, 0x73, 0x51, 0x78, 0x51
	.byte 0x7D, 0x51, 0x81, 0x51, 0x86, 0x51, 0x8B, 0x51, 0x90, 0x51, 0x94, 0x51, 0x99, 0x51, 0x9E, 0x51
	.byte 0xA2, 0x51, 0xA7, 0x51, 0xAC, 0x51, 0xB1, 0x51, 0xB5, 0x51, 0xBA, 0x51, 0xBF, 0x51, 0xC3, 0x51
	.byte 0xC8, 0x51, 0xCD, 0x51, 0xD2, 0x51, 0xD6, 0x51, 0xDB, 0x51, 0xE0, 0x51, 0xE4, 0x51, 0xE9, 0x51
	.byte 0xEE, 0x51, 0xF3, 0x51, 0xF7, 0x51, 0xFC, 0x51, 0x01, 0x52, 0x06, 0x52, 0x0A, 0x52, 0x0F, 0x52
	.byte 0x14, 0x52, 0x19, 0x52, 0x1D, 0x52, 0x22, 0x52, 0x27, 0x52, 0x2C, 0x52, 0x30, 0x52, 0x35, 0x52
	.byte 0x3A, 0x52, 0x3F, 0x52, 0x43, 0x52, 0x48, 0x52, 0x4D, 0x52, 0x52, 0x52, 0x56, 0x52, 0x5B, 0x52
	.byte 0x60, 0x52, 0x65, 0x52, 0x69, 0x52, 0x6E, 0x52, 0x73, 0x52, 0x78, 0x52, 0x7C, 0x52, 0x81, 0x52
	.byte 0x86, 0x52, 0x8B, 0x52, 0x8F, 0x52, 0x94, 0x52, 0x99, 0x52, 0x9E, 0x52, 0xA3, 0x52, 0xA7, 0x52
	.byte 0xAC, 0x52, 0xB1, 0x52, 0xB6, 0x52, 0xBA, 0x52, 0xBF, 0x52, 0xC4, 0x52, 0xC9, 0x52, 0xCE, 0x52
	.byte 0xD2, 0x52, 0xD7, 0x52, 0xDC, 0x52, 0xE1, 0x52, 0xE5, 0x52, 0xEA, 0x52, 0xEF, 0x52, 0xF4, 0x52
	.byte 0xF9, 0x52, 0xFD, 0x52, 0x02, 0x53, 0x07, 0x53, 0x0C, 0x53, 0x11, 0x53, 0x15, 0x53, 0x1A, 0x53
	.byte 0x1F, 0x53, 0x24, 0x53, 0x29, 0x53, 0x2D, 0x53, 0x32, 0x53, 0x37, 0x53, 0x3C, 0x53, 0x41, 0x53
	.byte 0x45, 0x53, 0x4A, 0x53, 0x4F, 0x53, 0x54, 0x53, 0x59, 0x53, 0x5E, 0x53, 0x62, 0x53, 0x67, 0x53
	.byte 0x6C, 0x53, 0x71, 0x53, 0x76, 0x53, 0x7A, 0x53, 0x7F, 0x53, 0x84, 0x53, 0x89, 0x53, 0x8E, 0x53
	.byte 0x93, 0x53, 0x97, 0x53, 0x9C, 0x53, 0xA1, 0x53, 0xA6, 0x53, 0xAB, 0x53, 0xB0, 0x53, 0xB4, 0x53
	.byte 0xB9, 0x53, 0xBE, 0x53, 0xC3, 0x53, 0xC8, 0x53, 0xCD, 0x53, 0xD1, 0x53, 0xD6, 0x53, 0xDB, 0x53
	.byte 0xE0, 0x53, 0xE5, 0x53, 0xEA, 0x53, 0xEE, 0x53, 0xF3, 0x53, 0xF8, 0x53, 0xFD, 0x53, 0x02, 0x54
	.byte 0x07, 0x54, 0x0C, 0x54, 0x10, 0x54, 0x15, 0x54, 0x1A, 0x54, 0x1F, 0x54, 0x24, 0x54, 0x29, 0x54
	.byte 0x2E, 0x54, 0x32, 0x54, 0x37, 0x54, 0x3C, 0x54, 0x41, 0x54, 0x46, 0x54, 0x4B, 0x54, 0x50, 0x54
	.byte 0x55, 0x54, 0x59, 0x54, 0x5E, 0x54, 0x63, 0x54, 0x68, 0x54, 0x6D, 0x54, 0x72, 0x54, 0x77, 0x54
	.byte 0x7C, 0x54, 0x80, 0x54, 0x85, 0x54, 0x8A, 0x54, 0x8F, 0x54, 0x94, 0x54, 0x99, 0x54, 0x9E, 0x54
	.byte 0xA3, 0x54, 0xA7, 0x54, 0xAC, 0x54, 0xB1, 0x54, 0xB6, 0x54, 0xBB, 0x54, 0xC0, 0x54, 0xC5, 0x54
	.byte 0xCA, 0x54, 0xCF, 0x54, 0xD4, 0x54, 0xD8, 0x54, 0xDD, 0x54, 0xE2, 0x54, 0xE7, 0x54, 0xEC, 0x54
	.byte 0xF1, 0x54, 0xF6, 0x54, 0xFB, 0x54, 0x00, 0x55, 0x05, 0x55, 0x0A, 0x55, 0x0E, 0x55, 0x13, 0x55
	.byte 0x18, 0x55, 0x1D, 0x55, 0x22, 0x55, 0x27, 0x55, 0x2C, 0x55, 0x31, 0x55, 0x36, 0x55, 0x3B, 0x55
	.byte 0x40, 0x55, 0x45, 0x55, 0x49, 0x55, 0x4E, 0x55, 0x53, 0x55, 0x58, 0x55, 0x5D, 0x55, 0x62, 0x55
	.byte 0x67, 0x55, 0x6C, 0x55, 0x71, 0x55, 0x76, 0x55, 0x7B, 0x55, 0x80, 0x55, 0x85, 0x55, 0x8A, 0x55
	.byte 0x8F, 0x55, 0x93, 0x55, 0x98, 0x55, 0x9D, 0x55, 0xA2, 0x55, 0xA7, 0x55, 0xAC, 0x55, 0xB1, 0x55
	.byte 0xB6, 0x55, 0xBB, 0x55, 0xC0, 0x55, 0xC5, 0x55, 0xCA, 0x55, 0xCF, 0x55, 0xD4, 0x55, 0xD9, 0x55
	.byte 0xDE, 0x55, 0xE3, 0x55, 0xE8, 0x55, 0xED, 0x55, 0xF2, 0x55, 0xF7, 0x55, 0xFC, 0x55, 0x01, 0x56
	.byte 0x05, 0x56, 0x0A, 0x56, 0x0F, 0x56, 0x14, 0x56, 0x19, 0x56, 0x1E, 0x56, 0x23, 0x56, 0x28, 0x56
	.byte 0x2D, 0x56, 0x32, 0x56, 0x37, 0x56, 0x3C, 0x56, 0x41, 0x56, 0x46, 0x56, 0x4B, 0x56, 0x50, 0x56
	.byte 0x55, 0x56, 0x5A, 0x56, 0x5F, 0x56, 0x64, 0x56, 0x69, 0x56, 0x6E, 0x56, 0x73, 0x56, 0x78, 0x56
	.byte 0x7D, 0x56, 0x82, 0x56, 0x87, 0x56, 0x8C, 0x56, 0x91, 0x56, 0x96, 0x56, 0x9B, 0x56, 0xA0, 0x56
	.byte 0xA5, 0x56, 0xAA, 0x56, 0xAF, 0x56, 0xB4, 0x56, 0xB9, 0x56, 0xBE, 0x56, 0xC3, 0x56, 0xC8, 0x56
	.byte 0xCD, 0x56, 0xD2, 0x56, 0xD7, 0x56, 0xDC, 0x56, 0xE1, 0x56, 0xE6, 0x56, 0xEB, 0x56, 0xF0, 0x56
	.byte 0xF5, 0x56, 0xFA, 0x56, 0xFF, 0x56, 0x04, 0x57, 0x09, 0x57, 0x0E, 0x57, 0x13, 0x57, 0x18, 0x57
	.byte 0x1D, 0x57, 0x23, 0x57, 0x28, 0x57, 0x2D, 0x57, 0x32, 0x57, 0x37, 0x57, 0x3C, 0x57, 0x41, 0x57
	.byte 0x46, 0x57, 0x4B, 0x57, 0x50, 0x57, 0x55, 0x57, 0x5A, 0x57, 0x5F, 0x57, 0x64, 0x57, 0x69, 0x57
	.byte 0x6E, 0x57, 0x73, 0x57, 0x78, 0x57, 0x7D, 0x57, 0x82, 0x57, 0x87, 0x57, 0x8C, 0x57, 0x92, 0x57
	.byte 0x97, 0x57, 0x9C, 0x57, 0xA1, 0x57, 0xA6, 0x57, 0xAB, 0x57, 0xB0, 0x57, 0xB5, 0x57, 0xBA, 0x57
	.byte 0xBF, 0x57, 0xC4, 0x57, 0xC9, 0x57, 0xCE, 0x57, 0xD3, 0x57, 0xD8, 0x57, 0xDE, 0x57, 0xE3, 0x57
	.byte 0xE8, 0x57, 0xED, 0x57, 0xF2, 0x57, 0xF7, 0x57, 0xFC, 0x57, 0x01, 0x58, 0x06, 0x58, 0x0B, 0x58
	.byte 0x10, 0x58, 0x15, 0x58, 0x1B, 0x58, 0x20, 0x58, 0x25, 0x58, 0x2A, 0x58, 0x2F, 0x58, 0x34, 0x58
	.byte 0x39, 0x58, 0x3E, 0x58, 0x43, 0x58, 0x48, 0x58, 0x4D, 0x58, 0x53, 0x58, 0x58, 0x58, 0x5D, 0x58
	.byte 0x62, 0x58, 0x67, 0x58, 0x6C, 0x58, 0x71, 0x58, 0x76, 0x58, 0x7B, 0x58, 0x81, 0x58, 0x86, 0x58
	.byte 0x8B, 0x58, 0x90, 0x58, 0x95, 0x58, 0x9A, 0x58, 0x9F, 0x58, 0xA4, 0x58, 0xA9, 0x58, 0xAF, 0x58
	.byte 0xB4, 0x58, 0xB9, 0x58, 0xBE, 0x58, 0xC3, 0x58, 0xC8, 0x58, 0xCD, 0x58, 0xD2, 0x58, 0xD8, 0x58
	.byte 0xDD, 0x58, 0xE2, 0x58, 0xE7, 0x58, 0xEC, 0x58, 0xF1, 0x58, 0xF6, 0x58, 0xFC, 0x58, 0x01, 0x59
	.byte 0x06, 0x59, 0x0B, 0x59, 0x10, 0x59, 0x15, 0x59, 0x1A, 0x59, 0x20, 0x59, 0x25, 0x59, 0x2A, 0x59
	.byte 0x2F, 0x59, 0x34, 0x59, 0x39, 0x59, 0x3E, 0x59, 0x44, 0x59, 0x49, 0x59, 0x4E, 0x59, 0x53, 0x59
	.byte 0x58, 0x59, 0x5D, 0x59, 0x63, 0x59, 0x68, 0x59, 0x6D, 0x59, 0x72, 0x59, 0x77, 0x59, 0x7C, 0x59
	.byte 0x82, 0x59, 0x87, 0x59, 0x8C, 0x59, 0x91, 0x59, 0x96, 0x59, 0x9B, 0x59, 0xA1, 0x59, 0xA6, 0x59
	.byte 0xAB, 0x59, 0xB0, 0x59, 0xB5, 0x59, 0xBB, 0x59, 0xC0, 0x59, 0xC5, 0x59, 0xCA, 0x59, 0xCF, 0x59
	.byte 0xD4, 0x59, 0xDA, 0x59, 0xDF, 0x59, 0xE4, 0x59, 0xE9, 0x59, 0xEE, 0x59, 0xF4, 0x59, 0xF9, 0x59
	.byte 0xFE, 0x59, 0x03, 0x5A, 0x08, 0x5A, 0x0E, 0x5A, 0x13, 0x5A, 0x18, 0x5A, 0x1D, 0x5A, 0x22, 0x5A
	.byte 0x28, 0x5A, 0x2D, 0x5A, 0x32, 0x5A, 0x37, 0x5A, 0x3C, 0x5A, 0x42, 0x5A, 0x47, 0x5A, 0x4C, 0x5A
	.byte 0x51, 0x5A, 0x57, 0x5A, 0x5C, 0x5A, 0x61, 0x5A, 0x66, 0x5A, 0x6B, 0x5A, 0x71, 0x5A, 0x76, 0x5A
	.byte 0x7B, 0x5A, 0x80, 0x5A, 0x86, 0x5A, 0x8B, 0x5A, 0x90, 0x5A, 0x95, 0x5A, 0x9A, 0x5A, 0xA0, 0x5A
	.byte 0xA5, 0x5A, 0xAA, 0x5A, 0xAF, 0x5A, 0xB5, 0x5A, 0xBA, 0x5A, 0xBF, 0x5A, 0xC4, 0x5A, 0xCA, 0x5A
	.byte 0xCF, 0x5A, 0xD4, 0x5A, 0xD9, 0x5A, 0xDF, 0x5A, 0xE4, 0x5A, 0xE9, 0x5A, 0xEE, 0x5A, 0xF4, 0x5A
	.byte 0xF9, 0x5A, 0xFE, 0x5A, 0x03, 0x5B, 0x09, 0x5B, 0x0E, 0x5B, 0x13, 0x5B, 0x18, 0x5B, 0x1E, 0x5B
	.byte 0x23, 0x5B, 0x28, 0x5B, 0x2D, 0x5B, 0x33, 0x5B, 0x38, 0x5B, 0x3D, 0x5B, 0x43, 0x5B, 0x48, 0x5B
	.byte 0x4D, 0x5B, 0x52, 0x5B, 0x58, 0x5B, 0x5D, 0x5B, 0x62, 0x5B, 0x67, 0x5B, 0x6D, 0x5B, 0x72, 0x5B
	.byte 0x77, 0x5B, 0x7D, 0x5B, 0x82, 0x5B, 0x87, 0x5B, 0x8C, 0x5B, 0x92, 0x5B, 0x97, 0x5B, 0x9C, 0x5B
	.byte 0xA2, 0x5B, 0xA7, 0x5B, 0xAC, 0x5B, 0xB2, 0x5B, 0xB7, 0x5B, 0xBC, 0x5B, 0xC1, 0x5B, 0xC7, 0x5B
	.byte 0xCC, 0x5B, 0xD1, 0x5B, 0xD7, 0x5B, 0xDC, 0x5B, 0xE1, 0x5B, 0xE7, 0x5B, 0xEC, 0x5B, 0xF1, 0x5B
	.byte 0xF6, 0x5B, 0xFC, 0x5B, 0x01, 0x5C, 0x06, 0x5C, 0x0C, 0x5C, 0x11, 0x5C, 0x16, 0x5C, 0x1C, 0x5C
	.byte 0x21, 0x5C, 0x26, 0x5C, 0x2C, 0x5C, 0x31, 0x5C, 0x36, 0x5C, 0x3C, 0x5C, 0x41, 0x5C, 0x46, 0x5C
	.byte 0x4C, 0x5C, 0x51, 0x5C, 0x56, 0x5C, 0x5C, 0x5C, 0x61, 0x5C, 0x66, 0x5C, 0x6C, 0x5C, 0x71, 0x5C
	.byte 0x76, 0x5C, 0x7C, 0x5C, 0x81, 0x5C, 0x86, 0x5C, 0x8C, 0x5C, 0x91, 0x5C, 0x96, 0x5C, 0x9C, 0x5C
	.byte 0xA1, 0x5C, 0xA6, 0x5C, 0xAC, 0x5C, 0xB1, 0x5C, 0xB6, 0x5C, 0xBC, 0x5C, 0xC1, 0x5C, 0xC7, 0x5C
	.byte 0xCC, 0x5C, 0xD1, 0x5C, 0xD7, 0x5C, 0xDC, 0x5C, 0xE1, 0x5C, 0xE7, 0x5C, 0xEC, 0x5C, 0xF1, 0x5C
	.byte 0xF7, 0x5C, 0xFC, 0x5C, 0x02, 0x5D, 0x07, 0x5D, 0x0C, 0x5D, 0x12, 0x5D, 0x17, 0x5D, 0x1C, 0x5D
	.byte 0x22, 0x5D, 0x27, 0x5D, 0x2D, 0x5D, 0x32, 0x5D, 0x37, 0x5D, 0x3D, 0x5D, 0x42, 0x5D, 0x48, 0x5D
	.byte 0x4D, 0x5D, 0x52, 0x5D, 0x58, 0x5D, 0x5D, 0x5D, 0x62, 0x5D, 0x68, 0x5D, 0x6D, 0x5D, 0x73, 0x5D
	.byte 0x78, 0x5D, 0x7D, 0x5D, 0x83, 0x5D, 0x88, 0x5D, 0x8E, 0x5D, 0x93, 0x5D, 0x98, 0x5D, 0x9E, 0x5D
	.byte 0xA3, 0x5D, 0xA9, 0x5D, 0xAE, 0x5D, 0xB4, 0x5D, 0xB9, 0x5D, 0xBE, 0x5D, 0xC4, 0x5D, 0xC9, 0x5D
	.byte 0xCF, 0x5D, 0xD4, 0x5D, 0xD9, 0x5D, 0xDF, 0x5D, 0xE4, 0x5D, 0xEA, 0x5D, 0xEF, 0x5D, 0xF5, 0x5D
	.byte 0xFA, 0x5D, 0xFF, 0x5D, 0x05, 0x5E, 0x0A, 0x5E, 0x10, 0x5E, 0x15, 0x5E, 0x1B, 0x5E, 0x20, 0x5E
	.byte 0x25, 0x5E, 0x2B, 0x5E, 0x30, 0x5E, 0x36, 0x5E, 0x3B, 0x5E, 0x41, 0x5E, 0x46, 0x5E, 0x4C, 0x5E
	.byte 0x51, 0x5E, 0x56, 0x5E, 0x5C, 0x5E, 0x61, 0x5E, 0x67, 0x5E, 0x6C, 0x5E, 0x72, 0x5E, 0x77, 0x5E
	.byte 0x7D, 0x5E, 0x82, 0x5E, 0x88, 0x5E, 0x8D, 0x5E, 0x92, 0x5E, 0x98, 0x5E, 0x9D, 0x5E, 0xA3, 0x5E
	.byte 0xA8, 0x5E, 0xAE, 0x5E, 0xB3, 0x5E, 0xB9, 0x5E, 0xBE, 0x5E, 0xC4, 0x5E, 0xC9, 0x5E, 0xCF, 0x5E
	.byte 0xD4, 0x5E, 0xDA, 0x5E, 0xDF, 0x5E, 0xE5, 0x5E, 0xEA, 0x5E, 0xEF, 0x5E, 0xF5, 0x5E, 0xFA, 0x5E
	.byte 0x00, 0x5F, 0x05, 0x5F, 0x0B, 0x5F, 0x10, 0x5F, 0x16, 0x5F, 0x1B, 0x5F, 0x21, 0x5F, 0x26, 0x5F
	.byte 0x2C, 0x5F, 0x31, 0x5F, 0x37, 0x5F, 0x3C, 0x5F, 0x42, 0x5F, 0x47, 0x5F, 0x4D, 0x5F, 0x52, 0x5F
	.byte 0x58, 0x5F, 0x5D, 0x5F, 0x63, 0x5F, 0x68, 0x5F, 0x6E, 0x5F, 0x73, 0x5F, 0x79, 0x5F, 0x7E, 0x5F
	.byte 0x84, 0x5F, 0x8A, 0x5F, 0x8F, 0x5F, 0x95, 0x5F, 0x9A, 0x5F, 0xA0, 0x5F, 0xA5, 0x5F, 0xAB, 0x5F
	.byte 0xB0, 0x5F, 0xB6, 0x5F, 0xBB, 0x5F, 0xC1, 0x5F, 0xC6, 0x5F, 0xCC, 0x5F, 0xD1, 0x5F, 0xD7, 0x5F
	.byte 0xDC, 0x5F, 0xE2, 0x5F, 0xE8, 0x5F, 0xED, 0x5F, 0xF3, 0x5F, 0xF8, 0x5F, 0xFE, 0x5F, 0x03, 0x60
	.byte 0x09, 0x60, 0x0E, 0x60, 0x14, 0x60, 0x19, 0x60, 0x1F, 0x60, 0x25, 0x60, 0x2A, 0x60, 0x30, 0x60
	.byte 0x35, 0x60, 0x3B, 0x60, 0x40, 0x60, 0x46, 0x60, 0x4B, 0x60, 0x51, 0x60, 0x57, 0x60, 0x5C, 0x60
	.byte 0x62, 0x60, 0x67, 0x60, 0x6D, 0x60, 0x72, 0x60, 0x78, 0x60, 0x7E, 0x60, 0x83, 0x60, 0x89, 0x60
	.byte 0x8E, 0x60, 0x94, 0x60, 0x99, 0x60, 0x9F, 0x60, 0xA5, 0x60, 0xAA, 0x60, 0xB0, 0x60, 0xB5, 0x60
	.byte 0xBB, 0x60, 0xC1, 0x60, 0xC6, 0x60, 0xCC, 0x60, 0xD1, 0x60, 0xD7, 0x60, 0xDC, 0x60, 0xE2, 0x60
	.byte 0xE8, 0x60, 0xED, 0x60, 0xF3, 0x60, 0xF8, 0x60, 0xFE, 0x60, 0x04, 0x61, 0x09, 0x61, 0x0F, 0x61
	.byte 0x14, 0x61, 0x1A, 0x61, 0x20, 0x61, 0x25, 0x61, 0x2B, 0x61, 0x31, 0x61, 0x36, 0x61, 0x3C, 0x61
	.byte 0x41, 0x61, 0x47, 0x61, 0x4D, 0x61, 0x52, 0x61, 0x58, 0x61, 0x5D, 0x61, 0x63, 0x61, 0x69, 0x61
	.byte 0x6E, 0x61, 0x74, 0x61, 0x7A, 0x61, 0x7F, 0x61, 0x85, 0x61, 0x8B, 0x61, 0x90, 0x61, 0x96, 0x61
	.byte 0x9B, 0x61, 0xA1, 0x61, 0xA7, 0x61, 0xAC, 0x61, 0xB2, 0x61, 0xB8, 0x61, 0xBD, 0x61, 0xC3, 0x61
	.byte 0xC9, 0x61, 0xCE, 0x61, 0xD4, 0x61, 0xDA, 0x61, 0xDF, 0x61, 0xE5, 0x61, 0xEA, 0x61, 0xF0, 0x61
	.byte 0xF6, 0x61, 0xFB, 0x61, 0x01, 0x62, 0x07, 0x62, 0x0C, 0x62, 0x12, 0x62, 0x18, 0x62, 0x1D, 0x62
	.byte 0x23, 0x62, 0x29, 0x62, 0x2E, 0x62, 0x34, 0x62, 0x3A, 0x62, 0x3F, 0x62, 0x45, 0x62, 0x4B, 0x62
	.byte 0x50, 0x62, 0x56, 0x62, 0x5C, 0x62, 0x62, 0x62, 0x67, 0x62, 0x6D, 0x62, 0x73, 0x62, 0x78, 0x62
	.byte 0x7E, 0x62, 0x84, 0x62, 0x89, 0x62, 0x8F, 0x62, 0x95, 0x62, 0x9A, 0x62, 0xA0, 0x62, 0xA6, 0x62
	.byte 0xAC, 0x62, 0xB1, 0x62, 0xB7, 0x62, 0xBD, 0x62, 0xC2, 0x62, 0xC8, 0x62, 0xCE, 0x62, 0xD3, 0x62
	.byte 0xD9, 0x62, 0xDF, 0x62, 0xE5, 0x62, 0xEA, 0x62, 0xF0, 0x62, 0xF6, 0x62, 0xFB, 0x62, 0x01, 0x63
	.byte 0x07, 0x63, 0x0D, 0x63, 0x12, 0x63, 0x18, 0x63, 0x1E, 0x63, 0x23, 0x63, 0x29, 0x63, 0x2F, 0x63
	.byte 0x35, 0x63, 0x3A, 0x63, 0x40, 0x63, 0x46, 0x63, 0x4C, 0x63, 0x51, 0x63, 0x57, 0x63, 0x5D, 0x63
	.byte 0x63, 0x63, 0x68, 0x63, 0x6E, 0x63, 0x74, 0x63, 0x7A, 0x63, 0x7F, 0x63, 0x85, 0x63, 0x8B, 0x63
	.byte 0x91, 0x63, 0x96, 0x63, 0x9C, 0x63, 0xA2, 0x63, 0xA8, 0x63, 0xAD, 0x63, 0xB3, 0x63, 0xB9, 0x63
	.byte 0xBF, 0x63, 0xC4, 0x63, 0xCA, 0x63, 0xD0, 0x63, 0xD6, 0x63, 0xDB, 0x63, 0xE1, 0x63, 0xE7, 0x63
	.byte 0xED, 0x63, 0xF2, 0x63, 0xF8, 0x63, 0xFE, 0x63, 0x04, 0x64, 0x0A, 0x64, 0x0F, 0x64, 0x15, 0x64
	.byte 0x1B, 0x64, 0x21, 0x64, 0x27, 0x64, 0x2C, 0x64, 0x32, 0x64, 0x38, 0x64, 0x3E, 0x64, 0x43, 0x64
	.byte 0x49, 0x64, 0x4F, 0x64, 0x55, 0x64, 0x5B, 0x64, 0x60, 0x64, 0x66, 0x64, 0x6C, 0x64, 0x72, 0x64
	.byte 0x78, 0x64, 0x7D, 0x64, 0x83, 0x64, 0x89, 0x64, 0x8F, 0x64, 0x95, 0x64, 0x9A, 0x64, 0xA0, 0x64
	.byte 0xA6, 0x64, 0xAC, 0x64, 0xB2, 0x64, 0xB8, 0x64, 0xBD, 0x64, 0xC3, 0x64, 0xC9, 0x64, 0xCF, 0x64
	.byte 0xD5, 0x64, 0xDA, 0x64, 0xE0, 0x64, 0xE6, 0x64, 0xEC, 0x64, 0xF2, 0x64, 0xF8, 0x64, 0xFD, 0x64
	.byte 0x03, 0x65, 0x09, 0x65, 0x0F, 0x65, 0x15, 0x65, 0x1B, 0x65, 0x20, 0x65, 0x26, 0x65, 0x2C, 0x65
	.byte 0x32, 0x65, 0x38, 0x65, 0x3E, 0x65, 0x44, 0x65, 0x49, 0x65, 0x4F, 0x65, 0x55, 0x65, 0x5B, 0x65
	.byte 0x61, 0x65, 0x67, 0x65, 0x6D, 0x65, 0x72, 0x65, 0x78, 0x65, 0x7E, 0x65, 0x84, 0x65, 0x8A, 0x65
	.byte 0x90, 0x65, 0x96, 0x65, 0x9B, 0x65, 0xA1, 0x65, 0xA7, 0x65, 0xAD, 0x65, 0xB3, 0x65, 0xB9, 0x65
	.byte 0xBF, 0x65, 0xC5, 0x65, 0xCA, 0x65, 0xD0, 0x65, 0xD6, 0x65, 0xDC, 0x65, 0xE2, 0x65, 0xE8, 0x65
	.byte 0xEE, 0x65, 0xF4, 0x65, 0xF9, 0x65, 0xFF, 0x65, 0x05, 0x66, 0x0B, 0x66, 0x11, 0x66, 0x17, 0x66
	.byte 0x1D, 0x66, 0x23, 0x66, 0x29, 0x66, 0x2F, 0x66, 0x34, 0x66, 0x3A, 0x66, 0x40, 0x66, 0x46, 0x66
	.byte 0x4C, 0x66, 0x52, 0x66, 0x58, 0x66, 0x5E, 0x66, 0x64, 0x66, 0x6A, 0x66, 0x70, 0x66, 0x75, 0x66
	.byte 0x7B, 0x66, 0x81, 0x66, 0x87, 0x66, 0x8D, 0x66, 0x93, 0x66, 0x99, 0x66, 0x9F, 0x66, 0xA5, 0x66
	.byte 0xAB, 0x66, 0xB1, 0x66, 0xB7, 0x66, 0xBD, 0x66, 0xC3, 0x66, 0xC8, 0x66, 0xCE, 0x66, 0xD4, 0x66
	.byte 0xDA, 0x66, 0xE0, 0x66, 0xE6, 0x66, 0xEC, 0x66, 0xF2, 0x66, 0xF8, 0x66, 0xFE, 0x66, 0x04, 0x67
	.byte 0x0A, 0x67, 0x10, 0x67, 0x16, 0x67, 0x1C, 0x67, 0x22, 0x67, 0x28, 0x67, 0x2E, 0x67, 0x34, 0x67
	.byte 0x3A, 0x67, 0x3F, 0x67, 0x45, 0x67, 0x4B, 0x67, 0x51, 0x67, 0x57, 0x67, 0x5D, 0x67, 0x63, 0x67
	.byte 0x69, 0x67, 0x6F, 0x67, 0x75, 0x67, 0x7B, 0x67, 0x81, 0x67, 0x87, 0x67, 0x8D, 0x67, 0x93, 0x67
	.byte 0x99, 0x67, 0x9F, 0x67, 0xA5, 0x67, 0xAB, 0x67, 0xB1, 0x67, 0xB7, 0x67, 0xBD, 0x67, 0xC3, 0x67
	.byte 0xC9, 0x67, 0xCF, 0x67, 0xD5, 0x67, 0xDB, 0x67, 0xE1, 0x67, 0xE7, 0x67, 0xED, 0x67, 0xF3, 0x67
	.byte 0xF9, 0x67, 0xFF, 0x67, 0x05, 0x68, 0x0B, 0x68, 0x11, 0x68, 0x17, 0x68, 0x1D, 0x68, 0x23, 0x68
	.byte 0x29, 0x68, 0x2F, 0x68, 0x35, 0x68, 0x3B, 0x68, 0x41, 0x68, 0x47, 0x68, 0x4D, 0x68, 0x53, 0x68
	.byte 0x59, 0x68, 0x5F, 0x68, 0x65, 0x68, 0x6B, 0x68, 0x71, 0x68, 0x77, 0x68, 0x7D, 0x68, 0x83, 0x68
	.byte 0x8A, 0x68, 0x90, 0x68, 0x96, 0x68, 0x9C, 0x68, 0xA2, 0x68, 0xA8, 0x68, 0xAE, 0x68, 0xB4, 0x68
	.byte 0xBA, 0x68, 0xC0, 0x68, 0xC6, 0x68, 0xCC, 0x68, 0xD2, 0x68, 0xD8, 0x68, 0xDE, 0x68, 0xE4, 0x68
	.byte 0xEA, 0x68, 0xF0, 0x68, 0xF6, 0x68, 0xFD, 0x68, 0x03, 0x69, 0x09, 0x69, 0x0F, 0x69, 0x15, 0x69
	.byte 0x1B, 0x69, 0x21, 0x69, 0x27, 0x69, 0x2D, 0x69, 0x33, 0x69, 0x39, 0x69, 0x3F, 0x69, 0x45, 0x69
	.byte 0x4B, 0x69, 0x52, 0x69, 0x58, 0x69, 0x5E, 0x69, 0x64, 0x69, 0x6A, 0x69, 0x70, 0x69, 0x76, 0x69
	.byte 0x7C, 0x69, 0x82, 0x69, 0x88, 0x69, 0x8E, 0x69, 0x95, 0x69, 0x9B, 0x69, 0xA1, 0x69, 0xA7, 0x69
	.byte 0xAD, 0x69, 0xB3, 0x69, 0xB9, 0x69, 0xBF, 0x69, 0xC5, 0x69, 0xCB, 0x69, 0xD2, 0x69, 0xD8, 0x69
	.byte 0xDE, 0x69, 0xE4, 0x69, 0xEA, 0x69, 0xF0, 0x69, 0xF6, 0x69, 0xFC, 0x69, 0x03, 0x6A, 0x09, 0x6A
	.byte 0x0F, 0x6A, 0x15, 0x6A, 0x1B, 0x6A, 0x21, 0x6A, 0x27, 0x6A, 0x2D, 0x6A, 0x34, 0x6A, 0x3A, 0x6A
	.byte 0x40, 0x6A, 0x46, 0x6A, 0x4C, 0x6A, 0x52, 0x6A, 0x58, 0x6A, 0x5F, 0x6A, 0x65, 0x6A, 0x6B, 0x6A
	.byte 0x71, 0x6A, 0x77, 0x6A, 0x7D, 0x6A, 0x83, 0x6A, 0x8A, 0x6A, 0x90, 0x6A, 0x96, 0x6A, 0x9C, 0x6A
	.byte 0xA2, 0x6A, 0xA8, 0x6A, 0xAF, 0x6A, 0xB5, 0x6A, 0xBB, 0x6A, 0xC1, 0x6A, 0xC7, 0x6A, 0xCD, 0x6A
	.byte 0xD4, 0x6A, 0xDA, 0x6A, 0xE0, 0x6A, 0xE6, 0x6A, 0xEC, 0x6A, 0xF2, 0x6A, 0xF9, 0x6A, 0xFF, 0x6A
	.byte 0x05, 0x6B, 0x0B, 0x6B, 0x11, 0x6B, 0x17, 0x6B, 0x1E, 0x6B, 0x24, 0x6B, 0x2A, 0x6B, 0x30, 0x6B
	.byte 0x36, 0x6B, 0x3D, 0x6B, 0x43, 0x6B, 0x49, 0x6B, 0x4F, 0x6B, 0x55, 0x6B, 0x5C, 0x6B, 0x62, 0x6B
	.byte 0x68, 0x6B, 0x6E, 0x6B, 0x74, 0x6B, 0x7B, 0x6B, 0x81, 0x6B, 0x87, 0x6B, 0x8D, 0x6B, 0x93, 0x6B
	.byte 0x9A, 0x6B, 0xA0, 0x6B, 0xA6, 0x6B, 0xAC, 0x6B, 0xB3, 0x6B, 0xB9, 0x6B, 0xBF, 0x6B, 0xC5, 0x6B
	.byte 0xCB, 0x6B, 0xD2, 0x6B, 0xD8, 0x6B, 0xDE, 0x6B, 0xE4, 0x6B, 0xEB, 0x6B, 0xF1, 0x6B, 0xF7, 0x6B
	.byte 0xFD, 0x6B, 0x04, 0x6C, 0x0A, 0x6C, 0x10, 0x6C, 0x16, 0x6C, 0x1D, 0x6C, 0x23, 0x6C, 0x29, 0x6C
	.byte 0x2F, 0x6C, 0x36, 0x6C, 0x3C, 0x6C, 0x42, 0x6C, 0x48, 0x6C, 0x4F, 0x6C, 0x55, 0x6C, 0x5B, 0x6C
	.byte 0x61, 0x6C, 0x68, 0x6C, 0x6E, 0x6C, 0x74, 0x6C, 0x7A, 0x6C, 0x81, 0x6C, 0x87, 0x6C, 0x8D, 0x6C
	.byte 0x93, 0x6C, 0x9A, 0x6C, 0xA0, 0x6C, 0xA6, 0x6C, 0xAD, 0x6C, 0xB3, 0x6C, 0xB9, 0x6C, 0xBF, 0x6C
	.byte 0xC6, 0x6C, 0xCC, 0x6C, 0xD2, 0x6C, 0xD9, 0x6C, 0xDF, 0x6C, 0xE5, 0x6C, 0xEB, 0x6C, 0xF2, 0x6C
	.byte 0xF8, 0x6C, 0xFE, 0x6C, 0x05, 0x6D, 0x0B, 0x6D, 0x11, 0x6D, 0x17, 0x6D, 0x1E, 0x6D, 0x24, 0x6D
	.byte 0x2A, 0x6D, 0x31, 0x6D, 0x37, 0x6D, 0x3D, 0x6D, 0x44, 0x6D, 0x4A, 0x6D, 0x50, 0x6D, 0x57, 0x6D
	.byte 0x5D, 0x6D, 0x63, 0x6D, 0x69, 0x6D, 0x70, 0x6D, 0x76, 0x6D, 0x7C, 0x6D, 0x83, 0x6D, 0x89, 0x6D
	.byte 0x8F, 0x6D, 0x96, 0x6D, 0x9C, 0x6D, 0xA2, 0x6D, 0xA9, 0x6D, 0xAF, 0x6D, 0xB5, 0x6D, 0xBC, 0x6D
	.byte 0xC2, 0x6D, 0xC8, 0x6D, 0xCF, 0x6D, 0xD5, 0x6D, 0xDB, 0x6D, 0xE2, 0x6D, 0xE8, 0x6D, 0xEF, 0x6D
	.byte 0xF5, 0x6D, 0xFB, 0x6D, 0x02, 0x6E, 0x08, 0x6E, 0x0E, 0x6E, 0x15, 0x6E, 0x1B, 0x6E, 0x21, 0x6E
	.byte 0x28, 0x6E, 0x2E, 0x6E, 0x34, 0x6E, 0x3B, 0x6E, 0x41, 0x6E, 0x48, 0x6E, 0x4E, 0x6E, 0x54, 0x6E
	.byte 0x5B, 0x6E, 0x61, 0x6E, 0x67, 0x6E, 0x6E, 0x6E, 0x74, 0x6E, 0x7B, 0x6E, 0x81, 0x6E, 0x87, 0x6E
	.byte 0x8E, 0x6E, 0x94, 0x6E, 0x9B, 0x6E, 0xA1, 0x6E, 0xA7, 0x6E, 0xAE, 0x6E, 0xB4, 0x6E, 0xBA, 0x6E
	.byte 0xC1, 0x6E, 0xC7, 0x6E, 0xCE, 0x6E, 0xD4, 0x6E, 0xDA, 0x6E, 0xE1, 0x6E, 0xE7, 0x6E, 0xEE, 0x6E
	.byte 0xF4, 0x6E, 0xFA, 0x6E, 0x01, 0x6F, 0x07, 0x6F, 0x0E, 0x6F, 0x14, 0x6F, 0x1B, 0x6F, 0x21, 0x6F
	.byte 0x27, 0x6F, 0x2E, 0x6F, 0x34, 0x6F, 0x3B, 0x6F, 0x41, 0x6F, 0x48, 0x6F, 0x4E, 0x6F, 0x54, 0x6F
	.byte 0x5B, 0x6F, 0x61, 0x6F, 0x68, 0x6F, 0x6E, 0x6F, 0x75, 0x6F, 0x7B, 0x6F, 0x81, 0x6F, 0x88, 0x6F
	.byte 0x8E, 0x6F, 0x95, 0x6F, 0x9B, 0x6F, 0xA2, 0x6F, 0xA8, 0x6F, 0xAF, 0x6F, 0xB5, 0x6F, 0xBB, 0x6F
	.byte 0xC2, 0x6F, 0xC8, 0x6F, 0xCF, 0x6F, 0xD5, 0x6F, 0xDC, 0x6F, 0xE2, 0x6F, 0xE9, 0x6F, 0xEF, 0x6F
	.byte 0xF6, 0x6F, 0xFC, 0x6F, 0x03, 0x70, 0x09, 0x70, 0x0F, 0x70, 0x16, 0x70, 0x1C, 0x70, 0x23, 0x70
	.byte 0x29, 0x70, 0x30, 0x70, 0x36, 0x70, 0x3D, 0x70, 0x43, 0x70, 0x4A, 0x70, 0x50, 0x70, 0x57, 0x70
	.byte 0x5D, 0x70, 0x64, 0x70, 0x6A, 0x70, 0x71, 0x70, 0x77, 0x70, 0x7E, 0x70, 0x84, 0x70, 0x8B, 0x70
	.byte 0x91, 0x70, 0x98, 0x70, 0x9E, 0x70, 0xA5, 0x70, 0xAB, 0x70, 0xB2, 0x70, 0xB8, 0x70, 0xBF, 0x70
	.byte 0xC5, 0x70, 0xCC, 0x70, 0xD2, 0x70, 0xD9, 0x70, 0xDF, 0x70, 0xE6, 0x70, 0xEC, 0x70, 0xF3, 0x70
	.byte 0xF9, 0x70, 0x00, 0x71, 0x07, 0x71, 0x0D, 0x71, 0x14, 0x71, 0x1A, 0x71, 0x21, 0x71, 0x27, 0x71
	.byte 0x2E, 0x71, 0x34, 0x71, 0x3B, 0x71, 0x41, 0x71, 0x48, 0x71, 0x4E, 0x71, 0x55, 0x71, 0x5C, 0x71
	.byte 0x62, 0x71, 0x69, 0x71, 0x6F, 0x71, 0x76, 0x71, 0x7C, 0x71, 0x83, 0x71, 0x89, 0x71, 0x90, 0x71
	.byte 0x96, 0x71, 0x9D, 0x71, 0xA4, 0x71, 0xAA, 0x71, 0xB1, 0x71, 0xB7, 0x71, 0xBE, 0x71, 0xC4, 0x71
	.byte 0xCB, 0x71, 0xD2, 0x71, 0xD8, 0x71, 0xDF, 0x71, 0xE5, 0x71, 0xEC, 0x71, 0xF2, 0x71, 0xF9, 0x71
	.byte 0x00, 0x72, 0x06, 0x72, 0x0D, 0x72, 0x13, 0x72, 0x1A, 0x72, 0x21, 0x72, 0x27, 0x72, 0x2E, 0x72
	.byte 0x34, 0x72, 0x3B, 0x72, 0x42, 0x72, 0x48, 0x72, 0x4F, 0x72, 0x55, 0x72, 0x5C, 0x72, 0x63, 0x72
	.byte 0x69, 0x72, 0x70, 0x72, 0x76, 0x72, 0x7D, 0x72, 0x84, 0x72, 0x8A, 0x72, 0x91, 0x72, 0x98, 0x72
	.byte 0x9E, 0x72, 0xA5, 0x72, 0xAB, 0x72, 0xB2, 0x72, 0xB9, 0x72, 0xBF, 0x72, 0xC6, 0x72, 0xCD, 0x72
	.byte 0xD3, 0x72, 0xDA, 0x72, 0xE0, 0x72, 0xE7, 0x72, 0xEE, 0x72, 0xF4, 0x72, 0xFB, 0x72, 0x02, 0x73
	.byte 0x08, 0x73, 0x0F, 0x73, 0x16, 0x73, 0x1C, 0x73, 0x23, 0x73, 0x29, 0x73, 0x30, 0x73, 0x37, 0x73
	.byte 0x3D, 0x73, 0x44, 0x73, 0x4B, 0x73, 0x51, 0x73, 0x58, 0x73, 0x5F, 0x73, 0x65, 0x73, 0x6C, 0x73
	.byte 0x73, 0x73, 0x79, 0x73, 0x80, 0x73, 0x87, 0x73, 0x8D, 0x73, 0x94, 0x73, 0x9B, 0x73, 0xA1, 0x73
	.byte 0xA8, 0x73, 0xAF, 0x73, 0xB6, 0x73, 0xBC, 0x73, 0xC3, 0x73, 0xCA, 0x73, 0xD0, 0x73, 0xD7, 0x73
	.byte 0xDE, 0x73, 0xE4, 0x73, 0xEB, 0x73, 0xF2, 0x73, 0xF8, 0x73, 0xFF, 0x73, 0x06, 0x74, 0x0D, 0x74
	.byte 0x13, 0x74, 0x1A, 0x74, 0x21, 0x74, 0x27, 0x74, 0x2E, 0x74, 0x35, 0x74, 0x3B, 0x74, 0x42, 0x74
	.byte 0x49, 0x74, 0x50, 0x74, 0x56, 0x74, 0x5D, 0x74, 0x64, 0x74, 0x6B, 0x74, 0x71, 0x74, 0x78, 0x74
	.byte 0x7F, 0x74, 0x85, 0x74, 0x8C, 0x74, 0x93, 0x74, 0x9A, 0x74, 0xA0, 0x74, 0xA7, 0x74, 0xAE, 0x74
	.byte 0xB5, 0x74, 0xBB, 0x74, 0xC2, 0x74, 0xC9, 0x74, 0xD0, 0x74, 0xD6, 0x74, 0xDD, 0x74, 0xE4, 0x74
	.byte 0xEB, 0x74, 0xF1, 0x74, 0xF8, 0x74, 0xFF, 0x74, 0x06, 0x75, 0x0C, 0x75, 0x13, 0x75, 0x1A, 0x75
	.byte 0x21, 0x75, 0x27, 0x75, 0x2E, 0x75, 0x35, 0x75, 0x3C, 0x75, 0x42, 0x75, 0x49, 0x75, 0x50, 0x75
	.byte 0x57, 0x75, 0x5E, 0x75, 0x64, 0x75, 0x6B, 0x75, 0x72, 0x75, 0x79, 0x75, 0x80, 0x75, 0x86, 0x75
	.byte 0x8D, 0x75, 0x94, 0x75, 0x9B, 0x75, 0xA1, 0x75, 0xA8, 0x75, 0xAF, 0x75, 0xB6, 0x75, 0xBD, 0x75
	.byte 0xC3, 0x75, 0xCA, 0x75, 0xD1, 0x75, 0xD8, 0x75, 0xDF, 0x75, 0xE5, 0x75, 0xEC, 0x75, 0xF3, 0x75
	.byte 0xFA, 0x75, 0x01, 0x76, 0x08, 0x76, 0x0E, 0x76, 0x15, 0x76, 0x1C, 0x76, 0x23, 0x76, 0x2A, 0x76
	.byte 0x30, 0x76, 0x37, 0x76, 0x3E, 0x76, 0x45, 0x76, 0x4C, 0x76, 0x53, 0x76, 0x59, 0x76, 0x60, 0x76
	.byte 0x67, 0x76, 0x6E, 0x76, 0x75, 0x76, 0x7C, 0x76, 0x83, 0x76, 0x89, 0x76, 0x90, 0x76, 0x97, 0x76
	.byte 0x9E, 0x76, 0xA5, 0x76, 0xAC, 0x76, 0xB2, 0x76, 0xB9, 0x76, 0xC0, 0x76, 0xC7, 0x76, 0xCE, 0x76
	.byte 0xD5, 0x76, 0xDC, 0x76, 0xE3, 0x76, 0xE9, 0x76, 0xF0, 0x76, 0xF7, 0x76, 0xFE, 0x76, 0x05, 0x77
	.byte 0x0C, 0x77, 0x13, 0x77, 0x19, 0x77, 0x20, 0x77, 0x27, 0x77, 0x2E, 0x77, 0x35, 0x77, 0x3C, 0x77
	.byte 0x43, 0x77, 0x4A, 0x77, 0x51, 0x77, 0x57, 0x77, 0x5E, 0x77, 0x65, 0x77, 0x6C, 0x77, 0x73, 0x77
	.byte 0x7A, 0x77, 0x81, 0x77, 0x88, 0x77, 0x8F, 0x77, 0x96, 0x77, 0x9C, 0x77, 0xA3, 0x77, 0xAA, 0x77
	.byte 0xB1, 0x77, 0xB8, 0x77, 0xBF, 0x77, 0xC6, 0x77, 0xCD, 0x77, 0xD4, 0x77, 0xDB, 0x77, 0xE2, 0x77
	.byte 0xE9, 0x77, 0xEF, 0x77, 0xF6, 0x77, 0xFD, 0x77, 0x04, 0x78, 0x0B, 0x78, 0x12, 0x78, 0x19, 0x78
	.byte 0x20, 0x78, 0x27, 0x78, 0x2E, 0x78, 0x35, 0x78, 0x3C, 0x78, 0x43, 0x78, 0x4A, 0x78, 0x51, 0x78
	.byte 0x58, 0x78, 0x5F, 0x78, 0x65, 0x78, 0x6C, 0x78, 0x73, 0x78, 0x7A, 0x78, 0x81, 0x78, 0x88, 0x78
	.byte 0x8F, 0x78, 0x96, 0x78, 0x9D, 0x78, 0xA4, 0x78, 0xAB, 0x78, 0xB2, 0x78, 0xB9, 0x78, 0xC0, 0x78
	.byte 0xC7, 0x78, 0xCE, 0x78, 0xD5, 0x78, 0xDC, 0x78, 0xE3, 0x78, 0xEA, 0x78, 0xF1, 0x78, 0xF8, 0x78
	.byte 0xFF, 0x78, 0x06, 0x79, 0x0D, 0x79, 0x14, 0x79, 0x1B, 0x79, 0x22, 0x79, 0x29, 0x79, 0x30, 0x79
	.byte 0x37, 0x79, 0x3E, 0x79, 0x45, 0x79, 0x4C, 0x79, 0x53, 0x79, 0x5A, 0x79, 0x61, 0x79, 0x68, 0x79
	.byte 0x6F, 0x79, 0x76, 0x79, 0x7D, 0x79, 0x84, 0x79, 0x8B, 0x79, 0x92, 0x79, 0x99, 0x79, 0xA0, 0x79
	.byte 0xA7, 0x79, 0xAE, 0x79, 0xB5, 0x79, 0xBC, 0x79, 0xC3, 0x79, 0xCA, 0x79, 0xD1, 0x79, 0xD8, 0x79
	.byte 0xDF, 0x79, 0xE6, 0x79, 0xED, 0x79, 0xF4, 0x79, 0xFC, 0x79, 0x03, 0x7A, 0x0A, 0x7A, 0x11, 0x7A
	.byte 0x18, 0x7A, 0x1F, 0x7A, 0x26, 0x7A, 0x2D, 0x7A, 0x34, 0x7A, 0x3B, 0x7A, 0x42, 0x7A, 0x49, 0x7A
	.byte 0x50, 0x7A, 0x57, 0x7A, 0x5E, 0x7A, 0x65, 0x7A, 0x6C, 0x7A, 0x74, 0x7A, 0x7B, 0x7A, 0x82, 0x7A
	.byte 0x89, 0x7A, 0x90, 0x7A, 0x97, 0x7A, 0x9E, 0x7A, 0xA5, 0x7A, 0xAC, 0x7A, 0xB3, 0x7A, 0xBA, 0x7A
	.byte 0xC1, 0x7A, 0xC9, 0x7A, 0xD0, 0x7A, 0xD7, 0x7A, 0xDE, 0x7A, 0xE5, 0x7A, 0xEC, 0x7A, 0xF3, 0x7A
	.byte 0xFA, 0x7A, 0x01, 0x7B, 0x08, 0x7B, 0x10, 0x7B, 0x17, 0x7B, 0x1E, 0x7B, 0x25, 0x7B, 0x2C, 0x7B
	.byte 0x33, 0x7B, 0x3A, 0x7B, 0x41, 0x7B, 0x48, 0x7B, 0x50, 0x7B, 0x57, 0x7B, 0x5E, 0x7B, 0x65, 0x7B
	.byte 0x6C, 0x7B, 0x73, 0x7B, 0x7A, 0x7B, 0x81, 0x7B, 0x89, 0x7B, 0x90, 0x7B, 0x97, 0x7B, 0x9E, 0x7B
	.byte 0xA5, 0x7B, 0xAC, 0x7B, 0xB3, 0x7B, 0xBB, 0x7B, 0xC2, 0x7B, 0xC9, 0x7B, 0xD0, 0x7B, 0xD7, 0x7B
	.byte 0xDE, 0x7B, 0xE5, 0x7B, 0xED, 0x7B, 0xF4, 0x7B, 0xFB, 0x7B, 0x02, 0x7C, 0x09, 0x7C, 0x10, 0x7C
	.byte 0x18, 0x7C, 0x1F, 0x7C, 0x26, 0x7C, 0x2D, 0x7C, 0x34, 0x7C, 0x3B, 0x7C, 0x43, 0x7C, 0x4A, 0x7C
	.byte 0x51, 0x7C, 0x58, 0x7C, 0x5F, 0x7C, 0x67, 0x7C, 0x6E, 0x7C, 0x75, 0x7C, 0x7C, 0x7C, 0x83, 0x7C
	.byte 0x8B, 0x7C, 0x92, 0x7C, 0x99, 0x7C, 0xA0, 0x7C, 0xA7, 0x7C, 0xAE, 0x7C, 0xB6, 0x7C, 0xBD, 0x7C
	.byte 0xC4, 0x7C, 0xCB, 0x7C, 0xD3, 0x7C, 0xDA, 0x7C, 0xE1, 0x7C, 0xE8, 0x7C, 0xEF, 0x7C, 0xF7, 0x7C
	.byte 0xFE, 0x7C, 0x05, 0x7D, 0x0C, 0x7D, 0x13, 0x7D, 0x1B, 0x7D, 0x22, 0x7D, 0x29, 0x7D, 0x30, 0x7D
	.byte 0x38, 0x7D, 0x3F, 0x7D, 0x46, 0x7D, 0x4D, 0x7D, 0x55, 0x7D, 0x5C, 0x7D, 0x63, 0x7D, 0x6A, 0x7D
	.byte 0x72, 0x7D, 0x79, 0x7D, 0x80, 0x7D, 0x87, 0x7D, 0x8F, 0x7D, 0x96, 0x7D, 0x9D, 0x7D, 0xA4, 0x7D
	.byte 0xAC, 0x7D, 0xB3, 0x7D, 0xBA, 0x7D, 0xC1, 0x7D, 0xC9, 0x7D, 0xD0, 0x7D, 0xD7, 0x7D, 0xDE, 0x7D
	.byte 0xE6, 0x7D, 0xED, 0x7D, 0xF4, 0x7D, 0xFC, 0x7D, 0x03, 0x7E, 0x0A, 0x7E, 0x11, 0x7E, 0x19, 0x7E
	.byte 0x20, 0x7E, 0x27, 0x7E, 0x2E, 0x7E, 0x36, 0x7E, 0x3D, 0x7E, 0x44, 0x7E, 0x4C, 0x7E, 0x53, 0x7E
	.byte 0x5A, 0x7E, 0x62, 0x7E, 0x69, 0x7E, 0x70, 0x7E, 0x77, 0x7E, 0x7F, 0x7E, 0x86, 0x7E, 0x8D, 0x7E
	.byte 0x95, 0x7E, 0x9C, 0x7E, 0xA3, 0x7E, 0xAB, 0x7E, 0xB2, 0x7E, 0xB9, 0x7E, 0xC1, 0x7E, 0xC8, 0x7E
	.byte 0xCF, 0x7E, 0xD7, 0x7E, 0xDE, 0x7E, 0xE5, 0x7E, 0xED, 0x7E, 0xF4, 0x7E, 0xFB, 0x7E, 0x03, 0x7F
	.byte 0x0A, 0x7F, 0x11, 0x7F, 0x19, 0x7F, 0x20, 0x7F, 0x27, 0x7F, 0x2F, 0x7F, 0x36, 0x7F, 0x3D, 0x7F
	.byte 0x45, 0x7F, 0x4C, 0x7F, 0x53, 0x7F, 0x5B, 0x7F, 0x62, 0x7F, 0x69, 0x7F, 0x71, 0x7F, 0x78, 0x7F
	.byte 0x80, 0x7F, 0x87, 0x7F, 0x8E, 0x7F, 0x96, 0x7F, 0x9D, 0x7F, 0xA4, 0x7F, 0xAC, 0x7F, 0xB3, 0x7F
	.byte 0xBA, 0x7F, 0xC2, 0x7F, 0xC9, 0x7F, 0xD1, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00
	.byte 0x25, 0x73, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x25, 0x73, 0x2E, 0x70, 0x6B, 0x68, 0x00, 0x00
	.byte 0x25, 0x73, 0x2E, 0x70, 0x6B, 0x62, 0x00, 0x00, 0x28, 0x25, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00
	.byte 0x28, 0x25, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x69, 0x7A
	.byte 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

	arm_func_start FUN_02093920
FUN_02093920: ; 0x02093920
	stmdb sp!, {lr}
	arm_func_end FUN_02093920

	arm_func_start LAB_02093924
LAB_02093924: ; 0x02093924
	mov ip, #0x4000000
	arm_func_end LAB_02093924

	arm_func_start LAB_02093928
LAB_02093928: ; 0x02093928
	add ip, ip, #0x210
	arm_func_end LAB_02093928

	arm_func_start LAB_0209392c
LAB_0209392c: ; 0x0209392C
	ldr r1, [ip, #-8]
	arm_func_end LAB_0209392c

	arm_func_start LAB_02093930
LAB_02093930: ; 0x02093930
	cmp r1, #0
	arm_func_end LAB_02093930

	arm_func_start LAB_02093934
LAB_02093934: ; 0x02093934
	ldmeq sp!, {pc}
	arm_func_end LAB_02093934

	arm_func_start LAB_02093938
LAB_02093938: ; 0x02093938
	ldm ip, {r1, r2}
	arm_func_end LAB_02093938

	arm_func_start LAB_0209393c
LAB_0209393c: ; 0x0209393C
	ands r1, r1, r2
	arm_func_end LAB_0209393c

	arm_func_start LAB_02093940
LAB_02093940: ; 0x02093940
	ldmeq sp!, {pc}
	arm_func_end LAB_02093940

	arm_func_start LAB_02093944
LAB_02093944: ; 0x02093944
	mov r3, #0x80000000
	arm_func_end LAB_02093944
_02093948:
	clz r0, r1

	arm_func_start LAB_0209394c
LAB_0209394c: ; 0x0209394C
	bics r1, r1, r3, lsr r0
	arm_func_end LAB_0209394c

	arm_func_start LAB_02093950
LAB_02093950: ; 0x02093950
	bne _02093948
	arm_func_end LAB_02093950

	arm_func_start LAB_02093954
LAB_02093954: ; 0x02093954
	lsr r1, r3, r0
	arm_func_end LAB_02093954

	arm_func_start LAB_02093958
LAB_02093958: ; 0x02093958
	str r1, [ip, #4]
	arm_func_end LAB_02093958

	arm_func_start LAB_0209395c
LAB_0209395c: ; 0x0209395C
	rsbs r0, r0, #0x1f
	arm_func_end LAB_0209395c

	arm_func_start LAB_02093960
LAB_02093960: ; 0x02093960
	ldr r1, _02093970 ; =0x027E0000
	arm_func_end LAB_02093960

	arm_func_start LAB_02093964
LAB_02093964: ; 0x02093964
	ldr r0, [r1, r0, lsl #2]
	arm_func_end LAB_02093964

	arm_func_start LAB_02093968
LAB_02093968: ; 0x02093968
	ldr lr, _02093974 ; =0x01FF8058
	arm_func_end LAB_02093968

	arm_func_start LAB_0209396c
LAB_0209396c: ; 0x0209396C
	bx r0
	.align 2, 0_02093970: .word 0x027E0000
_02093974: .word 0x01FF8058
	arm_func_end LAB_0209396c

	arm_func_start FUN_02093978
FUN_02093978: ; 0x02093978
	ldr ip, _02093AC8 ; =0x027E0060
	arm_func_end FUN_02093978

	arm_func_start LAB_0209397c
LAB_0209397c: ; 0x0209397C
	mov r3, #0
	arm_func_end LAB_0209397c

	arm_func_start LAB_02093980
LAB_02093980: ; 0x02093980
	ldr ip, [ip]
	arm_func_end LAB_02093980

	arm_func_start LAB_02093984
LAB_02093984: ; 0x02093984
	mov r2, #1
	arm_func_end LAB_02093984

	arm_func_start LAB_02093988
LAB_02093988: ; 0x02093988
	cmp ip, #0
	arm_func_end LAB_02093988

	arm_func_start LAB_0209398c
LAB_0209398c: ; 0x0209398C
	beq _020939C8
	arm_func_end LAB_0209398c
_02093990:
	str r2, [ip, #0x64]

	arm_func_start LAB_02093994
LAB_02093994: ; 0x02093994
	str r3, [ip, #0x78]
	str r3, [ip, #0x7c]
	arm_func_end LAB_02093994

	arm_func_start LAB_0209399c
LAB_0209399c: ; 0x0209399C
	ldr r0, [ip, #0x80]
	arm_func_end LAB_0209399c

	arm_func_start LAB_020939a0
LAB_020939a0: ; 0x020939A0
	str r3, [ip, #0x80]
	arm_func_end LAB_020939a0

	arm_func_start LAB_020939a4
LAB_020939a4: ; 0x020939A4
	mov ip, r0
	arm_func_end LAB_020939a4

	arm_func_start LAB_020939a8
LAB_020939a8: ; 0x020939A8
	cmp ip, #0
	arm_func_end LAB_020939a8

	arm_func_start LAB_020939ac
LAB_020939ac: ; 0x020939AC
	bne _02093990
	arm_func_end LAB_020939ac

	arm_func_start LAB_020939b0
LAB_020939b0: ; 0x020939B0
	ldr ip, _02093AC8 ; =0x027E0060
	arm_func_end LAB_020939b0

	arm_func_start LAB_020939b4
LAB_020939b4: ; 0x020939B4
	str r3, [ip]
	str r3, [ip, #4]
	ldr ip, _02093ACC ; =LAB_020939a4
	mov r1, #1
	strh r1, [ip]
	arm_func_end LAB_020939b4
_020939C8:
	ldr ip, _02093ACC ; =LAB_020939a4
	ldrh r1, [ip]
	cmp r1, #0
	popeq {pc}
	mov r1, #0
	strh r1, [ip]
	mov r3, #0xd2
	msr cpsr_c, r3
	add r2, ip, #8
	ldr r1, [r2]
_020939F0:
	cmp r1, #0
	ldrhne r0, [r1, #0x64]
	cmpne r0, #1
	ldrne r1, [r1, #0x68]
	bne _020939F0
	cmp r1, #0
	bne _02093A18
_02093A0C:
	mov r3, #0x92
	msr cpsr_c, r3
	pop {pc}
_02093A18:
	ldr r0, [ip, #4]
	cmp r1, r0
	beq _02093A0C

	arm_func_start LAB_02093a24
LAB_02093a24: ; 0x02093A24
	ldr r3, [ip, #0xc]
	cmp r3, #0
	beq _02093A40
	push {r0, r1, ip}
	mov lr, pc
	bx r3
	arm_func_end LAB_02093a24
_02093A3C:
	.byte 0x03, 0x10, 0xBD, 0xE8
_02093A40:
	str r1, [ip, #4]
	mrs r2, spsr
	str r2, [r0, #0]!
	push {r0, r1}
	add r0, r0, #0
	add r0, r0, #0x48
	ldr r1, _02093AD0 ; =FUN_02009cac
	blx r1
	pop {r0, r1}
	ldmib sp!, {r2, r3}
	stmib r0!, {r2, r3}
	ldmib sp!, {r2, r3, ip, lr}
	stmib r0, {r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, ip, sp, lr} ^

	arm_func_start LAB_02093a74
LAB_02093a74: ; 0x02093A74
	add r0, r0, #0x34
	stmib r0!, {lr}
	mov r3, #0xd3
	msr cpsr_c, r3
	stmib r0!, {sp}
	stmdb sp!, {r1}
	add r0, r1, #0
	add r0, r0, #0x48
	ldr r1, _02093AD4 ; =FUN_02009cec
	blx r1
	ldm sp!, {r1}
	ldr sp, [r1, #0x44]
	mov r3, #0xd2
	msr cpsr_c, r3
	ldr r2, [r1, #0]!
	msr spsr_fc, r2
	ldr lr, [r1, #0x40]
	ldmib r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, ip, sp, lr} ^
	mov r0, r0
	stmda sp!, {r0, r1, r2, r3, ip, lr}
	ldm sp!, {pc}
	.align 2, 0_02093AC8: .word 0x027E0060
_02093ACC: .word LAB_020939a4
_02093AD0: .word FUN_02009cac
_02093AD4: .word FUN_02009cec
	arm_func_end LAB_02093a74

	arm_func_start FUN_02093ad8
FUN_02093ad8: ; 0x02093AD8
	push {r3, lr}
	arm_func_end FUN_02093ad8
_02093ADC:
	bl FUN_0209C9DC

	arm_func_start LAB_02093ae0
LAB_02093ae0: ; 0x02093AE0
	cmp r0, #0
	arm_func_end LAB_02093ae0

	arm_func_start LAB_02093ae4
LAB_02093ae4: ; 0x02093AE4
	beq _02093ADC
	arm_func_end LAB_02093ae4

	arm_func_start LAB_02093ae8
LAB_02093ae8: ; 0x02093AE8
	ldr r1, _02093B00 ; =0x04000208
	mov r0, #0
	strh r0, [r1]
	bl FUN_02093be8
	bl FUN_02093b04
	pop {r3, pc}
	.align 2, 0_02093B00: .word 0x04000208
	arm_func_end LAB_02093ae8

	arm_func_start FUN_02093b04
FUN_02093b04: ; 0x02093B04
	mov ip, #0x4000000
	arm_func_end FUN_02093b04

	arm_func_start LAB_02093b08
LAB_02093b08: ; 0x02093B08
	str ip, [ip, #0x208]
	arm_func_end LAB_02093b08

	arm_func_start LAB_02093b0c
LAB_02093b0c: ; 0x02093B0C
	ldr r1, _02093BB4 ; =0x027E0000
	arm_func_end LAB_02093b0c

	arm_func_start LAB_02093b10
LAB_02093b10: ; 0x02093B10
	add r1, r1, #0x3fc0
	arm_func_end LAB_02093b10

	arm_func_start LAB_02093b14
LAB_02093b14: ; 0x02093B14
	add r1, r1, #0x3c
	mov r0, #0
	str r0, [r1]
	ldr r1, _02093BB8 ; =0x04000180
	arm_func_end LAB_02093b14
_02093B24:
	ldrh r0, [r1]
	and r0, r0, #0xf
	cmp r0, #1
	bne _02093B24
	mov r0, #0x100
	strh r0, [r1]
	mov r0, #0
	ldr r3, _02093BBC ; =0x02FFFF9C
	ldr r4, [r3]
	ldr r1, _02093BC0 ; =0x02FFFD80
	mov r2, #0x80
	bl FUN_02093bd4
	ldr r3, _02093BC4 ; =0x02FFFD9C
	str r4, [r3]
	ldr r1, _02093BC8 ; =0x02FFFF80
	mov r2, #0x18
	bl FUN_02093bd4
	ldr r1, _02093BCC ; =0x02FFFF98
	strh r0, [r1]
	ldr r1, _02093BBC ; =0x02FFFF9C
	mov r2, #0x64
	bl FUN_02093bd4
	ldr r1, _02093BB8 ; =0x04000180
_02093B80:
	ldrh r0, [r1]
	and r0, r0, #0xf
	cmp r0, #1
	beq _02093B80
	mov r0, #0
	strh r0, [r1]
	ldr r3, _02093BD0 ; =0x02FFFE00
	ldr ip, [r3, #0x24]
	mov lr, ip
	ldr fp, _02093BC8 ; =0x02FFFF80
	ldm fp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sb, sl}
	mov fp, #0
	bx ip
	.align 2, 0_02093BB4: .word 0x027E0000
_02093BB8: .word 0x04000180
_02093BBC: .word 0x02FFFF9C
_02093BC0: .word 0x02FFFD80
_02093BC4: .word 0x02FFFD9C
_02093BC8: .word 0x02FFFF80
_02093BCC: .word 0x02FFFF98
_02093BD0: .word 0x02FFFE00

	arm_func_start FUN_02093bd4
FUN_02093bd4: ; 0x02093BD4
	add ip, r1, r2
	arm_func_end FUN_02093bd4
_02093BD8:
	cmp r1, ip
	stmlt r1!, {r0}
	blt _02093BD8
	bx lr

	arm_func_start FUN_02093be8
FUN_02093be8: ; 0x02093BE8
	push {r4, lr}
	mov r4, r0
	cmp r4, #0
	movne r0, #0
	ldreq r0, _02093CA0 ; =0x02FFFC2C
	arm_func_end FUN_02093be8

	arm_func_start LAB_02093bfc
LAB_02093bfc: ; 0x02093BFC
	ldreq r0, [r0]
	arm_func_end LAB_02093bfc

	arm_func_start LAB_02093c00
LAB_02093c00: ; 0x02093C00
	stmdb sp!, {r0}
	arm_func_end LAB_02093c00

	arm_func_start LAB_02093c04
LAB_02093c04: ; 0x02093C04
	cmp r0, #0x8000
	ldrhs r1, _02093CA4 ; =0x02FFFE00
	movhs r2, #0x160
	blhs FUN_02093ca8
	ldr ip, _02093CA4 ; =0x02FFFE00
	ldr r0, [ip, #0x20]
	ldr r1, [ip, #0x28]
	ldr r2, [ip, #0x2c]
	ldr r3, [sp]
	arm_func_end LAB_02093c04

	arm_func_start LAB_02093c28
LAB_02093c28: ; 0x02093C28
	add r0, r0, r3
	arm_func_end LAB_02093c28

	arm_func_start LAB_02093c2c
LAB_02093c2c: ; 0x02093C2C
	subs r3, r0, #0x8000
	arm_func_end LAB_02093c2c

	arm_func_start LAB_02093c30
LAB_02093c30: ; 0x02093C30
	movlt r0, #0x8000
	arm_func_end LAB_02093c30

	arm_func_start LAB_02093c34
LAB_02093c34: ; 0x02093C34
	sublt r1, r1, r3
	addlt r2, r2, r3
	cmp r2, #0
	blgt FUN_02093ca8
	ldr ip, _02093CA4 ; =0x02FFFE00
	ldr r0, [ip, #0x30]
	ldr r1, [ip, #0x38]
	ldr r2, [ip, #0x3c]
	ldr r3, [sp]
	arm_func_end LAB_02093c34

	arm_func_start LAB_02093c58
LAB_02093c58: ; 0x02093C58
	add r0, r0, r3
	arm_func_end LAB_02093c58

	arm_func_start LAB_02093c5c
LAB_02093c5c: ; 0x02093C5C
	cmp r2, #0
	arm_func_end LAB_02093c5c

	arm_func_start LAB_02093c60
LAB_02093c60: ; 0x02093C60
	blgt FUN_02093ca8
	arm_func_end LAB_02093c60

	arm_func_start LAB_02093c64
LAB_02093c64: ; 0x02093C64
	ldm sp!, {r0}
	arm_func_end LAB_02093c64

	arm_func_start LAB_02093c68
LAB_02093c68: ; 0x02093C68
	mov r1, #0
	arm_func_end LAB_02093c68
_02093C6C:
	mov r0, #0
_02093C70:
	orr r2, r1, r0

	arm_func_start LAB_02093c74
LAB_02093c74: ; 0x02093C74
	mcr p15, #0, r2, c7, c10, #2
	arm_func_end LAB_02093c74

	arm_func_start LAB_02093c78
LAB_02093c78: ; 0x02093C78
	add r0, r0, #0x20
	arm_func_end LAB_02093c78

	arm_func_start LAB_02093c7c
LAB_02093c7c: ; 0x02093C7C
	cmp r0, #0x400
	arm_func_end LAB_02093c7c

	arm_func_start LAB_02093c80
LAB_02093c80: ; 0x02093C80
	blt _02093C70
	arm_func_end LAB_02093c80

	arm_func_start LAB_02093c84
LAB_02093c84: ; 0x02093C84
	adds r1, r1, #0x40000000
	arm_func_end LAB_02093c84

	arm_func_start LAB_02093c88
LAB_02093c88: ; 0x02093C88
	bne _02093C6C
	arm_func_end LAB_02093c88

	arm_func_start LAB_02093c8c
LAB_02093c8c: ; 0x02093C8C
	mov r0, #0
	arm_func_end LAB_02093c8c

	arm_func_start LAB_02093c90
LAB_02093c90: ; 0x02093C90
	mcr p15, #0, r0, c7, c6, #0
	arm_func_end LAB_02093c90

	arm_func_start LAB_02093c94
LAB_02093c94: ; 0x02093C94
	mcr p15, #0, r0, c7, c5, #0
	arm_func_end LAB_02093c94

	arm_func_start LAB_02093c98
LAB_02093c98: ; 0x02093C98
	mcr p15, #0, r0, c7, c10, #4
	pop {r4, pc}
	.align 2, 0_02093CA0: .word 0x02FFFC2C
_02093CA4: .word 0x02FFFE00
	arm_func_end LAB_02093c98

	arm_func_start FUN_02093ca8
FUN_02093ca8: ; 0x02093CA8
	push {r4, r5, r6, r7, r8, lr}
	ldr r4, _02093D68 ; =0x02FFFE60
	ldr r3, _02093D6C ; =0x000001FF
	ldr r5, [r4]
	and r4, r0, r3
	arm_func_end FUN_02093ca8

	arm_func_start LAB_02093cbc
LAB_02093cbc: ; 0x02093CBC
	bic r3, r5, #0x7000000
	ldr r5, _02093D70 ; =0x040001A4
	arm_func_end LAB_02093cbc

	arm_func_start LAB_02093cc4
LAB_02093cc4: ; 0x02093CC4
	orr r3, r3, #0xa1000000
	arm_func_end LAB_02093cc4

	arm_func_start LAB_02093cc8
LAB_02093cc8: ; 0x02093CC8
	rsb ip, r4, #0
	arm_func_end LAB_02093cc8
_02093CCC:
	ldr r4, [r5]

	arm_func_start LAB_02093cd0
LAB_02093cd0: ; 0x02093CD0
	tst r4, #0x80000000
	arm_func_end LAB_02093cd0

	arm_func_start LAB_02093cd4
LAB_02093cd4: ; 0x02093CD4
	bne _02093CCC
	arm_func_end LAB_02093cd4

	arm_func_start LAB_02093cd8
LAB_02093cd8: ; 0x02093CD8
	ldr r7, _02093D74 ; =0x040001A1
	arm_func_end LAB_02093cd8

	arm_func_start LAB_02093cdc
LAB_02093cdc: ; 0x02093CDC
	mov r4, #0x80
	arm_func_end LAB_02093cdc

	arm_func_start LAB_02093ce0
LAB_02093ce0: ; 0x02093CE0
	strb r4, [r7]
	arm_func_end LAB_02093ce0

	arm_func_start LAB_02093ce4
LAB_02093ce4: ; 0x02093CE4
	cmp ip, r2
	arm_func_end LAB_02093ce4

	arm_func_start LAB_02093ce8
LAB_02093ce8: ; 0x02093CE8
	add r0, r0, ip
	arm_func_end LAB_02093ce8

	arm_func_start LAB_02093cec
LAB_02093cec: ; 0x02093CEC
	popge {r4, r5, r6, r7, r8, pc}
	arm_func_end LAB_02093cec

	arm_func_start LAB_02093cf0
LAB_02093cf0: ; 0x02093CF0
	ldr r4, _02093D78 ; =0x04100010
	arm_func_end LAB_02093cf0

	arm_func_start LAB_02093cf4
LAB_02093cf4: ; 0x02093CF4
	mov r6, #0xb7
	arm_func_end LAB_02093cf4

	arm_func_start LAB_02093cf8
LAB_02093cf8: ; 0x02093CF8
	mov r5, #0
	arm_func_end LAB_02093cf8
_02093CFC:
	strb r6, [r7, #7]

	arm_func_start LAB_02093d00
LAB_02093d00: ; 0x02093D00
	lsr lr, r0, #0x18
	arm_func_end LAB_02093d00

	arm_func_start LAB_02093d04
LAB_02093d04: ; 0x02093D04
	strb lr, [r7, #8]
	lsr lr, r0, #0x10
	strb lr, [r7, #9]
	lsr lr, r0, #8
	strb lr, [r7, #0xa]
	arm_func_end LAB_02093d04

	arm_func_start LAB_02093d18
LAB_02093d18: ; 0x02093D18
	strb r0, [r7, #0xb]
	arm_func_end LAB_02093d18

	arm_func_start LAB_02093d1c
LAB_02093d1c: ; 0x02093D1C
	strb r5, [r7, #0xc]
	arm_func_end LAB_02093d1c

	arm_func_start LAB_02093d20
LAB_02093d20: ; 0x02093D20
	strb r5, [r7, #0xd]
	arm_func_end LAB_02093d20

	arm_func_start LAB_02093d24
LAB_02093d24: ; 0x02093D24
	strb r5, [r7, #0xe]
	str r3, [r7, #3]
	arm_func_end LAB_02093d24
_02093D2C:
	ldr r8, [r7, #3]

	arm_func_start LAB_02093d30
LAB_02093d30: ; 0x02093D30
	tst r8, #0x800000
	arm_func_end LAB_02093d30

	arm_func_start LAB_02093d34
LAB_02093d34: ; 0x02093D34
	beq _02093D50
	arm_func_end LAB_02093d34

	arm_func_start LAB_02093d38
LAB_02093d38: ; 0x02093D38
	cmp ip, #0
	ldr lr, [r4]
	blt _02093D4C
	arm_func_end LAB_02093d38

	arm_func_start LAB_02093d44
LAB_02093d44: ; 0x02093D44
	cmp ip, r2
	arm_func_end LAB_02093d44

	arm_func_start LAB_02093d48
LAB_02093d48: ; 0x02093D48
	strlt lr, [r1, ip]
	arm_func_end LAB_02093d48
_02093D4C:
	add ip, ip, #4
_02093D50:
	tst r8, #0x80000000

	arm_func_start LAB_02093d54
LAB_02093d54: ; 0x02093D54
	bne _02093D2C
	arm_func_end LAB_02093d54

	arm_func_start LAB_02093d58
LAB_02093d58: ; 0x02093D58
	cmp ip, r2
	arm_func_end LAB_02093d58

	arm_func_start LAB_02093d5c
LAB_02093d5c: ; 0x02093D5C
	add r0, r0, #0x200
	arm_func_end LAB_02093d5c

	arm_func_start LAB_02093d60
LAB_02093d60: ; 0x02093D60
	blt _02093CFC
	arm_func_end LAB_02093d60

	arm_func_start LAB_02093d64
LAB_02093d64: ; 0x02093D64
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_02093D68: .word 0x02FFFE60
_02093D6C: .word 0x000001FF
_02093D70: .word 0x040001A4
_02093D74: .word 0x040001A1
_02093D78: .word 0x04100010
	arm_func_end LAB_02093d64

	arm_func_start FUN_02093d7c
FUN_02093d7c: ; 0x02093D7C
	push {r3, r4, r5, r6, r7, r8, sb, lr}
	arm_func_end FUN_02093d7c

	arm_func_start LAB_02093d80
LAB_02093d80: ; 0x02093D80
	ldr r7, [sp, #0x20]
	arm_func_end LAB_02093d80

	arm_func_start LAB_02093d84
LAB_02093d84: ; 0x02093D84
	mov r4, r0
	arm_func_end LAB_02093d84

	arm_func_start LAB_02093d88
LAB_02093d88: ; 0x02093D88
	mov sb, r1
	arm_func_end LAB_02093d88

	arm_func_start LAB_02093d8c
LAB_02093d8c: ; 0x02093D8C
	mov r8, r2
	arm_func_end LAB_02093d8c

	arm_func_start LAB_02093d90
LAB_02093d90: ; 0x02093D90
	mov r6, r3
	arm_func_end LAB_02093d90

	arm_func_start LAB_02093d94
LAB_02093d94: ; 0x02093D94
	ands r5, r7, #1
	arm_func_end LAB_02093d94

	arm_func_start LAB_02093d98
LAB_02093d98: ; 0x02093D98
	bne _02093DA0
	arm_func_end LAB_02093d98

	arm_func_start LAB_02093d9c
LAB_02093d9c: ; 0x02093D9C
	bl FUN_0209F6C8
	arm_func_end LAB_02093d9c
_02093DA0:
	mov r1, #0xc

	arm_func_start LAB_02093da4
LAB_02093da4: ; 0x02093DA4
	mul r1, r4, r1
	arm_func_end LAB_02093da4

	arm_func_start LAB_02093da8
LAB_02093da8: ; 0x02093DA8
	add r1, r1, #0xb0
	arm_func_end LAB_02093da8

	arm_func_start LAB_02093dac
LAB_02093dac: ; 0x02093DAC
	tst r7, #0x10
	arm_func_end LAB_02093dac

	arm_func_start LAB_02093db0
LAB_02093db0: ; 0x02093DB0
	add r1, r1, #0x4000000
	arm_func_end LAB_02093db0

	arm_func_start LAB_02093db4
LAB_02093db4: ; 0x02093DB4
	beq _02093DD0
	arm_func_end LAB_02093db4

	arm_func_start LAB_02093db8
LAB_02093db8: ; 0x02093DB8
	lsl r2, r4, #2
	arm_func_end LAB_02093db8

	arm_func_start LAB_02093dbc
LAB_02093dbc: ; 0x02093DBC
	add r3, r2, #0x4000000
	arm_func_end LAB_02093dbc

	arm_func_start LAB_02093dc0
LAB_02093dc0: ; 0x02093DC0
	add r2, r2, #0xe0
	arm_func_end LAB_02093dc0

	arm_func_start LAB_02093dc4
LAB_02093dc4: ; 0x02093DC4
	str sb, [r3, #0xe0]
	arm_func_end LAB_02093dc4

	arm_func_start LAB_02093dc8
LAB_02093dc8: ; 0x02093DC8
	add sb, r2, #0x4000000
	arm_func_end LAB_02093dc8

	arm_func_start LAB_02093dcc
LAB_02093dcc: ; 0x02093DCC
	b _02093DE8
	arm_func_end LAB_02093dcc
_02093DD0:
	tst r7, #0x20
	lslne r2, r4, #2
	addne r3, r2, #0x4000000
	addne r2, r2, #0xe0
	strhne sb, [r3, #0xe0]

	arm_func_start LAB_02093de4
LAB_02093de4: ; 0x02093DE4
	addne sb, r2, #0x4000000
	arm_func_end LAB_02093de4
_02093DE8:
	str sb, [r1]

	arm_func_start LAB_02093dec
LAB_02093dec: ; 0x02093DEC
	str r8, [r1, #4]
	arm_func_end LAB_02093dec

	arm_func_start LAB_02093df0
LAB_02093df0: ; 0x02093DF0
	str r6, [r1, #8]
	arm_func_end LAB_02093df0

	arm_func_start LAB_02093df4
LAB_02093df4: ; 0x02093DF4
	ands r6, r7, #2
	arm_func_end LAB_02093df4

	arm_func_start LAB_02093df8
LAB_02093df8: ; 0x02093DF8
	beq _02093E24
	arm_func_end LAB_02093df8

	arm_func_start LAB_02093dfc
LAB_02093dfc: ; 0x02093DFC
	ldr r3, _02093E44 ; =0x040000B0
	arm_func_end LAB_02093dfc

	arm_func_start LAB_02093e00
LAB_02093e00: ; 0x02093E00
	tst r7, #4
	arm_func_end LAB_02093e00

	arm_func_start LAB_02093e04
LAB_02093e04: ; 0x02093E04
	ldr r2, [r3]
	cmpeq r4, #0
	ldr r2, [r3]
	moveq r3, #0
	streq r3, [r1]
	ldreq r2, _02093E48 ; =0x81400001
	streq r3, [r1, #4]
	streq r2, [r1, #8]
	arm_func_end LAB_02093e04
_02093E24:
	cmp r5, #0
	bne _02093E30
	bl FUN_0209F6DC
_02093E30:
	cmp r6, #0
	ldrne r1, _02093E44 ; =0x040000B0
	ldrne r0, [r1]
	ldrne r0, [r1]

	arm_func_start LAB_02093e40
LAB_02093e40: ; 0x02093E40
	pop {r3, r4, r5, r6, r7, r8, sb, pc}
	.align 2, 0_02093E44: .word 0x040000B0
_02093E48: .word 0x81400001
	arm_func_end LAB_02093e40

	arm_func_start FUN_02093e4c
FUN_02093e4c: ; 0x02093E4C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	mov sb, r1
	mov sl, r0
	mov r8, r2
	bl FUN_020DBCA8
	mov r4, r0
	mov r0, sb
	bl FUN_020DBCA8
	mov r5, r0
	cmp r8, #0
	beq _02093E88
	mov r0, r8
	mov r1, #0
	mov r2, #8
	bl FUN_020A32A8
	arm_func_end FUN_02093e4c
_02093E88:
	ldr r0, _02094070 ; =0x00007FFF
	and r1, r4, r0
	and r0, r5, r0
	cmp r1, r0
	moveq r0, #0
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	cmp r8, #0
	moveq r0, #1
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	asr r0, r4, #4
	lsl r4, r0, #1
	add r1, r4, #1
	asr r0, r5, #4
	lsl r2, r0, #1
	add r0, r2, #1
	ldr r3, _02094074 ; =0x02087874
	lsl r1, r1, #1
	ldrsh r6, [r3, r1]
	lsl r4, r4, #1
	lsl r1, r2, #1
	lsl r0, r0, #1
	cmp r6, #0
	ldrsh r5, [r3, r4]
	ldrsh r4, [r3, r1]
	ldrsh r7, [r3, r0]
	beq _02093FA8
	smull r0, r4, r6, r4
	adds ip, r0, #0x800
	ldr r3, [sb]
	ldr r1, [sb, #4]
	ldr r0, [sl, #4]
	adc sb, r4, #0
	lsr r4, ip, #0xc
	orr r4, r4, sb, lsl #20
	ldr r2, [sl]
	sub r0, r1, r0
	sub r1, r3, r2
	smull r1, r2, r4, r1
	adds r3, r1, #0x800
	smull r1, r0, r7, r0
	adc r2, r2, #0
	adds r1, r1, #0x800
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	smull r1, r0, r6, r1
	adds r1, r1, #0x800
	lsr r3, r3, #0xc
	smull ip, sb, r7, r5
	adc r0, r0, #0
	adds r7, ip, #0x800
	lsr ip, r1, #0xc
	adc r1, sb, #0
	lsr r7, r7, #0xc
	orr r7, r7, r1, lsl #20
	orr r3, r3, r2, lsl #20
	orr ip, ip, r0, lsl #20
	sub r0, r3, ip
	sub r1, r4, r7
	bl FUN_020A4EAC
	mov r4, r0
	smull r1, r0, r4, r5
	adds r1, r1, #0x800
	adc r2, r0, #0
	lsr r0, r1, #0xc
	mov r1, r6
	orr r0, r0, r2, lsl #20
	bl FUN_020A4EAC
	ldr r2, [sl]
	ldr r1, [sl, #4]
	add r2, r4, r2
	b _0209405C
_02093FA8:
	smull r0, r5, r7, r5
	adds ip, r0, #0x800
	ldr r3, [sl]
	ldr r1, [sl, #4]
	ldr r0, [sb, #4]
	adc sl, r5, #0
	lsr r5, ip, #0xc
	orr r5, r5, sl, lsl #20
	ldr r2, [sb]
	sub r0, r1, r0
	sub r1, r3, r2
	smull r1, r2, r5, r1
	adds r3, r1, #0x800
	smull r1, r0, r6, r0
	adc r2, r2, #0
	adds r1, r1, #0x800
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	smull r1, r0, r7, r1
	adds r1, r1, #0x800
	lsr r3, r3, #0xc
	smull ip, sl, r6, r4
	adc r0, r0, #0
	adds r6, ip, #0x800
	lsr ip, r1, #0xc
	adc r1, sl, #0
	lsr r6, r6, #0xc
	orr r6, r6, r1, lsl #20
	orr r3, r3, r2, lsl #20
	orr ip, ip, r0, lsl #20
	sub r0, r3, ip
	sub r1, r5, r6
	bl FUN_020A4EAC
	mov r5, r0
	smull r1, r0, r5, r4
	adds r1, r1, #0x800
	adc r2, r0, #0
	lsr r0, r1, #0xc
	mov r1, r7
	orr r0, r0, r2, lsl #20
	bl FUN_020A4EAC
	ldr r2, [sb]
	ldr r1, [sb, #4]
	add r2, r5, r2
_0209405C:
	add r0, r0, r1
	str r0, [r8, #4]
	str r2, [r8]
	mov r0, #1
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	.align 2, 0_02094070: .word 0x00007FFF
_02094074: .word 0x02087874

	arm_func_start FUN_02094078
FUN_02094078: ; 0x02094078
	push {r4, r5, r6, lr}
	mov r6, r0
	mov r5, r2
	bl FUN_021D2EF4
	mov r4, r0
	mov r0, r6
	bl FUN_021DEE18
	cmp r0, #0
	popne {r4, r5, r6, pc}
	mov r0, r5
	bl FUN_020DBA58
	mov r1, r0
	mov r0, r6
	bl FUN_021DF5F0
	cmp r0, #1
	bne _020940E0
	mov r0, #1
	bl FUN_020DBA90
	ldr r2, [r0]
	ldr r1, [r0, #8]
	add r1, r2, r1
	asr r1, r1, #1
	str r1, [r4]
	ldr r0, [r0, #0xc]
	arm_func_end FUN_02094078

	arm_func_start LAB_020940d8
LAB_020940d8: ; 0x020940D8
	sub r0, r0, #1
	b _02094104
	arm_func_end LAB_020940d8
_020940E0:
	mov r0, #0
	bl FUN_020DBA90
	ldr r2, [r0]
	ldr r1, [r0, #8]
	add r1, r2, r1
	asr r1, r1, #1
	str r1, [r4]
	ldr r0, [r0, #4]
	add r0, r0, #1
_02094104:
	str r0, [r4, #4]
	ldrb r0, [r4, #0x10]
	orr r0, r0, #0x10
	strb r0, [r4, #0x10]
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02094118
FUN_02094118: ; 0x02094118
	push {r4, r5, r6, lr}
	mov r4, r0
	ldr r0, _0209426C ; =0x0209BA20
	bl FUN_0210EAAC
	add r1, r4, #0x300
	mov r5, r0
	ldrsb r0, [r1, #0x32]
	bl FUN_0218B3A0
	movs r6, r0
	mvneq r0, #0
	strbeq r0, [r4, #0x332]
	popeq {r4, r5, r6, pc}
	mov r0, r5
	bl FUN_0210F760
	cmp r0, #0
	mov r0, r4
	bne _02094164
	bl FUN_021E0C74
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02094118
_02094164:
	bl FUN_021E00E8
	cmp r0, #0
	popne {r4, r5, r6, pc}
	mov r0, r4
	bl FUN_021DEE18
	cmp r0, #0
	popne {r4, r5, r6, pc}
	ldr r0, _02094270 ; =0x0209A2C0
	ldrb r0, [r0, #0x5b]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _020941C8
	mov r0, r4
	bl FUN_021E0C94
	cmp r0, #1
	beq _020941BC
	mov r0, r4
	bl FUN_021E0C94
	cmp r0, #3
	bne _020941C8
_020941BC:
	mov r0, r4
	bl FUN_021E0C74
	pop {r4, r5, r6, pc}
_020941C8:
	mov r0, r4
	bl FUN_021E00A0
	cmp r0, #0
	beq _020941EC
	cmp r6, #0
	popeq {r4, r5, r6, pc}
	mov r0, r4
	bl FUN_021E0C74
	pop {r4, r5, r6, pc}
_020941EC:
	ldr r0, [r4, #0x340]
	cmp r0, #3
	bne _02094204
	mov r0, r4
	mov r1, #4
	b _0209421C
_02094204:
	cmp r0, #2
	mov r0, r4
	bne _02094218
	mov r1, #2
	b _0209421C
_02094218:
	mov r1, #3
_0209421C:
	bl FUN_021E00AC
	mov r0, r4
	mov r1, #7
	bl FUN_021E00F0
	mov r0, r6
	bl FUN_020DBA68
	mov r1, r0
	mov r0, r4
	bl FUN_021E0098
	mov r5, #4
	ldr r2, _02094274 ; =0x00010008
	mov r0, r4
	mov r1, r5
	str r5, [r4, #0x1c0]
	str r2, [r4, #0x1bc]
	bl FUN_021EB6C0
	sub r0, r5, #5
	strb r0, [r4, #0x332]
	strb r0, [r4, #0x333]
	pop {r4, r5, r6, pc}
	.align 2, 0_0209426C: .word 0x0209BA20
_02094270: .word 0x0209A2C0
_02094274: .word 0x00010008

	arm_func_start FUN_02094278
FUN_02094278: ; 0x02094278
	push {r4, r5, r6, lr}
	mov r6, r0
	bl FUN_021E00A0
	cmp r0, #0
	popne {r4, r5, r6, pc}
	ldr r5, _020942D8 ; =0x0209A2C0
	mov r4, #1
	mov r0, r6
	mov r1, r5
	mov r2, r4
	bl FUN_021C8F28
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	ldr r1, _020942DC ; =0x0209A2E8
	mov r0, r6
	mov r2, r5
	mov r3, #0
	bl FUN_021E7954
	cmp r0, #0
	popeq {r4, r5, r6, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_021CB514
	pop {r4, r5, r6, pc}
	.align 2, 0_020942D8: .word 0x0209A2C0
_020942DC: .word 0x0209A2E8
	arm_func_end FUN_02094278

	arm_func_start FUN_020942e0
FUN_020942e0: ; 0x020942E0
	push {r3, r4, r5, r6, r7, lr}
	mov r6, #1
	mov r4, r0
	mov r1, r6
	ldr r5, _02094508 ; =0x0209A2C0
	bl FUN_021EB6C0
	mov r0, r4
	mov r1, r6
	bl FUN_021E3584
	mov r0, r4
	bl FUN_021E37BC
	mov r0, r4
	bl FUN_02094e98
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	bl FUN_021E00E8
	cmp r0, #7
	bne _0209435C
	add r0, r4, #0x74
	bl FUN_020DC3A0
	cmp r0, #0
	ldrne r0, [r5, #0x28]
	add r1, r4, #0x74
	strne r0, [r4, #0x74]
	ldrne r0, [r5, #0x2c]
	mov r2, #0x1000
	strne r0, [r4, #0x78]
	mov r0, r4
	bl FUN_021DAF64
	pop {r3, r4, r5, r6, r7, pc}
	arm_func_end FUN_020942e0
_0209435C:
	mov r0, r4
	bl FUN_021E00E8
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, [r5, #0x48]
	ldr r7, [r5, #0x2c]
	cmp r0, #0
	ldrlt r0, [r5, #0x4c]
	bl FUN_0218B3A0
	mov r6, r0
	mov r0, r4
	bl FUN_021E00A0
	cmp r0, #0
	bne _020943DC
	cmp r6, #0
	beq _020943D0
	mov r0, r6
	bl FUN_020DBA68
	mov r1, r0
	mov r0, r4
	bl FUN_021E0098
	mov r0, r4
	bl FUN_021E086C
	cmp r0, #0
	beq _020943DC
	mov r0, r4
	mov r1, #2
	bl FUN_021D26A4
	pop {r3, r4, r5, r6, r7, pc}
_020943D0:
	mov r0, r4
	mov r1, #0
	bl FUN_021E0098
_020943DC:
	ldr r0, _0209450C ; =0x0209A720
	ldr r1, [r0, #0xe0]
	cmp r7, r1
	movle r7, #0
	ble _0209444C
	ldr r0, [r0, #0xe8]
	cmp r7, r0
	movge r7, #1
	bge _0209444C
	ldr r0, _02094510 ; =0x0209BA20
	bl FUN_0210EAC4
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	mov r0, r4
	mov r1, #5
	bl FUN_021E00AC
	mov r0, r4
	mov r1, #2
	bl FUN_021E00F0
	ldrb r1, [r5, #0x58]
	mov r0, r4
	bl FUN_021C8DD4
	cmp r0, #0
	movne r1, #3
	movne r0, #7
	strne r1, [r4, #0x1c0]
	strne r0, [r4, #0x1bc]
	pop {r3, r4, r5, r6, r7, pc}
_0209444C:
	mov r0, r4
	bl FUN_021E00A0
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldr r0, _02094510 ; =0x0209BA20
	bl FUN_0210EAC4
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	cmp r6, #0
	beq _02094484
	mov r0, r6
	bl FUN_0218C0F0
	cmp r7, r0
	bne _020944C0
_02094484:
	mov r0, r4
	mov r1, #6
	bl FUN_021E00AC
	mov r6, #3
	mov r0, r4
	mov r1, r6
	bl FUN_021E00F0
	ldrb r1, [r5, #0x58]
	mov r0, r4
	bl FUN_021C8DD4
	cmp r0, #0
	movne r0, #7
	strne r6, [r4, #0x1c0]
	strne r0, [r4, #0x1bc]
	pop {r3, r4, r5, r6, r7, pc}
_020944C0:
	mov r6, #7
	mov r0, r4
	mov r1, r6
	bl FUN_021E00AC
	mov r0, r4
	mov r1, #4
	bl FUN_021E00F0
	ldrb r1, [r5, #0x59]
	mov r0, r4
	bl FUN_021C8DD4
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	ldrb r0, [r5, #0x58]
	cmp r0, #0x10
	moveq r0, #3
	streq r0, [r4, #0x1c0]
	streq r6, [r4, #0x1bc]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02094508: .word 0x0209A2C0
_0209450C: .word 0x0209A720
_02094510: .word 0x0209BA20

	arm_func_start FUN_02094514
FUN_02094514: ; 0x02094514
	push {r3, lr}
	sub sp, sp, #8
	ldr r3, [r1, #0x4c]
	ldrb r1, [r1, #0x5e]
	cmp r2, r3
	addne sp, sp, #8
	popne {r3, pc}
	sub r1, r1, #1
	cmp r1, #6
	addhi sp, sp, #8
	pophi {r3, pc}
	mov ip, #1
	mov r1, r2
	str ip, [sp]
	sub r2, ip, #2
	mov r3, #4
	str ip, [sp, #4]
	bl FUN_021EAED0
	add sp, sp, #8
	pop {r3, pc}
	arm_func_end FUN_02094514

	arm_func_start FUN_02094564
FUN_02094564: ; 0x02094564
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x28
	mov r5, #0
	str r2, [sp, #8]
	mov sb, r1
	mov sl, r0
	ldr r4, _02094C94 ; =0x0209A2C0
	str r3, [sp, #0xc]
	mov r1, r5
	str r1, [sp, #0x10]
	str r5, [sp, #0x24]
	mov r0, sb
	ldr r5, [r4, #0x4c]
	bl FUN_0218B3A0
	movs r6, r0
	addeq sp, sp, #0x28
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, r5
	bl FUN_0218B3A0
	mov fp, r0
	mov r0, sl
	bl FUN_021E00A0
	str r0, [sp, #0x20]
	mov r1, r4
	mov r0, sl
	mov r2, sb
	bl FUN_02094514
	ldr r8, [sp, #0x24]
	cmp fp, #0
	mov r4, r8
	mov r7, r8
	beq _020945F8
	mov r0, fp
	mov r1, r6
	bl FUN_0218C048
	cmp r0, #0
	movne r7, #1
	arm_func_end FUN_02094564
_020945F8:
	cmp r7, #0
	beq _02094618
	ldr r1, _02094C94 ; =0x0209A2C0
	mov r0, sl
	ldrb r1, [r1, #0x58]
	bl FUN_021C8E20
	cmp r0, #0
	moveq r4, #1
_02094618:
	cmp r4, #0
	beq _02094638
	ldr r1, _02094C94 ; =0x0209A2C0
	mov r0, sl
	ldrb r1, [r1, #0x58]
	bl FUN_021C8DFC
	cmp r0, #0
	moveq r8, #1
_02094638:
	mov r1, #1
	cmp r8, #0
	moveq r1, #0
	ldr r0, _02094C94 ; =0x0209A2C0
	strb r1, [sl, #0x367]
	ldrb r1, [r0, #0x58]
	mov r0, sl
	bl FUN_021C8DD4
	cmp r0, #0
	ldr r0, _02094C94 ; =0x0209A2C0
	mov r8, #1
	ldrb r0, [r0, #0x5b]
	moveq r8, #0
	ldr r1, _02094C94 ; =0x0209A2C0
	tst r0, #1
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	movne r0, #1
	strne r0, [sp, #0x1c]
	moveq r0, #0
	streq r0, [sp, #0x1c]
	ldr r0, _02094C94 ; =0x0209A2C0
	ldrb r0, [r0, #0x5f]
	tst r0, #8
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	movne r0, #1
	strne r0, [sp, #0x18]
	moveq r0, #0
	streq r0, [sp, #0x18]
	ldrb r1, [r1, #0x58]
	mov r0, sl
	bl FUN_021C8E20
	cmp r0, #0
	movne r0, #1
	strne r0, [sp, #0x14]
	moveq r0, #0
	streq r0, [sp, #0x14]
	ldr r0, _02094C94 ; =0x0209A2C0
	ldrb r0, [r0, #0x5f]
	tst r0, #2
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	bne _02094710
	ldr r0, _02094C94 ; =0x0209A2C0
	ldrb r0, [r0, #0x5f]
	tst r0, #4
	movne r0, #1
	moveq r0, #0
	cmp r0, #0
	beq _02094718
_02094710:
	mov r0, #1
	strb r0, [sp, #0x50]
_02094718:
	ldr r4, _02094C94 ; =0x0209A2C0
	mov r1, sb
	mov r0, r4
	bl FUN_021CB5C8
	cmp r0, #0
	beq _0209473C
	mov r0, r4
	mov r1, #1
	bl FUN_021CB550
_0209473C:
	lsl r0, sb, #0x18
	asr r1, r0, #0x18
	ldr r0, _02094C94 ; =0x0209A2C0
	cmp sb, #0
	str r1, [r0, #0x48]
	mvnge r1, #0
	strge r1, [r0, #0x4c]
	ldr r7, _02094C94 ; =0x0209A2C0
	mov r0, #0x80000000
	str r0, [r7, #0x18]
	str r0, [r7, #0x1c]
	ldrb r2, [r7, #0x58]
	mov r4, #0
	mov r0, r7
	strb r2, [r7, #0x59]
	mov r1, r4
	strb r4, [r7, #0x58]
	bl FUN_021CB608
	strb r4, [r7, #0x5c]
	strb r4, [r7, #0x5e]
	strb r4, [r7, #0x5f]
	mov r0, sl
	mov r1, sb
	strh r4, [r7, #0x54]
	bl FUN_020975d0
	cmp r0, #0
	beq _020947BC
	mov r0, r6
	bl FUN_02108F10
	mov r1, r0
	mov r0, sl
	bl FUN_021ECCF4
_020947BC:
	ldr r0, _02094C98 ; =0x020A0640
	ldrb r0, [r0, #0x1a]
	cmp r0, #0
	bne _020947F0
	mov r0, r6
	bl FUN_020DBA68
	mov r1, r0
	mov r0, sl
	bl FUN_021E011C
	cmp r0, #0
	beq _02094838
	bl FUN_020DBDEC
	b _02094838
_020947F0:
	mov r7, #0
	b _02094830
_020947F8:
	mov r0, r6
	bl FUN_02108F10
	mov r4, r0
	mov r0, r7
	bl FUN_0218C17C
	cmp r4, r0
	beq _0209482C
	mov r0, sl
	mov r1, r7
	bl FUN_021E0128
	cmp r0, #0
	beq _0209482C
	bl FUN_020DBDEC
_0209482C:
	add r7, r7, #1
_02094830:
	cmp r7, #5
	blt _020947F8
_02094838:
	cmp fp, #0
	cmpne r6, #0
	beq _02094924
	mov r0, r6
	bl FUN_02108FD0
	cmp r0, #0
	beq _02094924
	bl FUN_0218BF8C
	cmp r0, #0
	bne _02094924
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	cmpeq r8, #0
	ldreq r0, [sp, #0x14]
	cmpeq r0, #0
	ldrbeq r0, [sp, #0x50]
	cmpeq r0, #0
	bne _0209488C
	ldr r0, [sp, #0xc]
	cmp r0, #0
	bne _020948B4
_0209488C:
	mov r0, sl
	mov r4, #0
	mov r1, r4
	mov r2, r4
	bl FUN_021ED878
	mov r2, r4
	mov r0, sl
	mov r1, #1
	bl FUN_021ED878
	b _02094924
_020948B4:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bne _020948E8
	mov r0, fp
	mov r1, r6
	bl FUN_0218C048
	cmp r0, #0
	beq _020948E8
	mov r0, sl
	mov r1, #0
	mov r2, r6
	bl FUN_021EACEC
	b _02094924
_020948E8:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	beq _02094924
	cmp sb, r5
	bne _02094924
	mov r0, sl
	mov r1, #1
	mov r2, r6
	bl FUN_021EACEC
	mov r0, r6
	bl FUN_020DBA68
	mov r1, r0
	mov r0, sl
	mov r2, #0
	bl FUN_021ED878
_02094924:
	cmp fp, #0
	cmpne r6, #0
	beq _020949D4
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	cmpeq r8, #0
	ldreq r0, [sp, #0x14]
	cmpeq r0, #0
	ldrbeq r0, [sp, #0x50]
	cmpeq r0, #0
	bne _0209495C
	ldr r0, [sp, #0xc]
	cmp r0, #0
	bne _02094960
_0209495C:
	b _020949C8
_02094960:
	cmp sb, r5
	beq _020949D4
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bne _020949BC
	mov r0, fp
	mov r1, r6
	bl FUN_0218C048
	cmp r0, #0
	beq _020949BC
	mov r0, r6
	bl FUN_02108F10
	add r0, sl, r0
	ldrb r0, [r0, #0x364]
	cmp r0, #0x80
	bhs _020949D4
	mov r0, r6
	bl FUN_02108F10
	add r2, sl, #0x364
	ldrb r1, [r2, r0]
	add r1, r1, #1
	strb r1, [r2, r0]
	b _020949D4
_020949BC:
	mov r0, sl
	mov r1, r6
	bl FUN_021EE5C8
_020949C8:
	mov r0, #0
	strb r0, [sl, #0x364]
	strb r0, [sl, #0x365]
_020949D4:
	ldr r0, [sp, #8]
	cmp r0, #0
	beq _02094BEC
	ldr r0, [sp, #0x20]
	cmp r0, #0
	bne _02094BEC
	cmp r8, #0
	beq _02094A5C
	cmp r5, #0
	blt _02094A5C
	mov r0, sl
	bl FUN_021D2EF4
	str r0, [sp, #0x24]
	mov r0, sl
	mov r1, r6
	bl FUN_021D47A0
	cmp r0, #0
	beq _02094A44
	mov r0, r5
	mov r1, sb
	bl FUN_0218BFF8
	cmp r0, #0
	bne _02094A44
	mov r0, sl
	ldr r1, [sp, #0x24]
	mov r2, #2
	mov r3, #0
	b _02094A54
_02094A44:
	ldr r1, [sp, #0x24]
	mov r0, sl
	mov r2, #0
	mov r3, #4
_02094A54:
	bl FUN_021D2DC8
	str r0, [sp, #0x24]
_02094A5C:
	mov r0, sl
	mov r1, r6
	bl FUN_021D47A0
	cmp r0, #0
	beq _02094B44
	mov r0, sl
	mov r1, r6
	bl FUN_021D47E0
	cmp r0, #0
	beq _02094B14
	mov r0, r6
	bl FUN_02108FE4
	cmp r0, #0
	beq _02094AB4
	mov r3, #0
	mov r0, sl
	mov r1, r6
	str r3, [sp]
	mov r2, #1
	str r2, [sp, #4]
	mov r2, #0x3c
	bl FUN_021D7BBC
_02094AB4:
	cmn r5, #1
	ble _02094B14
	ldr r0, _02094C94 ; =0x0209A2C0
	mov r1, r5
	ldr r0, [r0, #0x48]
	bl FUN_0218BFF8
	cmp r0, #0
	bne _02094B14
	ldr r1, [r6, #0x84]
	mov r0, r6
	ldrb r4, [r1, #0x1a]
	bl FUN_02109398
	mov r1, #0
	str r1, [sp, #0x10]
	mov r1, r1
	stm sp, {r1, r8}
	mov r2, r0
	mov r3, r4
	mov r0, sl
	mov r1, r6
	bl FUN_021E5B90
	cmp r0, #0
	movne r0, #1
	strne r0, [sp, #0x10]
_02094B14:
	ldr r0, [sp, #0x10]
	mov r2, #0
	cmp r0, #0
	bne _02094B44
	ldr r0, [r6, #0x84]
	mov r1, r6
	ldrb r3, [r0, #0x1a]
	ldr r0, _02094C9C ; =0x02099F14
	str r2, [sp]
	ldr r0, [r0]
	mov r2, #8
	bl FUN_0217F534
_02094B44:
	cmp r8, #0
	beq _02094BA8
	ldr r0, [sp, #0x10]
	cmp r0, #0
	bne _02094BA8
	ldr r0, [sp, #0x24]
	cmp r0, #0
	beq _02094BA8
	mov r0, fp
	mov r1, r6
	bl FUN_0218C048
	cmp r0, #0
	bne _02094BA8
	mov r0, sl
	mov r1, r6
	bl FUN_021D47A0
	cmp r0, #0
	beq _02094BA8
	mov r0, sl
	mov r1, #0xd
	bl FUN_021E00F0
	mov r1, #2
	mov r0, #7
	str r1, [sl, #0x1c0]
	str r0, [sl, #0x1bc]
_02094BA8:
	mov r0, sl
	mov r1, r6
	bl FUN_021DE5E4
	cmp r0, #0
	beq _02094BC8
	mov r0, sl
	mov r1, r6
	bl FUN_021E6028
_02094BC8:
	mov r0, sl
	mov r1, r6
	bl FUN_021D47A0
	cmp r0, #0
	ldreq r0, [sp, #0x20]
	cmpeq r0, #0
	bne _02094BEC
	mov r0, #2
	bl FUN_0218BEE8
_02094BEC:
	mov r0, sb
	ldr r5, _02094C94 ; =0x0209A2C0
	mov r4, #1
	bl FUN_0218B3A0
	mov r1, r0
	ldrb r3, [sp, #0x54]
	ldr r2, [sp, #0xc]
	mov r0, sl
	bl FUN_021EB110
	ldr r0, [sp, #0x20]
	cmp r0, #5
	beq _02094C2C
	cmp r0, #7
	beq _02094C40
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02094C2C:
	mov r0, #0x1c000
	str r0, [r5, #0x30]
	str r0, [r5, #8]
	mov r2, #6
	b _02094C44
_02094C40:
	mov r2, #0
_02094C44:
	ldr r0, _02094CA0 ; =0x0209A720
	ldr r1, [r5]
	ldr r0, [r0, #0xd4]
	mov r3, #2
	cmp r1, r0
	ldr r1, [r6, #0x84]
	movge r3, #6
	ldrb r0, [r1, #0x1a]
	cmp r3, r0
	ldrbeq r0, [r1, #0x1d]
	cmpeq r2, r0
	addeq sp, sp, #0x28
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, _02094C9C ; =0x02099F14
	str r4, [sp]
	ldr r0, [r0]
	mov r1, r6
	bl FUN_0217F534
	add sp, sp, #0x28
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02094C94: .word 0x0209A2C0
_02094C98: .word 0x020A0640
_02094C9C: .word 0x02099F14
_02094CA0: .word 0x0209A720

	arm_func_start FUN_02094ca4
FUN_02094ca4: ; 0x02094CA4
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	mov r6, r1
	cmp r2, #0
	ldr r4, _02094E3C ; =0x0209A2C0
	beq _02094E00
	ldr r2, [r6, #0x84]
	ldr r0, [r4]
	ldr r1, [r2]
	mov r3, #1
	cmp r0, r1
	ldreq r1, [r2, #4]
	ldreq r0, [r4, #4]
	mov r5, #1
	cmpeq r0, r1
	moveq r3, #0
	cmp r3, #0
	mov r0, r7
	mov r1, r6
	moveq r5, #0
	bl FUN_021D5BEC
	cmp r0, #0
	beq _02094D20
	ldr r1, [r6, #0x84]
	ldr r0, [r4, #4]
	ldr r1, [r1, #4]
	subs r0, r1, r0
	rsbmi r0, r0, #0
	cmp r0, #0x4b000
	movlt r5, #0
	b _02094D54
	arm_func_end FUN_02094ca4
_02094D20:
	mov r0, r7
	mov r1, r6
	bl FUN_021D47A0
	cmp r0, #0
	beq _02094D54
	mov r0, r6
	bl FUN_0218C0F0
	mov r1, r0
	ldr r2, [r6, #0x84]
	mov r0, r7
	bl FUN_021DC470
	cmp r0, #0
	movne r5, #0
_02094D54:
	cmp r5, #0
	beq _02094D70
	ldr r0, [r6, #0x84]
	mov r1, r4
	bl FUN_020DBCC8
	mov r5, r0
	b _02094DE0
_02094D70:
	mov r0, r6
	bl FUN_0218C0F0
	cmp r0, #1
	mov r5, #0x4000
	mov r0, r7
	mov r1, r6
	movne r5, #0xc000
	bl FUN_021D5BEC
	cmp r0, #0
	beq _02094DE0
	ldr r0, [r6, #0x84]
	mov r1, r4
	bl FUN_020DBCC8
	lsl r1, r0, #0x10
	mov r0, r5
	lsr r1, r1, #0x10
	bl FUN_020DBCF4
	cmp r0, #0x1000
	addgt r0, r5, #0x1000
	lslgt r0, r0, #0x10
	lsrgt r5, r0, #0x10
	bgt _02094DE0
	mov r1, #0x1000
	rsb r1, r1, #0
	cmp r0, r1
	addlt r0, r5, #0xf000
	lsllt r0, r0, #0x10
	lsrlt r5, r0, #0x10
_02094DE0:
	ldr r1, [r6, #0x84]
	mov r0, r5
	strh r5, [r1, #0x18]
	bl FUN_0218B65C
	mov r1, r0
	mov r0, r6
	mov r2, #0
	bl FUN_02109418
_02094E00:
	ldr r0, [r6, #0x88]
	mov r2, #0
	str r2, [r0, #0x10]
	ldr r1, [r6, #0x88]
	ldr r0, _02094E40 ; =0x02099F14
	str r2, [r1, #0x14]
	ldr r3, [r6, #0x88]
	mov r1, r6
	str r2, [r3, #0x18]
	ldr r3, [r6, #0x84]
	ldrb r3, [r3, #0x1a]
	str r2, [sp]
	ldr r0, [r0]
	bl FUN_0217F534
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02094E3C: .word 0x0209A2C0
_02094E40: .word 0x02099F14

	arm_func_start FUN_02094e44
FUN_02094e44: ; 0x02094E44
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_021E00E8
	mov r4, r0
	mov r0, r5
	bl FUN_021E00A0
	mov r2, r0
	ldr r0, [r5, #0x198]
	mov r1, r4
	ldr r3, [r0]
	ldr r3, [r3, #8]
	blx r3
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, r5
	bl FUN_021EC220
	mov r0, r5
	bl FUN_021E1700
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02094e44

	arm_func_start FUN_02094e98
FUN_02094e98: ; 0x02094E98
	push {r3, r4, r5, lr}
	mov r5, r0
	bl FUN_021E00E8
	mov r4, r0
	mov r0, r5
	bl FUN_021E00A0
	cmp r0, #1
	bne _02094EC8
	sub r0, r4, #8
	cmp r0, #4
	movls r0, #1
	popls {r3, r4, r5, pc}
	arm_func_end FUN_02094e98
_02094EC8:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_02094ed0
FUN_02094ed0: ; 0x02094ED0
	push {r4, r5, r6, lr}
	mov r5, r0
	ldr r0, _02094FD0 ; =0x020AF81C
	mov r4, r1
	bl FUN_020DFF4C
	ldr r1, _02094FD4 ; =0x00001019
	cmp r0, r1
	bne _02094F0C
	ldr r0, _02094FD8 ; =0x020A0640
	ldr r3, [r0, #0xbc]
	cmp r3, #0
	ldrne r2, [r0]
	movne r1, #0
	strne r2, [r3]
	strne r1, [r0, #0xbc]
	arm_func_end FUN_02094ed0
_02094F0C:
	ldrb r0, [r5, #0x3b4]
	cmp r0, #0
	popne {r4, r5, r6, pc}
	mov r0, r5
	bl FUN_021E00A0
	cmp r0, #0
	beq _02094F30
	cmp r4, #1
	popne {r4, r5, r6, pc}
_02094F30:
	ldr r1, _02094FDC ; =0x0209C120
	mov r0, r5
	ldrh r4, [r1, #0xc0]
	bl FUN_021E4AF4
	smull r1, r0, r4, r0
	adds r2, r1, #0x800
	ldr r6, _02094FD8 ; =0x020A0640
	adc r1, r0, #0
	lsr r2, r2, #0xc
	ldr r0, [r6]
	orr r2, r2, r1, lsl #20
	add r1, r0, r2
	mov r0, r5
	str r1, [r6]
	bl FUN_021E4AF4
	smull r1, r0, r4, r0
	adds r2, r1, #0x800
	adc r1, r0, #0
	lsr r2, r2, #0xc
	ldr r0, [r6, #4]
	orr r2, r2, r1, lsl #20
	add r2, r0, r2
	mov r0, r5
	mov r1, r4
	str r2, [r6, #4]
	bl FUN_021E02C4
	mov r0, r5
	bl FUN_021E4B30
	cmp r0, #0
	beq _02094FB0
	mov r0, r5
	bl FUN_021E4B1C
_02094FB0:
	ldrb r0, [r5, #0x3b5]
	cmp r0, #0
	popne {r4, r5, r6, pc}
	ldr r0, [r5, #0x1e4]
	cmp r0, #0
	subgt r0, r0, #1
	strgt r0, [r5, #0x1e4]
	pop {r4, r5, r6, pc}
	.align 2, 0_02094FD0: .word 0x020AF81C
_02094FD4: .word 0x00001019
_02094FD8: .word 0x020A0640
_02094FDC: .word 0x0209C120

	arm_func_start FUN_02094fe0
FUN_02094fe0: ; 0x02094FE0
	push {r3, r4, r5, lr}
	mov r5, r0
	ldrb r2, [r5, #0x3b4]
	mov r4, r1
	cmp r2, #0
	popne {r3, r4, r5, pc}
	bl FUN_021E00A0
	cmp r0, #0
	cmpne r4, #1
	ldreq r0, _0209501C ; =0x0209C120
	ldreq r1, [r5, #0x5c0]
	ldrheq r0, [r0, #0xc0]
	addeq r0, r1, r0
	streq r0, [r5, #0x5c0]
	pop {r3, r4, r5, pc}
	.align 2, 0_0209501C: .word 0x0209C120
	arm_func_end FUN_02094fe0

	arm_func_start FUN_02095020
FUN_02095020: ; 0x02095020
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	mov r8, #0
	ldr fp, _02095220 ; =0x0209BA20
	mov sl, r0
	mov sb, r1
	mov r5, r8
	mov r4, r8
	arm_func_end FUN_02095020
_0209503C:
	mov r0, r8
	bl FUN_0218B3A0
	movs r6, r0
	beq _02095210
	bl FUN_02108FA8
	cmp r0, #0
	beq _02095210
	mov r0, fp
	mov r1, r6
	bl FUN_020EB440
	mov r7, r0
	cmp sb, #0
	beq _020950B0
	mov r0, r6
	bl FUN_02109318
	cmp r0, #0
	beq _020950B0
	ldr r2, [r6, #0x88]
	mov r0, r6
	ldrh r1, [r2, #0x1e]
	sub r1, r1, #1
	strh r1, [r2, #0x1e]
	bl FUN_02109318
	cmp r0, #0
	bne _020950B0
	mov r0, sl
	mov r1, r6
	mov r2, #0
	bl FUN_021EDA7C
_020950B0:
	ldr r1, [r6, #0x84]
	ldrh r0, [r1, #0x12]
	cmp r0, #0
	beq _020950F0
	sub r0, r0, #1
	strh r0, [r1, #0x12]
	ldr r1, [r6, #0x84]
	ldrh r0, [r1, #0x14]
	add r0, r0, #1
	strh r0, [r1, #0x14]
	ldr r1, [r6, #0x84]
	ldrh r0, [r1, #0x12]
	cmp r0, #0
	strbeq r5, [r1, #0x1c]
	strheq r5, [r1, #0x12]
	strheq r5, [r1, #0x14]
_020950F0:
	ldr r1, [r6, #0x88]
	ldrsh r0, [r1, #0x24]
	cmp r0, #0
	ldrshgt r0, [r1, #0x24]
	subgt r0, r0, #1
	strhgt r0, [r1, #0x24]
	ldr r1, [r6, #0x88]
	ldrsh r0, [r1, #0x26]
	cmp r0, #0
	ldrshgt r0, [r1, #0x26]
	subgt r0, r0, #1
	strhgt r0, [r1, #0x26]
	bgt _02095130
	mov r0, r6
	mov r1, #0x100
	bl FUN_021093FC
_02095130:
	ldr r1, [r6, #0x88]
	ldrb r0, [r1, #0x30]
	cmp r0, #0
	ldrbne r0, [r1, #0x30]
	subne r0, r0, #1
	strbne r0, [r1, #0x30]
	mov r0, r6
	bl FUN_02109048
	cmp r0, #0
	ldrne r1, [r6, #0x88]
	ldrshne r0, [r1, #0x22]
	subne r0, r0, #1
	strhne r0, [r1, #0x22]
	mov r0, sl
	mov r1, r6
	bl FUN_021D47A0
	cmp r0, #0
	beq _020951B4
	mov r0, r6
	bl FUN_020DC3C8
	cmp r0, #0
	beq _020951B4
	mov r0, r6
	bl FUN_02109398
	mov r1, r0
	mov r0, sl
	bl FUN_021E0C20
	cmp r0, #0
	ldrne r1, [r6, #0x88]
	ldrhne r0, [r1, #0x2a]
	addne r0, r0, #1
	strhne r0, [r1, #0x2a]
	bne _020951E4
_020951B4:
	mov r0, r6
	bl FUN_020DC3C8
	cmp r0, #0
	beq _020951E4
	mov r0, sl
	mov r1, r6
	bl FUN_02097338
	cmp r0, #0
	ldreq r1, [r6, #0x88]
	ldrheq r0, [r1, #0x2a]
	addeq r0, r0, #1
	strheq r0, [r1, #0x2a]
_020951E4:
	cmp r7, #0
	ldrbne r0, [r7, #0x1f]
	cmpne r0, #0
	beq _02095210
	ldrsh r0, [r7, #0x22]
	cmp r0, #0
	subgt r0, r0, #1
	strhgt r0, [r7, #0x22]
	strble r4, [r7, #0x1f]
	strble r4, [r7, #0x20]
	strhle r4, [r7, #0x22]
_02095210:
	add r8, r8, #1
	cmp r8, #0x20
	blt _0209503C
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02095220: .word 0x0209BA20

	arm_func_start FUN_02095224
FUN_02095224: ; 0x02095224
	push {r4, r5, r6, lr}
	ldr r0, _020952A4 ; =0x0209A720
	ldr r5, _020952A8 ; =0x0209A2C0
	ldr r2, [r0, #0xd4]
	mov r4, #1
	str r2, [r5]
	ldr r1, [r0, #0xd8]
	mov r6, #0
	str r1, [r5, #4]
	str r6, [r5, #0x30]
	strb r6, [r5, #0x58]
	mov r0, #0x80000000
	str r0, [r5, #0x18]
	str r0, [r5, #0x1c]
	str r2, [r5, #0xc]
	str r1, [r5, #0x10]
	ldr r2, [r5, #8]
	mov r0, r5
	mov r1, r4
	str r2, [r5, #0x14]
	bl FUN_021CB500
	mov r0, r5
	mov r1, r4
	bl FUN_021CB53C
	str r6, [r5, #0x34]
	str r6, [r5, #0x38]
	str r6, [r5, #0x3c]
	str r6, [r5, #0x30]
	str r6, [r5, #0x40]
	strb r6, [r5, #0x5c]
	strh r6, [r5, #0x54]
	pop {r4, r5, r6, pc}
	.align 2, 0_020952A4: .word 0x0209A720
_020952A8: .word 0x0209A2C0
	arm_func_end FUN_02095224

	arm_func_start FUN_020952ac
FUN_020952ac: ; 0x020952AC
	push {r3, r4, r5, r6, r7, lr}
	ldr r5, _02095524 ; =0x0209A720
	ldr r6, [r5, #0xd4]
	cmp r6, #0
	ldreq r2, [r5, #0xd8]
	cmpeq r2, #0
	popne {r3, r4, r5, r6, r7, pc}
	ldrsh r1, [r5, #0xa8]
	ldrsh r4, [r5, #0xaa]
	ldrsh r0, [r5, #0xb4]
	add r3, r1, r1, lsr #31
	asr r1, r3, #1
	lsl lr, r1, #0x10
	add r0, r0, lr, asr #16
	strh r0, [r5, #0xb4]
	add ip, r4, r4, lsr #31
	asr r0, ip, #1
	ldrsh r7, [r5, #0xb6]
	lsl r4, r0, #0x10
	add r6, r6, r1, lsl #12
	add r7, r7, r4, asr #16
	strh r7, [r5, #0xb6]
	ldrsh r7, [r5, #0xb8]
	add r2, r2, r0, lsl #12
	add r7, r7, lr, asr #16
	strh r7, [r5, #0xb8]
	ldrsh r7, [r5, #0xba]
	add r7, r7, r4, asr #16
	strh r7, [r5, #0xba]
	ldrsh r7, [r5, #0xbc]
	add r7, r7, lr, asr #16
	strh r7, [r5, #0xbc]
	ldrsh r7, [r5, #0xbe]
	add r7, r7, r4, asr #16
	strh r7, [r5, #0xbe]
	ldrsh r7, [r5, #0xc0]
	add r7, r7, lr, asr #16
	strh r7, [r5, #0xc0]
	ldrsh lr, [r5, #0xc2]
	add r4, lr, r4, asr #16
	strh r4, [r5, #0xc2]
	ldr r4, [r5, #0xcc]
	add r3, r4, r3, asr #1
	str r3, [r5, #0xcc]
	ldr r3, [r5, #0xd0]
	add r3, r3, ip, asr #1
	str r3, [r5, #0xd0]
	str r6, [r5, #0xd4]
	str r2, [r5, #0xd8]
	ldr r2, [r5, #0xdc]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0xdc]
	ldr r2, [r5, #0xe0]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0xe0]
	ldr r2, [r5, #0xe4]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0xe4]
	ldr r2, [r5, #0xe8]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0xe8]
	ldr r2, [r5, #0xec]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0xec]
	ldr r2, [r5, #0xf0]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0xf0]
	ldr r2, [r5, #0xf4]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0xf4]
	ldr r2, [r5, #0xf8]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0xf8]
	ldr r2, [r5, #0xfc]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0xfc]
	ldr r2, [r5, #0x100]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x100]
	ldr r2, [r5, #0x104]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x104]
	ldr r2, [r5, #0x108]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x108]
	ldr r2, [r5, #0x10c]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x10c]
	ldr r2, [r5, #0x110]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x110]
	ldr r2, [r5, #0x114]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x114]
	ldr r2, [r5, #0x118]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x118]
	ldr r2, [r5, #0x11c]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x11c]
	ldr r2, [r5, #0x120]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x120]
	ldr r2, [r5, #0x124]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x124]
	ldr r2, [r5, #0x128]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x128]
	ldr r2, [r5, #0x12c]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x12c]
	ldr r2, [r5, #0x130]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x130]
	ldr r2, [r5, #0x134]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x134]
	ldr r2, [r5, #0x138]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x138]
	ldr r2, [r5, #0x13c]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x13c]
	ldr r2, [r5, #0x140]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x140]
	ldr r2, [r5, #0x144]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x144]
	ldr r2, [r5, #0x148]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x148]
	ldr r2, [r5, #0x14c]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x14c]
	ldr r2, [r5, #0x150]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x150]
	ldr r2, [r5, #0x154]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x154]
	ldr r2, [r5, #0x158]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x158]
	ldr r2, [r5, #0x15c]
	add r2, r2, r1, lsl #12
	str r2, [r5, #0x15c]
	ldr r2, [r5, #0x160]
	add r2, r2, r0, lsl #12
	str r2, [r5, #0x160]
	ldr r2, [r5, #0x164]
	add r1, r2, r1, lsl #12
	str r1, [r5, #0x164]
	ldr r1, [r5, #0x168]
	add r0, r1, r0, lsl #12
	str r0, [r5, #0x168]
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02095524: .word 0x0209A720
	arm_func_end FUN_020952ac
_02095528:
	.byte 0x10, 0x40, 0x2D, 0xE9, 0x00, 0x40, 0xA0, 0xE1
	.byte 0x00, 0x10, 0xA0, 0xE3, 0x03, 0x00, 0x00, 0xEB, 0x04, 0x00, 0xA0, 0xE1, 0x01, 0x10, 0xA0, 0xE3
	.byte 0x00, 0x00, 0x00, 0xEB, 0x10, 0x80, 0xBD, 0xE8

	arm_func_start FUN_02095548
FUN_02095548: ; 0x02095548
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x118
	ldr r6, _02095A48 ; =0x0209BA20
	mov r4, r0
	mov r0, r6
	mov r7, r1
	bl FUN_0210EAD4
	mov r8, #0
	add r5, sp, #0x50
	str r8, [sp]
	mov r3, #0x80
	str r3, [sp, #4]
	mov r0, r6
	mov r1, r7
	mov r2, r5
	mov r3, #0x64
	bl FUN_020E6E60
	mov r6, r8
	add r7, sp, #0x10
	arm_func_end FUN_02095548
_02095594:
	lsl r0, r6, #1
	ldrh r0, [r5, r0]
	mov r1, #0
	bl FUN_0218B3BC
	movs sb, r0
	beq _020955D4
	mov r1, #0
	bl FUN_02109144
	cmp r0, #0
	beq _020955D4
	mov r0, sb
	mov r1, #0
	bl FUN_02109144
	cmp r0, #0xc
	strlt sb, [r7, r8, lsl #2]
	addlt r8, r8, #1
_020955D4:
	add r6, r6, #1
	cmp r6, #0x64
	blt _02095594
	cmp r8, #0xb
	ble _020955EC
	bl FUN_0209FA80
_020955EC:
	cmp r8, #0xb
	addlt r1, sp, #0x10
	movlt r0, #0
	strlt r0, [r1, r8, lsl #2]
	cmp r8, #0
	mov r6, #0
	ble _02095624
	add r5, sp, #0x10
_0209560C:
	ldr r1, [r5, r6, lsl #2]
	mov r0, r4
	bl FUN_021D5404
	add r6, r6, #1
	cmp r6, r8
	blt _0209560C
_02095624:
	mov r0, #0
	cmp r8, #0
	str r0, [sp, #8]
	addle sp, sp, #0x118
	pople {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02095638:
	ldr r1, [sp, #8]
	add r5, sp, #0x10
	ldr sb, [r5, r1, lsl #2]
	mov r0, r4
	mov r1, sb
	bl FUN_021D5CCC
	mov r6, r0
	mov r0, #0
	str r0, [sp, #0xc]
	mov sl, #2
	mov fp, #4
_02095664:
	ldr r1, [sp, #0xc]
	mov r0, sb
	bl FUN_02108718
	mov r7, r0
	cmp r7, #0
	ble _02095A18
	ldr r0, _02095A48 ; =0x0209BA20
	mov r1, r7
	bl FUN_020E5BE4
	cmp r0, #0
	beq _02095A18
	ldrb r0, [r0]
	cmp r0, #9
	bne _02095A18
	sub r0, r7, #0x33
	cmp r0, #0x1f

	arm_func_start switchD
switchD: ; 0x020956A4
	addls pc, pc, r0, lsl #2
	b _02095A18
	arm_func_end switchD
_020956AC: ; jump table
	b LAB_0209572c ; case 0

	arm_func_start caseD_34
caseD_34: ; 0x020956B0
	b _0209573C
	arm_func_end caseD_34

	arm_func_start caseD_35
caseD_35: ; 0x020956B4
	b _02095784
	arm_func_end caseD_35

	arm_func_start caseD_36
caseD_36: ; 0x020956B8
	b _020957CC
	arm_func_end caseD_36

	arm_func_start caseD_37
caseD_37: ; 0x020956BC
	b _02095814
	arm_func_end caseD_37

	arm_func_start caseD_38
caseD_38: ; 0x020956C0
	b _0209585C
	arm_func_end caseD_38

	arm_func_start caseD_39
caseD_39: ; 0x020956C4
	b _0209586C
	arm_func_end caseD_39

	arm_func_start caseD_3a
caseD_3a: ; 0x020956C8
	b _0209587C
	arm_func_end caseD_3a

	arm_func_start caseD_3b
caseD_3b: ; 0x020956CC
	b _0209588C
	arm_func_end caseD_3b

	arm_func_start caseD_3c
caseD_3c: ; 0x020956D0
	b _0209589C
	arm_func_end caseD_3c

	arm_func_start caseD_3d
caseD_3d: ; 0x020956D4
	b _020958AC
	arm_func_end caseD_3d

	arm_func_start caseD_3e
caseD_3e: ; 0x020956D8
	b _020958BC
	arm_func_end caseD_3e

	arm_func_start caseD_3f
caseD_3f: ; 0x020956DC
	b _020958CC
	arm_func_end caseD_3f

	arm_func_start caseD_40
caseD_40: ; 0x020956E0
	b _020958DC
	arm_func_end caseD_40

	arm_func_start caseD_41
caseD_41: ; 0x020956E4
	b _020958EC
	arm_func_end caseD_41

	arm_func_start caseD_42
caseD_42: ; 0x020956E8
	b _020958FC
	arm_func_end caseD_42

	arm_func_start caseD_43
caseD_43: ; 0x020956EC
	b _0209590C
	arm_func_end caseD_43

	arm_func_start caseD_44
caseD_44: ; 0x020956F0
	b _0209591C
	arm_func_end caseD_44

	arm_func_start caseD_45
caseD_45: ; 0x020956F4
	b _0209592C
	arm_func_end caseD_45

	arm_func_start caseD_46
caseD_46: ; 0x020956F8
	b _02095944
	arm_func_end caseD_46

	arm_func_start caseD_47
caseD_47: ; 0x020956FC
	b _02095958
	arm_func_end caseD_47

	arm_func_start caseD_48
caseD_48: ; 0x02095700
	b _0209596C
	arm_func_end caseD_48

	arm_func_start caseD_49
caseD_49: ; 0x02095704
	b _02095980
	arm_func_end caseD_49

	arm_func_start caseD_4a
caseD_4a: ; 0x02095708
	b _02095994
	arm_func_end caseD_4a

	arm_func_start caseD_4b
caseD_4b: ; 0x0209570C
	b _020959A4
	arm_func_end caseD_4b

	arm_func_start caseD_4c
caseD_4c: ; 0x02095710
	b _020959B8
	arm_func_end caseD_4c

	arm_func_start caseD_4d
caseD_4d: ; 0x02095714
	b _020959C8
	arm_func_end caseD_4d

	arm_func_start caseD_4e
caseD_4e: ; 0x02095718
	b _020959D8
	arm_func_end caseD_4e

	arm_func_start caseD_4f
caseD_4f: ; 0x0209571C
	b _020959E8
	arm_func_end caseD_4f

	arm_func_start caseD_50
caseD_50: ; 0x02095720
	b _020959F8
	arm_func_end caseD_50

	arm_func_start caseD_51
caseD_51: ; 0x02095724
	b _02095A08
	arm_func_end caseD_51

	arm_func_start caseD_52
caseD_52: ; 0x02095728
	b _02095A18
	arm_func_end caseD_52
LAB_0209572c:
	mov r0, r4
	mov r1, sb
	mov r2, #1
	b _02095A14
_0209573C:
	cmp r8, #0
	mov r7, #0
	ble _02095A18
_02095748:
	mov r0, r4
	ldr r1, [r5, r7, lsl #2]
	bl FUN_021D5CCC
	cmp r6, r0
	bne _0209576C
	mov r0, r4
	ldr r1, [r5, r7, lsl #2]
	mov r2, sl
	bl FUN_021D53C4
_0209576C:
	add r0, r7, #1
	lsl r0, r0, #0x10
	cmp r8, r0, asr #16
	asr r7, r0, #0x10
	bgt _02095748
	b _02095A18
_02095784:
	cmp r8, #0
	mov r7, #0
	ble _02095A18
_02095790:
	mov r0, r4
	ldr r1, [r5, r7, lsl #2]
	bl FUN_021D5CCC
	cmp r0, #4
	bne _020957B4
	mov r0, r4
	ldr r1, [r5, r7, lsl #2]
	mov r2, fp
	bl FUN_021D53C4
_020957B4:
	add r0, r7, #1
	lsl r0, r0, #0x10
	cmp r8, r0, asr #16
	asr r7, r0, #0x10
	bgt _02095790
	b _02095A18
_020957CC:
	cmp r8, #0
	mov r7, #0
	ble _02095A18
_020957D8:
	mov r0, r4
	ldr r1, [r5, r7, lsl #2]
	bl FUN_021D5CCC
	cmp r0, #3
	bne _020957FC
	ldr r1, [r5, r7, lsl #2]
	mov r0, r4
	mov r2, #8
	bl FUN_021D53C4
_020957FC:
	add r0, r7, #1
	lsl r0, r0, #0x10
	cmp r8, r0, asr #16
	asr r7, r0, #0x10
	bgt _020957D8
	b _02095A18
_02095814:
	cmp r8, #0
	mov r7, #0
	ble _02095A18
_02095820:
	mov r0, r4
	ldr r1, [r5, r7, lsl #2]
	bl FUN_021D5CCC
	cmp r0, #2
	bne _02095844
	ldr r1, [r5, r7, lsl #2]
	mov r0, r4
	mov r2, #0x10
	bl FUN_021D53C4
_02095844:
	add r0, r7, #1
	lsl r0, r0, #0x10
	cmp r8, r0, asr #16
	asr r7, r0, #0x10
	bgt _02095820
	b _02095A18
_0209585C:
	mov r0, r4
	mov r1, sb
	mov r2, #0x20
	b _02095A14
_0209586C:
	mov r0, r4
	mov r1, sb
	mov r2, #0x40
	b _02095A14
_0209587C:
	mov r0, r4
	mov r1, sb
	mov r2, #0x80
	b _02095A14
_0209588C:
	mov r0, r4
	mov r1, sb
	mov r2, #0x100
	b _02095A14
_0209589C:
	mov r0, r4
	mov r1, sb
	mov r2, #0x200

	arm_func_start LAB_020958a8
LAB_020958a8: ; 0x020958A8
	b _02095A14
	arm_func_end LAB_020958a8
_020958AC:
	mov r0, r4
	mov r1, sb
	mov r2, #0x400
	b _02095A14
_020958BC:
	mov r0, r4

	arm_func_start LAB_020958c0
LAB_020958c0: ; 0x020958C0
	mov r1, sb
	arm_func_end LAB_020958c0

	arm_func_start LAB_020958c4
LAB_020958c4: ; 0x020958C4
	mov r2, #0x800
	arm_func_end LAB_020958c4

	arm_func_start LAB_020958c8
LAB_020958c8: ; 0x020958C8
	b _02095A14
	arm_func_end LAB_020958c8
_020958CC:
	mov r0, r4

	arm_func_start LAB_020958d0
LAB_020958d0: ; 0x020958D0
	mov r1, sb
	arm_func_end LAB_020958d0

	arm_func_start LAB_020958d4
LAB_020958d4: ; 0x020958D4
	mov r2, #0x1000
	b _02095A14
	arm_func_end LAB_020958d4
_020958DC:
	mov r0, r4
	mov r1, sb
	mov r2, #0x2000
	b _02095A14
_020958EC:
	mov r0, r4
	mov r1, sb
	mov r2, #0x4000
	b _02095A14
_020958FC:
	mov r0, r4
	mov r1, sb
	mov r2, #0x8000
	b _02095A14
_0209590C:
	mov r0, r4
	mov r1, sb
	mov r2, #0x10000
	b _02095A14
_0209591C:
	mov r0, r4

	arm_func_start LAB_02095920
LAB_02095920: ; 0x02095920
	mov r1, sb
	arm_func_end LAB_02095920

	arm_func_start LAB_02095924
LAB_02095924: ; 0x02095924
	mov r2, #0x20000
	arm_func_end LAB_02095924

	arm_func_start LAB_02095928
LAB_02095928: ; 0x02095928
	b _02095A14
	arm_func_end LAB_02095928
_0209592C:
	mov r0, r4

	arm_func_start LAB_02095930
LAB_02095930: ; 0x02095930
	mov r1, r5
	arm_func_end LAB_02095930

	arm_func_start LAB_02095934
LAB_02095934: ; 0x02095934
	mov r2, r8
	mov r3, #0x40000
	arm_func_end LAB_02095934
_0209593C:
	bl FUN_021D53D4
	b _02095A18
_02095944:
	mov r0, r4
	mov r1, r5
	mov r2, r8
	mov r3, #0x80000
	b _0209593C
_02095958:
	mov r0, r4
	mov r1, r5
	mov r2, r8
	mov r3, #0x100000
	b _0209593C
_0209596C:
	mov r0, r4
	mov r1, r5
	mov r2, r8
	mov r3, #0x200000
	b _0209593C
_02095980:
	mov r0, r4
	mov r1, r5
	mov r2, r8
	mov r3, #0x400000
	b _0209593C
_02095994:
	mov r0, r4
	mov r1, sb
	mov r2, #0x800000
	b _02095A14
_020959A4:
	mov r0, r4
	mov r1, r5
	mov r2, r8
	mov r3, #0x1000000
	b _0209593C
_020959B8:
	mov r0, r4
	mov r1, sb
	mov r2, #0x2000000
	b _02095A14
_020959C8:
	mov r0, r4
	mov r1, sb
	mov r2, #0x4000000
	b _02095A14
_020959D8:
	mov r0, r4
	mov r1, sb
	mov r2, #0x8000000
	b _02095A14
_020959E8:
	mov r0, r4
	mov r1, sb
	mov r2, #0x10000000
	b _02095A14
_020959F8:
	mov r0, r4
	mov r1, sb
	mov r2, #0x20000000
	b _02095A14
_02095A08:
	mov r0, r4
	mov r1, sb
	mov r2, #0x40000000
_02095A14:
	bl FUN_021D53C4
_02095A18:
	ldr r0, [sp, #0xc]
	add r0, r0, #1
	str r0, [sp, #0xc]
	cmp r0, #6
	blt _02095664
	ldr r0, [sp, #8]
	add r0, r0, #1

	arm_func_start LAB_02095a34
LAB_02095a34: ; 0x02095A34
	str r0, [sp, #8]
	cmp r0, r8
	blt _02095638
	add sp, sp, #0x118
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02095A48: .word 0x0209BA20
	arm_func_end LAB_02095a34

	arm_func_start FUN_02095a4c
FUN_02095a4c: ; 0x02095A4C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x18
	ldr r6, _02096530 ; =0x0209BA20
	mov r4, r0
	mov r0, r6
	mov r5, #1
	mov sl, #0
	bl FUN_0210EAA4
	mov sb, r0
	mov r0, r6
	bl FUN_0210EAAC
	mov r8, sl
	mov fp, r0
	mov r0, r6
	mov r1, r8
	bl FUN_0210DDBC
	str r0, [sp, #0x10]
	mov r0, r6
	mov r1, r5
	bl FUN_0210DDBC
	str r0, [sp, #0x14]
	b _02095AC0
	arm_func_end FUN_02095a4c
_02095AA4:
	lsr r1, r8, #0x1f
	ldr r2, [r4, #0x1c8]
	rsb r0, r1, r8, lsl #27
	add r2, r2, r8, lsl #4
	add r0, r1, r0, ror #27
	strb r0, [r2, #0xc]
	add r8, r8, #1
_02095AC0:
	cmp r8, #0x40
	blt _02095AA4
	ldr r0, _02096534 ; =0x02099F78
	ldr r1, _02096538 ; =0x02160304
	bl FUN_020DD1D0
	mov r7, r0
	cmp r7, #0
	ble _02095AE8
	cmp r7, #0x1e
	ble _02095AEC
_02095AE8:
	mov r7, #0xe
_02095AEC:
	mov r0, r7
	bl FUN_020BB024
	mov r6, #0x3d800000
	mov r1, r0
	mov r0, r6
	bl FUN_020BB9B4
	mov r1, #0
	bl FUN_020BAEE8
	mov r0, r7
	bls _02095B40
	bl FUN_020BB024
	mov r1, r0
	mov r0, r6
	bl FUN_020BB9B4
	mov r1, r0
	sub r0, r6, #0xf8000000
	bl FUN_020BB9B4
	mov r1, r0
	mov r0, #0x3f000000

	arm_func_start LAB_02095b38
LAB_02095b38: ; 0x02095B38
	bl FUN_020BBB94
	arm_func_end LAB_02095b38

	arm_func_start LAB_02095b3c
LAB_02095b3c: ; 0x02095B3C
	b _02095B64
	arm_func_end LAB_02095b3c
_02095B40:
	bl FUN_020BB024

	arm_func_start LAB_02095b44
LAB_02095b44: ; 0x02095B44
	mov r1, r0
	arm_func_end LAB_02095b44

	arm_func_start LAB_02095b48
LAB_02095b48: ; 0x02095B48
	mov r0, r6
	arm_func_end LAB_02095b48

	arm_func_start LAB_02095b4c
LAB_02095b4c: ; 0x02095B4C
	bl FUN_020BB9B4
	arm_func_end LAB_02095b4c

	arm_func_start LAB_02095b50
LAB_02095b50: ; 0x02095B50
	mov r1, r0
	arm_func_end LAB_02095b50

	arm_func_start LAB_02095b54
LAB_02095b54: ; 0x02095B54
	sub r0, r6, #0xf8000000
	arm_func_end LAB_02095b54

	arm_func_start LAB_02095b58
LAB_02095b58: ; 0x02095B58
	bl FUN_020BB9B4
	arm_func_end LAB_02095b58

	arm_func_start LAB_02095b5c
LAB_02095b5c: ; 0x02095B5C
	mov r1, #0x3f000000
	bl FUN_020BBDC4
	arm_func_end LAB_02095b5c
_02095B64:
	bl FUN_020BB6CC
	str r0, [r4, #0x5b4]
	ldr r0, _02096534 ; =0x02099F78

	arm_func_start LAB_02095b70
LAB_02095b70: ; 0x02095B70
	ldr r1, _0209653C ; =0x02160314
	bl FUN_020DD1D0
	mov r7, r0
	cmp r7, #0
	ble _02095B8C
	cmp r7, #0x1e
	ble _02095B90
	arm_func_end LAB_02095b70
_02095B8C:
	mov r7, #7
_02095B90:
	mov r0, r7
	bl FUN_020BB024
	ldr r6, _02096540 ; =0x3C4CCCCD
	mov r1, r0
	mov r0, r6
	bl FUN_020BB9B4
	mov r1, #0
	bl FUN_020BAEE8
	mov r0, r7
	bls _02095BE4

	arm_func_start LAB_02095bb8
LAB_02095bb8: ; 0x02095BB8
	bl FUN_020BB024
	arm_func_end LAB_02095bb8

	arm_func_start LAB_02095bbc
LAB_02095bbc: ; 0x02095BBC
	mov r1, r0
	arm_func_end LAB_02095bbc

	arm_func_start LAB_02095bc0
LAB_02095bc0: ; 0x02095BC0
	mov r0, r6
	bl FUN_020BB9B4
	mov r1, r0
	ldr r0, _02096544 ; =0x45800000
	bl FUN_020BB9B4
	mov r1, r0
	mov r0, #0x3f000000
	bl FUN_020BBB94
	b _02095C08
	arm_func_end LAB_02095bc0
_02095BE4:
	bl FUN_020BB024
	mov r1, r0
	mov r0, r6
	bl FUN_020BB9B4
	mov r1, r0
	ldr r0, _02096544 ; =0x45800000
	bl FUN_020BB9B4
	mov r1, #0x3f000000
	bl FUN_020BBDC4
_02095C08:
	ldr r6, _02096530 ; =0x0209BA20
	bl FUN_020BB6CC
	str r0, [r4, #0x5b8]
	ldr r0, _02096534 ; =0x02099F78
	ldr r1, _02096548 ; =0x02160324
	bl FUN_020DD1D0

	arm_func_start LAB_02095c20
LAB_02095c20: ; 0x02095C20
	mov r7, r0
	arm_func_end LAB_02095c20

	arm_func_start LAB_02095c24
LAB_02095c24: ; 0x02095C24
	cmp r7, #0
	arm_func_end LAB_02095c24

	arm_func_start LAB_02095c28
LAB_02095c28: ; 0x02095C28
	movle r7, #0x1000
	arm_func_end LAB_02095c28

	arm_func_start LAB_02095c2c
LAB_02095c2c: ; 0x02095C2C
	mov r0, r4
	arm_func_end LAB_02095c2c

	arm_func_start LAB_02095c30
LAB_02095c30: ; 0x02095C30
	mov r1, sl
	arm_func_end LAB_02095c30

	arm_func_start LAB_02095c34
LAB_02095c34: ; 0x02095C34
	mov r2, sl
	arm_func_end LAB_02095c34

	arm_func_start LAB_02095c38
LAB_02095c38: ; 0x02095C38
	str r7, [r4, #0x5bc]
	arm_func_end LAB_02095c38

	arm_func_start LAB_02095c3c
LAB_02095c3c: ; 0x02095C3C
	str sl, [r4, #0x5c0]
	arm_func_end LAB_02095c3c

	arm_func_start LAB_02095c40
LAB_02095c40: ; 0x02095C40
	bl FUN_021E1C7C
	arm_func_end LAB_02095c40

	arm_func_start LAB_02095c44
LAB_02095c44: ; 0x02095C44
	mov r0, r4
	arm_func_end LAB_02095c44

	arm_func_start LAB_02095c48
LAB_02095c48: ; 0x02095C48
	mov r1, r5
	mov r2, sl
	bl FUN_021E1C7C
	strb r5, [r6, #0x88c]
	sub r0, r5, #2
	str r0, [r4, #0x384]
	strb sl, [r4, #0x344]
	mov r0, r4
	str sl, [sp]
	mov r1, sl
	mov r2, #8
	mov r3, sl
	bl FUN_021E467C
	add r0, r4, #0x200
	strb r5, [r4, #0x348]
	strb r5, [r4, #0x347]
	strb r5, [r4, #0x376]
	strb sl, [r4, #0x325]
	strb sl, [r4, #0x324]
	str sl, [r4, #0x1e4]
	strh sl, [r0, #0xea]
	strh sl, [r0, #0xe8]
	ldrb r0, [sb, #0xe]
	cmp r0, #5
	bhi _02095D10
	ldr r6, _0209654C ; =0x020A0640
	arm_func_end LAB_02095c48

	arm_func_start switchD
switchD: ; 0x02095CB0
	add pc, pc, r0, lsl #2
	mov r0, r0
	arm_func_end switchD

	arm_func_start caseD_0
caseD_0: ; 0x02095CB8
	b _02095D10
	arm_func_end caseD_0

	arm_func_start caseD_1
caseD_1: ; 0x02095CBC
	b _02095CD0
	arm_func_end caseD_1

	arm_func_start caseD_2
caseD_2: ; 0x02095CC0
	b _02095CE4
	arm_func_end caseD_2

	arm_func_start caseD_3
caseD_3: ; 0x02095CC4
	b _02095CEC
	arm_func_end caseD_3

	arm_func_start caseD_4
caseD_4: ; 0x02095CC8
	b _02095D00
	arm_func_end caseD_4

	arm_func_start caseD_5
caseD_5: ; 0x02095CCC
	b _02095D08
	arm_func_end caseD_5
_02095CD0:
	mov r0, r4
	strb r5, [r4, #0x39a]
	bl FUN_021E370C
	strb sl, [r6, #0x8f]
	b _02095D10
_02095CE4:
	mov r0, #3
	b _02095D0C
_02095CEC:
	mov r0, r4
	strb r5, [r4, #0x39a]
	bl FUN_021E370C
	mov r0, #6
	b _02095D0C
_02095D00:
	mov r0, #9
	b _02095D0C
_02095D08:
	mov r0, #0xc
_02095D0C:
	strb r0, [r6, #0x8f]
_02095D10:
	ldr r6, _02096530 ; =0x0209BA20
	ldr r8, _0209654C ; =0x020A0640
	mov r0, r6
	mov r5, #1
	mov r7, #0
	bl FUN_0210EAC4
	cmp r0, #0
	beq _02095D78
	ldr r0, _02096550 ; =0x0209A13C
	ldr r2, [r4, #0x5b8]
	ldr r1, [r0]
	mov r0, r4
	bl FUN_02096a38
	ldr r0, _02096554 ; =0x0209A380
	ldr r1, [sp, #0x10]
	str r0, [r4, #0x198]
	str r0, [r6, #0x7bc]
	ldrh r2, [r1, #0x24]
	ldr r0, [sp, #0x14]
	ldrh r1, [r0, #0x24]
	ldr r0, _02096558 ; =0x0209A454
	str r2, [sp, #8]
	strb r5, [r0, #0x30]
	str r1, [sp, #0xc]
	strb r7, [r0, #0x31]
	b _02095E0C
_02095D78:
	ldr r0, _02096550 ; =0x0209A13C
	ldr r2, [r4, #0x5b8]
	ldr r1, [r0]
	mov r0, r4
	bl FUN_02096a38
	ldr r0, _0209655C ; =0x0209A320
	ldr r1, [sp, #0x10]
	str r0, [r4, #0x198]
	str r0, [r6, #0x7bc]
	ldrh r5, [r1, #0x22]
	ldr r0, [sp, #0x14]
	ldr r2, _02096558 ; =0x0209A454
	ldrh r3, [r0, #0x22]
	mov r1, r7
	mov r0, r6
	strb r1, [r2, #0x31]
	str r5, [sp, #8]
	str r3, [sp, #0xc]
	strb r1, [r2, #0x30]
	bl FUN_0210DECC
	mov r0, r6
	mov r1, #1
	bl FUN_0210DECC
	ldrb r0, [r8, #0x1a]
	cmp r0, #0
	ldreq r0, _02096560 ; =0x02099E98
	ldrbeq r0, [r0]
	cmpeq r0, #0
	beq _02095E0C
	mov r0, r6
	mov r1, r7
	mov r2, r7
	bl FUN_0210DE80
	mov r0, r6
	mov r2, r7
	mov r1, #1
	bl FUN_0210DE80
_02095E0C:
	ldr r0, [r4, #0x198]
	ldr r1, [r0]
	ldr r1, [r1, #0xc]
	blx r1
	ldr r0, [sp, #8]
	mov r8, #0
	cmp r0, #0
	ldrhlt r0, [sb, #0x18]
	mov r1, r8
	strlt r0, [sp, #8]
	ldr r0, [sp, #0xc]
	cmp r0, #0
	ldrhlt r0, [sb, #0x1a]
	strlt r0, [sp, #0xc]
	mov r0, r4
	bl FUN_021DF5F0
	mov r2, r0
	ldr r1, [sp, #8]
	mov r0, r6
	mov r3, r8
	bl FUN_0210B494
	mov r0, r4
	mov r1, #1
	bl FUN_021DF5F0
	mov r2, r0
	ldr r1, [sp, #0xc]
	mov r0, r6
	mov r3, r8
	bl FUN_0210B494
	ldr r6, _0209654C ; =0x020A0640
	mov r5, #1
	add r2, sp, #0x10
	b _02095EB4
_02095E90:
	ldr r1, [r2, r8, lsl #2]
	ldrh r0, [r1, #0x28]
	cmp r0, #0
	bne _02095EB0
	add r0, sb, r8, lsl #1
	ldrh r0, [r0, #6]
	cmp r0, #0
	strhne r0, [r1, #0x28]
_02095EB0:
	add r8, r8, #1
_02095EB4:
	cmp r8, #2
	blt _02095E90
	ldr r0, _02096530 ; =0x0209BA20
	bl FUN_020EB478
	mov r1, r7
	mov r2, #0x880
	bl FUN_020A32A8
	mov r1, r7
	add r0, r4, #0x19c
	mov r2, #0xe
	bl FUN_020A32A8
	mov r8, #0x18
	add r0, r4, #0x164
	mov r1, r7
	mov r2, r8
	bl FUN_020A32A8
	add r0, r4, #0x17c
	mov r1, r7
	mov r2, r8
	bl FUN_020A32A8
	sub r0, r8, #0x19
	strb r0, [r4, #0x1a7]
	ldrb r0, [r6, #0x8f]
	cmp r0, #0xc
	mov r0, r4
	beq _02095F40
	mov r1, r5
	bl FUN_021E00AC
	ldrb r0, [fp, #4]
	cmp r0, #1
	mov r0, r4
	beq _02095F38
	b _02095F4C
_02095F38:
	mov r1, r5
	b _02095F50
_02095F40:
	mov r1, #8
	bl FUN_021E00AC
	mov r0, r4
_02095F4C:
	mov r1, r7
_02095F50:
	bl FUN_021E0098
	mov r8, #0
	mov r0, r4
	mov r1, r8
	bl FUN_021E00F0
	sub r5, r8, #1
	str r8, [r4, #0x1b4]
	str r8, [r4, #0x1b8]
	strb r5, [r4, #0x19e]
	mov sl, #0x18
	b _02095FB8
_02095F7C:
	ldr r0, [r4, #0x204]
	mov r1, r7
	mla r6, r8, sl, r0
	mov r0, r6
	mov r2, #0x18
	bl FUN_020A32A8
	mov r1, r7
	b _02095FAC
_02095F9C:
	add r0, r6, r1
	strb r5, [r0, #4]
	strb r5, [r0, #7]
	add r1, r1, #1
_02095FAC:
	cmp r1, #3
	blt _02095F9C
	add r8, r8, #1
_02095FB8:
	cmp r8, #0x10
	blt _02095F7C
	mov r8, #0
	sub r1, r8, #1
	str r1, [sp, #4]
	ldr r0, _02096564 ; =0x0209A2C0
	str r8, [r4, #0x1c0]
	str r8, [r4, #0x1bc]
	str r1, [r0, #0x48]
	ldr r2, [sp, #4]
	mov r1, r8
	str r2, [r0, #0x4c]
	bl FUN_021CB514
	mov r0, r4
	bl FUN_02095224
	add r0, r4, #0x6c
	strb r8, [r4, #0x36d]
	bl FUN_020DBDEC
	mov r0, r4
	bl FUN_021DEE4C
	ldr r0, _02096530 ; =0x0209BA20
	ldr r0, [r0, #0x860]
	bl FUN_020DF57C
	ldr r0, _02096530 ; =0x0209BA20
	mov r1, r8
	mov r2, r8
	bl FUN_0210DDD8
	mov r5, #2
	add r0, r4, #0x320
	mov r1, r8
	mov r2, r5
	bl FUN_020A32A8
	add r0, r4, #0x22
	mov r2, r5
	add r0, r0, #0x300
	mov r1, r8
	bl FUN_020A32A8
	mov r5, #4
	ldr r0, [r4, #0x200]
	mov r1, r8
	mov r2, r5
	strb r8, [r4, #0x19f]
	bl FUN_020A32A8
	ldr r0, [r4, #0x20c]
	mov r1, r8
	mov r2, r5
	strb r8, [r4, #0x1a5]
	bl FUN_020A32A8
	mov r0, r4
	bl FUN_021E37BC
	ldr r0, [r4, #0x208]
	mov r2, r5
	mov r1, r8
	strb r8, [r4, #0x1a3]
	bl FUN_020A32A8
	b _02096100
_02096098:
	mov r0, #0x30
	mul r5, r8, r0
	ldr r6, [r4, #0x208]
	mov r1, r7
	add sl, r6, r5
	mov r0, sl
	mov r2, #0x30
	bl FUN_020A32A8
	mov r0, #0xff
	strb r0, [r6, r5]
	ldr r0, [sp, #4]
	add r8, r8, #1
	strb r0, [sl, #0x20]
	strh r7, [sl, #0x22]
	strb r0, [sl, #0x24]
	strh r7, [sl, #0x26]
	strb r0, [sl, #0x28]
	ldrb r0, [sl, #0x29]
	bic r0, r0, #0xf
	and r0, r0, #0xff
	bic r0, r0, #0xf0
	strb r0, [sl, #0x29]
	strh r7, [sl, #0x2a]
	strh r7, [sl, #0x2c]
	strb r7, [sl, #0x2e]
	strb r7, [sl, #0x2f]
_02096100:
	cmp r8, #0x10
	blt _02096098

	arm_func_start LAB_02096108
LAB_02096108: ; 0x02096108
	ldr r0, _02096568 ; =0x0209A114
	arm_func_end LAB_02096108

	arm_func_start LAB_0209610c
LAB_0209610c: ; 0x0209610C
	ldr r5, _02096530 ; =0x0209BA20
	arm_func_end LAB_0209610c

	arm_func_start LAB_02096110
LAB_02096110: ; 0x02096110
	ldr r1, [r0]
	arm_func_end LAB_02096110

	arm_func_start LAB_02096114
LAB_02096114: ; 0x02096114
	cmp r1, #0
	arm_func_end LAB_02096114

	arm_func_start LAB_02096118
LAB_02096118: ; 0x02096118
	beq _0209613C
	arm_func_end LAB_02096118

	arm_func_start LAB_0209611c
LAB_0209611c: ; 0x0209611C
	ldr r3, _0209656C ; =0x0209A720
	arm_func_end LAB_0209611c

	arm_func_start LAB_02096120
LAB_02096120: ; 0x02096120
	ldr r1, [r3, #0xe8]
	arm_func_end LAB_02096120

	arm_func_start LAB_02096124
LAB_02096124: ; 0x02096124
	str r1, [sp]
	arm_func_end LAB_02096124

	arm_func_start LAB_02096128
LAB_02096128: ; 0x02096128
	ldr r0, [r0]
	arm_func_end LAB_02096128

	arm_func_start LAB_0209612c
LAB_0209612c: ; 0x0209612C
	ldr r1, [r3, #0xdc]
	arm_func_end LAB_0209612c

	arm_func_start LAB_02096130
LAB_02096130: ; 0x02096130
	ldr r2, [r3, #0xe0]
	arm_func_end LAB_02096130

	arm_func_start LAB_02096134
LAB_02096134: ; 0x02096134
	ldr r3, [r3, #0xe4]
	arm_func_end LAB_02096134

	arm_func_start LAB_02096138
LAB_02096138: ; 0x02096138
	bl FUN_02179E78
	arm_func_end LAB_02096138
_0209613C:
	mov r8, #0

	arm_func_start LAB_02096140
LAB_02096140: ; 0x02096140
	mov r0, r5
	mov r1, r8
	bl FUN_0210DDFC
	mov r6, #0x10
	mov r1, r8
	mov r2, r6
	bl FUN_020A32A8
	mov r0, r5
	arm_func_end LAB_02096140

	arm_func_start LAB_02096160
LAB_02096160: ; 0x02096160
	mov r1, #1
	bl FUN_0210DDFC
	mov r2, r6
	mov r1, r8
	bl FUN_020A32A8
	ldr r0, [r4, #0x210]
	mov r1, r8
	mov r2, #4
	strb r8, [r4, #0x1a4]
	bl FUN_020A32A8
	ldr r5, _0209654C ; =0x020A0640
	ldr r6, _02096530 ; =0x0209BA20
	b _020961A0
	arm_func_end LAB_02096160
_02096194:
	ldr r0, [r4, #0x210]
	strb r7, [r0, r8]
	add r8, r8, #1
_020961A0:
	cmp r8, #4
	blt _02096194
	mov r8, #4
	ldr r0, [r4, #0x20c]
	mov r1, r7
	mov r2, r8
	strb r7, [r4, #0x1a5]
	bl FUN_020A32A8
	sub r1, r8, #5
	add r0, r4, #0x300
	mov r8, #0x40
	strh r7, [r0, #0x18]
	str r7, [r4, #0x1ac]
	str r7, [r4, #0x1b0]
	strb r7, [r4, #0x364]
	strb r7, [r4, #0x365]
	strb r7, [r4, #0x331]
	str r1, [r4, #0x1d0]
	str r1, [r4, #0x1cc]
	str r1, [r4, #0x1d8]
	str r1, [r4, #0x1d4]
	str r1, [r4, #0x1e0]
	str r1, [r4, #0x1dc]
	strb r7, [r6, #0x88b]
	mov r0, r4
	mov r1, r7
	mov r2, r7
	mov r3, r8
	strb r7, [r4, #0x366]
	strb r7, [r4, #0x367]
	str r7, [r4, #0x370]
	str r7, [r4, #0x4c0]
	strb r7, [r4, #0x3ba]
	strb r7, [r4, #0x3b9]
	bl FUN_021F59B4
	mov r3, r8
	mov r0, r4
	mov r1, #1
	mov r2, r7
	bl FUN_021F59B4
	strb r7, [r4, #0x3bb]
	strb r7, [r4, #0x3bc]
	str r7, [r4, #0x4c4]
	str r7, [r4, #0x4c8]
	str r7, [r4, #0x4cc]
	str r7, [r4, #0x4d0]
	bl FUN_0218C13C
	mov r1, r0

	arm_func_start LAB_02096260
LAB_02096260: ; 0x02096260
	mov r0, r4
	arm_func_end LAB_02096260

	arm_func_start LAB_02096264
LAB_02096264: ; 0x02096264
	bl FUN_021F59E4
	arm_func_end LAB_02096264

	arm_func_start LAB_02096268
LAB_02096268: ; 0x02096268
	ldrb r0, [r5, #0x1a]
	arm_func_end LAB_02096268

	arm_func_start LAB_0209626c
LAB_0209626c: ; 0x0209626C
	cmp r0, #0
	arm_func_end LAB_0209626c

	arm_func_start LAB_02096270
LAB_02096270: ; 0x02096270
	beq _02096284
	arm_func_end LAB_02096270

	arm_func_start LAB_02096274
LAB_02096274: ; 0x02096274
	bl FUN_0218C15C
	arm_func_end LAB_02096274

	arm_func_start LAB_02096278
LAB_02096278: ; 0x02096278
	bl FUN_0218C350
	arm_func_end LAB_02096278

	arm_func_start LAB_0209627c
LAB_0209627c: ; 0x0209627C
	cmp r0, #0
	arm_func_end LAB_0209627c

	arm_func_start LAB_02096280
LAB_02096280: ; 0x02096280
	beq _02096294
	arm_func_end LAB_02096280
_02096284:
	bl FUN_0218C15C

	arm_func_start LAB_02096288
LAB_02096288: ; 0x02096288
	mov r1, r0
	arm_func_end LAB_02096288

	arm_func_start LAB_0209628c
LAB_0209628c: ; 0x0209628C
	mov r0, r4
	bl FUN_021F5A18
	arm_func_end LAB_0209628c
_02096294:
	mov r6, #0
	mov r1, r6
	add r0, r4, #0x214
	mov r2, #0x58
	bl FUN_020A32A8
	add r5, r4, #0xa4
	b _020962BC
_020962B0:
	add r0, r5, r6, lsl #3
	bl FUN_020DBDEC
	add r6, r6, #1
_020962BC:
	cmp r6, #2
	blt _020962B0
	mov r5, #0
	b _020962E0
_020962CC:
	mov r0, r4
	mov r1, r5
	bl FUN_021E0128
	bl FUN_020DBDEC
	add r5, r5, #1
_020962E0:
	cmp r5, #5
	blt _020962CC
	mov r0, r4
	bl FUN_021D1BBC
	mov r0, r4
	bl FUN_021E0C74
	mov r0, r4
	mov r1, r7
	bl FUN_021E0330
	mov r0, r4
	bl FUN_021C8FD0
	mov r0, r4
	bl FUN_021D770C
	mov r0, r4
	bl FUN_021D775C
	mov r0, r4

	arm_func_start LAB_02096320
LAB_02096320: ; 0x02096320
	bl FUN_021D773C
	mov r0, r4
	bl FUN_021ED890
	mov r0, r4
	bl FUN_021E05A0
	mov r0, r4
	bl FUN_021D4B3C
	add r0, r4, #0x2e4
	mov r1, r7
	mov r2, #4
	bl FUN_020A32A8
	ldr r2, _02096570 ; =0x0209A820
	ldr r1, _02096574 ; =0x0208F6F0
	ldrh r3, [r2, #0x6c]
	ldr r0, _0209656C ; =0x0209A720
	str r3, [r1, #0x28]
	ldrh r2, [r2, #0x6e]
	str r2, [r1, #0x2c]
	ldrh r2, [r0, #0xca]
	cmp r2, #0
	cmpne r2, #0xf4
	ldreq r0, _02096578 ; =0x021602C0
	ldreq r0, [r0, #0x10]
	streq r0, [r4, #0x288]
	beq _020963B4
	mov r0, #0x6000
	mul r1, r2, r0
	mov r0, #0x29
	umull r3, r2, r1, r0
	mla r2, r1, r7, r2
	asr r1, r1, #0x1f
	adds r3, r3, #0x800
	mla r2, r1, r0, r2
	adc r0, r2, r7
	lsr r1, r3, #0xc
	orr r1, r1, r0, lsl #20
	str r1, [r4, #0x288]
	arm_func_end LAB_02096320
_020963B4:
	add r0, r4, #0x49
	mov r8, #0
	mov r6, #0xc
	mov r1, r8
	mov r2, r6
	add r0, r0, #0x300
	mov r5, #1
	bl FUN_020A32A8
	add r0, r4, #0x55
	mov r1, r8
	mov r2, r6
	add r0, r0, #0x300
	bl FUN_020A32A8
	ldrb r0, [sb, #0x1c]
	ldr r6, _02096530 ; =0x0209BA20
	mov r1, r7
	cmp r0, #0
	movne r8, r5
	mov r0, r6
	mov r2, r5
	mov r3, r5
	strb r8, [r4, #0x361]
	bl FUN_020E911C
	mov r0, r6
	mov r1, r5
	mov r2, r5
	mov r3, r5
	bl FUN_020E911C
	mov r0, r6
	mov r1, r7
	bl FUN_020E7EF0
	strb r0, [r4, #0x326]
	mov r0, r6
	mov r1, r5
	bl FUN_020E7EF0
	ldr r1, _0209657C ; =0x0209A0DC
	str r7, [r4, #0x1c4]
	strb r0, [r4, #0x327]
	ldrb r0, [r1]
	cmp r0, #0
	bne _020964CC
	mov r0, fp
	ldr r8, _0209654C ; =0x020A0640
	bl FUN_0210F70C
	cmp r0, #0
	beq _020964CC
	mov r5, #0xe10
	mov r0, r5
	bl FUN_0218B1F4
	ldrh r1, [fp, #8]
	mov r6, #0x1e
	mla r2, r1, r6, r0
	mov r0, r5
	str r2, [r8, #8]
	bl FUN_0218B1F4
	ldrh r1, [fp, #8]
	lsr r5, r5, #1
	mla r2, r1, r6, r0
	mov r0, r5
	str r2, [r8, #0xc]
	bl FUN_0218B1F4
	ldrh r1, [fp, #0xa]
	mla r2, r1, r6, r0
	mov r0, r5
	str r2, [r8, #0x10]
	bl FUN_0218B1F4
	ldrh r1, [fp, #0xa]
	mla r0, r1, r6, r0
	str r0, [r8, #0x14]
	b _02096504
_020964CC:
	ldrh r2, [fp, #8]
	mov r0, #0x1e
	ldr r1, _0209654C ; =0x020A0640
	mul r3, r2, r0
	str r3, [r1, #8]
	ldrh r2, [fp, #8]
	mul r3, r2, r0
	str r3, [r1, #0xc]
	ldrh r2, [fp, #0xa]
	mul r3, r2, r0
	str r3, [r1, #0x10]
	ldrh r2, [fp, #0xa]
	mul r0, r2, r0
	str r0, [r1, #0x14]
_02096504:
	mov r0, r4
	mov r1, r7
	strb r7, [r4, #0x3b4]
	strb r7, [r4, #0x3b5]
	strb r7, [r4, #0x3b6]
	bl FUN_021E3718
	mov r0, r4

	arm_func_start LAB_02096520
LAB_02096520: ; 0x02096520
	bl FUN_021E4AD0
	arm_func_end LAB_02096520

	arm_func_start LAB_02096524
LAB_02096524: ; 0x02096524
	strb r7, [r4, #0x5b1]
	arm_func_end LAB_02096524

	arm_func_start LAB_02096528
LAB_02096528: ; 0x02096528
	add sp, sp, #0x18
	arm_func_end LAB_02096528

	arm_func_start LAB_0209652c
LAB_0209652c: ; 0x0209652C
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02096530: .word 0x0209BA20
_02096534: .word 0x02099F78
_02096538: .word 0x02160304
_0209653C: .word 0x02160314
_02096540: .word 0x3C4CCCCD
_02096544: .word 0x45800000
_02096548: .word 0x02160324
_0209654C: .word 0x020A0640
_02096550: .word 0x0209A13C
_02096554: .word 0x0209A380
_02096558: .word 0x0209A454
_0209655C: .word 0x0209A320
_02096560: .word 0x02099E98
_02096564: .word 0x0209A2C0
_02096568: .word 0x0209A114
_0209656C: .word 0x0209A720
_02096570: .word 0x0209A820
_02096574: .word 0x0208F6F0
_02096578: .word 0x021602C0
_0209657C: .word 0x0209A0DC
	arm_func_end LAB_0209652c

	arm_func_start FUN_02096580
FUN_02096580: ; 0x02096580
	push {r4, r5, r6, r7, r8, lr}
	sub sp, sp, #8
	ldr r7, _0209672C ; =0x0209BA20
	mov r5, r0
	mov r0, r7
	bl FUN_0210EAAC
	mov r6, #0
	ldr r2, _02096730 ; =0x0209A454
	mov r4, r0
	mov r0, r7
	mov r1, r6
	strb r6, [r2, #0x39]
	bl FUN_0210DDBC
	str r0, [sp]
	mov r0, r7
	mov r1, #1
	bl FUN_0210DDBC
	str r0, [sp, #4]
	mov r0, r7
	strb r6, [r5, #0x344]
	bl FUN_0210EAC4
	cmp r0, #0
	beq _020965E4
	mov r0, r5
	arm_func_end FUN_02096580

	arm_func_start LAB_020965e0
LAB_020965e0: ; 0x020965E0
	bl FUN_021EE478
	arm_func_end LAB_020965e0
_020965E4:
	mov r0, r5
	bl FUN_02096740
	ldr r0, [r5, #0x198]
	cmp r0, #0
	beq _02096604
	ldr r1, [r0]
	ldr r1, [r1, #0xc]
	blx r1
_02096604:
	mov r3, #0
	add r2, sp, #0

	arm_func_start LAB_0209660c
LAB_0209660c: ; 0x0209660C
	mov r0, r3
	arm_func_end LAB_0209660c

	arm_func_start LAB_02096610
LAB_02096610: ; 0x02096610
	b _02096620
	arm_func_end LAB_02096610
_02096614:
	ldr r1, [r2, r3, lsl #2]
	add r3, r3, #1
	strh r0, [r1, #0x28]
_02096620:
	cmp r3, #2
	blt _02096614
	ldr r8, _0209672C ; =0x0209BA20
	mov r7, #0
	mov r0, r8
	mov r1, r7
	mov r2, r7
	bl FUN_0210DFF0
	mov r6, #1
	ldr r0, _02096734 ; =0x020A0B00
	mov r1, r6
	bl FUN_0210FEA0
	mov r0, r4
	bl FUN_0210F6AC
	mov r0, r8
	bl FUN_0210AABC
	ldr r0, _02096738 ; =0x0209BE4C
	mov r1, r7
	mov r2, #0x20
	bl FUN_020A32A8
	ldr r0, _0209673C ; =0x0209BEFC
	mov r1, r7
	mov r2, #0x10
	bl FUN_020A32A8
	ldr r0, [sp, #4]
	mov r1, r7
	mov r2, #0x4c
	bl FUN_020A32A8
	mov r0, r5
	mov r1, r6
	mov r2, r7
	bl FUN_021E1C7C
	str r7, [r5, #0x198]
	mov r0, r8
	bl FUN_0210D254
	strb r7, [r5, #0x327]
	strb r7, [r5, #0x326]
	strb r6, [r5, #0x348]
	strb r6, [r5, #0x347]
	strb r6, [r8, #0x889]
	mov r0, r8
	mov r1, r7
	bl FUN_0210EBF0
	mov r0, r8
	mov r1, r7
	bl FUN_0210F0F8
	strb r7, [r8, #0x88c]
	str r7, [r5, #0x270]
	str r7, [r5, #0x274]
	mov r0, r8
	mov r1, r7
	bl FUN_0210DFE8
	strb r7, [r8, #0x885]
	strb r7, [r8, #0x886]
	strb r7, [r5, #0x2d8]
	strb r7, [r5, #0x2d9]
	mov r1, r7
	strb r6, [r5, #0x376]

	arm_func_start LAB_02096708
LAB_02096708: ; 0x02096708
	mov r0, r5
	arm_func_end LAB_02096708

	arm_func_start LAB_0209670c
LAB_0209670c: ; 0x0209670C
	mov r2, r6
	bl FUN_021E1364
	mov r0, r5
	mov r1, r6
	mov r2, r6
	bl FUN_021E1364
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, pc}
	.align 2, 0_0209672C: .word 0x0209BA20
_02096730: .word 0x0209A454
_02096734: .word 0x020A0B00
_02096738: .word 0x0209BE4C
_0209673C: .word 0x0209BEFC
	arm_func_end LAB_0209670c

	arm_func_start FUN_02096740
FUN_02096740: ; 0x02096740
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	ldr r1, _02096A24 ; =0x020A0640
	mov r4, r0
	ldrb r0, [r1, #0x1b]
	mov r6, #0
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	bl FUN_0218BF8C
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r5, _02096A28 ; =0x0209BA20
	mov r0, r5
	bl FUN_020EA4C0
	mov r0, r5
	bl FUN_0210EBF8
	cmp r0, #0
	bne _020968C0
	mov r0, r5
	bl FUN_0210EAC4
	cmp r0, #0
	mov r7, r6
	beq _020967EC
	ldr r5, _02096A2C ; =0x0209A11C
	b _020967D8
	arm_func_end FUN_02096740
_020967A0:
	ldr r0, [r5]
	mov r1, r7
	bl FUN_0210801C
	movs r8, r0
	beq _020967D4
	bl FUN_02108FBC
	cmp r0, #0
	beq _020967D4
	mov r0, r8
	bl FUN_02108520
	mov r1, r0
	mov r0, r4
	bl FUN_021E1A60
_020967D4:
	add r7, r7, #1
_020967D8:
	ldr r0, [r5]
	bl FUN_02107C18
	cmp r7, r0
	blt _020967A0
	b _02096848
_020967EC:
	ldr r5, _02096A2C ; =0x0209A11C
	b _02096840
_020967F4:
	ldr r0, [r5]
	mov r1, r7
	bl FUN_0210801C
	movs r8, r0
	beq _0209683C
	bl FUN_02108F80
	cmp r0, #0
	beq _0209683C
	mov r0, r8
	bl FUN_02108520
	mov r1, r0
	mov r0, r4
	bl FUN_021E1A60
	mov r0, r8
	bl FUN_02108520
	mov r1, r0
	mov r0, r4
	bl FUN_021E1A78
_0209683C:
	add r7, r7, #1
_02096840:
	cmp r7, #0x20
	blt _020967F4
_02096848:
	bl FUN_0218C13C
	mov r1, r0
	mov r0, r4
	mov r2, #1
	bl FUN_021E1364
	cmp r0, #0
	beq _020968C0
	bl FUN_0218C15C
	mov r1, r0
	ldr r0, _02096A28 ; =0x0209BA20
	bl FUN_020EC99C
	movs r4, r0
	ldr r5, _02096A30 ; =0x020A108A
	beq _020968C0
	mov r7, #0
	b _020968B8
_02096888:
	mov r0, r4
	mov r1, r7
	bl FUN_020EB508
	cmp r0, #0
	beq _020968B4
	mov r0, r4
	mov r1, r7
	bl FUN_020EB51C
	mov r1, r0
	mov r0, r5
	bl FUN_020EC250
_020968B4:
	add r7, r7, #1
_020968B8:
	cmp r7, #0x10
	blt _02096888
_020968C0:
	ldr r5, _02096A28 ; =0x0209BA20
	mov r0, r5
	bl FUN_020EA55C
	mov r4, #1
	mov r0, r5
	mov r1, r4
	bl FUN_0210B2FC
	mov r7, #0
	mov r0, r5
	mov r1, r7
	mov r2, r4
	mov r3, r4
	bl FUN_020E911C
	mov r5, #0x200
	mov r4, r5
	mov fp, #0x100
	ldr sb, _02096A2C ; =0x0209A11C
	b _02096A18
_02096908:
	mov r0, r7
	bl FUN_0218B3A0
	movs r8, r0
	beq _02096A14
	bl FUN_02108FD0
	cmp r0, #0
	beq _02096944
	mov r0, r8
	bl FUN_02108FE4
	cmp r0, #0
	bne _02096944
	mov r0, r8
	bl FUN_0218C130
	cmp r0, #1
	bne _02096954
_02096944:
	ldr r0, [sb]
	mov r1, r7
	bl FUN_02107EF8
	b _02096A14
_02096954:
	ldr r1, [r8, #0x84]
	mov r0, r8
	strb r6, [r1, #0x1e]
	ldr r1, [r8, #0x88]
	strh r6, [r1, #0x32]
	ldr r1, [r8, #0x88]
	strb r6, [r1, #0x88]
	bl FUN_02109020
	cmp r0, #0
	beq _02096988
	mov r0, r8
	mov r1, r5
	bl FUN_02108F54
_02096988:
	mov r0, r8
	bl FUN_0210900C
	cmp r0, #0
	beq _020969B0
	mov r0, r8
	mov r1, r4
	bl FUN_02108F40
	mov r0, r8
	mov r1, fp
	bl FUN_02108F54
_020969B0:
	mov r0, r8
	bl FUN_021095FC
	cmp r0, #0
	bne _02096A14
	mov r0, r8
	bl FUN_02108518
	mov r1, r0
	ldr r0, _02096A34 ; =0x0209A0AC
	bl FUN_02108038
	movs sl, r0
	beq _02096A14
	bl FUN_021095FC
	cmp r0, #0
	bne _02096A14
	mov r0, sl
	mov r1, #8
	bl FUN_02108F54
	mov r0, sl
	bl FUN_021095F4
	mov sl, r0
	mov r0, r8
	bl FUN_021095F4
	mov r1, r0
	mov r0, sl
	bl FUN_0210A660
_02096A14:
	add r7, r7, #1
_02096A18:
	cmp r7, #0x20
	blt _02096908
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02096A24: .word 0x020A0640
_02096A28: .word 0x0209BA20
_02096A2C: .word 0x0209A11C
_02096A30: .word 0x020A108A
_02096A34: .word 0x0209A0AC

	arm_func_start FUN_02096a38
FUN_02096a38: ; 0x02096A38
	cmp r1, #0
	ldreq r1, _02096A58 ; =0x0209A13C
	ldr ip, _02096A5C ; =FUN_021589D4
	ldreq r1, [r1]
	str r1, [r0, #0x194]
	mov r0, r1
	ldr r1, _02096A60 ; =0x0209A720
	bx ip
	.align 2, 0_02096A58: .word 0x0209A13C
_02096A5C: .word FUN_021589D4
_02096A60: .word 0x0209A720
	arm_func_end FUN_02096a38
_02096A64:
	.byte 0x04, 0xC0, 0x9F, 0xE5, 0x00, 0x10, 0xA0, 0xE3, 0x1C, 0xFF, 0x2F, 0xE1
	.byte 0xD0, 0x47, 0x14, 0x02

	arm_func_start FUN_02096a74
FUN_02096a74: ; 0x02096A74
	push {r4, r5, r6, lr}
	add r0, r0, #0x100
	ldrsb r5, [r0, #0xa6]
	mov r6, #0
	arm_func_end FUN_02096a74
_02096A84:
	add r0, r5, #1
	and r5, r0, #0x1f
	mov r0, r5
	bl FUN_0218B3A0
	movs r4, r0
	beq _02096AB8
	bl FUN_02108F80
	cmp r0, #0
	beq _02096AB8
	mov r0, r4
	bl FUN_02108FA8
	cmp r0, #0
	bne _02096AC4
_02096AB8:
	add r6, r6, #1
	cmp r6, #0x20
	blt _02096A84
_02096AC4:
	lsl r0, r5, #0x18
	asr r0, r0, #0x18
	pop {r4, r5, r6, pc}

	arm_func_start FUN_02096ad0
FUN_02096ad0: ; 0x02096AD0
	cmp r1, #0
	rsbeq r2, r2, #0
	mov r0, r2
	bx lr
	arm_func_end FUN_02096ad0

	arm_func_start FUN_02096ae0
FUN_02096ae0: ; 0x02096AE0
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #0x10
	mov r7, r1
	ldr r1, [r7, #0x84]
	ldr r6, [sp, #0x30]
	ldr r4, [r1, #4]
	ldr r1, [r1]
	mov r8, r0
	str r1, [sp]
	str r4, [sp, #4]
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	mov r5, #0x15
	add sl, sp, #0
	mov sb, #0
	arm_func_end FUN_02096ae0
_02096B1C:
	mov r0, r8
	mov r1, r5
	bl FUN_021D4B4C
	movs r4, r0
	ldrshne r1, [r4, #0x94]

	arm_func_start LAB_02096b30
LAB_02096b30: ; 0x02096B30
	ldrshne r0, [r7, #0x94]
	arm_func_end LAB_02096b30

	arm_func_start LAB_02096b34
LAB_02096b34: ; 0x02096B34
	cmpne r1, r0
	arm_func_end LAB_02096b34

	arm_func_start LAB_02096b38
LAB_02096b38: ; 0x02096B38
	beq _02096B8C
	arm_func_end LAB_02096b38

	arm_func_start LAB_02096b3c
LAB_02096b3c: ; 0x02096B3C
	mov r0, r8
	arm_func_end LAB_02096b3c

	arm_func_start LAB_02096b40
LAB_02096b40: ; 0x02096B40
	mov r1, r4
	mov r2, r6
	mov r3, r7
	bl FUN_021D4CC8
	cmp r0, #0
	bne _02096B8C
	ldr r0, [r4, #0x88]
	ldrh r0, [r0, #0x1e]
	cmp r0, #0x1e
	bhi _02096B8C
	mov r0, r8
	mov r1, sl
	mov r2, r4
	mov r3, sb
	bl FUN_021EA7EC
	cmp r0, #0
	addne sp, sp, #0x10
	movne r0, #1
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end LAB_02096b40
_02096B8C:
	subs r5, r5, #1

	arm_func_start LAB_02096b90
LAB_02096b90: ; 0x02096B90
	bpl _02096B1C
	arm_func_end LAB_02096b90

	arm_func_start LAB_02096b94
LAB_02096b94: ; 0x02096B94
	mov r0, #0
	arm_func_end LAB_02096b94

	arm_func_start LAB_02096b98
LAB_02096b98: ; 0x02096B98
	add sp, sp, #0x10
	arm_func_end LAB_02096b98

	arm_func_start LAB_02096b9c
LAB_02096b9c: ; 0x02096B9C
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end LAB_02096b9c

	arm_func_start FUN_02096ba0
FUN_02096ba0: ; 0x02096BA0
	push {r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x14
	mov sb, r1
	arm_func_end FUN_02096ba0

	arm_func_start LAB_02096bac
LAB_02096bac: ; 0x02096BAC
	mov r8, r2
	arm_func_end LAB_02096bac

	arm_func_start LAB_02096bb0
LAB_02096bb0: ; 0x02096BB0
	ldr r2, [sb, #0x84]
	ldr r6, [sp, #0x38]
	mov sl, r0
	ldr r0, [r2]
	mov r5, #0x96000
	tst r6, #0x10
	movne r5, #0x78000
	arm_func_end LAB_02096bb0

	arm_func_start LAB_02096bcc
LAB_02096bcc: ; 0x02096BCC
	subs r1, r0, r8
	arm_func_end LAB_02096bcc

	arm_func_start LAB_02096bd0
LAB_02096bd0: ; 0x02096BD0
	ldr r0, [r2, #4]
	mov r7, r3
	rsbmi r1, r1, #0
	subs r2, r0, r7
	arm_func_end LAB_02096bd0

	arm_func_start LAB_02096be0
LAB_02096be0: ; 0x02096BE0
	rsbmi r2, r2, #0
	mov fp, #0
	tst r6, #0x800
	bne _02096C24
	cmp r2, r5
	cmple r1, r5
	addgt sp, sp, #0x14
	movgt r0, #0
	popgt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	bl FUN_020973a0
	mov r4, r0
	cmp r4, r5
	ble _02096C30
	add sp, sp, #0x14
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end LAB_02096be0
_02096C24:
	mov r0, sl
	bl FUN_020973a0
	mov r4, r0
_02096C30:
	and r0, r6, #0xf
	cmp r0, #0xf
	beq _02096CB4
	tst r6, #8
	beq _02096C68
	mov r0, sb
	bl FUN_02108F10
	mov r3, r0
	mov r0, sl
	mov r1, r8
	mov r2, r7
	bl FUN_021EA5A4
	cmp r0, #0
	bne _02096CB4
_02096C68:
	tst r6, #4
	beq _02096C88
	mov r0, sl
	mov r1, sb
	mov r2, r7
	bl FUN_02097304
	cmp r0, #0
	beq _02096CB4
_02096C88:
	tst r6, #1
	beq _02096CA8
	mov r0, sl
	mov r1, sb
	mov r2, r7
	bl FUN_02097304
	cmp r0, #0
	bne _02096CB4
_02096CA8:
	add sp, sp, #0x14
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02096CB4:
	tst r6, #0x100
	bne _02096D10
	mov r0, sb
	bl FUN_0218C130
	bl FUN_020DBA58
	mvn r1, #0
	str r1, [sp]
	stmib sp, {r0, fp}
	add r1, sp, #0x10
	str r1, [sp, #0xc]
	mov r0, sl
	mov r1, r8
	mov r2, r7
	mov r3, #1
	bl FUN_021E7F2C
	cmp r0, #0
	asrne r0, r4, #3
	ldrne r1, [sp, #0x10]
	addne r0, r0, #0x20000
	cmpne r1, r0
	addlt sp, sp, #0x14
	movlt r0, fp
	poplt {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02096D10:
	tst r6, #0x200
	bne _02096D44
	mov r5, #0x10000
	mov r0, sl
	mov r1, sb
	mov r2, r8
	mov r3, r7
	str r5, [sp]
	bl FUN_02096ae0
	cmp r0, #0
	addne sp, sp, #0x14
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02096D44:
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	strne r4, [r0]
	mov r0, #1
	add sp, sp, #0x14
	pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}

	arm_func_start FUN_02096d5c
FUN_02096d5c: ; 0x02096D5C
	push {r4, r5, r6, r7, r8, sb, sl, lr}
	sub sp, sp, #8
	mov r4, #0
	mov r8, r2
	mov r7, r3
	mov sb, r1
	mov r2, r4
	mov r3, r4
	mov sl, r0
	str r4, [sp]
	ldr r6, [sp, #0x28]
	bl FUN_021DAE7C
	ldrsh r2, [sb, #0x94]
	ldrsh r1, [r8, #0x94]
	mov r5, r0
	cmp r2, r1
	addeq sp, sp, #8
	moveq r0, r4
	popeq {r4, r5, r6, r7, r8, sb, sl, pc}
	mov r0, sl
	mov r1, sb
	bl FUN_021D47A0
	cmp r0, #0
	beq _02096DCC
	tst r6, #0x400
	addne sp, sp, #8
	movne r0, r4
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	arm_func_end FUN_02096d5c
_02096DCC:
	mov r0, r8
	bl FUN_02109318
	cmp r0, #0
	addne sp, sp, #8
	movne r0, #0
	popne {r4, r5, r6, r7, r8, sb, sl, pc}
	tst r6, #0x80
	beq _02096E20
	ldr r0, [r8, #0x84]
	ldr r0, [r0, #4]
	cmp r5, r0
	beq _02096E14
	mov r0, sl
	mov r1, r8
	mov r2, r5
	bl FUN_02097304
	cmp r0, #0
	bne _02096E20
_02096E14:
	add sp, sp, #8
	mov r0, #0
	pop {r4, r5, r6, r7, r8, sb, sl, pc}
_02096E20:
	tst r6, #0x100000
	beq _02096E68
	mov r0, sb
	bl FUN_0218C130
	mov r1, r0
	mov r0, sl
	bl FUN_021DF5F0
	cmp r0, #0
	ldreq r1, [sb, #0x84]
	ldreq r0, [r8, #0x84]
	ldrne r1, [r8, #0x84]
	ldrne r0, [sb, #0x84]
	ldr r1, [r1, #4]
	ldr r0, [r0, #4]
	cmp r1, r0
	addlt sp, sp, #8
	movlt r0, #0
	poplt {r4, r5, r6, r7, r8, sb, sl, pc}
_02096E68:
	ldr r4, [sp, #0x2c]
	str r6, [sp]
	mov r0, sl
	mov r1, sb
	ldm r7, {r2, r3}
	str r4, [sp, #4]
	bl FUN_02096ba0
	add sp, sp, #8
	pop {r4, r5, r6, r7, r8, sb, sl, pc}

	arm_func_start FUN_02096e8c
FUN_02096e8c: ; 0x02096E8C
	push {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
	sub sp, sp, #0x40
	mov sl, r0
	str r1, [sp, #0xc]
	mov r0, r1
	ldr r1, [sp, #0x6c]
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	ldr r5, [sp, #0x68]
	str r1, [sp, #0x6c]
	mov r4, #0
	bl FUN_020DBA48
	mov r1, r0
	mov r0, sl
	bl FUN_021E1B18
	cmp r0, #0
	addeq sp, sp, #0x40
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0xc]
	bl FUN_02108FE4
	cmp r0, #0
	beq _02096F00
	mov r0, sl
	bl FUN_021E028C
	cmp r0, #0
	addeq sp, sp, #0x40
	moveq r0, r4
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	arm_func_end FUN_02096e8c
_02096F00:
	ldr r0, [sp, #0xc]
	bl FUN_0218C130
	mov r1, r0
	ldr r0, [sl, #0x198]
	ldr r2, [r0]
	ldr r2, [r2, #0x34]
	blx r2
	cmp r0, #0
	addeq sp, sp, #0x40
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	mov r0, sl
	bl FUN_021E00A0
	cmp r0, #3
	cmpne r0, #5
	addeq sp, sp, #0x40
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	add r0, sp, #0x38
	bl FUN_020DBDEC
	ldr r0, [sp, #0x6c]
	cmp r0, #0
	beq _02096F60
	bl FUN_020DBDEC
_02096F60:
	tst r5, #0x400
	bne _02096F98
	ldr r0, [sp, #0xc]
	bl FUN_020DC3C8
	cmp r0, #0
	addeq sp, sp, #0x40
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0xc]
	bl FUN_02109318
	cmp r0, #0
	addne sp, sp, #0x40
	movne r0, #0
	popne {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02096F98:
	ldr r1, _02097258 ; =0x0209A720
	ldr r0, [sp, #0xc]
	ldr r2, [r1, #0xec]
	ldr r1, [r1, #0xf4]
	add r3, r2, r1
	sub r1, r1, r2
	asr r4, r3, #1
	sub r8, r1, #0x2000
	bl FUN_020DBA48
	mov sb, #0
	mov r1, r0
	mov r0, sl
	mov r2, sb
	bl FUN_021DAEF4
	mov r6, r0
	ldr r1, [sp, #0xc]
	mov r0, sl
	bl FUN_021CAC8C
	tst r5, #6
	movne sb, #1
	str r0, [sp, #0x18]
	cmp sb, #0
	bne _02097014
	ldr r0, [sp, #0x14]
	subs r1, r6, r0
	ldr r0, [sp, #0x18]
	rsbmi r1, r1, #0
	cmp r1, r0
	addgt sp, sp, #0x40
	movgt r0, #0
	popgt {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
_02097014:
	ldr r1, [sp, #0xc]
	mov r0, sl
	mov r2, r6
	bl FUN_02097304
	cmp r0, #0
	addeq sp, sp, #0x40
	moveq r0, #0
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r0, [sp, #0xc]
	bl FUN_020DBA68
	mov r1, r0
	mov r0, sl
	bl FUN_021E0174
	str r0, [sp, #0x20]
	cmp r0, #0
	ldrne r0, [r0, #0x84]
	str r4, [sp, #0x1c]
	ldrne r0, [r0]
	mov r7, #0
	strne r0, [sp, #0x1c]
	asr r0, r8, #1
	add r0, r8, r0, lsr #30
	asr r0, r0, #2
	str r0, [sp, #0x24]
	ldr r0, [sp, #0x14]
	sub r0, r0, r6
	str r0, [sp, #0x28]
	rsb r0, r0, #0
	str r0, [sp, #0x2c]
	and r0, r5, #0x200
	str r0, [sp, #0x30]
	and r0, r5, #0x800
	str r0, [sp, #0x34]
	b _0209721C
_0209709C:
	ldr r0, [sp, #0x24]
	sub r1, r7, #2
	mla r5, r0, r1, r4
	cmp sb, #0
	bne _020970D0
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	mov r0, sl
	stm sp, {r5, r6, sb}
	bl FUN_021DC1C4
	cmp r0, #0
	beq _02097218
_020970D0:
	ldr r0, [sp, #0x10]
	subs r1, r0, r5
	ldr r0, [sp, #0x28]
	rsbmi r1, r1, #0
	cmp r0, #0
	ldrlt r2, [sp, #0x2c]
	movge r2, r0
	cmp sb, #0
	bne _02097108
	mov r0, sl
	bl FUN_020973a0
	ldr r1, [sp, #0x18]
	cmp r0, r1
	bgt _02097218
_02097108:
	cmp sb, #0
	ldreq r0, [sp, #0x30]
	cmpeq r0, #0
	bne _0209713C
	mov r0, #0x10000
	str r0, [sp]
	ldr r1, [sp, #0xc]
	mov r0, sl
	mov r2, r5
	mov r3, r6
	bl FUN_02096ae0
	cmp r0, #0
	bne _02097218
_0209713C:
	ldr r0, [sp, #0x6c]
	cmp r0, #0
	addeq sp, sp, #0x40
	moveq r0, #1
	popeq {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	ldr r1, [sp, #0x20]
	mov r0, sl
	bl FUN_02097280
	cmp r0, #0
	beq _02097178
	ldr r0, [sp, #0x34]
	cmp r0, #0
	bne _02097178
	cmp sb, #0
	beq _020971A8
_02097178:
	ldr r0, [sp, #0x1c]
	subs r8, r5, r4
	rsbmi r8, r8, #0
	cmp r0, r4
	cmplt r5, r4
	blt _020971A0
	ldr r0, [sp, #0x1c]
	cmp r0, r4
	cmpgt r5, r4
	ble _020971BC
_020971A0:
	add r8, r8, #1
	b _020971BC
_020971A8:
	ldr r0, [sp, #0x20]
	ldr r0, [r0, #0x84]
	ldr r0, [r0]
	subs r8, r5, r0
	rsbmi r8, r8, #0
_020971BC:
	add r0, sp, #0x38
	bl FUN_020DC3A0
	cmp r0, #0
	ldr r1, [sp, #0x20]
	mov r0, sl
	strne r5, [sp, #0x38]
	strne r6, [sp, #0x3c]
	movne fp, r8
	bl FUN_02097280
	cmp r0, #0
	beq _020971F4
	ldr r0, [sp, #0x34]
	cmp r0, #0
	beq _02097208
_020971F4:
	cmp r8, fp
	strlt r5, [sp, #0x38]
	movlt fp, r8
	strlt r6, [sp, #0x3c]
	b _02097218
_02097208:
	cmp r8, fp
	strgt r5, [sp, #0x38]
	movgt fp, r8
	strgt r6, [sp, #0x3c]
_02097218:
	add r7, r7, #1
_0209721C:
	cmp r7, #5
	blt _0209709C
	ldr r0, [sp, #0x6c]
	cmp r0, #0
	ldrne r1, [sp, #0x38]
	strne r1, [r0]
	ldrne r1, [sp, #0x3c]
	strne r1, [r0, #4]
	add r0, sp, #0x38
	bl FUN_020DC3A0
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	add sp, sp, #0x40
	pop {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
	.align 2, 0_02097258: .word 0x0209A720
_0209725C:
	.byte 0x08, 0x40, 0x2D, 0xE9
	.byte 0x08, 0xD0, 0x4D, 0xE2, 0x10, 0xC0, 0x9F, 0xE5, 0x0C, 0x00, 0x8D, 0xE8, 0x0C, 0x00, 0x9C, 0xE8
	.byte 0x05, 0xFF, 0xFF, 0xEB, 0x08, 0xD0, 0x8D, 0xE2, 0x08, 0x80, 0xBD, 0xE8, 0xC0, 0xA2, 0x09, 0x02

	arm_func_start FUN_02097280
FUN_02097280: ; 0x02097280
	push {r3, r4, r5, lr}
	movs r4, r1
	mov r5, r0
	beq _020972C8
	mov r0, r4
	bl FUN_02109318
	cmp r0, #0
	bne _020972C8
	mov r0, r4
	bl FUN_02108FA8
	cmp r0, #0
	beq _020972C8
	mov r0, r5
	mov r1, r4
	bl FUN_021D47E0
	cmp r0, #0
	movne r0, #1
	popne {r3, r4, r5, pc}
	arm_func_end FUN_02097280
_020972C8:
	mov r0, #0
	pop {r3, r4, r5, pc}

	arm_func_start FUN_020972d0
FUN_020972d0: ; 0x020972D0
	cmp r1, r2
	moveq r0, #0
	bxeq lr
	mov r0, #1
	cmp r3, #0
	movne r0, #0
	cmp r1, r2
	movlt r1, #1
	movge r1, #0
	teq r0, r1
	movne r0, #1
	moveq r0, #0
	bx lr
	arm_func_end FUN_020972d0

	arm_func_start FUN_02097304
FUN_02097304: ; 0x02097304
	push {r4, r5, r6, lr}
	ldr r3, [r1, #0x84]
	mov r6, r0
	ldrsh r0, [r1, #0x94]
	ldr r4, [r3, #4]
	mov r5, r2
	bl FUN_0218C0C8
	mov r3, r0
	mov r0, r6
	mov r1, r4
	mov r2, r5
	bl FUN_020972d0
	pop {r4, r5, r6, pc}
	arm_func_end FUN_02097304

	arm_func_start FUN_02097338
FUN_02097338: ; 0x02097338
	push {r3, lr}
	ldr r0, [r0, #0x198]
	ldr r2, [r0]
	ldr r2, [r2, #0x30]
	blx r2
	pop {r3, pc}
	arm_func_end FUN_02097338

	arm_func_start FUN_02097350
FUN_02097350: ; 0x02097350
	push {r3, lr}
	ldr ip, [sp, #8]
	subs r2, r2, ip
	rsbmi r2, r2, #0
	subs r1, r1, r3
	rsbmi r1, r1, #0
	bl FUN_020973a0
	pop {r3, pc}
	arm_func_end FUN_02097350
_02097370:
	.byte 0x08, 0x00, 0x9F, 0xE5, 0x08, 0xC0, 0x9F, 0xE5, 0x60, 0x08, 0x90, 0xE5, 0x1C, 0xFF, 0x2F, 0xE1
	.byte 0x20, 0xBA, 0x09, 0x02, 0x2C, 0x3C, 0x04, 0x02, 0x08, 0x00, 0x9F, 0xE5, 0x08, 0xC0, 0x9F, 0xE5
	.byte 0x60, 0x08, 0x90, 0xE5, 0x1C, 0xFF, 0x2F, 0xE1, 0x20, 0xBA, 0x09, 0x02, 0x6C, 0x3C, 0x04, 0x02

	arm_func_start FUN_020973a0
FUN_020973a0: ; 0x020973A0
	ldr r0, _020973B0 ; =0x0209BA20
	ldr ip, _020973B4 ; =FUN_02043b68
	ldr r0, [r0, #0x860]
	bx ip
	.align 2, 0_020973B0: .word 0x0209BA20
_020973B4: .word FUN_02043b68
	arm_func_end FUN_020973a0

	arm_func_start FUN_020973b8
FUN_020973b8: ; 0x020973B8
	push {r3, lr}
	ldr r0, [sp, #8]
	subs r1, r3, r1
	rsbmi r1, r1, #0
	subs r0, r0, r2
	rsbmi r0, r0, #0
	asr r1, r1, #1
	asr ip, r0, #1
	smull r0, r2, r1, r1
	adds r3, r0, #0x800
	smull r1, r0, ip, ip
	adc r2, r2, #0
	adds r1, r1, #0x800
	lsr r3, r3, #0xc
	adc r0, r0, #0
	lsr r1, r1, #0xc
	orr r1, r1, r0, lsl #20
	orr r3, r3, r2, lsl #20
	asr r0, r1, #4
	add r0, r0, r3, asr #4
	bl FUN_020A4ECC
	lsl r0, r0, #3
	pop {r3, pc}
	arm_func_end FUN_020973b8

	arm_func_start FUN_02097414
FUN_02097414: ; 0x02097414
	push {r3, r4, r5, r6, r7, lr}
	mov r6, r0
	ldr r0, _02097504 ; =0x0209BA20
	mov r5, r1
	bl FUN_020EB440
	mov r4, r0
	mov r0, r5
	bl FUN_02109318
	cmp r0, #0
	bne _02097484
	mov r0, r5
	bl FUN_020DC3C8
	cmp r0, #0
	bne _02097484
	ldrh r0, [r4, #0x18]
	add r0, r0, #1
	strh r0, [r4, #0x18]
	ldrh r1, [r4, #0x18]
	ldrsh r0, [r4, #0x1a]
	cmp r1, r0
	ble _02097484
	mov r7, #0
	mov r0, r6
	mov r2, r5
	mov r3, r7
	mov r1, #0x17
	bl FUN_021D5DB0
	strh r7, [r4, #0x18]
	arm_func_end FUN_02097414
_02097484:
	ldr r2, [r5, #0x84]
	ldrb r0, [r2, #0x1c]
	cmp r0, #0
	beq _020974A8
	ldrh r1, [r2, #0x12]
	ldrh r0, [r2, #0x14]
	cmp r1, r0
	movlo r0, #1
	blo _020974AC
_020974A8:
	mov r0, #0
_020974AC:
	cmp r0, #0
	popne {r3, r4, r5, r6, r7, pc}
	mov r0, r6
	mov r1, r5
	bl FUN_021D51EC
	cmp r0, #0
	beq _020974DC
	mov r0, r5
	mov r1, #2
	mov r2, #0x1e
	bl FUN_021094D4
	pop {r3, r4, r5, r6, r7, pc}
_020974DC:
	mov r0, r6
	mov r1, r5
	bl FUN_021D5198
	cmp r0, #0
	popeq {r3, r4, r5, r6, r7, pc}
	mov r0, r5
	mov r1, #8
	mov r2, #0x1e
	bl FUN_021094D4
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_02097504: .word 0x0209BA20

	arm_func_start FUN_02097508
FUN_02097508: ; 0x02097508
	push {r3, r4, r5, r6, r7, lr}
	mov r7, r0
	bl FUN_021D773C
	ldr r0, _0209757C ; =0x0209BA20
	ldr r0, [r0, #0x860]
	bl FUN_020DF57C
	mov r6, #0
	arm_func_end FUN_02097508
_02097524:
	mov r0, r7
	mov r1, r6
	bl FUN_021D4B4C
	movs r5, r0
	beq _0209756C
	mov r0, r7
	mov r1, r5
	bl FUN_021D45E8
	mov r4, r0
	mov r0, r5
	bl FUN_020DC46C
	cmp r0, #0
	ldrshne r0, [r4]
	cmpne r0, #0xa
	beq _0209756C
	mov r0, r7
	mov r1, r5
	bl FUN_021D769C
_0209756C:
	add r6, r6, #1
	cmp r6, #0x16
	blt _02097524
	pop {r3, r4, r5, r6, r7, pc}
	.align 2, 0_0209757C: .word 0x0209BA20

	arm_func_start FUN_02097580
FUN_02097580: ; 0x02097580
	push {r3, r4, r5, lr}
	movs r4, r1
	mov r5, r0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, r4
	bl FUN_02109318
	cmp r0, #0
	movne r0, #0
	popne {r3, r4, r5, pc}
	ldr r0, [r4, #0x88]
	ldrb r0, [r0, #0x2f]
	cmp r0, #0
	moveq r0, #0
	popeq {r3, r4, r5, pc}
	mov r0, r5
	mov r1, r4
	bl FUN_021D9BD4
	mov r0, #1
	pop {r3, r4, r5, pc}
	arm_func_end FUN_02097580

	arm_func_start FUN_020975d0
FUN_020975d0: ; 0x020975D0
	push {r3, lr}
	ldr r2, _02097620 ; =0x0209A2C0
	ldr r0, [r2, #0x48]
	cmp r0, #0
	blt _020975F8
	bl FUN_0218BFF8
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
	arm_func_end FUN_020975d0
_020975F8:
	ldr r0, [r2, #0x4c]
	cmp r0, #0
	blt _02097618
	bl FUN_0218BFF8
	cmp r0, #0
	moveq r0, #1
	movne r0, #0
	pop {r3, pc}
_02097618:
	mov r0, #0
	pop {r3, pc}
	.align 2, 0_02097620: .word 0x0209A2C0
	; 0x02097624
_02097624: ; 0x02097624
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0d, 0x00, 0x02, 0x0c, 0x0d
	0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0xd8, 0x0d, 0x00, 0x02, 0xe8, 0x0d, 0x00, 0x02, 0xf8, 0x0d, 0x00
	0x02, 0x08, 0x0e, 0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x98, 0x0d, 0x00, 0x02, 0xa8, 0x0d, 0x00, 0x02
	0xb8, 0x0d, 0x00, 0x02, 0xc8, 0x0d, 0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x0c
	0x0d, 0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x0c, 0x0d
	0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x0c, 0x0d, 0x00, 0x02, 0x00, 0x00, 0x00
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0x20, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	0x00, 0x00, 0x7e, 0x02, 0x60, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00
